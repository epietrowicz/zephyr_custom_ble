
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   0:	c0 4d 00 20 b5 14 01 00 19 b1 01 00 09 15 01 00     .M. ............
	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
	(void)memset(res + 3, 0, 13);
  10:	09 15 01 00 09 15 01 00 09 15 01 00 00 00 00 00     ................
	...
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
  2c:	25 12 01 00 09 15 01 00 00 00 00 00 d1 11 01 00     %...............
  3c:	b1 ac 01 00                                         ....

00000040 <_irq_vector_table>:
  40:	75 14 01 00 65 c9 01 00 75 14 01 00 75 14 01 00     u...e...u...u...
  50:	75 14 01 00 75 14 01 00 75 14 01 00 75 14 01 00     u...u...u...u...
  60:	2d c9 01 00 75 14 01 00 75 14 01 00 4b c9 01 00     -...u...u...K...
  70:	75 14 01 00 75 14 01 00 75 14 01 00 75 14 01 00     u...u...u...u...
  80:	75 14 01 00 75 14 01 00 75 14 01 00 75 14 01 00     u...u...u...u...
  90:	75 14 01 00 75 14 01 00 75 14 01 00 75 14 01 00     u...u...u...u...
  a0:	75 14 01 00 75 14 01 00 75 14 01 00 75 14 01 00     u...u...u...u...
  b0:	75 14 01 00 75 14 01 00 75 14 01 00 75 14 01 00     u...u...u...u...
  c0:	75 14 01 00 75 14 01 00 75 14 01 00 75 14 01 00     u...u...u...u...
  d0:	75 14 01 00 75 14 01 00 75 14 01 00                 u...u...u...

Disassembly of section text:

000000dc <__aeabi_uldivmod>:
      dc:	b953      	cbnz	r3, f4 <__aeabi_uldivmod+0x18>
      de:	b94a      	cbnz	r2, f4 <__aeabi_uldivmod+0x18>
      e0:	2900      	cmp	r1, #0
      e2:	bf08      	it	eq
      e4:	2800      	cmpeq	r0, #0
      e6:	bf1c      	itt	ne
      e8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
      ec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
      f0:	f000 b974 	b.w	3dc <__aeabi_idiv0>
      f4:	f1ad 0c08 	sub.w	ip, sp, #8
      f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
      fc:	f000 f806 	bl	10c <__udivmoddi4>
     100:	f8dd e004 	ldr.w	lr, [sp, #4]
     104:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     108:	b004      	add	sp, #16
     10a:	4770      	bx	lr

0000010c <__udivmoddi4>:
     10c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     110:	9e08      	ldr	r6, [sp, #32]
     112:	460d      	mov	r5, r1
     114:	4604      	mov	r4, r0
     116:	4688      	mov	r8, r1
     118:	2b00      	cmp	r3, #0
     11a:	d14d      	bne.n	1b8 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x6e>
     11c:	428a      	cmp	r2, r1
     11e:	4694      	mov	ip, r2
     120:	d968      	bls.n	1f4 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xaa>
     122:	fab2 f282 	clz	r2, r2
     126:	b152      	cbz	r2, 13e <__udivmoddi4+0x32>
     128:	fa01 f302 	lsl.w	r3, r1, r2
     12c:	f1c2 0120 	rsb	r1, r2, #32
     130:	fa20 f101 	lsr.w	r1, r0, r1
     134:	fa0c fc02 	lsl.w	ip, ip, r2
     138:	ea41 0803 	orr.w	r8, r1, r3
     13c:	4094      	lsls	r4, r2
     13e:	ea4f 451c 	mov.w	r5, ip, lsr #16
     142:	0c21      	lsrs	r1, r4, #16
     144:	fbb8 fef5 	udiv	lr, r8, r5
     148:	fa1f f78c 	uxth.w	r7, ip
     14c:	fb05 831e 	mls	r3, r5, lr, r8
     150:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     154:	fb0e f107 	mul.w	r1, lr, r7
     158:	4299      	cmp	r1, r3
     15a:	d90b      	bls.n	174 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x2a>
     15c:	eb1c 0303 	adds.w	r3, ip, r3
     160:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
     164:	f080 811e 	bcs.w	3a4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xa4>
     168:	4299      	cmp	r1, r3
     16a:	f240 811b 	bls.w	3a4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xa4>
     16e:	f1ae 0e02 	sub.w	lr, lr, #2
     172:	4463      	add	r3, ip
     174:	1a5b      	subs	r3, r3, r1
     176:	b2a4      	uxth	r4, r4
     178:	fbb3 f0f5 	udiv	r0, r3, r5
     17c:	fb05 3310 	mls	r3, r5, r0, r3
     180:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     184:	fb00 f707 	mul.w	r7, r0, r7
     188:	42a7      	cmp	r7, r4
     18a:	d90a      	bls.n	1a2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x58>
     18c:	eb1c 0404 	adds.w	r4, ip, r4
     190:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     194:	f080 8108 	bcs.w	3a8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xa8>
     198:	42a7      	cmp	r7, r4
     19a:	f240 8105 	bls.w	3a8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xa8>
     19e:	4464      	add	r4, ip
     1a0:	3802      	subs	r0, #2
     1a2:	1be4      	subs	r4, r4, r7
     1a4:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     1a8:	2100      	movs	r1, #0
     1aa:	b11e      	cbz	r6, 1b4 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x6a>
     1ac:	40d4      	lsrs	r4, r2
     1ae:	2300      	movs	r3, #0
     1b0:	e9c6 4300 	strd	r4, r3, [r6]
     1b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1b8:	428b      	cmp	r3, r1
     1ba:	d908      	bls.n	1ce <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x84>
     1bc:	2e00      	cmp	r6, #0
     1be:	f000 80ee 	beq.w	39e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x9e>
     1c2:	2100      	movs	r1, #0
     1c4:	e9c6 0500 	strd	r0, r5, [r6]
     1c8:	4608      	mov	r0, r1
     1ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1ce:	fab3 f183 	clz	r1, r3
     1d2:	2900      	cmp	r1, #0
     1d4:	d14a      	bne.n	26c <CONFIG_FLASH_SIZE+0x6c>
     1d6:	42ab      	cmp	r3, r5
     1d8:	d302      	bcc.n	1e0 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x96>
     1da:	4282      	cmp	r2, r0
     1dc:	f200 80f9 	bhi.w	3d2 <CONFIG_BT_DEVICE_APPEARANCE+0x10>
     1e0:	1a84      	subs	r4, r0, r2
     1e2:	eb65 0303 	sbc.w	r3, r5, r3
     1e6:	2001      	movs	r0, #1
     1e8:	4698      	mov	r8, r3
     1ea:	2e00      	cmp	r6, #0
     1ec:	d0e2      	beq.n	1b4 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x6a>
     1ee:	e9c6 4800 	strd	r4, r8, [r6]
     1f2:	e7df      	b.n	1b4 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x6a>
     1f4:	b902      	cbnz	r2, 1f8 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xae>
     1f6:	deff      	udf	#255	; 0xff
     1f8:	fab2 f282 	clz	r2, r2
     1fc:	2a00      	cmp	r2, #0
     1fe:	f040 8091 	bne.w	324 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x24>
     202:	eba1 050c 	sub.w	r5, r1, ip
     206:	ea4f 471c 	mov.w	r7, ip, lsr #16
     20a:	fa1f fe8c 	uxth.w	lr, ip
     20e:	2101      	movs	r1, #1
     210:	fbb5 f3f7 	udiv	r3, r5, r7
     214:	fb07 5013 	mls	r0, r7, r3, r5
     218:	0c25      	lsrs	r5, r4, #16
     21a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
     21e:	fb0e f003 	mul.w	r0, lr, r3
     222:	42a8      	cmp	r0, r5
     224:	d908      	bls.n	238 <CONFIG_FLASH_SIZE+0x38>
     226:	eb1c 0505 	adds.w	r5, ip, r5
     22a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
     22e:	d202      	bcs.n	236 <CONFIG_FLASH_SIZE+0x36>
     230:	42a8      	cmp	r0, r5
     232:	f200 80cb 	bhi.w	3cc <CONFIG_BT_DEVICE_APPEARANCE+0xa>
     236:	4643      	mov	r3, r8
     238:	1a2d      	subs	r5, r5, r0
     23a:	b2a4      	uxth	r4, r4
     23c:	fbb5 f0f7 	udiv	r0, r5, r7
     240:	fb07 5510 	mls	r5, r7, r0, r5
     244:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     248:	fb0e fe00 	mul.w	lr, lr, r0
     24c:	45a6      	cmp	lr, r4
     24e:	d908      	bls.n	262 <CONFIG_FLASH_SIZE+0x62>
     250:	eb1c 0404 	adds.w	r4, ip, r4
     254:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     258:	d202      	bcs.n	260 <CONFIG_FLASH_SIZE+0x60>
     25a:	45a6      	cmp	lr, r4
     25c:	f200 80bb 	bhi.w	3d6 <CONFIG_BT_DEVICE_APPEARANCE+0x14>
     260:	4628      	mov	r0, r5
     262:	eba4 040e 	sub.w	r4, r4, lr
     266:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
     26a:	e79e      	b.n	1aa <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x60>
     26c:	f1c1 0720 	rsb	r7, r1, #32
     270:	408b      	lsls	r3, r1
     272:	fa22 fc07 	lsr.w	ip, r2, r7
     276:	ea4c 0c03 	orr.w	ip, ip, r3
     27a:	fa20 f407 	lsr.w	r4, r0, r7
     27e:	fa05 f301 	lsl.w	r3, r5, r1
     282:	431c      	orrs	r4, r3
     284:	40fd      	lsrs	r5, r7
     286:	ea4f 491c 	mov.w	r9, ip, lsr #16
     28a:	fa00 f301 	lsl.w	r3, r0, r1
     28e:	fbb5 f8f9 	udiv	r8, r5, r9
     292:	0c20      	lsrs	r0, r4, #16
     294:	fa1f fe8c 	uxth.w	lr, ip
     298:	fb09 5518 	mls	r5, r9, r8, r5
     29c:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
     2a0:	fb08 f00e 	mul.w	r0, r8, lr
     2a4:	42a8      	cmp	r0, r5
     2a6:	fa02 f201 	lsl.w	r2, r2, r1
     2aa:	d90b      	bls.n	2c4 <CONFIG_FLASH_SIZE+0xc4>
     2ac:	eb1c 0505 	adds.w	r5, ip, r5
     2b0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
     2b4:	f080 8088 	bcs.w	3c8 <CONFIG_BT_DEVICE_APPEARANCE+0x6>
     2b8:	42a8      	cmp	r0, r5
     2ba:	f240 8085 	bls.w	3c8 <CONFIG_BT_DEVICE_APPEARANCE+0x6>
     2be:	f1a8 0802 	sub.w	r8, r8, #2
     2c2:	4465      	add	r5, ip
     2c4:	1a2d      	subs	r5, r5, r0
     2c6:	b2a4      	uxth	r4, r4
     2c8:	fbb5 f0f9 	udiv	r0, r5, r9
     2cc:	fb09 5510 	mls	r5, r9, r0, r5
     2d0:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
     2d4:	fb00 fe0e 	mul.w	lr, r0, lr
     2d8:	45ae      	cmp	lr, r5
     2da:	d908      	bls.n	2ee <CONFIG_FLASH_SIZE+0xee>
     2dc:	eb1c 0505 	adds.w	r5, ip, r5
     2e0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
     2e4:	d26c      	bcs.n	3c0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xc0>
     2e6:	45ae      	cmp	lr, r5
     2e8:	d96a      	bls.n	3c0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xc0>
     2ea:	3802      	subs	r0, #2
     2ec:	4465      	add	r5, ip
     2ee:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     2f2:	fba0 9402 	umull	r9, r4, r0, r2
     2f6:	eba5 050e 	sub.w	r5, r5, lr
     2fa:	42a5      	cmp	r5, r4
     2fc:	46c8      	mov	r8, r9
     2fe:	46a6      	mov	lr, r4
     300:	d356      	bcc.n	3b0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb0>
     302:	d053      	beq.n	3ac <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xac>
     304:	b15e      	cbz	r6, 31e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x1e>
     306:	ebb3 0208 	subs.w	r2, r3, r8
     30a:	eb65 050e 	sbc.w	r5, r5, lr
     30e:	fa05 f707 	lsl.w	r7, r5, r7
     312:	fa22 f301 	lsr.w	r3, r2, r1
     316:	40cd      	lsrs	r5, r1
     318:	431f      	orrs	r7, r3
     31a:	e9c6 7500 	strd	r7, r5, [r6]
     31e:	2100      	movs	r1, #0
     320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     324:	f1c2 0320 	rsb	r3, r2, #32
     328:	fa20 f103 	lsr.w	r1, r0, r3
     32c:	fa0c fc02 	lsl.w	ip, ip, r2
     330:	fa25 f303 	lsr.w	r3, r5, r3
     334:	4095      	lsls	r5, r2
     336:	430d      	orrs	r5, r1
     338:	ea4f 471c 	mov.w	r7, ip, lsr #16
     33c:	fa1f fe8c 	uxth.w	lr, ip
     340:	fbb3 f1f7 	udiv	r1, r3, r7
     344:	fb07 3011 	mls	r0, r7, r1, r3
     348:	0c2b      	lsrs	r3, r5, #16
     34a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     34e:	fb01 f00e 	mul.w	r0, r1, lr
     352:	4298      	cmp	r0, r3
     354:	fa04 f402 	lsl.w	r4, r4, r2
     358:	d908      	bls.n	36c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x6c>
     35a:	eb1c 0303 	adds.w	r3, ip, r3
     35e:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
     362:	d22f      	bcs.n	3c4 <CONFIG_BT_DEVICE_APPEARANCE+0x2>
     364:	4298      	cmp	r0, r3
     366:	d92d      	bls.n	3c4 <CONFIG_BT_DEVICE_APPEARANCE+0x2>
     368:	3902      	subs	r1, #2
     36a:	4463      	add	r3, ip
     36c:	1a1b      	subs	r3, r3, r0
     36e:	b2ad      	uxth	r5, r5
     370:	fbb3 f0f7 	udiv	r0, r3, r7
     374:	fb07 3310 	mls	r3, r7, r0, r3
     378:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     37c:	fb00 f30e 	mul.w	r3, r0, lr
     380:	42ab      	cmp	r3, r5
     382:	d908      	bls.n	396 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x96>
     384:	eb1c 0505 	adds.w	r5, ip, r5
     388:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
     38c:	d216      	bcs.n	3bc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xbc>
     38e:	42ab      	cmp	r3, r5
     390:	d914      	bls.n	3bc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xbc>
     392:	3802      	subs	r0, #2
     394:	4465      	add	r5, ip
     396:	1aed      	subs	r5, r5, r3
     398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     39c:	e738      	b.n	210 <CONFIG_FLASH_SIZE+0x10>
     39e:	4631      	mov	r1, r6
     3a0:	4630      	mov	r0, r6
     3a2:	e707      	b.n	1b4 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x6a>
     3a4:	4686      	mov	lr, r0
     3a6:	e6e5      	b.n	174 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x2a>
     3a8:	4618      	mov	r0, r3
     3aa:	e6fa      	b.n	1a2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x58>
     3ac:	454b      	cmp	r3, r9
     3ae:	d2a9      	bcs.n	304 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x4>
     3b0:	ebb9 0802 	subs.w	r8, r9, r2
     3b4:	eb64 0e0c 	sbc.w	lr, r4, ip
     3b8:	3801      	subs	r0, #1
     3ba:	e7a3      	b.n	304 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x4>
     3bc:	4640      	mov	r0, r8
     3be:	e7ea      	b.n	396 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x96>
     3c0:	4620      	mov	r0, r4
     3c2:	e794      	b.n	2ee <CONFIG_FLASH_SIZE+0xee>
     3c4:	4641      	mov	r1, r8
     3c6:	e7d1      	b.n	36c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x6c>
     3c8:	46d0      	mov	r8, sl
     3ca:	e77b      	b.n	2c4 <CONFIG_FLASH_SIZE+0xc4>
     3cc:	3b02      	subs	r3, #2
     3ce:	4465      	add	r5, ip
     3d0:	e732      	b.n	238 <CONFIG_FLASH_SIZE+0x38>
     3d2:	4608      	mov	r0, r1
     3d4:	e709      	b.n	1ea <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xa0>
     3d6:	4464      	add	r4, ip
     3d8:	3802      	subs	r0, #2
     3da:	e742      	b.n	262 <CONFIG_FLASH_SIZE+0x62>

000003dc <__aeabi_idiv0>:
     3dc:	4770      	bx	lr
     3de:	bf00      	nop

000003e0 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>:
     3e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     3e2:	4615      	mov	r5, r2
     3e4:	4a0a      	ldr	r2, [pc, #40]	; (410 <CONFIG_BT_RX_STACK_SIZE+0x10>)
     3e6:	461c      	mov	r4, r3
     3e8:	6856      	ldr	r6, [r2, #4]
     3ea:	b12e      	cbz	r6, 3f8 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x10>
     3ec:	b001      	add	sp, #4
     3ee:	462a      	mov	r2, r5
     3f0:	46b4      	mov	ip, r6
     3f2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
     3f6:	4760      	bx	ip
     3f8:	2000      	movs	r0, #0
     3fa:	f88d 0000 	strb.w	r0, [sp]
     3fe:	4668      	mov	r0, sp
     400:	f00b f844 	bl	b48c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>
     404:	f89d 0000 	ldrb.w	r0, [sp]
     408:	1a28      	subs	r0, r5, r0
     40a:	7020      	strb	r0, [r4, #0]
     40c:	2000      	movs	r0, #0
     40e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     410:	20000000 	.word	0x20000000

00000414 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
     414:	4801      	ldr	r0, [pc, #4]	; (41c <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
     416:	7800      	ldrb	r0, [r0, #0]
     418:	4770      	bx	lr
     41a:	0000      	.short	0x0000
     41c:	20000008 	.word	0x20000008

00000420 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
     420:	4905      	ldr	r1, [pc, #20]	; (438 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
     422:	780a      	ldrb	r2, [r1, #0]
     424:	4290      	cmp	r0, r2
     426:	d301      	bcc.n	42c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
     428:	2000      	movs	r0, #0
     42a:	4770      	bx	lr
     42c:	6849      	ldr	r1, [r1, #4]
     42e:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
     432:	eb01 0080 	add.w	r0, r1, r0, lsl #2
     436:	4770      	bx	lr
     438:	20000008 	.word	0x20000008
     43c:	b570      	push	{r4, r5, r6, lr}
     43e:	4605      	mov	r5, r0
     440:	2a20      	cmp	r2, #32
     442:	d027      	beq.n	494 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x20>
     444:	4819      	ldr	r0, [pc, #100]	; (4ac <CONFIG_BT_HCI_ECC_STACK_SIZE+0x38>)
     446:	4c1a      	ldr	r4, [pc, #104]	; (4b0 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x3c>)
     448:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
     44c:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
     450:	eb04 0383 	add.w	r3, r4, r3, lsl #2
     454:	2920      	cmp	r1, #32
     456:	d022      	beq.n	49e <CONFIG_BT_HCI_ECC_STACK_SIZE+0x2a>
     458:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
     45c:	7840      	ldrb	r0, [r0, #1]
     45e:	784c      	ldrb	r4, [r1, #1]
     460:	7048      	strb	r0, [r1, #1]
     462:	4620      	mov	r0, r4
     464:	4601      	mov	r1, r0
     466:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
     46a:	4291      	cmp	r1, r2
     46c:	7005      	strb	r5, [r0, #0]
     46e:	7840      	ldrb	r0, [r0, #1]
     470:	d1f8      	bne.n	464 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x44>
     472:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
     476:	2a20      	cmp	r2, #32
     478:	bf1a      	itte	ne
     47a:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
     47e:	7054      	strbne	r4, [r2, #1]
     480:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
     484:	2220      	movs	r2, #32
     486:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
     48a:	f88c 2001 	strb.w	r2, [ip, #1]
     48e:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
     492:	bd70      	pop	{r4, r5, r6, pc}
     494:	f240 2191 	movw	r1, #657	; 0x291
     498:	2070      	movs	r0, #112	; 0x70
     49a:	f003 f8e5 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     49e:	f893 4020 	ldrb.w	r4, [r3, #32]
     4a2:	7840      	ldrb	r0, [r0, #1]
     4a4:	f883 0020 	strb.w	r0, [r3, #32]
     4a8:	e7db      	b.n	462 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x42>
     4aa:	0000      	.short	0x0000
     4ac:	20000c4c 	.word	0x20000c4c
     4b0:	20000ccc 	.word	0x20000ccc
     4b4:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     4b8:	460c      	mov	r4, r1
     4ba:	8949      	ldrh	r1, [r1, #10]
     4bc:	b087      	sub	sp, #28
     4be:	f501 61e1 	add.w	r1, r1, #1800	; 0x708
     4c2:	4615      	mov	r5, r2
     4c4:	4281      	cmp	r1, r0
     4c6:	f200 80da 	bhi.w	67e <CONFIG_BT_HCI_TX_STACK_SIZE+0x7e>
     4ca:	aa05      	add	r2, sp, #20
     4cc:	a902      	add	r1, sp, #8
     4ce:	f002 f89f 	bl	2610 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     4d2:	9802      	ldr	r0, [sp, #8]
     4d4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
     4d6:	4428      	add	r0, r5
     4d8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     4dc:	9004      	str	r0, [sp, #16]
     4de:	48a9      	ldr	r0, [pc, #676]	; (784 <CONFIG_BT_HCI_TX_STACK_SIZE+0x184>)
     4e0:	4ea9      	ldr	r6, [pc, #676]	; (788 <CONFIG_BT_HCI_TX_STACK_SIZE+0x188>)
     4e2:	eb00 0087 	add.w	r0, r0, r7, lsl #2
     4e6:	9003      	str	r0, [sp, #12]
     4e8:	f890 5020 	ldrb.w	r5, [r0, #32]
     4ec:	2020      	movs	r0, #32
     4ee:	46e9      	mov	r9, sp
     4f0:	f10d 0804 	add.w	r8, sp, #4
     4f4:	f88d 0000 	strb.w	r0, [sp]
     4f8:	f506 7a40 	add.w	sl, r6, #768	; 0x300
     4fc:	2d20      	cmp	r5, #32
     4fe:	bf18      	it	ne
     500:	eb0a 1b87 	addne.w	fp, sl, r7, lsl #6
     504:	d026      	beq.n	554 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6c>
     506:	bf00      	nop
     508:	eb05 0045 	add.w	r0, r5, r5, lsl #1
     50c:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
     510:	6821      	ldr	r1, [r4, #0]
     512:	68c2      	ldr	r2, [r0, #12]
     514:	1a89      	subs	r1, r1, r2
     516:	0209      	lsls	r1, r1, #8
     518:	17ca      	asrs	r2, r1, #31
     51a:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     51e:	3008      	adds	r0, #8
     520:	1209      	asrs	r1, r1, #8
     522:	d417      	bmi.n	554 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6c>
     524:	8961      	ldrh	r1, [r4, #10]
     526:	b171      	cbz	r1, 546 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x5e>
     528:	8941      	ldrh	r1, [r0, #10]
     52a:	b961      	cbnz	r1, 546 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x5e>
     52c:	f000 fdb4 	bl	1098 <CONFIG_FPROTECT_BLOCK_SIZE+0x98>
     530:	f002 f852 	bl	25d8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     534:	6821      	ldr	r1, [r4, #0]
     536:	1a08      	subs	r0, r1, r0
     538:	0200      	lsls	r0, r0, #8
     53a:	17c1      	asrs	r1, r0, #31
     53c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     540:	1200      	asrs	r0, r0, #8
     542:	2833      	cmp	r0, #51	; 0x33
     544:	db06      	blt.n	554 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6c>
     546:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     54a:	f889 5000 	strb.w	r5, [r9]
     54e:	7845      	ldrb	r5, [r0, #1]
     550:	2d20      	cmp	r5, #32
     552:	d1d9      	bne.n	508 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x20>
     554:	f899 0000 	ldrb.w	r0, [r9]
     558:	f888 0000 	strb.w	r0, [r8]
     55c:	46a1      	mov	r9, r4
     55e:	2d20      	cmp	r5, #32
     560:	bf1c      	itt	ne
     562:	488a      	ldrne	r0, [pc, #552]	; (78c <CONFIG_BT_HCI_TX_STACK_SIZE+0x18c>)
     564:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
     568:	f000 8108 	beq.w	77c <CONFIG_BT_HCI_TX_STACK_SIZE+0x17c>
     56c:	eb05 0145 	add.w	r1, r5, r5, lsl #1
     570:	eb06 0ac1 	add.w	sl, r6, r1, lsl #3
     574:	f8d9 1004 	ldr.w	r1, [r9, #4]
     578:	f8da 2008 	ldr.w	r2, [sl, #8]
     57c:	4648      	mov	r0, r9
     57e:	1a51      	subs	r1, r2, r1
     580:	0209      	lsls	r1, r1, #8
     582:	17ca      	asrs	r2, r1, #31
     584:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     588:	f10a 0708 	add.w	r7, sl, #8
     58c:	1209      	asrs	r1, r1, #8
     58e:	d415      	bmi.n	5bc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xd4>
     590:	8979      	ldrh	r1, [r7, #10]
     592:	2900      	cmp	r1, #0
     594:	f000 80f2 	beq.w	77c <CONFIG_BT_HCI_TX_STACK_SIZE+0x17c>
     598:	8941      	ldrh	r1, [r0, #10]
     59a:	2900      	cmp	r1, #0
     59c:	f040 80ee 	bne.w	77c <CONFIG_BT_HCI_TX_STACK_SIZE+0x17c>
     5a0:	f000 fd7a 	bl	1098 <CONFIG_FPROTECT_BLOCK_SIZE+0x98>
     5a4:	f002 f818 	bl	25d8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     5a8:	6839      	ldr	r1, [r7, #0]
     5aa:	1a08      	subs	r0, r1, r0
     5ac:	0200      	lsls	r0, r0, #8
     5ae:	17c1      	asrs	r1, r0, #31
     5b0:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     5b4:	1200      	asrs	r0, r0, #8
     5b6:	2833      	cmp	r0, #51	; 0x33
     5b8:	f280 80e0 	bge.w	77c <CONFIG_BT_HCI_TX_STACK_SIZE+0x17c>
     5bc:	f888 5000 	strb.w	r5, [r8]
     5c0:	f89a 1014 	ldrb.w	r1, [sl, #20]
     5c4:	f899 000c 	ldrb.w	r0, [r9, #12]
     5c8:	4281      	cmp	r1, r0
     5ca:	d906      	bls.n	5da <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xf2>
     5cc:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     5d0:	7845      	ldrb	r5, [r0, #1]
     5d2:	2d20      	cmp	r5, #32
     5d4:	d1ca      	bne.n	56c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x84>
     5d6:	f000 b8d1 	b.w	77c <CONFIG_BT_HCI_TX_STACK_SIZE+0x17c>
     5da:	f89d 0004 	ldrb.w	r0, [sp, #4]
     5de:	eb00 0040 	add.w	r0, r0, r0, lsl #1
     5e2:	eb06 05c0 	add.w	r5, r6, r0, lsl #3
     5e6:	8a68      	ldrh	r0, [r5, #18]
     5e8:	68ef      	ldr	r7, [r5, #12]
     5ea:	2800      	cmp	r0, #0
     5ec:	d13f      	bne.n	66e <CONFIG_BT_HCI_TX_STACK_SIZE+0x6e>
     5ee:	8960      	ldrh	r0, [r4, #10]
     5f0:	b3e8      	cbz	r0, 66e <CONFIG_BT_HCI_TX_STACK_SIZE+0x6e>
     5f2:	68a8      	ldr	r0, [r5, #8]
     5f4:	f00a ff75 	bl	b4e2 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
     5f8:	8a69      	ldrh	r1, [r5, #18]
     5fa:	7c2a      	ldrb	r2, [r5, #16]
     5fc:	4411      	add	r1, r2
     5fe:	1c49      	adds	r1, r1, #1
     600:	4a63      	ldr	r2, [pc, #396]	; (790 <CONFIG_BT_HCI_TX_STACK_SIZE+0x190>)
     602:	1843      	adds	r3, r0, r1
     604:	4290      	cmp	r0, r2
     606:	d904      	bls.n	612 <CONFIG_BT_HCI_TX_STACK_SIZE+0x12>
     608:	f240 6116 	movw	r1, #1558	; 0x616
     60c:	2070      	movs	r0, #112	; 0x70
     60e:	f003 f82b 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     612:	4860      	ldr	r0, [pc, #384]	; (794 <CONFIG_BT_HCI_TX_STACK_SIZE+0x194>)
     614:	4281      	cmp	r1, r0
     616:	dd04      	ble.n	622 <CONFIG_BT_HCI_TX_STACK_SIZE+0x22>
     618:	f240 6117 	movw	r1, #1559	; 0x617
     61c:	2070      	movs	r0, #112	; 0x70
     61e:	f003 f823 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     622:	485d      	ldr	r0, [pc, #372]	; (798 <CONFIG_BT_HCI_TX_STACK_SIZE+0x198>)
     624:	4281      	cmp	r1, r0
     626:	da04      	bge.n	632 <CONFIG_BT_HCI_TX_STACK_SIZE+0x32>
     628:	f44f 61c3 	mov.w	r1, #1560	; 0x618
     62c:	2070      	movs	r0, #112	; 0x70
     62e:	f003 f81b 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     632:	485a      	ldr	r0, [pc, #360]	; (79c <CONFIG_BT_HCI_TX_STACK_SIZE+0x19c>)
     634:	4298      	cmp	r0, r3
     636:	bfdc      	itt	le
     638:	f503 03f7 	addle.w	r3, r3, #8093696	; 0x7b8000
     63c:	f1a3 53f8 	suble.w	r3, r3, #520093696	; 0x1f000000
     640:	dd05      	ble.n	64e <CONFIG_BT_HCI_TX_STACK_SIZE+0x4e>
     642:	2b00      	cmp	r3, #0
     644:	bfbc      	itt	lt
     646:	f5a3 03f7 	sublt.w	r3, r3, #8093696	; 0x7b8000
     64a:	f103 53f8 	addlt.w	r3, r3, #520093696	; 0x1f000000
     64e:	4618      	mov	r0, r3
     650:	f001 ffc2 	bl	25d8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     654:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     658:	1a39      	subs	r1, r7, r0
     65a:	0209      	lsls	r1, r1, #8
     65c:	17ca      	asrs	r2, r1, #31
     65e:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     662:	1209      	asrs	r1, r1, #8
     664:	2933      	cmp	r1, #51	; 0x33
     666:	bfbc      	itt	lt
     668:	3033      	addlt	r0, #51	; 0x33
     66a:	f020 477f 	biclt.w	r7, r0, #4278190080	; 0xff000000
     66e:	9804      	ldr	r0, [sp, #16]
     670:	1a38      	subs	r0, r7, r0
     672:	0200      	lsls	r0, r0, #8
     674:	17c1      	asrs	r1, r0, #31
     676:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     67a:	1200      	asrs	r0, r0, #8
     67c:	d403      	bmi.n	686 <CONFIG_BT_HCI_TX_STACK_SIZE+0x86>
     67e:	b00b      	add	sp, #44	; 0x2c
     680:	2000      	movs	r0, #0
     682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     686:	e9d4 1000 	ldrd	r1, r0, [r4]
     68a:	1a40      	subs	r0, r0, r1
     68c:	4438      	add	r0, r7
     68e:	f027 417f 	bic.w	r1, r7, #4278190080	; 0xff000000
     692:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     696:	e9c4 1000 	strd	r1, r0, [r4]
     69a:	9803      	ldr	r0, [sp, #12]
     69c:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
     6a0:	466f      	mov	r7, sp
     6a2:	f890 5020 	ldrb.w	r5, [r0, #32]
     6a6:	2020      	movs	r0, #32
     6a8:	f10d 0a04 	add.w	sl, sp, #4
     6ac:	f88d 0000 	strb.w	r0, [sp]
     6b0:	2d20      	cmp	r5, #32
     6b2:	bf1c      	itt	ne
     6b4:	4835      	ldrne	r0, [pc, #212]	; (78c <CONFIG_BT_HCI_TX_STACK_SIZE+0x18c>)
     6b6:	eb00 1988 	addne.w	r9, r0, r8, lsl #6
     6ba:	d024      	beq.n	706 <CONFIG_BT_HCI_TX_STACK_SIZE+0x106>
     6bc:	eb05 0045 	add.w	r0, r5, r5, lsl #1
     6c0:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
     6c4:	6822      	ldr	r2, [r4, #0]
     6c6:	68c1      	ldr	r1, [r0, #12]
     6c8:	1a51      	subs	r1, r2, r1
     6ca:	0209      	lsls	r1, r1, #8
     6cc:	17ca      	asrs	r2, r1, #31
     6ce:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     6d2:	3008      	adds	r0, #8
     6d4:	1209      	asrs	r1, r1, #8
     6d6:	d416      	bmi.n	706 <CONFIG_BT_HCI_TX_STACK_SIZE+0x106>
     6d8:	8961      	ldrh	r1, [r4, #10]
     6da:	b171      	cbz	r1, 6fa <CONFIG_BT_HCI_TX_STACK_SIZE+0xfa>
     6dc:	8941      	ldrh	r1, [r0, #10]
     6de:	b961      	cbnz	r1, 6fa <CONFIG_BT_HCI_TX_STACK_SIZE+0xfa>
     6e0:	f000 fcda 	bl	1098 <CONFIG_FPROTECT_BLOCK_SIZE+0x98>
     6e4:	f001 ff78 	bl	25d8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     6e8:	6821      	ldr	r1, [r4, #0]
     6ea:	1a08      	subs	r0, r1, r0
     6ec:	0200      	lsls	r0, r0, #8
     6ee:	17c1      	asrs	r1, r0, #31
     6f0:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     6f4:	1200      	asrs	r0, r0, #8
     6f6:	2833      	cmp	r0, #51	; 0x33
     6f8:	db05      	blt.n	706 <CONFIG_BT_HCI_TX_STACK_SIZE+0x106>
     6fa:	eb09 0045 	add.w	r0, r9, r5, lsl #1
     6fe:	703d      	strb	r5, [r7, #0]
     700:	7845      	ldrb	r5, [r0, #1]
     702:	2d20      	cmp	r5, #32
     704:	d1da      	bne.n	6bc <CONFIG_BT_HCI_TX_STACK_SIZE+0xbc>
     706:	7838      	ldrb	r0, [r7, #0]
     708:	f88a 0000 	strb.w	r0, [sl]
     70c:	4627      	mov	r7, r4
     70e:	2d20      	cmp	r5, #32
     710:	bf1c      	itt	ne
     712:	481e      	ldrne	r0, [pc, #120]	; (78c <CONFIG_BT_HCI_TX_STACK_SIZE+0x18c>)
     714:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
     718:	d030      	beq.n	77c <CONFIG_BT_HCI_TX_STACK_SIZE+0x17c>
     71a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
     71e:	eb06 09c1 	add.w	r9, r6, r1, lsl #3
     722:	6879      	ldr	r1, [r7, #4]
     724:	f8d9 2008 	ldr.w	r2, [r9, #8]
     728:	4638      	mov	r0, r7
     72a:	1a51      	subs	r1, r2, r1
     72c:	0209      	lsls	r1, r1, #8
     72e:	17ca      	asrs	r2, r1, #31
     730:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     734:	f109 0808 	add.w	r8, r9, #8
     738:	1209      	asrs	r1, r1, #8
     73a:	d412      	bmi.n	762 <CONFIG_BT_HCI_TX_STACK_SIZE+0x162>
     73c:	f8b8 100a 	ldrh.w	r1, [r8, #10]
     740:	b1e1      	cbz	r1, 77c <CONFIG_BT_HCI_TX_STACK_SIZE+0x17c>
     742:	8941      	ldrh	r1, [r0, #10]
     744:	b9d1      	cbnz	r1, 77c <CONFIG_BT_HCI_TX_STACK_SIZE+0x17c>
     746:	f000 fca7 	bl	1098 <CONFIG_FPROTECT_BLOCK_SIZE+0x98>
     74a:	f001 ff45 	bl	25d8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     74e:	f8d8 1000 	ldr.w	r1, [r8]
     752:	1a08      	subs	r0, r1, r0
     754:	0200      	lsls	r0, r0, #8
     756:	17c1      	asrs	r1, r0, #31
     758:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     75c:	1200      	asrs	r0, r0, #8
     75e:	2833      	cmp	r0, #51	; 0x33
     760:	da0c      	bge.n	77c <CONFIG_BT_HCI_TX_STACK_SIZE+0x17c>
     762:	f88a 5000 	strb.w	r5, [sl]
     766:	f899 0014 	ldrb.w	r0, [r9, #20]
     76a:	7b39      	ldrb	r1, [r7, #12]
     76c:	4288      	cmp	r0, r1
     76e:	f67f af34 	bls.w	5da <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xf2>
     772:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     776:	7845      	ldrb	r5, [r0, #1]
     778:	2d20      	cmp	r5, #32
     77a:	d1ce      	bne.n	71a <CONFIG_BT_HCI_TX_STACK_SIZE+0x11a>
     77c:	b00b      	add	sp, #44	; 0x2c
     77e:	2001      	movs	r0, #1
     780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     784:	20000ccc 	.word	0x20000ccc
     788:	2000094c 	.word	0x2000094c
     78c:	20000c4c 	.word	0x20000c4c
     790:	1e847fff 	.word	0x1e847fff
     794:	07a12000 	.word	0x07a12000
     798:	f85ee000 	.word	0xf85ee000
     79c:	1e848000 	.word	0x1e848000
     7a0:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
     7a4:	4604      	mov	r4, r0
     7a6:	483c      	ldr	r0, [pc, #240]	; (898 <CONFIG_HEAP_MEM_POOL_SIZE+0x98>)
     7a8:	460e      	mov	r6, r1
     7aa:	eb00 0086 	add.w	r0, r0, r6, lsl #2
     7ae:	4f3b      	ldr	r7, [pc, #236]	; (89c <CONFIG_HEAP_MEM_POOL_SIZE+0x9c>)
     7b0:	f890 5020 	ldrb.w	r5, [r0, #32]
     7b4:	2020      	movs	r0, #32
     7b6:	4698      	mov	r8, r3
     7b8:	4692      	mov	sl, r2
     7ba:	7010      	strb	r0, [r2, #0]
     7bc:	f507 7940 	add.w	r9, r7, #768	; 0x300
     7c0:	2d20      	cmp	r5, #32
     7c2:	bf18      	it	ne
     7c4:	eb09 1b86 	addne.w	fp, r9, r6, lsl #6
     7c8:	d028      	beq.n	81c <CONFIG_HEAP_MEM_POOL_SIZE+0x1c>
     7ca:	bf00      	nop
     7cc:	eb05 0045 	add.w	r0, r5, r5, lsl #1
     7d0:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
     7d4:	f100 0108 	add.w	r1, r0, #8
     7d8:	68c0      	ldr	r0, [r0, #12]
     7da:	6822      	ldr	r2, [r4, #0]
     7dc:	1a10      	subs	r0, r2, r0
     7de:	0200      	lsls	r0, r0, #8
     7e0:	17c2      	asrs	r2, r0, #31
     7e2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     7e6:	1200      	asrs	r0, r0, #8
     7e8:	d418      	bmi.n	81c <CONFIG_HEAP_MEM_POOL_SIZE+0x1c>
     7ea:	8960      	ldrh	r0, [r4, #10]
     7ec:	b178      	cbz	r0, 80e <CONFIG_HEAP_MEM_POOL_SIZE+0xe>
     7ee:	8948      	ldrh	r0, [r1, #10]
     7f0:	b968      	cbnz	r0, 80e <CONFIG_HEAP_MEM_POOL_SIZE+0xe>
     7f2:	4608      	mov	r0, r1
     7f4:	f000 fc50 	bl	1098 <CONFIG_FPROTECT_BLOCK_SIZE+0x98>
     7f8:	f001 feee 	bl	25d8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     7fc:	6821      	ldr	r1, [r4, #0]
     7fe:	1a08      	subs	r0, r1, r0
     800:	0200      	lsls	r0, r0, #8
     802:	17c1      	asrs	r1, r0, #31
     804:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     808:	1200      	asrs	r0, r0, #8
     80a:	2833      	cmp	r0, #51	; 0x33
     80c:	db06      	blt.n	81c <CONFIG_HEAP_MEM_POOL_SIZE+0x1c>
     80e:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     812:	f88a 5000 	strb.w	r5, [sl]
     816:	7845      	ldrb	r5, [r0, #1]
     818:	2d20      	cmp	r5, #32
     81a:	d1d7      	bne.n	7cc <CONFIG_BT_HCI_TX_STACK_SIZE+0x1cc>
     81c:	f89a 0000 	ldrb.w	r0, [sl]
     820:	f888 0000 	strb.w	r0, [r8]
     824:	2d20      	cmp	r5, #32
     826:	bf18      	it	ne
     828:	eb09 1a86 	addne.w	sl, r9, r6, lsl #6
     82c:	d030      	beq.n	890 <CONFIG_HEAP_MEM_POOL_SIZE+0x90>
     82e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
     832:	eb07 09c1 	add.w	r9, r7, r1, lsl #3
     836:	6861      	ldr	r1, [r4, #4]
     838:	f8d9 2008 	ldr.w	r2, [r9, #8]
     83c:	4620      	mov	r0, r4
     83e:	1a51      	subs	r1, r2, r1
     840:	0209      	lsls	r1, r1, #8
     842:	17ca      	asrs	r2, r1, #31
     844:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     848:	f109 0608 	add.w	r6, r9, #8
     84c:	1209      	asrs	r1, r1, #8
     84e:	d410      	bmi.n	872 <CONFIG_HEAP_MEM_POOL_SIZE+0x72>
     850:	8971      	ldrh	r1, [r6, #10]
     852:	b1e9      	cbz	r1, 890 <CONFIG_HEAP_MEM_POOL_SIZE+0x90>
     854:	8941      	ldrh	r1, [r0, #10]
     856:	b9d9      	cbnz	r1, 890 <CONFIG_HEAP_MEM_POOL_SIZE+0x90>
     858:	f000 fc1e 	bl	1098 <CONFIG_FPROTECT_BLOCK_SIZE+0x98>
     85c:	f001 febc 	bl	25d8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     860:	6831      	ldr	r1, [r6, #0]
     862:	1a08      	subs	r0, r1, r0
     864:	0200      	lsls	r0, r0, #8
     866:	17c1      	asrs	r1, r0, #31
     868:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     86c:	1200      	asrs	r0, r0, #8
     86e:	2833      	cmp	r0, #51	; 0x33
     870:	da0e      	bge.n	890 <CONFIG_HEAP_MEM_POOL_SIZE+0x90>
     872:	f888 5000 	strb.w	r5, [r8]
     876:	f899 0014 	ldrb.w	r0, [r9, #20]
     87a:	7b21      	ldrb	r1, [r4, #12]
     87c:	4288      	cmp	r0, r1
     87e:	d802      	bhi.n	886 <CONFIG_HEAP_MEM_POOL_SIZE+0x86>
     880:	2000      	movs	r0, #0
     882:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
     886:	eb0a 0045 	add.w	r0, sl, r5, lsl #1
     88a:	7845      	ldrb	r5, [r0, #1]
     88c:	2d20      	cmp	r5, #32
     88e:	d1ce      	bne.n	82e <CONFIG_HEAP_MEM_POOL_SIZE+0x2e>
     890:	2001      	movs	r0, #1
     892:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
     896:	0000      	.short	0x0000
     898:	20000ccc 	.word	0x20000ccc
     89c:	2000094c 	.word	0x2000094c
     8a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     8a4:	f04f 0800 	mov.w	r8, #0
     8a8:	b098      	sub	sp, #96	; 0x60
     8aa:	4616      	mov	r6, r2
     8ac:	460d      	mov	r5, r1
     8ae:	46c3      	mov	fp, r8
     8b0:	f002 f90a 	bl	2ac8 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
     8b4:	4604      	mov	r4, r0
     8b6:	2d01      	cmp	r5, #1
     8b8:	bf18      	it	ne
     8ba:	2d02      	cmpne	r5, #2
     8bc:	d005      	beq.n	8ca <CONFIG_HEAP_MEM_POOL_SIZE+0xca>
     8be:	f640 1193 	movw	r1, #2451	; 0x993
     8c2:	f04f 0070 	mov.w	r0, #112	; 0x70
     8c6:	f002 fecf 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     8ca:	49fd      	ldr	r1, [pc, #1012]	; (cc0 <CONFIG_HEAP_MEM_POOL_SIZE+0x4c0>)
     8cc:	2001      	movs	r0, #1
     8ce:	6008      	str	r0, [r1, #0]
     8d0:	49fc      	ldr	r1, [pc, #1008]	; (cc4 <CONFIG_HEAP_MEM_POOL_SIZE+0x4c4>)
     8d2:	6889      	ldr	r1, [r1, #8]
     8d4:	6008      	str	r0, [r1, #0]
     8d6:	2000      	movs	r0, #0
     8d8:	900c      	str	r0, [sp, #48]	; 0x30
     8da:	1e40      	subs	r0, r0, #1
     8dc:	900e      	str	r0, [sp, #56]	; 0x38
     8de:	49fa      	ldr	r1, [pc, #1000]	; (cc8 <CONFIG_HEAP_MEM_POOL_SIZE+0x4c8>)
     8e0:	eb06 0046 	add.w	r0, r6, r6, lsl #1
     8e4:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
     8e8:	3308      	adds	r3, #8
     8ea:	af0f      	add	r7, sp, #60	; 0x3c
     8ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
     8ee:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
     8f2:	a80f      	add	r0, sp, #60	; 0x3c
     8f4:	f000 fbd0 	bl	1098 <CONFIG_FPROTECT_BLOCK_SIZE+0x98>
     8f8:	900d      	str	r0, [sp, #52]	; 0x34
     8fa:	48f3      	ldr	r0, [pc, #972]	; (cc8 <CONFIG_HEAP_MEM_POOL_SIZE+0x4c8>)
     8fc:	f8bd 9046 	ldrh.w	r9, [sp, #70]	; 0x46
     900:	f8b0 039c 	ldrh.w	r0, [r0, #924]	; 0x39c
     904:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
     908:	f1b9 0f00 	cmp.w	r9, #0
     90c:	bf14      	ite	ne
     90e:	f04f 0a01 	movne.w	sl, #1
     912:	f04f 0a00 	moveq.w	sl, #0
     916:	980f      	ldr	r0, [sp, #60]	; 0x3c
     918:	9014      	str	r0, [sp, #80]	; 0x50
     91a:	f1ba 0f00 	cmp.w	sl, #0
     91e:	d009      	beq.n	934 <CONFIG_HEAP_MEM_POOL_SIZE+0x134>
     920:	48ea      	ldr	r0, [pc, #936]	; (ccc <CONFIG_HEAP_MEM_POOL_SIZE+0x4cc>)
     922:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
     926:	b928      	cbnz	r0, 934 <CONFIG_HEAP_MEM_POOL_SIZE+0x134>
     928:	f002 fe3a 	bl	35a0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
     92c:	2800      	cmp	r0, #0
     92e:	bf08      	it	eq
     930:	2701      	moveq	r7, #1
     932:	d000      	beq.n	936 <CONFIG_HEAP_MEM_POOL_SIZE+0x136>
     934:	2700      	movs	r7, #0
     936:	48e6      	ldr	r0, [pc, #920]	; (cd0 <CONFIG_HEAP_MEM_POOL_SIZE+0x4d0>)
     938:	2200      	movs	r2, #0
     93a:	9215      	str	r2, [sp, #84]	; 0x54
     93c:	7800      	ldrb	r0, [r0, #0]
     93e:	4616      	mov	r6, r2
     940:	2801      	cmp	r0, #1
     942:	bf18      	it	ne
     944:	2803      	cmpne	r0, #3
     946:	d140      	bne.n	9ca <CONFIG_HEAP_MEM_POOL_SIZE+0x1ca>
     948:	48e1      	ldr	r0, [pc, #900]	; (cd0 <CONFIG_HEAP_MEM_POOL_SIZE+0x4d0>)
     94a:	f8b0 8002 	ldrh.w	r8, [r0, #2]
     94e:	eba8 0009 	sub.w	r0, r8, r9
     952:	9015      	str	r0, [sp, #84]	; 0x54
     954:	45c8      	cmp	r8, r9
     956:	d938      	bls.n	9ca <CONFIG_HEAP_MEM_POOL_SIZE+0x1ca>
     958:	9b0d      	ldr	r3, [sp, #52]	; 0x34
     95a:	ea6f 0108 	mvn.w	r1, r8
     95e:	f8df e374 	ldr.w	lr, [pc, #884]	; cd4 <CONFIG_HEAP_MEM_POOL_SIZE+0x4d4>
     962:	1858      	adds	r0, r3, r1
     964:	f10d 0c0c 	add.w	ip, sp, #12
     968:	aa17      	add	r2, sp, #92	; 0x5c
     96a:	4573      	cmp	r3, lr
     96c:	d904      	bls.n	978 <CONFIG_HEAP_MEM_POOL_SIZE+0x178>
     96e:	f240 6116 	movw	r1, #1558	; 0x616
     972:	2070      	movs	r0, #112	; 0x70
     974:	f002 fe78 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     978:	4bd7      	ldr	r3, [pc, #860]	; (cd8 <CONFIG_HEAP_MEM_POOL_SIZE+0x4d8>)
     97a:	4299      	cmp	r1, r3
     97c:	dd04      	ble.n	988 <CONFIG_HEAP_MEM_POOL_SIZE+0x188>
     97e:	f240 6117 	movw	r1, #1559	; 0x617
     982:	2070      	movs	r0, #112	; 0x70
     984:	f002 fe70 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     988:	4bd4      	ldr	r3, [pc, #848]	; (cdc <CONFIG_HEAP_MEM_POOL_SIZE+0x4dc>)
     98a:	4299      	cmp	r1, r3
     98c:	da04      	bge.n	998 <CONFIG_HEAP_MEM_POOL_SIZE+0x198>
     98e:	f44f 61c3 	mov.w	r1, #1560	; 0x618
     992:	2070      	movs	r0, #112	; 0x70
     994:	f002 fe68 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     998:	49d1      	ldr	r1, [pc, #836]	; (ce0 <CONFIG_HEAP_MEM_POOL_SIZE+0x4e0>)
     99a:	4281      	cmp	r1, r0
     99c:	bfdc      	itt	le
     99e:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
     9a2:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
     9a6:	dd05      	ble.n	9b4 <CONFIG_HEAP_MEM_POOL_SIZE+0x1b4>
     9a8:	2800      	cmp	r0, #0
     9aa:	bfbc      	itt	lt
     9ac:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
     9b0:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
     9b4:	4661      	mov	r1, ip
     9b6:	f001 fe2b 	bl	2610 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     9ba:	9803      	ldr	r0, [sp, #12]
     9bc:	990f      	ldr	r1, [sp, #60]	; 0x3c
     9be:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     9c2:	9003      	str	r0, [sp, #12]
     9c4:	1a08      	subs	r0, r1, r0
     9c6:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
     9ca:	2f00      	cmp	r7, #0
     9cc:	bf18      	it	ne
     9ce:	2632      	movne	r6, #50	; 0x32
     9d0:	d104      	bne.n	9dc <CONFIG_HEAP_MEM_POOL_SIZE+0x1dc>
     9d2:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
     9d6:	2800      	cmp	r0, #0
     9d8:	bf18      	it	ne
     9da:	2602      	movne	r6, #2
     9dc:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     9e0:	d008      	beq.n	9f4 <CONFIG_HEAP_MEM_POOL_SIZE+0x1f4>
     9e2:	980f      	ldr	r0, [sp, #60]	; 0x3c
     9e4:	1b00      	subs	r0, r0, r4
     9e6:	0200      	lsls	r0, r0, #8
     9e8:	17c1      	asrs	r1, r0, #31
     9ea:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     9ee:	1200      	asrs	r0, r0, #8
     9f0:	2801      	cmp	r0, #1
     9f2:	da02      	bge.n	9fa <CONFIG_HEAP_MEM_POOL_SIZE+0x1fa>
     9f4:	2104      	movs	r1, #4
     9f6:	9818      	ldr	r0, [sp, #96]	; 0x60
     9f8:	e00b      	b.n	a12 <CONFIG_HEAP_MEM_POOL_SIZE+0x212>
     9fa:	b147      	cbz	r7, a0e <CONFIG_HEAP_MEM_POOL_SIZE+0x20e>
     9fc:	48b3      	ldr	r0, [pc, #716]	; (ccc <CONFIG_HEAP_MEM_POOL_SIZE+0x4cc>)
     9fe:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
     a02:	b120      	cbz	r0, a0e <CONFIG_HEAP_MEM_POOL_SIZE+0x20e>
     a04:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
     a08:	1c06      	adds	r6, r0, #0
     a0a:	bf18      	it	ne
     a0c:	2602      	movne	r6, #2
     a0e:	4620      	mov	r0, r4
     a10:	2101      	movs	r1, #1
     a12:	f1b9 0f00 	cmp.w	r9, #0
     a16:	d002      	beq.n	a1e <CONFIG_HEAP_MEM_POOL_SIZE+0x21e>
     a18:	9b15      	ldr	r3, [sp, #84]	; 0x54
     a1a:	2b1e      	cmp	r3, #30
     a1c:	da02      	bge.n	a24 <CONFIG_HEAP_MEM_POOL_SIZE+0x224>
     a1e:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
     a22:	b113      	cbz	r3, a2a <CONFIG_HEAP_MEM_POOL_SIZE+0x22a>
     a24:	f04f 0b01 	mov.w	fp, #1
     a28:	1e49      	subs	r1, r1, #1
     a2a:	198b      	adds	r3, r1, r6
     a2c:	49a8      	ldr	r1, [pc, #672]	; (cd0 <CONFIG_HEAP_MEM_POOL_SIZE+0x4d0>)
     a2e:	f89d e04d 	ldrb.w	lr, [sp, #77]	; 0x4d
     a32:	7809      	ldrb	r1, [r1, #0]
     a34:	9115      	str	r1, [sp, #84]	; 0x54
     a36:	990f      	ldr	r1, [sp, #60]	; 0x3c
     a38:	1a89      	subs	r1, r1, r2
     a3a:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
     a3e:	ebac 0100 	sub.w	r1, ip, r0
     a42:	0209      	lsls	r1, r1, #8
     a44:	17ce      	asrs	r6, r1, #31
     a46:	eb01 6116 	add.w	r1, r1, r6, lsr #24
     a4a:	1209      	asrs	r1, r1, #8
     a4c:	4299      	cmp	r1, r3
     a4e:	db18      	blt.n	a82 <CONFIG_HEAP_MEM_POOL_SIZE+0x282>
     a50:	2a00      	cmp	r2, #0
     a52:	bf18      	it	ne
     a54:	f8cd c03c 	strne.w	ip, [sp, #60]	; 0x3c
     a58:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
     a5a:	9705      	str	r7, [sp, #20]
     a5c:	2700      	movs	r7, #0
     a5e:	f001 ff2d 	bl	28bc <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
     a62:	1a30      	subs	r0, r6, r0
     a64:	0200      	lsls	r0, r0, #8
     a66:	17c1      	asrs	r1, r0, #31
     a68:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     a6c:	1200      	asrs	r0, r0, #8
     a6e:	283e      	cmp	r0, #62	; 0x3e
     a70:	da3f      	bge.n	af2 <CONFIG_HEAP_MEM_POOL_SIZE+0x2f2>
     a72:	2d01      	cmp	r5, #1
     a74:	d020      	beq.n	ab8 <CONFIG_HEAP_MEM_POOL_SIZE+0x2b8>
     a76:	1e70      	subs	r0, r6, #1
     a78:	9905      	ldr	r1, [sp, #20]
     a7a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     a7e:	b319      	cbz	r1, ac8 <CONFIG_HEAP_MEM_POOL_SIZE+0x2c8>
     a80:	e02d      	b.n	ade <CONFIG_HEAP_MEM_POOL_SIZE+0x2de>
     a82:	b182      	cbz	r2, aa6 <CONFIG_HEAP_MEM_POOL_SIZE+0x2a6>
     a84:	f1be 0f00 	cmp.w	lr, #0
     a88:	bf04      	itt	eq
     a8a:	9915      	ldreq	r1, [sp, #84]	; 0x54
     a8c:	2903      	cmpeq	r1, #3
     a8e:	d00a      	beq.n	aa6 <CONFIG_HEAP_MEM_POOL_SIZE+0x2a6>
     a90:	b927      	cbnz	r7, a9c <CONFIG_HEAP_MEM_POOL_SIZE+0x29c>
     a92:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
     a96:	2900      	cmp	r1, #0
     a98:	bf18      	it	ne
     a9a:	1e9b      	subne	r3, r3, #2
     a9c:	2200      	movs	r2, #0
     a9e:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
     aa2:	4690      	mov	r8, r2
     aa4:	e7c7      	b.n	a36 <CONFIG_HEAP_MEM_POOL_SIZE+0x236>
     aa6:	bb07      	cbnz	r7, aea <CONFIG_HEAP_MEM_POOL_SIZE+0x2ea>
     aa8:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
     aac:	b1e9      	cbz	r1, aea <CONFIG_HEAP_MEM_POOL_SIZE+0x2ea>
     aae:	2100      	movs	r1, #0
     ab0:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
     ab4:	1e9b      	subs	r3, r3, #2
     ab6:	e7be      	b.n	a36 <CONFIG_HEAP_MEM_POOL_SIZE+0x236>
     ab8:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     abc:	d120      	bne.n	b00 <CONFIG_HEAP_MEM_POOL_SIZE+0x300>
     abe:	f640 110c 	movw	r1, #2316	; 0x90c
     ac2:	2070      	movs	r0, #112	; 0x70
     ac4:	f002 fdd0 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     ac8:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     acc:	d007      	beq.n	ade <CONFIG_HEAP_MEM_POOL_SIZE+0x2de>
     ace:	1a21      	subs	r1, r4, r0
     ad0:	0209      	lsls	r1, r1, #8
     ad2:	17ca      	asrs	r2, r1, #31
     ad4:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     ad8:	1209      	asrs	r1, r1, #8
     ada:	2904      	cmp	r1, #4
     adc:	dd03      	ble.n	ae6 <CONFIG_HEAP_MEM_POOL_SIZE+0x2e6>
     ade:	4604      	mov	r4, r0
     ae0:	f001 fef2 	bl	28c8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
     ae4:	e00c      	b.n	b00 <CONFIG_HEAP_MEM_POOL_SIZE+0x300>
     ae6:	2900      	cmp	r1, #0
     ae8:	dd0a      	ble.n	b00 <CONFIG_HEAP_MEM_POOL_SIZE+0x300>
     aea:	b01b      	add	sp, #108	; 0x6c
     aec:	2000      	movs	r0, #0
     aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     af2:	1e70      	subs	r0, r6, #1
     af4:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
     af8:	4620      	mov	r0, r4
     afa:	f001 fee5 	bl	28c8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
     afe:	4657      	mov	r7, sl
     b00:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     b04:	d028      	beq.n	b58 <CONFIG_HEAP_MEM_POOL_SIZE+0x358>
     b06:	980f      	ldr	r0, [sp, #60]	; 0x3c
     b08:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
     b0c:	1b00      	subs	r0, r0, r4
     b0e:	f08b 0301 	eor.w	r3, fp, #1
     b12:	4a74      	ldr	r2, [pc, #464]	; (ce4 <CONFIG_HEAP_MEM_POOL_SIZE+0x4e4>)
     b14:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     b18:	ebac 0c04 	sub.w	ip, ip, r4
     b1c:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
     b20:	4283      	cmp	r3, r0
     b22:	bf98      	it	ls
     b24:	f5b0 0f80 	cmpls.w	r0, #4194304	; 0x400000
     b28:	d2df      	bcs.n	aea <CONFIG_HEAP_MEM_POOL_SIZE+0x2ea>
     b2a:	4562      	cmp	r2, ip
     b2c:	d3dd      	bcc.n	aea <CONFIG_HEAP_MEM_POOL_SIZE+0x2ea>
     b2e:	4620      	mov	r0, r4
     b30:	f00a fcd7 	bl	b4e2 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
     b34:	4967      	ldr	r1, [pc, #412]	; (cd4 <CONFIG_HEAP_MEM_POOL_SIZE+0x4d4>)
     b36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
     b38:	1c4b      	adds	r3, r1, #1
     b3a:	1a16      	subs	r6, r2, r0
     b3c:	ebb6 0f93 	cmp.w	r6, r3, lsr #2
     b40:	bf24      	itt	cs
     b42:	eba0 0c02 	subcs.w	ip, r0, r2
     b46:	ebbc 0f93 	cmpcs.w	ip, r3, lsr #2
     b4a:	d310      	bcc.n	b6e <CONFIG_HEAP_MEM_POOL_SIZE+0x36e>
     b4c:	42b1      	cmp	r1, r6
     b4e:	d208      	bcs.n	b62 <CONFIG_HEAP_MEM_POOL_SIZE+0x362>
     b50:	1a08      	subs	r0, r1, r0
     b52:	4410      	add	r0, r2
     b54:	1c46      	adds	r6, r0, #1
     b56:	e00a      	b.n	b6e <CONFIG_HEAP_MEM_POOL_SIZE+0x36e>
     b58:	f640 212b 	movw	r1, #2603	; 0xa2b
     b5c:	2070      	movs	r0, #112	; 0x70
     b5e:	f002 fd83 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     b62:	4561      	cmp	r1, ip
     b64:	d22c      	bcs.n	bc0 <CONFIG_HEAP_MEM_POOL_SIZE+0x3c0>
     b66:	1a89      	subs	r1, r1, r2
     b68:	4408      	add	r0, r1
     b6a:	1c40      	adds	r0, r0, #1
     b6c:	4246      	negs	r6, r0
     b6e:	4857      	ldr	r0, [pc, #348]	; (ccc <CONFIG_HEAP_MEM_POOL_SIZE+0x4cc>)
     b70:	7f80      	ldrb	r0, [r0, #30]
     b72:	b350      	cbz	r0, bca <CONFIG_HEAP_MEM_POOL_SIZE+0x3ca>
     b74:	4628      	mov	r0, r5
     b76:	4645      	mov	r5, r8
     b78:	f04f 0b00 	mov.w	fp, #0
     b7c:	46d8      	mov	r8, fp
     b7e:	2801      	cmp	r0, #1
     b80:	d005      	beq.n	b8e <CONFIG_HEAP_MEM_POOL_SIZE+0x38e>
     b82:	2002      	movs	r0, #2
     b84:	f002 f8e8 	bl	2d58 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     b88:	2001      	movs	r0, #1
     b8a:	f002 f8e5 	bl	2d58 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     b8e:	45a9      	cmp	r9, r5
     b90:	d22c      	bcs.n	bec <CONFIG_HEAP_MEM_POOL_SIZE+0x3ec>
     b92:	eba6 0105 	sub.w	r1, r6, r5
     b96:	f04f 0301 	mov.w	r3, #1
     b9a:	f04f 0203 	mov.w	r2, #3
     b9e:	f04f 0002 	mov.w	r0, #2
     ba2:	f002 f811 	bl	2bc8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     ba6:	2800      	cmp	r0, #0
     ba8:	bf08      	it	eq
     baa:	f04f 0801 	moveq.w	r8, #1
     bae:	f1b9 0f00 	cmp.w	r9, #0
     bb2:	d035      	beq.n	c20 <CONFIG_HEAP_MEM_POOL_SIZE+0x420>
     bb4:	2301      	movs	r3, #1
     bb6:	eba6 0109 	sub.w	r1, r6, r9
     bba:	2203      	movs	r2, #3
     bbc:	4618      	mov	r0, r3
     bbe:	e023      	b.n	c08 <CONFIG_HEAP_MEM_POOL_SIZE+0x408>
     bc0:	f640 310b 	movw	r1, #2827	; 0xb0b
     bc4:	2070      	movs	r0, #112	; 0x70
     bc6:	f002 fd4f 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     bca:	45c1      	cmp	r9, r8
     bcc:	bf34      	ite	cc
     bce:	4640      	movcc	r0, r8
     bd0:	4648      	movcs	r0, r9
     bd2:	f1bb 0f00 	cmp.w	fp, #0
     bd6:	bf14      	ite	ne
     bd8:	2100      	movne	r1, #0
     bda:	211e      	moveq	r1, #30
     bdc:	4408      	add	r0, r1
     bde:	42b0      	cmp	r0, r6
     be0:	dbc8      	blt.n	b74 <CONFIG_HEAP_MEM_POOL_SIZE+0x374>
     be2:	f640 213e 	movw	r1, #2622	; 0xa3e
     be6:	2070      	movs	r0, #112	; 0x70
     be8:	f002 fd3e 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     bec:	d910      	bls.n	c10 <CONFIG_HEAP_MEM_POOL_SIZE+0x410>
     bee:	2301      	movs	r3, #1
     bf0:	eba6 0109 	sub.w	r1, r6, r9
     bf4:	2203      	movs	r2, #3
     bf6:	4618      	mov	r0, r3
     bf8:	f001 ffe6 	bl	2bc8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     bfc:	b328      	cbz	r0, c4a <CONFIG_HEAP_MEM_POOL_SIZE+0x44a>
     bfe:	b17d      	cbz	r5, c20 <CONFIG_HEAP_MEM_POOL_SIZE+0x420>
     c00:	1b71      	subs	r1, r6, r5
     c02:	2301      	movs	r3, #1
     c04:	2203      	movs	r2, #3
     c06:	2002      	movs	r0, #2
     c08:	f001 ffde 	bl	2bc8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     c0c:	b1e8      	cbz	r0, c4a <CONFIG_HEAP_MEM_POOL_SIZE+0x44a>
     c0e:	e007      	b.n	c20 <CONFIG_HEAP_MEM_POOL_SIZE+0x420>
     c10:	ea55 0009 	orrs.w	r0, r5, r9
     c14:	d004      	beq.n	c20 <CONFIG_HEAP_MEM_POOL_SIZE+0x420>
     c16:	f640 1176 	movw	r1, #2422	; 0x976
     c1a:	2070      	movs	r0, #112	; 0x70
     c1c:	f002 fd24 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     c20:	2301      	movs	r3, #1
     c22:	2203      	movs	r2, #3
     c24:	4631      	mov	r1, r6
     c26:	2000      	movs	r0, #0
     c28:	f001 ffce 	bl	2bc8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     c2c:	b168      	cbz	r0, c4a <CONFIG_HEAP_MEM_POOL_SIZE+0x44a>
     c2e:	2501      	movs	r5, #1
     c30:	f1b8 0f00 	cmp.w	r8, #0
     c34:	d003      	beq.n	c3e <CONFIG_HEAP_MEM_POOL_SIZE+0x43e>
     c36:	9814      	ldr	r0, [sp, #80]	; 0x50
     c38:	900f      	str	r0, [sp, #60]	; 0x3c
     c3a:	f88d b04c 	strb.w	fp, [sp, #76]	; 0x4c
     c3e:	f8df 80a8 	ldr.w	r8, [pc, #168]	; ce8 <CONFIG_HEAP_MEM_POOL_SIZE+0x4e8>
     c42:	f1ba 0f00 	cmp.w	sl, #0
     c46:	d10e      	bne.n	c66 <CONFIG_HEAP_MEM_POOL_SIZE+0x466>
     c48:	e009      	b.n	c5e <CONFIG_HEAP_MEM_POOL_SIZE+0x45e>
     c4a:	2002      	movs	r0, #2
     c4c:	f002 f884 	bl	2d58 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     c50:	2001      	movs	r0, #1
     c52:	f002 f881 	bl	2d58 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     c56:	b01b      	add	sp, #108	; 0x6c
     c58:	2000      	movs	r0, #0
     c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     c5e:	481b      	ldr	r0, [pc, #108]	; (ccc <CONFIG_HEAP_MEM_POOL_SIZE+0x4cc>)
     c60:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
     c64:	b100      	cbz	r0, c68 <CONFIG_HEAP_MEM_POOL_SIZE+0x468>
     c66:	b34f      	cbz	r7, cbc <CONFIG_HEAP_MEM_POOL_SIZE+0x4bc>
     c68:	f8df a060 	ldr.w	sl, [pc, #96]	; ccc <CONFIG_HEAP_MEM_POOL_SIZE+0x4cc>
     c6c:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
     c70:	b118      	cbz	r0, c7a <CONFIG_HEAP_MEM_POOL_SIZE+0x47a>
     c72:	f002 fb3f 	bl	32f4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
     c76:	f88a b02c 	strb.w	fp, [sl, #44]	; 0x2c
     c7a:	b307      	cbz	r7, cbe <CONFIG_HEAP_MEM_POOL_SIZE+0x4be>
     c7c:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
     c80:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     c84:	f44f 2000 	mov.w	r0, #524288	; 0x80000
     c88:	f8c8 0000 	str.w	r0, [r8]
     c8c:	2300      	movs	r3, #0
     c8e:	2203      	movs	r2, #3
     c90:	2005      	movs	r0, #5
     c92:	f001 ff99 	bl	2bc8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     c96:	b368      	cbz	r0, cf4 <CONFIG_HEAP_MEM_POOL_SIZE+0x4f4>
     c98:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
     c9c:	2005      	movs	r0, #5
     c9e:	f002 f921 	bl	2ee4 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
     ca2:	4912      	ldr	r1, [pc, #72]	; (cec <CONFIG_HEAP_MEM_POOL_SIZE+0x4ec>)
     ca4:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
     ca8:	f8c1 4514 	str.w	r4, [r1, #1300]	; 0x514
     cac:	4910      	ldr	r1, [pc, #64]	; (cf0 <CONFIG_HEAP_MEM_POOL_SIZE+0x4f0>)
     cae:	12e0      	asrs	r0, r4, #11
     cb0:	6008      	str	r0, [r1, #0]
     cb2:	4c06      	ldr	r4, [pc, #24]	; (ccc <CONFIG_HEAP_MEM_POOL_SIZE+0x4cc>)
     cb4:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
     cb8:	b3f0      	cbz	r0, d38 <CONFIG_HEAP_MEM_POOL_SIZE+0x538>
     cba:	e05b      	b.n	d74 <CONFIG_HEAP_MEM_POOL_SIZE+0x574>
     cbc:	e01b      	b.n	cf6 <CONFIG_HEAP_MEM_POOL_SIZE+0x4f6>
     cbe:	e01f      	b.n	d00 <CONFIG_HEAP_MEM_POOL_SIZE+0x500>
     cc0:	40000508 	.word	0x40000508
     cc4:	20000010 	.word	0x20000010
     cc8:	2000094c 	.word	0x2000094c
     ccc:	20000ccc 	.word	0x20000ccc
     cd0:	20000012 	.word	0x20000012
     cd4:	1e847fff 	.word	0x1e847fff
     cd8:	07a12000 	.word	0x07a12000
     cdc:	f85ee000 	.word	0xf85ee000
     ce0:	1e848000 	.word	0x1e848000
     ce4:	003fffff 	.word	0x003fffff
     ce8:	4001f508 	.word	0x4001f508
     cec:	4001f098 	.word	0x4001f098
     cf0:	4001f504 	.word	0x4001f504
     cf4:	e035      	b.n	d62 <CONFIG_HEAP_MEM_POOL_SIZE+0x562>
     cf6:	f8df a0b8 	ldr.w	sl, [pc, #184]	; db0 <CONFIG_HEAP_MEM_POOL_SIZE+0x5b0>
     cfa:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
     cfe:	b358      	cbz	r0, d58 <CONFIG_HEAP_MEM_POOL_SIZE+0x558>
     d00:	4c2b      	ldr	r4, [pc, #172]	; (db0 <CONFIG_HEAP_MEM_POOL_SIZE+0x5b0>)
     d02:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
     d06:	b150      	cbz	r0, d1e <CONFIG_HEAP_MEM_POOL_SIZE+0x51e>
     d08:	f44f 2000 	mov.w	r0, #524288	; 0x80000
     d0c:	f8c8 0000 	str.w	r0, [r8]
     d10:	2005      	movs	r0, #5
     d12:	f002 f821 	bl	2d58 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     d16:	f002 fb55 	bl	33c4 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
     d1a:	f884 b02d 	strb.w	fp, [r4, #45]	; 0x2d
     d1e:	ac0c      	add	r4, sp, #48	; 0x30
     d20:	4824      	ldr	r0, [pc, #144]	; (db4 <CONFIG_HEAP_MEM_POOL_SIZE+0x5b4>)
     d22:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
     d26:	f8c0 1380 	str.w	r1, [r0, #896]	; 0x380
     d2a:	f8c0 2384 	str.w	r2, [r0, #900]	; 0x384
     d2e:	f8c0 3388 	str.w	r3, [r0, #904]	; 0x388
     d32:	f8c0 c38c 	str.w	ip, [r0, #908]	; 0x38c
     d36:	e000      	b.n	d3a <CONFIG_HEAP_MEM_POOL_SIZE+0x53a>
     d38:	e018      	b.n	d6c <CONFIG_HEAP_MEM_POOL_SIZE+0x56c>
     d3a:	ac10      	add	r4, sp, #64	; 0x40
     d3c:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
     d40:	f8c0 1390 	str.w	r1, [r0, #912]	; 0x390
     d44:	f8c0 2394 	str.w	r2, [r0, #916]	; 0x394
     d48:	f8c0 3398 	str.w	r3, [r0, #920]	; 0x398
     d4c:	f8c0 c39c 	str.w	ip, [r0, #924]	; 0x39c
     d50:	b01b      	add	sp, #108	; 0x6c
     d52:	2001      	movs	r0, #1
     d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     d58:	f002 fae8 	bl	332c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
     d5c:	f88a 502c 	strb.w	r5, [sl, #44]	; 0x2c
     d60:	e78b      	b.n	c7a <CONFIG_HEAP_MEM_POOL_SIZE+0x47a>
     d62:	f240 3151 	movw	r1, #849	; 0x351
     d66:	2070      	movs	r0, #112	; 0x70
     d68:	f002 fc7e 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     d6c:	f002 fb1c 	bl	33a8 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>
     d70:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
     d74:	eba6 0009 	sub.w	r0, r6, r9
     d78:	f1a0 0119 	sub.w	r1, r0, #25
     d7c:	2900      	cmp	r1, #0
     d7e:	dc04      	bgt.n	d8a <CONFIG_HEAP_MEM_POOL_SIZE+0x58a>
     d80:	f640 2168 	movw	r1, #2664	; 0xa68
     d84:	2070      	movs	r0, #112	; 0x70
     d86:	f002 fc6f 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     d8a:	2203      	movs	r2, #3
     d8c:	2301      	movs	r3, #1
     d8e:	4610      	mov	r0, r2
     d90:	f001 ff1a 	bl	2bc8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     d94:	b138      	cbz	r0, da6 <CONFIG_HEAP_MEM_POOL_SIZE+0x5a6>
     d96:	4808      	ldr	r0, [pc, #32]	; (db8 <CONFIG_HEAP_MEM_POOL_SIZE+0x5b8>)
     d98:	6880      	ldr	r0, [r0, #8]
     d9a:	f8c0 b000 	str.w	fp, [r0]
     d9e:	4807      	ldr	r0, [pc, #28]	; (dbc <CONFIG_HEAP_MEM_POOL_SIZE+0x5bc>)
     da0:	f8c0 b000 	str.w	fp, [r0]
     da4:	e7bb      	b.n	d1e <CONFIG_HEAP_MEM_POOL_SIZE+0x51e>
     da6:	f640 2173 	movw	r1, #2675	; 0xa73
     daa:	2070      	movs	r0, #112	; 0x70
     dac:	f002 fc5c 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     db0:	20000ccc 	.word	0x20000ccc
     db4:	2000094c 	.word	0x2000094c
     db8:	20000010 	.word	0x20000010
     dbc:	40000508 	.word	0x40000508
     dc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     dc4:	4606      	mov	r6, r0
     dc6:	b083      	sub	sp, #12
     dc8:	7808      	ldrb	r0, [r1, #0]
     dca:	7390      	strb	r0, [r2, #14]
     dcc:	7acf      	ldrb	r7, [r1, #11]
     dce:	7357      	strb	r7, [r2, #13]
     dd0:	7a88      	ldrb	r0, [r1, #10]
     dd2:	7310      	strb	r0, [r2, #12]
     dd4:	8908      	ldrh	r0, [r1, #8]
     dd6:	4614      	mov	r4, r2
     dd8:	8150      	strh	r0, [r2, #10]
     dda:	460d      	mov	r5, r1
     ddc:	780a      	ldrb	r2, [r1, #0]
     dde:	495f      	ldr	r1, [pc, #380]	; (f5c <CONFIG_HEAP_MEM_POOL_SIZE+0x75c>)
     de0:	4699      	mov	r9, r3
     de2:	ea4f 0c81 	mov.w	ip, r1, lsl #2
     de6:	424b      	negs	r3, r1
     de8:	f1ac 0801 	sub.w	r8, ip, #1
     dec:	b15a      	cbz	r2, e06 <CONFIG_HEAP_MEM_POOL_SIZE+0x606>
     dee:	43c0      	mvns	r0, r0
     df0:	f8d5 8004 	ldr.w	r8, [r5, #4]
     df4:	f104 0208 	add.w	r2, r4, #8
     df8:	4288      	cmp	r0, r1
     dfa:	dd3d      	ble.n	e78 <CONFIG_HEAP_MEM_POOL_SIZE+0x678>
     dfc:	f240 6117 	movw	r1, #1559	; 0x617
     e00:	2070      	movs	r0, #112	; 0x70
     e02:	f002 fc31 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e06:	68ee      	ldr	r6, [r5, #12]
     e08:	686d      	ldr	r5, [r5, #4]
     e0a:	ea6f 0900 	mvn.w	r9, r0
     e0e:	f104 0208 	add.w	r2, r4, #8
     e12:	eb06 0009 	add.w	r0, r6, r9
     e16:	4546      	cmp	r6, r8
     e18:	d904      	bls.n	e24 <CONFIG_HEAP_MEM_POOL_SIZE+0x624>
     e1a:	f240 6116 	movw	r1, #1558	; 0x616
     e1e:	2070      	movs	r0, #112	; 0x70
     e20:	f002 fc22 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e24:	4589      	cmp	r9, r1
     e26:	dce9      	bgt.n	dfc <CONFIG_HEAP_MEM_POOL_SIZE+0x5fc>
     e28:	4599      	cmp	r9, r3
     e2a:	db28      	blt.n	e7e <CONFIG_HEAP_MEM_POOL_SIZE+0x67e>
     e2c:	4584      	cmp	ip, r0
     e2e:	bfdc      	itt	le
     e30:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
     e34:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
     e38:	dd05      	ble.n	e46 <CONFIG_HEAP_MEM_POOL_SIZE+0x646>
     e3a:	2800      	cmp	r0, #0
     e3c:	bfbc      	itt	lt
     e3e:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
     e42:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
     e46:	4621      	mov	r1, r4
     e48:	f001 fbe2 	bl	2610 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     e4c:	6820      	ldr	r0, [r4, #0]
     e4e:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     e52:	1970      	adds	r0, r6, r5
     e54:	1c40      	adds	r0, r0, #1
     e56:	6021      	str	r1, [r4, #0]
     e58:	2f00      	cmp	r7, #0
     e5a:	bf08      	it	eq
     e5c:	307a      	addeq	r0, #122	; 0x7a
     e5e:	d003      	beq.n	e68 <CONFIG_HEAP_MEM_POOL_SIZE+0x668>
     e60:	2f01      	cmp	r7, #1
     e62:	bf08      	it	eq
     e64:	3044      	addeq	r0, #68	; 0x44
     e66:	d12d      	bne.n	ec4 <CONFIG_HEAP_MEM_POOL_SIZE+0x6c4>
     e68:	f001 fbb6 	bl	25d8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     e6c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     e70:	6060      	str	r0, [r4, #4]
     e72:	b003      	add	sp, #12
     e74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     e78:	4601      	mov	r1, r0
     e7a:	4298      	cmp	r0, r3
     e7c:	da04      	bge.n	e88 <CONFIG_HEAP_MEM_POOL_SIZE+0x688>
     e7e:	f44f 61c3 	mov.w	r1, #1560	; 0x618
     e82:	2070      	movs	r0, #112	; 0x70
     e84:	f002 fbf0 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e88:	4584      	cmp	ip, r0
     e8a:	bfdc      	itt	le
     e8c:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
     e90:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
     e94:	dd05      	ble.n	ea2 <CONFIG_HEAP_MEM_POOL_SIZE+0x6a2>
     e96:	2800      	cmp	r0, #0
     e98:	bfbc      	itt	lt
     e9a:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
     e9e:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
     ea2:	4621      	mov	r1, r4
     ea4:	f001 fbb4 	bl	2610 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     ea8:	6820      	ldr	r0, [r4, #0]
     eaa:	2f00      	cmp	r7, #0
     eac:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     eb0:	f108 0001 	add.w	r0, r8, #1
     eb4:	6021      	str	r1, [r4, #0]
     eb6:	bf08      	it	eq
     eb8:	307a      	addeq	r0, #122	; 0x7a
     eba:	d008      	beq.n	ece <CONFIG_HEAP_MEM_POOL_SIZE+0x6ce>
     ebc:	2f01      	cmp	r7, #1
     ebe:	bf08      	it	eq
     ec0:	3044      	addeq	r0, #68	; 0x44
     ec2:	d004      	beq.n	ece <CONFIG_HEAP_MEM_POOL_SIZE+0x6ce>
     ec4:	f240 61be 	movw	r1, #1726	; 0x6be
     ec8:	2070      	movs	r0, #112	; 0x70
     eca:	f002 fbcd 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     ece:	f001 fb83 	bl	25d8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     ed2:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     ed6:	6061      	str	r1, [r4, #4]
     ed8:	8960      	ldrh	r0, [r4, #10]
     eda:	aa01      	add	r2, sp, #4
     edc:	4669      	mov	r1, sp
     ede:	f001 fb97 	bl	2610 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     ee2:	481f      	ldr	r0, [pc, #124]	; (f60 <CONFIG_HEAP_MEM_POOL_SIZE+0x760>)
     ee4:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
     ee8:	2920      	cmp	r1, #32
     eea:	d023      	beq.n	f34 <CONFIG_HEAP_MEM_POOL_SIZE+0x734>
     eec:	6900      	ldr	r0, [r0, #16]
     eee:	1d40      	adds	r0, r0, #5
     ef0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     ef4:	e9d4 2100 	ldrd	r2, r1, [r4]
     ef8:	1a89      	subs	r1, r1, r2
     efa:	6020      	str	r0, [r4, #0]
     efc:	4408      	add	r0, r1
     efe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     f02:	6060      	str	r0, [r4, #4]
     f04:	464b      	mov	r3, r9
     f06:	4632      	mov	r2, r6
     f08:	4621      	mov	r1, r4
     f0a:	68e8      	ldr	r0, [r5, #12]
     f0c:	f7ff fad2 	bl	4b4 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x40>
     f10:	2800      	cmp	r0, #0
     f12:	bf1c      	itt	ne
     f14:	b003      	addne	sp, #12
     f16:	e8bd 83f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     f1a:	e9d4 1000 	ldrd	r1, r0, [r4]
     f1e:	1a40      	subs	r0, r0, r1
     f20:	4430      	add	r0, r6
     f22:	f026 417f 	bic.w	r1, r6, #4278190080	; 0xff000000
     f26:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     f2a:	e9c4 1000 	strd	r1, r0, [r4]
     f2e:	b003      	add	sp, #12
     f30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     f34:	8960      	ldrh	r0, [r4, #10]
     f36:	f106 0709 	add.w	r7, r6, #9
     f3a:	b120      	cbz	r0, f46 <CONFIG_HEAP_MEM_POOL_SIZE+0x746>
     f3c:	f002 fb30 	bl	35a0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
     f40:	2800      	cmp	r0, #0
     f42:	bf08      	it	eq
     f44:	3732      	addeq	r7, #50	; 0x32
     f46:	4807      	ldr	r0, [pc, #28]	; (f64 <CONFIG_HEAP_MEM_POOL_SIZE+0x764>)
     f48:	7841      	ldrb	r1, [r0, #1]
     f4a:	9800      	ldr	r0, [sp, #0]
     f4c:	4281      	cmp	r1, r0
     f4e:	bf84      	itt	hi
     f50:	1a08      	subhi	r0, r1, r0
     f52:	4407      	addhi	r7, r0
     f54:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
     f58:	e7cc      	b.n	ef4 <CONFIG_HEAP_MEM_POOL_SIZE+0x6f4>
     f5a:	0000      	.short	0x0000
     f5c:	07a12000 	.word	0x07a12000
     f60:	20000ccc 	.word	0x20000ccc
     f64:	20000012 	.word	0x20000012
     f68:	b510      	push	{r4, lr}
     f6a:	4c15      	ldr	r4, [pc, #84]	; (fc0 <CONFIG_HEAP_MEM_POOL_SIZE+0x7c0>)
     f6c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
     f70:	2820      	cmp	r0, #32
     f72:	bf18      	it	ne
     f74:	bd10      	popne	{r4, pc}
     f76:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
     f7a:	eb04 0082 	add.w	r0, r4, r2, lsl #2
     f7e:	f890 1020 	ldrb.w	r1, [r0, #32]
     f82:	2920      	cmp	r1, #32
     f84:	d017      	beq.n	fb6 <CONFIG_HEAP_MEM_POOL_SIZE+0x7b6>
     f86:	f8df c03c 	ldr.w	ip, [pc, #60]	; fc4 <CONFIG_HEAP_MEM_POOL_SIZE+0x7c4>
     f8a:	eb0c 1382 	add.w	r3, ip, r2, lsl #6
     f8e:	eb03 0341 	add.w	r3, r3, r1, lsl #1
     f92:	785b      	ldrb	r3, [r3, #1]
     f94:	f880 3020 	strb.w	r3, [r0, #32]
     f98:	2301      	movs	r3, #1
     f9a:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
     f9e:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
     fa2:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
     fa6:	2002      	movs	r0, #2
     fa8:	f000 f8b0 	bl	110c <CONFIG_FPROTECT_BLOCK_SIZE+0x10c>
     fac:	2000      	movs	r0, #0
     fae:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
     fb2:	77a0      	strb	r0, [r4, #30]
     fb4:	bd10      	pop	{r4, pc}
     fb6:	f240 319e 	movw	r1, #926	; 0x39e
     fba:	2070      	movs	r0, #112	; 0x70
     fbc:	f002 fb54 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     fc0:	20000ccc 	.word	0x20000ccc
     fc4:	20000c4c 	.word	0x20000c4c
     fc8:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
     fcc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 1088 <CONFIG_FPROTECT_BLOCK_SIZE+0x88>
     fd0:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
     fd4:	eb08 0085 	add.w	r0, r8, r5, lsl #2
     fd8:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
     fdc:	2c20      	cmp	r4, #32
     fde:	bf08      	it	eq
     fe0:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
     fe4:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 108c <CONFIG_FPROTECT_BLOCK_SIZE+0x8c>
     fe8:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 1090 <CONFIG_FPROTECT_BLOCK_SIZE+0x90>
     fec:	f5aa 7940 	sub.w	r9, sl, #768	; 0x300
     ff0:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
     ff4:	2607      	movs	r6, #7
     ff6:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
     ffa:	2801      	cmp	r0, #1
     ffc:	d00e      	beq.n	101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>
     ffe:	2804      	cmp	r0, #4
    1000:	bf08      	it	eq
    1002:	2602      	moveq	r6, #2
    1004:	d00a      	beq.n	101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>
    1006:	2805      	cmp	r0, #5
    1008:	bf0c      	ite	eq
    100a:	2603      	moveq	r6, #3
    100c:	2806      	cmpne	r0, #6
    100e:	d005      	beq.n	101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>
    1010:	f640 01d8 	movw	r1, #2264	; 0x8d8
    1014:	f04f 0070 	mov.w	r0, #112	; 0x70
    1018:	f002 fb26 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    101c:	f1bb 0f00 	cmp.w	fp, #0
    1020:	bf18      	it	ne
    1022:	f3af 8000 	nopne.w
    1026:	f3ef 8010 	mrs	r0, PRIMASK
    102a:	b672      	cpsid	i
    102c:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    1030:	784a      	ldrb	r2, [r1, #1]
    1032:	eb08 0185 	add.w	r1, r8, r5, lsl #2
    1036:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    103a:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    103e:	42a2      	cmp	r2, r4
    1040:	bf04      	itt	eq
    1042:	2220      	moveq	r2, #32
    1044:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    1048:	b1b8      	cbz	r0, 107a <CONFIG_FPROTECT_BLOCK_SIZE+0x7a>
    104a:	462a      	mov	r2, r5
    104c:	4621      	mov	r1, r4
    104e:	2001      	movs	r0, #1
    1050:	f000 f85c 	bl	110c <CONFIG_FPROTECT_BLOCK_SIZE+0x10c>
    1054:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    1058:	eb09 00c1 	add.w	r0, r9, r1, lsl #3
    105c:	f859 2031 	ldr.w	r2, [r9, r1, lsl #3]
    1060:	6840      	ldr	r0, [r0, #4]
    1062:	4631      	mov	r1, r6
    1064:	4790      	blx	r2
    1066:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    106a:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    106e:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    1072:	2c20      	cmp	r4, #32
    1074:	d1bc      	bne.n	ff0 <CONFIG_HEAP_MEM_POOL_SIZE+0x7f0>
    1076:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    107a:	4806      	ldr	r0, [pc, #24]	; (1094 <CONFIG_FPROTECT_BLOCK_SIZE+0x94>)
    107c:	2800      	cmp	r0, #0
    107e:	bf18      	it	ne
    1080:	f3af 8000 	nopne.w
    1084:	b662      	cpsie	i
    1086:	e7e0      	b.n	104a <CONFIG_FPROTECT_BLOCK_SIZE+0x4a>
    1088:	20000ccc 	.word	0x20000ccc
    108c:	00000000 	.word	0x00000000
    1090:	20000c4c 	.word	0x20000c4c
    1094:	00000000 	.word	0x00000000
    1098:	b510      	push	{r4, lr}
    109a:	4604      	mov	r4, r0
    109c:	6800      	ldr	r0, [r0, #0]
    109e:	f00a fa20 	bl	b4e2 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    10a2:	4602      	mov	r2, r0
    10a4:	8960      	ldrh	r0, [r4, #10]
    10a6:	7a21      	ldrb	r1, [r4, #8]
    10a8:	4b14      	ldr	r3, [pc, #80]	; (10fc <CONFIG_FPROTECT_BLOCK_SIZE+0xfc>)
    10aa:	4408      	add	r0, r1
    10ac:	1c41      	adds	r1, r0, #1
    10ae:	1850      	adds	r0, r2, r1
    10b0:	429a      	cmp	r2, r3
    10b2:	d904      	bls.n	10be <CONFIG_FPROTECT_BLOCK_SIZE+0xbe>
    10b4:	f240 6116 	movw	r1, #1558	; 0x616
    10b8:	2070      	movs	r0, #112	; 0x70
    10ba:	f002 fad5 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    10be:	4a10      	ldr	r2, [pc, #64]	; (1100 <CONFIG_FPROTECT_BLOCK_SIZE+0x100>)
    10c0:	4291      	cmp	r1, r2
    10c2:	dd04      	ble.n	10ce <CONFIG_FPROTECT_BLOCK_SIZE+0xce>
    10c4:	f240 6117 	movw	r1, #1559	; 0x617
    10c8:	2070      	movs	r0, #112	; 0x70
    10ca:	f002 facd 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    10ce:	4a0d      	ldr	r2, [pc, #52]	; (1104 <CONFIG_FPROTECT_BLOCK_SIZE+0x104>)
    10d0:	4291      	cmp	r1, r2
    10d2:	da04      	bge.n	10de <CONFIG_FPROTECT_BLOCK_SIZE+0xde>
    10d4:	f44f 61c3 	mov.w	r1, #1560	; 0x618
    10d8:	2070      	movs	r0, #112	; 0x70
    10da:	f002 fac5 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    10de:	490a      	ldr	r1, [pc, #40]	; (1108 <CONFIG_FPROTECT_BLOCK_SIZE+0x108>)
    10e0:	4281      	cmp	r1, r0
    10e2:	bfde      	ittt	le
    10e4:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    10e8:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    10ec:	bd10      	pople	{r4, pc}
    10ee:	2800      	cmp	r0, #0
    10f0:	bfbc      	itt	lt
    10f2:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    10f6:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    10fa:	bd10      	pop	{r4, pc}
    10fc:	1e847fff 	.word	0x1e847fff
    1100:	07a12000 	.word	0x07a12000
    1104:	f85ee000 	.word	0xf85ee000
    1108:	1e848000 	.word	0x1e848000
    110c:	f8df c054 	ldr.w	ip, [pc, #84]	; 1164 <CONFIG_FPROTECT_BLOCK_SIZE+0x164>
    1110:	b510      	push	{r4, lr}
    1112:	2300      	movs	r3, #0
    1114:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    1118:	2807      	cmp	r0, #7
    111a:	d21e      	bcs.n	115a <CONFIG_FPROTECT_BLOCK_SIZE+0x15a>
    111c:	e8df f000 	tbb	[pc, r0]
    1120:	05050505 	.word	0x05050505
    1124:	00040404 	.word	0x00040404
    1128:	2301      	movs	r3, #1
    112a:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    112e:	2b00      	cmp	r3, #0
    1130:	bf08      	it	eq
    1132:	bd10      	popeq	{r4, pc}
    1134:	480c      	ldr	r0, [pc, #48]	; (1168 <CONFIG_FPROTECT_BLOCK_SIZE+0x168>)
    1136:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    113a:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    113e:	2820      	cmp	r0, #32
    1140:	bf0e      	itee	eq
    1142:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    1146:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    114a:	7041      	strbne	r1, [r0, #1]
    114c:	2020      	movs	r0, #32
    114e:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    1152:	7058      	strb	r0, [r3, #1]
    1154:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    1158:	bd10      	pop	{r4, pc}
    115a:	f240 2167 	movw	r1, #615	; 0x267
    115e:	2070      	movs	r0, #112	; 0x70
    1160:	f002 fa82 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1164:	20000c4c 	.word	0x20000c4c
    1168:	20000ccc 	.word	0x20000ccc
    116c:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1170:	b083      	sub	sp, #12
    1172:	485c      	ldr	r0, [pc, #368]	; (12e4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e4>)
    1174:	9904      	ldr	r1, [sp, #16]
    1176:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    117a:	9001      	str	r0, [sp, #4]
    117c:	f890 4020 	ldrb.w	r4, [r0, #32]
    1180:	9803      	ldr	r0, [sp, #12]
    1182:	4625      	mov	r5, r4
    1184:	2801      	cmp	r0, #1
    1186:	bf18      	it	ne
    1188:	2802      	cmpne	r0, #2
    118a:	d005      	beq.n	1198 <CONFIG_FPROTECT_BLOCK_SIZE+0x198>
    118c:	f640 21af 	movw	r1, #2735	; 0xaaf
    1190:	f04f 0070 	mov.w	r0, #112	; 0x70
    1194:	f002 fa68 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1198:	2700      	movs	r7, #0
    119a:	2d20      	cmp	r5, #32
    119c:	d04a      	beq.n	1234 <CONFIG_FPROTECT_BLOCK_SIZE+0x234>
    119e:	4851      	ldr	r0, [pc, #324]	; (12e4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e4>)
    11a0:	9100      	str	r1, [sp, #0]
    11a2:	2600      	movs	r6, #0
    11a4:	7f80      	ldrb	r0, [r0, #30]
    11a6:	2800      	cmp	r0, #0
    11a8:	bf08      	it	eq
    11aa:	2602      	moveq	r6, #2
    11ac:	f001 fb86 	bl	28bc <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    11b0:	f8df a138 	ldr.w	sl, [pc, #312]	; 12ec <CONFIG_FPROTECT_BLOCK_SIZE+0x2ec>
    11b4:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    11b8:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
    11bc:	f8df 9128 	ldr.w	r9, [pc, #296]	; 12e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e8>
    11c0:	688a      	ldr	r2, [r1, #8]
    11c2:	68c9      	ldr	r1, [r1, #12]
    11c4:	1a12      	subs	r2, r2, r0
    11c6:	1a09      	subs	r1, r1, r0
    11c8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    11cc:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    11d0:	4296      	cmp	r6, r2
    11d2:	bf98      	it	ls
    11d4:	f5b2 0f80 	cmpls.w	r2, #4194304	; 0x400000
    11d8:	d201      	bcs.n	11de <CONFIG_FPROTECT_BLOCK_SIZE+0x1de>
    11da:	4589      	cmp	r9, r1
    11dc:	d228      	bcs.n	1230 <CONFIG_FPROTECT_BLOCK_SIZE+0x230>
    11de:	4a44      	ldr	r2, [pc, #272]	; (12f0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f0>)
    11e0:	9900      	ldr	r1, [sp, #0]
    11e2:	eb02 1b81 	add.w	fp, r2, r1, lsl #6
    11e6:	4622      	mov	r2, r4
    11e8:	eb0b 0142 	add.w	r1, fp, r2, lsl #1
    11ec:	784c      	ldrb	r4, [r1, #1]
    11ee:	2c20      	cmp	r4, #32
    11f0:	d016      	beq.n	1220 <CONFIG_FPROTECT_BLOCK_SIZE+0x220>
    11f2:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    11f6:	eb0a 0cc1 	add.w	ip, sl, r1, lsl #3
    11fa:	f8dc 8008 	ldr.w	r8, [ip, #8]
    11fe:	f8dc c00c 	ldr.w	ip, [ip, #12]
    1202:	eba8 0800 	sub.w	r8, r8, r0
    1206:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    120a:	ebac 0100 	sub.w	r1, ip, r0
    120e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1212:	4546      	cmp	r6, r8
    1214:	bf98      	it	ls
    1216:	f5b8 0f80 	cmpls.w	r8, #4194304	; 0x400000
    121a:	d2e4      	bcs.n	11e6 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e6>
    121c:	4589      	cmp	r9, r1
    121e:	d3e2      	bcc.n	11e6 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e6>
    1220:	2a20      	cmp	r2, #32
    1222:	d005      	beq.n	1230 <CONFIG_FPROTECT_BLOCK_SIZE+0x230>
    1224:	2120      	movs	r1, #32
    1226:	2004      	movs	r0, #4
    1228:	9b00      	ldr	r3, [sp, #0]
    122a:	f7ff f907 	bl	43c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    122e:	4604      	mov	r4, r0
    1230:	42ac      	cmp	r4, r5
    1232:	d115      	bne.n	1260 <CONFIG_FPROTECT_BLOCK_SIZE+0x260>
    1234:	482f      	ldr	r0, [pc, #188]	; (12f4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f4>)
    1236:	2800      	cmp	r0, #0
    1238:	bf18      	it	ne
    123a:	f3af 8000 	nopne.w
    123e:	f001 fb3d 	bl	28bc <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1242:	4c28      	ldr	r4, [pc, #160]	; (12e4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e4>)
    1244:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
    1248:	2920      	cmp	r1, #32
    124a:	d00d      	beq.n	1268 <CONFIG_FPROTECT_BLOCK_SIZE+0x268>
    124c:	68e1      	ldr	r1, [r4, #12]
    124e:	1c82      	adds	r2, r0, #2
    1250:	1a51      	subs	r1, r2, r1
    1252:	0209      	lsls	r1, r1, #8
    1254:	17ca      	asrs	r2, r1, #31
    1256:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    125a:	1209      	asrs	r1, r1, #8
    125c:	2900      	cmp	r1, #0
    125e:	dd03      	ble.n	1268 <CONFIG_FPROTECT_BLOCK_SIZE+0x268>
    1260:	b005      	add	sp, #20
    1262:	2000      	movs	r0, #0
    1264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1268:	2d20      	cmp	r5, #32
    126a:	d00d      	beq.n	1288 <CONFIG_FPROTECT_BLOCK_SIZE+0x288>
    126c:	462a      	mov	r2, r5
    126e:	9903      	ldr	r1, [sp, #12]
    1270:	f7ff fb16 	bl	8a0 <CONFIG_HEAP_MEM_POOL_SIZE+0xa0>
    1274:	b358      	cbz	r0, 12ce <CONFIG_FPROTECT_BLOCK_SIZE+0x2ce>
    1276:	9801      	ldr	r0, [sp, #4]
    1278:	f880 7023 	strb.w	r7, [r0, #35]	; 0x23
    127c:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    1280:	b005      	add	sp, #20
    1282:	2001      	movs	r0, #1
    1284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1288:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    128c:	b118      	cbz	r0, 1296 <CONFIG_FPROTECT_BLOCK_SIZE+0x296>
    128e:	f002 f831 	bl	32f4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    1292:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
    1296:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    129a:	b150      	cbz	r0, 12b2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2b2>
    129c:	4916      	ldr	r1, [pc, #88]	; (12f8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f8>)
    129e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    12a2:	6008      	str	r0, [r1, #0]
    12a4:	2005      	movs	r0, #5
    12a6:	f001 fd57 	bl	2d58 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    12aa:	f002 f88b 	bl	33c4 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    12ae:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
    12b2:	2004      	movs	r0, #4
    12b4:	f001 fd50 	bl	2d58 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    12b8:	f001 fdb6 	bl	2e28 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    12bc:	2020      	movs	r0, #32
    12be:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    12c2:	480e      	ldr	r0, [pc, #56]	; (12fc <CONFIG_FPROTECT_BLOCK_SIZE+0x2fc>)
    12c4:	6880      	ldr	r0, [r0, #8]
    12c6:	6007      	str	r7, [r0, #0]
    12c8:	480d      	ldr	r0, [pc, #52]	; (1300 <CONFIG_FPROTECT_BLOCK_SIZE+0x300>)
    12ca:	6007      	str	r7, [r0, #0]
    12cc:	e7d8      	b.n	1280 <CONFIG_FPROTECT_BLOCK_SIZE+0x280>
    12ce:	462a      	mov	r2, r5
    12d0:	2120      	movs	r1, #32
    12d2:	2004      	movs	r0, #4
    12d4:	9b04      	ldr	r3, [sp, #16]
    12d6:	f7ff f8b1 	bl	43c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    12da:	b005      	add	sp, #20
    12dc:	2000      	movs	r0, #0
    12de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    12e2:	0000      	.short	0x0000
    12e4:	20000ccc 	.word	0x20000ccc
    12e8:	003fffff 	.word	0x003fffff
    12ec:	2000094c 	.word	0x2000094c
    12f0:	20000c4c 	.word	0x20000c4c
    12f4:	00000000 	.word	0x00000000
    12f8:	4001f508 	.word	0x4001f508
    12fc:	20000010 	.word	0x20000010
    1300:	40000508 	.word	0x40000508

00001304 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    1304:	4906      	ldr	r1, [pc, #24]	; (1320 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    1306:	b510      	push	{r4, lr}
    1308:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
    130c:	2a20      	cmp	r2, #32
    130e:	bf1c      	itt	ne
    1310:	7788      	strbne	r0, [r1, #30]
    1312:	bd10      	popne	{r4, pc}
    1314:	f240 31fd 	movw	r1, #1021	; 0x3fd
    1318:	2070      	movs	r0, #112	; 0x70
    131a:	f002 f9a5 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    131e:	0000      	.short	0x0000
    1320:	20000ccc 	.word	0x20000ccc

00001324 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    1324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1328:	4e5b      	ldr	r6, [pc, #364]	; (1498 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x110>)
    132a:	4681      	mov	r9, r0
    132c:	b085      	sub	sp, #20
    132e:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    1332:	468a      	mov	sl, r1
    1334:	2820      	cmp	r0, #32
    1336:	d04d      	beq.n	13d4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4c>
    1338:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    133c:	f106 040c 	add.w	r4, r6, #12
    1340:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1344:	f5a6 7860 	sub.w	r8, r6, #896	; 0x380
    1348:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    134c:	2020      	movs	r0, #32
    134e:	f88d 0000 	strb.w	r0, [sp]
    1352:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    1356:	aa03      	add	r2, sp, #12
    1358:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    135c:	a901      	add	r1, sp, #4
    135e:	f890 5020 	ldrb.w	r5, [r0, #32]
    1362:	6930      	ldr	r0, [r6, #16]
    1364:	9002      	str	r0, [sp, #8]
    1366:	6830      	ldr	r0, [r6, #0]
    1368:	4448      	add	r0, r9
    136a:	f001 f951 	bl	2610 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    136e:	68f8      	ldr	r0, [r7, #12]
    1370:	9901      	ldr	r1, [sp, #4]
    1372:	4a4a      	ldr	r2, [pc, #296]	; (149c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x114>)
    1374:	4408      	add	r0, r1
    1376:	f1a9 0164 	sub.w	r1, r9, #100	; 0x64
    137a:	4291      	cmp	r1, r2
    137c:	d82f      	bhi.n	13de <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x56>
    137e:	68b9      	ldr	r1, [r7, #8]
    1380:	1a41      	subs	r1, r0, r1
    1382:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1386:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    138a:	d228      	bcs.n	13de <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x56>
    138c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1390:	6060      	str	r0, [r4, #4]
    1392:	4630      	mov	r0, r6
    1394:	f884 a00c 	strb.w	sl, [r4, #12]
    1398:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
    139c:	46ea      	mov	sl, sp
    139e:	2d20      	cmp	r5, #32
    13a0:	bf1c      	itt	ne
    13a2:	493f      	ldrne	r1, [pc, #252]	; (14a0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x118>)
    13a4:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    13a8:	d03c      	beq.n	1424 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9c>
    13aa:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    13ae:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    13b2:	6860      	ldr	r0, [r4, #4]
    13b4:	68ba      	ldr	r2, [r7, #8]
    13b6:	4621      	mov	r1, r4
    13b8:	1a10      	subs	r0, r2, r0
    13ba:	0200      	lsls	r0, r0, #8
    13bc:	17c2      	asrs	r2, r0, #31
    13be:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    13c2:	f107 0608 	add.w	r6, r7, #8
    13c6:	1200      	asrs	r0, r0, #8
    13c8:	d41b      	bmi.n	1402 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7a>
    13ca:	8970      	ldrh	r0, [r6, #10]
    13cc:	b350      	cbz	r0, 1424 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9c>
    13ce:	8948      	ldrh	r0, [r1, #10]
    13d0:	b148      	cbz	r0, 13e6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5e>
    13d2:	e027      	b.n	1424 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9c>
    13d4:	f640 3173 	movw	r1, #2931	; 0xb73
    13d8:	2070      	movs	r0, #112	; 0x70
    13da:	f002 f945 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    13de:	b005      	add	sp, #20
    13e0:	2001      	movs	r0, #1
    13e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    13e6:	4620      	mov	r0, r4
    13e8:	f7ff fe56 	bl	1098 <CONFIG_FPROTECT_BLOCK_SIZE+0x98>
    13ec:	f001 f8f4 	bl	25d8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    13f0:	6831      	ldr	r1, [r6, #0]
    13f2:	1a08      	subs	r0, r1, r0
    13f4:	0200      	lsls	r0, r0, #8
    13f6:	17c1      	asrs	r1, r0, #31
    13f8:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    13fc:	1200      	asrs	r0, r0, #8
    13fe:	2833      	cmp	r0, #51	; 0x33
    1400:	da10      	bge.n	1424 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9c>
    1402:	f88a 5000 	strb.w	r5, [sl]
    1406:	7d39      	ldrb	r1, [r7, #20]
    1408:	7b20      	ldrb	r0, [r4, #12]
    140a:	4281      	cmp	r1, r0
    140c:	d805      	bhi.n	141a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x92>
    140e:	9802      	ldr	r0, [sp, #8]
    1410:	6060      	str	r0, [r4, #4]
    1412:	b005      	add	sp, #20
    1414:	2002      	movs	r0, #2
    1416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    141a:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    141e:	7845      	ldrb	r5, [r0, #1]
    1420:	2d20      	cmp	r5, #32
    1422:	d1c2      	bne.n	13aa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x22>
    1424:	2005      	movs	r0, #5
    1426:	f001 fc97 	bl	2d58 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    142a:	4c1b      	ldr	r4, [pc, #108]	; (1498 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x110>)
    142c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1430:	60a0      	str	r0, [r4, #8]
    1432:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    1436:	f89d 2000 	ldrb.w	r2, [sp]
    143a:	2120      	movs	r1, #32
    143c:	2a20      	cmp	r2, #32
    143e:	bf13      	iteet	ne
    1440:	2005      	movne	r0, #5
    1442:	eb04 0083 	addeq.w	r0, r4, r3, lsl #2
    1446:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    144a:	f7fe fff7 	blne	43c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    144e:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    1452:	4913      	ldr	r1, [pc, #76]	; (14a0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x118>)
    1454:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    1458:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
    145c:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    1460:	7048      	strb	r0, [r1, #1]
    1462:	6820      	ldr	r0, [r4, #0]
    1464:	4448      	add	r0, r9
    1466:	6020      	str	r0, [r4, #0]
    1468:	2001      	movs	r0, #1
    146a:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    146e:	7e60      	ldrb	r0, [r4, #25]
    1470:	2801      	cmp	r0, #1
    1472:	d105      	bne.n	1480 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf8>
    1474:	6920      	ldr	r0, [r4, #16]
    1476:	1e40      	subs	r0, r0, #1
    1478:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    147c:	f001 fabe 	bl	29fc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    1480:	f89d 0000 	ldrb.w	r0, [sp]
    1484:	2820      	cmp	r0, #32
    1486:	d003      	beq.n	1490 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x108>
    1488:	4806      	ldr	r0, [pc, #24]	; (14a4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x11c>)
    148a:	7840      	ldrb	r0, [r0, #1]
    148c:	f002 f9bc 	bl	3808 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1490:	b005      	add	sp, #20
    1492:	2000      	movs	r0, #0
    1494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1498:	20000ccc 	.word	0x20000ccc
    149c:	07a11f9c 	.word	0x07a11f9c
    14a0:	20000c4c 	.word	0x20000c4c
    14a4:	20000010 	.word	0x20000010

000014a8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>:
    14a8:	4602      	mov	r2, r0
    14aa:	4b14      	ldr	r3, [pc, #80]	; (14fc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x54>)
    14ac:	b510      	push	{r4, lr}
    14ae:	4408      	add	r0, r1
    14b0:	429a      	cmp	r2, r3
    14b2:	d904      	bls.n	14be <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x16>
    14b4:	f240 6116 	movw	r1, #1558	; 0x616
    14b8:	2070      	movs	r0, #112	; 0x70
    14ba:	f002 f8d5 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    14be:	4a10      	ldr	r2, [pc, #64]	; (1500 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x58>)
    14c0:	4291      	cmp	r1, r2
    14c2:	dd04      	ble.n	14ce <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x26>
    14c4:	f240 6117 	movw	r1, #1559	; 0x617
    14c8:	2070      	movs	r0, #112	; 0x70
    14ca:	f002 f8cd 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    14ce:	4a0d      	ldr	r2, [pc, #52]	; (1504 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x5c>)
    14d0:	4291      	cmp	r1, r2
    14d2:	da04      	bge.n	14de <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x36>
    14d4:	f44f 61c3 	mov.w	r1, #1560	; 0x618
    14d8:	2070      	movs	r0, #112	; 0x70
    14da:	f002 f8c5 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    14de:	490a      	ldr	r1, [pc, #40]	; (1508 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x60>)
    14e0:	4281      	cmp	r1, r0
    14e2:	bfde      	ittt	le
    14e4:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    14e8:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    14ec:	bd10      	pople	{r4, pc}
    14ee:	2800      	cmp	r0, #0
    14f0:	bfbc      	itt	lt
    14f2:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    14f6:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    14fa:	bd10      	pop	{r4, pc}
    14fc:	1e847fff 	.word	0x1e847fff
    1500:	07a12000 	.word	0x07a12000
    1504:	f85ee000 	.word	0xf85ee000
    1508:	1e848000 	.word	0x1e848000

0000150c <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>:
    150c:	4a10      	ldr	r2, [pc, #64]	; (1550 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x44>)
    150e:	1a0b      	subs	r3, r1, r0
    1510:	f102 0c01 	add.w	ip, r2, #1
    1514:	ebb3 0f9c 	cmp.w	r3, ip, lsr #2
    1518:	bf3c      	itt	cc
    151a:	4618      	movcc	r0, r3
    151c:	4770      	bxcc	lr
    151e:	b510      	push	{r4, lr}
    1520:	1a44      	subs	r4, r0, r1
    1522:	ebb4 0f9c 	cmp.w	r4, ip, lsr #2
    1526:	bf3c      	itt	cc
    1528:	4618      	movcc	r0, r3
    152a:	bd10      	popcc	{r4, pc}
    152c:	429a      	cmp	r2, r3
    152e:	d203      	bcs.n	1538 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x2c>
    1530:	1a10      	subs	r0, r2, r0
    1532:	4408      	add	r0, r1
    1534:	1c40      	adds	r0, r0, #1
    1536:	bd10      	pop	{r4, pc}
    1538:	42a2      	cmp	r2, r4
    153a:	d204      	bcs.n	1546 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x3a>
    153c:	1a51      	subs	r1, r2, r1
    153e:	4408      	add	r0, r1
    1540:	1c40      	adds	r0, r0, #1
    1542:	4240      	negs	r0, r0
    1544:	bd10      	pop	{r4, pc}
    1546:	f640 310b 	movw	r1, #2827	; 0xb0b
    154a:	2070      	movs	r0, #112	; 0x70
    154c:	f002 f88c 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1550:	1e847fff 	.word	0x1e847fff

00001554 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>:
    1554:	490e      	ldr	r1, [pc, #56]	; (1590 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x3c>)
    1556:	b510      	push	{r4, lr}
    1558:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    155c:	2820      	cmp	r0, #32
    155e:	d012      	beq.n	1586 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x32>
    1560:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    1564:	f5a1 7260 	sub.w	r2, r1, #896	; 0x380
    1568:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    156c:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    1570:	f891 102f 	ldrb.w	r1, [r1, #47]	; 0x2f
    1574:	6840      	ldr	r0, [r0, #4]
    1576:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    157a:	f852 2031 	ldr.w	r2, [r2, r1, lsl #3]
    157e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1582:	2104      	movs	r1, #4
    1584:	4710      	bx	r2
    1586:	f640 01bb 	movw	r1, #2235	; 0x8bb
    158a:	2070      	movs	r0, #112	; 0x70
    158c:	f002 f86c 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1590:	20000ccc 	.word	0x20000ccc

00001594 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    1594:	b570      	push	{r4, r5, r6, lr}
    1596:	4d6a      	ldr	r5, [pc, #424]	; (1740 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1ac>)
    1598:	496a      	ldr	r1, [pc, #424]	; (1744 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b0>)
    159a:	2601      	movs	r6, #1
    159c:	f505 7460 	add.w	r4, r5, #896	; 0x380
    15a0:	2808      	cmp	r0, #8
    15a2:	d27d      	bcs.n	16a0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10c>
    15a4:	e8df f000 	tbb	[pc, r0]
    15a8:	a9976104 	.word	0xa9976104
    15ac:	b3ae43c6 	.word	0xb3ae43c6
    15b0:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    15b4:	b918      	cbnz	r0, 15be <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    15b6:	f001 feb9 	bl	332c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    15ba:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    15be:	8ae0      	ldrh	r0, [r4, #22]
    15c0:	b110      	cbz	r0, 15c8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    15c2:	f001 ffed 	bl	35a0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    15c6:	b188      	cbz	r0, 15ec <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x58>
    15c8:	f7ff fcce 	bl	f68 <CONFIG_HEAP_MEM_POOL_SIZE+0x768>
    15cc:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    15d0:	68a1      	ldr	r1, [r4, #8]
    15d2:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    15d6:	d005      	beq.n	15e4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x50>
    15d8:	2301      	movs	r3, #1
    15da:	2203      	movs	r2, #3
    15dc:	2005      	movs	r0, #5
    15de:	f001 faf3 	bl	2bc8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    15e2:	b140      	cbz	r0, 15f6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x62>
    15e4:	7e60      	ldrb	r0, [r4, #25]
    15e6:	2801      	cmp	r0, #1
    15e8:	d110      	bne.n	160c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x78>
    15ea:	e009      	b.n	1600 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6c>
    15ec:	f640 016f 	movw	r1, #2159	; 0x86f
    15f0:	2070      	movs	r0, #112	; 0x70
    15f2:	f002 f839 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    15f6:	f640 0174 	movw	r1, #2164	; 0x874
    15fa:	2070      	movs	r0, #112	; 0x70
    15fc:	f002 f834 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1600:	6920      	ldr	r0, [r4, #16]
    1602:	1e40      	subs	r0, r0, #1
    1604:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1608:	f001 f9f8 	bl	29fc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    160c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1610:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    1614:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1618:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    161c:	6840      	ldr	r0, [r0, #4]
    161e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1622:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    1626:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    162a:	2101      	movs	r1, #1
    162c:	4710      	bx	r2
    162e:	f7ff fc9b 	bl	f68 <CONFIG_HEAP_MEM_POOL_SIZE+0x768>
    1632:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1636:	60a0      	str	r0, [r4, #8]
    1638:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    163c:	b180      	cbz	r0, 1660 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xcc>
    163e:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1642:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    1646:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    164a:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    164e:	6840      	ldr	r0, [r0, #4]
    1650:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1654:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    1658:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    165c:	2106      	movs	r1, #6
    165e:	4710      	bx	r2
    1660:	f640 0185 	movw	r1, #2181	; 0x885
    1664:	2070      	movs	r0, #112	; 0x70
    1666:	f001 ffff 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    166a:	f7ff fc7d 	bl	f68 <CONFIG_HEAP_MEM_POOL_SIZE+0x768>
    166e:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    1672:	f001 ff95 	bl	35a0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1676:	b118      	cbz	r0, 1680 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xec>
    1678:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    167c:	b128      	cbz	r0, 168a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xf6>
    167e:	e008      	b.n	1692 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xfe>
    1680:	f640 0195 	movw	r1, #2197	; 0x895
    1684:	2070      	movs	r0, #112	; 0x70
    1686:	f001 ffef 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    168a:	f001 fe4f 	bl	332c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    168e:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    1692:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1696:	b168      	cbz	r0, 16b4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x120>
    1698:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    169c:	492a      	ldr	r1, [pc, #168]	; (1748 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b4>)
    169e:	e000      	b.n	16a2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10e>
    16a0:	e048      	b.n	1734 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1a0>
    16a2:	6008      	str	r0, [r1, #0]
    16a4:	2005      	movs	r0, #5
    16a6:	f001 fb57 	bl	2d58 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    16aa:	f001 fe8b 	bl	33c4 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    16ae:	2000      	movs	r0, #0
    16b0:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    16b4:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    16b8:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    16bc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    16c0:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    16c4:	6840      	ldr	r0, [r0, #4]
    16c6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    16ca:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    16ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    16d2:	2100      	movs	r1, #0
    16d4:	4710      	bx	r2
    16d6:	f001 fbf1 	bl	2ebc <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    16da:	8ae0      	ldrh	r0, [r4, #22]
    16dc:	b110      	cbz	r0, 16e4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x150>
    16de:	f001 ff5f 	bl	35a0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    16e2:	b128      	cbz	r0, 16f0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x15c>
    16e4:	4819      	ldr	r0, [pc, #100]	; (174c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b8>)
    16e6:	7800      	ldrb	r0, [r0, #0]
    16e8:	2803      	cmp	r0, #3
    16ea:	bf08      	it	eq
    16ec:	7766      	strbeq	r6, [r4, #29]
    16ee:	bd70      	pop	{r4, r5, r6, pc}
    16f0:	f44f 610a 	mov.w	r1, #2208	; 0x8a0
    16f4:	2070      	movs	r0, #112	; 0x70
    16f6:	f001 ffb7 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    16fa:	4815      	ldr	r0, [pc, #84]	; (1750 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1bc>)
    16fc:	6006      	str	r6, [r0, #0]
    16fe:	6888      	ldr	r0, [r1, #8]
    1700:	6006      	str	r6, [r0, #0]
    1702:	bd70      	pop	{r4, r5, r6, pc}
    1704:	7808      	ldrb	r0, [r1, #0]
    1706:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    170a:	f002 b87d 	b.w	3808 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    170e:	f7ff fc2b 	bl	f68 <CONFIG_HEAP_MEM_POOL_SIZE+0x768>
    1712:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1716:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    171a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    171e:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    1722:	6840      	ldr	r0, [r0, #4]
    1724:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1728:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    172c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1730:	2105      	movs	r1, #5
    1732:	4710      	bx	r2
    1734:	f640 01b3 	movw	r1, #2227	; 0x8b3
    1738:	2070      	movs	r0, #112	; 0x70
    173a:	f001 ff95 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    173e:	0000      	.short	0x0000
    1740:	2000094c 	.word	0x2000094c
    1744:	20000010 	.word	0x20000010
    1748:	4001f508 	.word	0x4001f508
    174c:	20000012 	.word	0x20000012
    1750:	40000508 	.word	0x40000508

00001754 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
    1754:	4803      	ldr	r0, [pc, #12]	; (1764 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI+0x10>)
    1756:	b510      	push	{r4, lr}
    1758:	7840      	ldrb	r0, [r0, #1]
    175a:	f009 fec2 	bl	b4e2 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    175e:	b280      	uxth	r0, r0
    1760:	bd10      	pop	{r4, pc}
    1762:	0000      	.short	0x0000
    1764:	20000012 	.word	0x20000012

00001768 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    1768:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    176c:	4682      	mov	sl, r0
    176e:	48d1      	ldr	r0, [pc, #836]	; (1ab4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x34c>)
    1770:	b08b      	sub	sp, #44	; 0x2c
    1772:	6800      	ldr	r0, [r0, #0]
    1774:	4dd0      	ldr	r5, [pc, #832]	; (1ab8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x350>)
    1776:	05c0      	lsls	r0, r0, #23
    1778:	0dc0      	lsrs	r0, r0, #23
    177a:	d00e      	beq.n	179a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    177c:	3810      	subs	r0, #16
    177e:	b240      	sxtb	r0, r0
    1780:	2800      	cmp	r0, #0
    1782:	bfb8      	it	lt
    1784:	f000 000f 	andlt.w	r0, r0, #15
    1788:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    178c:	bfac      	ite	ge
    178e:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    1792:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    1796:	0940      	lsrs	r0, r0, #5
    1798:	d00d      	beq.n	17b6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    179a:	980c      	ldr	r0, [sp, #48]	; 0x30
    179c:	f04f 0b00 	mov.w	fp, #0
    17a0:	7800      	ldrb	r0, [r0, #0]
    17a2:	2800      	cmp	r0, #0
    17a4:	bf18      	it	ne
    17a6:	2801      	cmpne	r0, #1
    17a8:	d018      	beq.n	17dc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    17aa:	f240 715c 	movw	r1, #1884	; 0x75c
    17ae:	f04f 0070 	mov.w	r0, #112	; 0x70
    17b2:	f001 ff59 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    17b6:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    17ba:	f04f 0b01 	mov.w	fp, #1
    17be:	2820      	cmp	r0, #32
    17c0:	d007      	beq.n	17d2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    17c2:	980c      	ldr	r0, [sp, #48]	; 0x30
    17c4:	7800      	ldrb	r0, [r0, #0]
    17c6:	b148      	cbz	r0, 17dc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    17c8:	f44f 61eb 	mov.w	r1, #1880	; 0x758
    17cc:	2070      	movs	r0, #112	; 0x70
    17ce:	f001 ff4b 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    17d2:	f240 7155 	movw	r1, #1877	; 0x755
    17d6:	2070      	movs	r0, #112	; 0x70
    17d8:	f001 ff46 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    17dc:	4cb7      	ldr	r4, [pc, #732]	; (1abc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x354>)
    17de:	b124      	cbz	r4, 17ea <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    17e0:	2100      	movs	r1, #0
    17e2:	f240 705f 	movw	r0, #1887	; 0x75f
    17e6:	f3af 8000 	nop.w
    17ea:	49b5      	ldr	r1, [pc, #724]	; (1ac0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x358>)
    17ec:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    17f0:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    17f4:	f04f 0801 	mov.w	r8, #1
    17f8:	9000      	str	r0, [sp, #0]
    17fa:	b124      	cbz	r4, 1806 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9e>
    17fc:	2100      	movs	r1, #0
    17fe:	f240 7067 	movw	r0, #1895	; 0x767
    1802:	f3af 8000 	nop.w
    1806:	f1b8 0f00 	cmp.w	r8, #0
    180a:	d009      	beq.n	1820 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xb8>
    180c:	f895 602e 	ldrb.w	r6, [r5, #46]	; 0x2e
    1810:	f04f 0900 	mov.w	r9, #0
    1814:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    1818:	f1bb 0f00 	cmp.w	fp, #0
    181c:	d007      	beq.n	182e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc6>
    181e:	e02e      	b.n	187e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x116>
    1820:	48a8      	ldr	r0, [pc, #672]	; (1ac4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35c>)
    1822:	2800      	cmp	r0, #0
    1824:	bf18      	it	ne
    1826:	f3af 8000 	nopne.w
    182a:	b662      	cpsie	i
    182c:	e7ee      	b.n	180c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    182e:	4637      	mov	r7, r6
    1830:	2001      	movs	r0, #1
    1832:	ea20 0607 	bic.w	r6, r0, r7
    1836:	48a4      	ldr	r0, [pc, #656]	; (1ac8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x360>)
    1838:	2240      	movs	r2, #64	; 0x40
    183a:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    183e:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    1842:	f009 ffbc 	bl	b7be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1846:	b124      	cbz	r4, 1852 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xea>
    1848:	2100      	movs	r1, #0
    184a:	f240 50da 	movw	r0, #1498	; 0x5da
    184e:	f3af 8000 	nop.w
    1852:	eb05 0187 	add.w	r1, r5, r7, lsl #2
    1856:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    185a:	6a09      	ldr	r1, [r1, #32]
    185c:	6201      	str	r1, [r0, #32]
    185e:	b124      	cbz	r4, 186a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x102>
    1860:	2100      	movs	r1, #0
    1862:	f240 50de 	movw	r0, #1502	; 0x5de
    1866:	f3af 8000 	nop.w
    186a:	b124      	cbz	r4, 1876 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x10e>
    186c:	2100      	movs	r1, #0
    186e:	f240 7071 	movw	r0, #1905	; 0x771
    1872:	f3af 8000 	nop.w
    1876:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    187a:	2800      	cmp	r0, #0
    187c:	d1bd      	bne.n	17fa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    187e:	b124      	cbz	r4, 188a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x122>
    1880:	2100      	movs	r1, #0
    1882:	f240 707b 	movw	r0, #1915	; 0x77b
    1886:	f3af 8000 	nop.w
    188a:	f001 f817 	bl	28bc <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    188e:	4680      	mov	r8, r0
    1890:	4633      	mov	r3, r6
    1892:	aa06      	add	r2, sp, #24
    1894:	990c      	ldr	r1, [sp, #48]	; 0x30
    1896:	f7ff fa93 	bl	dc0 <CONFIG_HEAP_MEM_POOL_SIZE+0x5c0>
    189a:	b124      	cbz	r4, 18a6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x13e>
    189c:	2100      	movs	r1, #0
    189e:	f240 7082 	movw	r0, #1922	; 0x782
    18a2:	f3af 8000 	nop.w
    18a6:	4988      	ldr	r1, [pc, #544]	; (1ac8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x360>)
    18a8:	a806      	add	r0, sp, #24
    18aa:	eb01 1786 	add.w	r7, r1, r6, lsl #6
    18ae:	f817 101a 	ldrb.w	r1, [r7, sl, lsl #1]
    18b2:	2901      	cmp	r1, #1
    18b4:	bf18      	it	ne
    18b6:	2902      	cmpne	r1, #2
    18b8:	d13e      	bne.n	1938 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d0>
    18ba:	9906      	ldr	r1, [sp, #24]
    18bc:	9b07      	ldr	r3, [sp, #28]
    18be:	eba1 0108 	sub.w	r1, r1, r8
    18c2:	4a82      	ldr	r2, [pc, #520]	; (1acc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x364>)
    18c4:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    18c8:	eba3 0308 	sub.w	r3, r3, r8
    18cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    18d0:	2902      	cmp	r1, #2
    18d2:	d36a      	bcc.n	19aa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x242>
    18d4:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    18d8:	d267      	bcs.n	19aa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x242>
    18da:	429a      	cmp	r2, r3
    18dc:	d365      	bcc.n	19aa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x242>
    18de:	f04f 0901 	mov.w	r9, #1
    18e2:	ab01      	add	r3, sp, #4
    18e4:	aa05      	add	r2, sp, #20
    18e6:	4631      	mov	r1, r6
    18e8:	f7fe ff5a 	bl	7a0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1a0>
    18ec:	2800      	cmp	r0, #0
    18ee:	d064      	beq.n	19ba <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x252>
    18f0:	f89d 1014 	ldrb.w	r1, [sp, #20]
    18f4:	f89d 2004 	ldrb.w	r2, [sp, #4]
    18f8:	4633      	mov	r3, r6
    18fa:	428a      	cmp	r2, r1
    18fc:	d061      	beq.n	19c2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x25a>
    18fe:	2005      	movs	r0, #5
    1900:	f7fe fd9c 	bl	43c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    1904:	ea4f 0100 	mov.w	r1, r0
    1908:	eb07 004a 	add.w	r0, r7, sl, lsl #1
    190c:	7041      	strb	r1, [r0, #1]
    190e:	f89d 0014 	ldrb.w	r0, [sp, #20]
    1912:	2820      	cmp	r0, #32
    1914:	bf03      	ittte	eq
    1916:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    191a:	f880 a020 	strbeq.w	sl, [r0, #32]
    191e:	f880 9023 	strbeq.w	r9, [r0, #35]	; 0x23
    1922:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    1926:	bf18      	it	ne
    1928:	f880 a001 	strbne.w	sl, [r0, #1]
    192c:	4632      	mov	r2, r6
    192e:	4651      	mov	r1, sl
    1930:	f05f 0003 	movs.w	r0, #3
    1934:	f7ff fbea 	bl	110c <CONFIG_FPROTECT_BLOCK_SIZE+0x10c>
    1938:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    193c:	f890 7023 	ldrb.w	r7, [r0, #35]	; 0x23
    1940:	b124      	cbz	r4, 194c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1e4>
    1942:	2100      	movs	r1, #0
    1944:	f240 7089 	movw	r0, #1929	; 0x789
    1948:	f3af 8000 	nop.w
    194c:	4860      	ldr	r0, [pc, #384]	; (1ad0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x368>)
    194e:	2800      	cmp	r0, #0
    1950:	bf18      	it	ne
    1952:	f3af 8000 	nopne.w
    1956:	f3ef 8810 	mrs	r8, PRIMASK
    195a:	b672      	cpsid	i
    195c:	b124      	cbz	r4, 1968 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x200>
    195e:	2100      	movs	r1, #0
    1960:	f240 708f 	movw	r0, #1935	; 0x78f
    1964:	f3af 8000 	nop.w
    1968:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    196c:	2800      	cmp	r0, #0
    196e:	f47f af44 	bne.w	17fa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    1972:	b124      	cbz	r4, 197e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x216>
    1974:	2100      	movs	r1, #0
    1976:	f240 7097 	movw	r0, #1943	; 0x797
    197a:	f3af 8000 	nop.w
    197e:	f10d 0e18 	add.w	lr, sp, #24
    1982:	9800      	ldr	r0, [sp, #0]
    1984:	e89e 100e 	ldmia.w	lr, {r1, r2, r3, ip}
    1988:	f100 0008 	add.w	r0, r0, #8
    198c:	f1b9 0f00 	cmp.w	r9, #0
    1990:	e880 100e 	stmia.w	r0, {r1, r2, r3, ip}
    1994:	d042      	beq.n	1a1c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2b4>
    1996:	b124      	cbz	r4, 19a2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x23a>
    1998:	2100      	movs	r1, #0
    199a:	f240 70a4 	movw	r0, #1956	; 0x7a4
    199e:	f3af 8000 	nop.w
    19a2:	f1bb 0f00 	cmp.w	fp, #0
    19a6:	d12b      	bne.n	1a00 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x298>
    19a8:	e015      	b.n	19d6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x26e>
    19aa:	4632      	mov	r2, r6
    19ac:	4651      	mov	r1, sl
    19ae:	2004      	movs	r0, #4
    19b0:	f7ff fbac 	bl	110c <CONFIG_FPROTECT_BLOCK_SIZE+0x10c>
    19b4:	f04f 0901 	mov.w	r9, #1
    19b8:	e7be      	b.n	1938 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d0>
    19ba:	4632      	mov	r2, r6
    19bc:	4651      	mov	r1, sl
    19be:	2004      	movs	r0, #4
    19c0:	e7b8      	b.n	1934 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1cc>
    19c2:	2920      	cmp	r1, #32
    19c4:	bf19      	ittee	ne
    19c6:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    19ca:	7841      	ldrbne	r1, [r0, #1]
    19cc:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    19d0:	f890 1020 	ldrbeq.w	r1, [r0, #32]
    19d4:	e798      	b.n	1908 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1a0>
    19d6:	b19f      	cbz	r7, 1a00 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x298>
    19d8:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    19dc:	2820      	cmp	r0, #32
    19de:	d10f      	bne.n	1a00 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x298>
    19e0:	b124      	cbz	r4, 19ec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x284>
    19e2:	2100      	movs	r1, #0
    19e4:	f240 70a9 	movw	r0, #1961	; 0x7a9
    19e8:	f3af 8000 	nop.w
    19ec:	4631      	mov	r1, r6
    19ee:	2002      	movs	r0, #2
    19f0:	f7ff fbbc 	bl	116c <CONFIG_FPROTECT_BLOCK_SIZE+0x16c>
    19f4:	b920      	cbnz	r0, 1a00 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x298>
    19f6:	980c      	ldr	r0, [sp, #48]	; 0x30
    19f8:	7800      	ldrb	r0, [r0, #0]
    19fa:	b3e8      	cbz	r0, 1a78 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x310>
    19fc:	2801      	cmp	r0, #1
    19fe:	d049      	beq.n	1a94 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32c>
    1a00:	b124      	cbz	r4, 1a0c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2a4>
    1a02:	2100      	movs	r1, #0
    1a04:	f240 70c6 	movw	r0, #1990	; 0x7c6
    1a08:	f3af 8000 	nop.w
    1a0c:	f885 602e 	strb.w	r6, [r5, #46]	; 0x2e
    1a10:	2001      	movs	r0, #1
    1a12:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
    1a16:	bf00      	nop
    1a18:	f04f 0901 	mov.w	r9, #1
    1a1c:	b124      	cbz	r4, 1a28 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2c0>
    1a1e:	2100      	movs	r1, #0
    1a20:	f240 70cf 	movw	r0, #1999	; 0x7cf
    1a24:	f3af 8000 	nop.w
    1a28:	f1b8 0f00 	cmp.w	r8, #0
    1a2c:	d03b      	beq.n	1aa6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x33e>
    1a2e:	b124      	cbz	r4, 1a3a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
    1a30:	2100      	movs	r1, #0
    1a32:	f240 70d3 	movw	r0, #2003	; 0x7d3
    1a36:	f3af 8000 	nop.w
    1a3a:	f1b9 0f00 	cmp.w	r9, #0
    1a3e:	d011      	beq.n	1a64 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2fc>
    1a40:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    1a44:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    1a48:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    1a4c:	2820      	cmp	r0, #32
    1a4e:	d009      	beq.n	1a64 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2fc>
    1a50:	b124      	cbz	r4, 1a5c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f4>
    1a52:	2100      	movs	r1, #0
    1a54:	f240 70da 	movw	r0, #2010	; 0x7da
    1a58:	f3af 8000 	nop.w
    1a5c:	481d      	ldr	r0, [pc, #116]	; (1ad4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36c>)
    1a5e:	7840      	ldrb	r0, [r0, #1]
    1a60:	f001 fed2 	bl	3808 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1a64:	b124      	cbz	r4, 1a70 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x308>
    1a66:	2100      	movs	r1, #0
    1a68:	f240 70df 	movw	r0, #2015	; 0x7df
    1a6c:	f3af 8000 	nop.w
    1a70:	b00d      	add	sp, #52	; 0x34
    1a72:	4648      	mov	r0, r9
    1a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1a78:	e7ff      	b.n	1a7a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x312>
    1a7a:	b124      	cbz	r4, 1a86 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x31e>
    1a7c:	2100      	movs	r1, #0
    1a7e:	f240 70b1 	movw	r0, #1969	; 0x7b1
    1a82:	f3af 8000 	nop.w
    1a86:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
    1a8a:	4651      	mov	r1, sl
    1a8c:	2004      	movs	r0, #4
    1a8e:	f7ff fb3d 	bl	110c <CONFIG_FPROTECT_BLOCK_SIZE+0x10c>
    1a92:	e7c1      	b.n	1a18 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2b0>
    1a94:	2c00      	cmp	r4, #0
    1a96:	f43f aeb0 	beq.w	17fa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    1a9a:	2100      	movs	r1, #0
    1a9c:	f240 70bc 	movw	r0, #1980	; 0x7bc
    1aa0:	f3af 8000 	nop.w
    1aa4:	e6a9      	b.n	17fa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    1aa6:	4807      	ldr	r0, [pc, #28]	; (1ac4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35c>)
    1aa8:	2800      	cmp	r0, #0
    1aaa:	bf18      	it	ne
    1aac:	f3af 8000 	nopne.w
    1ab0:	b662      	cpsie	i
    1ab2:	e7bc      	b.n	1a2e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2c6>
    1ab4:	e000ed04 	.word	0xe000ed04
    1ab8:	20000ccc 	.word	0x20000ccc
    1abc:	00000000 	.word	0x00000000
    1ac0:	2000094c 	.word	0x2000094c
    1ac4:	00000000 	.word	0x00000000
    1ac8:	20000c4c 	.word	0x20000c4c
    1acc:	003fffff 	.word	0x003fffff
    1ad0:	00000000 	.word	0x00000000
    1ad4:	20000010 	.word	0x20000010

00001ad8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    1ad8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1adc:	48a3      	ldr	r0, [pc, #652]	; (1d6c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x20>)
    1ade:	b086      	sub	sp, #24
    1ae0:	6800      	ldr	r0, [r0, #0]
    1ae2:	05c0      	lsls	r0, r0, #23
    1ae4:	0dc0      	lsrs	r0, r0, #23
    1ae6:	d011      	beq.n	1b0c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x34>
    1ae8:	3810      	subs	r0, #16
    1aea:	b240      	sxtb	r0, r0
    1aec:	2800      	cmp	r0, #0
    1aee:	bfb8      	it	lt
    1af0:	f000 000f 	andlt.w	r0, r0, #15
    1af4:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    1af8:	bfac      	ite	ge
    1afa:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    1afe:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    1b02:	0940      	lsrs	r0, r0, #5
    1b04:	bf08      	it	eq
    1b06:	f04f 0901 	moveq.w	r9, #1
    1b0a:	d001      	beq.n	1b10 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x38>
    1b0c:	f04f 0900 	mov.w	r9, #0
    1b10:	9806      	ldr	r0, [sp, #24]
    1b12:	7800      	ldrb	r0, [r0, #0]
    1b14:	2800      	cmp	r0, #0
    1b16:	f04f 0000 	mov.w	r0, #0
    1b1a:	bf1c      	itt	ne
    1b1c:	b007      	addne	sp, #28
    1b1e:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b22:	f8df a24c 	ldr.w	sl, [pc, #588]	; 1d70 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x24>
    1b26:	4d93      	ldr	r5, [pc, #588]	; (1d74 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x28>)
    1b28:	4c93      	ldr	r4, [pc, #588]	; (1d78 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2c>)
    1b2a:	f04f 0b00 	mov.w	fp, #0
    1b2e:	9004      	str	r0, [sp, #16]
    1b30:	b125      	cbz	r5, 1b3c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x64>
    1b32:	2100      	movs	r1, #0
    1b34:	f240 6065 	movw	r0, #1637	; 0x665
    1b38:	f3af 8000 	nop.w
    1b3c:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
    1b40:	f884 b02b 	strb.w	fp, [r4, #43]	; 0x2b
    1b44:	f04f 0800 	mov.w	r8, #0
    1b48:	b125      	cbz	r5, 1b54 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x7c>
    1b4a:	2100      	movs	r1, #0
    1b4c:	f240 606a 	movw	r0, #1642	; 0x66a
    1b50:	f3af 8000 	nop.w
    1b54:	f1b9 0f00 	cmp.w	r9, #0
    1b58:	d11d      	bne.n	1b96 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xbe>
    1b5a:	4637      	mov	r7, r6
    1b5c:	2001      	movs	r0, #1
    1b5e:	ea20 0607 	bic.w	r6, r0, r7
    1b62:	4886      	ldr	r0, [pc, #536]	; (1d7c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x30>)
    1b64:	2240      	movs	r2, #64	; 0x40
    1b66:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    1b6a:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    1b6e:	f009 fe26 	bl	b7be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1b72:	b125      	cbz	r5, 1b7e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xa6>
    1b74:	2100      	movs	r1, #0
    1b76:	f240 50da 	movw	r0, #1498	; 0x5da
    1b7a:	f3af 8000 	nop.w
    1b7e:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    1b82:	eb04 0086 	add.w	r0, r4, r6, lsl #2
    1b86:	6a09      	ldr	r1, [r1, #32]
    1b88:	6201      	str	r1, [r0, #32]
    1b8a:	b125      	cbz	r5, 1b96 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xbe>
    1b8c:	2100      	movs	r1, #0
    1b8e:	f240 50de 	movw	r0, #1502	; 0x5de
    1b92:	f3af 8000 	nop.w
    1b96:	b125      	cbz	r5, 1ba2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xca>
    1b98:	2100      	movs	r1, #0
    1b9a:	f240 6072 	movw	r0, #1650	; 0x672
    1b9e:	f3af 8000 	nop.w
    1ba2:	f000 fe8b 	bl	28bc <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1ba6:	4607      	mov	r7, r0
    1ba8:	4633      	mov	r3, r6
    1baa:	466a      	mov	r2, sp
    1bac:	9906      	ldr	r1, [sp, #24]
    1bae:	f7ff f907 	bl	dc0 <CONFIG_HEAP_MEM_POOL_SIZE+0x5c0>
    1bb2:	b125      	cbz	r5, 1bbe <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xe6>
    1bb4:	2100      	movs	r1, #0
    1bb6:	f44f 60cf 	mov.w	r0, #1656	; 0x678
    1bba:	f3af 8000 	nop.w
    1bbe:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1bc2:	2820      	cmp	r0, #32
    1bc4:	d014      	beq.n	1bf0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x118>
    1bc6:	6920      	ldr	r0, [r4, #16]
    1bc8:	9900      	ldr	r1, [sp, #0]
    1bca:	1a09      	subs	r1, r1, r0
    1bcc:	0209      	lsls	r1, r1, #8
    1bce:	17ca      	asrs	r2, r1, #31
    1bd0:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1bd4:	1209      	asrs	r1, r1, #8
    1bd6:	d50b      	bpl.n	1bf0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x118>
    1bd8:	e9dd 2100 	ldrd	r2, r1, [sp]
    1bdc:	1a89      	subs	r1, r1, r2
    1bde:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    1be2:	4408      	add	r0, r1
    1be4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1be8:	e9cd 2000 	strd	r2, r0, [sp]
    1bec:	f04f 0801 	mov.w	r8, #1
    1bf0:	b14d      	cbz	r5, 1c06 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x12e>
    1bf2:	2100      	movs	r1, #0
    1bf4:	f240 6082 	movw	r0, #1666	; 0x682
    1bf8:	f3af 8000 	nop.w
    1bfc:	2100      	movs	r1, #0
    1bfe:	f44f 60d1 	mov.w	r0, #1672	; 0x688
    1c02:	f3af 8000 	nop.w
    1c06:	9800      	ldr	r0, [sp, #0]
    1c08:	9901      	ldr	r1, [sp, #4]
    1c0a:	1bc0      	subs	r0, r0, r7
    1c0c:	1bc9      	subs	r1, r1, r7
    1c0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1c12:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1c16:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    1c1a:	d205      	bcs.n	1c28 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x150>
    1c1c:	458a      	cmp	sl, r1
    1c1e:	d303      	bcc.n	1c28 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x150>
    1c20:	f1b9 0f00 	cmp.w	r9, #0
    1c24:	d10c      	bne.n	1c40 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x168>
    1c26:	e003      	b.n	1c30 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x158>
    1c28:	f1b9 0f00 	cmp.w	r9, #0
    1c2c:	d038      	beq.n	1ca0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1c8>
    1c2e:	e094      	b.n	1d5a <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xe>
    1c30:	4633      	mov	r3, r6
    1c32:	463a      	mov	r2, r7
    1c34:	4669      	mov	r1, sp
    1c36:	4852      	ldr	r0, [pc, #328]	; (1d80 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x34>)
    1c38:	f7fe fc3c 	bl	4b4 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x40>
    1c3c:	ea48 0800 	orr.w	r8, r8, r0
    1c40:	f1b8 0f00 	cmp.w	r8, #0
    1c44:	d022      	beq.n	1c8c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1b4>
    1c46:	9800      	ldr	r0, [sp, #0]
    1c48:	f009 fc4b 	bl	b4e2 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1c4c:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    1c50:	f89d 2008 	ldrb.w	r2, [sp, #8]
    1c54:	4b4b      	ldr	r3, [pc, #300]	; (1d84 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x38>)
    1c56:	4411      	add	r1, r2
    1c58:	1c49      	adds	r1, r1, #1
    1c5a:	1842      	adds	r2, r0, r1
    1c5c:	4298      	cmp	r0, r3
    1c5e:	d841      	bhi.n	1ce4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x20c>
    1c60:	4847      	ldr	r0, [pc, #284]	; (1d80 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x34>)
    1c62:	4281      	cmp	r1, r0
    1c64:	dc5a      	bgt.n	1d1c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x244>
    1c66:	4240      	negs	r0, r0
    1c68:	4281      	cmp	r1, r0
    1c6a:	db5f      	blt.n	1d2c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x254>
    1c6c:	1c58      	adds	r0, r3, #1
    1c6e:	4290      	cmp	r0, r2
    1c70:	bfdc      	itt	le
    1c72:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    1c76:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    1c7a:	dd05      	ble.n	1c88 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1b0>
    1c7c:	2a00      	cmp	r2, #0
    1c7e:	bfbc      	itt	lt
    1c80:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    1c84:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    1c88:	9806      	ldr	r0, [sp, #24]
    1c8a:	60c2      	str	r2, [r0, #12]
    1c8c:	2001      	movs	r0, #1
    1c8e:	9004      	str	r0, [sp, #16]
    1c90:	2d00      	cmp	r5, #0
    1c92:	d062      	beq.n	1d5a <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xe>
    1c94:	2100      	movs	r1, #0
    1c96:	f240 609b 	movw	r0, #1691	; 0x69b
    1c9a:	f3af 8000 	nop.w
    1c9e:	e05c      	b.n	1d5a <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xe>
    1ca0:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    1ca4:	aa05      	add	r2, sp, #20
    1ca6:	a904      	add	r1, sp, #16
    1ca8:	f000 fcb2 	bl	2610 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1cac:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1cb0:	2820      	cmp	r0, #32
    1cb2:	d01c      	beq.n	1cee <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x216>
    1cb4:	6920      	ldr	r0, [r4, #16]
    1cb6:	1d40      	adds	r0, r0, #5
    1cb8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1cbc:	e9dd 2100 	ldrd	r2, r1, [sp]
    1cc0:	1a89      	subs	r1, r1, r2
    1cc2:	4401      	add	r1, r0
    1cc4:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1cc8:	e9cd 0100 	strd	r0, r1, [sp]
    1ccc:	f009 fc09 	bl	b4e2 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1cd0:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    1cd4:	f89d 2008 	ldrb.w	r2, [sp, #8]
    1cd8:	4b2a      	ldr	r3, [pc, #168]	; (1d84 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x38>)
    1cda:	4411      	add	r1, r2
    1cdc:	1c49      	adds	r1, r1, #1
    1cde:	1842      	adds	r2, r0, r1
    1ce0:	4298      	cmp	r0, r3
    1ce2:	d918      	bls.n	1d16 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x23e>
    1ce4:	f240 6116 	movw	r1, #1558	; 0x616
    1ce8:	2070      	movs	r0, #112	; 0x70
    1cea:	f001 fcbd 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1cee:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    1cf2:	f107 0609 	add.w	r6, r7, #9
    1cf6:	b120      	cbz	r0, 1d02 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x22a>
    1cf8:	f001 fc52 	bl	35a0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1cfc:	2800      	cmp	r0, #0
    1cfe:	bf08      	it	eq
    1d00:	3632      	addeq	r6, #50	; 0x32
    1d02:	4821      	ldr	r0, [pc, #132]	; (1d88 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3c>)
    1d04:	7841      	ldrb	r1, [r0, #1]
    1d06:	9804      	ldr	r0, [sp, #16]
    1d08:	4281      	cmp	r1, r0
    1d0a:	bf84      	itt	hi
    1d0c:	1a08      	subhi	r0, r1, r0
    1d0e:	4406      	addhi	r6, r0
    1d10:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    1d14:	e7d2      	b.n	1cbc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1e4>
    1d16:	481a      	ldr	r0, [pc, #104]	; (1d80 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x34>)
    1d18:	4281      	cmp	r1, r0
    1d1a:	dd04      	ble.n	1d26 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x24e>
    1d1c:	f240 6117 	movw	r1, #1559	; 0x617
    1d20:	2070      	movs	r0, #112	; 0x70
    1d22:	f001 fca1 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d26:	4819      	ldr	r0, [pc, #100]	; (1d8c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x40>)
    1d28:	4281      	cmp	r1, r0
    1d2a:	da04      	bge.n	1d36 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x25e>
    1d2c:	f44f 61c3 	mov.w	r1, #1560	; 0x618
    1d30:	2070      	movs	r0, #112	; 0x70
    1d32:	f001 fc99 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d36:	4816      	ldr	r0, [pc, #88]	; (1d90 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x44>)
    1d38:	4290      	cmp	r0, r2
    1d3a:	bfdc      	itt	le
    1d3c:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    1d40:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    1d44:	dd05      	ble.n	1d52 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6>
    1d46:	2a00      	cmp	r2, #0
    1d48:	bfbc      	itt	lt
    1d4a:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    1d4e:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    1d52:	9806      	ldr	r0, [sp, #24]
    1d54:	60c2      	str	r2, [r0, #12]
    1d56:	2001      	movs	r0, #1
    1d58:	9004      	str	r0, [sp, #16]
    1d5a:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
    1d5e:	2800      	cmp	r0, #0
    1d60:	f47f aee6 	bne.w	1b30 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x58>
    1d64:	9804      	ldr	r0, [sp, #16]
    1d66:	b007      	add	sp, #28
    1d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1d6c:	e000ed04 	.word	0xe000ed04
    1d70:	003fffff 	.word	0x003fffff
    1d74:	00000000 	.word	0x00000000
    1d78:	20000ccc 	.word	0x20000ccc
    1d7c:	20000c4c 	.word	0x20000c4c
    1d80:	07a12000 	.word	0x07a12000
    1d84:	1e847fff 	.word	0x1e847fff
    1d88:	20000012 	.word	0x20000012
    1d8c:	f85ee000 	.word	0xf85ee000
    1d90:	1e848000 	.word	0x1e848000

00001d94 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    1d94:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1d98:	4d80      	ldr	r5, [pc, #512]	; (1f9c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x208>)
    1d9a:	b08c      	sub	sp, #48	; 0x30
    1d9c:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    1da0:	2000      	movs	r0, #0
    1da2:	9009      	str	r0, [sp, #36]	; 0x24
    1da4:	2001      	movs	r0, #1
    1da6:	4c7e      	ldr	r4, [pc, #504]	; (1fa0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20c>)
    1da8:	f04f 0800 	mov.w	r8, #0
    1dac:	f1a5 0780 	sub.w	r7, r5, #128	; 0x80
    1db0:	4683      	mov	fp, r0
    1db2:	9008      	str	r0, [sp, #32]
    1db4:	b124      	cbz	r4, 1dc0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2c>
    1db6:	2100      	movs	r1, #0
    1db8:	f240 70ee 	movw	r0, #2030	; 0x7ee
    1dbc:	f3af 8000 	nop.w
    1dc0:	9808      	ldr	r0, [sp, #32]
    1dc2:	b390      	cbz	r0, 1e2a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x96>
    1dc4:	f885 802b 	strb.w	r8, [r5, #43]	; 0x2b
    1dc8:	b124      	cbz	r4, 1dd4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x40>
    1dca:	2100      	movs	r1, #0
    1dcc:	f240 70f3 	movw	r0, #2035	; 0x7f3
    1dd0:	f3af 8000 	nop.w
    1dd4:	f895 902e 	ldrb.w	r9, [r5, #46]	; 0x2e
    1dd8:	2240      	movs	r2, #64	; 0x40
    1dda:	ea2b 0609 	bic.w	r6, fp, r9
    1dde:	eb07 1086 	add.w	r0, r7, r6, lsl #6
    1de2:	eb07 1189 	add.w	r1, r7, r9, lsl #6
    1de6:	4682      	mov	sl, r0
    1de8:	f009 fce9 	bl	b7be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1dec:	b124      	cbz	r4, 1df8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x64>
    1dee:	2100      	movs	r1, #0
    1df0:	f240 50da 	movw	r0, #1498	; 0x5da
    1df4:	f3af 8000 	nop.w
    1df8:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    1dfc:	eb05 0189 	add.w	r1, r5, r9, lsl #2
    1e00:	9000      	str	r0, [sp, #0]
    1e02:	6a09      	ldr	r1, [r1, #32]
    1e04:	6201      	str	r1, [r0, #32]
    1e06:	b124      	cbz	r4, 1e12 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x7e>
    1e08:	2100      	movs	r1, #0
    1e0a:	f240 50de 	movw	r0, #1502	; 0x5de
    1e0e:	f3af 8000 	nop.w
    1e12:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    1e16:	b180      	cbz	r0, 1e3a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa6>
    1e18:	2c00      	cmp	r4, #0
    1e1a:	bf1c      	itt	ne
    1e1c:	2100      	movne	r1, #0
    1e1e:	f240 70f9 	movwne	r0, #2041	; 0x7f9
    1e22:	d0c7      	beq.n	1db4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    1e24:	f3af 8000 	nop.w
    1e28:	e7c4      	b.n	1db4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    1e2a:	e7ff      	b.n	1e2c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x98>
    1e2c:	485d      	ldr	r0, [pc, #372]	; (1fa4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x210>)
    1e2e:	2800      	cmp	r0, #0
    1e30:	bf18      	it	ne
    1e32:	f3af 8000 	nopne.w
    1e36:	b662      	cpsie	i
    1e38:	e7c4      	b.n	1dc4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x30>
    1e3a:	b124      	cbz	r4, 1e46 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xb2>
    1e3c:	2100      	movs	r1, #0
    1e3e:	f240 70fd 	movw	r0, #2045	; 0x7fd
    1e42:	f3af 8000 	nop.w
    1e46:	980c      	ldr	r0, [sp, #48]	; 0x30
    1e48:	f81a 0010 	ldrb.w	r0, [sl, r0, lsl #1]
    1e4c:	2803      	cmp	r0, #3
    1e4e:	d178      	bne.n	1f42 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ae>
    1e50:	f8dd 9000 	ldr.w	r9, [sp]
    1e54:	f8cd 9018 	str.w	r9, [sp, #24]
    1e58:	990c      	ldr	r1, [sp, #48]	; 0x30
    1e5a:	f899 0020 	ldrb.w	r0, [r9, #32]
    1e5e:	4288      	cmp	r0, r1
    1e60:	bf14      	ite	ne
    1e62:	f04f 0a00 	movne.w	sl, #0
    1e66:	f04f 0a01 	moveq.w	sl, #1
    1e6a:	f109 0c20 	add.w	ip, r9, #32
    1e6e:	4686      	mov	lr, r0
    1e70:	2220      	movs	r2, #32
    1e72:	eb07 1386 	add.w	r3, r7, r6, lsl #6
    1e76:	e003      	b.n	1e80 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xec>
    1e78:	4602      	mov	r2, r0
    1e7a:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    1e7e:	7840      	ldrb	r0, [r0, #1]
    1e80:	4288      	cmp	r0, r1
    1e82:	d002      	beq.n	1e8a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf6>
    1e84:	2820      	cmp	r0, #32
    1e86:	d00a      	beq.n	1e9e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x10a>
    1e88:	e7f6      	b.n	1e78 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xe4>
    1e8a:	2820      	cmp	r0, #32
    1e8c:	d007      	beq.n	1e9e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x10a>
    1e8e:	4586      	cmp	lr, r0
    1e90:	d107      	bne.n	1ea2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x10e>
    1e92:	eb03 004e 	add.w	r0, r3, lr, lsl #1
    1e96:	7840      	ldrb	r0, [r0, #1]
    1e98:	f88c 0000 	strb.w	r0, [ip]
    1e9c:	e007      	b.n	1eae <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    1e9e:	4640      	mov	r0, r8
    1ea0:	e00c      	b.n	1ebc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x128>
    1ea2:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    1ea6:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    1eaa:	7840      	ldrb	r0, [r0, #1]
    1eac:	7048      	strb	r0, [r1, #1]
    1eae:	b124      	cbz	r4, 1eba <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x126>
    1eb0:	2100      	movs	r1, #0
    1eb2:	f240 5044 	movw	r0, #1348	; 0x544
    1eb6:	f3af 8000 	nop.w
    1eba:	4658      	mov	r0, fp
    1ebc:	ea10 0f0a 	tst.w	r0, sl
    1ec0:	bf18      	it	ne
    1ec2:	f889 b023 	strbne.w	fp, [r9, #35]	; 0x23
    1ec6:	b3e0      	cbz	r0, 1f42 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ae>
    1ec8:	b124      	cbz	r4, 1ed4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x140>
    1eca:	2100      	movs	r1, #0
    1ecc:	f640 0002 	movw	r0, #2050	; 0x802
    1ed0:	f3af 8000 	nop.w
    1ed4:	4632      	mov	r2, r6
    1ed6:	2001      	movs	r0, #1
    1ed8:	990c      	ldr	r1, [sp, #48]	; 0x30
    1eda:	f7ff f917 	bl	110c <CONFIG_FPROTECT_BLOCK_SIZE+0x10c>
    1ede:	9806      	ldr	r0, [sp, #24]
    1ee0:	f890 9023 	ldrb.w	r9, [r0, #35]	; 0x23
    1ee4:	b124      	cbz	r4, 1ef0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x15c>
    1ee6:	2100      	movs	r1, #0
    1ee8:	f640 000d 	movw	r0, #2061	; 0x80d
    1eec:	f3af 8000 	nop.w
    1ef0:	482d      	ldr	r0, [pc, #180]	; (1fa8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x214>)
    1ef2:	2800      	cmp	r0, #0
    1ef4:	bf18      	it	ne
    1ef6:	f3af 8000 	nopne.w
    1efa:	f3ef 8010 	mrs	r0, PRIMASK
    1efe:	b672      	cpsid	i
    1f00:	9008      	str	r0, [sp, #32]
    1f02:	b124      	cbz	r4, 1f0e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x17a>
    1f04:	2100      	movs	r1, #0
    1f06:	f640 0012 	movw	r0, #2066	; 0x812
    1f0a:	f3af 8000 	nop.w
    1f0e:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    1f12:	b138      	cbz	r0, 1f24 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x190>
    1f14:	2c00      	cmp	r4, #0
    1f16:	bf1c      	itt	ne
    1f18:	2100      	movne	r1, #0
    1f1a:	f640 0016 	movwne	r0, #2070	; 0x816
    1f1e:	f43f af49 	beq.w	1db4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    1f22:	e77f      	b.n	1e24 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x90>
    1f24:	f1b9 0f00 	cmp.w	r9, #0
    1f28:	d008      	beq.n	1f3c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a8>
    1f2a:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    1f2e:	2820      	cmp	r0, #32
    1f30:	d104      	bne.n	1f3c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a8>
    1f32:	4631      	mov	r1, r6
    1f34:	2002      	movs	r0, #2
    1f36:	f7ff f919 	bl	116c <CONFIG_FPROTECT_BLOCK_SIZE+0x16c>
    1f3a:	b1f8      	cbz	r0, 1f7c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e8>
    1f3c:	b134      	cbz	r4, 1f4c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1b8>
    1f3e:	2100      	movs	r1, #0
    1f40:	e000      	b.n	1f44 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1b0>
    1f42:	e009      	b.n	1f58 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c4>
    1f44:	f640 002a 	movw	r0, #2090	; 0x82a
    1f48:	f3af 8000 	nop.w
    1f4c:	f885 602e 	strb.w	r6, [r5, #46]	; 0x2e
    1f50:	f885 b02b 	strb.w	fp, [r5, #43]	; 0x2b
    1f54:	2001      	movs	r0, #1
    1f56:	9009      	str	r0, [sp, #36]	; 0x24
    1f58:	b124      	cbz	r4, 1f64 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d0>
    1f5a:	2100      	movs	r1, #0
    1f5c:	f640 0033 	movw	r0, #2099	; 0x833
    1f60:	f3af 8000 	nop.w
    1f64:	9808      	ldr	r0, [sp, #32]
    1f66:	b188      	cbz	r0, 1f8c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f8>
    1f68:	b124      	cbz	r4, 1f74 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e0>
    1f6a:	2100      	movs	r1, #0
    1f6c:	f640 0037 	movw	r0, #2103	; 0x837
    1f70:	f3af 8000 	nop.w
    1f74:	9809      	ldr	r0, [sp, #36]	; 0x24
    1f76:	b00d      	add	sp, #52	; 0x34
    1f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1f7c:	2c00      	cmp	r4, #0
    1f7e:	d0f1      	beq.n	1f64 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d0>
    1f80:	2100      	movs	r1, #0
    1f82:	f640 0025 	movw	r0, #2085	; 0x825
    1f86:	f3af 8000 	nop.w
    1f8a:	e7e6      	b.n	1f5a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c6>
    1f8c:	4805      	ldr	r0, [pc, #20]	; (1fa4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x210>)
    1f8e:	2800      	cmp	r0, #0
    1f90:	bf18      	it	ne
    1f92:	f3af 8000 	nopne.w
    1f96:	b662      	cpsie	i
    1f98:	e7e6      	b.n	1f68 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d4>
    1f9a:	0000      	.short	0x0000
    1f9c:	20000ccc 	.word	0x20000ccc
	...

00001fac <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>:
    1fac:	2820      	cmp	r0, #32
    1fae:	bf24      	itt	cs
    1fb0:	2000      	movcs	r0, #0
    1fb2:	4770      	bxcs	lr
    1fb4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1fb8:	4b03      	ldr	r3, [pc, #12]	; (1fc8 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI+0x1c>)
    1fba:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
    1fbe:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    1fc2:	6042      	str	r2, [r0, #4]
    1fc4:	2001      	movs	r0, #1
    1fc6:	4770      	bx	lr
    1fc8:	2000094c 	.word	0x2000094c

00001fcc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    1fcc:	b510      	push	{r4, lr}
    1fce:	2820      	cmp	r0, #32
    1fd0:	d211      	bcs.n	1ff6 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    1fd2:	490e      	ldr	r1, [pc, #56]	; (200c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    1fd4:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    1fd8:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    1fdc:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    1fe0:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    1fe4:	b13b      	cbz	r3, 1ff6 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    1fe6:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    1fea:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    1fee:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    1ff2:	2a01      	cmp	r2, #1
    1ff4:	d001      	beq.n	1ffa <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    1ff6:	2000      	movs	r0, #0
    1ff8:	bd10      	pop	{r4, pc}
    1ffa:	f891 202e 	ldrb.w	r2, [r1, #46]	; 0x2e
    1ffe:	4601      	mov	r1, r0
    2000:	2000      	movs	r0, #0
    2002:	f7ff f883 	bl	110c <CONFIG_FPROTECT_BLOCK_SIZE+0x10c>
    2006:	2001      	movs	r0, #1
    2008:	bd10      	pop	{r4, pc}
    200a:	0000      	.short	0x0000
    200c:	20000ccc 	.word	0x20000ccc

00002010 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    2010:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    2014:	4e7e      	ldr	r6, [pc, #504]	; (2210 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x200>)
    2016:	4680      	mov	r8, r0
    2018:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    201c:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    2020:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    2024:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    2028:	2800      	cmp	r0, #0
    202a:	d065      	beq.n	20f8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe8>
    202c:	f896 902e 	ldrb.w	r9, [r6, #46]	; 0x2e
    2030:	4d78      	ldr	r5, [pc, #480]	; (2214 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x204>)
    2032:	b125      	cbz	r5, 203e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    2034:	2100      	movs	r1, #0
    2036:	f640 30b9 	movw	r0, #3001	; 0xbb9
    203a:	f3af 8000 	nop.w
    203e:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    2042:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    2046:	2801      	cmp	r0, #1
    2048:	d018      	beq.n	207c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    204a:	b2c0      	uxtb	r0, r0
    204c:	2804      	cmp	r0, #4
    204e:	bf1c      	itt	ne
    2050:	2805      	cmpne	r0, #5
    2052:	2806      	cmpne	r0, #6
    2054:	d055      	beq.n	2102 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf2>
    2056:	b12d      	cbz	r5, 2064 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    2058:	f04f 0100 	mov.w	r1, #0
    205c:	f640 30c5 	movw	r0, #3013	; 0xbc5
    2060:	f3af 8000 	nop.w
    2064:	f001 fc26 	bl	38b4 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    2068:	b125      	cbz	r5, 2074 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    206a:	2100      	movs	r1, #0
    206c:	f640 30c9 	movw	r0, #3017	; 0xbc9
    2070:	f3af 8000 	nop.w
    2074:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    2078:	2801      	cmp	r0, #1
    207a:	d1e6      	bne.n	204a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    207c:	2401      	movs	r4, #1
    207e:	b125      	cbz	r5, 208a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    2080:	2100      	movs	r1, #0
    2082:	f44f 603d 	mov.w	r0, #3024	; 0xbd0
    2086:	f3af 8000 	nop.w
    208a:	b3a4      	cbz	r4, 20f6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe6>
    208c:	2000      	movs	r0, #0
    208e:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    2092:	b125      	cbz	r5, 209e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x8e>
    2094:	2100      	movs	r1, #0
    2096:	f640 30d5 	movw	r0, #3029	; 0xbd5
    209a:	f3af 8000 	nop.w
    209e:	f896 b02e 	ldrb.w	fp, [r6, #46]	; 0x2e
    20a2:	2001      	movs	r0, #1
    20a4:	ea20 090b 	bic.w	r9, r0, fp
    20a8:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    20ac:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    20b0:	2240      	movs	r2, #64	; 0x40
    20b2:	f009 fb84 	bl	b7be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    20b6:	b125      	cbz	r5, 20c2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb2>
    20b8:	2100      	movs	r1, #0
    20ba:	f240 50da 	movw	r0, #1498	; 0x5da
    20be:	f3af 8000 	nop.w
    20c2:	eb06 008b 	add.w	r0, r6, fp, lsl #2
    20c6:	eb06 0a89 	add.w	sl, r6, r9, lsl #2
    20ca:	6a00      	ldr	r0, [r0, #32]
    20cc:	f8ca 0020 	str.w	r0, [sl, #32]
    20d0:	b125      	cbz	r5, 20dc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xcc>
    20d2:	2100      	movs	r1, #0
    20d4:	f240 50de 	movw	r0, #1502	; 0x5de
    20d8:	f3af 8000 	nop.w
    20dc:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    20e0:	b1e0      	cbz	r0, 211c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10c>
    20e2:	2d00      	cmp	r5, #0
    20e4:	bf1c      	itt	ne
    20e6:	2100      	movne	r1, #0
    20e8:	f640 30db 	movwne	r0, #3035	; 0xbdb
    20ec:	d0c7      	beq.n	207e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    20ee:	bf00      	nop
    20f0:	f3af 8000 	nop.w
    20f4:	e7c3      	b.n	207e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    20f6:	e00a      	b.n	210e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xfe>
    20f8:	f44f 613b 	mov.w	r1, #2992	; 0xbb0
    20fc:	2070      	movs	r0, #112	; 0x70
    20fe:	f001 fab3 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2102:	464a      	mov	r2, r9
    2104:	4641      	mov	r1, r8
    2106:	2001      	movs	r0, #1
    2108:	f7ff f800 	bl	110c <CONFIG_FPROTECT_BLOCK_SIZE+0x10c>
    210c:	e7ac      	b.n	2068 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    210e:	4842      	ldr	r0, [pc, #264]	; (2218 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x208>)
    2110:	2800      	cmp	r0, #0
    2112:	bf18      	it	ne
    2114:	f3af 8000 	nopne.w
    2118:	b662      	cpsie	i
    211a:	e7b7      	b.n	208c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7c>
    211c:	b125      	cbz	r5, 2128 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x118>
    211e:	2100      	movs	r1, #0
    2120:	f640 30df 	movw	r0, #3039	; 0xbdf
    2124:	f3af 8000 	nop.w
    2128:	f89a 3021 	ldrb.w	r3, [sl, #33]	; 0x21
    212c:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    2130:	4640      	mov	r0, r8
    2132:	461c      	mov	r4, r3
    2134:	f04f 0b20 	mov.w	fp, #32
    2138:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    213c:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    2140:	e004      	b.n	214c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x13c>
    2142:	46a3      	mov	fp, r4
    2144:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    2148:	f89c 4001 	ldrb.w	r4, [ip, #1]
    214c:	4284      	cmp	r4, r0
    214e:	d002      	beq.n	2156 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x146>
    2150:	2c20      	cmp	r4, #32
    2152:	d02b      	beq.n	21ac <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19c>
    2154:	e7f5      	b.n	2142 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x132>
    2156:	2c20      	cmp	r4, #32
    2158:	d028      	beq.n	21ac <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19c>
    215a:	42a3      	cmp	r3, r4
    215c:	d104      	bne.n	2168 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x158>
    215e:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    2162:	7840      	ldrb	r0, [r0, #1]
    2164:	7008      	strb	r0, [r1, #0]
    2166:	e005      	b.n	2174 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x164>
    2168:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    216c:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    2170:	7840      	ldrb	r0, [r0, #1]
    2172:	7048      	strb	r0, [r1, #1]
    2174:	f1ba 0f00 	cmp.w	sl, #0
    2178:	d011      	beq.n	219e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    217a:	b125      	cbz	r5, 2186 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x176>
    217c:	2100      	movs	r1, #0
    217e:	f240 503c 	movw	r0, #1340	; 0x53c
    2182:	f3af 8000 	nop.w
    2186:	f89a 0000 	ldrb.w	r0, [sl]
    218a:	42a0      	cmp	r0, r4
    218c:	d107      	bne.n	219e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    218e:	b125      	cbz	r5, 219a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18a>
    2190:	2100      	movs	r1, #0
    2192:	f240 503f 	movw	r0, #1343	; 0x53f
    2196:	f3af 8000 	nop.w
    219a:	f88a b000 	strb.w	fp, [sl]
    219e:	b15d      	cbz	r5, 21b8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a8>
    21a0:	2100      	movs	r1, #0
    21a2:	f240 5044 	movw	r0, #1348	; 0x544
    21a6:	f3af 8000 	nop.w
    21aa:	e000      	b.n	21ae <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    21ac:	b125      	cbz	r5, 21b8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a8>
    21ae:	2100      	movs	r1, #0
    21b0:	f640 30e3 	movw	r0, #3043	; 0xbe3
    21b4:	f3af 8000 	nop.w
    21b8:	4818      	ldr	r0, [pc, #96]	; (221c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x20c>)
    21ba:	2800      	cmp	r0, #0
    21bc:	bf18      	it	ne
    21be:	f3af 8000 	nopne.w
    21c2:	f3ef 8410 	mrs	r4, PRIMASK
    21c6:	b672      	cpsid	i
    21c8:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    21cc:	b138      	cbz	r0, 21de <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ce>
    21ce:	2d00      	cmp	r5, #0
    21d0:	bf1c      	itt	ne
    21d2:	2100      	movne	r1, #0
    21d4:	f640 30e9 	movwne	r0, #3049	; 0xbe9
    21d8:	f43f af51 	beq.w	207e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    21dc:	e788      	b.n	20f0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe0>
    21de:	f886 902e 	strb.w	r9, [r6, #46]	; 0x2e
    21e2:	2001      	movs	r0, #1
    21e4:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    21e8:	b154      	cbz	r4, 2200 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1f0>
    21ea:	2d00      	cmp	r5, #0
    21ec:	bf08      	it	eq
    21ee:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    21f2:	2100      	movs	r1, #0
    21f4:	f640 30f6 	movw	r0, #3062	; 0xbf6
    21f8:	f3af 8000 	nop.w
    21fc:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    2200:	4805      	ldr	r0, [pc, #20]	; (2218 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x208>)
    2202:	2800      	cmp	r0, #0
    2204:	bf18      	it	ne
    2206:	f3af 8000 	nopne.w
    220a:	b662      	cpsie	i
    220c:	e7ed      	b.n	21ea <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1da>
    220e:	0000      	.short	0x0000
    2210:	20000ccc 	.word	0x20000ccc
	...

00002220 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    2220:	b570      	push	{r4, r5, r6, lr}
    2222:	460d      	mov	r5, r1
    2224:	4606      	mov	r6, r0
    2226:	f001 f9a9 	bl	357c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    222a:	480f      	ldr	r0, [pc, #60]	; (2268 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    222c:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
    2230:	2400      	movs	r4, #0
    2232:	3880      	subs	r0, #128	; 0x80
    2234:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    2238:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    223c:	b129      	cbz	r1, 224a <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    223e:	1c61      	adds	r1, r4, #1
    2240:	b2cc      	uxtb	r4, r1
    2242:	2c20      	cmp	r4, #32
    2244:	d3f8      	bcc.n	2238 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    2246:	2020      	movs	r0, #32
    2248:	bd70      	pop	{r4, r5, r6, pc}
    224a:	4808      	ldr	r0, [pc, #32]	; (226c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    224c:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    2250:	f840 6031 	str.w	r6, [r0, r1, lsl #3]
    2254:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    2258:	4621      	mov	r1, r4
    225a:	6045      	str	r5, [r0, #4]
    225c:	2001      	movs	r0, #1
    225e:	f7fe ff55 	bl	110c <CONFIG_FPROTECT_BLOCK_SIZE+0x10c>
    2262:	4620      	mov	r0, r4
    2264:	bd70      	pop	{r4, r5, r6, pc}
    2266:	0000      	.short	0x0000
    2268:	20000ccc 	.word	0x20000ccc
    226c:	2000094c 	.word	0x2000094c

00002270 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    2270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2274:	b083      	sub	sp, #12
    2276:	f000 fb21 	bl	28bc <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    227a:	4605      	mov	r5, r0
    227c:	f000 fdd4 	bl	2e28 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    2280:	4c63      	ldr	r4, [pc, #396]	; (2410 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1a0>)
    2282:	68a0      	ldr	r0, [r4, #8]
    2284:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    2288:	bf1c      	itt	ne
    228a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    228e:	60a0      	strne	r0, [r4, #8]
    2290:	7fa0      	ldrb	r0, [r4, #30]
    2292:	f8df b180 	ldr.w	fp, [pc, #384]	; 2414 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1a4>
    2296:	b9a8      	cbnz	r0, 22c4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x54>
    2298:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
    229c:	1a08      	subs	r0, r1, r0
    229e:	0200      	lsls	r0, r0, #8
    22a0:	17c1      	asrs	r1, r0, #31
    22a2:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    22a6:	1200      	asrs	r0, r0, #8
    22a8:	f44f 710c 	mov.w	r1, #560	; 0x230
    22ac:	f009 f946 	bl	b53c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    22b0:	6921      	ldr	r1, [r4, #16]
    22b2:	4408      	add	r0, r1
    22b4:	1a28      	subs	r0, r5, r0
    22b6:	0200      	lsls	r0, r0, #8
    22b8:	17c1      	asrs	r1, r0, #31
    22ba:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    22be:	1200      	asrs	r0, r0, #8
    22c0:	0fc0      	lsrs	r0, r0, #31
    22c2:	d00b      	beq.n	22dc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x6c>
    22c4:	7e60      	ldrb	r0, [r4, #25]
    22c6:	b1e8      	cbz	r0, 2304 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x94>
    22c8:	f000 fc04 	bl	2ad4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    22cc:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    22d0:	b1f0      	cbz	r0, 2310 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa0>
    22d2:	f240 4154 	movw	r1, #1108	; 0x454
    22d6:	2070      	movs	r0, #112	; 0x70
    22d8:	f001 f9c6 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    22dc:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    22e0:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    22e4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    22e8:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    22ec:	6840      	ldr	r0, [r0, #4]
    22ee:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    22f2:	f85b 2031 	ldr.w	r2, [fp, r1, lsl #3]
    22f6:	2108      	movs	r1, #8
    22f8:	4790      	blx	r2
    22fa:	f240 4143 	movw	r1, #1091	; 0x443
    22fe:	2070      	movs	r0, #112	; 0x70
    2300:	f001 f9b2 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2304:	1ce8      	adds	r0, r5, #3
    2306:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    230a:	f000 fadd 	bl	28c8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    230e:	e7dd      	b.n	22cc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x5c>
    2310:	f04f 0a01 	mov.w	sl, #1
    2314:	f884 a02a 	strb.w	sl, [r4, #42]	; 0x2a
    2318:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    231c:	2820      	cmp	r0, #32
    231e:	d024      	beq.n	236a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xfa>
    2320:	f894 802f 	ldrb.w	r8, [r4, #47]	; 0x2f
    2324:	2020      	movs	r0, #32
    2326:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    232a:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    232e:	2600      	movs	r6, #0
    2330:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    2334:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    2338:	4837      	ldr	r0, [pc, #220]	; (2418 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1a8>)
    233a:	6026      	str	r6, [r4, #0]
    233c:	7800      	ldrb	r0, [r0, #0]
    233e:	2802      	cmp	r0, #2
    2340:	bf16      	itet	ne
    2342:	2803      	cmpne	r0, #3
    2344:	2001      	moveq	r0, #1
    2346:	2000      	movne	r0, #0
    2348:	7720      	strb	r0, [r4, #28]
    234a:	f894 702e 	ldrb.w	r7, [r4, #46]	; 0x2e
    234e:	eb04 0987 	add.w	r9, r4, r7, lsl #2
    2352:	f899 0020 	ldrb.w	r0, [r9, #32]
    2356:	2820      	cmp	r0, #32
    2358:	d031      	beq.n	23be <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14e>
    235a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    235e:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    2362:	7d81      	ldrb	r1, [r0, #22]
    2364:	2901      	cmp	r1, #1
    2366:	d005      	beq.n	2374 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x104>
    2368:	e029      	b.n	23be <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14e>
    236a:	f240 4157 	movw	r1, #1111	; 0x457
    236e:	2070      	movs	r0, #112	; 0x70
    2370:	f001 f97a 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2374:	46ab      	mov	fp, r5
    2376:	f100 0508 	add.w	r5, r0, #8
    237a:	8a40      	ldrh	r0, [r0, #18]
    237c:	aa01      	add	r2, sp, #4
    237e:	4669      	mov	r1, sp
    2380:	f000 f946 	bl	2610 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2384:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2388:	2820      	cmp	r0, #32
    238a:	d004      	beq.n	2396 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x126>
    238c:	6920      	ldr	r0, [r4, #16]
    238e:	1d40      	adds	r0, r0, #5
    2390:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2394:	e00b      	b.n	23ae <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x13e>
    2396:	8968      	ldrh	r0, [r5, #10]
    2398:	f10b 0b09 	add.w	fp, fp, #9
    239c:	b128      	cbz	r0, 23aa <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x13a>
    239e:	f001 f8ff 	bl	35a0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    23a2:	2800      	cmp	r0, #0
    23a4:	bf08      	it	eq
    23a6:	f10b 0b32 	addeq.w	fp, fp, #50	; 0x32
    23aa:	f02b 407f 	bic.w	r0, fp, #4278190080	; 0xff000000
    23ae:	e9d5 2100 	ldrd	r2, r1, [r5]
    23b2:	1a89      	subs	r1, r1, r2
    23b4:	6028      	str	r0, [r5, #0]
    23b6:	4408      	add	r0, r1
    23b8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    23bc:	6068      	str	r0, [r5, #4]
    23be:	4639      	mov	r1, r7
    23c0:	2001      	movs	r0, #1
    23c2:	f7fe fed3 	bl	116c <CONFIG_FPROTECT_BLOCK_SIZE+0x16c>
    23c6:	2800      	cmp	r0, #0
    23c8:	d0f9      	beq.n	23be <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14e>
    23ca:	4814      	ldr	r0, [pc, #80]	; (241c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1ac>)
    23cc:	eb00 1087 	add.w	r0, r0, r7, lsl #6
    23d0:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    23d4:	2802      	cmp	r0, #2
    23d6:	d104      	bne.n	23e2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x172>
    23d8:	463a      	mov	r2, r7
    23da:	4641      	mov	r1, r8
    23dc:	2006      	movs	r0, #6
    23de:	f7fe fe95 	bl	110c <CONFIG_FPROTECT_BLOCK_SIZE+0x10c>
    23e2:	f884 a02b 	strb.w	sl, [r4, #43]	; 0x2b
    23e6:	f899 0021 	ldrb.w	r0, [r9, #33]	; 0x21
    23ea:	2820      	cmp	r0, #32
    23ec:	d003      	beq.n	23f6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x186>
    23ee:	480c      	ldr	r0, [pc, #48]	; (2420 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b0>)
    23f0:	7840      	ldrb	r0, [r0, #1]
    23f2:	f001 fa09 	bl	3808 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    23f6:	7f20      	ldrb	r0, [r4, #28]
    23f8:	2800      	cmp	r0, #0
    23fa:	bf04      	itt	eq
    23fc:	b003      	addeq	sp, #12
    23fe:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2402:	f000 fd5b 	bl	2ebc <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    2406:	7726      	strb	r6, [r4, #28]
    2408:	7766      	strb	r6, [r4, #29]
    240a:	b003      	add	sp, #12
    240c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2410:	20000ccc 	.word	0x20000ccc
    2414:	2000094c 	.word	0x2000094c
    2418:	20000012 	.word	0x20000012
    241c:	20000c4c 	.word	0x20000c4c
    2420:	20000010 	.word	0x20000010

00002424 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    2424:	b510      	push	{r4, lr}
    2426:	4c30      	ldr	r4, [pc, #192]	; (24e8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc4>)
    2428:	b082      	sub	sp, #8
    242a:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    242e:	2920      	cmp	r1, #32
    2430:	d008      	beq.n	2444 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x20>
    2432:	68a1      	ldr	r1, [r4, #8]
    2434:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    2438:	d009      	beq.n	244e <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2a>
    243a:	f640 21e8 	movw	r1, #2792	; 0xae8
    243e:	2070      	movs	r0, #112	; 0x70
    2440:	f001 f912 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2444:	f640 21e7 	movw	r1, #2791	; 0xae7
    2448:	2070      	movs	r0, #112	; 0x70
    244a:	f001 f90d 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    244e:	6862      	ldr	r2, [r4, #4]
    2450:	4601      	mov	r1, r0
    2452:	4b26      	ldr	r3, [pc, #152]	; (24ec <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc8>)
    2454:	1850      	adds	r0, r2, r1
    2456:	429a      	cmp	r2, r3
    2458:	d904      	bls.n	2464 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x40>
    245a:	f240 6116 	movw	r1, #1558	; 0x616
    245e:	2070      	movs	r0, #112	; 0x70
    2460:	f001 f902 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2464:	4a22      	ldr	r2, [pc, #136]	; (24f0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xcc>)
    2466:	4291      	cmp	r1, r2
    2468:	dd04      	ble.n	2474 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x50>
    246a:	f240 6117 	movw	r1, #1559	; 0x617
    246e:	2070      	movs	r0, #112	; 0x70
    2470:	f001 f8fa 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2474:	4a1f      	ldr	r2, [pc, #124]	; (24f4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd0>)
    2476:	4291      	cmp	r1, r2
    2478:	da04      	bge.n	2484 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x60>
    247a:	f44f 61c3 	mov.w	r1, #1560	; 0x618
    247e:	2070      	movs	r0, #112	; 0x70
    2480:	f001 f8f2 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2484:	491c      	ldr	r1, [pc, #112]	; (24f8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd4>)
    2486:	4281      	cmp	r1, r0
    2488:	bfdc      	itt	le
    248a:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    248e:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    2492:	dd05      	ble.n	24a0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    2494:	2800      	cmp	r0, #0
    2496:	bfbc      	itt	lt
    2498:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    249c:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    24a0:	aa01      	add	r2, sp, #4
    24a2:	4669      	mov	r1, sp
    24a4:	f000 f8b4 	bl	2610 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    24a8:	f89d 0004 	ldrb.w	r0, [sp, #4]
    24ac:	280f      	cmp	r0, #15
    24ae:	bf8c      	ite	hi
    24b0:	2001      	movhi	r0, #1
    24b2:	2000      	movls	r0, #0
    24b4:	9900      	ldr	r1, [sp, #0]
    24b6:	4408      	add	r0, r1
    24b8:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    24bc:	60a1      	str	r1, [r4, #8]
    24be:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    24c2:	2800      	cmp	r0, #0
    24c4:	bf04      	itt	eq
    24c6:	b002      	addeq	sp, #8
    24c8:	bd10      	popeq	{r4, pc}
    24ca:	2301      	movs	r3, #1
    24cc:	2203      	movs	r2, #3
    24ce:	2005      	movs	r0, #5
    24d0:	f000 fb7a 	bl	2bc8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    24d4:	2800      	cmp	r0, #0
    24d6:	bf1c      	itt	ne
    24d8:	b002      	addne	sp, #8
    24da:	bd10      	popne	{r4, pc}
    24dc:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
    24e0:	2070      	movs	r0, #112	; 0x70
    24e2:	f001 f8c1 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    24e6:	0000      	.short	0x0000
    24e8:	20000ccc 	.word	0x20000ccc
    24ec:	1e847fff 	.word	0x1e847fff
    24f0:	07a12000 	.word	0x07a12000
    24f4:	f85ee000 	.word	0xf85ee000
    24f8:	1e848000 	.word	0x1e848000

000024fc <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    24fc:	b570      	push	{r4, r5, r6, lr}
    24fe:	4c1e      	ldr	r4, [pc, #120]	; (2578 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    2500:	2120      	movs	r1, #32
    2502:	f884 1020 	strb.w	r1, [r4, #32]
    2506:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    250a:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    250e:	2000      	movs	r0, #0
    2510:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    2514:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    2518:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    251c:	1e42      	subs	r2, r0, #1
    251e:	60a2      	str	r2, [r4, #8]
    2520:	6020      	str	r0, [r4, #0]
    2522:	77a0      	strb	r0, [r4, #30]
    2524:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    2528:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    252c:	7720      	strb	r0, [r4, #28]
    252e:	7760      	strb	r0, [r4, #29]
    2530:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    2534:	4911      	ldr	r1, [pc, #68]	; (257c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x80>)
    2536:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    253a:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    253e:	7008      	strb	r0, [r1, #0]
    2540:	7048      	strb	r0, [r1, #1]
    2542:	8048      	strh	r0, [r1, #2]
    2544:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    2548:	2210      	movs	r2, #16
    254a:	7088      	strb	r0, [r1, #2]
    254c:	f801 0f04 	strb.w	r0, [r1, #4]!
    2550:	1e52      	subs	r2, r2, #1
    2552:	d1fa      	bne.n	254a <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x4e>
    2554:	4d0a      	ldr	r5, [pc, #40]	; (2580 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x84>)
    2556:	2601      	movs	r6, #1
    2558:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    255c:	20ff      	movs	r0, #255	; 0xff
    255e:	7028      	strb	r0, [r5, #0]
    2560:	4808      	ldr	r0, [pc, #32]	; (2584 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x88>)
    2562:	f001 f933 	bl	37cc <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    2566:	7068      	strb	r0, [r5, #1]
    2568:	f001 f98e 	bl	3888 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    256c:	60a8      	str	r0, [r5, #8]
    256e:	f000 fcd3 	bl	2f18 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    2572:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    2576:	bd70      	pop	{r4, r5, r6, pc}
    2578:	20000ccc 	.word	0x20000ccc
    257c:	20000012 	.word	0x20000012
    2580:	20000010 	.word	0x20000010
    2584:	00000fc9 	.word	0x00000fc9

00002588 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>:
    2588:	b570      	push	{r4, r5, r6, lr}
    258a:	4604      	mov	r4, r0
    258c:	4615      	mov	r5, r2
    258e:	4608      	mov	r0, r1
    2590:	f008 ff9c 	bl	b4cc <sym_BE2HGIHF5RDQALAHNCCVX54XTGKEN4KZFXFBHBQ>
    2594:	4a0f      	ldr	r2, [pc, #60]	; (25d4 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x4c>)
    2596:	1b01      	subs	r1, r0, r4
    2598:	f102 0c01 	add.w	ip, r2, #1
    259c:	ebb1 0f9c 	cmp.w	r1, ip, lsr #2
    25a0:	bf24      	itt	cs
    25a2:	1a23      	subcs	r3, r4, r0
    25a4:	ebb3 0f9c 	cmpcs.w	r3, ip, lsr #2
    25a8:	d30b      	bcc.n	25c2 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x3a>
    25aa:	428a      	cmp	r2, r1
    25ac:	d203      	bcs.n	25b6 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x2e>
    25ae:	1b11      	subs	r1, r2, r4
    25b0:	4408      	add	r0, r1
    25b2:	1c41      	adds	r1, r0, #1
    25b4:	e005      	b.n	25c2 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x3a>
    25b6:	429a      	cmp	r2, r3
    25b8:	d207      	bcs.n	25ca <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x42>
    25ba:	1a10      	subs	r0, r2, r0
    25bc:	4420      	add	r0, r4
    25be:	1c40      	adds	r0, r0, #1
    25c0:	4241      	negs	r1, r0
    25c2:	f101 000f 	add.w	r0, r1, #15
    25c6:	1a28      	subs	r0, r5, r0
    25c8:	bd70      	pop	{r4, r5, r6, pc}
    25ca:	f640 310b 	movw	r1, #2827	; 0xb0b
    25ce:	2070      	movs	r0, #112	; 0x70
    25d0:	f001 f84a 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    25d4:	1e847fff 	.word	0x1e847fff

000025d8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    25d8:	0b41      	lsrs	r1, r0, #13
    25da:	f248 6237 	movw	r2, #34359	; 0x8637
    25de:	4351      	muls	r1, r2
    25e0:	0c0a      	lsrs	r2, r1, #16
    25e2:	4b09      	ldr	r3, [pc, #36]	; (2608 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    25e4:	0251      	lsls	r1, r2, #9
    25e6:	fb02 0203 	mla	r2, r2, r3, r0
    25ea:	4808      	ldr	r0, [pc, #32]	; (260c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    25ec:	4350      	muls	r0, r2
    25ee:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    25f2:	306e      	adds	r0, #110	; 0x6e
    25f4:	0d40      	lsrs	r0, r0, #21
    25f6:	425b      	negs	r3, r3
    25f8:	fb10 f303 	smulbb	r3, r0, r3
    25fc:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    2600:	bf88      	it	hi
    2602:	1c49      	addhi	r1, r1, #1
    2604:	4408      	add	r0, r1
    2606:	4770      	bx	lr
    2608:	ffffc2f7 	.word	0xffffc2f7
    260c:	00010c6f 	.word	0x00010c6f

00002610 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    2610:	0b43      	lsrs	r3, r0, #13
    2612:	f248 6c37 	movw	ip, #34359	; 0x8637
    2616:	fb03 f30c 	mul.w	r3, r3, ip
    261a:	b430      	push	{r4, r5}
    261c:	0c1b      	lsrs	r3, r3, #16
    261e:	f8df c044 	ldr.w	ip, [pc, #68]	; 2664 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    2622:	025c      	lsls	r4, r3, #9
    2624:	fb03 030c 	mla	r3, r3, ip, r0
    2628:	480f      	ldr	r0, [pc, #60]	; (2668 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    262a:	4358      	muls	r0, r3
    262c:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    2630:	eb04 000c 	add.w	r0, r4, ip
    2634:	f643 5409 	movw	r4, #15625	; 0x3d09
    2638:	fb1c f404 	smulbb	r4, ip, r4
    263c:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    2640:	f643 5508 	movw	r5, #15624	; 0x3d08
    2644:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    2648:	442c      	add	r4, r5
    264a:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    264e:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    2652:	bf84      	itt	hi
    2654:	f04f 0c00 	movhi.w	ip, #0
    2658:	1c40      	addhi	r0, r0, #1
    265a:	6008      	str	r0, [r1, #0]
    265c:	f882 c000 	strb.w	ip, [r2]
    2660:	bc30      	pop	{r4, r5}
    2662:	4770      	bx	lr
    2664:	ffffc2f7 	.word	0xffffc2f7
    2668:	00010c6f 	.word	0x00010c6f

0000266c <MPSL_IRQ_RTC0_Handler>:
    266c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2670:	4c38      	ldr	r4, [pc, #224]	; (2754 <MPSL_IRQ_RTC0_Handler+0xe8>)
    2672:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2676:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 2758 <MPSL_IRQ_RTC0_Handler+0xec>
    267a:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    267e:	f44f 6600 	mov.w	r6, #2048	; 0x800
    2682:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    2686:	f04f 0500 	mov.w	r5, #0
    268a:	bf1c      	itt	ne
    268c:	f8d4 0140 	ldrne.w	r0, [r4, #320]	; 0x140
    2690:	2800      	cmpne	r0, #0
    2692:	d017      	beq.n	26c4 <MPSL_IRQ_RTC0_Handler+0x58>
    2694:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    2698:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    269c:	482f      	ldr	r0, [pc, #188]	; (275c <MPSL_IRQ_RTC0_Handler+0xf0>)
    269e:	6800      	ldr	r0, [r0, #0]
    26a0:	f8d8 1000 	ldr.w	r1, [r8]
    26a4:	eba0 0001 	sub.w	r0, r0, r1
    26a8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    26ac:	2802      	cmp	r0, #2
    26ae:	d302      	bcc.n	26b6 <MPSL_IRQ_RTC0_Handler+0x4a>
    26b0:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    26b4:	d306      	bcc.n	26c4 <MPSL_IRQ_RTC0_Handler+0x58>
    26b6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    26ba:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    26be:	2004      	movs	r0, #4
    26c0:	f7fe ff68 	bl	1594 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    26c4:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    26c8:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    26cc:	bf1c      	itt	ne
    26ce:	f8d4 0144 	ldrne.w	r0, [r4, #324]	; 0x144
    26d2:	2800      	cmpne	r0, #0
    26d4:	d017      	beq.n	2706 <MPSL_IRQ_RTC0_Handler+0x9a>
    26d6:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
    26da:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    26de:	4820      	ldr	r0, [pc, #128]	; (2760 <MPSL_IRQ_RTC0_Handler+0xf4>)
    26e0:	6800      	ldr	r0, [r0, #0]
    26e2:	f8d8 1000 	ldr.w	r1, [r8]
    26e6:	eba0 0001 	sub.w	r0, r0, r1
    26ea:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    26ee:	2802      	cmp	r0, #2
    26f0:	d302      	bcc.n	26f8 <MPSL_IRQ_RTC0_Handler+0x8c>
    26f2:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    26f6:	d306      	bcc.n	2706 <MPSL_IRQ_RTC0_Handler+0x9a>
    26f8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    26fc:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    2700:	2005      	movs	r0, #5
    2702:	f7fe ff47 	bl	1594 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2706:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    270a:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    270e:	bf1a      	itte	ne
    2710:	f8d4 0148 	ldrne.w	r0, [r4, #328]	; 0x148
    2714:	2800      	cmpne	r0, #0
    2716:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    271a:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
    271e:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2722:	4810      	ldr	r0, [pc, #64]	; (2764 <MPSL_IRQ_RTC0_Handler+0xf8>)
    2724:	6800      	ldr	r0, [r0, #0]
    2726:	f8d8 1000 	ldr.w	r1, [r8]
    272a:	eba0 0001 	sub.w	r0, r0, r1
    272e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2732:	2802      	cmp	r0, #2
    2734:	d304      	bcc.n	2740 <MPSL_IRQ_RTC0_Handler+0xd4>
    2736:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    273a:	bf38      	it	cc
    273c:	e8bd 81f0 	ldmiacc.w	sp!, {r4, r5, r6, r7, r8, pc}
    2740:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    2744:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    2748:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    274c:	2006      	movs	r0, #6
    274e:	f7fe bf21 	b.w	1594 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2752:	0000      	.short	0x0000
    2754:	4000b000 	.word	0x4000b000
    2758:	4000b504 	.word	0x4000b504
    275c:	4000b540 	.word	0x4000b540
    2760:	4000b544 	.word	0x4000b544
    2764:	4000b548 	.word	0x4000b548

00002768 <MPSL_IRQ_TIMER0_Handler>:
    2768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    276c:	4d3a      	ldr	r5, [pc, #232]	; (2858 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    276e:	7828      	ldrb	r0, [r5, #0]
    2770:	2804      	cmp	r0, #4
    2772:	d06c      	beq.n	284e <MPSL_IRQ_TIMER0_Handler+0xe6>
    2774:	1ce8      	adds	r0, r5, #3
    2776:	2201      	movs	r2, #1
    2778:	7801      	ldrb	r1, [r0, #0]
    277a:	b159      	cbz	r1, 2794 <MPSL_IRQ_TIMER0_Handler+0x2c>
    277c:	2901      	cmp	r1, #1
    277e:	bf08      	it	eq
    2780:	706a      	strbeq	r2, [r5, #1]
    2782:	d002      	beq.n	278a <MPSL_IRQ_TIMER0_Handler+0x22>
    2784:	7869      	ldrb	r1, [r5, #1]
    2786:	2900      	cmp	r1, #0
    2788:	d05c      	beq.n	2844 <MPSL_IRQ_TIMER0_Handler+0xdc>
    278a:	2102      	movs	r1, #2
    278c:	7001      	strb	r1, [r0, #0]
    278e:	7840      	ldrb	r0, [r0, #1]
    2790:	f000 fae2 	bl	2d58 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2794:	4c31      	ldr	r4, [pc, #196]	; (285c <MPSL_IRQ_TIMER0_Handler+0xf4>)
    2796:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    279a:	f04f 0800 	mov.w	r8, #0
    279e:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    27a2:	f44f 7680 	mov.w	r6, #256	; 0x100
    27a6:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    27aa:	bf1c      	itt	ne
    27ac:	f8d4 014c 	ldrne.w	r0, [r4, #332]	; 0x14c
    27b0:	2800      	cmpne	r0, #0
    27b2:	d008      	beq.n	27c6 <MPSL_IRQ_TIMER0_Handler+0x5e>
    27b4:	f04f 0003 	mov.w	r0, #3
    27b8:	f000 face 	bl	2d58 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    27bc:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    27c0:	2003      	movs	r0, #3
    27c2:	f7fe fee7 	bl	1594 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    27c6:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    27ca:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    27ce:	bf1c      	itt	ne
    27d0:	f8d4 0148 	ldrne.w	r0, [r4, #328]	; 0x148
    27d4:	2800      	cmpne	r0, #0
    27d6:	d008      	beq.n	27ea <MPSL_IRQ_TIMER0_Handler+0x82>
    27d8:	f04f 0002 	mov.w	r0, #2
    27dc:	f000 fabc 	bl	2d58 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    27e0:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    27e4:	2002      	movs	r0, #2
    27e6:	f7fe fed5 	bl	1594 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    27ea:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    27ee:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    27f2:	bf1c      	itt	ne
    27f4:	f8d4 0144 	ldrne.w	r0, [r4, #324]	; 0x144
    27f8:	2800      	cmpne	r0, #0
    27fa:	d008      	beq.n	280e <MPSL_IRQ_TIMER0_Handler+0xa6>
    27fc:	f04f 0001 	mov.w	r0, #1
    2800:	f000 faaa 	bl	2d58 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2804:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2808:	2001      	movs	r0, #1
    280a:	f7fe fec3 	bl	1594 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    280e:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2812:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    2816:	bf1a      	itte	ne
    2818:	f8d4 0140 	ldrne.w	r0, [r4, #320]	; 0x140
    281c:	2800      	cmpne	r0, #0
    281e:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    2822:	f04f 0000 	mov.w	r0, #0
    2826:	f000 fa97 	bl	2d58 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    282a:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    282e:	2004      	movs	r0, #4
    2830:	7028      	strb	r0, [r5, #0]
    2832:	f8c5 8008 	str.w	r8, [r5, #8]
    2836:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    283a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    283e:	2000      	movs	r0, #0
    2840:	f7fe bea8 	b.w	1594 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2844:	f240 3166 	movw	r1, #870	; 0x366
    2848:	206c      	movs	r0, #108	; 0x6c
    284a:	f000 ff0d 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    284e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2852:	2007      	movs	r0, #7
    2854:	f7fe be9e 	b.w	1594 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2858:	2000001c 	.word	0x2000001c
    285c:	40008000 	.word	0x40008000
    2860:	2201      	movs	r2, #1
    2862:	0213      	lsls	r3, r2, #8
    2864:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    2868:	2000      	movs	r0, #0
    286a:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
    286e:	f501 71c0 	add.w	r1, r1, #384	; 0x180
    2872:	f3bf 8f4f 	dsb	sy
    2876:	f3bf 8f6f 	isb	sy
    287a:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
    287e:	490c      	ldr	r1, [pc, #48]	; (28b0 <MPSL_IRQ_TIMER0_Handler+0x148>)
    2880:	604a      	str	r2, [r1, #4]
    2882:	1e43      	subs	r3, r0, #1
    2884:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    2888:	4b0a      	ldr	r3, [pc, #40]	; (28b4 <MPSL_IRQ_TIMER0_Handler+0x14c>)
    288a:	6018      	str	r0, [r3, #0]
    288c:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    2890:	1d1b      	adds	r3, r3, #4
    2892:	6018      	str	r0, [r3, #0]
    2894:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2898:	1d1b      	adds	r3, r3, #4
    289a:	6018      	str	r0, [r3, #0]
    289c:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    28a0:	1d1b      	adds	r3, r3, #4
    28a2:	6018      	str	r0, [r3, #0]
    28a4:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    28a8:	610a      	str	r2, [r1, #16]
    28aa:	4903      	ldr	r1, [pc, #12]	; (28b8 <MPSL_IRQ_TIMER0_Handler+0x150>)
    28ac:	7048      	strb	r0, [r1, #1]
    28ae:	4770      	bx	lr
    28b0:	40008000 	.word	0x40008000
    28b4:	40008540 	.word	0x40008540
    28b8:	2000001c 	.word	0x2000001c

000028bc <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    28bc:	4801      	ldr	r0, [pc, #4]	; (28c4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    28be:	6800      	ldr	r0, [r0, #0]
    28c0:	4770      	bx	lr
    28c2:	0000      	.short	0x0000
    28c4:	4000b504 	.word	0x4000b504

000028c8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    28c8:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    28cc:	4e41      	ldr	r6, [pc, #260]	; (29d4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x10c>)
    28ce:	4604      	mov	r4, r0
    28d0:	1ef7      	subs	r7, r6, #3
    28d2:	f896 c000 	ldrb.w	ip, [r6]
    28d6:	68f8      	ldr	r0, [r7, #12]
    28d8:	f1bc 0f01 	cmp.w	ip, #1
    28dc:	bf04      	itt	eq
    28de:	42a0      	cmpeq	r0, r4
    28e0:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    28e4:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    28e8:	4a3b      	ldr	r2, [pc, #236]	; (29d8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x110>)
    28ea:	6011      	str	r1, [r2, #0]
    28ec:	493b      	ldr	r1, [pc, #236]	; (29dc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x114>)
    28ee:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    28f2:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    28f6:	4a3a      	ldr	r2, [pc, #232]	; (29e0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x118>)
    28f8:	f04f 0500 	mov.w	r5, #0
    28fc:	f1bc 0f00 	cmp.w	ip, #0
    2900:	d057      	beq.n	29b2 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xea>
    2902:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    2906:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    290a:	6015      	str	r5, [r2, #0]
    290c:	f8c1 5144 	str.w	r5, [r1, #324]	; 0x144
    2910:	f8d1 2148 	ldr.w	r2, [r1, #328]	; 0x148
    2914:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    2918:	f04f 0801 	mov.w	r8, #1
    291c:	2a00      	cmp	r2, #0
    291e:	bf04      	itt	eq
    2920:	f44f 6200 	moveq.w	r2, #2048	; 0x800
    2924:	f8c9 2280 	streq.w	r2, [r9, #640]	; 0x280
    2928:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    292c:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    2930:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2934:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
    2938:	4a2a      	ldr	r2, [pc, #168]	; (29e4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x11c>)
    293a:	f8d2 a000 	ldr.w	sl, [r2]
    293e:	eba4 0a0a 	sub.w	sl, r4, sl
    2942:	f02a 4b7f 	bic.w	fp, sl, #4278190080	; 0xff000000
    2946:	f1bb 0f02 	cmp.w	fp, #2
    294a:	d33c      	bcc.n	29c6 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfe>
    294c:	f04f 0a02 	mov.w	sl, #2
    2950:	f5bb 0f80 	cmp.w	fp, #4194304	; 0x400000
    2954:	d237      	bcs.n	29c6 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfe>
    2956:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    295a:	f8c1 3344 	str.w	r3, [r1, #836]	; 0x344
    295e:	f1bc 0f00 	cmp.w	ip, #0
    2962:	d005      	beq.n	2970 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xa8>
    2964:	6811      	ldr	r1, [r2, #0]
    2966:	1a41      	subs	r1, r0, r1
    2968:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    296c:	2902      	cmp	r1, #2
    296e:	d3f9      	bcc.n	2964 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x9c>
    2970:	f8c7 8008 	str.w	r8, [r7, #8]
    2974:	703d      	strb	r5, [r7, #0]
    2976:	f7ff ff73 	bl	2860 <MPSL_IRQ_TIMER0_Handler+0xf8>
    297a:	481b      	ldr	r0, [pc, #108]	; (29e8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x120>)
    297c:	6005      	str	r5, [r0, #0]
    297e:	1d00      	adds	r0, r0, #4
    2980:	f8c0 a000 	str.w	sl, [r0]
    2984:	4919      	ldr	r1, [pc, #100]	; (29ec <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x124>)
    2986:	2004      	movs	r0, #4
    2988:	6008      	str	r0, [r1, #0]
    298a:	4919      	ldr	r1, [pc, #100]	; (29f0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x128>)
    298c:	f8c1 800c 	str.w	r8, [r1, #12]
    2990:	68ba      	ldr	r2, [r7, #8]
    2992:	f8c1 2200 	str.w	r2, [r1, #512]	; 0x200
    2996:	0181      	lsls	r1, r0, #6
    2998:	f8c9 1280 	str.w	r1, [r9, #640]	; 0x280
    299c:	f8c9 1100 	str.w	r1, [r9, #256]	; 0x100
    29a0:	4a14      	ldr	r2, [pc, #80]	; (29f4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x12c>)
    29a2:	0741      	lsls	r1, r0, #29
    29a4:	6011      	str	r1, [r2, #0]
    29a6:	60fc      	str	r4, [r7, #12]
    29a8:	7070      	strb	r0, [r6, #1]
    29aa:	f886 8000 	strb.w	r8, [r6]
    29ae:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    29b2:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    29b6:	4b10      	ldr	r3, [pc, #64]	; (29f8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x130>)
    29b8:	601d      	str	r5, [r3, #0]
    29ba:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
    29be:	6015      	str	r5, [r2, #0]
    29c0:	f8c1 5144 	str.w	r5, [r1, #324]	; 0x144
    29c4:	e7a4      	b.n	2910 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x48>
    29c6:	f8c1 5540 	str.w	r5, [r1, #1344]	; 0x540
    29ca:	f240 11ef 	movw	r1, #495	; 0x1ef
    29ce:	206c      	movs	r0, #108	; 0x6c
    29d0:	f000 fe4a 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    29d4:	2000001f 	.word	0x2000001f
    29d8:	4001f508 	.word	0x4001f508
    29dc:	4000b000 	.word	0x4000b000
    29e0:	4000b544 	.word	0x4000b544
    29e4:	4000b504 	.word	0x4000b504
    29e8:	40008504 	.word	0x40008504
    29ec:	40008510 	.word	0x40008510
    29f0:	40008000 	.word	0x40008000
    29f4:	4001f504 	.word	0x4001f504
    29f8:	4000b540 	.word	0x4000b540

000029fc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    29fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2a00:	4c2b      	ldr	r4, [pc, #172]	; (2ab0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    2a02:	68e1      	ldr	r1, [r4, #12]
    2a04:	4281      	cmp	r1, r0
    2a06:	bf14      	ite	ne
    2a08:	2201      	movne	r2, #1
    2a0a:	2200      	moveq	r2, #0
    2a0c:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 2ab4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>
    2a10:	f89c 7000 	ldrb.w	r7, [ip]
    2a14:	2f02      	cmp	r7, #2
    2a16:	d002      	beq.n	2a1e <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x22>
    2a18:	2a00      	cmp	r2, #0
    2a1a:	d038      	beq.n	2a8e <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x92>
    2a1c:	e003      	b.n	2a26 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x2a>
    2a1e:	2a00      	cmp	r2, #0
    2a20:	bf08      	it	eq
    2a22:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    2a26:	7862      	ldrb	r2, [r4, #1]
    2a28:	b382      	cbz	r2, 2a8c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x90>
    2a2a:	4b23      	ldr	r3, [pc, #140]	; (2ab8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    2a2c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2a30:	601a      	str	r2, [r3, #0]
    2a32:	4b22      	ldr	r3, [pc, #136]	; (2abc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    2a34:	1395      	asrs	r5, r2, #14
    2a36:	f8c3 5308 	str.w	r5, [r3, #776]	; 0x308
    2a3a:	f8c3 5348 	str.w	r5, [r3, #840]	; 0x348
    2a3e:	2600      	movs	r6, #0
    2a40:	f8c3 6140 	str.w	r6, [r3, #320]	; 0x140
    2a44:	4a1e      	ldr	r2, [pc, #120]	; (2ac0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc4>)
    2a46:	f8d2 8000 	ldr.w	r8, [r2]
    2a4a:	eba0 0808 	sub.w	r8, r0, r8
    2a4e:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    2a52:	f1b8 0f02 	cmp.w	r8, #2
    2a56:	d324      	bcc.n	2aa2 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa6>
    2a58:	f5b8 0f80 	cmp.w	r8, #4194304	; 0x400000
    2a5c:	d221      	bcs.n	2aa2 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa6>
    2a5e:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    2a62:	f8c3 5344 	str.w	r5, [r3, #836]	; 0x344
    2a66:	b12f      	cbz	r7, 2a74 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x78>
    2a68:	6813      	ldr	r3, [r2, #0]
    2a6a:	1acb      	subs	r3, r1, r3
    2a6c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2a70:	2b02      	cmp	r3, #2
    2a72:	d3f9      	bcc.n	2a68 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x6c>
    2a74:	4b13      	ldr	r3, [pc, #76]	; (2ac4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc8>)
    2a76:	2102      	movs	r1, #2
    2a78:	074a      	lsls	r2, r1, #29
    2a7a:	601a      	str	r2, [r3, #0]
    2a7c:	60e0      	str	r0, [r4, #12]
    2a7e:	2004      	movs	r0, #4
    2a80:	f88c 0001 	strb.w	r0, [ip, #1]
    2a84:	f88c 1000 	strb.w	r1, [ip]
    2a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2a8c:	e004      	b.n	2a98 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    2a8e:	f240 11fd 	movw	r1, #509	; 0x1fd
    2a92:	206c      	movs	r0, #108	; 0x6c
    2a94:	f000 fde8 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2a98:	f240 2101 	movw	r1, #513	; 0x201
    2a9c:	206c      	movs	r0, #108	; 0x6c
    2a9e:	f000 fde3 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2aa2:	f8c3 6540 	str.w	r6, [r3, #1344]	; 0x540
    2aa6:	f240 210d 	movw	r1, #525	; 0x20d
    2aaa:	206c      	movs	r0, #108	; 0x6c
    2aac:	f000 fddc 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2ab0:	2000001c 	.word	0x2000001c
    2ab4:	2000001f 	.word	0x2000001f
    2ab8:	4001f508 	.word	0x4001f508
    2abc:	4000b000 	.word	0x4000b000
    2ac0:	4000b504 	.word	0x4000b504
    2ac4:	4001f504 	.word	0x4001f504

00002ac8 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    2ac8:	4801      	ldr	r0, [pc, #4]	; (2ad0 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    2aca:	68c0      	ldr	r0, [r0, #12]
    2acc:	4770      	bx	lr
    2ace:	0000      	.short	0x0000
    2ad0:	2000001c 	.word	0x2000001c

00002ad4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    2ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2ad8:	4833      	ldr	r0, [pc, #204]	; (2ba8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd4>)
    2ada:	f46f 2480 	mvn.w	r4, #262144	; 0x40000
    2ade:	f8c0 4308 	str.w	r4, [r0, #776]	; 0x308
    2ae2:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 2bac <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd8>
    2ae6:	4a32      	ldr	r2, [pc, #200]	; (2bb0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xdc>)
    2ae8:	2100      	movs	r1, #0
    2aea:	f89c 3000 	ldrb.w	r3, [ip]
    2aee:	b163      	cbz	r3, 2b0a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x36>
    2af0:	f46f 24a0 	mvn.w	r4, #327680	; 0x50000
    2af4:	f8c0 4348 	str.w	r4, [r0, #840]	; 0x348
    2af8:	6011      	str	r1, [r2, #0]
    2afa:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    2afe:	bf00      	nop
    2b00:	f8d0 0148 	ldr.w	r0, [r0, #328]	; 0x148
    2b04:	2201      	movs	r2, #1
    2b06:	b980      	cbnz	r0, 2b2a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x56>
    2b08:	e009      	b.n	2b1e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x4a>
    2b0a:	f8c0 4348 	str.w	r4, [r0, #840]	; 0x348
    2b0e:	4c29      	ldr	r4, [pc, #164]	; (2bb4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    2b10:	6021      	str	r1, [r4, #0]
    2b12:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    2b16:	6011      	str	r1, [r2, #0]
    2b18:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    2b1c:	e7f0      	b.n	2b00 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x2c>
    2b1e:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    2b22:	f44f 6000 	mov.w	r0, #2048	; 0x800
    2b26:	f8c4 0280 	str.w	r0, [r4, #640]	; 0x280
    2b2a:	2b02      	cmp	r3, #2
    2b2c:	d004      	beq.n	2b38 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x64>
    2b2e:	f240 2119 	movw	r1, #537	; 0x219
    2b32:	206c      	movs	r0, #108	; 0x6c
    2b34:	f000 fd98 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2b38:	4e1f      	ldr	r6, [pc, #124]	; (2bb8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>)
    2b3a:	6830      	ldr	r0, [r6, #0]
    2b3c:	4c1f      	ldr	r4, [pc, #124]	; (2bbc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    2b3e:	1cc0      	adds	r0, r0, #3
    2b40:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2b44:	68e3      	ldr	r3, [r4, #12]
    2b46:	4d1e      	ldr	r5, [pc, #120]	; (2bc0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    2b48:	4298      	cmp	r0, r3
    2b4a:	d00b      	beq.n	2b64 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    2b4c:	6837      	ldr	r7, [r6, #0]
    2b4e:	1bdf      	subs	r7, r3, r7
    2b50:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    2b54:	2f04      	cmp	r7, #4
    2b56:	d305      	bcc.n	2b64 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    2b58:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
    2b5c:	d202      	bcs.n	2b64 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    2b5e:	f7ff feb3 	bl	28c8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    2b62:	e01b      	b.n	2b9c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc8>
    2b64:	6830      	ldr	r0, [r6, #0]
    2b66:	1a18      	subs	r0, r3, r0
    2b68:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2b6c:	2802      	cmp	r0, #2
    2b6e:	d313      	bcc.n	2b98 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc4>
    2b70:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    2b74:	d210      	bcs.n	2b98 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc4>
    2b76:	4b13      	ldr	r3, [pc, #76]	; (2bc4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    2b78:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    2b7c:	6018      	str	r0, [r3, #0]
    2b7e:	60a2      	str	r2, [r4, #8]
    2b80:	7021      	strb	r1, [r4, #0]
    2b82:	606a      	str	r2, [r5, #4]
    2b84:	60ea      	str	r2, [r5, #12]
    2b86:	0040      	lsls	r0, r0, #1
    2b88:	1f19      	subs	r1, r3, #4
    2b8a:	6008      	str	r0, [r1, #0]
    2b8c:	2004      	movs	r0, #4
    2b8e:	f88c 0001 	strb.w	r0, [ip, #1]
    2b92:	f88c 2000 	strb.w	r2, [ip]
    2b96:	e001      	b.n	2b9c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc8>
    2b98:	60a2      	str	r2, [r4, #8]
    2b9a:	7021      	strb	r1, [r4, #0]
    2b9c:	68a0      	ldr	r0, [r4, #8]
    2b9e:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    2ba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2ba6:	0000      	.short	0x0000
    2ba8:	4000b000 	.word	0x4000b000
    2bac:	2000001f 	.word	0x2000001f
    2bb0:	4000b544 	.word	0x4000b544
    2bb4:	4000b540 	.word	0x4000b540
    2bb8:	4000b504 	.word	0x4000b504
    2bbc:	2000001c 	.word	0x2000001c
    2bc0:	40008000 	.word	0x40008000
    2bc4:	4001f508 	.word	0x4001f508

00002bc8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    2bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2bcc:	f8df c174 	ldr.w	ip, [pc, #372]	; 2d44 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x17c>
    2bd0:	2701      	movs	r7, #1
    2bd2:	f04f 0800 	mov.w	r8, #0
    2bd6:	f89c 5000 	ldrb.w	r5, [ip]
    2bda:	f89c c001 	ldrb.w	ip, [ip, #1]
    2bde:	2807      	cmp	r0, #7
    2be0:	d27e      	bcs.n	2ce0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x118>
    2be2:	e8df f000 	tbb	[pc, r0]
    2be6:	0404      	.short	0x0404
    2be8:	6a6a0404 	.word	0x6a6a0404
    2bec:	006a      	.short	0x006a
    2bee:	4c56      	ldr	r4, [pc, #344]	; (2d48 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x180>)
    2bf0:	68e6      	ldr	r6, [r4, #12]
    2bf2:	f1b6 7f80 	cmp.w	r6, #16777216	; 0x1000000
    2bf6:	bf04      	itt	eq
    2bf8:	7864      	ldrbeq	r4, [r4, #1]
    2bfa:	2c00      	cmpeq	r4, #0
    2bfc:	d002      	beq.n	2c04 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x3c>
    2bfe:	2d02      	cmp	r5, #2
    2c00:	d005      	beq.n	2c0e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    2c02:	e03c      	b.n	2c7e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb6>
    2c04:	f44f 7113 	mov.w	r1, #588	; 0x24c
    2c08:	206c      	movs	r0, #108	; 0x6c
    2c0a:	f000 fd2d 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c0e:	ea4f 048c 	mov.w	r4, ip, lsl #2
    2c12:	f104 4680 	add.w	r6, r4, #1073741824	; 0x40000000
    2c16:	f1ac 0404 	sub.w	r4, ip, #4
    2c1a:	0624      	lsls	r4, r4, #24
    2c1c:	0da4      	lsrs	r4, r4, #22
    2c1e:	f104 4980 	add.w	r9, r4, #1073741824	; 0x40000000
    2c22:	f506 4600 	add.w	r6, r6, #32768	; 0x8000
    2c26:	f509 4930 	add.w	r9, r9, #45056	; 0xb000
    2c2a:	2400      	movs	r4, #0
    2c2c:	2d01      	cmp	r5, #1
    2c2e:	d002      	beq.n	2c36 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x6e>
    2c30:	2d02      	cmp	r5, #2
    2c32:	d011      	beq.n	2c58 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x90>
    2c34:	e020      	b.n	2c78 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2c36:	f1bc 0f04 	cmp.w	ip, #4
    2c3a:	d205      	bcs.n	2c48 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x80>
    2c3c:	f8d6 a140 	ldr.w	sl, [r6, #320]	; 0x140
    2c40:	f1ba 0f00 	cmp.w	sl, #0
    2c44:	d118      	bne.n	2c78 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2c46:	e004      	b.n	2c52 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8a>
    2c48:	f8d9 a140 	ldr.w	sl, [r9, #320]	; 0x140
    2c4c:	f1ba 0f00 	cmp.w	sl, #0
    2c50:	d112      	bne.n	2c78 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2c52:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
    2c56:	e00f      	b.n	2c78 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2c58:	f1bc 0f04 	cmp.w	ip, #4
    2c5c:	d205      	bcs.n	2c6a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xa2>
    2c5e:	f8d6 a140 	ldr.w	sl, [r6, #320]	; 0x140
    2c62:	f1ba 0f00 	cmp.w	sl, #0
    2c66:	d107      	bne.n	2c78 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2c68:	e004      	b.n	2c74 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xac>
    2c6a:	f8d9 a140 	ldr.w	sl, [r9, #320]	; 0x140
    2c6e:	f1ba 0f00 	cmp.w	sl, #0
    2c72:	d101      	bne.n	2c78 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2c74:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    2c78:	f014 4f80 	tst.w	r4, #1073741824	; 0x40000000
    2c7c:	d1d5      	bne.n	2c2a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x62>
    2c7e:	4c33      	ldr	r4, [pc, #204]	; (2d4c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x184>)
    2c80:	f100 0c10 	add.w	ip, r0, #16
    2c84:	fa07 fc0c 	lsl.w	ip, r7, ip
    2c88:	f8c4 c308 	str.w	ip, [r4, #776]	; 0x308
    2c8c:	0080      	lsls	r0, r0, #2
    2c8e:	4420      	add	r0, r4
    2c90:	b152      	cbz	r2, 2ca8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    2c92:	6407      	str	r7, [r0, #64]	; 0x40
    2c94:	f8d0 6540 	ldr.w	r6, [r0, #1344]	; 0x540
    2c98:	1b8d      	subs	r5, r1, r6
    2c9a:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    2c9e:	42aa      	cmp	r2, r5
    2ca0:	bf98      	it	ls
    2ca2:	f5b5 0f80 	cmpls.w	r5, #4194304	; 0x400000
    2ca6:	d243      	bcs.n	2d30 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>
    2ca8:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    2cac:	2b01      	cmp	r3, #1
    2cae:	bf08      	it	eq
    2cb0:	f8c4 c304 	streq.w	ip, [r4, #772]	; 0x304
    2cb4:	2001      	movs	r0, #1
    2cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2cba:	b135      	cbz	r5, 2cca <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    2cbc:	4584      	cmp	ip, r0
    2cbe:	d104      	bne.n	2cca <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    2cc0:	f240 216f 	movw	r1, #623	; 0x26f
    2cc4:	206c      	movs	r0, #108	; 0x6c
    2cc6:	f000 fccf 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2cca:	1f00      	subs	r0, r0, #4
    2ccc:	b2c0      	uxtb	r0, r0
    2cce:	2b01      	cmp	r3, #1
    2cd0:	bf0c      	ite	eq
    2cd2:	2401      	moveq	r4, #1
    2cd4:	2400      	movne	r4, #0
    2cd6:	2803      	cmp	r0, #3
    2cd8:	d306      	bcc.n	2ce8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x120>
    2cda:	f240 1149 	movw	r1, #329	; 0x149
    2cde:	e000      	b.n	2ce2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x11a>
    2ce0:	e02b      	b.n	2d3a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x172>
    2ce2:	206c      	movs	r0, #108	; 0x6c
    2ce4:	f000 fcc0 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2ce8:	f8df c064 	ldr.w	ip, [pc, #100]	; 2d50 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x188>
    2cec:	f100 0310 	add.w	r3, r0, #16
    2cf0:	fa07 f303 	lsl.w	r3, r7, r3
    2cf4:	f8cc 3308 	str.w	r3, [ip, #776]	; 0x308
    2cf8:	f8cc 3348 	str.w	r3, [ip, #840]	; 0x348
    2cfc:	0080      	lsls	r0, r0, #2
    2cfe:	4460      	add	r0, ip
    2d00:	f8c0 8140 	str.w	r8, [r0, #320]	; 0x140
    2d04:	b14a      	cbz	r2, 2d1a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x152>
    2d06:	4d13      	ldr	r5, [pc, #76]	; (2d54 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x18c>)
    2d08:	682e      	ldr	r6, [r5, #0]
    2d0a:	1b8d      	subs	r5, r1, r6
    2d0c:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    2d10:	42aa      	cmp	r2, r5
    2d12:	bf98      	it	ls
    2d14:	f5b5 0f80 	cmpls.w	r5, #4194304	; 0x400000
    2d18:	d20a      	bcs.n	2d30 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>
    2d1a:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    2d1e:	2c00      	cmp	r4, #0
    2d20:	bf18      	it	ne
    2d22:	f8cc 3304 	strne.w	r3, [ip, #772]	; 0x304
    2d26:	f8cc 3344 	str.w	r3, [ip, #836]	; 0x344
    2d2a:	2001      	movs	r0, #1
    2d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2d30:	f8c0 8540 	str.w	r8, [r0, #1344]	; 0x540
    2d34:	2000      	movs	r0, #0
    2d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2d3a:	f44f 711d 	mov.w	r1, #628	; 0x274
    2d3e:	206c      	movs	r0, #108	; 0x6c
    2d40:	f000 fc92 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2d44:	2000001f 	.word	0x2000001f
    2d48:	2000001c 	.word	0x2000001c
    2d4c:	40008000 	.word	0x40008000
    2d50:	4000b000 	.word	0x4000b000
    2d54:	4000b504 	.word	0x4000b504

00002d58 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    2d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d5a:	2701      	movs	r7, #1
    2d5c:	2400      	movs	r4, #0
    2d5e:	2807      	cmp	r0, #7
    2d60:	d24c      	bcs.n	2dfc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa4>
    2d62:	e8df f000 	tbb	[pc, r0]
    2d66:	0404      	.short	0x0404
    2d68:	16160404 	.word	0x16160404
    2d6c:	0016      	.short	0x0016
    2d6e:	4a26      	ldr	r2, [pc, #152]	; (2e08 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb0>)
    2d70:	f100 0110 	add.w	r1, r0, #16
    2d74:	fa07 f101 	lsl.w	r1, r7, r1
    2d78:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    2d7c:	0081      	lsls	r1, r0, #2
    2d7e:	4411      	add	r1, r2
    2d80:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    2d84:	f8c1 4140 	str.w	r4, [r1, #320]	; 0x140
    2d88:	4920      	ldr	r1, [pc, #128]	; (2e0c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>)
    2d8a:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    2d8e:	9000      	str	r0, [sp, #0]
    2d90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2d92:	4d1f      	ldr	r5, [pc, #124]	; (2e10 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb8>)
    2d94:	1f01      	subs	r1, r0, #4
    2d96:	b2ce      	uxtb	r6, r1
    2d98:	7829      	ldrb	r1, [r5, #0]
    2d9a:	b179      	cbz	r1, 2dbc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x64>
    2d9c:	786a      	ldrb	r2, [r5, #1]
    2d9e:	4282      	cmp	r2, r0
    2da0:	d10c      	bne.n	2dbc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x64>
    2da2:	4a1c      	ldr	r2, [pc, #112]	; (2e14 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xbc>)
    2da4:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    2da8:	6010      	str	r0, [r2, #0]
    2daa:	2901      	cmp	r1, #1
    2dac:	bf08      	it	eq
    2dae:	f7ff fd57 	bleq	2860 <MPSL_IRQ_TIMER0_Handler+0xf8>
    2db2:	702c      	strb	r4, [r5, #0]
    2db4:	4918      	ldr	r1, [pc, #96]	; (2e18 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    2db6:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    2dba:	60c8      	str	r0, [r1, #12]
    2dbc:	f106 0010 	add.w	r0, r6, #16
    2dc0:	fa07 f100 	lsl.w	r1, r7, r0
    2dc4:	4815      	ldr	r0, [pc, #84]	; (2e1c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    2dc6:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    2dca:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    2dce:	00b0      	lsls	r0, r6, #2
    2dd0:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    2dd4:	f500 4030 	add.w	r0, r0, #45056	; 0xb000
    2dd8:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    2ddc:	4a10      	ldr	r2, [pc, #64]	; (2e20 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    2dde:	6812      	ldr	r2, [r2, #0]
    2de0:	1a89      	subs	r1, r1, r2
    2de2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2de6:	2902      	cmp	r1, #2
    2de8:	bf24      	itt	cs
    2dea:	f8c0 4540 	strcs.w	r4, [r0, #1344]	; 0x540
    2dee:	f8c0 4140 	strcs.w	r4, [r0, #320]	; 0x140
    2df2:	480c      	ldr	r0, [pc, #48]	; (2e24 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    2df4:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    2df8:	9000      	str	r0, [sp, #0]
    2dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2dfc:	f240 21ed 	movw	r1, #749	; 0x2ed
    2e00:	206c      	movs	r0, #108	; 0x6c
    2e02:	f000 fc31 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e06:	0000      	.short	0x0000
    2e08:	40008000 	.word	0x40008000
    2e0c:	40008140 	.word	0x40008140
    2e10:	2000001f 	.word	0x2000001f
    2e14:	4001f508 	.word	0x4001f508
    2e18:	2000001c 	.word	0x2000001c
    2e1c:	4000b000 	.word	0x4000b000
    2e20:	4000b504 	.word	0x4000b504
    2e24:	4000b140 	.word	0x4000b140

00002e28 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    2e28:	491e      	ldr	r1, [pc, #120]	; (2ea4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x7c>)
    2e2a:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    2e2e:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    2e32:	481d      	ldr	r0, [pc, #116]	; (2ea8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x80>)
    2e34:	4a1d      	ldr	r2, [pc, #116]	; (2eac <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x84>)
    2e36:	f890 c000 	ldrb.w	ip, [r0]
    2e3a:	2000      	movs	r0, #0
    2e3c:	f1bc 0f00 	cmp.w	ip, #0
    2e40:	d00a      	beq.n	2e58 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x30>
    2e42:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    2e46:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2e4a:	6010      	str	r0, [r2, #0]
    2e4c:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2e50:	f8d1 1148 	ldr.w	r1, [r1, #328]	; 0x148
    2e54:	b981      	cbnz	r1, 2e78 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x50>
    2e56:	e009      	b.n	2e6c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x44>
    2e58:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2e5c:	4b14      	ldr	r3, [pc, #80]	; (2eb0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x88>)
    2e5e:	6018      	str	r0, [r3, #0]
    2e60:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    2e64:	6010      	str	r0, [r2, #0]
    2e66:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2e6a:	e7f1      	b.n	2e50 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x28>
    2e6c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    2e70:	f44f 6100 	mov.w	r1, #2048	; 0x800
    2e74:	f8c2 1280 	str.w	r1, [r2, #640]	; 0x280
    2e78:	490e      	ldr	r1, [pc, #56]	; (2eb4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x8c>)
    2e7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2e7e:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    2e82:	4a0d      	ldr	r2, [pc, #52]	; (2eb8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x90>)
    2e84:	6010      	str	r0, [r2, #0]
    2e86:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    2e8a:	1d12      	adds	r2, r2, #4
    2e8c:	6010      	str	r0, [r2, #0]
    2e8e:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2e92:	1d12      	adds	r2, r2, #4
    2e94:	6010      	str	r0, [r2, #0]
    2e96:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    2e9a:	1d12      	adds	r2, r2, #4
    2e9c:	6010      	str	r0, [r2, #0]
    2e9e:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    2ea2:	4770      	bx	lr
    2ea4:	4000b000 	.word	0x4000b000
    2ea8:	2000001f 	.word	0x2000001f
    2eac:	4000b544 	.word	0x4000b544
    2eb0:	4000b540 	.word	0x4000b540
    2eb4:	40008000 	.word	0x40008000
    2eb8:	40008540 	.word	0x40008540

00002ebc <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>:
    2ebc:	4808      	ldr	r0, [pc, #32]	; (2ee0 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I+0x24>)
    2ebe:	f990 0002 	ldrsb.w	r0, [r0, #2]
    2ec2:	2800      	cmp	r0, #0
    2ec4:	bfb8      	it	lt
    2ec6:	4770      	bxlt	lr
    2ec8:	f000 011f 	and.w	r1, r0, #31
    2ecc:	2201      	movs	r2, #1
    2ece:	fa02 f101 	lsl.w	r1, r2, r1
    2ed2:	0940      	lsrs	r0, r0, #5
    2ed4:	0080      	lsls	r0, r0, #2
    2ed6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    2eda:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    2ede:	4770      	bx	lr
    2ee0:	2000001c 	.word	0x2000001c

00002ee4 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
    2ee4:	b510      	push	{r4, lr}
    2ee6:	2807      	cmp	r0, #7
    2ee8:	d20d      	bcs.n	2f06 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
    2eea:	e8df f000 	tbb	[pc, r0]
    2eee:	0404      	.short	0x0404
    2ef0:	06060404 	.word	0x06060404
    2ef4:	0006      	.short	0x0006
    2ef6:	4906      	ldr	r1, [pc, #24]	; (2f10 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
    2ef8:	e002      	b.n	2f00 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
    2efa:	1f00      	subs	r0, r0, #4
    2efc:	4905      	ldr	r1, [pc, #20]	; (2f14 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
    2efe:	b2c0      	uxtb	r0, r0
    2f00:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    2f04:	bd10      	pop	{r4, pc}
    2f06:	f44f 7126 	mov.w	r1, #664	; 0x298
    2f0a:	206c      	movs	r0, #108	; 0x6c
    2f0c:	f000 fbac 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2f10:	40008140 	.word	0x40008140
    2f14:	4000b140 	.word	0x4000b140

00002f18 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    2f18:	b570      	push	{r4, r5, r6, lr}
    2f1a:	4819      	ldr	r0, [pc, #100]	; (2f80 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x68>)
    2f1c:	2400      	movs	r4, #0
    2f1e:	2104      	movs	r1, #4
    2f20:	7004      	strb	r4, [r0, #0]
    2f22:	1ec0      	subs	r0, r0, #3
    2f24:	7001      	strb	r1, [r0, #0]
    2f26:	0589      	lsls	r1, r1, #22
    2f28:	60c1      	str	r1, [r0, #12]
    2f2a:	f7ff fc99 	bl	2860 <MPSL_IRQ_TIMER0_Handler+0xf8>
    2f2e:	2501      	movs	r5, #1
    2f30:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    2f34:	02eb      	lsls	r3, r5, #11
    2f36:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    2f3a:	f3bf 8f4f 	dsb	sy
    2f3e:	f3bf 8f6f 	isb	sy
    2f42:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    2f46:	4a0f      	ldr	r2, [pc, #60]	; (2f84 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x6c>)
    2f48:	6055      	str	r5, [r2, #4]
    2f4a:	6095      	str	r5, [r2, #8]
    2f4c:	480e      	ldr	r0, [pc, #56]	; (2f88 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x70>)
    2f4e:	6801      	ldr	r1, [r0, #0]
    2f50:	2900      	cmp	r1, #0
    2f52:	d1fc      	bne.n	2f4e <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x36>
    2f54:	1e48      	subs	r0, r1, #1
    2f56:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    2f5a:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    2f5e:	480b      	ldr	r0, [pc, #44]	; (2f8c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x74>)
    2f60:	6004      	str	r4, [r0, #0]
    2f62:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    2f66:	1d00      	adds	r0, r0, #4
    2f68:	6004      	str	r4, [r0, #0]
    2f6a:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    2f6e:	1d00      	adds	r0, r0, #4
    2f70:	6004      	str	r4, [r0, #0]
    2f72:	f8c2 4148 	str.w	r4, [r2, #328]	; 0x148
    2f76:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    2f7a:	6015      	str	r5, [r2, #0]
    2f7c:	bd70      	pop	{r4, r5, r6, pc}
    2f7e:	0000      	.short	0x0000
    2f80:	2000001f 	.word	0x2000001f
    2f84:	4000b000 	.word	0x4000b000
    2f88:	4000b504 	.word	0x4000b504
    2f8c:	4000b540 	.word	0x4000b540

00002f90 <MPSL_IRQ_CLOCK_Handler>:
    2f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2f94:	4c16      	ldr	r4, [pc, #88]	; (2ff0 <MPSL_IRQ_CLOCK_Handler+0x60>)
    2f96:	7a60      	ldrb	r0, [r4, #9]
    2f98:	2800      	cmp	r0, #0
    2f9a:	d027      	beq.n	2fec <MPSL_IRQ_CLOCK_Handler+0x5c>
    2f9c:	f44f 7180 	mov.w	r1, #256	; 0x100
    2fa0:	058d      	lsls	r5, r1, #22
    2fa2:	4628      	mov	r0, r5
    2fa4:	f008 faee 	bl	b584 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    2fa8:	4680      	mov	r8, r0
    2faa:	f44f 7182 	mov.w	r1, #260	; 0x104
    2fae:	4628      	mov	r0, r5
    2fb0:	f008 fae8 	bl	b584 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    2fb4:	2600      	movs	r6, #0
    2fb6:	4607      	mov	r7, r0
    2fb8:	f1b8 0f00 	cmp.w	r8, #0
    2fbc:	d009      	beq.n	2fd2 <MPSL_IRQ_CLOCK_Handler+0x42>
    2fbe:	2001      	movs	r0, #1
    2fc0:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    2fc4:	7920      	ldrb	r0, [r4, #4]
    2fc6:	b120      	cbz	r0, 2fd2 <MPSL_IRQ_CLOCK_Handler+0x42>
    2fc8:	7126      	strb	r6, [r4, #4]
    2fca:	69e0      	ldr	r0, [r4, #28]
    2fcc:	b108      	cbz	r0, 2fd2 <MPSL_IRQ_CLOCK_Handler+0x42>
    2fce:	4780      	blx	r0
    2fd0:	61e6      	str	r6, [r4, #28]
    2fd2:	b137      	cbz	r7, 2fe2 <MPSL_IRQ_CLOCK_Handler+0x52>
    2fd4:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    2fd8:	2002      	movs	r0, #2
    2fda:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    2fde:	f000 fa8b 	bl	34f8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    2fe2:	4640      	mov	r0, r8
    2fe4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2fe8:	f000 b85a 	b.w	30a0 <MPSL_IRQ_CLOCK_Handler+0x110>
    2fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2ff0:	2000002c 	.word	0x2000002c
    2ff4:	b510      	push	{r4, lr}
    2ff6:	f008 fb6f 	bl	b6d8 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    2ffa:	b930      	cbnz	r0, 300a <MPSL_IRQ_CLOCK_Handler+0x7a>
    2ffc:	f008 fb8d 	bl	b71a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3000:	b918      	cbnz	r0, 300a <MPSL_IRQ_CLOCK_Handler+0x7a>
    3002:	f008 fbc0 	bl	b786 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    3006:	2800      	cmp	r0, #0
    3008:	d002      	beq.n	3010 <MPSL_IRQ_CLOCK_Handler+0x80>
    300a:	4902      	ldr	r1, [pc, #8]	; (3014 <MPSL_IRQ_CLOCK_Handler+0x84>)
    300c:	2002      	movs	r0, #2
    300e:	6008      	str	r0, [r1, #0]
    3010:	bd10      	pop	{r4, pc}
    3012:	0000      	.short	0x0000
    3014:	40000c34 	.word	0x40000c34
    3018:	b570      	push	{r4, r5, r6, lr}
    301a:	f000 f987 	bl	332c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    301e:	f000 fabf 	bl	35a0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3022:	4c09      	ldr	r4, [pc, #36]	; (3048 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    3024:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    3028:	b130      	cbz	r0, 3038 <MPSL_IRQ_CLOCK_Handler+0xa8>
    302a:	f7ff ffe3 	bl	2ff4 <MPSL_IRQ_CLOCK_Handler+0x64>
    302e:	2001      	movs	r0, #1
    3030:	6128      	str	r0, [r5, #16]
    3032:	2004      	movs	r0, #4
    3034:	72a0      	strb	r0, [r4, #10]
    3036:	e004      	b.n	3042 <MPSL_IRQ_CLOCK_Handler+0xb2>
    3038:	2003      	movs	r0, #3
    303a:	72a0      	strb	r0, [r4, #10]
    303c:	2001      	movs	r0, #1
    303e:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3042:	2000      	movs	r0, #0
    3044:	71e0      	strb	r0, [r4, #7]
    3046:	bd70      	pop	{r4, r5, r6, pc}
    3048:	2000002c 	.word	0x2000002c
    304c:	b570      	push	{r4, r5, r6, lr}
    304e:	4c13      	ldr	r4, [pc, #76]	; (309c <MPSL_IRQ_CLOCK_Handler+0x10c>)
    3050:	79a0      	ldrb	r0, [r4, #6]
    3052:	b1f0      	cbz	r0, 3092 <MPSL_IRQ_CLOCK_Handler+0x102>
    3054:	2801      	cmp	r0, #1
    3056:	d003      	beq.n	3060 <MPSL_IRQ_CLOCK_Handler+0xd0>
    3058:	79e1      	ldrb	r1, [r4, #7]
    305a:	1e40      	subs	r0, r0, #1
    305c:	4281      	cmp	r1, r0
    305e:	da18      	bge.n	3092 <MPSL_IRQ_CLOCK_Handler+0x102>
    3060:	f000 fa9e 	bl	35a0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3064:	4605      	mov	r5, r0
    3066:	f000 fb6f 	bl	3748 <mpsl_temperature_get>
    306a:	79a1      	ldrb	r1, [r4, #6]
    306c:	2901      	cmp	r1, #1
    306e:	d902      	bls.n	3076 <MPSL_IRQ_CLOCK_Handler+0xe6>
    3070:	79e1      	ldrb	r1, [r4, #7]
    3072:	1c49      	adds	r1, r1, #1
    3074:	71e1      	strb	r1, [r4, #7]
    3076:	b10d      	cbz	r5, 307c <MPSL_IRQ_CLOCK_Handler+0xec>
    3078:	6961      	ldr	r1, [r4, #20]
    307a:	e000      	b.n	307e <MPSL_IRQ_CLOCK_Handler+0xee>
    307c:	6921      	ldr	r1, [r4, #16]
    307e:	1a41      	subs	r1, r0, r1
    3080:	2902      	cmp	r1, #2
    3082:	da02      	bge.n	308a <MPSL_IRQ_CLOCK_Handler+0xfa>
    3084:	f111 0f02 	cmn.w	r1, #2
    3088:	dc07      	bgt.n	309a <MPSL_IRQ_CLOCK_Handler+0x10a>
    308a:	b10d      	cbz	r5, 3090 <MPSL_IRQ_CLOCK_Handler+0x100>
    308c:	6160      	str	r0, [r4, #20]
    308e:	e000      	b.n	3092 <MPSL_IRQ_CLOCK_Handler+0x102>
    3090:	6120      	str	r0, [r4, #16]
    3092:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3096:	f7ff bfbf 	b.w	3018 <MPSL_IRQ_CLOCK_Handler+0x88>
    309a:	bd70      	pop	{r4, r5, r6, pc}
    309c:	2000002c 	.word	0x2000002c
    30a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    30a4:	4606      	mov	r6, r0
    30a6:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    30aa:	f44f 7186 	mov.w	r1, #268	; 0x10c
    30ae:	4628      	mov	r0, r5
    30b0:	f008 fa68 	bl	b584 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    30b4:	4680      	mov	r8, r0
    30b6:	f44f 7188 	mov.w	r1, #272	; 0x110
    30ba:	4628      	mov	r0, r5
    30bc:	f008 fa62 	bl	b584 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    30c0:	4c27      	ldr	r4, [pc, #156]	; (3160 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    30c2:	4682      	mov	sl, r0
    30c4:	7827      	ldrb	r7, [r4, #0]
    30c6:	f104 0008 	add.w	r0, r4, #8
    30ca:	f008 facf 	bl	b66c <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    30ce:	b110      	cbz	r0, 30d6 <MPSL_IRQ_CLOCK_Handler+0x146>
    30d0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    30d4:	e016      	b.n	3104 <MPSL_IRQ_CLOCK_Handler+0x174>
    30d6:	f04f 0901 	mov.w	r9, #1
    30da:	b146      	cbz	r6, 30ee <MPSL_IRQ_CLOCK_Handler+0x15e>
    30dc:	7aa0      	ldrb	r0, [r4, #10]
    30de:	2803      	cmp	r0, #3
    30e0:	d105      	bne.n	30ee <MPSL_IRQ_CLOCK_Handler+0x15e>
    30e2:	2004      	movs	r0, #4
    30e4:	72a0      	strb	r0, [r4, #10]
    30e6:	f7ff ff85 	bl	2ff4 <MPSL_IRQ_CLOCK_Handler+0x64>
    30ea:	f8c5 9010 	str.w	r9, [r5, #16]
    30ee:	2600      	movs	r6, #0
    30f0:	f1b8 0f00 	cmp.w	r8, #0
    30f4:	d018      	beq.n	3128 <MPSL_IRQ_CLOCK_Handler+0x198>
    30f6:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    30fa:	7aa0      	ldrb	r0, [r4, #10]
    30fc:	2804      	cmp	r0, #4
    30fe:	d004      	beq.n	310a <MPSL_IRQ_CLOCK_Handler+0x17a>
    3100:	f44f 71de 	mov.w	r1, #444	; 0x1bc
    3104:	206d      	movs	r0, #109	; 0x6d
    3106:	f000 faaf 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    310a:	f008 fae5 	bl	b6d8 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    310e:	b928      	cbnz	r0, 311c <MPSL_IRQ_CLOCK_Handler+0x18c>
    3110:	f008 fb03 	bl	b71a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3114:	b910      	cbnz	r0, 311c <MPSL_IRQ_CLOCK_Handler+0x18c>
    3116:	f008 fb36 	bl	b786 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    311a:	b108      	cbz	r0, 3120 <MPSL_IRQ_CLOCK_Handler+0x190>
    311c:	4811      	ldr	r0, [pc, #68]	; (3164 <MPSL_IRQ_CLOCK_Handler+0x1d4>)
    311e:	6006      	str	r6, [r0, #0]
    3120:	2002      	movs	r0, #2
    3122:	72a0      	strb	r0, [r4, #10]
    3124:	f000 f8e6 	bl	32f4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3128:	f1ba 0f00 	cmp.w	sl, #0
    312c:	d008      	beq.n	3140 <MPSL_IRQ_CLOCK_Handler+0x1b0>
    312e:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    3132:	7aa0      	ldrb	r0, [r4, #10]
    3134:	2802      	cmp	r0, #2
    3136:	d101      	bne.n	313c <MPSL_IRQ_CLOCK_Handler+0x1ac>
    3138:	f7ff ff88 	bl	304c <MPSL_IRQ_CLOCK_Handler+0xbc>
    313c:	f8c5 9014 	str.w	r9, [r5, #20]
    3140:	b13f      	cbz	r7, 3152 <MPSL_IRQ_CLOCK_Handler+0x1c2>
    3142:	7026      	strb	r6, [r4, #0]
    3144:	7aa0      	ldrb	r0, [r4, #10]
    3146:	2802      	cmp	r0, #2
    3148:	d101      	bne.n	314e <MPSL_IRQ_CLOCK_Handler+0x1be>
    314a:	f7ff ff65 	bl	3018 <MPSL_IRQ_CLOCK_Handler+0x88>
    314e:	f000 f8d1 	bl	32f4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3152:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3156:	4802      	ldr	r0, [pc, #8]	; (3160 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    3158:	3008      	adds	r0, #8
    315a:	f008 ba9e 	b.w	b69a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    315e:	0000      	.short	0x0000
    3160:	2000002c 	.word	0x2000002c
    3164:	40000c34 	.word	0x40000c34
    3168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    316c:	4c5c      	ldr	r4, [pc, #368]	; (32e0 <MPSL_IRQ_CLOCK_Handler+0x350>)
    316e:	f04f 0800 	mov.w	r8, #0
    3172:	4606      	mov	r6, r0
    3174:	f8c4 8018 	str.w	r8, [r4, #24]
    3178:	7843      	ldrb	r3, [r0, #1]
    317a:	7882      	ldrb	r2, [r0, #2]
    317c:	7800      	ldrb	r0, [r0, #0]
    317e:	72e0      	strb	r0, [r4, #11]
    3180:	7163      	strb	r3, [r4, #5]
    3182:	2701      	movs	r7, #1
    3184:	71a2      	strb	r2, [r4, #6]
    3186:	07bd      	lsls	r5, r7, #30
    3188:	f884 8007 	strb.w	r8, [r4, #7]
    318c:	2805      	cmp	r0, #5
    318e:	d224      	bcs.n	31da <MPSL_IRQ_CLOCK_Handler+0x24a>
    3190:	e8df f000 	tbb	[pc, r0]
    3194:	1f05030f 	.word	0x1f05030f
    3198:	0021      	.short	0x0021
    319a:	61a7      	str	r7, [r4, #24]
    319c:	e009      	b.n	31b2 <MPSL_IRQ_CLOCK_Handler+0x222>
    319e:	f000 f8c5 	bl	332c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    31a2:	2101      	movs	r1, #1
    31a4:	4628      	mov	r0, r5
    31a6:	f008 f9f2 	bl	b58e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    31aa:	2800      	cmp	r0, #0
    31ac:	d0f9      	beq.n	31a2 <MPSL_IRQ_CLOCK_Handler+0x212>
    31ae:	2002      	movs	r0, #2
    31b0:	61a0      	str	r0, [r4, #24]
    31b2:	f008 fa18 	bl	b5e6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    31b6:	b1b0      	cbz	r0, 31e6 <MPSL_IRQ_CLOCK_Handler+0x256>
    31b8:	f000 fa0c 	bl	35d4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    31bc:	7e21      	ldrb	r1, [r4, #24]
    31be:	f001 0103 	and.w	r1, r1, #3
    31c2:	4288      	cmp	r0, r1
    31c4:	d10f      	bne.n	31e6 <MPSL_IRQ_CLOCK_Handler+0x256>
    31c6:	79b0      	ldrb	r0, [r6, #6]
    31c8:	b150      	cbz	r0, 31e0 <MPSL_IRQ_CLOCK_Handler+0x250>
    31ca:	2002      	movs	r0, #2
    31cc:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    31d0:	e06a      	b.n	32a8 <MPSL_IRQ_CLOCK_Handler+0x318>
    31d2:	4844      	ldr	r0, [pc, #272]	; (32e4 <MPSL_IRQ_CLOCK_Handler+0x354>)
    31d4:	e7ec      	b.n	31b0 <MPSL_IRQ_CLOCK_Handler+0x220>
    31d6:	4844      	ldr	r0, [pc, #272]	; (32e8 <MPSL_IRQ_CLOCK_Handler+0x358>)
    31d8:	e7ea      	b.n	31b0 <MPSL_IRQ_CLOCK_Handler+0x220>
    31da:	f44f 714c 	mov.w	r1, #816	; 0x330
    31de:	e049      	b.n	3274 <MPSL_IRQ_CLOCK_Handler+0x2e4>
    31e0:	f000 f9cc 	bl	357c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    31e4:	e060      	b.n	32a8 <MPSL_IRQ_CLOCK_Handler+0x318>
    31e6:	60ef      	str	r7, [r5, #12]
    31e8:	f44f 7a82 	mov.w	sl, #260	; 0x104
    31ec:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    31f0:	69a0      	ldr	r0, [r4, #24]
    31f2:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    31f6:	f008 fa5b 	bl	b6b0 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    31fa:	b940      	cbnz	r0, 320e <MPSL_IRQ_CLOCK_Handler+0x27e>
    31fc:	f008 fa62 	bl	b6c4 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3200:	b928      	cbnz	r0, 320e <MPSL_IRQ_CLOCK_Handler+0x27e>
    3202:	f008 fa76 	bl	b6f2 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    3206:	b910      	cbnz	r0, 320e <MPSL_IRQ_CLOCK_Handler+0x27e>
    3208:	f008 fa87 	bl	b71a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    320c:	b138      	cbz	r0, 321e <MPSL_IRQ_CLOCK_Handler+0x28e>
    320e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    3212:	4836      	ldr	r0, [pc, #216]	; (32ec <MPSL_IRQ_CLOCK_Handler+0x35c>)
    3214:	f8d1 1244 	ldr.w	r1, [r1, #580]	; 0x244
    3218:	f3c1 3142 	ubfx	r1, r1, #13, #3
    321c:	6001      	str	r1, [r0, #0]
    321e:	f008 fa47 	bl	b6b0 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    3222:	b940      	cbnz	r0, 3236 <MPSL_IRQ_CLOCK_Handler+0x2a6>
    3224:	f008 fa4e 	bl	b6c4 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3228:	b928      	cbnz	r0, 3236 <MPSL_IRQ_CLOCK_Handler+0x2a6>
    322a:	f008 fa62 	bl	b6f2 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    322e:	b910      	cbnz	r0, 3236 <MPSL_IRQ_CLOCK_Handler+0x2a6>
    3230:	f008 fa73 	bl	b71a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3234:	b110      	cbz	r0, 323c <MPSL_IRQ_CLOCK_Handler+0x2ac>
    3236:	482d      	ldr	r0, [pc, #180]	; (32ec <MPSL_IRQ_CLOCK_Handler+0x35c>)
    3238:	3010      	adds	r0, #16
    323a:	6007      	str	r7, [r0, #0]
    323c:	60af      	str	r7, [r5, #8]
    323e:	2002      	movs	r0, #2
    3240:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3244:	79b0      	ldrb	r0, [r6, #6]
    3246:	bb78      	cbnz	r0, 32a8 <MPSL_IRQ_CLOCK_Handler+0x318>
    3248:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    324c:	f010 0f02 	tst.w	r0, #2
    3250:	d00e      	beq.n	3270 <MPSL_IRQ_CLOCK_Handler+0x2e0>
    3252:	f8df 909c 	ldr.w	r9, [pc, #156]	; 32f0 <MPSL_IRQ_CLOCK_Handler+0x360>
    3256:	f8d9 1000 	ldr.w	r1, [r9]
    325a:	43c9      	mvns	r1, r1
    325c:	f341 1700 	sbfx	r7, r1, #4, #1
    3260:	f8d9 1000 	ldr.w	r1, [r9]
    3264:	f041 0110 	orr.w	r1, r1, #16
    3268:	f8c9 1000 	str.w	r1, [r9]
    326c:	1c7f      	adds	r7, r7, #1
    326e:	e007      	b.n	3280 <MPSL_IRQ_CLOCK_Handler+0x2f0>
    3270:	f240 21f1 	movw	r1, #753	; 0x2f1
    3274:	206d      	movs	r0, #109	; 0x6d
    3276:	f000 f9f7 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    327a:	bf00      	nop
    327c:	f000 fb1a 	bl	38b4 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    3280:	4651      	mov	r1, sl
    3282:	4628      	mov	r0, r5
    3284:	f008 f97e 	bl	b584 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3288:	2800      	cmp	r0, #0
    328a:	d0f7      	beq.n	327c <MPSL_IRQ_CLOCK_Handler+0x2ec>
    328c:	f000 f976 	bl	357c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    3290:	b92f      	cbnz	r7, 329e <MPSL_IRQ_CLOCK_Handler+0x30e>
    3292:	f8d9 1000 	ldr.w	r1, [r9]
    3296:	f021 0110 	bic.w	r1, r1, #16
    329a:	f8c9 1000 	str.w	r1, [r9]
    329e:	2002      	movs	r0, #2
    32a0:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    32a4:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    32a8:	79a0      	ldrb	r0, [r4, #6]
    32aa:	b170      	cbz	r0, 32ca <MPSL_IRQ_CLOCK_Handler+0x33a>
    32ac:	7830      	ldrb	r0, [r6, #0]
    32ae:	b960      	cbnz	r0, 32ca <MPSL_IRQ_CLOCK_Handler+0x33a>
    32b0:	f000 f976 	bl	35a0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    32b4:	4606      	mov	r6, r0
    32b6:	f000 fa47 	bl	3748 <mpsl_temperature_get>
    32ba:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    32be:	b116      	cbz	r6, 32c6 <MPSL_IRQ_CLOCK_Handler+0x336>
    32c0:	e9c4 2004 	strd	r2, r0, [r4, #16]
    32c4:	e001      	b.n	32ca <MPSL_IRQ_CLOCK_Handler+0x33a>
    32c6:	e9c4 0204 	strd	r0, r2, [r4, #16]
    32ca:	2101      	movs	r1, #1
    32cc:	4628      	mov	r0, r5
    32ce:	f008 f95e 	bl	b58e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    32d2:	b108      	cbz	r0, 32d8 <MPSL_IRQ_CLOCK_Handler+0x348>
    32d4:	f000 f95e 	bl	3594 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    32d8:	f884 800a 	strb.w	r8, [r4, #10]
    32dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    32e0:	2000002c 	.word	0x2000002c
    32e4:	00020001 	.word	0x00020001
    32e8:	00030001 	.word	0x00030001
    32ec:	4000053c 	.word	0x4000053c
    32f0:	e000ed10 	.word	0xe000ed10

000032f4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    32f4:	b510      	push	{r4, lr}
    32f6:	f3ef 8410 	mrs	r4, PRIMASK
    32fa:	b672      	cpsid	i
    32fc:	480a      	ldr	r0, [pc, #40]	; (3328 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    32fe:	7841      	ldrb	r1, [r0, #1]
    3300:	b129      	cbz	r1, 330e <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    3302:	7841      	ldrb	r1, [r0, #1]
    3304:	1e49      	subs	r1, r1, #1
    3306:	7041      	strb	r1, [r0, #1]
    3308:	7841      	ldrb	r1, [r0, #1]
    330a:	b129      	cbz	r1, 3318 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    330c:	e008      	b.n	3320 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    330e:	f240 110d 	movw	r1, #269	; 0x10d
    3312:	206d      	movs	r0, #109	; 0x6d
    3314:	f000 f9a8 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3318:	7880      	ldrb	r0, [r0, #2]
    331a:	b908      	cbnz	r0, 3320 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    331c:	f000 f94e 	bl	35bc <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    3320:	2c00      	cmp	r4, #0
    3322:	d100      	bne.n	3326 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    3324:	b662      	cpsie	i
    3326:	bd10      	pop	{r4, pc}
    3328:	2000002c 	.word	0x2000002c

0000332c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    332c:	b510      	push	{r4, lr}
    332e:	f3ef 8410 	mrs	r4, PRIMASK
    3332:	b672      	cpsid	i
    3334:	4806      	ldr	r0, [pc, #24]	; (3350 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    3336:	7841      	ldrb	r1, [r0, #1]
    3338:	1c49      	adds	r1, r1, #1
    333a:	7041      	strb	r1, [r0, #1]
    333c:	7840      	ldrb	r0, [r0, #1]
    333e:	2801      	cmp	r0, #1
    3340:	d101      	bne.n	3346 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    3342:	f008 f93b 	bl	b5bc <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    3346:	2c00      	cmp	r4, #0
    3348:	d100      	bne.n	334c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    334a:	b662      	cpsie	i
    334c:	bd10      	pop	{r4, pc}
    334e:	0000      	.short	0x0000
    3350:	2000002c 	.word	0x2000002c

00003354 <mpsl_clock_hfclk_release>:
    3354:	4805      	ldr	r0, [pc, #20]	; (336c <mpsl_clock_hfclk_release+0x18>)
    3356:	b510      	push	{r4, lr}
    3358:	78c1      	ldrb	r1, [r0, #3]
    335a:	b121      	cbz	r1, 3366 <mpsl_clock_hfclk_release+0x12>
    335c:	2100      	movs	r1, #0
    335e:	7101      	strb	r1, [r0, #4]
    3360:	70c1      	strb	r1, [r0, #3]
    3362:	f7ff ffc7 	bl	32f4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3366:	2000      	movs	r0, #0
    3368:	bd10      	pop	{r4, pc}
    336a:	0000      	.short	0x0000
    336c:	2000002c 	.word	0x2000002c

00003370 <mpsl_clock_hfclk_request>:
    3370:	b570      	push	{r4, r5, r6, lr}
    3372:	4c0c      	ldr	r4, [pc, #48]	; (33a4 <mpsl_clock_hfclk_request+0x34>)
    3374:	78e1      	ldrb	r1, [r4, #3]
    3376:	b961      	cbnz	r1, 3392 <mpsl_clock_hfclk_request+0x22>
    3378:	2501      	movs	r5, #1
    337a:	70e5      	strb	r5, [r4, #3]
    337c:	61e0      	str	r0, [r4, #28]
    337e:	f7ff ffd5 	bl	332c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3382:	f000 f90d 	bl	35a0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3386:	b130      	cbz	r0, 3396 <mpsl_clock_hfclk_request+0x26>
    3388:	69e0      	ldr	r0, [r4, #28]
    338a:	b110      	cbz	r0, 3392 <mpsl_clock_hfclk_request+0x22>
    338c:	4780      	blx	r0
    338e:	2000      	movs	r0, #0
    3390:	61e0      	str	r0, [r4, #28]
    3392:	2000      	movs	r0, #0
    3394:	bd70      	pop	{r4, r5, r6, pc}
    3396:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    339a:	7125      	strb	r5, [r4, #4]
    339c:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    33a0:	e7f7      	b.n	3392 <mpsl_clock_hfclk_request+0x22>
    33a2:	0000      	.short	0x0000
    33a4:	2000002c 	.word	0x2000002c

000033a8 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>:
    33a8:	f3ef 8010 	mrs	r0, PRIMASK
    33ac:	b672      	cpsid	i
    33ae:	4904      	ldr	r1, [pc, #16]	; (33c0 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x18>)
    33b0:	788a      	ldrb	r2, [r1, #2]
    33b2:	1c52      	adds	r2, r2, #1
    33b4:	708a      	strb	r2, [r1, #2]
    33b6:	2800      	cmp	r0, #0
    33b8:	d100      	bne.n	33bc <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x14>
    33ba:	b662      	cpsie	i
    33bc:	4770      	bx	lr
    33be:	0000      	.short	0x0000
    33c0:	2000002c 	.word	0x2000002c

000033c4 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>:
    33c4:	b510      	push	{r4, lr}
    33c6:	f3ef 8410 	mrs	r4, PRIMASK
    33ca:	b672      	cpsid	i
    33cc:	480a      	ldr	r0, [pc, #40]	; (33f8 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x34>)
    33ce:	7881      	ldrb	r1, [r0, #2]
    33d0:	b129      	cbz	r1, 33de <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x1a>
    33d2:	7881      	ldrb	r1, [r0, #2]
    33d4:	1e49      	subs	r1, r1, #1
    33d6:	7081      	strb	r1, [r0, #2]
    33d8:	7841      	ldrb	r1, [r0, #1]
    33da:	b129      	cbz	r1, 33e8 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x24>
    33dc:	e008      	b.n	33f0 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    33de:	f240 1125 	movw	r1, #293	; 0x125
    33e2:	206d      	movs	r0, #109	; 0x6d
    33e4:	f000 f940 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    33e8:	7880      	ldrb	r0, [r0, #2]
    33ea:	b908      	cbnz	r0, 33f0 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    33ec:	f000 f8e6 	bl	35bc <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    33f0:	2c00      	cmp	r4, #0
    33f2:	d100      	bne.n	33f6 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x32>
    33f4:	b662      	cpsie	i
    33f6:	bd10      	pop	{r4, pc}
    33f8:	2000002c 	.word	0x2000002c

000033fc <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    33fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3400:	0004      	movs	r4, r0
    3402:	f06f 0015 	mvn.w	r0, #21
    3406:	d03c      	beq.n	3482 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3408:	7821      	ldrb	r1, [r4, #0]
    340a:	2904      	cmp	r1, #4
    340c:	d839      	bhi.n	3482 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    340e:	2900      	cmp	r1, #0
    3410:	7861      	ldrb	r1, [r4, #1]
    3412:	d038      	beq.n	3486 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8a>
    3414:	2900      	cmp	r1, #0
    3416:	d134      	bne.n	3482 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3418:	78a1      	ldrb	r1, [r4, #2]
    341a:	2900      	cmp	r1, #0
    341c:	d131      	bne.n	3482 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    341e:	2000      	movs	r0, #0
    3420:	f008 f87b 	bl	b51a <MPSL_IRQ_RADIO_Handler+0x1e>
    3424:	2000      	movs	r0, #0
    3426:	f008 f86b 	bl	b500 <MPSL_IRQ_RADIO_Handler+0x4>
    342a:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    342e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3432:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    3436:	2600      	movs	r6, #0
    3438:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    343c:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    3440:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    3444:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    3448:	4f14      	ldr	r7, [pc, #80]	; (349c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    344a:	707e      	strb	r6, [r7, #1]
    344c:	88a0      	ldrh	r0, [r4, #4]
    344e:	81b8      	strh	r0, [r7, #12]
    3450:	f008 f8ab 	bl	b5aa <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    3454:	2501      	movs	r5, #1
    3456:	b108      	cbz	r0, 345c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    3458:	70fd      	strb	r5, [r7, #3]
    345a:	707d      	strb	r5, [r7, #1]
    345c:	2101      	movs	r1, #1
    345e:	4640      	mov	r0, r8
    3460:	f008 f895 	bl	b58e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3464:	b108      	cbz	r0, 346a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    3466:	f000 f895 	bl	3594 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    346a:	4620      	mov	r0, r4
    346c:	f7ff fe7c 	bl	3168 <MPSL_IRQ_CLOCK_Handler+0x1d8>
    3470:	727d      	strb	r5, [r7, #9]
    3472:	2000      	movs	r0, #0
    3474:	f008 f844 	bl	b500 <MPSL_IRQ_RADIO_Handler+0x4>
    3478:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    347c:	4630      	mov	r0, r6
    347e:	f8c1 5100 	str.w	r5, [r1, #256]	; 0x100
    3482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3486:	2900      	cmp	r1, #0
    3488:	d0fb      	beq.n	3482 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    348a:	2920      	cmp	r1, #32
    348c:	d8f9      	bhi.n	3482 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    348e:	78a1      	ldrb	r1, [r4, #2]
    3490:	2921      	cmp	r1, #33	; 0x21
    3492:	d8f6      	bhi.n	3482 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3494:	2901      	cmp	r1, #1
    3496:	d1c2      	bne.n	341e <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    3498:	e7f3      	b.n	3482 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    349a:	0000      	.short	0x0000
    349c:	2000002c 	.word	0x2000002c

000034a0 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    34a0:	4801      	ldr	r0, [pc, #4]	; (34a8 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    34a2:	8980      	ldrh	r0, [r0, #12]
    34a4:	4770      	bx	lr
    34a6:	0000      	.short	0x0000
    34a8:	2000002c 	.word	0x2000002c

000034ac <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>:
    34ac:	b510      	push	{r4, lr}
    34ae:	480d      	ldr	r0, [pc, #52]	; (34e4 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    34b0:	f008 f8dc 	bl	b66c <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    34b4:	490b      	ldr	r1, [pc, #44]	; (34e4 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    34b6:	3908      	subs	r1, #8
    34b8:	b148      	cbz	r0, 34ce <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x22>
    34ba:	2001      	movs	r0, #1
    34bc:	7008      	strb	r0, [r1, #0]
    34be:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    34c2:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    34c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    34ca:	f7ff bf2f 	b.w	332c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    34ce:	7a88      	ldrb	r0, [r1, #10]
    34d0:	2802      	cmp	r0, #2
    34d2:	d101      	bne.n	34d8 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x2c>
    34d4:	f7ff fda0 	bl	3018 <MPSL_IRQ_CLOCK_Handler+0x88>
    34d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    34dc:	4801      	ldr	r0, [pc, #4]	; (34e4 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    34de:	f008 b8dc 	b.w	b69a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    34e2:	0000      	.short	0x0000
    34e4:	20000034 	.word	0x20000034

000034e8 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    34e8:	4802      	ldr	r0, [pc, #8]	; (34f4 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    34ea:	7a80      	ldrb	r0, [r0, #10]
    34ec:	2800      	cmp	r0, #0
    34ee:	d000      	beq.n	34f2 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    34f0:	2001      	movs	r0, #1
    34f2:	4770      	bx	lr
    34f4:	2000002c 	.word	0x2000002c

000034f8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    34f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    34fa:	4d1f      	ldr	r5, [pc, #124]	; (3578 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    34fc:	7ae8      	ldrb	r0, [r5, #11]
    34fe:	2800      	cmp	r0, #0
    3500:	d10f      	bne.n	3522 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3502:	7e28      	ldrb	r0, [r5, #24]
    3504:	f000 0003 	and.w	r0, r0, #3
    3508:	f008 f85d 	bl	b5c6 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    350c:	2800      	cmp	r0, #0
    350e:	d008      	beq.n	3522 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3510:	f3ef 8110 	mrs	r1, PRIMASK
    3514:	b672      	cpsid	i
    3516:	f7ff ffe7 	bl	34e8 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    351a:	b118      	cbz	r0, 3524 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    351c:	2900      	cmp	r1, #0
    351e:	d100      	bne.n	3522 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3520:	b662      	cpsie	i
    3522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3524:	2601      	movs	r6, #1
    3526:	72ae      	strb	r6, [r5, #10]
    3528:	b901      	cbnz	r1, 352c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    352a:	b662      	cpsie	i
    352c:	2018      	movs	r0, #24
    352e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    3532:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    3536:	61a6      	str	r6, [r4, #24]
    3538:	f44f 7020 	mov.w	r0, #640	; 0x280
    353c:	f8ad 0000 	strh.w	r0, [sp]
    3540:	f8bd 0000 	ldrh.w	r0, [sp]
    3544:	1e41      	subs	r1, r0, #1
    3546:	f8ad 1000 	strh.w	r1, [sp]
    354a:	d2f9      	bcs.n	3540 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    354c:	2700      	movs	r7, #0
    354e:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    3552:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    3556:	4808      	ldr	r0, [pc, #32]	; (3578 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    3558:	3008      	adds	r0, #8
    355a:	f008 f89a 	bl	b692 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    355e:	702f      	strb	r7, [r5, #0]
    3560:	f7ff fd5a 	bl	3018 <MPSL_IRQ_CLOCK_Handler+0x88>
    3564:	6166      	str	r6, [r4, #20]
    3566:	7968      	ldrb	r0, [r5, #5]
    3568:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    356c:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    3570:	2018      	movs	r0, #24
    3572:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    3576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3578:	2000002c 	.word	0x2000002c

0000357c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    357c:	b510      	push	{r4, lr}
    357e:	4c04      	ldr	r4, [pc, #16]	; (3590 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    3580:	7e20      	ldrb	r0, [r4, #24]
    3582:	f000 0003 	and.w	r0, r0, #3
    3586:	f008 f81e 	bl	b5c6 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    358a:	2800      	cmp	r0, #0
    358c:	d0f8      	beq.n	3580 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    358e:	bd10      	pop	{r4, pc}
    3590:	2000002c 	.word	0x2000002c

00003594 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    3594:	4901      	ldr	r1, [pc, #4]	; (359c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    3596:	2001      	movs	r0, #1
    3598:	7008      	strb	r0, [r1, #0]
    359a:	4770      	bx	lr
    359c:	20000298 	.word	0x20000298

000035a0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    35a0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    35a4:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    35a8:	b918      	cbnz	r0, 35b2 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    35aa:	4803      	ldr	r0, [pc, #12]	; (35b8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    35ac:	7800      	ldrb	r0, [r0, #0]
    35ae:	2800      	cmp	r0, #0
    35b0:	d000      	beq.n	35b4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    35b2:	2001      	movs	r0, #1
    35b4:	4770      	bx	lr
    35b6:	0000      	.short	0x0000
    35b8:	20000298 	.word	0x20000298

000035bc <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    35bc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    35c0:	2101      	movs	r1, #1
    35c2:	6041      	str	r1, [r0, #4]
    35c4:	2100      	movs	r1, #0
    35c6:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    35ca:	4801      	ldr	r0, [pc, #4]	; (35d0 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    35cc:	7001      	strb	r1, [r0, #0]
    35ce:	4770      	bx	lr
    35d0:	20000298 	.word	0x20000298

000035d4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    35d4:	4802      	ldr	r0, [pc, #8]	; (35e0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    35d6:	6800      	ldr	r0, [r0, #0]
    35d8:	f000 0003 	and.w	r0, r0, #3
    35dc:	4770      	bx	lr
    35de:	0000      	.short	0x0000
    35e0:	4000041c 	.word	0x4000041c
    35e4:	b510      	push	{r4, lr}
    35e6:	b131      	cbz	r1, 35f6 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    35e8:	2901      	cmp	r1, #1
    35ea:	d007      	beq.n	35fc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    35ec:	f44f 7142 	mov.w	r1, #776	; 0x308
    35f0:	a005      	add	r0, pc, #20	; (adr r0, 3608 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    35f2:	f000 f80f 	bl	3614 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    35f6:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    35fa:	e001      	b.n	3600 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    35fc:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    3600:	f000 0001 	and.w	r0, r0, #1
    3604:	bd10      	pop	{r4, pc}
    3606:	0000      	.short	0x0000
    3608:	5f66726e 	.word	0x5f66726e
    360c:	636f6c63 	.word	0x636f6c63
    3610:	00682e6b 	.word	0x00682e6b

00003614 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    3614:	4a02      	ldr	r2, [pc, #8]	; (3620 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xc>)
    3616:	6852      	ldr	r2, [r2, #4]
    3618:	b102      	cbz	r2, 361c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x8>
    361a:	4710      	bx	r2
    361c:	e7fe      	b.n	361c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x8>
    361e:	0000      	.short	0x0000
    3620:	2000004c 	.word	0x2000004c
    3624:	4806      	ldr	r0, [pc, #24]	; (3640 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x2c>)
    3626:	b510      	push	{r4, lr}
    3628:	2100      	movs	r1, #0
    362a:	6001      	str	r1, [r0, #0]
    362c:	2101      	movs	r1, #1
    362e:	6001      	str	r1, [r0, #0]
    3630:	4608      	mov	r0, r1
    3632:	f007 ffef 	bl	b614 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    3636:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    363a:	2001      	movs	r0, #1
    363c:	f007 bfdd 	b.w	b5fa <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    3640:	40001ffc 	.word	0x40001ffc
    3644:	4807      	ldr	r0, [pc, #28]	; (3664 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x50>)
    3646:	b510      	push	{r4, lr}
    3648:	2101      	movs	r1, #1
    364a:	6041      	str	r1, [r0, #4]
    364c:	1e89      	subs	r1, r1, #2
    364e:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    3652:	200c      	movs	r0, #12
    3654:	f007 ffde 	bl	b614 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    3658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    365c:	200c      	movs	r0, #12
    365e:	f007 bfcc 	b.w	b5fa <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    3662:	0000      	.short	0x0000
    3664:	4000c000 	.word	0x4000c000

00003668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    3668:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    366a:	4a10      	ldr	r2, [pc, #64]	; (36ac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    366c:	6855      	ldr	r5, [r2, #4]
    366e:	b1e5      	cbz	r5, 36aa <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x42>
    3670:	2200      	movs	r2, #0
    3672:	4603      	mov	r3, r0
    3674:	466e      	mov	r6, sp
    3676:	240a      	movs	r4, #10
    3678:	e003      	b.n	3682 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1a>
    367a:	fbb0 f0f4 	udiv	r0, r0, r4
    367e:	1c52      	adds	r2, r2, #1
    3680:	b2d2      	uxtb	r2, r2
    3682:	2800      	cmp	r0, #0
    3684:	d1f9      	bne.n	367a <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x12>
    3686:	54b0      	strb	r0, [r6, r2]
    3688:	e00a      	b.n	36a0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    368a:	bf00      	nop
    368c:	fbb3 f0f4 	udiv	r0, r3, r4
    3690:	fb04 3010 	mls	r0, r4, r0, r3
    3694:	fbb3 f3f4 	udiv	r3, r3, r4
    3698:	1e52      	subs	r2, r2, #1
    369a:	b2d2      	uxtb	r2, r2
    369c:	3030      	adds	r0, #48	; 0x30
    369e:	54b0      	strb	r0, [r6, r2]
    36a0:	2a00      	cmp	r2, #0
    36a2:	d1f3      	bne.n	368c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    36a4:	4630      	mov	r0, r6
    36a6:	47a8      	blx	r5
    36a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    36aa:	e7fe      	b.n	36aa <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x42>
    36ac:	2000004c 	.word	0x2000004c

000036b0 <mpsl_init>:
    36b0:	b570      	push	{r4, r5, r6, lr}
    36b2:	4c17      	ldr	r4, [pc, #92]	; (3710 <mpsl_init+0x60>)
    36b4:	4606      	mov	r6, r0
    36b6:	460d      	mov	r5, r1
    36b8:	7860      	ldrb	r0, [r4, #1]
    36ba:	b110      	cbz	r0, 36c2 <mpsl_init+0x12>
    36bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    36c0:	bd70      	pop	{r4, r5, r6, pc}
    36c2:	b906      	cbnz	r6, 36c6 <mpsl_init+0x16>
    36c4:	4e13      	ldr	r6, [pc, #76]	; (3714 <mpsl_init+0x64>)
    36c6:	6062      	str	r2, [r4, #4]
    36c8:	7025      	strb	r5, [r4, #0]
    36ca:	f7ff ffab 	bl	3624 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>
    36ce:	f7ff ffb9 	bl	3644 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>
    36d2:	4630      	mov	r0, r6
    36d4:	f7ff fe92 	bl	33fc <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    36d8:	0006      	movs	r6, r0
    36da:	d1f1      	bne.n	36c0 <mpsl_init+0x10>
    36dc:	f7fe ff0e 	bl	24fc <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    36e0:	f7ff ff0a 	bl	34f8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    36e4:	f007 fed8 	bl	b498 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    36e8:	4628      	mov	r0, r5
    36ea:	f007 ff86 	bl	b5fa <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    36ee:	2001      	movs	r0, #1
    36f0:	2d00      	cmp	r5, #0
    36f2:	db09      	blt.n	3708 <mpsl_init+0x58>
    36f4:	f005 011f 	and.w	r1, r5, #31
    36f8:	fa00 f101 	lsl.w	r1, r0, r1
    36fc:	096a      	lsrs	r2, r5, #5
    36fe:	0092      	lsls	r2, r2, #2
    3700:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    3704:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    3708:	7060      	strb	r0, [r4, #1]
    370a:	4630      	mov	r0, r6
    370c:	bd70      	pop	{r4, r5, r6, pc}
    370e:	0000      	.short	0x0000
    3710:	2000004c 	.word	0x2000004c
    3714:	0000b636 	.word	0x0000b636

00003718 <mpsl_is_initialized>:
    3718:	4801      	ldr	r0, [pc, #4]	; (3720 <mpsl_is_initialized+0x8>)
    371a:	7840      	ldrb	r0, [r0, #1]
    371c:	4770      	bx	lr
    371e:	0000      	.short	0x0000
    3720:	2000004c 	.word	0x2000004c

00003724 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    3724:	4807      	ldr	r0, [pc, #28]	; (3744 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    3726:	f990 0000 	ldrsb.w	r0, [r0]
    372a:	2800      	cmp	r0, #0
    372c:	db09      	blt.n	3742 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    372e:	f000 021f 	and.w	r2, r0, #31
    3732:	2101      	movs	r1, #1
    3734:	4091      	lsls	r1, r2
    3736:	0940      	lsrs	r0, r0, #5
    3738:	0080      	lsls	r0, r0, #2
    373a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    373e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    3742:	4770      	bx	lr
    3744:	2000004c 	.word	0x2000004c

00003748 <mpsl_temperature_get>:
    3748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    374c:	2601      	movs	r6, #1
    374e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    3752:	0331      	lsls	r1, r6, #12
    3754:	f04f 0800 	mov.w	r8, #0
    3758:	4640      	mov	r0, r8
    375a:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    375e:	f3bf 8f4f 	dsb	sy
    3762:	f3bf 8f6f 	isb	sy
    3766:	4c16      	ldr	r4, [pc, #88]	; (37c0 <mpsl_temperature_get+0x78>)
    3768:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    376c:	200c      	movs	r0, #12
    376e:	f007 ff70 	bl	b652 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    3772:	4d14      	ldr	r5, [pc, #80]	; (37c4 <mpsl_temperature_get+0x7c>)
    3774:	6828      	ldr	r0, [r5, #0]
    3776:	43c0      	mvns	r0, r0
    3778:	f340 1700 	sbfx	r7, r0, #4, #1
    377c:	6828      	ldr	r0, [r5, #0]
    377e:	f040 0010 	orr.w	r0, r0, #16
    3782:	6028      	str	r0, [r5, #0]
    3784:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    3788:	6026      	str	r6, [r4, #0]
    378a:	1c7f      	adds	r7, r7, #1
    378c:	e002      	b.n	3794 <mpsl_temperature_get+0x4c>
    378e:	bf00      	nop
    3790:	f000 f890 	bl	38b4 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    3794:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    3798:	2800      	cmp	r0, #0
    379a:	d0f9      	beq.n	3790 <mpsl_temperature_get+0x48>
    379c:	b91f      	cbnz	r7, 37a6 <mpsl_temperature_get+0x5e>
    379e:	6828      	ldr	r0, [r5, #0]
    37a0:	f020 0010 	bic.w	r0, r0, #16
    37a4:	6028      	str	r0, [r5, #0]
    37a6:	4808      	ldr	r0, [pc, #32]	; (37c8 <mpsl_temperature_get+0x80>)
    37a8:	6805      	ldr	r5, [r0, #0]
    37aa:	6066      	str	r6, [r4, #4]
    37ac:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    37b0:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    37b4:	200c      	movs	r0, #12
    37b6:	f007 ff4c 	bl	b652 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    37ba:	4628      	mov	r0, r5
    37bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    37c0:	4000c000 	.word	0x4000c000
    37c4:	e000ed10 	.word	0xe000ed10
    37c8:	4000c508 	.word	0x4000c508

000037cc <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    37cc:	b510      	push	{r4, lr}
    37ce:	4602      	mov	r2, r0
    37d0:	2005      	movs	r0, #5
    37d2:	490c      	ldr	r1, [pc, #48]	; (3804 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    37d4:	e004      	b.n	37e0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    37d6:	bf00      	nop
    37d8:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    37dc:	791b      	ldrb	r3, [r3, #4]
    37de:	b133      	cbz	r3, 37ee <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    37e0:	1e40      	subs	r0, r0, #1
    37e2:	b2c0      	uxtb	r0, r0
    37e4:	d2f8      	bcs.n	37d8 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    37e6:	214b      	movs	r1, #75	; 0x4b
    37e8:	2069      	movs	r0, #105	; 0x69
    37ea:	f7ff ff3d 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    37ee:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    37f2:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    37f6:	2200      	movs	r2, #0
    37f8:	714a      	strb	r2, [r1, #5]
    37fa:	718a      	strb	r2, [r1, #6]
    37fc:	2201      	movs	r2, #1
    37fe:	710a      	strb	r2, [r1, #4]
    3800:	bd10      	pop	{r4, pc}
    3802:	0000      	.short	0x0000
    3804:	20000d00 	.word	0x20000d00

00003808 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    3808:	b510      	push	{r4, lr}
    380a:	2805      	cmp	r0, #5
    380c:	d301      	bcc.n	3812 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    380e:	215a      	movs	r1, #90	; 0x5a
    3810:	e006      	b.n	3820 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    3812:	490a      	ldr	r1, [pc, #40]	; (383c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    3814:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    3818:	7901      	ldrb	r1, [r0, #4]
    381a:	2901      	cmp	r1, #1
    381c:	d003      	beq.n	3826 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    381e:	215b      	movs	r1, #91	; 0x5b
    3820:	2069      	movs	r0, #105	; 0x69
    3822:	f7ff ff21 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3826:	7941      	ldrb	r1, [r0, #5]
    3828:	7982      	ldrb	r2, [r0, #6]
    382a:	1c49      	adds	r1, r1, #1
    382c:	b2c9      	uxtb	r1, r1
    382e:	428a      	cmp	r2, r1
    3830:	d000      	beq.n	3834 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    3832:	7141      	strb	r1, [r0, #5]
    3834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3838:	f7ff bf74 	b.w	3724 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    383c:	20000d00 	.word	0x20000d00

00003840 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    3840:	b570      	push	{r4, r5, r6, lr}
    3842:	2505      	movs	r5, #5
    3844:	4e0e      	ldr	r6, [pc, #56]	; (3880 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    3846:	4c0f      	ldr	r4, [pc, #60]	; (3884 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    3848:	e016      	b.n	3878 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    384a:	7821      	ldrb	r1, [r4, #0]
    384c:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    3850:	7902      	ldrb	r2, [r0, #4]
    3852:	2a01      	cmp	r2, #1
    3854:	d108      	bne.n	3868 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    3856:	7942      	ldrb	r2, [r0, #5]
    3858:	7983      	ldrb	r3, [r0, #6]
    385a:	429a      	cmp	r2, r3
    385c:	d004      	beq.n	3868 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    385e:	7942      	ldrb	r2, [r0, #5]
    3860:	7182      	strb	r2, [r0, #6]
    3862:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    3866:	4780      	blx	r0
    3868:	7820      	ldrb	r0, [r4, #0]
    386a:	1c40      	adds	r0, r0, #1
    386c:	b2c0      	uxtb	r0, r0
    386e:	7020      	strb	r0, [r4, #0]
    3870:	2805      	cmp	r0, #5
    3872:	d301      	bcc.n	3878 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    3874:	2000      	movs	r0, #0
    3876:	7020      	strb	r0, [r4, #0]
    3878:	1e6d      	subs	r5, r5, #1
    387a:	b2ed      	uxtb	r5, r5
    387c:	d2e5      	bcs.n	384a <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    387e:	bd70      	pop	{r4, r5, r6, pc}
    3880:	20000d00 	.word	0x20000d00
    3884:	20000299 	.word	0x20000299

00003888 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    3888:	b500      	push	{lr}
    388a:	f007 ff11 	bl	b6b0 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    388e:	b940      	cbnz	r0, 38a2 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    3890:	f007 ff18 	bl	b6c4 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3894:	b928      	cbnz	r0, 38a2 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    3896:	f007 ff2c 	bl	b6f2 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    389a:	b910      	cbnz	r0, 38a2 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    389c:	f007 ff3d 	bl	b71a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    38a0:	b108      	cbz	r0, 38a6 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    38a2:	4802      	ldr	r0, [pc, #8]	; (38ac <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    38a4:	bd00      	pop	{pc}
    38a6:	4802      	ldr	r0, [pc, #8]	; (38b0 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    38a8:	bd00      	pop	{pc}
    38aa:	0000      	.short	0x0000
    38ac:	4000050c 	.word	0x4000050c
    38b0:	4001e700 	.word	0x4001e700

000038b4 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    38b4:	b510      	push	{r4, lr}
    38b6:	f007 ff30 	bl	b71a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    38ba:	b330      	cbz	r0, 390a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x56>
    38bc:	f3ef 8010 	mrs	r0, PRIMASK
    38c0:	b1c8      	cbz	r0, 38f6 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
    38c2:	2100      	movs	r1, #0
    38c4:	b672      	cpsid	i
    38c6:	4812      	ldr	r0, [pc, #72]	; (3910 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
    38c8:	6802      	ldr	r2, [r0, #0]
    38ca:	6803      	ldr	r3, [r0, #0]
    38cc:	f3c2 1200 	ubfx	r2, r2, #4, #1
    38d0:	f043 0310 	orr.w	r3, r3, #16
    38d4:	6003      	str	r3, [r0, #0]
    38d6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    38da:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    38de:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    38e2:	431c      	orrs	r4, r3
    38e4:	d000      	beq.n	38e8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
    38e6:	bf40      	sev
    38e8:	bf20      	wfe
    38ea:	bf00      	nop
    38ec:	bf00      	nop
    38ee:	bf00      	nop
    38f0:	bf00      	nop
    38f2:	b112      	cbz	r2, 38fa <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
    38f4:	e005      	b.n	3902 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4e>
    38f6:	2101      	movs	r1, #1
    38f8:	e7e4      	b.n	38c4 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
    38fa:	6802      	ldr	r2, [r0, #0]
    38fc:	f022 0210 	bic.w	r2, r2, #16
    3900:	6002      	str	r2, [r0, #0]
    3902:	2900      	cmp	r1, #0
    3904:	d000      	beq.n	3908 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x54>
    3906:	b662      	cpsie	i
    3908:	bd10      	pop	{r4, pc}
    390a:	bf20      	wfe
    390c:	bd10      	pop	{r4, pc}
    390e:	0000      	.short	0x0000
    3910:	e000ed10 	.word	0xe000ed10

00003914 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    3914:	0000b98b 0000b9a7 0000b995 0000b9a1     ................
    3924:	0000b98f 0000b989 0000b987 0000b9ad     ................
    3934:	0000b99b 0000b981 0000b979 0000b97d     ........y...}...
    3944:	0000b973                                s...

00003948 <mpsl_fem_disable>:
    3948:	4801      	ldr	r0, [pc, #4]	; (3950 <mpsl_fem_disable+0x8>)
    394a:	6800      	ldr	r0, [r0, #0]
    394c:	6800      	ldr	r0, [r0, #0]
    394e:	4700      	bx	r0
    3950:	20000054 	.word	0x20000054

00003954 <mpsl_fem_lna_configuration_clear>:
    3954:	4801      	ldr	r0, [pc, #4]	; (395c <mpsl_fem_lna_configuration_clear+0x8>)
    3956:	6800      	ldr	r0, [r0, #0]
    3958:	6900      	ldr	r0, [r0, #16]
    395a:	4700      	bx	r0
    395c:	20000054 	.word	0x20000054

00003960 <mpsl_fem_lna_configuration_set>:
    3960:	4a01      	ldr	r2, [pc, #4]	; (3968 <mpsl_fem_lna_configuration_set+0x8>)
    3962:	6812      	ldr	r2, [r2, #0]
    3964:	6892      	ldr	r2, [r2, #8]
    3966:	4710      	bx	r2
    3968:	20000054 	.word	0x20000054

0000396c <mpsl_fem_pa_configuration_clear>:
    396c:	4801      	ldr	r0, [pc, #4]	; (3974 <mpsl_fem_pa_configuration_clear+0x8>)
    396e:	6800      	ldr	r0, [r0, #0]
    3970:	68c0      	ldr	r0, [r0, #12]
    3972:	4700      	bx	r0
    3974:	20000054 	.word	0x20000054

00003978 <mpsl_fem_pa_configuration_set>:
    3978:	4a01      	ldr	r2, [pc, #4]	; (3980 <mpsl_fem_pa_configuration_set+0x8>)
    397a:	6812      	ldr	r2, [r2, #0]
    397c:	6852      	ldr	r2, [r2, #4]
    397e:	4710      	bx	r2
    3980:	20000054 	.word	0x20000054

00003984 <mpsl_fem_pa_is_configured>:
    3984:	4901      	ldr	r1, [pc, #4]	; (398c <mpsl_fem_pa_is_configured+0x8>)
    3986:	6809      	ldr	r1, [r1, #0]
    3988:	6a09      	ldr	r1, [r1, #32]
    398a:	4708      	bx	r1
    398c:	20000054 	.word	0x20000054

00003990 <mpsl_fem_device_config_254_apply_get>:
    3990:	4801      	ldr	r0, [pc, #4]	; (3998 <mpsl_fem_device_config_254_apply_get+0x8>)
    3992:	7800      	ldrb	r0, [r0, #0]
    3994:	4770      	bx	lr
    3996:	0000      	.short	0x0000
    3998:	2000029a 	.word	0x2000029a
    399c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    399e:	4c17      	ldr	r4, [pc, #92]	; (39fc <mpsl_fem_device_config_254_apply_get+0x6c>)
    39a0:	79a0      	ldrb	r0, [r4, #6]
    39a2:	2802      	cmp	r0, #2
    39a4:	d200      	bcs.n	39a8 <mpsl_fem_device_config_254_apply_get+0x18>
    39a6:	2002      	movs	r0, #2
    39a8:	f88d 0001 	strb.w	r0, [sp, #1]
    39ac:	7960      	ldrb	r0, [r4, #5]
    39ae:	2803      	cmp	r0, #3
    39b0:	d200      	bcs.n	39b4 <mpsl_fem_device_config_254_apply_get+0x24>
    39b2:	2003      	movs	r0, #3
    39b4:	f88d 0000 	strb.w	r0, [sp]
    39b8:	7920      	ldrb	r0, [r4, #4]
    39ba:	f8ad 0004 	strh.w	r0, [sp, #4]
    39be:	78e0      	ldrb	r0, [r4, #3]
    39c0:	f8ad 0002 	strh.w	r0, [sp, #2]
    39c4:	4668      	mov	r0, sp
    39c6:	f006 f8fb 	bl	9bc0 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    39ca:	b108      	cbz	r0, 39d0 <mpsl_fem_device_config_254_apply_get+0x40>
    39cc:	21ae      	movs	r1, #174	; 0xae
    39ce:	e010      	b.n	39f2 <mpsl_fem_device_config_254_apply_get+0x62>
    39d0:	68a0      	ldr	r0, [r4, #8]
    39d2:	9002      	str	r0, [sp, #8]
    39d4:	a802      	add	r0, sp, #8
    39d6:	f006 f909 	bl	9bec <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    39da:	b108      	cbz	r0, 39e0 <mpsl_fem_device_config_254_apply_get+0x50>
    39dc:	21b2      	movs	r1, #178	; 0xb2
    39de:	e008      	b.n	39f2 <mpsl_fem_device_config_254_apply_get+0x62>
    39e0:	4807      	ldr	r0, [pc, #28]	; (3a00 <mpsl_fem_device_config_254_apply_get+0x70>)
    39e2:	6800      	ldr	r0, [r0, #0]
    39e4:	9003      	str	r0, [sp, #12]
    39e6:	a803      	add	r0, sp, #12
    39e8:	f00a fef4 	bl	e7d4 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    39ec:	2800      	cmp	r0, #0
    39ee:	d003      	beq.n	39f8 <mpsl_fem_device_config_254_apply_get+0x68>
    39f0:	21b6      	movs	r1, #182	; 0xb6
    39f2:	2003      	movs	r0, #3
    39f4:	f000 f8ce 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    39f8:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    39fa:	0000      	.short	0x0000
    39fc:	20000064 	.word	0x20000064
    3a00:	00003c7c 	.word	0x00003c7c

00003a04 <sdc_build_revision_get>:
    3a04:	b510      	push	{r4, lr}
    3a06:	b128      	cbz	r0, 3a14 <sdc_build_revision_get+0x10>
    3a08:	2214      	movs	r2, #20
    3a0a:	4904      	ldr	r1, [pc, #16]	; (3a1c <sdc_build_revision_get+0x18>)
    3a0c:	f007 fed7 	bl	b7be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3a10:	2000      	movs	r0, #0
    3a12:	bd10      	pop	{r4, pc}
    3a14:	f06f 0015 	mvn.w	r0, #21
    3a18:	bd10      	pop	{r4, pc}
    3a1a:	0000      	.short	0x0000
    3a1c:	00003cae 	.word	0x00003cae

00003a20 <sdc_cfg_set>:
    3a20:	b570      	push	{r4, r5, r6, lr}
    3a22:	f06f 052c 	mvn.w	r5, #44	; 0x2c
    3a26:	bbb0      	cbnz	r0, 3a96 <sdc_cfg_set+0x76>
    3a28:	4c1d      	ldr	r4, [pc, #116]	; (3aa0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8>)
    3a2a:	78a0      	ldrb	r0, [r4, #2]
    3a2c:	b108      	cbz	r0, 3a32 <sdc_cfg_set+0x12>
    3a2e:	11a8      	asrs	r0, r5, #6
    3a30:	bd70      	pop	{r4, r5, r6, pc}
    3a32:	b321      	cbz	r1, 3a7e <sdc_cfg_set+0x5e>
    3a34:	f06f 0015 	mvn.w	r0, #21
    3a38:	2a00      	cmp	r2, #0
    3a3a:	d0f9      	beq.n	3a30 <sdc_cfg_set+0x10>
    3a3c:	2908      	cmp	r1, #8
    3a3e:	d22a      	bcs.n	3a96 <sdc_cfg_set+0x76>
    3a40:	e8df f001 	tbb	[pc, r1]
    3a44:	0a070429 	.word	0x0a070429
    3a48:	1e14110e 	.word	0x1e14110e
    3a4c:	7810      	ldrb	r0, [r2, #0]
    3a4e:	7320      	strb	r0, [r4, #12]
    3a50:	e018      	b.n	3a84 <sdc_cfg_set+0x64>
    3a52:	7810      	ldrb	r0, [r2, #0]
    3a54:	7360      	strb	r0, [r4, #13]
    3a56:	e015      	b.n	3a84 <sdc_cfg_set+0x64>
    3a58:	6810      	ldr	r0, [r2, #0]
    3a5a:	f8c4 000f 	str.w	r0, [r4, #15]
    3a5e:	e011      	b.n	3a84 <sdc_cfg_set+0x64>
    3a60:	6810      	ldr	r0, [r2, #0]
    3a62:	6160      	str	r0, [r4, #20]
    3a64:	e00e      	b.n	3a84 <sdc_cfg_set+0x64>
    3a66:	7810      	ldrb	r0, [r2, #0]
    3a68:	73a0      	strb	r0, [r4, #14]
    3a6a:	e00b      	b.n	3a84 <sdc_cfg_set+0x64>
    3a6c:	7921      	ldrb	r1, [r4, #4]
    3a6e:	b111      	cbz	r1, 3a76 <sdc_cfg_set+0x56>
    3a70:	7811      	ldrb	r1, [r2, #0]
    3a72:	2902      	cmp	r1, #2
    3a74:	d3dc      	bcc.n	3a30 <sdc_cfg_set+0x10>
    3a76:	490a      	ldr	r1, [pc, #40]	; (3aa0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8>)
    3a78:	7810      	ldrb	r0, [r2, #0]
    3a7a:	310c      	adds	r1, #12
    3a7c:	7308      	strb	r0, [r1, #12]
    3a7e:	e001      	b.n	3a84 <sdc_cfg_set+0x64>
    3a80:	8810      	ldrh	r0, [r2, #0]
    3a82:	8360      	strh	r0, [r4, #26]
    3a84:	4906      	ldr	r1, [pc, #24]	; (3aa0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8>)
    3a86:	2201      	movs	r2, #1
    3a88:	310c      	adds	r1, #12
    3a8a:	2000      	movs	r0, #0
    3a8c:	f007 ff90 	bl	b9b0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xfe>
    3a90:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    3a94:	db01      	blt.n	3a9a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2>
    3a96:	4628      	mov	r0, r5
    3a98:	bd70      	pop	{r4, r5, r6, pc}
    3a9a:	2101      	movs	r1, #1
    3a9c:	70e1      	strb	r1, [r4, #3]
    3a9e:	bd70      	pop	{r4, r5, r6, pc}
    3aa0:	20000058 	.word	0x20000058

00003aa4 <sdc_enable>:
    3aa4:	b538      	push	{r3, r4, r5, lr}
    3aa6:	460d      	mov	r5, r1
    3aa8:	0004      	movs	r4, r0
    3aaa:	d020      	beq.n	3aee <sdc_enable+0x4a>
    3aac:	b1fd      	cbz	r5, 3aee <sdc_enable+0x4a>
    3aae:	f000 f933 	bl	3d18 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    3ab2:	b1f8      	cbz	r0, 3af4 <sdc_enable+0x50>
    3ab4:	4620      	mov	r0, r4
    3ab6:	f7ff fe89 	bl	37cc <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    3aba:	4c10      	ldr	r4, [pc, #64]	; (3afc <sdc_enable+0x58>)
    3abc:	2200      	movs	r2, #0
    3abe:	f104 010c 	add.w	r1, r4, #12
    3ac2:	7020      	strb	r0, [r4, #0]
    3ac4:	4628      	mov	r0, r5
    3ac6:	f007 ff73 	bl	b9b0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xfe>
    3aca:	f00b fa72 	bl	efb2 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    3ace:	2100      	movs	r1, #0
    3ad0:	7820      	ldrb	r0, [r4, #0]
    3ad2:	f006 fae3 	bl	a09c <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    3ad6:	7860      	ldrb	r0, [r4, #1]
    3ad8:	f88d 0000 	strb.w	r0, [sp]
    3adc:	4668      	mov	r0, sp
    3ade:	f00a fe6d 	bl	e7bc <sym_PYH4UVSHNWZESRWJUJ3ZT676FMQZCLVGBPGE4SY>
    3ae2:	f7ff ff5b 	bl	399c <mpsl_fem_device_config_254_apply_get+0xc>
    3ae6:	2001      	movs	r0, #1
    3ae8:	70a0      	strb	r0, [r4, #2]
    3aea:	2000      	movs	r0, #0
    3aec:	bd38      	pop	{r3, r4, r5, pc}
    3aee:	f06f 0015 	mvn.w	r0, #21
    3af2:	bd38      	pop	{r3, r4, r5, pc}
    3af4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3af8:	bd38      	pop	{r3, r4, r5, pc}
    3afa:	0000      	.short	0x0000
    3afc:	20000058 	.word	0x20000058

00003b00 <sdc_init>:
    3b00:	b570      	push	{r4, r5, r6, lr}
    3b02:	0005      	movs	r5, r0
    3b04:	d00b      	beq.n	3b1e <sdc_init+0x1e>
    3b06:	f7ff fe07 	bl	3718 <mpsl_is_initialized>
    3b0a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    3b0e:	b120      	cbz	r0, 3b1a <sdc_init+0x1a>
    3b10:	f7ff fcc6 	bl	34a0 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    3b14:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    3b18:	d904      	bls.n	3b24 <sdc_init+0x24>
    3b1a:	4620      	mov	r0, r4
    3b1c:	bd70      	pop	{r4, r5, r6, pc}
    3b1e:	f06f 0015 	mvn.w	r0, #21
    3b22:	bd70      	pop	{r4, r5, r6, pc}
    3b24:	2200      	movs	r2, #0
    3b26:	4b16      	ldr	r3, [pc, #88]	; (3b80 <sdc_init+0x80>)
    3b28:	4611      	mov	r1, r2
    3b2a:	bf00      	nop
    3b2c:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    3b30:	4284      	cmp	r4, r0
    3b32:	d303      	bcc.n	3b3c <sdc_init+0x3c>
    3b34:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    3b38:	7882      	ldrb	r2, [r0, #2]
    3b3a:	e003      	b.n	3b44 <sdc_init+0x44>
    3b3c:	1c49      	adds	r1, r1, #1
    3b3e:	b2c9      	uxtb	r1, r1
    3b40:	290c      	cmp	r1, #12
    3b42:	d3f3      	bcc.n	3b2c <sdc_init+0x2c>
    3b44:	4c0f      	ldr	r4, [pc, #60]	; (3b84 <sdc_init+0x84>)
    3b46:	4810      	ldr	r0, [pc, #64]	; (3b88 <sdc_init+0x88>)
    3b48:	7062      	strb	r2, [r4, #1]
    3b4a:	60a5      	str	r5, [r4, #8]
    3b4c:	f000 f9f6 	bl	3f3c <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    3b50:	2000      	movs	r0, #0
    3b52:	70a0      	strb	r0, [r4, #2]
    3b54:	70e0      	strb	r0, [r4, #3]
    3b56:	7120      	strb	r0, [r4, #4]
    3b58:	f3ef 8410 	mrs	r4, PRIMASK
    3b5c:	b672      	cpsid	i
    3b5e:	480b      	ldr	r0, [pc, #44]	; (3b8c <sdc_init+0x8c>)
    3b60:	f06f 010c 	mvn.w	r1, #12
    3b64:	f000 fd6c 	bl	4640 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    3b68:	4809      	ldr	r0, [pc, #36]	; (3b90 <sdc_init+0x90>)
    3b6a:	f000 fe2d 	bl	47c8 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    3b6e:	b118      	cbz	r0, 3b78 <sdc_init+0x78>
    3b70:	21c4      	movs	r1, #196	; 0xc4
    3b72:	2003      	movs	r0, #3
    3b74:	f000 f80e 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3b78:	b904      	cbnz	r4, 3b7c <sdc_init+0x7c>
    3b7a:	b662      	cpsie	i
    3b7c:	2000      	movs	r0, #0
    3b7e:	bd70      	pop	{r4, r5, r6, pc}
    3b80:	00003c7e 	.word	0x00003c7e
    3b84:	20000058 	.word	0x20000058
    3b88:	0000399d 	.word	0x0000399d
    3b8c:	4000c000 	.word	0x4000c000
    3b90:	00003d45 	.word	0x00003d45

00003b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    3b94:	b50e      	push	{r1, r2, r3, lr}
    3b96:	b672      	cpsid	i
    3b98:	4a15      	ldr	r2, [pc, #84]	; (3bf0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    3b9a:	6895      	ldr	r5, [r2, #8]
    3b9c:	b1d5      	cbz	r5, 3bd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x40>
    3b9e:	2200      	movs	r2, #0
    3ba0:	4603      	mov	r3, r0
    3ba2:	466e      	mov	r6, sp
    3ba4:	240a      	movs	r4, #10
    3ba6:	e003      	b.n	3bb0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    3ba8:	fbb0 f0f4 	udiv	r0, r0, r4
    3bac:	1c52      	adds	r2, r2, #1
    3bae:	b2d2      	uxtb	r2, r2
    3bb0:	2800      	cmp	r0, #0
    3bb2:	d1f9      	bne.n	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    3bb4:	54b0      	strb	r0, [r6, r2]
    3bb6:	e009      	b.n	3bcc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x38>
    3bb8:	fbb3 f0f4 	udiv	r0, r3, r4
    3bbc:	fb04 3010 	mls	r0, r4, r0, r3
    3bc0:	fbb3 f3f4 	udiv	r3, r3, r4
    3bc4:	1e52      	subs	r2, r2, #1
    3bc6:	b2d2      	uxtb	r2, r2
    3bc8:	3030      	adds	r0, #48	; 0x30
    3bca:	54b0      	strb	r0, [r6, r2]
    3bcc:	2a00      	cmp	r2, #0
    3bce:	d1f3      	bne.n	3bb8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    3bd0:	4630      	mov	r0, r6
    3bd2:	47a8      	blx	r5
    3bd4:	f3bf 8f4f 	dsb	sy
    3bd8:	4806      	ldr	r0, [pc, #24]	; (3bf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    3bda:	6801      	ldr	r1, [r0, #0]
    3bdc:	4a06      	ldr	r2, [pc, #24]	; (3bf8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    3bde:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    3be2:	4311      	orrs	r1, r2
    3be4:	6001      	str	r1, [r0, #0]
    3be6:	f3bf 8f4f 	dsb	sy
    3bea:	bf00      	nop
    3bec:	e7fd      	b.n	3bea <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x56>
    3bee:	0000      	.short	0x0000
    3bf0:	20000058 	.word	0x20000058
    3bf4:	e000ed0c 	.word	0xe000ed0c
    3bf8:	05fa0004 	.word	0x05fa0004

00003bfc <sdc_support_adv>:
    3bfc:	4806      	ldr	r0, [pc, #24]	; (3c18 <sdc_support_adv+0x1c>)
    3bfe:	b510      	push	{r4, lr}
    3c00:	78c1      	ldrb	r1, [r0, #3]
    3c02:	7880      	ldrb	r0, [r0, #2]
    3c04:	4301      	orrs	r1, r0
    3c06:	d002      	beq.n	3c0e <sdc_support_adv+0x12>
    3c08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3c0c:	bd10      	pop	{r4, pc}
    3c0e:	f006 fa65 	bl	a0dc <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
    3c12:	2000      	movs	r0, #0
    3c14:	bd10      	pop	{r4, pc}
    3c16:	0000      	.short	0x0000
    3c18:	20000058 	.word	0x20000058

00003c1c <sdc_support_dle>:
    3c1c:	4806      	ldr	r0, [pc, #24]	; (3c38 <sdc_support_dle+0x1c>)
    3c1e:	b510      	push	{r4, lr}
    3c20:	78c1      	ldrb	r1, [r0, #3]
    3c22:	7880      	ldrb	r0, [r0, #2]
    3c24:	4301      	orrs	r1, r0
    3c26:	d002      	beq.n	3c2e <sdc_support_dle+0x12>
    3c28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3c2c:	bd10      	pop	{r4, pc}
    3c2e:	f005 fff5 	bl	9c1c <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>
    3c32:	2000      	movs	r0, #0
    3c34:	bd10      	pop	{r4, pc}
    3c36:	0000      	.short	0x0000
    3c38:	20000058 	.word	0x20000058

00003c3c <sdc_support_le_2m_phy>:
    3c3c:	4806      	ldr	r0, [pc, #24]	; (3c58 <sdc_support_le_2m_phy+0x1c>)
    3c3e:	b510      	push	{r4, lr}
    3c40:	78c1      	ldrb	r1, [r0, #3]
    3c42:	7880      	ldrb	r0, [r0, #2]
    3c44:	4301      	orrs	r1, r0
    3c46:	d002      	beq.n	3c4e <sdc_support_le_2m_phy+0x12>
    3c48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3c4c:	bd10      	pop	{r4, pc}
    3c4e:	f00a ff26 	bl	ea9e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
    3c52:	2000      	movs	r0, #0
    3c54:	bd10      	pop	{r4, pc}
    3c56:	0000      	.short	0x0000
    3c58:	20000058 	.word	0x20000058

00003c5c <sdc_support_slave>:
    3c5c:	4806      	ldr	r0, [pc, #24]	; (3c78 <sdc_support_slave+0x1c>)
    3c5e:	b510      	push	{r4, lr}
    3c60:	78c1      	ldrb	r1, [r0, #3]
    3c62:	7880      	ldrb	r0, [r0, #2]
    3c64:	4301      	orrs	r1, r0
    3c66:	d002      	beq.n	3c6e <sdc_support_slave+0x12>
    3c68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3c6c:	bd10      	pop	{r4, pc}
    3c6e:	f006 fa47 	bl	a100 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>
    3c72:	2000      	movs	r0, #0
    3c74:	bd10      	pop	{r4, pc}
    3c76:	0000      	.short	0x0000
    3c78:	20000058 	.word	0x20000058
    3c7c:	00010001 	.word	0x00010001
    3c80:	0002000b 	.word	0x0002000b
    3c84:	0005000a 	.word	0x0005000a
    3c88:	000a0009 	.word	0x000a0009
    3c8c:	00140008 	.word	0x00140008
    3c90:	001e0007 	.word	0x001e0007
    3c94:	00320006 	.word	0x00320006
    3c98:	004b0005 	.word	0x004b0005
    3c9c:	00640004 	.word	0x00640004
    3ca0:	00960003 	.word	0x00960003
    3ca4:	00fa0002 	.word	0x00fa0002
    3ca8:	01f40001 	.word	0x01f40001
    3cac:	473f0000 	.word	0x473f0000
    3cb0:	95818e70 	.word	0x95818e70
    3cb4:	d39d864e 	.word	0xd39d864e
    3cb8:	f68895a2 	.word	0xf68895a2
    3cbc:	537f0a30 	.word	0x537f0a30
    3cc0:	0000fd49 	.word	0x0000fd49

00003cc4 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    3cc4:	4a05      	ldr	r2, [pc, #20]	; (3cdc <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
    3cc6:	b510      	push	{r4, lr}
    3cc8:	6852      	ldr	r2, [r2, #4]
    3cca:	b112      	cbz	r2, 3cd2 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
    3ccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3cd0:	4710      	bx	r2
    3cd2:	2183      	movs	r1, #131	; 0x83
    3cd4:	2004      	movs	r0, #4
    3cd6:	f7ff ff5d 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3cda:	0000      	.short	0x0000
    3cdc:	20000d28 	.word	0x20000d28

00003ce0 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>:
    3ce0:	4a05      	ldr	r2, [pc, #20]	; (3cf8 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A+0x18>)
    3ce2:	b510      	push	{r4, lr}
    3ce4:	6812      	ldr	r2, [r2, #0]
    3ce6:	b112      	cbz	r2, 3cee <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A+0xe>
    3ce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3cec:	4710      	bx	r2
    3cee:	217d      	movs	r1, #125	; 0x7d
    3cf0:	2004      	movs	r0, #4
    3cf2:	f7ff ff4f 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3cf6:	0000      	.short	0x0000
    3cf8:	20000d28 	.word	0x20000d28

00003cfc <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    3cfc:	4a05      	ldr	r2, [pc, #20]	; (3d14 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
    3cfe:	b510      	push	{r4, lr}
    3d00:	6892      	ldr	r2, [r2, #8]
    3d02:	b112      	cbz	r2, 3d0a <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
    3d04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3d08:	4710      	bx	r2
    3d0a:	2189      	movs	r1, #137	; 0x89
    3d0c:	2004      	movs	r0, #4
    3d0e:	f7ff ff41 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3d12:	0000      	.short	0x0000
    3d14:	20000d28 	.word	0x20000d28

00003d18 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    3d18:	4805      	ldr	r0, [pc, #20]	; (3d30 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
    3d1a:	6801      	ldr	r1, [r0, #0]
    3d1c:	b129      	cbz	r1, 3d2a <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    3d1e:	6841      	ldr	r1, [r0, #4]
    3d20:	b119      	cbz	r1, 3d2a <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    3d22:	6880      	ldr	r0, [r0, #8]
    3d24:	b108      	cbz	r0, 3d2a <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    3d26:	2001      	movs	r0, #1
    3d28:	4770      	bx	lr
    3d2a:	2000      	movs	r0, #0
    3d2c:	4770      	bx	lr
    3d2e:	0000      	.short	0x0000
    3d30:	20000d28 	.word	0x20000d28

00003d34 <sdc_rand_source_register>:
    3d34:	4902      	ldr	r1, [pc, #8]	; (3d40 <sdc_rand_source_register+0xc>)
    3d36:	c80d      	ldmia	r0, {r0, r2, r3}
    3d38:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    3d3c:	2000      	movs	r0, #0
    3d3e:	4770      	bx	lr
    3d40:	20000d28 	.word	0x20000d28

00003d44 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    3d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d46:	4c12      	ldr	r4, [pc, #72]	; (3d90 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    3d48:	2600      	movs	r6, #0
    3d4a:	6825      	ldr	r5, [r4, #0]
    3d4c:	e011      	b.n	3d72 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    3d4e:	9800      	ldr	r0, [sp, #0]
    3d50:	2802      	cmp	r0, #2
    3d52:	d002      	beq.n	3d5a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    3d54:	2803      	cmp	r0, #3
    3d56:	d10c      	bne.n	3d72 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    3d58:	e006      	b.n	3d68 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    3d5a:	6820      	ldr	r0, [r4, #0]
    3d5c:	b110      	cbz	r0, 3d64 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    3d5e:	2000      	movs	r0, #0
    3d60:	6026      	str	r6, [r4, #0]
    3d62:	e005      	b.n	3d70 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    3d64:	2128      	movs	r1, #40	; 0x28
    3d66:	e00c      	b.n	3d82 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    3d68:	6820      	ldr	r0, [r4, #0]
    3d6a:	b168      	cbz	r0, 3d88 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    3d6c:	2001      	movs	r0, #1
    3d6e:	6026      	str	r6, [r4, #0]
    3d70:	47a8      	blx	r5
    3d72:	4668      	mov	r0, sp
    3d74:	f000 fcfa 	bl	476c <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    3d78:	2800      	cmp	r0, #0
    3d7a:	d0e8      	beq.n	3d4e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    3d7c:	2805      	cmp	r0, #5
    3d7e:	d005      	beq.n	3d8c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    3d80:	2135      	movs	r1, #53	; 0x35
    3d82:	2004      	movs	r0, #4
    3d84:	f7ff ff06 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3d88:	212d      	movs	r1, #45	; 0x2d
    3d8a:	e7fa      	b.n	3d82 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    3d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3d8e:	0000      	.short	0x0000
    3d90:	20000074 	.word	0x20000074
    3d94:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    3d96:	4c21      	ldr	r4, [pc, #132]	; (3e1c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>)
    3d98:	4605      	mov	r5, r0
    3d9a:	7820      	ldrb	r0, [r4, #0]
    3d9c:	b140      	cbz	r0, 3db0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x6c>
    3d9e:	78a2      	ldrb	r2, [r4, #2]
    3da0:	1c61      	adds	r1, r4, #1
    3da2:	4628      	mov	r0, r5
    3da4:	1c92      	adds	r2, r2, #2
    3da6:	f007 fd0a 	bl	b7be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3daa:	2000      	movs	r0, #0
    3dac:	7020      	strb	r0, [r4, #0]
    3dae:	e025      	b.n	3dfc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb8>
    3db0:	481a      	ldr	r0, [pc, #104]	; (3e1c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>)
    3db2:	3844      	subs	r0, #68	; 0x44
    3db4:	f005 ff68 	bl	9c88 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    3db8:	2800      	cmp	r0, #0
    3dba:	d020      	beq.n	3dfe <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xba>
    3dbc:	4c17      	ldr	r4, [pc, #92]	; (3e1c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>)
    3dbe:	3c44      	subs	r4, #68	; 0x44
    3dc0:	7820      	ldrb	r0, [r4, #0]
    3dc2:	2811      	cmp	r0, #17
    3dc4:	d104      	bne.n	3dd0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x8c>
    3dc6:	210a      	movs	r1, #10
    3dc8:	203e      	movs	r0, #62	; 0x3e
    3dca:	f007 fe71 	bl	bab0 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    3dce:	b118      	cbz	r0, 3dd8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x94>
    3dd0:	7820      	ldrb	r0, [r4, #0]
    3dd2:	2808      	cmp	r0, #8
    3dd4:	d006      	beq.n	3de4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa0>
    3dd6:	e00a      	b.n	3dee <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xaa>
    3dd8:	4910      	ldr	r1, [pc, #64]	; (3e1c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>)
    3dda:	4628      	mov	r0, r5
    3ddc:	3944      	subs	r1, #68	; 0x44
    3dde:	f008 f870 	bl	bec2 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
    3de2:	e00b      	b.n	3dfc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb8>
    3de4:	2105      	movs	r1, #5
    3de6:	203e      	movs	r0, #62	; 0x3e
    3de8:	f007 fe62 	bl	bab0 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    3dec:	b140      	cbz	r0, 3e00 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xbc>
    3dee:	490b      	ldr	r1, [pc, #44]	; (3e1c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>)
    3df0:	4628      	mov	r0, r5
    3df2:	3944      	subs	r1, #68	; 0x44
    3df4:	f007 feba 	bl	bb6c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    3df8:	2800      	cmp	r0, #0
    3dfa:	d000      	beq.n	3dfe <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xba>
    3dfc:	2001      	movs	r0, #1
    3dfe:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    3e00:	88a0      	ldrh	r0, [r4, #4]
    3e02:	f8ad 0000 	strh.w	r0, [sp]
    3e06:	a901      	add	r1, sp, #4
    3e08:	4668      	mov	r0, sp
    3e0a:	f008 f974 	bl	c0f6 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
    3e0e:	2800      	cmp	r0, #0
    3e10:	d0f5      	beq.n	3dfe <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xba>
    3e12:	2198      	movs	r1, #152	; 0x98
    3e14:	2008      	movs	r0, #8
    3e16:	f7ff febd 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3e1a:	0000      	.short	0x0000
    3e1c:	20000e08 	.word	0x20000e08
    3e20:	b570      	push	{r4, r5, r6, lr}
    3e22:	780a      	ldrb	r2, [r1, #0]
    3e24:	7082      	strb	r2, [r0, #2]
    3e26:	b33a      	cbz	r2, 3e78 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x134>
    3e28:	2a01      	cmp	r2, #1
    3e2a:	d825      	bhi.n	3e78 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x134>
    3e2c:	2313      	movs	r3, #19
    3e2e:	7003      	strb	r3, [r0, #0]
    3e30:	2300      	movs	r3, #0
    3e32:	e00a      	b.n	3e4a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x106>
    3e34:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    3e38:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    3e3c:	78a6      	ldrb	r6, [r4, #2]
    3e3e:	70ee      	strb	r6, [r5, #3]
    3e40:	8864      	ldrh	r4, [r4, #2]
    3e42:	0a24      	lsrs	r4, r4, #8
    3e44:	1c5b      	adds	r3, r3, #1
    3e46:	712c      	strb	r4, [r5, #4]
    3e48:	b2db      	uxtb	r3, r3
    3e4a:	4293      	cmp	r3, r2
    3e4c:	d3f2      	bcc.n	3e34 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xf0>
    3e4e:	2300      	movs	r3, #0
    3e50:	e00b      	b.n	3e6a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x126>
    3e52:	bf00      	nop
    3e54:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    3e58:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    3e5c:	792e      	ldrb	r6, [r5, #4]
    3e5e:	7166      	strb	r6, [r4, #5]
    3e60:	88ad      	ldrh	r5, [r5, #4]
    3e62:	0a2d      	lsrs	r5, r5, #8
    3e64:	1c5b      	adds	r3, r3, #1
    3e66:	71a5      	strb	r5, [r4, #6]
    3e68:	b2db      	uxtb	r3, r3
    3e6a:	4293      	cmp	r3, r2
    3e6c:	d3f2      	bcc.n	3e54 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x110>
    3e6e:	2101      	movs	r1, #1
    3e70:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    3e74:	b2c0      	uxtb	r0, r0
    3e76:	bd70      	pop	{r4, r5, r6, pc}
    3e78:	2000      	movs	r0, #0
    3e7a:	bd70      	pop	{r4, r5, r6, pc}

00003e7c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    3e7c:	2101      	movs	r1, #1
    3e7e:	4a0c      	ldr	r2, [pc, #48]	; (3eb0 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x34>)
    3e80:	2840      	cmp	r0, #64	; 0x40
    3e82:	d20c      	bcs.n	3e9e <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x22>
    3e84:	2820      	cmp	r0, #32
    3e86:	d803      	bhi.n	3e90 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x14>
    3e88:	1e40      	subs	r0, r0, #1
    3e8a:	4081      	lsls	r1, r0
    3e8c:	6810      	ldr	r0, [r2, #0]
    3e8e:	e002      	b.n	3e96 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    3e90:	3821      	subs	r0, #33	; 0x21
    3e92:	4081      	lsls	r1, r0
    3e94:	6850      	ldr	r0, [r2, #4]
    3e96:	4201      	tst	r1, r0
    3e98:	d107      	bne.n	3eaa <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    3e9a:	2000      	movs	r0, #0
    3e9c:	4770      	bx	lr
    3e9e:	28ff      	cmp	r0, #255	; 0xff
    3ea0:	d003      	beq.n	3eaa <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    3ea2:	3840      	subs	r0, #64	; 0x40
    3ea4:	4081      	lsls	r1, r0
    3ea6:	6890      	ldr	r0, [r2, #8]
    3ea8:	e7f5      	b.n	3e96 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    3eaa:	2001      	movs	r0, #1
    3eac:	4770      	bx	lr
    3eae:	0000      	.short	0x0000
    3eb0:	20000078 	.word	0x20000078

00003eb4 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    3eb4:	2101      	movs	r1, #1
    3eb6:	1e40      	subs	r0, r0, #1
    3eb8:	4081      	lsls	r1, r0
    3eba:	4804      	ldr	r0, [pc, #16]	; (3ecc <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x18>)
    3ebc:	68c0      	ldr	r0, [r0, #12]
    3ebe:	4201      	tst	r1, r0
    3ec0:	d001      	beq.n	3ec6 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x12>
    3ec2:	2001      	movs	r0, #1
    3ec4:	4770      	bx	lr
    3ec6:	2000      	movs	r0, #0
    3ec8:	4770      	bx	lr
    3eca:	0000      	.short	0x0000
    3ecc:	20000078 	.word	0x20000078

00003ed0 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    3ed0:	4901      	ldr	r1, [pc, #4]	; (3ed8 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x8>)
    3ed2:	6800      	ldr	r0, [r0, #0]
    3ed4:	60c8      	str	r0, [r1, #12]
    3ed6:	4770      	bx	lr
    3ed8:	20000078 	.word	0x20000078

00003edc <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    3edc:	4904      	ldr	r1, [pc, #16]	; (3ef0 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x14>)
    3ede:	6802      	ldr	r2, [r0, #0]
    3ee0:	6840      	ldr	r0, [r0, #4]
    3ee2:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    3ee6:	600a      	str	r2, [r1, #0]
    3ee8:	4a02      	ldr	r2, [pc, #8]	; (3ef4 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    3eea:	4310      	orrs	r0, r2
    3eec:	6048      	str	r0, [r1, #4]
    3eee:	4770      	bx	lr
    3ef0:	20000078 	.word	0x20000078
    3ef4:	024007f8 	.word	0x024007f8

00003ef8 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
    3ef8:	4901      	ldr	r1, [pc, #4]	; (3f00 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0x8>)
    3efa:	6800      	ldr	r0, [r0, #0]
    3efc:	6088      	str	r0, [r1, #8]
    3efe:	4770      	bx	lr
    3f00:	20000078 	.word	0x20000078

00003f04 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    3f04:	4805      	ldr	r0, [pc, #20]	; (3f1c <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x18>)
    3f06:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3f0a:	6001      	str	r1, [r0, #0]
    3f0c:	0cc9      	lsrs	r1, r1, #19
    3f0e:	6041      	str	r1, [r0, #4]
    3f10:	2100      	movs	r1, #0
    3f12:	6081      	str	r1, [r0, #8]
    3f14:	211f      	movs	r1, #31
    3f16:	60c1      	str	r1, [r0, #12]
    3f18:	4770      	bx	lr
    3f1a:	0000      	.short	0x0000
    3f1c:	20000078 	.word	0x20000078

00003f20 <sdc_hci_cmd_cb_reset>:
    3f20:	b510      	push	{r4, lr}
    3f22:	f7ff ffef 	bl	3f04 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    3f26:	f00a fd2f 	bl	e988 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    3f2a:	4604      	mov	r4, r0
    3f2c:	4802      	ldr	r0, [pc, #8]	; (3f38 <sdc_hci_cmd_cb_reset+0x18>)
    3f2e:	6800      	ldr	r0, [r0, #0]
    3f30:	b100      	cbz	r0, 3f34 <sdc_hci_cmd_cb_reset+0x14>
    3f32:	4780      	blx	r0
    3f34:	4620      	mov	r0, r4
    3f36:	bd10      	pop	{r4, pc}
    3f38:	20000088 	.word	0x20000088

00003f3c <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    3f3c:	4901      	ldr	r1, [pc, #4]	; (3f44 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    3f3e:	6008      	str	r0, [r1, #0]
    3f40:	4770      	bx	lr
    3f42:	0000      	.short	0x0000
    3f44:	20000088 	.word	0x20000088

00003f48 <sdc_hci_cmd_vs_zephyr_read_version_info>:
    3f48:	2102      	movs	r1, #2
    3f4a:	8001      	strh	r1, [r0, #0]
    3f4c:	8041      	strh	r1, [r0, #2]
    3f4e:	2100      	movs	r1, #0
    3f50:	7101      	strb	r1, [r0, #4]
    3f52:	213f      	movs	r1, #63	; 0x3f
    3f54:	7141      	strb	r1, [r0, #5]
    3f56:	f247 0147 	movw	r1, #28743	; 0x7047
    3f5a:	80c1      	strh	r1, [r0, #6]
    3f5c:	4901      	ldr	r1, [pc, #4]	; (3f64 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    3f5e:	6081      	str	r1, [r0, #8]
    3f60:	2000      	movs	r0, #0
    3f62:	4770      	bx	lr
    3f64:	4e95818e 	.word	0x4e95818e

00003f68 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    3f68:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    3f6a:	4604      	mov	r4, r0
    3f6c:	4669      	mov	r1, sp
    3f6e:	f008 fc28 	bl	c7c2 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    3f72:	b170      	cbz	r0, 3f92 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    3f74:	f240 2112 	movw	r1, #530	; 0x212
    3f78:	e008      	b.n	3f8c <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x24>
    3f7a:	bf00      	nop
    3f7c:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    3f80:	4621      	mov	r1, r4
    3f82:	f000 f8a9 	bl	40d8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    3f86:	b120      	cbz	r0, 3f92 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    3f88:	f240 2117 	movw	r1, #535	; 0x217
    3f8c:	2017      	movs	r0, #23
    3f8e:	f7ff fe01 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3f92:	4668      	mov	r0, sp
    3f94:	f000 f850 	bl	4038 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    3f98:	2800      	cmp	r0, #0
    3f9a:	d0ef      	beq.n	3f7c <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x14>
    3f9c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

00003fa0 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    3fa0:	b510      	push	{r4, lr}
    3fa2:	2802      	cmp	r0, #2
    3fa4:	d304      	bcc.n	3fb0 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x10>
    3fa6:	f240 116b 	movw	r1, #363	; 0x16b
    3faa:	2017      	movs	r0, #23
    3fac:	f7ff fdf2 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3fb0:	4901      	ldr	r1, [pc, #4]	; (3fb8 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x18>)
    3fb2:	5c08      	ldrb	r0, [r1, r0]
    3fb4:	bd10      	pop	{r4, pc}
    3fb6:	0000      	.short	0x0000
    3fb8:	20000d34 	.word	0x20000d34

00003fbc <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    3fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3fbe:	4605      	mov	r5, r0
    3fc0:	9000      	str	r0, [sp, #0]
    3fc2:	4291      	cmp	r1, r2
    3fc4:	d201      	bcs.n	3fca <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xe>
    3fc6:	4614      	mov	r4, r2
    3fc8:	e000      	b.n	3fcc <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x10>
    3fca:	460c      	mov	r4, r1
    3fcc:	b155      	cbz	r5, 3fe4 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x28>
    3fce:	2700      	movs	r7, #0
    3fd0:	1ce8      	adds	r0, r5, #3
    3fd2:	f020 0003 	bic.w	r0, r0, #3
    3fd6:	42a8      	cmp	r0, r5
    3fd8:	d006      	beq.n	3fe8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2c>
    3fda:	f240 113f 	movw	r1, #319	; 0x13f
    3fde:	2017      	movs	r0, #23
    3fe0:	f7ff fdd8 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3fe4:	2701      	movs	r7, #1
    3fe6:	e7f3      	b.n	3fd0 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x14>
    3fe8:	4e12      	ldr	r6, [pc, #72]	; (4034 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x78>)
    3fea:	4668      	mov	r0, sp
    3fec:	7031      	strb	r1, [r6, #0]
    3fee:	7072      	strb	r2, [r6, #1]
    3ff0:	4639      	mov	r1, r7
    3ff2:	f000 f8ed 	bl	41d0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf8>
    3ff6:	2000      	movs	r0, #0
    3ff8:	4603      	mov	r3, r0
    3ffa:	9900      	ldr	r1, [sp, #0]
    3ffc:	1cc9      	adds	r1, r1, #3
    3ffe:	f021 0103 	bic.w	r1, r1, #3
    4002:	9100      	str	r1, [sp, #0]
    4004:	b967      	cbnz	r7, 4020 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x64>
    4006:	eb06 0280 	add.w	r2, r6, r0, lsl #2
    400a:	60d1      	str	r1, [r2, #12]
    400c:	2100      	movs	r1, #0
    400e:	e005      	b.n	401c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x60>
    4010:	f8d2 c00c 	ldr.w	ip, [r2, #12]
    4014:	f84c 3021 	str.w	r3, [ip, r1, lsl #2]
    4018:	1c49      	adds	r1, r1, #1
    401a:	b2c9      	uxtb	r1, r1
    401c:	42a1      	cmp	r1, r4
    401e:	d3f7      	bcc.n	4010 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x54>
    4020:	9900      	ldr	r1, [sp, #0]
    4022:	1c40      	adds	r0, r0, #1
    4024:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    4028:	b2c0      	uxtb	r0, r0
    402a:	9100      	str	r1, [sp, #0]
    402c:	2802      	cmp	r0, #2
    402e:	d3e4      	bcc.n	3ffa <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x3e>
    4030:	1b48      	subs	r0, r1, r5
    4032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4034:	20000d34 	.word	0x20000d34

00004038 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    4038:	b570      	push	{r4, r5, r6, lr}
    403a:	4604      	mov	r4, r0
    403c:	f008 fc2b 	bl	c896 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    4040:	b108      	cbz	r0, 4046 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0xe>
    4042:	2010      	movs	r0, #16
    4044:	bd70      	pop	{r4, r5, r6, pc}
    4046:	7825      	ldrb	r5, [r4, #0]
    4048:	f000 f8fe 	bl	4248 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    404c:	4602      	mov	r2, r0
    404e:	480c      	ldr	r0, [pc, #48]	; (4080 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x48>)
    4050:	8861      	ldrh	r1, [r4, #2]
    4052:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    4056:	e00e      	b.n	4076 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3e>
    4058:	68c3      	ldr	r3, [r0, #12]
    405a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    405e:	b143      	cbz	r3, 4072 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    4060:	1c4a      	adds	r2, r1, #1
    4062:	8062      	strh	r2, [r4, #2]
    4064:	80a1      	strh	r1, [r4, #4]
    4066:	68c0      	ldr	r0, [r0, #12]
    4068:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    406c:	60a0      	str	r0, [r4, #8]
    406e:	2000      	movs	r0, #0
    4070:	bd70      	pop	{r4, r5, r6, pc}
    4072:	1c49      	adds	r1, r1, #1
    4074:	b289      	uxth	r1, r1
    4076:	4291      	cmp	r1, r2
    4078:	d3ee      	bcc.n	4058 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x20>
    407a:	8061      	strh	r1, [r4, #2]
    407c:	2005      	movs	r0, #5
    407e:	bd70      	pop	{r4, r5, r6, pc}
    4080:	20000d34 	.word	0x20000d34

00004084 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    4084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4088:	b121      	cbz	r1, 4094 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
    408a:	2901      	cmp	r1, #1
    408c:	d002      	beq.n	4094 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
    408e:	2000      	movs	r0, #0
    4090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4094:	4c0f      	ldr	r4, [pc, #60]	; (40d4 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>)
    4096:	2700      	movs	r7, #0
    4098:	463b      	mov	r3, r7
    409a:	f64f 76ff 	movw	r6, #65535	; 0xffff
    409e:	eb04 0581 	add.w	r5, r4, r1, lsl #2
    40a2:	f814 c001 	ldrb.w	ip, [r4, r1]
    40a6:	e00a      	b.n	40be <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x3a>
    40a8:	19dc      	adds	r4, r3, r7
    40aa:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    40ae:	b2a4      	uxth	r4, r4
    40b0:	f85e e024 	ldr.w	lr, [lr, r4, lsl #2]
    40b4:	f1be 0f00 	cmp.w	lr, #0
    40b8:	d004      	beq.n	40c4 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x40>
    40ba:	1c5b      	adds	r3, r3, #1
    40bc:	b29b      	uxth	r3, r3
    40be:	459c      	cmp	ip, r3
    40c0:	d8f2      	bhi.n	40a8 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x24>
    40c2:	4634      	mov	r4, r6
    40c4:	8004      	strh	r4, [r0, #0]
    40c6:	4620      	mov	r0, r4
    40c8:	42b4      	cmp	r4, r6
    40ca:	d0e0      	beq.n	408e <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xa>
    40cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    40d0:	f000 b834 	b.w	413c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>
    40d4:	20000d34 	.word	0x20000d34

000040d8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    40d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    40dc:	4606      	mov	r6, r0
    40de:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    40e2:	460c      	mov	r4, r1
    40e4:	f243 0702 	movw	r7, #12290	; 0x3002
    40e8:	38ff      	subs	r0, #255	; 0xff
    40ea:	d020      	beq.n	412e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    40ec:	2c02      	cmp	r4, #2
    40ee:	d302      	bcc.n	40f6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1e>
    40f0:	2007      	movs	r0, #7
    40f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    40f6:	4630      	mov	r0, r6
    40f8:	f000 f85a 	bl	41b0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>
    40fc:	0005      	movs	r5, r0
    40fe:	d016      	beq.n	412e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    4100:	480c      	ldr	r0, [pc, #48]	; (4134 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x5c>)
    4102:	4629      	mov	r1, r5
    4104:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
    4108:	4630      	mov	r0, r6
    410a:	4790      	blx	r2
    410c:	480a      	ldr	r0, [pc, #40]	; (4138 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x60>)
    410e:	2100      	movs	r1, #0
    4110:	eb00 0784 	add.w	r7, r0, r4, lsl #2
    4114:	68f8      	ldr	r0, [r7, #12]
    4116:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
    411a:	4620      	mov	r0, r4
    411c:	f000 f88a 	bl	4234 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    4120:	4602      	mov	r2, r0
    4122:	4629      	mov	r1, r5
    4124:	6878      	ldr	r0, [r7, #4]
    4126:	f008 fb19 	bl	c75c <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    412a:	2000      	movs	r0, #0
    412c:	e7e1      	b.n	40f2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    412e:	4638      	mov	r0, r7
    4130:	e7df      	b.n	40f2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    4132:	0000      	.short	0x0000
    4134:	00004268 	.word	0x00004268
    4138:	20000d34 	.word	0x20000d34
    413c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4140:	4690      	mov	r8, r2
    4142:	460d      	mov	r5, r1
    4144:	4607      	mov	r7, r0
    4146:	f008 fb4d 	bl	c7e4 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    414a:	b148      	cbz	r0, 4160 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x88>
    414c:	4816      	ldr	r0, [pc, #88]	; (41a8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd0>)
    414e:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    4152:	68f0      	ldr	r0, [r6, #12]
    4154:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
    4158:	b128      	cbz	r0, 4166 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x8e>
    415a:	f240 1109 	movw	r1, #265	; 0x109
    415e:	e015      	b.n	418c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    4160:	f44f 7184 	mov.w	r1, #264	; 0x108
    4164:	e012      	b.n	418c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    4166:	6870      	ldr	r0, [r6, #4]
    4168:	2800      	cmp	r0, #0
    416a:	d01a      	beq.n	41a2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xca>
    416c:	4628      	mov	r0, r5
    416e:	f000 f861 	bl	4234 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    4172:	4601      	mov	r1, r0
    4174:	6870      	ldr	r0, [r6, #4]
    4176:	f008 faa3 	bl	c6c0 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    417a:	0004      	movs	r4, r0
    417c:	d010      	beq.n	41a0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc8>
    417e:	68f0      	ldr	r0, [r6, #12]
    4180:	2d02      	cmp	r5, #2
    4182:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
    4186:	d304      	bcc.n	4192 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xba>
    4188:	f44f 718a 	mov.w	r1, #276	; 0x114
    418c:	2017      	movs	r0, #23
    418e:	f7ff fd01 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4192:	4806      	ldr	r0, [pc, #24]	; (41ac <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd4>)
    4194:	4642      	mov	r2, r8
    4196:	4621      	mov	r1, r4
    4198:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
    419c:	4638      	mov	r0, r7
    419e:	4798      	blx	r3
    41a0:	4620      	mov	r0, r4
    41a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    41a6:	0000      	.short	0x0000
    41a8:	20000d34 	.word	0x20000d34
    41ac:	00004260 	.word	0x00004260
    41b0:	b570      	push	{r4, r5, r6, lr}
    41b2:	460c      	mov	r4, r1
    41b4:	4605      	mov	r5, r0
    41b6:	f008 fb15 	bl	c7e4 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    41ba:	2800      	cmp	r0, #0
    41bc:	d005      	beq.n	41ca <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf2>
    41be:	4803      	ldr	r0, [pc, #12]	; (41cc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf4>)
    41c0:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    41c4:	68c0      	ldr	r0, [r0, #12]
    41c6:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    41ca:	bd70      	pop	{r4, r5, r6, pc}
    41cc:	20000d34 	.word	0x20000d34
    41d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    41d4:	4e16      	ldr	r6, [pc, #88]	; (4230 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x158>)
    41d6:	4688      	mov	r8, r1
    41d8:	4605      	mov	r5, r0
    41da:	2400      	movs	r4, #0
    41dc:	6828      	ldr	r0, [r5, #0]
    41de:	1cc0      	adds	r0, r0, #3
    41e0:	f020 0003 	bic.w	r0, r0, #3
    41e4:	6028      	str	r0, [r5, #0]
    41e6:	4620      	mov	r0, r4
    41e8:	f000 f824 	bl	4234 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    41ec:	5d31      	ldrb	r1, [r6, r4]
    41ee:	4348      	muls	r0, r1
    41f0:	f1b8 0f00 	cmp.w	r8, #0
    41f4:	d001      	beq.n	41fa <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x122>
    41f6:	2200      	movs	r2, #0
    41f8:	e000      	b.n	41fc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x124>
    41fa:	682a      	ldr	r2, [r5, #0]
    41fc:	4601      	mov	r1, r0
    41fe:	9200      	str	r2, [sp, #0]
    4200:	b132      	cbz	r2, 4210 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    4202:	2700      	movs	r7, #0
    4204:	ea4f 000d 	mov.w	r0, sp
    4208:	f008 fa87 	bl	c71a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    420c:	b11f      	cbz	r7, 4216 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x13e>
    420e:	e006      	b.n	421e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x146>
    4210:	2701      	movs	r7, #1
    4212:	2000      	movs	r0, #0
    4214:	e7f8      	b.n	4208 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x130>
    4216:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    421a:	9a00      	ldr	r2, [sp, #0]
    421c:	604a      	str	r2, [r1, #4]
    421e:	6829      	ldr	r1, [r5, #0]
    4220:	1c64      	adds	r4, r4, #1
    4222:	4408      	add	r0, r1
    4224:	b2e4      	uxtb	r4, r4
    4226:	6028      	str	r0, [r5, #0]
    4228:	2c02      	cmp	r4, #2
    422a:	d3d7      	bcc.n	41dc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x104>
    422c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4230:	20000d34 	.word	0x20000d34
    4234:	4903      	ldr	r1, [pc, #12]	; (4244 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x16c>)
    4236:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    423a:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    423e:	1cc0      	adds	r0, r0, #3
    4240:	4008      	ands	r0, r1
    4242:	4770      	bx	lr
    4244:	0000425c 	.word	0x0000425c
    4248:	4803      	ldr	r0, [pc, #12]	; (4258 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x180>)
    424a:	7801      	ldrb	r1, [r0, #0]
    424c:	7840      	ldrb	r0, [r0, #1]
    424e:	4281      	cmp	r1, r0
    4250:	d300      	bcc.n	4254 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x17c>
    4252:	4608      	mov	r0, r1
    4254:	4770      	bx	lr
    4256:	0000      	.short	0x0000
    4258:	20000d34 	.word	0x20000d34
    425c:	00e80210 	.word	0x00e80210
    4260:	0000c7f9 	.word	0x0000c7f9
    4264:	0000c7f9 	.word	0x0000c7f9
    4268:	0000dfd5 	.word	0x0000dfd5
    426c:	0000d577 	.word	0x0000d577

00004270 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    4270:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4274:	4c26      	ldr	r4, [pc, #152]	; (4310 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0xa0>)
    4276:	4680      	mov	r8, r0
    4278:	b081      	sub	sp, #4
    427a:	6820      	ldr	r0, [r4, #0]
    427c:	469a      	mov	sl, r3
    427e:	4693      	mov	fp, r2
    4280:	b158      	cbz	r0, 429a <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    4282:	7a02      	ldrb	r2, [r0, #8]
    4284:	4542      	cmp	r2, r8
    4286:	d903      	bls.n	4290 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    4288:	6841      	ldr	r1, [r0, #4]
    428a:	f851 0028 	ldr.w	r0, [r1, r8, lsl #2]
    428e:	b140      	cbz	r0, 42a2 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    4290:	f243 0002 	movw	r0, #12290	; 0x3002
    4294:	b005      	add	sp, #20
    4296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    429a:	21a5      	movs	r1, #165	; 0xa5
    429c:	2018      	movs	r0, #24
    429e:	f7ff fc79 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    42a2:	4619      	mov	r1, r3
    42a4:	9802      	ldr	r0, [sp, #8]
    42a6:	f008 fabf 	bl	c828 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    42aa:	b286      	uxth	r6, r0
    42ac:	4658      	mov	r0, fp
    42ae:	990e      	ldr	r1, [sp, #56]	; 0x38
    42b0:	f008 fab1 	bl	c816 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    42b4:	b285      	uxth	r5, r0
    42b6:	1970      	adds	r0, r6, r5
    42b8:	1d00      	adds	r0, r0, #4
    42ba:	b287      	uxth	r7, r0
    42bc:	6820      	ldr	r0, [r4, #0]
    42be:	46a1      	mov	r9, r4
    42c0:	4639      	mov	r1, r7
    42c2:	6800      	ldr	r0, [r0, #0]
    42c4:	f008 f9fc 	bl	c6c0 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    42c8:	0004      	movs	r4, r0
    42ca:	d01f      	beq.n	430c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x9c>
    42cc:	8067      	strh	r7, [r4, #2]
    42ce:	8025      	strh	r5, [r4, #0]
    42d0:	4629      	mov	r1, r5
    42d2:	1d20      	adds	r0, r4, #4
    42d4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    42d6:	4607      	mov	r7, r0
    42d8:	465a      	mov	r2, fp
    42da:	2301      	movs	r3, #1
    42dc:	9500      	str	r5, [sp, #0]
    42de:	f008 f94e 	bl	c57e <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    42e2:	8820      	ldrh	r0, [r4, #0]
    42e4:	4631      	mov	r1, r6
    42e6:	4438      	add	r0, r7
    42e8:	2301      	movs	r3, #1
    42ea:	9a02      	ldr	r2, [sp, #8]
    42ec:	f8cd a000 	str.w	sl, [sp]
    42f0:	f008 f945 	bl	c57e <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    42f4:	8820      	ldrh	r0, [r4, #0]
    42f6:	19c1      	adds	r1, r0, r7
    42f8:	4638      	mov	r0, r7
    42fa:	f008 f971 	bl	c5e0 <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>
    42fe:	f8d9 0000 	ldr.w	r0, [r9]
    4302:	6841      	ldr	r1, [r0, #4]
    4304:	2000      	movs	r0, #0
    4306:	f841 4028 	str.w	r4, [r1, r8, lsl #2]
    430a:	e7c3      	b.n	4294 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    430c:	2004      	movs	r0, #4
    430e:	e7c1      	b.n	4294 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    4310:	2000008c 	.word	0x2000008c

00004314 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    4314:	b570      	push	{r4, r5, r6, lr}
    4316:	4c14      	ldr	r4, [pc, #80]	; (4368 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    4318:	6823      	ldr	r3, [r4, #0]
    431a:	b18b      	cbz	r3, 4340 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    431c:	7a19      	ldrb	r1, [r3, #8]
    431e:	4281      	cmp	r1, r0
    4320:	d912      	bls.n	4348 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    4322:	685a      	ldr	r2, [r3, #4]
    4324:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    4328:	b171      	cbz	r1, 4348 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    432a:	2500      	movs	r5, #0
    432c:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    4330:	884a      	ldrh	r2, [r1, #2]
    4332:	6818      	ldr	r0, [r3, #0]
    4334:	f008 fa12 	bl	c75c <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    4338:	6821      	ldr	r1, [r4, #0]
    433a:	2000      	movs	r0, #0
    433c:	7a0a      	ldrb	r2, [r1, #8]
    433e:	e00c      	b.n	435a <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    4340:	21c8      	movs	r1, #200	; 0xc8
    4342:	2018      	movs	r0, #24
    4344:	f7ff fc26 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4348:	f243 0002 	movw	r0, #12290	; 0x3002
    434c:	bd70      	pop	{r4, r5, r6, pc}
    434e:	684b      	ldr	r3, [r1, #4]
    4350:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    4354:	b933      	cbnz	r3, 4364 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    4356:	1c40      	adds	r0, r0, #1
    4358:	b2c0      	uxtb	r0, r0
    435a:	4282      	cmp	r2, r0
    435c:	d8f7      	bhi.n	434e <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    435e:	6808      	ldr	r0, [r1, #0]
    4360:	f008 f9f1 	bl	c746 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    4364:	2000      	movs	r0, #0
    4366:	bd70      	pop	{r4, r5, r6, pc}
    4368:	2000008c 	.word	0x2000008c

0000436c <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    436c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4370:	460d      	mov	r5, r1
    4372:	0004      	movs	r4, r0
    4374:	4690      	mov	r8, r2
    4376:	f04f 0600 	mov.w	r6, #0
    437a:	d009      	beq.n	4390 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x24>
    437c:	2700      	movs	r7, #0
    437e:	1ce0      	adds	r0, r4, #3
    4380:	f020 0003 	bic.w	r0, r0, #3
    4384:	42a0      	cmp	r0, r4
    4386:	d005      	beq.n	4394 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x28>
    4388:	2186      	movs	r1, #134	; 0x86
    438a:	2018      	movs	r0, #24
    438c:	f7ff fc02 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4390:	2701      	movs	r7, #1
    4392:	e7f4      	b.n	437e <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    4394:	b1cd      	cbz	r5, 43ca <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    4396:	4611      	mov	r1, r2
    4398:	2000      	movs	r0, #0
    439a:	f008 f9be 	bl	c71a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    439e:	300c      	adds	r0, #12
    43a0:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    43a4:	b98f      	cbnz	r7, 43ca <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    43a6:	4f0a      	ldr	r7, [pc, #40]	; (43d0 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x64>)
    43a8:	f104 000c 	add.w	r0, r4, #12
    43ac:	00aa      	lsls	r2, r5, #2
    43ae:	603c      	str	r4, [r7, #0]
    43b0:	7225      	strb	r5, [r4, #8]
    43b2:	6060      	str	r0, [r4, #4]
    43b4:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    43b8:	6020      	str	r0, [r4, #0]
    43ba:	2100      	movs	r1, #0
    43bc:	6860      	ldr	r0, [r4, #4]
    43be:	f007 fa78 	bl	b8b2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    43c2:	4641      	mov	r1, r8
    43c4:	6838      	ldr	r0, [r7, #0]
    43c6:	f008 f9a8 	bl	c71a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    43ca:	4630      	mov	r0, r6
    43cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    43d0:	2000008c 	.word	0x2000008c

000043d4 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    43d4:	b570      	push	{r4, r5, r6, lr}
    43d6:	4d08      	ldr	r5, [pc, #32]	; (43f8 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    43d8:	6828      	ldr	r0, [r5, #0]
    43da:	2800      	cmp	r0, #0
    43dc:	d00a      	beq.n	43f4 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    43de:	2400      	movs	r4, #0
    43e0:	e004      	b.n	43ec <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    43e2:	4620      	mov	r0, r4
    43e4:	f7ff ff96 	bl	4314 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    43e8:	1c64      	adds	r4, r4, #1
    43ea:	b2e4      	uxtb	r4, r4
    43ec:	6828      	ldr	r0, [r5, #0]
    43ee:	7a00      	ldrb	r0, [r0, #8]
    43f0:	42a0      	cmp	r0, r4
    43f2:	d8f6      	bhi.n	43e2 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    43f4:	bd70      	pop	{r4, r5, r6, pc}
    43f6:	0000      	.short	0x0000
    43f8:	2000008c 	.word	0x2000008c

000043fc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    43fc:	4909      	ldr	r1, [pc, #36]	; (4424 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    43fe:	b510      	push	{r4, lr}
    4400:	4602      	mov	r2, r0
    4402:	6809      	ldr	r1, [r1, #0]
    4404:	2000      	movs	r0, #0
    4406:	b149      	cbz	r1, 441c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    4408:	7a0b      	ldrb	r3, [r1, #8]
    440a:	4293      	cmp	r3, r2
    440c:	d905      	bls.n	441a <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    440e:	6849      	ldr	r1, [r1, #4]
    4410:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    4414:	2900      	cmp	r1, #0
    4416:	d000      	beq.n	441a <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    4418:	1d08      	adds	r0, r1, #4
    441a:	bd10      	pop	{r4, pc}
    441c:	21ee      	movs	r1, #238	; 0xee
    441e:	2018      	movs	r0, #24
    4420:	f7ff fbb8 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4424:	2000008c 	.word	0x2000008c

00004428 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    4428:	490a      	ldr	r1, [pc, #40]	; (4454 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    442a:	b510      	push	{r4, lr}
    442c:	4602      	mov	r2, r0
    442e:	6809      	ldr	r1, [r1, #0]
    4430:	2000      	movs	r0, #0
    4432:	b159      	cbz	r1, 444c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    4434:	7a0b      	ldrb	r3, [r1, #8]
    4436:	4293      	cmp	r3, r2
    4438:	d907      	bls.n	444a <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    443a:	6849      	ldr	r1, [r1, #4]
    443c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    4440:	2900      	cmp	r1, #0
    4442:	d002      	beq.n	444a <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    4444:	f831 0b04 	ldrh.w	r0, [r1], #4
    4448:	4408      	add	r0, r1
    444a:	bd10      	pop	{r4, pc}
    444c:	21fc      	movs	r1, #252	; 0xfc
    444e:	2018      	movs	r0, #24
    4450:	f7ff fba0 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4454:	2000008c 	.word	0x2000008c

00004458 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>:
    4458:	b570      	push	{r4, r5, r6, lr}
    445a:	4606      	mov	r6, r0
    445c:	4809      	ldr	r0, [pc, #36]	; (4484 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x2c>)
    445e:	460d      	mov	r5, r1
    4460:	8800      	ldrh	r0, [r0, #0]
    4462:	b10a      	cbz	r2, 4468 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x10>
    4464:	0844      	lsrs	r4, r0, #1
    4466:	e000      	b.n	446a <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x12>
    4468:	0884      	lsrs	r4, r0, #2
    446a:	4621      	mov	r1, r4
    446c:	6828      	ldr	r0, [r5, #0]
    446e:	f008 f927 	bl	c6c0 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    4472:	2100      	movs	r1, #0
    4474:	792a      	ldrb	r2, [r5, #4]
    4476:	f364 411f 	bfi	r1, r4, #16, #16
    447a:	1c52      	adds	r2, r2, #1
    447c:	712a      	strb	r2, [r5, #4]
    447e:	e9c6 0100 	strd	r0, r1, [r6]
    4482:	bd70      	pop	{r4, r5, r6, pc}
    4484:	20000090 	.word	0x20000090

00004488 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>:
    4488:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    448c:	4688      	mov	r8, r1
    448e:	0005      	movs	r5, r0
    4490:	d00a      	beq.n	44a8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x20>
    4492:	2700      	movs	r7, #0
    4494:	1ce9      	adds	r1, r5, #3
    4496:	2000      	movs	r0, #0
    4498:	f021 0103 	bic.w	r1, r1, #3
    449c:	42a9      	cmp	r1, r5
    449e:	d005      	beq.n	44ac <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x24>
    44a0:	212e      	movs	r1, #46	; 0x2e
    44a2:	2009      	movs	r0, #9
    44a4:	f7ff fb76 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    44a8:	2701      	movs	r7, #1
    44aa:	e7f3      	b.n	4494 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0xc>
    44ac:	491d      	ldr	r1, [pc, #116]	; (4524 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x9c>)
    44ae:	eb00 06c8 	add.w	r6, r0, r8, lsl #3
    44b2:	b907      	cbnz	r7, 44b6 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x2e>
    44b4:	604d      	str	r5, [r1, #4]
    44b6:	2a1f      	cmp	r2, #31
    44b8:	d804      	bhi.n	44c4 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x3c>
    44ba:	f64f 70ff 	movw	r0, #65535	; 0xffff
    44be:	ea00 0082 	and.w	r0, r0, r2, lsl #2
    44c2:	e007      	b.n	44d4 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x4c>
    44c4:	207c      	movs	r0, #124	; 0x7c
    44c6:	ebb0 0f42 	cmp.w	r0, r2, lsl #1
    44ca:	d201      	bcs.n	44d0 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
    44cc:	0050      	lsls	r0, r2, #1
    44ce:	e000      	b.n	44d2 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x4a>
    44d0:	207c      	movs	r0, #124	; 0x7c
    44d2:	b280      	uxth	r0, r0
    44d4:	f64f 72fc 	movw	r2, #65532	; 0xfffc
    44d8:	1cc0      	adds	r0, r0, #3
    44da:	4010      	ands	r0, r2
    44dc:	2400      	movs	r4, #0
    44de:	8008      	strh	r0, [r1, #0]
    44e0:	46a2      	mov	sl, r4
    44e2:	4689      	mov	r9, r1
    44e4:	e016      	b.n	4514 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8c>
    44e6:	19a8      	adds	r0, r5, r6
    44e8:	9000      	str	r0, [sp, #0]
    44ea:	b10f      	cbz	r7, 44f0 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x68>
    44ec:	2000      	movs	r0, #0
    44ee:	e000      	b.n	44f2 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x6a>
    44f0:	4668      	mov	r0, sp
    44f2:	f8b9 1000 	ldrh.w	r1, [r9]
    44f6:	f008 f910 	bl	c71a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    44fa:	b947      	cbnz	r7, 450e <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x86>
    44fc:	f8d9 1004 	ldr.w	r1, [r9, #4]
    4500:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
    4504:	f883 a004 	strb.w	sl, [r3, #4]
    4508:	9a00      	ldr	r2, [sp, #0]
    450a:	f841 2034 	str.w	r2, [r1, r4, lsl #3]
    450e:	1c64      	adds	r4, r4, #1
    4510:	4406      	add	r6, r0
    4512:	b2e4      	uxtb	r4, r4
    4514:	4544      	cmp	r4, r8
    4516:	d3e6      	bcc.n	44e6 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x5e>
    4518:	1df6      	adds	r6, r6, #7
    451a:	f026 0007 	bic.w	r0, r6, #7
    451e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4522:	0000      	.short	0x0000
    4524:	20000090 	.word	0x20000090

00004528 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>:
    4528:	4906      	ldr	r1, [pc, #24]	; (4544 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x1c>)
    452a:	b510      	push	{r4, lr}
    452c:	684a      	ldr	r2, [r1, #4]
    452e:	eb02 04c0 	add.w	r4, r2, r0, lsl #3
    4532:	2000      	movs	r0, #0
    4534:	7120      	strb	r0, [r4, #4]
    4536:	8809      	ldrh	r1, [r1, #0]
    4538:	4620      	mov	r0, r4
    453a:	f008 f8ee 	bl	c71a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    453e:	4620      	mov	r0, r4
    4540:	bd10      	pop	{r4, pc}
    4542:	0000      	.short	0x0000
    4544:	20000090 	.word	0x20000090
    4548:	4909      	ldr	r1, [pc, #36]	; (4570 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x48>)
    454a:	b510      	push	{r4, lr}
    454c:	4807      	ldr	r0, [pc, #28]	; (456c <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x44>)
    454e:	6008      	str	r0, [r1, #0]
    4550:	4b08      	ldr	r3, [pc, #32]	; (4574 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x4c>)
    4552:	2011      	movs	r0, #17
    4554:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
    4558:	2200      	movs	r2, #0
    455a:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    455e:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    4562:	1c40      	adds	r0, r0, #1
    4564:	b2c0      	uxtb	r0, r0
    4566:	2814      	cmp	r0, #20
    4568:	d3f4      	bcc.n	4554 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x2c>
    456a:	bd10      	pop	{r4, pc}
    456c:	fffe0000 	.word	0xfffe0000
    4570:	4001f508 	.word	0x4001f508
    4574:	4001f000 	.word	0x4001f000
    4578:	b570      	push	{r4, r5, r6, lr}
    457a:	2420      	movs	r4, #32
    457c:	2100      	movs	r1, #0
    457e:	2301      	movs	r3, #1
    4580:	fa20 f201 	lsr.w	r2, r0, r1
    4584:	07d2      	lsls	r2, r2, #31
    4586:	d020      	beq.n	45ca <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xa2>
    4588:	b24a      	sxtb	r2, r1
    458a:	2a00      	cmp	r2, #0
    458c:	db10      	blt.n	45b0 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x88>
    458e:	bf00      	nop
    4590:	ea4f 1652 	mov.w	r6, r2, lsr #5
    4594:	ea4f 0686 	mov.w	r6, r6, lsl #2
    4598:	f002 051f 	and.w	r5, r2, #31
    459c:	f106 26e0 	add.w	r6, r6, #3758153728	; 0xe000e000
    45a0:	fa03 f505 	lsl.w	r5, r3, r5
    45a4:	f8c6 5180 	str.w	r5, [r6, #384]	; 0x180
    45a8:	f3bf 8f4f 	dsb	sy
    45ac:	f3bf 8f6f 	isb	sy
    45b0:	db0b      	blt.n	45ca <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xa2>
    45b2:	f002 051f 	and.w	r5, r2, #31
    45b6:	ea4f 1252 	mov.w	r2, r2, lsr #5
    45ba:	ea4f 0282 	mov.w	r2, r2, lsl #2
    45be:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    45c2:	fa03 f505 	lsl.w	r5, r3, r5
    45c6:	f8c2 5280 	str.w	r5, [r2, #640]	; 0x280
    45ca:	f101 0101 	add.w	r1, r1, #1
    45ce:	42a1      	cmp	r1, r4
    45d0:	d3d6      	bcc.n	4580 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x58>
    45d2:	bd70      	pop	{r4, r5, r6, pc}
    45d4:	b570      	push	{r4, r5, r6, lr}
    45d6:	0042      	lsls	r2, r0, #1
    45d8:	f04f 0100 	mov.w	r1, #0
    45dc:	d501      	bpl.n	45e2 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xba>
    45de:	4a14      	ldr	r2, [pc, #80]	; (4630 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x108>)
    45e0:	6011      	str	r1, [r2, #0]
    45e2:	f3c0 3280 	ubfx	r2, r0, #14, #1
    45e6:	f3c0 33c0 	ubfx	r3, r0, #15, #1
    45ea:	429a      	cmp	r2, r3
    45ec:	d003      	beq.n	45f6 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xce>
    45ee:	2164      	movs	r1, #100	; 0x64
    45f0:	201b      	movs	r0, #27
    45f2:	f7ff facf 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    45f6:	f410 4f40 	tst.w	r0, #49152	; 0xc000
    45fa:	d014      	beq.n	4626 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xfe>
    45fc:	4a0d      	ldr	r2, [pc, #52]	; (4634 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x10c>)
    45fe:	2001      	movs	r0, #1
    4600:	6050      	str	r0, [r2, #4]
    4602:	1e83      	subs	r3, r0, #2
    4604:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    4608:	4a0b      	ldr	r2, [pc, #44]	; (4638 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x110>)
    460a:	6090      	str	r0, [r2, #8]
    460c:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    4610:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    4614:	4c09      	ldr	r4, [pc, #36]	; (463c <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x114>)
    4616:	6021      	str	r1, [r4, #0]
    4618:	1d25      	adds	r5, r4, #4
    461a:	6028      	str	r0, [r5, #0]
    461c:	6090      	str	r0, [r2, #8]
    461e:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    4622:	6021      	str	r1, [r4, #0]
    4624:	6028      	str	r0, [r5, #0]
    4626:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    462a:	f7ff bf8d 	b.w	4548 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x20>
    462e:	0000      	.short	0x0000
    4630:	4001e504 	.word	0x4001e504
    4634:	4000e000 	.word	0x4000e000
    4638:	4000f000 	.word	0x4000f000
    463c:	4000f500 	.word	0x4000f500

00004640 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    4640:	b570      	push	{r4, r5, r6, lr}
    4642:	4c0a      	ldr	r4, [pc, #40]	; (466c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x2c>)
    4644:	460d      	mov	r5, r1
    4646:	6020      	str	r0, [r4, #0]
    4648:	f7ff ffc4 	bl	45d4 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xac>
    464c:	6820      	ldr	r0, [r4, #0]
    464e:	f7ff ff93 	bl	4578 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x50>
    4652:	f000 f877 	bl	4744 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    4656:	f7ff ff77 	bl	4548 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x20>
    465a:	f008 f911 	bl	c880 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>
    465e:	4628      	mov	r0, r5
    4660:	f000 f8aa 	bl	47b8 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    4664:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4668:	f000 b8c2 	b.w	47f0 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    466c:	20000098 	.word	0x20000098

00004670 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    4670:	e92d 5ffc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    4674:	4e2f      	ldr	r6, [pc, #188]	; (4734 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc4>)
    4676:	4683      	mov	fp, r0
    4678:	6830      	ldr	r0, [r6, #0]
    467a:	9001      	str	r0, [sp, #4]
    467c:	2701      	movs	r7, #1
    467e:	482e      	ldr	r0, [pc, #184]	; (4738 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>)
    4680:	f006 fff4 	bl	b66c <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4684:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 4738 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>
    4688:	b920      	cbnz	r0, 4694 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x24>
    468a:	2700      	movs	r7, #0
    468c:	f108 0001 	add.w	r0, r8, #1
    4690:	f007 f803 	bl	b69a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    4694:	4c29      	ldr	r4, [pc, #164]	; (473c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xcc>)
    4696:	2500      	movs	r5, #0
    4698:	f04f 0903 	mov.w	r9, #3
    469c:	2001      	movs	r0, #1
    469e:	6060      	str	r0, [r4, #4]
    46a0:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    46a4:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    46a8:	f8c6 b000 	str.w	fp, [r6]
    46ac:	6020      	str	r0, [r4, #0]
    46ae:	f8df a090 	ldr.w	sl, [pc, #144]	; 4740 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xd0>
    46b2:	e017      	b.n	46e4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    46b4:	f8da 0000 	ldr.w	r0, [sl]
    46b8:	06c0      	lsls	r0, r0, #27
    46ba:	d513      	bpl.n	46e4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    46bc:	200e      	movs	r0, #14
    46be:	f008 f8d0 	bl	c862 <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA+0x28>
    46c2:	f3ef 8010 	mrs	r0, PRIMASK
    46c6:	9000      	str	r0, [sp, #0]
    46c8:	b672      	cpsid	i
    46ca:	f8c4 9304 	str.w	r9, [r4, #772]	; 0x304
    46ce:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    46d2:	b920      	cbnz	r0, 46de <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x6e>
    46d4:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    46d8:	b908      	cbnz	r0, 46de <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x6e>
    46da:	f7ff f8eb 	bl	38b4 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    46de:	9800      	ldr	r0, [sp, #0]
    46e0:	b900      	cbnz	r0, 46e4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    46e2:	b662      	cpsie	i
    46e4:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    46e8:	b918      	cbnz	r0, 46f2 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    46ea:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    46ee:	2800      	cmp	r0, #0
    46f0:	d0e0      	beq.n	46b4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x44>
    46f2:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    46f6:	2800      	cmp	r0, #0
    46f8:	d1d0      	bne.n	469c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x2c>
    46fa:	b137      	cbz	r7, 470a <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x9a>
    46fc:	9801      	ldr	r0, [sp, #4]
    46fe:	6030      	str	r0, [r6, #0]
    4700:	f108 0001 	add.w	r0, r8, #1
    4704:	f006 ffb2 	bl	b66c <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4708:	e011      	b.n	472e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xbe>
    470a:	f108 0001 	add.w	r0, r8, #1
    470e:	f006 ffad 	bl	b66c <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4712:	2800      	cmp	r0, #0
    4714:	d1ba      	bne.n	468c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x1c>
    4716:	f8c4 9308 	str.w	r9, [r4, #776]	; 0x308
    471a:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    471e:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    4722:	200e      	movs	r0, #14
    4724:	f008 f89d 	bl	c862 <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA+0x28>
    4728:	4803      	ldr	r0, [pc, #12]	; (4738 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>)
    472a:	f006 ffb6 	bl	b69a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    472e:	2000      	movs	r0, #0
    4730:	e8bd 9ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    4734:	4000e504 	.word	0x4000e504
    4738:	2000029b 	.word	0x2000029b
    473c:	4000e000 	.word	0x4000e000
    4740:	e000ed10 	.word	0xe000ed10

00004744 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    4744:	b510      	push	{r4, lr}
    4746:	4808      	ldr	r0, [pc, #32]	; (4768 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    4748:	f006 ffa3 	bl	b692 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    474c:	b108      	cbz	r0, 4752 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0xe>
    474e:	2124      	movs	r1, #36	; 0x24
    4750:	e006      	b.n	4760 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>
    4752:	4805      	ldr	r0, [pc, #20]	; (4768 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    4754:	1c40      	adds	r0, r0, #1
    4756:	f006 ff9c 	bl	b692 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    475a:	2800      	cmp	r0, #0
    475c:	d003      	beq.n	4766 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x22>
    475e:	2128      	movs	r1, #40	; 0x28
    4760:	201d      	movs	r0, #29
    4762:	f7ff fa17 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4766:	bd10      	pop	{r4, pc}
    4768:	2000029b 	.word	0x2000029b

0000476c <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    476c:	b570      	push	{r4, r5, r6, lr}
    476e:	4911      	ldr	r1, [pc, #68]	; (47b4 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    4770:	680a      	ldr	r2, [r1, #0]
    4772:	b1ea      	cbz	r2, 47b0 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    4774:	2300      	movs	r3, #0
    4776:	461d      	mov	r5, r3
    4778:	2401      	movs	r4, #1
    477a:	684a      	ldr	r2, [r1, #4]
    477c:	1c52      	adds	r2, r2, #1
    477e:	604a      	str	r2, [r1, #4]
    4780:	2a09      	cmp	r2, #9
    4782:	d300      	bcc.n	4786 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    4784:	604d      	str	r5, [r1, #4]
    4786:	790e      	ldrb	r6, [r1, #4]
    4788:	fa04 f206 	lsl.w	r2, r4, r6
    478c:	680e      	ldr	r6, [r1, #0]
    478e:	4216      	tst	r6, r2
    4790:	d00b      	beq.n	47aa <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    4792:	f3ef 8310 	mrs	r3, PRIMASK
    4796:	b672      	cpsid	i
    4798:	680c      	ldr	r4, [r1, #0]
    479a:	4394      	bics	r4, r2
    479c:	600c      	str	r4, [r1, #0]
    479e:	b903      	cbnz	r3, 47a2 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    47a0:	b662      	cpsie	i
    47a2:	6849      	ldr	r1, [r1, #4]
    47a4:	6001      	str	r1, [r0, #0]
    47a6:	2000      	movs	r0, #0
    47a8:	bd70      	pop	{r4, r5, r6, pc}
    47aa:	1c5b      	adds	r3, r3, #1
    47ac:	2b09      	cmp	r3, #9
    47ae:	d3e4      	bcc.n	477a <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    47b0:	2005      	movs	r0, #5
    47b2:	bd70      	pop	{r4, r5, r6, pc}
    47b4:	2000009c 	.word	0x2000009c

000047b8 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    47b8:	4802      	ldr	r0, [pc, #8]	; (47c4 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    47ba:	2100      	movs	r1, #0
    47bc:	6001      	str	r1, [r0, #0]
    47be:	6041      	str	r1, [r0, #4]
    47c0:	4770      	bx	lr
    47c2:	0000      	.short	0x0000
    47c4:	2000009c 	.word	0x2000009c

000047c8 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    47c8:	b510      	push	{r4, lr}
    47ca:	4c08      	ldr	r4, [pc, #32]	; (47ec <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    47cc:	7861      	ldrb	r1, [r4, #1]
    47ce:	b109      	cbz	r1, 47d4 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    47d0:	200f      	movs	r0, #15
    47d2:	bd10      	pop	{r4, pc}
    47d4:	f7fe fffa 	bl	37cc <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    47d8:	7020      	strb	r0, [r4, #0]
    47da:	28ff      	cmp	r0, #255	; 0xff
    47dc:	d001      	beq.n	47e2 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    47de:	2000      	movs	r0, #0
    47e0:	bd10      	pop	{r4, pc}
    47e2:	2176      	movs	r1, #118	; 0x76
    47e4:	201f      	movs	r0, #31
    47e6:	f7ff f9d5 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    47ea:	0000      	.short	0x0000
    47ec:	200000a4 	.word	0x200000a4

000047f0 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    47f0:	4901      	ldr	r1, [pc, #4]	; (47f8 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    47f2:	2000      	movs	r0, #0
    47f4:	7048      	strb	r0, [r1, #1]
    47f6:	4770      	bx	lr
    47f8:	200000a4 	.word	0x200000a4

000047fc <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    47fc:	4806      	ldr	r0, [pc, #24]	; (4818 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    47fe:	4a07      	ldr	r2, [pc, #28]	; (481c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    4800:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    4802:	8852      	ldrh	r2, [r2, #2]
    4804:	4291      	cmp	r1, r2
    4806:	d104      	bne.n	4812 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    4808:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    480c:	b108      	cbz	r0, 4812 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    480e:	2000      	movs	r0, #0
    4810:	4770      	bx	lr
    4812:	2001      	movs	r0, #1
    4814:	4770      	bx	lr
    4816:	0000      	.short	0x0000
    4818:	20000f0a 	.word	0x20000f0a
    481c:	20000288 	.word	0x20000288

00004820 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    4820:	4901      	ldr	r1, [pc, #4]	; (4828 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    4822:	8048      	strh	r0, [r1, #2]
    4824:	4770      	bx	lr
    4826:	0000      	.short	0x0000
    4828:	20000288 	.word	0x20000288

0000482c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    482c:	4808      	ldr	r0, [pc, #32]	; (4850 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    482e:	4a09      	ldr	r2, [pc, #36]	; (4854 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    4830:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    4832:	8852      	ldrh	r2, [r2, #2]
    4834:	4291      	cmp	r1, r2
    4836:	d109      	bne.n	484c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    4838:	f64f 71ff 	movw	r1, #65535	; 0xffff
    483c:	8481      	strh	r1, [r0, #36]	; 0x24
    483e:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    4842:	b119      	cbz	r1, 484c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    4844:	2100      	movs	r1, #0
    4846:	7001      	strb	r1, [r0, #0]
    4848:	2001      	movs	r0, #1
    484a:	4770      	bx	lr
    484c:	2000      	movs	r0, #0
    484e:	4770      	bx	lr
    4850:	20000f0a 	.word	0x20000f0a
    4854:	20000288 	.word	0x20000288

00004858 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    4858:	4807      	ldr	r0, [pc, #28]	; (4878 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    485a:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    485e:	2901      	cmp	r1, #1
    4860:	d007      	beq.n	4872 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    4862:	2101      	movs	r1, #1
    4864:	7001      	strb	r1, [r0, #0]
    4866:	4805      	ldr	r0, [pc, #20]	; (487c <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    4868:	4903      	ldr	r1, [pc, #12]	; (4878 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    486a:	8800      	ldrh	r0, [r0, #0]
    486c:	8488      	strh	r0, [r1, #36]	; 0x24
    486e:	2001      	movs	r0, #1
    4870:	4770      	bx	lr
    4872:	2000      	movs	r0, #0
    4874:	4770      	bx	lr
    4876:	0000      	.short	0x0000
    4878:	20000f0a 	.word	0x20000f0a
    487c:	20000288 	.word	0x20000288

00004880 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    4880:	4906      	ldr	r1, [pc, #24]	; (489c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    4882:	4b07      	ldr	r3, [pc, #28]	; (48a0 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    4884:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    4886:	885b      	ldrh	r3, [r3, #2]
    4888:	429a      	cmp	r2, r3
    488a:	d105      	bne.n	4898 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    488c:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    4890:	b112      	cbz	r2, 4898 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    4892:	6001      	str	r1, [r0, #0]
    4894:	2001      	movs	r0, #1
    4896:	4770      	bx	lr
    4898:	2000      	movs	r0, #0
    489a:	4770      	bx	lr
    489c:	20000f0a 	.word	0x20000f0a
    48a0:	20000288 	.word	0x20000288

000048a4 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    48a4:	4909      	ldr	r1, [pc, #36]	; (48cc <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    48a6:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    48a8:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    48ac:	3bff      	subs	r3, #255	; 0xff
    48ae:	d002      	beq.n	48b6 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    48b0:	2100      	movs	r1, #0
    48b2:	6001      	str	r1, [r0, #0]
    48b4:	e007      	b.n	48c6 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    48b6:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    48ba:	4904      	ldr	r1, [pc, #16]	; (48cc <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    48bc:	2a01      	cmp	r2, #1
    48be:	d002      	beq.n	48c6 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    48c0:	6001      	str	r1, [r0, #0]
    48c2:	2001      	movs	r0, #1
    48c4:	4770      	bx	lr
    48c6:	2000      	movs	r0, #0
    48c8:	4770      	bx	lr
    48ca:	0000      	.short	0x0000
    48cc:	20000f0a 	.word	0x20000f0a

000048d0 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    48d0:	4901      	ldr	r1, [pc, #4]	; (48d8 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    48d2:	8008      	strh	r0, [r1, #0]
    48d4:	4770      	bx	lr
    48d6:	0000      	.short	0x0000
    48d8:	20000288 	.word	0x20000288

000048dc <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    48dc:	4905      	ldr	r1, [pc, #20]	; (48f4 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    48de:	2000      	movs	r0, #0
    48e0:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    48e4:	f64f 70ff 	movw	r0, #65535	; 0xffff
    48e8:	8488      	strh	r0, [r1, #36]	; 0x24
    48ea:	4903      	ldr	r1, [pc, #12]	; (48f8 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    48ec:	8008      	strh	r0, [r1, #0]
    48ee:	8048      	strh	r0, [r1, #2]
    48f0:	4770      	bx	lr
    48f2:	0000      	.short	0x0000
    48f4:	20000f0a 	.word	0x20000f0a
    48f8:	20000288 	.word	0x20000288
    48fc:	4905      	ldr	r1, [pc, #20]	; (4914 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    48fe:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    4900:	4282      	cmp	r2, r0
    4902:	d105      	bne.n	4910 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    4904:	2000      	movs	r0, #0
    4906:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    490a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    490e:	8488      	strh	r0, [r1, #36]	; 0x24
    4910:	4770      	bx	lr
    4912:	0000      	.short	0x0000
    4914:	20000f0a 	.word	0x20000f0a

00004918 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    4918:	4a0a      	ldr	r2, [pc, #40]	; (4944 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    491a:	b110      	cbz	r0, 4922 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    491c:	2801      	cmp	r0, #1
    491e:	d007      	beq.n	4930 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    4920:	e00e      	b.n	4940 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4922:	7850      	ldrb	r0, [r2, #1]
    4924:	b160      	cbz	r0, 4940 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4926:	f8d2 0002 	ldr.w	r0, [r2, #2]
    492a:	6008      	str	r0, [r1, #0]
    492c:	88d0      	ldrh	r0, [r2, #6]
    492e:	e004      	b.n	493a <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    4930:	7810      	ldrb	r0, [r2, #0]
    4932:	b128      	cbz	r0, 4940 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4934:	6890      	ldr	r0, [r2, #8]
    4936:	6008      	str	r0, [r1, #0]
    4938:	8990      	ldrh	r0, [r2, #12]
    493a:	8088      	strh	r0, [r1, #4]
    493c:	2001      	movs	r0, #1
    493e:	4770      	bx	lr
    4940:	2000      	movs	r0, #0
    4942:	4770      	bx	lr
    4944:	2000029d 	.word	0x2000029d

00004948 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    4948:	4a08      	ldr	r2, [pc, #32]	; (496c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    494a:	2301      	movs	r3, #1
    494c:	b138      	cbz	r0, 495e <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    494e:	2801      	cmp	r0, #1
    4950:	d104      	bne.n	495c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    4952:	7013      	strb	r3, [r2, #0]
    4954:	6808      	ldr	r0, [r1, #0]
    4956:	6090      	str	r0, [r2, #8]
    4958:	8888      	ldrh	r0, [r1, #4]
    495a:	8190      	strh	r0, [r2, #12]
    495c:	4770      	bx	lr
    495e:	7053      	strb	r3, [r2, #1]
    4960:	6808      	ldr	r0, [r1, #0]
    4962:	f8c2 0002 	str.w	r0, [r2, #2]
    4966:	8888      	ldrh	r0, [r1, #4]
    4968:	80d0      	strh	r0, [r2, #6]
    496a:	4770      	bx	lr
    496c:	2000029d 	.word	0x2000029d

00004970 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    4970:	4906      	ldr	r1, [pc, #24]	; (498c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    4972:	b110      	cbz	r0, 497a <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    4974:	2801      	cmp	r0, #1
    4976:	d002      	beq.n	497e <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    4978:	e005      	b.n	4986 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    497a:	7848      	ldrb	r0, [r1, #1]
    497c:	e000      	b.n	4980 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    497e:	7808      	ldrb	r0, [r1, #0]
    4980:	b108      	cbz	r0, 4986 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    4982:	2001      	movs	r0, #1
    4984:	4770      	bx	lr
    4986:	2000      	movs	r0, #0
    4988:	4770      	bx	lr
    498a:	0000      	.short	0x0000
    498c:	2000029d 	.word	0x2000029d

00004990 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    4990:	4901      	ldr	r1, [pc, #4]	; (4998 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    4992:	7448      	strb	r0, [r1, #17]
    4994:	4770      	bx	lr
    4996:	0000      	.short	0x0000
    4998:	2000093a 	.word	0x2000093a

0000499c <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>:
    499c:	4801      	ldr	r0, [pc, #4]	; (49a4 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ+0x8>)
    499e:	78c0      	ldrb	r0, [r0, #3]
    49a0:	4770      	bx	lr
    49a2:	0000      	.short	0x0000
    49a4:	200000c0 	.word	0x200000c0

000049a8 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>:
    49a8:	4801      	ldr	r0, [pc, #4]	; (49b0 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY+0x8>)
    49aa:	7900      	ldrb	r0, [r0, #4]
    49ac:	4770      	bx	lr
    49ae:	0000      	.short	0x0000
    49b0:	200000c0 	.word	0x200000c0

000049b4 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I>:
    49b4:	b578      	push	{r3, r4, r5, r6, lr}
    49b6:	4913      	ldr	r1, [pc, #76]	; (4a04 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x50>)
    49b8:	7c4a      	ldrb	r2, [r1, #17]
    49ba:	b30a      	cbz	r2, 4a00 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
    49bc:	7c0a      	ldrb	r2, [r1, #16]
    49be:	f88d 2000 	strb.w	r2, [sp]
    49c2:	9a00      	ldr	r2, [sp, #0]
    49c4:	9200      	str	r2, [sp, #0]
    49c6:	f89d 2000 	ldrb.w	r2, [sp]
    49ca:	b1ca      	cbz	r2, 4a00 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
    49cc:	2300      	movs	r3, #0
    49ce:	f101 0210 	add.w	r2, r1, #16
    49d2:	241a      	movs	r4, #26
    49d4:	f1a1 0552 	sub.w	r5, r1, #82	; 0x52
    49d8:	7c0e      	ldrb	r6, [r1, #16]
    49da:	f88d 6000 	strb.w	r6, [sp]
    49de:	9e00      	ldr	r6, [sp, #0]
    49e0:	9600      	str	r6, [sp, #0]
    49e2:	f89d 6000 	ldrb.w	r6, [sp]
    49e6:	b14e      	cbz	r6, 49fc <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x48>
    49e8:	7013      	strb	r3, [r2, #0]
    49ea:	7043      	strb	r3, [r0, #1]
    49ec:	7004      	strb	r4, [r0, #0]
    49ee:	f8d5 605a 	ldr.w	r6, [r5, #90]	; 0x5a
    49f2:	6046      	str	r6, [r0, #4]
    49f4:	f8d5 605e 	ldr.w	r6, [r5, #94]	; 0x5e
    49f8:	6086      	str	r6, [r0, #8]
    49fa:	e7ed      	b.n	49d8 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x24>
    49fc:	2001      	movs	r0, #1
    49fe:	bd78      	pop	{r3, r4, r5, r6, pc}
    4a00:	2000      	movs	r0, #0
    4a02:	bd78      	pop	{r3, r4, r5, r6, pc}
    4a04:	2000093a 	.word	0x2000093a

00004a08 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    4a08:	b510      	push	{r4, lr}
    4a0a:	4604      	mov	r4, r0
    4a0c:	f000 f946 	bl	4c9c <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    4a10:	b118      	cbz	r0, 4a1a <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x12>
    4a12:	21bd      	movs	r1, #189	; 0xbd
    4a14:	2027      	movs	r0, #39	; 0x27
    4a16:	f7ff f8bd 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4a1a:	4803      	ldr	r0, [pc, #12]	; (4a28 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x20>)
    4a1c:	2101      	movs	r1, #1
    4a1e:	f008 fb0c 	bl	d03a <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    4a22:	4802      	ldr	r0, [pc, #8]	; (4a2c <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
    4a24:	62c4      	str	r4, [r0, #44]	; 0x2c
    4a26:	bd10      	pop	{r4, pc}
    4a28:	20000918 	.word	0x20000918
    4a2c:	200000c0 	.word	0x200000c0

00004a30 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    4a30:	4901      	ldr	r1, [pc, #4]	; (4a38 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    4a32:	2001      	movs	r0, #1
    4a34:	7188      	strb	r0, [r1, #6]
    4a36:	4770      	bx	lr
    4a38:	200000c0 	.word	0x200000c0

00004a3c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    4a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4a40:	4d57      	ldr	r5, [pc, #348]	; (4ba0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x164>)
    4a42:	9c08      	ldr	r4, [sp, #32]
    4a44:	782e      	ldrb	r6, [r5, #0]
    4a46:	2e00      	cmp	r6, #0
    4a48:	d16e      	bne.n	4b28 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xec>
    4a4a:	2a00      	cmp	r2, #0
    4a4c:	d06c      	beq.n	4b28 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xec>
    4a4e:	2b00      	cmp	r3, #0
    4a50:	d06a      	beq.n	4b28 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xec>
    4a52:	2c00      	cmp	r4, #0
    4a54:	d068      	beq.n	4b28 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xec>
    4a56:	f105 0614 	add.w	r6, r5, #20
    4a5a:	e9c5 010e 	strd	r0, r1, [r5, #56]	; 0x38
    4a5e:	e886 001c 	stmia.w	r6, {r2, r3, r4}
    4a62:	2700      	movs	r7, #0
    4a64:	71af      	strb	r7, [r5, #6]
    4a66:	716f      	strb	r7, [r5, #5]
    4a68:	70ef      	strb	r7, [r5, #3]
    4a6a:	70af      	strb	r7, [r5, #2]
    4a6c:	712f      	strb	r7, [r5, #4]
    4a6e:	81af      	strh	r7, [r5, #12]
    4a70:	81ef      	strh	r7, [r5, #14]
    4a72:	f000 f94b 	bl	4d0c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    4a76:	4606      	mov	r6, r0
    4a78:	f000 f942 	bl	4d00 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    4a7c:	4604      	mov	r4, r0
    4a7e:	f005 ffd1 	bl	aa24 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    4a82:	f005 fca9 	bl	a3d8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    4a86:	f994 0066 	ldrsb.w	r0, [r4, #102]	; 0x66
    4a8a:	f006 f853 	bl	ab34 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    4a8e:	f104 0010 	add.w	r0, r4, #16
    4a92:	f006 f93d 	bl	ad10 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    4a96:	f104 000c 	add.w	r0, r4, #12
    4a9a:	f006 f92d 	bl	acf8 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    4a9e:	f896 0023 	ldrb.w	r0, [r6, #35]	; 0x23
    4aa2:	f006 f94f 	bl	ad44 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    4aa6:	f105 0038 	add.w	r0, r5, #56	; 0x38
    4aaa:	6840      	ldr	r0, [r0, #4]
    4aac:	f890 016c 	ldrb.w	r0, [r0, #364]	; 0x16c
    4ab0:	b108      	cbz	r0, 4ab6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x7a>
    4ab2:	f005 ff05 	bl	a8c0 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>
    4ab6:	f894 1063 	ldrb.w	r1, [r4, #99]	; 0x63
    4aba:	2001      	movs	r0, #1
    4abc:	f005 fe30 	bl	a720 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    4ac0:	2800      	cmp	r0, #0
    4ac2:	d066      	beq.n	4b92 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x156>
    4ac4:	46ba      	mov	sl, r7
    4ac6:	2001      	movs	r0, #1
    4ac8:	f005 ff3a 	bl	a940 <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA>
    4acc:	4835      	ldr	r0, [pc, #212]	; (4ba4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x168>)
    4ace:	f005 fea3 	bl	a818 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    4ad2:	8820      	ldrh	r0, [r4, #0]
    4ad4:	f7ff fca8 	bl	4428 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    4ad8:	6328      	str	r0, [r5, #48]	; 0x30
    4ada:	8820      	ldrh	r0, [r4, #0]
    4adc:	f7ff fc8e 	bl	43fc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    4ae0:	f106 0160 	add.w	r1, r6, #96	; 0x60
    4ae4:	6368      	str	r0, [r5, #52]	; 0x34
    4ae6:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 4ba8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x16c>
    4aea:	c98e      	ldmia	r1, {r1, r2, r3, r7}
    4aec:	f109 0808 	add.w	r8, r9, #8
    4af0:	e888 008e 	stmia.w	r8, {r1, r2, r3, r7}
    4af4:	6f31      	ldr	r1, [r6, #112]	; 0x70
    4af6:	f8c9 1021 	str.w	r1, [r9, #33]	; 0x21
    4afa:	6f71      	ldr	r1, [r6, #116]	; 0x74
    4afc:	f8c9 1025 	str.w	r1, [r9, #37]	; 0x25
    4b00:	f000 f976 	bl	4df0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x138>
    4b04:	4601      	mov	r1, r0
    4b06:	8e20      	ldrh	r0, [r4, #48]	; 0x30
    4b08:	f008 f81a 	bl	cb40 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    4b0c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
    4b0e:	4281      	cmp	r1, r0
    4b10:	d200      	bcs.n	4b14 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xd8>
    4b12:	4608      	mov	r0, r1
    4b14:	7228      	strb	r0, [r5, #8]
    4b16:	46a8      	mov	r8, r5
    4b18:	f894 1063 	ldrb.w	r1, [r4, #99]	; 0x63
    4b1c:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
    4b1e:	7cf7      	ldrb	r7, [r6, #19]
    4b20:	8ea5      	ldrh	r5, [r4, #52]	; 0x34
    4b22:	2908      	cmp	r1, #8
    4b24:	d104      	bne.n	4b30 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xf4>
    4b26:	e002      	b.n	4b2e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xf2>
    4b28:	f44f 718a 	mov.w	r1, #276	; 0x114
    4b2c:	e035      	b.n	4b9a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x15e>
    4b2e:	2104      	movs	r1, #4
    4b30:	f008 f806 	bl	cb40 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    4b34:	b90f      	cbnz	r7, 4b3a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfe>
    4b36:	1d00      	adds	r0, r0, #4
    4b38:	b280      	uxth	r0, r0
    4b3a:	4285      	cmp	r5, r0
    4b3c:	d200      	bcs.n	4b40 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x104>
    4b3e:	4628      	mov	r0, r5
    4b40:	b2c0      	uxtb	r0, r0
    4b42:	f888 0009 	strb.w	r0, [r8, #9]
    4b46:	7cf2      	ldrb	r2, [r6, #19]
    4b48:	b102      	cbz	r2, 4b4c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x110>
    4b4a:	2204      	movs	r2, #4
    4b4c:	4410      	add	r0, r2
    4b4e:	b2c0      	uxtb	r0, r0
    4b50:	f888 0007 	strb.w	r0, [r8, #7]
    4b54:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
    4b58:	1d09      	adds	r1, r1, #4
    4b5a:	4281      	cmp	r1, r0
    4b5c:	d202      	bcs.n	4b64 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x128>
    4b5e:	f240 11a1 	movw	r1, #417	; 0x1a1
    4b62:	e01a      	b.n	4b9a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x15e>
    4b64:	4655      	mov	r5, sl
    4b66:	2001      	movs	r0, #1
    4b68:	f000 fb46 	bl	51f8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x540>
    4b6c:	480f      	ldr	r0, [pc, #60]	; (4bac <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x170>)
    4b6e:	6800      	ldr	r0, [r0, #0]
    4b70:	2803      	cmp	r0, #3
    4b72:	d010      	beq.n	4b96 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x15a>
    4b74:	280b      	cmp	r0, #11
    4b76:	d00e      	beq.n	4b96 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x15a>
    4b78:	4648      	mov	r0, r9
    4b7a:	f840 5f52 	str.w	r5, [r0, #82]!
    4b7e:	6045      	str	r5, [r0, #4]
    4b80:	4809      	ldr	r0, [pc, #36]	; (4ba8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x16c>)
    4b82:	88b1      	ldrh	r1, [r6, #4]
    4b84:	3052      	adds	r0, #82	; 0x52
    4b86:	8041      	strh	r1, [r0, #2]
    4b88:	8821      	ldrh	r1, [r4, #0]
    4b8a:	8001      	strh	r1, [r0, #0]
    4b8c:	f896 1023 	ldrb.w	r1, [r6, #35]	; 0x23
    4b90:	7101      	strb	r1, [r0, #4]
    4b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4b96:	f240 11b1 	movw	r1, #433	; 0x1b1
    4b9a:	2027      	movs	r0, #39	; 0x27
    4b9c:	f7fe fffa 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4ba0:	200000c0 	.word	0x200000c0
    4ba4:	00005424 	.word	0x00005424
    4ba8:	200008e8 	.word	0x200008e8
    4bac:	40001550 	.word	0x40001550

00004bb0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    4bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4bb4:	4605      	mov	r5, r0
    4bb6:	f000 f8a9 	bl	4d0c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    4bba:	4e33      	ldr	r6, [pc, #204]	; (4c88 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xd8>)
    4bbc:	4604      	mov	r4, r0
    4bbe:	6a70      	ldr	r0, [r6, #36]	; 0x24
    4bc0:	7847      	ldrb	r7, [r0, #1]
    4bc2:	b10d      	cbz	r5, 4bc8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x18>
    4bc4:	2d01      	cmp	r5, #1
    4bc6:	d103      	bne.n	4bd0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x20>
    4bc8:	6b71      	ldr	r1, [r6, #52]	; 0x34
    4bca:	f006 ff49 	bl	ba60 <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>
    4bce:	7070      	strb	r0, [r6, #1]
    4bd0:	7870      	ldrb	r0, [r6, #1]
    4bd2:	f04f 0800 	mov.w	r8, #0
    4bd6:	f04f 0901 	mov.w	r9, #1
    4bda:	b150      	cbz	r0, 4bf2 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x42>
    4bdc:	2801      	cmp	r0, #1
    4bde:	d01a      	beq.n	4c16 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x66>
    4be0:	2802      	cmp	r0, #2
    4be2:	d034      	beq.n	4c4e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x9e>
    4be4:	2803      	cmp	r0, #3
    4be6:	d048      	beq.n	4c7a <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xca>
    4be8:	f240 31f1 	movw	r1, #1009	; 0x3f1
    4bec:	2027      	movs	r0, #39	; 0x27
    4bee:	f7fe ffd1 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4bf2:	2d01      	cmp	r5, #1
    4bf4:	d032      	beq.n	4c5c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    4bf6:	f000 f8e7 	bl	4dc8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x110>
    4bfa:	4639      	mov	r1, r7
    4bfc:	2201      	movs	r2, #1
    4bfe:	6b70      	ldr	r0, [r6, #52]	; 0x34
    4c00:	f007 fb52 	bl	c2a8 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    4c04:	e028      	b.n	4c58 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa8>
    4c06:	bf00      	nop
    4c08:	f884 8008 	strb.w	r8, [r4, #8]
    4c0c:	e031      	b.n	4c72 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    4c0e:	bf00      	nop
    4c10:	f884 9008 	strb.w	r9, [r4, #8]
    4c14:	e02d      	b.n	4c72 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    4c16:	2d01      	cmp	r5, #1
    4c18:	d008      	beq.n	4c2c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x7c>
    4c1a:	f000 f8d5 	bl	4dc8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x110>
    4c1e:	4639      	mov	r1, r7
    4c20:	2200      	movs	r2, #0
    4c22:	6b70      	ldr	r0, [r6, #52]	; 0x34
    4c24:	f007 fb40 	bl	c2a8 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    4c28:	2d02      	cmp	r5, #2
    4c2a:	d00b      	beq.n	4c44 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4c2c:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    4c30:	1c40      	adds	r0, r0, #1
    4c32:	f141 0100 	adc.w	r1, r1, #0
    4c36:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    4c3a:	7a20      	ldrb	r0, [r4, #8]
    4c3c:	2801      	cmp	r0, #1
    4c3e:	d003      	beq.n	4c48 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x98>
    4c40:	f884 9008 	strb.w	r9, [r4, #8]
    4c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4c48:	f884 8008 	strb.w	r8, [r4, #8]
    4c4c:	e7fa      	b.n	4c44 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4c4e:	2d01      	cmp	r5, #1
    4c50:	d004      	beq.n	4c5c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    4c52:	6b70      	ldr	r0, [r6, #52]	; 0x34
    4c54:	f007 fd2e 	bl	c6b4 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    4c58:	2d02      	cmp	r5, #2
    4c5a:	d0f3      	beq.n	4c44 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4c5c:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    4c60:	1c40      	adds	r0, r0, #1
    4c62:	f141 0100 	adc.w	r1, r1, #0
    4c66:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    4c6a:	7a20      	ldrb	r0, [r4, #8]
    4c6c:	2801      	cmp	r0, #1
    4c6e:	d1cf      	bne.n	4c10 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x60>
    4c70:	e7ca      	b.n	4c08 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x58>
    4c72:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4c76:	f004 bee9 	b.w	9a4c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    4c7a:	2d01      	cmp	r5, #1
    4c7c:	d0e2      	beq.n	4c44 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4c7e:	6b70      	ldr	r0, [r6, #52]	; 0x34
    4c80:	f007 fd18 	bl	c6b4 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    4c84:	e7f5      	b.n	4c72 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    4c86:	0000      	.short	0x0000
    4c88:	200000c0 	.word	0x200000c0

00004c8c <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>:
    4c8c:	4802      	ldr	r0, [pc, #8]	; (4c98 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI+0xc>)
    4c8e:	89c0      	ldrh	r0, [r0, #14]
    4c90:	f3c0 2080 	ubfx	r0, r0, #10, #1
    4c94:	4770      	bx	lr
    4c96:	0000      	.short	0x0000
    4c98:	200000c0 	.word	0x200000c0

00004c9c <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    4c9c:	4804      	ldr	r0, [pc, #16]	; (4cb0 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
    4c9e:	7800      	ldrb	r0, [r0, #0]
    4ca0:	b108      	cbz	r0, 4ca6 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0xa>
    4ca2:	200c      	movs	r0, #12
    4ca4:	4770      	bx	lr
    4ca6:	4903      	ldr	r1, [pc, #12]	; (4cb4 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
    4ca8:	2000      	movs	r0, #0
    4caa:	7448      	strb	r0, [r1, #17]
    4cac:	4770      	bx	lr
    4cae:	0000      	.short	0x0000
    4cb0:	200000c0 	.word	0x200000c0
    4cb4:	2000093a 	.word	0x2000093a

00004cb8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    4cb8:	480c      	ldr	r0, [pc, #48]	; (4cec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34>)
    4cba:	b510      	push	{r4, lr}
    4cbc:	7801      	ldrb	r1, [r0, #0]
    4cbe:	b149      	cbz	r1, 4cd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c>
    4cc0:	f100 0138 	add.w	r1, r0, #56	; 0x38
    4cc4:	7800      	ldrb	r0, [r0, #0]
    4cc6:	2802      	cmp	r0, #2
    4cc8:	d008      	beq.n	4cdc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24>
    4cca:	f240 11cd 	movw	r1, #461	; 0x1cd
    4cce:	2027      	movs	r0, #39	; 0x27
    4cd0:	f7fe ff60 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4cd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4cd8:	f000 b9a6 	b.w	5028 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x370>
    4cdc:	6848      	ldr	r0, [r1, #4]
    4cde:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    4ce2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4ce6:	f005 bd9f 	b.w	a828 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>
    4cea:	0000      	.short	0x0000
    4cec:	200000c0 	.word	0x200000c0
    4cf0:	4a02      	ldr	r2, [pc, #8]	; (4cfc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44>)
    4cf2:	8993      	ldrh	r3, [r2, #12]
    4cf4:	4303      	orrs	r3, r0
    4cf6:	8193      	strh	r3, [r2, #12]
    4cf8:	6952      	ldr	r2, [r2, #20]
    4cfa:	4710      	bx	r2
    4cfc:	200000c0 	.word	0x200000c0
    4d00:	4801      	ldr	r0, [pc, #4]	; (4d08 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>)
    4d02:	6840      	ldr	r0, [r0, #4]
    4d04:	4770      	bx	lr
    4d06:	0000      	.short	0x0000
    4d08:	200000f8 	.word	0x200000f8
    4d0c:	4801      	ldr	r0, [pc, #4]	; (4d14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c>)
    4d0e:	6840      	ldr	r0, [r0, #4]
    4d10:	3068      	adds	r0, #104	; 0x68
    4d12:	4770      	bx	lr
    4d14:	200000f8 	.word	0x200000f8
    4d18:	4a01      	ldr	r2, [pc, #4]	; (4d20 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68>)
    4d1a:	2100      	movs	r1, #0
    4d1c:	6952      	ldr	r2, [r2, #20]
    4d1e:	4710      	bx	r2
    4d20:	200000c0 	.word	0x200000c0
    4d24:	b570      	push	{r4, r5, r6, lr}
    4d26:	f7ff fff1 	bl	4d0c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    4d2a:	4604      	mov	r4, r0
    4d2c:	f7ff ffe8 	bl	4d00 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    4d30:	4605      	mov	r5, r0
    4d32:	4621      	mov	r1, r4
    4d34:	f007 ff87 	bl	cc46 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>
    4d38:	7fa9      	ldrb	r1, [r5, #30]
    4d3a:	2901      	cmp	r1, #1
    4d3c:	d114      	bne.n	4d68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb0>
    4d3e:	2800      	cmp	r0, #0
    4d40:	d012      	beq.n	4d68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb0>
    4d42:	480a      	ldr	r0, [pc, #40]	; (4d6c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb4>)
    4d44:	6842      	ldr	r2, [r0, #4]
    4d46:	8828      	ldrh	r0, [r5, #0]
    4d48:	f8a2 01ee 	strh.w	r0, [r2, #494]	; 0x1ee
    4d4c:	7a60      	ldrb	r0, [r4, #9]
    4d4e:	f882 01f0 	strb.w	r0, [r2, #496]	; 0x1f0
    4d52:	7aa0      	ldrb	r0, [r4, #10]
    4d54:	f882 01f1 	strb.w	r0, [r2, #497]	; 0x1f1
    4d58:	f502 72f6 	add.w	r2, r2, #492	; 0x1ec
    4d5c:	2001      	movs	r0, #1
    4d5e:	7010      	strb	r0, [r2, #0]
    4d60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4d64:	f004 be72 	b.w	9a4c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    4d68:	bd70      	pop	{r4, r5, r6, pc}
    4d6a:	0000      	.short	0x0000
    4d6c:	200000f8 	.word	0x200000f8
    4d70:	b570      	push	{r4, r5, r6, lr}
    4d72:	4605      	mov	r5, r0
    4d74:	2901      	cmp	r1, #1
    4d76:	d818      	bhi.n	4daa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    4d78:	4c12      	ldr	r4, [pc, #72]	; (4dc4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>)
    4d7a:	69a1      	ldr	r1, [r4, #24]
    4d7c:	4788      	blx	r1
    4d7e:	b1a0      	cbz	r0, 4daa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    4d80:	7960      	ldrb	r0, [r4, #5]
    4d82:	b990      	cbnz	r0, 4daa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    4d84:	b9e5      	cbnz	r5, 4dc0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x108>
    4d86:	f104 0010 	add.w	r0, r4, #16
    4d8a:	7801      	ldrb	r1, [r0, #0]
    4d8c:	06c8      	lsls	r0, r1, #27
    4d8e:	d405      	bmi.n	4d9c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe4>
    4d90:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    4d92:	7800      	ldrb	r0, [r0, #0]
    4d94:	06c0      	lsls	r0, r0, #27
    4d96:	d401      	bmi.n	4d9c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe4>
    4d98:	2001      	movs	r0, #1
    4d9a:	e000      	b.n	4d9e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe6>
    4d9c:	2000      	movs	r0, #0
    4d9e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    4da0:	b92a      	cbnz	r2, 4dae <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf6>
    4da2:	8962      	ldrh	r2, [r4, #10]
    4da4:	b11a      	cbz	r2, 4dae <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf6>
    4da6:	06c9      	lsls	r1, r1, #27
    4da8:	d401      	bmi.n	4dae <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf6>
    4daa:	2001      	movs	r0, #1
    4dac:	bd70      	pop	{r4, r5, r6, pc}
    4dae:	89a1      	ldrh	r1, [r4, #12]
    4db0:	078a      	lsls	r2, r1, #30
    4db2:	d503      	bpl.n	4dbc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x104>
    4db4:	6a22      	ldr	r2, [r4, #32]
    4db6:	78d2      	ldrb	r2, [r2, #3]
    4db8:	2a02      	cmp	r2, #2
    4dba:	d001      	beq.n	4dc0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x108>
    4dbc:	4308      	orrs	r0, r1
    4dbe:	d1f4      	bne.n	4daa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    4dc0:	2000      	movs	r0, #0
    4dc2:	bd70      	pop	{r4, r5, r6, pc}
    4dc4:	200000c0 	.word	0x200000c0
    4dc8:	b510      	push	{r4, lr}
    4dca:	4c08      	ldr	r4, [pc, #32]	; (4dec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x134>)
    4dcc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    4dce:	b138      	cbz	r0, 4de0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x128>
    4dd0:	8962      	ldrh	r2, [r4, #10]
    4dd2:	6a61      	ldr	r1, [r4, #36]	; 0x24
    4dd4:	1cd2      	adds	r2, r2, #3
    4dd6:	f006 fcf2 	bl	b7be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4dda:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    4ddc:	6260      	str	r0, [r4, #36]	; 0x24
    4dde:	bd10      	pop	{r4, pc}
    4de0:	f44f 6187 	mov.w	r1, #1080	; 0x438
    4de4:	2027      	movs	r0, #39	; 0x27
    4de6:	f7fe fed5 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4dea:	0000      	.short	0x0000
    4dec:	200000c0 	.word	0x200000c0
    4df0:	b510      	push	{r4, lr}
    4df2:	f7ff ff85 	bl	4d00 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    4df6:	4604      	mov	r4, r0
    4df8:	f7ff ff88 	bl	4d0c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    4dfc:	4601      	mov	r1, r0
    4dfe:	7b42      	ldrb	r2, [r0, #13]
    4e00:	4815      	ldr	r0, [pc, #84]	; (4e58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1a0>)
    4e02:	2a24      	cmp	r2, #36	; 0x24
    4e04:	d00e      	beq.n	4e24 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16c>
    4e06:	7b89      	ldrb	r1, [r1, #14]
    4e08:	2924      	cmp	r1, #36	; 0x24
    4e0a:	d00b      	beq.n	4e24 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16c>
    4e0c:	2a1f      	cmp	r2, #31
    4e0e:	d00d      	beq.n	4e2c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x174>
    4e10:	2a20      	cmp	r2, #32
    4e12:	d00b      	beq.n	4e2c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x174>
    4e14:	2922      	cmp	r1, #34	; 0x22
    4e16:	d00f      	beq.n	4e38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x180>
    4e18:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    4e1c:	2804      	cmp	r0, #4
    4e1e:	d100      	bne.n	4e22 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16a>
    4e20:	2008      	movs	r0, #8
    4e22:	bd10      	pop	{r4, pc}
    4e24:	6840      	ldr	r0, [r0, #4]
    4e26:	f890 118e 	ldrb.w	r1, [r0, #398]	; 0x18e
    4e2a:	e00e      	b.n	4e4a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x192>
    4e2c:	2922      	cmp	r1, #34	; 0x22
    4e2e:	d003      	beq.n	4e38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x180>
    4e30:	6840      	ldr	r0, [r0, #4]
    4e32:	f890 01a8 	ldrb.w	r0, [r0, #424]	; 0x1a8
    4e36:	e005      	b.n	4e44 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18c>
    4e38:	6841      	ldr	r1, [r0, #4]
    4e3a:	f891 01a8 	ldrb.w	r0, [r1, #424]	; 0x1a8
    4e3e:	f891 105b 	ldrb.w	r1, [r1, #91]	; 0x5b
    4e42:	4008      	ands	r0, r1
    4e44:	f007 fd78 	bl	c938 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    4e48:	4601      	mov	r1, r0
    4e4a:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    4e4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4e52:	f007 bd89 	b.w	c968 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    4e56:	0000      	.short	0x0000
    4e58:	200000f8 	.word	0x200000f8
    4e5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4e60:	4688      	mov	r8, r1
    4e62:	4606      	mov	r6, r0
    4e64:	f7ff ff52 	bl	4d0c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    4e68:	4c4a      	ldr	r4, [pc, #296]	; (4f94 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2dc>)
    4e6a:	2700      	movs	r7, #0
    4e6c:	4605      	mov	r5, r0
    4e6e:	f88d 7000 	strb.w	r7, [sp]
    4e72:	7820      	ldrb	r0, [r4, #0]
    4e74:	2802      	cmp	r0, #2
    4e76:	d004      	beq.n	4e82 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ca>
    4e78:	f240 4189 	movw	r1, #1161	; 0x489
    4e7c:	2027      	movs	r0, #39	; 0x27
    4e7e:	f7fe fe89 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4e82:	7ba0      	ldrb	r0, [r4, #14]
    4e84:	0640      	lsls	r0, r0, #25
    4e86:	d406      	bmi.n	4e96 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1de>
    4e88:	2040      	movs	r0, #64	; 0x40
    4e8a:	f7ff ff45 	bl	4d18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    4e8e:	89e0      	ldrh	r0, [r4, #14]
    4e90:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    4e94:	81e0      	strh	r0, [r4, #14]
    4e96:	7ce8      	ldrb	r0, [r5, #19]
    4e98:	b3c6      	cbz	r6, 4f0c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x254>
    4e9a:	f005 fb15 	bl	a4c8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    4e9e:	f005 faf9 	bl	a494 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    4ea2:	b968      	cbnz	r0, 4ec0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
    4ea4:	7ce8      	ldrb	r0, [r5, #19]
    4ea6:	b158      	cbz	r0, 4ec0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
    4ea8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    4eaa:	7841      	ldrb	r1, [r0, #1]
    4eac:	b141      	cbz	r1, 4ec0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
    4eae:	7800      	ldrb	r0, [r0, #0]
    4eb0:	7a29      	ldrb	r1, [r5, #8]
    4eb2:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    4eb6:	4288      	cmp	r0, r1
    4eb8:	d102      	bne.n	4ec0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
    4eba:	2001      	movs	r0, #1
    4ebc:	70a0      	strb	r0, [r4, #2]
    4ebe:	e04a      	b.n	4f56 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x29e>
    4ec0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    4ec2:	7841      	ldrb	r1, [r0, #1]
    4ec4:	8161      	strh	r1, [r4, #10]
    4ec6:	b121      	cbz	r1, 4ed2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x21a>
    4ec8:	6b60      	ldr	r0, [r4, #52]	; 0x34
    4eca:	f007 fbc0 	bl	c64e <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    4ece:	62a0      	str	r0, [r4, #40]	; 0x28
    4ed0:	e000      	b.n	4ed4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x21c>
    4ed2:	62a7      	str	r7, [r4, #40]	; 0x28
    4ed4:	89e0      	ldrh	r0, [r4, #14]
    4ed6:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    4eda:	81e0      	strh	r0, [r4, #14]
    4edc:	6a60      	ldr	r0, [r4, #36]	; 0x24
    4ede:	79e9      	ldrb	r1, [r5, #7]
    4ee0:	7800      	ldrb	r0, [r0, #0]
    4ee2:	f3c0 0080 	ubfx	r0, r0, #2, #1
    4ee6:	4288      	cmp	r0, r1
    4ee8:	d005      	beq.n	4ef6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x23e>
    4eea:	f000 f937 	bl	515c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a4>
    4eee:	89e0      	ldrh	r0, [r4, #14]
    4ef0:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    4ef4:	81e0      	strh	r0, [r4, #14]
    4ef6:	6a60      	ldr	r0, [r4, #36]	; 0x24
    4ef8:	7a29      	ldrb	r1, [r5, #8]
    4efa:	7800      	ldrb	r0, [r0, #0]
    4efc:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    4f00:	4288      	cmp	r0, r1
    4f02:	d10e      	bne.n	4f22 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x26a>
    4f04:	4668      	mov	r0, sp
    4f06:	f000 f8e5 	bl	50d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x41c>
    4f0a:	e00a      	b.n	4f22 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x26a>
    4f0c:	e7ff      	b.n	4f0e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x256>
    4f0e:	b108      	cbz	r0, 4f14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x25c>
    4f10:	f005 fad4 	bl	a4bc <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    4f14:	78e0      	ldrb	r0, [r4, #3]
    4f16:	1c40      	adds	r0, r0, #1
    4f18:	70e0      	strb	r0, [r4, #3]
    4f1a:	89e0      	ldrh	r0, [r4, #14]
    4f1c:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    4f20:	81e0      	strh	r0, [r4, #14]
    4f22:	4d1d      	ldr	r5, [pc, #116]	; (4f98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2e0>)
    4f24:	f1b8 0f00 	cmp.w	r8, #0
    4f28:	d104      	bne.n	4f34 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x27c>
    4f2a:	78e1      	ldrb	r1, [r4, #3]
    4f2c:	2001      	movs	r0, #1
    4f2e:	f7ff ff1f 	bl	4d70 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
    4f32:	b1a0      	cbz	r0, 4f5e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2a6>
    4f34:	f89d 0000 	ldrb.w	r0, [sp]
    4f38:	b110      	cbz	r0, 4f40 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x288>
    4f3a:	2000      	movs	r0, #0
    4f3c:	f7ff fe38 	bl	4bb0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    4f40:	b136      	cbz	r6, 4f50 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x298>
    4f42:	70e7      	strb	r7, [r4, #3]
    4f44:	7968      	ldrb	r0, [r5, #5]
    4f46:	1c40      	adds	r0, r0, #1
    4f48:	7168      	strb	r0, [r5, #5]
    4f4a:	f7ff feeb 	bl	4d24 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    4f4e:	e002      	b.n	4f56 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x29e>
    4f50:	79a8      	ldrb	r0, [r5, #6]
    4f52:	1c40      	adds	r0, r0, #1
    4f54:	71a8      	strb	r0, [r5, #6]
    4f56:	f000 f867 	bl	5028 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x370>
    4f5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4f5e:	f89d 0000 	ldrb.w	r0, [sp]
    4f62:	b110      	cbz	r0, 4f6a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b2>
    4f64:	2001      	movs	r0, #1
    4f66:	f7ff fe23 	bl	4bb0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    4f6a:	2000      	movs	r0, #0
    4f6c:	f000 f98e 	bl	528c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5d4>
    4f70:	f89d 0000 	ldrb.w	r0, [sp]
    4f74:	b110      	cbz	r0, 4f7c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2c4>
    4f76:	2002      	movs	r0, #2
    4f78:	f7ff fe1a 	bl	4bb0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    4f7c:	b136      	cbz	r6, 4f8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d4>
    4f7e:	70e7      	strb	r7, [r4, #3]
    4f80:	7968      	ldrb	r0, [r5, #5]
    4f82:	1c40      	adds	r0, r0, #1
    4f84:	7168      	strb	r0, [r5, #5]
    4f86:	f7ff fecd 	bl	4d24 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    4f8a:	e7e6      	b.n	4f5a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2a2>
    4f8c:	79a8      	ldrb	r0, [r5, #6]
    4f8e:	1c40      	adds	r0, r0, #1
    4f90:	71a8      	strb	r0, [r5, #6]
    4f92:	e7e2      	b.n	4f5a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2a2>
    4f94:	200000c0 	.word	0x200000c0
    4f98:	2000093a 	.word	0x2000093a
    4f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4fa0:	460e      	mov	r6, r1
    4fa2:	4680      	mov	r8, r0
    4fa4:	f7ff feb2 	bl	4d0c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    4fa8:	4d1e      	ldr	r5, [pc, #120]	; (5024 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x36c>)
    4faa:	4604      	mov	r4, r0
    4fac:	7828      	ldrb	r0, [r5, #0]
    4fae:	2801      	cmp	r0, #1
    4fb0:	d004      	beq.n	4fbc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x304>
    4fb2:	f240 4147 	movw	r1, #1095	; 0x447
    4fb6:	2027      	movs	r0, #39	; 0x27
    4fb8:	f7fe fdec 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4fbc:	7860      	ldrb	r0, [r4, #1]
    4fbe:	2701      	movs	r7, #1
    4fc0:	b130      	cbz	r0, 4fd0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x318>
    4fc2:	2000      	movs	r0, #0
    4fc4:	7060      	strb	r0, [r4, #1]
    4fc6:	4601      	mov	r1, r0
    4fc8:	2004      	movs	r0, #4
    4fca:	f7ff fe91 	bl	4cf0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    4fce:	70e7      	strb	r7, [r4, #3]
    4fd0:	6a29      	ldr	r1, [r5, #32]
    4fd2:	7808      	ldrb	r0, [r1, #0]
    4fd4:	43c0      	mvns	r0, r0
    4fd6:	0780      	lsls	r0, r0, #30
    4fd8:	d109      	bne.n	4fee <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x336>
    4fda:	79a0      	ldrb	r0, [r4, #6]
    4fdc:	b9d0      	cbnz	r0, 5014 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x35c>
    4fde:	2002      	movs	r0, #2
    4fe0:	f7ff fe86 	bl	4cf0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    4fe4:	6a28      	ldr	r0, [r5, #32]
    4fe6:	7800      	ldrb	r0, [r0, #0]
    4fe8:	43c0      	mvns	r0, r0
    4fea:	0780      	lsls	r0, r0, #30
    4fec:	d012      	beq.n	5014 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x35c>
    4fee:	6a28      	ldr	r0, [r5, #32]
    4ff0:	7840      	ldrb	r0, [r0, #1]
    4ff2:	b110      	cbz	r0, 4ffa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x342>
    4ff4:	2002      	movs	r0, #2
    4ff6:	71a0      	strb	r0, [r4, #6]
    4ff8:	e000      	b.n	4ffc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x344>
    4ffa:	71a7      	strb	r7, [r4, #6]
    4ffc:	ea36 0608 	bics.w	r6, r6, r8
    5000:	d004      	beq.n	500c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x354>
    5002:	2100      	movs	r1, #0
    5004:	4608      	mov	r0, r1
    5006:	f7ff feb3 	bl	4d70 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
    500a:	b128      	cbz	r0, 5018 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x360>
    500c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5010:	f000 b80a 	b.w	5028 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x370>
    5014:	2003      	movs	r0, #3
    5016:	e7ee      	b.n	4ff6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x33e>
    5018:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    501c:	2000      	movs	r0, #0
    501e:	f000 b8eb 	b.w	51f8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x540>
    5022:	0000      	.short	0x0000
    5024:	200000c0 	.word	0x200000c0
    5028:	b510      	push	{r4, lr}
    502a:	f005 fae5 	bl	a5f8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    502e:	f005 f9d3 	bl	a3d8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    5032:	4c0d      	ldr	r4, [pc, #52]	; (5068 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b0>)
    5034:	89e0      	ldrh	r0, [r4, #14]
    5036:	f7ff fe6f 	bl	4d18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    503a:	69e2      	ldr	r2, [r4, #28]
    503c:	7961      	ldrb	r1, [r4, #5]
    503e:	78a0      	ldrb	r0, [r4, #2]
    5040:	4790      	blx	r2
    5042:	480a      	ldr	r0, [pc, #40]	; (506c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b4>)
    5044:	7c40      	ldrb	r0, [r0, #17]
    5046:	b158      	cbz	r0, 5060 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a8>
    5048:	4808      	ldr	r0, [pc, #32]	; (506c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b4>)
    504a:	3852      	subs	r0, #82	; 0x52
    504c:	f850 1f52 	ldr.w	r1, [r0, #82]!
    5050:	6081      	str	r1, [r0, #8]
    5052:	6841      	ldr	r1, [r0, #4]
    5054:	60c1      	str	r1, [r0, #12]
    5056:	4805      	ldr	r0, [pc, #20]	; (506c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b4>)
    5058:	2101      	movs	r1, #1
    505a:	7401      	strb	r1, [r0, #16]
    505c:	f004 fcf6 	bl	9a4c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    5060:	2000      	movs	r0, #0
    5062:	7020      	strb	r0, [r4, #0]
    5064:	bd10      	pop	{r4, pc}
    5066:	0000      	.short	0x0000
    5068:	200000c0 	.word	0x200000c0
    506c:	2000093a 	.word	0x2000093a
    5070:	4808      	ldr	r0, [pc, #32]	; (5094 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3dc>)
    5072:	b510      	push	{r4, lr}
    5074:	7800      	ldrb	r0, [r0, #0]
    5076:	2802      	cmp	r0, #2
    5078:	d004      	beq.n	5084 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3cc>
    507a:	f240 2101 	movw	r1, #513	; 0x201
    507e:	2027      	movs	r0, #39	; 0x27
    5080:	f7fe fd88 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5084:	4904      	ldr	r1, [pc, #16]	; (5098 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e0>)
    5086:	2001      	movs	r0, #1
    5088:	71c8      	strb	r0, [r1, #7]
    508a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    508e:	f7ff bfcb 	b.w	5028 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x370>
    5092:	0000      	.short	0x0000
    5094:	200000c0 	.word	0x200000c0
    5098:	2000093a 	.word	0x2000093a
    509c:	b430      	push	{r4, r5}
    509e:	4b0c      	ldr	r3, [pc, #48]	; (50d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x418>)
    50a0:	b942      	cbnz	r2, 50b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3fc>
    50a2:	79da      	ldrb	r2, [r3, #7]
    50a4:	2aff      	cmp	r2, #255	; 0xff
    50a6:	d105      	bne.n	50b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3fc>
    50a8:	f890 2063 	ldrb.w	r2, [r0, #99]	; 0x63
    50ac:	f890 4062 	ldrb.w	r4, [r0, #98]	; 0x62
    50b0:	42a2      	cmp	r2, r4
    50b2:	d00b      	beq.n	50cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x414>
    50b4:	b131      	cbz	r1, 50c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x40c>
    50b6:	79da      	ldrb	r2, [r3, #7]
    50b8:	f890 1063 	ldrb.w	r1, [r0, #99]	; 0x63
    50bc:	bc30      	pop	{r4, r5}
    50be:	4610      	mov	r0, r2
    50c0:	f005 be2e 	b.w	ad20 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>
    50c4:	22ff      	movs	r2, #255	; 0xff
    50c6:	f890 1062 	ldrb.w	r1, [r0, #98]	; 0x62
    50ca:	e7f7      	b.n	50bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x404>
    50cc:	bc30      	pop	{r4, r5}
    50ce:	4770      	bx	lr
    50d0:	200000c0 	.word	0x200000c0
    50d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    50d8:	4607      	mov	r7, r0
    50da:	f7ff fe17 	bl	4d0c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    50de:	4604      	mov	r4, r0
    50e0:	481d      	ldr	r0, [pc, #116]	; (5158 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a0>)
    50e2:	2600      	movs	r6, #0
    50e4:	2501      	movs	r5, #1
    50e6:	6a41      	ldr	r1, [r0, #36]	; 0x24
    50e8:	780a      	ldrb	r2, [r1, #0]
    50ea:	f002 0203 	and.w	r2, r2, #3
    50ee:	2a01      	cmp	r2, #1
    50f0:	d015      	beq.n	511e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x466>
    50f2:	2a02      	cmp	r2, #2
    50f4:	d013      	beq.n	511e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x466>
    50f6:	2a03      	cmp	r2, #3
    50f8:	d003      	beq.n	5102 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44a>
    50fa:	7941      	ldrb	r1, [r0, #5]
    50fc:	f041 0104 	orr.w	r1, r1, #4
    5100:	e024      	b.n	514c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x494>
    5102:	7065      	strb	r5, [r4, #1]
    5104:	89c2      	ldrh	r2, [r0, #14]
    5106:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    510a:	81c2      	strh	r2, [r0, #14]
    510c:	2001      	movs	r0, #1
    510e:	f7ff fdef 	bl	4cf0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    5112:	e01d      	b.n	5150 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x498>
    5114:	7226      	strb	r6, [r4, #8]
    5116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    511a:	7225      	strb	r5, [r4, #8]
    511c:	e7fb      	b.n	5116 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x45e>
    511e:	7849      	ldrb	r1, [r1, #1]
    5120:	b1b1      	cbz	r1, 5150 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x498>
    5122:	89c2      	ldrh	r2, [r0, #14]
    5124:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    5128:	81c2      	strh	r2, [r0, #14]
    512a:	6a82      	ldr	r2, [r0, #40]	; 0x28
    512c:	2a00      	cmp	r2, #0
    512e:	d0f2      	beq.n	5116 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x45e>
    5130:	29fb      	cmp	r1, #251	; 0xfb
    5132:	d808      	bhi.n	5146 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48e>
    5134:	7980      	ldrb	r0, [r0, #6]
    5136:	b120      	cbz	r0, 5142 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48a>
    5138:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    513c:	2020      	movs	r0, #32
    513e:	f7ff bdeb 	b.w	4d18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5142:	703d      	strb	r5, [r7, #0]
    5144:	e7e7      	b.n	5116 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x45e>
    5146:	7941      	ldrb	r1, [r0, #5]
    5148:	f041 0110 	orr.w	r1, r1, #16
    514c:	7141      	strb	r1, [r0, #5]
    514e:	e7e2      	b.n	5116 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x45e>
    5150:	7a20      	ldrb	r0, [r4, #8]
    5152:	2801      	cmp	r0, #1
    5154:	d1e1      	bne.n	511a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x462>
    5156:	e7dd      	b.n	5114 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x45c>
    5158:	200000c0 	.word	0x200000c0
    515c:	b570      	push	{r4, r5, r6, lr}
    515e:	f7ff fdd5 	bl	4d0c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5162:	4604      	mov	r4, r0
    5164:	7980      	ldrb	r0, [r0, #6]
    5166:	2800      	cmp	r0, #0
    5168:	d02e      	beq.n	51c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x510>
    516a:	2802      	cmp	r0, #2
    516c:	d10d      	bne.n	518a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4d2>
    516e:	481c      	ldr	r0, [pc, #112]	; (51e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x528>)
    5170:	6b00      	ldr	r0, [r0, #48]	; 0x30
    5172:	f007 f872 	bl	c25a <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    5176:	b340      	cbz	r0, 51ca <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x512>
    5178:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
    517c:	1c40      	adds	r0, r0, #1
    517e:	f141 0100 	adc.w	r1, r1, #0
    5182:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
    5186:	f004 fc61 	bl	9a4c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    518a:	2500      	movs	r5, #0
    518c:	71a5      	strb	r5, [r4, #6]
    518e:	78e0      	ldrb	r0, [r4, #3]
    5190:	b120      	cbz	r0, 519c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e4>
    5192:	70e5      	strb	r5, [r4, #3]
    5194:	2100      	movs	r1, #0
    5196:	2010      	movs	r0, #16
    5198:	f7ff fdaa 	bl	4cf0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    519c:	78a0      	ldrb	r0, [r4, #2]
    519e:	b170      	cbz	r0, 51be <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x506>
    51a0:	70a5      	strb	r5, [r4, #2]
    51a2:	f7ff fb43 	bl	482c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    51a6:	b198      	cbz	r0, 51d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x518>
    51a8:	2100      	movs	r1, #0
    51aa:	2008      	movs	r0, #8
    51ac:	f7ff fda0 	bl	4cf0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    51b0:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
    51b4:	1c40      	adds	r0, r0, #1
    51b6:	f141 0100 	adc.w	r1, r1, #0
    51ba:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
    51be:	79e0      	ldrb	r0, [r4, #7]
    51c0:	2801      	cmp	r0, #1
    51c2:	d00a      	beq.n	51da <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x522>
    51c4:	2001      	movs	r0, #1
    51c6:	71e0      	strb	r0, [r4, #7]
    51c8:	bd70      	pop	{r4, r5, r6, pc}
    51ca:	f44f 7163 	mov.w	r1, #908	; 0x38c
    51ce:	e001      	b.n	51d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x51c>
    51d0:	f44f 7169 	mov.w	r1, #932	; 0x3a4
    51d4:	2027      	movs	r0, #39	; 0x27
    51d6:	f7fe fcdd 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    51da:	71e5      	strb	r5, [r4, #7]
    51dc:	bd70      	pop	{r4, r5, r6, pc}
    51de:	0000      	.short	0x0000
    51e0:	200000c0 	.word	0x200000c0
    51e4:	4803      	ldr	r0, [pc, #12]	; (51f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x53c>)
    51e6:	7800      	ldrb	r0, [r0, #0]
    51e8:	2800      	cmp	r0, #0
    51ea:	d001      	beq.n	51f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x538>
    51ec:	f7ff bf1c 	b.w	5028 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x370>
    51f0:	4770      	bx	lr
    51f2:	0000      	.short	0x0000
    51f4:	200000c0 	.word	0x200000c0
    51f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    51fc:	4681      	mov	r9, r0
    51fe:	f7ff fd7f 	bl	4d00 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    5202:	4606      	mov	r6, r0
    5204:	f7ff fd82 	bl	4d0c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5208:	4c1d      	ldr	r4, [pc, #116]	; (5280 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c8>)
    520a:	4605      	mov	r5, r0
    520c:	464a      	mov	r2, r9
    520e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    5210:	6260      	str	r0, [r4, #36]	; 0x24
    5212:	2101      	movs	r1, #1
    5214:	4630      	mov	r0, r6
    5216:	f7ff ff41 	bl	509c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e4>
    521a:	7ce8      	ldrb	r0, [r5, #19]
    521c:	f04f 0800 	mov.w	r8, #0
    5220:	b1c0      	cbz	r0, 5254 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x59c>
    5222:	7a67      	ldrb	r7, [r4, #9]
    5224:	4817      	ldr	r0, [pc, #92]	; (5284 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5cc>)
    5226:	f005 fc8b 	bl	ab40 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    522a:	4817      	ldr	r0, [pc, #92]	; (5288 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5d0>)
    522c:	2101      	movs	r1, #1
    522e:	7601      	strb	r1, [r0, #24]
    5230:	e9d5 1216 	ldrd	r1, r2, [r5, #88]	; 0x58
    5234:	e9c0 1204 	strd	r1, r2, [r0, #16]
    5238:	4a12      	ldr	r2, [pc, #72]	; (5284 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5cc>)
    523a:	6a61      	ldr	r1, [r4, #36]	; 0x24
    523c:	f005 f8bc 	bl	a3b8 <sym_2A6IJT7MGQ7OBCRC2X2OJJKRLO2X7VBUN6GSTWQ>
    5240:	f896 0063 	ldrb.w	r0, [r6, #99]	; 0x63
    5244:	f007 fb82 	bl	c94c <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    5248:	4602      	mov	r2, r0
    524a:	4639      	mov	r1, r7
    524c:	2001      	movs	r0, #1
    524e:	f005 f8e1 	bl	a414 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A>
    5252:	e004      	b.n	525e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5a6>
    5254:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5256:	f005 fc73 	bl	ab40 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    525a:	f005 f8bd 	bl	a3d8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    525e:	f1b9 0f00 	cmp.w	r9, #0
    5262:	d102      	bne.n	526a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b2>
    5264:	4640      	mov	r0, r8
    5266:	f005 fb03 	bl	a870 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    526a:	2100      	movs	r1, #0
    526c:	f896 3062 	ldrb.w	r3, [r6, #98]	; 0x62
    5270:	2201      	movs	r2, #1
    5272:	4608      	mov	r0, r1
    5274:	f005 fcee 	bl	ac54 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    5278:	2002      	movs	r0, #2
    527a:	7020      	strb	r0, [r4, #0]
    527c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5280:	200000c0 	.word	0x200000c0
    5284:	200007e8 	.word	0x200007e8
    5288:	200008f0 	.word	0x200008f0
    528c:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    5290:	4604      	mov	r4, r0
    5292:	f7ff fd3b 	bl	4d0c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5296:	4605      	mov	r5, r0
    5298:	f7ff fd32 	bl	4d00 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    529c:	4606      	mov	r6, r0
    529e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 5418 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x760>
    52a2:	4622      	mov	r2, r4
    52a4:	2100      	movs	r1, #0
    52a6:	f7ff fef9 	bl	509c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e4>
    52aa:	79a8      	ldrb	r0, [r5, #6]
    52ac:	2701      	movs	r7, #1
    52ae:	f04f 0800 	mov.w	r8, #0
    52b2:	f1a9 0420 	sub.w	r4, r9, #32
    52b6:	b140      	cbz	r0, 52ca <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x612>
    52b8:	2801      	cmp	r0, #1
    52ba:	d01f      	beq.n	52fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x644>
    52bc:	2802      	cmp	r0, #2
    52be:	d030      	beq.n	5322 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x66a>
    52c0:	2803      	cmp	r0, #3
    52c2:	d03c      	beq.n	533e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x686>
    52c4:	f240 219e 	movw	r1, #670	; 0x29e
    52c8:	e058      	b.n	537c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c4>
    52ca:	7a20      	ldrb	r0, [r4, #8]
    52cc:	2148      	movs	r1, #72	; 0x48
    52ce:	f8ad 0004 	strh.w	r0, [sp, #4]
    52d2:	5388      	strh	r0, [r1, r6]
    52d4:	4648      	mov	r0, r9
    52d6:	f7ff fad3 	bl	4880 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    52da:	b128      	cbz	r0, 52e8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x630>
    52dc:	2080      	movs	r0, #128	; 0x80
    52de:	6a21      	ldr	r1, [r4, #32]
    52e0:	f7ff fd06 	bl	4cf0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    52e4:	70af      	strb	r7, [r5, #2]
    52e6:	e02e      	b.n	5346 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68e>
    52e8:	466a      	mov	r2, sp
    52ea:	a901      	add	r1, sp, #4
    52ec:	6b20      	ldr	r0, [r4, #48]	; 0x30
    52ee:	f007 fb45 	bl	c97c <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    52f2:	6220      	str	r0, [r4, #32]
    52f4:	b110      	cbz	r0, 52fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x644>
    52f6:	f895 1043 	ldrb.w	r1, [r5, #67]	; 0x43
    52fa:	b111      	cbz	r1, 5302 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x64a>
    52fc:	4847      	ldr	r0, [pc, #284]	; (541c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x764>)
    52fe:	6220      	str	r0, [r4, #32]
    5300:	e021      	b.n	5346 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68e>
    5302:	f89d 1000 	ldrb.w	r1, [sp]
    5306:	b931      	cbnz	r1, 5316 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x65e>
    5308:	f8a0 8000 	strh.w	r8, [r0]
    530c:	f880 8002 	strb.w	r8, [r0, #2]
    5310:	2101      	movs	r1, #1
    5312:	f007 fe92 	bl	d03a <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    5316:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    531a:	6a20      	ldr	r0, [r4, #32]
    531c:	f007 fe51 	bl	cfc2 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>
    5320:	e011      	b.n	5346 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68e>
    5322:	f8b6 0048 	ldrh.w	r0, [r6, #72]	; 0x48
    5326:	f8ad 0004 	strh.w	r0, [sp, #4]
    532a:	466a      	mov	r2, sp
    532c:	a901      	add	r1, sp, #4
    532e:	6b20      	ldr	r0, [r4, #48]	; 0x30
    5330:	f007 fb24 	bl	c97c <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    5334:	6220      	str	r0, [r4, #32]
    5336:	b930      	cbnz	r0, 5346 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68e>
    5338:	f240 218f 	movw	r1, #655	; 0x28f
    533c:	e01e      	b.n	537c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c4>
    533e:	4648      	mov	r0, r9
    5340:	f7ff fa9e 	bl	4880 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    5344:	b1c0      	cbz	r0, 5378 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c0>
    5346:	6a20      	ldr	r0, [r4, #32]
    5348:	2308      	movs	r3, #8
    534a:	7801      	ldrb	r1, [r0, #0]
    534c:	f021 0108 	bic.w	r1, r1, #8
    5350:	7001      	strb	r1, [r0, #0]
    5352:	79ea      	ldrb	r2, [r5, #7]
    5354:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    5358:	4311      	orrs	r1, r2
    535a:	f021 0104 	bic.w	r1, r1, #4
    535e:	7001      	strb	r1, [r0, #0]
    5360:	7a2a      	ldrb	r2, [r5, #8]
    5362:	2304      	movs	r3, #4
    5364:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    5368:	4311      	orrs	r1, r2
    536a:	f021 0110 	bic.w	r1, r1, #16
    536e:	7001      	strb	r1, [r0, #0]
    5370:	43c9      	mvns	r1, r1
    5372:	0789      	lsls	r1, r1, #30
    5374:	d005      	beq.n	5382 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ca>
    5376:	e007      	b.n	5388 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d0>
    5378:	f44f 7126 	mov.w	r1, #664	; 0x298
    537c:	2027      	movs	r0, #39	; 0x27
    537e:	f7fe fc09 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5382:	78c0      	ldrb	r0, [r0, #3]
    5384:	2802      	cmp	r0, #2
    5386:	d00f      	beq.n	53a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f0>
    5388:	6b20      	ldr	r0, [r4, #48]	; 0x30
    538a:	f007 f88b 	bl	c4a4 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    538e:	b108      	cbz	r0, 5394 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6dc>
    5390:	2101      	movs	r1, #1
    5392:	e00a      	b.n	53aa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f2>
    5394:	6a20      	ldr	r0, [r4, #32]
    5396:	7800      	ldrb	r0, [r0, #0]
    5398:	43c0      	mvns	r0, r0
    539a:	0780      	lsls	r0, r0, #30
    539c:	d004      	beq.n	53a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f0>
    539e:	f7ff fa2d 	bl	47fc <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    53a2:	f080 0101 	eor.w	r1, r0, #1
    53a6:	e000      	b.n	53aa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f2>
    53a8:	2100      	movs	r1, #0
    53aa:	6a20      	ldr	r0, [r4, #32]
    53ac:	7802      	ldrb	r2, [r0, #0]
    53ae:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    53b2:	7001      	strb	r1, [r0, #0]
    53b4:	7ca9      	ldrb	r1, [r5, #18]
    53b6:	b1d1      	cbz	r1, 53ee <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x736>
    53b8:	7841      	ldrb	r1, [r0, #1]
    53ba:	b1c1      	cbz	r1, 53ee <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x736>
    53bc:	4818      	ldr	r0, [pc, #96]	; (5420 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>)
    53be:	f005 fbbf 	bl	ab40 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    53c2:	4816      	ldr	r0, [pc, #88]	; (541c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x764>)
    53c4:	3828      	subs	r0, #40	; 0x28
    53c6:	f880 8018 	strb.w	r8, [r0, #24]
    53ca:	e9d5 1214 	ldrd	r1, r2, [r5, #80]	; 0x50
    53ce:	e9c0 1204 	strd	r1, r2, [r0, #16]
    53d2:	4913      	ldr	r1, [pc, #76]	; (5420 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>)
    53d4:	6a22      	ldr	r2, [r4, #32]
    53d6:	f004 ffef 	bl	a3b8 <sym_2A6IJT7MGQ7OBCRC2X2OJJKRLO2X7VBUN6GSTWQ>
    53da:	f896 0062 	ldrb.w	r0, [r6, #98]	; 0x62
    53de:	f007 fab5 	bl	c94c <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    53e2:	4602      	mov	r2, r0
    53e4:	21fb      	movs	r1, #251	; 0xfb
    53e6:	2000      	movs	r0, #0
    53e8:	f005 f814 	bl	a414 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A>
    53ec:	e003      	b.n	53f6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x73e>
    53ee:	f005 fba7 	bl	ab40 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    53f2:	f004 fff1 	bl	a3d8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    53f6:	2201      	movs	r2, #1
    53f8:	f896 3063 	ldrb.w	r3, [r6, #99]	; 0x63
    53fc:	4611      	mov	r1, r2
    53fe:	2000      	movs	r0, #0
    5400:	f005 fc28 	bl	ac54 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    5404:	7127      	strb	r7, [r4, #4]
    5406:	6a20      	ldr	r0, [r4, #32]
    5408:	8801      	ldrh	r1, [r0, #0]
    540a:	8221      	strh	r1, [r4, #16]
    540c:	7880      	ldrb	r0, [r0, #2]
    540e:	74a0      	strb	r0, [r4, #18]
    5410:	7027      	strb	r7, [r4, #0]
    5412:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    5416:	0000      	.short	0x0000
    5418:	200000e0 	.word	0x200000e0
    541c:	20000918 	.word	0x20000918
    5420:	200007e8 	.word	0x200007e8
    5424:	00005071 	.word	0x00005071
    5428:	00004e5d 	.word	0x00004e5d
    542c:	00004f9d 	.word	0x00004f9d
    5430:	000051e5 	.word	0x000051e5

00005434 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    5434:	4800      	ldr	r0, [pc, #0]	; (5438 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    5436:	4770      	bx	lr
    5438:	20001103 	.word	0x20001103

0000543c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    543c:	4904      	ldr	r1, [pc, #16]	; (5450 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    543e:	788a      	ldrb	r2, [r1, #2]
    5440:	4282      	cmp	r2, r0
    5442:	d903      	bls.n	544c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    5444:	4408      	add	r0, r1
    5446:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    544a:	4770      	bx	lr
    544c:	2000      	movs	r0, #0
    544e:	4770      	bx	lr
    5450:	20000f30 	.word	0x20000f30

00005454 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    5454:	4904      	ldr	r1, [pc, #16]	; (5468 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    5456:	788a      	ldrb	r2, [r1, #2]
    5458:	4282      	cmp	r2, r0
    545a:	d903      	bls.n	5464 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    545c:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    5460:	3083      	adds	r0, #131	; 0x83
    5462:	4770      	bx	lr
    5464:	2000      	movs	r0, #0
    5466:	4770      	bx	lr
    5468:	20000f30 	.word	0x20000f30

0000546c <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    546c:	4a05      	ldr	r2, [pc, #20]	; (5484 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    546e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    5472:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    5476:	6802      	ldr	r2, [r0, #0]
    5478:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    547c:	8880      	ldrh	r0, [r0, #4]
    547e:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    5482:	4770      	bx	lr
    5484:	20000f30 	.word	0x20000f30

00005488 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>:
    5488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    548c:	460e      	mov	r6, r1
    548e:	4607      	mov	r7, r0
    5490:	4615      	mov	r5, r2
    5492:	2106      	movs	r1, #6
    5494:	4630      	mov	r0, r6
    5496:	f007 fc5f 	bl	cd58 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    549a:	4c0d      	ldr	r4, [pc, #52]	; (54d0 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x48>)
    549c:	b160      	cbz	r0, 54b8 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x30>
    549e:	2000      	movs	r0, #0
    54a0:	e004      	b.n	54ac <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x24>
    54a2:	1821      	adds	r1, r4, r0
    54a4:	1c40      	adds	r0, r0, #1
    54a6:	f881 513b 	strb.w	r5, [r1, #315]	; 0x13b
    54aa:	b2c0      	uxtb	r0, r0
    54ac:	78a1      	ldrb	r1, [r4, #2]
    54ae:	4281      	cmp	r1, r0
    54b0:	d8f7      	bhi.n	54a2 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x1a>
    54b2:	2001      	movs	r0, #1
    54b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    54b8:	4631      	mov	r1, r6
    54ba:	4638      	mov	r0, r7
    54bc:	f007 fa6d 	bl	c99a <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    54c0:	2808      	cmp	r0, #8
    54c2:	d003      	beq.n	54cc <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x44>
    54c4:	4420      	add	r0, r4
    54c6:	f880 513b 	strb.w	r5, [r0, #315]	; 0x13b
    54ca:	e7f2      	b.n	54b2 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2a>
    54cc:	2000      	movs	r0, #0
    54ce:	e7f1      	b.n	54b4 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2c>
    54d0:	20000f30 	.word	0x20000f30

000054d4 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    54d4:	4904      	ldr	r1, [pc, #16]	; (54e8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    54d6:	788a      	ldrb	r2, [r1, #2]
    54d8:	4282      	cmp	r2, r0
    54da:	d903      	bls.n	54e4 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    54dc:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    54e0:	1cc0      	adds	r0, r0, #3
    54e2:	4770      	bx	lr
    54e4:	2000      	movs	r0, #0
    54e6:	4770      	bx	lr
    54e8:	20000f30 	.word	0x20000f30

000054ec <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    54ec:	b510      	push	{r4, lr}
    54ee:	f240 12d3 	movw	r2, #467	; 0x1d3
    54f2:	2100      	movs	r1, #0
    54f4:	4808      	ldr	r0, [pc, #32]	; (5518 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    54f6:	f006 f9dc 	bl	b8b2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    54fa:	2208      	movs	r2, #8
    54fc:	21ff      	movs	r1, #255	; 0xff
    54fe:	4807      	ldr	r0, [pc, #28]	; (551c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    5500:	f006 f9d7 	bl	b8b2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5504:	4805      	ldr	r0, [pc, #20]	; (551c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    5506:	2100      	movs	r1, #0
    5508:	1f00      	subs	r0, r0, #4
    550a:	7001      	strb	r1, [r0, #0]
    550c:	7041      	strb	r1, [r0, #1]
    550e:	f44f 7161 	mov.w	r1, #900	; 0x384
    5512:	8041      	strh	r1, [r0, #2]
    5514:	bd10      	pop	{r4, pc}
    5516:	0000      	.short	0x0000
    5518:	20000f30 	.word	0x20000f30
    551c:	20000290 	.word	0x20000290

00005520 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>:
    5520:	4901      	ldr	r1, [pc, #4]	; (5528 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA+0x8>)
    5522:	7008      	strb	r0, [r1, #0]
    5524:	4770      	bx	lr
    5526:	0000      	.short	0x0000
    5528:	2000028c 	.word	0x2000028c

0000552c <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>:
    552c:	4801      	ldr	r0, [pc, #4]	; (5534 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY+0x8>)
    552e:	7800      	ldrb	r0, [r0, #0]
    5530:	4770      	bx	lr
    5532:	0000      	.short	0x0000
    5534:	2000028c 	.word	0x2000028c

00005538 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    5538:	4b0b      	ldr	r3, [pc, #44]	; (5568 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    553a:	b510      	push	{r4, lr}
    553c:	789c      	ldrb	r4, [r3, #2]
    553e:	4284      	cmp	r4, r0
    5540:	d90f      	bls.n	5562 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
    5542:	4418      	add	r0, r3
    5544:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    5548:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    554c:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    5550:	700b      	strb	r3, [r1, #0]
    5552:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    5556:	6011      	str	r1, [r2, #0]
    5558:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    555c:	8090      	strh	r0, [r2, #4]
    555e:	2001      	movs	r0, #1
    5560:	bd10      	pop	{r4, pc}
    5562:	2000      	movs	r0, #0
    5564:	bd10      	pop	{r4, pc}
    5566:	0000      	.short	0x0000
    5568:	20000f30 	.word	0x20000f30

0000556c <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    556c:	4907      	ldr	r1, [pc, #28]	; (558c <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    556e:	788a      	ldrb	r2, [r1, #2]
    5570:	4282      	cmp	r2, r0
    5572:	d909      	bls.n	5588 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
    5574:	4408      	add	r0, r1
    5576:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    557a:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    557e:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    5582:	f000 0001 	and.w	r0, r0, #1
    5586:	4770      	bx	lr
    5588:	2000      	movs	r0, #0
    558a:	4770      	bx	lr
    558c:	20000f30 	.word	0x20000f30

00005590 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>:
    5590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5594:	4698      	mov	r8, r3
    5596:	4691      	mov	r9, r2
    5598:	460c      	mov	r4, r1
    559a:	4605      	mov	r5, r0
    559c:	f000 f938 	bl	5810 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x108>
    55a0:	4606      	mov	r6, r0
    55a2:	2810      	cmp	r0, #16
    55a4:	d006      	beq.n	55b4 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    55a6:	f000 f903 	bl	57b0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    55aa:	2810      	cmp	r0, #16
    55ac:	d002      	beq.n	55b4 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    55ae:	2012      	movs	r0, #18
    55b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    55b4:	4f18      	ldr	r7, [pc, #96]	; (5618 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x88>)
    55b6:	78b8      	ldrb	r0, [r7, #2]
    55b8:	2808      	cmp	r0, #8
    55ba:	d22a      	bcs.n	5612 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x82>
    55bc:	2e10      	cmp	r6, #16
    55be:	d105      	bne.n	55cc <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x3c>
    55c0:	2200      	movs	r2, #0
    55c2:	4621      	mov	r1, r4
    55c4:	4628      	mov	r0, r5
    55c6:	f000 f907 	bl	57d8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xd0>
    55ca:	4606      	mov	r6, r0
    55cc:	78bc      	ldrb	r4, [r7, #2]
    55ce:	2210      	movs	r2, #16
    55d0:	1c60      	adds	r0, r4, #1
    55d2:	70b8      	strb	r0, [r7, #2]
    55d4:	eb07 1504 	add.w	r5, r7, r4, lsl #4
    55d8:	1ce8      	adds	r0, r5, #3
    55da:	4649      	mov	r1, r9
    55dc:	f007 fb26 	bl	cc2c <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    55e0:	f105 0083 	add.w	r0, r5, #131	; 0x83
    55e4:	2210      	movs	r2, #16
    55e6:	4641      	mov	r1, r8
    55e8:	f007 fb20 	bl	cc2c <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    55ec:	2110      	movs	r1, #16
    55ee:	4640      	mov	r0, r8
    55f0:	f007 fbb2 	bl	cd58 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    55f4:	443c      	add	r4, r7
    55f6:	2110      	movs	r1, #16
    55f8:	f884 0143 	strb.w	r0, [r4, #323]	; 0x143
    55fc:	4648      	mov	r0, r9
    55fe:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    5602:	f007 fba9 	bl	cd58 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    5606:	77e0      	strb	r0, [r4, #31]
    5608:	f804 6c29 	strb.w	r6, [r4, #-41]
    560c:	2000      	movs	r0, #0
    560e:	73e0      	strb	r0, [r4, #15]
    5610:	e7ce      	b.n	55b0 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    5612:	2007      	movs	r0, #7
    5614:	e7cc      	b.n	55b0 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    5616:	0000      	.short	0x0000
    5618:	20000f30 	.word	0x20000f30

0000561c <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>:
    561c:	4806      	ldr	r0, [pc, #24]	; (5638 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x1c>)
    561e:	b510      	push	{r4, lr}
    5620:	7880      	ldrb	r0, [r0, #2]
    5622:	1e40      	subs	r0, r0, #1
    5624:	b244      	sxtb	r4, r0
    5626:	e004      	b.n	5632 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x16>
    5628:	b2e0      	uxtb	r0, r4
    562a:	f000 f939 	bl	58a0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x198>
    562e:	1e64      	subs	r4, r4, #1
    5630:	b264      	sxtb	r4, r4
    5632:	2c00      	cmp	r4, #0
    5634:	daf8      	bge.n	5628 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xc>
    5636:	bd10      	pop	{r4, pc}
    5638:	20000f30 	.word	0x20000f30

0000563c <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    563c:	4801      	ldr	r0, [pc, #4]	; (5644 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    563e:	8840      	ldrh	r0, [r0, #2]
    5640:	4770      	bx	lr
    5642:	0000      	.short	0x0000
    5644:	2000028c 	.word	0x2000028c

00005648 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>:
    5648:	b138      	cbz	r0, 565a <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    564a:	f24a 11b8 	movw	r1, #41400	; 0xa1b8
    564e:	4288      	cmp	r0, r1
    5650:	d803      	bhi.n	565a <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    5652:	4903      	ldr	r1, [pc, #12]	; (5660 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x18>)
    5654:	8048      	strh	r0, [r1, #2]
    5656:	2001      	movs	r0, #1
    5658:	4770      	bx	lr
    565a:	2000      	movs	r0, #0
    565c:	4770      	bx	lr
    565e:	0000      	.short	0x0000
    5660:	2000028c 	.word	0x2000028c

00005664 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    5664:	4905      	ldr	r1, [pc, #20]	; (567c <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x18>)
    5666:	788a      	ldrb	r2, [r1, #2]
    5668:	4282      	cmp	r2, r0
    566a:	d903      	bls.n	5674 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x10>
    566c:	4408      	add	r0, r1
    566e:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    5672:	b108      	cbz	r0, 5678 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x14>
    5674:	2000      	movs	r0, #0
    5676:	4770      	bx	lr
    5678:	2001      	movs	r0, #1
    567a:	4770      	bx	lr
    567c:	20000f30 	.word	0x20000f30

00005680 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    5680:	b570      	push	{r4, r5, r6, lr}
    5682:	460d      	mov	r5, r1
    5684:	4606      	mov	r6, r0
    5686:	f000 f8c3 	bl	5810 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x108>
    568a:	4c10      	ldr	r4, [pc, #64]	; (56cc <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
    568c:	2810      	cmp	r0, #16
    568e:	d007      	beq.n	56a0 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    5690:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
    5694:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    5698:	07c9      	lsls	r1, r1, #31
    569a:	d001      	beq.n	56a0 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    569c:	2001      	movs	r0, #1
    569e:	bd70      	pop	{r4, r5, r6, pc}
    56a0:	7861      	ldrb	r1, [r4, #1]
    56a2:	2908      	cmp	r1, #8
    56a4:	d210      	bcs.n	56c8 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
    56a6:	2810      	cmp	r0, #16
    56a8:	d008      	beq.n	56bc <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
    56aa:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    56ae:	2101      	movs	r1, #1
    56b0:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    56b4:	7860      	ldrb	r0, [r4, #1]
    56b6:	1c40      	adds	r0, r0, #1
    56b8:	7060      	strb	r0, [r4, #1]
    56ba:	e7ef      	b.n	569c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
    56bc:	2201      	movs	r2, #1
    56be:	4629      	mov	r1, r5
    56c0:	4630      	mov	r0, r6
    56c2:	f000 f889 	bl	57d8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xd0>
    56c6:	e7f5      	b.n	56b4 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
    56c8:	2000      	movs	r0, #0
    56ca:	bd70      	pop	{r4, r5, r6, pc}
    56cc:	20000f30 	.word	0x20000f30

000056d0 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    56d0:	b570      	push	{r4, r5, r6, lr}
    56d2:	4d0b      	ldr	r5, [pc, #44]	; (5700 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
    56d4:	7828      	ldrb	r0, [r5, #0]
    56d6:	1e40      	subs	r0, r0, #1
    56d8:	b244      	sxtb	r4, r0
    56da:	e00a      	b.n	56f2 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
    56dc:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    56e0:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    56e4:	07c0      	lsls	r0, r0, #31
    56e6:	d002      	beq.n	56ee <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
    56e8:	b2e0      	uxtb	r0, r4
    56ea:	f000 f921 	bl	5930 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x228>
    56ee:	1e64      	subs	r4, r4, #1
    56f0:	b264      	sxtb	r4, r4
    56f2:	2c00      	cmp	r4, #0
    56f4:	daf2      	bge.n	56dc <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
    56f6:	4903      	ldr	r1, [pc, #12]	; (5704 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
    56f8:	2000      	movs	r0, #0
    56fa:	7048      	strb	r0, [r1, #1]
    56fc:	bd70      	pop	{r4, r5, r6, pc}
    56fe:	0000      	.short	0x0000
    5700:	20000f30 	.word	0x20000f30
    5704:	2000028c 	.word	0x2000028c

00005708 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    5708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    570c:	2400      	movs	r4, #0
    570e:	4625      	mov	r5, r4
    5710:	4e18      	ldr	r6, [pc, #96]	; (5774 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
    5712:	e029      	b.n	5768 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
    5714:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
    5718:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
    571c:	07c0      	lsls	r0, r0, #31
    571e:	d021      	beq.n	5764 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    5720:	4628      	mov	r0, r5
    5722:	f000 f845 	bl	57b0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    5726:	4603      	mov	r3, r0
    5728:	f7ff fed4 	bl	54d4 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    572c:	4601      	mov	r1, r0
    572e:	2000      	movs	r0, #0
    5730:	2b10      	cmp	r3, #16
    5732:	d009      	beq.n	5748 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    5734:	18f2      	adds	r2, r6, r3
    5736:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
    573a:	f1bc 0f01 	cmp.w	ip, #1
    573e:	d002      	beq.n	5746 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
    5740:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
    5744:	b102      	cbz	r2, 5748 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    5746:	2001      	movs	r0, #1
    5748:	1e40      	subs	r0, r0, #1
    574a:	4201      	tst	r1, r0
    574c:	d10a      	bne.n	5764 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    574e:	480a      	ldr	r0, [pc, #40]	; (5778 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
    5750:	f507 71aa 	add.w	r1, r7, #340	; 0x154
    5754:	5503      	strb	r3, [r0, r4]
    5756:	4620      	mov	r0, r4
    5758:	1c64      	adds	r4, r4, #1
    575a:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
    575e:	b2e4      	uxtb	r4, r4
    5760:	f005 fbea 	bl	af38 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    5764:	1c6d      	adds	r5, r5, #1
    5766:	b2ed      	uxtb	r5, r5
    5768:	7830      	ldrb	r0, [r6, #0]
    576a:	42a8      	cmp	r0, r5
    576c:	d8d2      	bhi.n	5714 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
    576e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5772:	0000      	.short	0x0000
    5774:	20000f30 	.word	0x20000f30
    5778:	20000290 	.word	0x20000290
    577c:	b570      	push	{r4, r5, r6, lr}
    577e:	4b0a      	ldr	r3, [pc, #40]	; (57a8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    5780:	781b      	ldrb	r3, [r3, #0]
    5782:	b173      	cbz	r3, 57a2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9a>
    5784:	4b09      	ldr	r3, [pc, #36]	; (57ac <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>)
    5786:	789c      	ldrb	r4, [r3, #2]
    5788:	b15c      	cbz	r4, 57a2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9a>
    578a:	1845      	adds	r5, r0, r1
    578c:	4621      	mov	r1, r4
    578e:	b10a      	cbz	r2, 5794 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    5790:	1cd8      	adds	r0, r3, #3
    5792:	e001      	b.n	5798 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
    5794:	4805      	ldr	r0, [pc, #20]	; (57ac <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>)
    5796:	3083      	adds	r0, #131	; 0x83
    5798:	462a      	mov	r2, r5
    579a:	f004 fd2f 	bl	a1fc <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    579e:	2001      	movs	r0, #1
    57a0:	bd70      	pop	{r4, r5, r6, pc}
    57a2:	2000      	movs	r0, #0
    57a4:	bd70      	pop	{r4, r5, r6, pc}
    57a6:	0000      	.short	0x0000
    57a8:	2000028c 	.word	0x2000028c
    57ac:	20000f30 	.word	0x20000f30
    57b0:	4908      	ldr	r1, [pc, #32]	; (57d4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>)
    57b2:	b510      	push	{r4, lr}
    57b4:	4603      	mov	r3, r0
    57b6:	2000      	movs	r0, #0
    57b8:	788a      	ldrb	r2, [r1, #2]
    57ba:	e006      	b.n	57ca <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc2>
    57bc:	180c      	adds	r4, r1, r0
    57be:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
    57c2:	429c      	cmp	r4, r3
    57c4:	d004      	beq.n	57d0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>
    57c6:	1c40      	adds	r0, r0, #1
    57c8:	b2c0      	uxtb	r0, r0
    57ca:	4282      	cmp	r2, r0
    57cc:	d8f6      	bhi.n	57bc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb4>
    57ce:	2010      	movs	r0, #16
    57d0:	bd10      	pop	{r4, pc}
    57d2:	0000      	.short	0x0000
    57d4:	20000f30 	.word	0x20000f30
    57d8:	b570      	push	{r4, r5, r6, lr}
    57da:	4b0c      	ldr	r3, [pc, #48]	; (580c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>)
    57dc:	4604      	mov	r4, r0
    57de:	7818      	ldrb	r0, [r3, #0]
    57e0:	1c45      	adds	r5, r0, #1
    57e2:	701d      	strb	r5, [r3, #0]
    57e4:	2810      	cmp	r0, #16
    57e6:	d303      	bcc.n	57f0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe8>
    57e8:	2146      	movs	r1, #70	; 0x46
    57ea:	2028      	movs	r0, #40	; 0x28
    57ec:	f7fe f9d2 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    57f0:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    57f4:	680d      	ldr	r5, [r1, #0]
    57f6:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
    57fa:	8889      	ldrh	r1, [r1, #4]
    57fc:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    5800:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    5804:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    5808:	bd70      	pop	{r4, r5, r6, pc}
    580a:	0000      	.short	0x0000
    580c:	20000f30 	.word	0x20000f30
    5810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5814:	460f      	mov	r7, r1
    5816:	4606      	mov	r6, r0
    5818:	2400      	movs	r4, #0
    581a:	4d0d      	ldr	r5, [pc, #52]	; (5850 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x148>)
    581c:	e00f      	b.n	583e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x136>
    581e:	bf00      	nop
    5820:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    5824:	f890 1153 	ldrb.w	r1, [r0, #339]	; 0x153
    5828:	42b1      	cmp	r1, r6
    582a:	d106      	bne.n	583a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x132>
    582c:	2206      	movs	r2, #6
    582e:	4639      	mov	r1, r7
    5830:	f500 70aa 	add.w	r0, r0, #340	; 0x154
    5834:	f005 ffb1 	bl	b79a <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    5838:	b138      	cbz	r0, 584a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x142>
    583a:	1c64      	adds	r4, r4, #1
    583c:	b2e4      	uxtb	r4, r4
    583e:	7828      	ldrb	r0, [r5, #0]
    5840:	42a0      	cmp	r0, r4
    5842:	d8ed      	bhi.n	5820 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x118>
    5844:	2010      	movs	r0, #16
    5846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    584a:	4620      	mov	r0, r4
    584c:	e7fb      	b.n	5846 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13e>
    584e:	0000      	.short	0x0000
    5850:	20000f30 	.word	0x20000f30
    5854:	b570      	push	{r4, r5, r6, lr}
    5856:	4605      	mov	r5, r0
    5858:	f7ff ffaa 	bl	57b0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    585c:	2810      	cmp	r0, #16
    585e:	d11c      	bne.n	589a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x192>
    5860:	4c0e      	ldr	r4, [pc, #56]	; (589c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x194>)
    5862:	7820      	ldrb	r0, [r4, #0]
    5864:	1e40      	subs	r0, r0, #1
    5866:	b2c0      	uxtb	r0, r0
    5868:	7020      	strb	r0, [r4, #0]
    586a:	42a8      	cmp	r0, r5
    586c:	d015      	beq.n	589a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x192>
    586e:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    5872:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    5876:	f502 7080 	add.w	r0, r2, #256	; 0x100
    587a:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
    587e:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
    5882:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
    5886:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
    588a:	7820      	ldrb	r0, [r4, #0]
    588c:	f7ff ff90 	bl	57b0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    5890:	2810      	cmp	r0, #16
    5892:	d002      	beq.n	589a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x192>
    5894:	4420      	add	r0, r4
    5896:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    589a:	bd70      	pop	{r4, r5, r6, pc}
    589c:	20000f30 	.word	0x20000f30
    58a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    58a4:	4c21      	ldr	r4, [pc, #132]	; (592c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x224>)
    58a6:	4606      	mov	r6, r0
    58a8:	19a7      	adds	r7, r4, r6
    58aa:	78a0      	ldrb	r0, [r4, #2]
    58ac:	1e40      	subs	r0, r0, #1
    58ae:	b2c5      	uxtb	r5, r0
    58b0:	70a5      	strb	r5, [r4, #2]
    58b2:	f897 8103 	ldrb.w	r8, [r7, #259]	; 0x103
    58b6:	42ae      	cmp	r6, r5
    58b8:	d02a      	beq.n	5910 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x208>
    58ba:	eb04 1a05 	add.w	sl, r4, r5, lsl #4
    58be:	eb04 1906 	add.w	r9, r4, r6, lsl #4
    58c2:	f10a 0103 	add.w	r1, sl, #3
    58c6:	f109 0003 	add.w	r0, r9, #3
    58ca:	2210      	movs	r2, #16
    58cc:	f005 ff77 	bl	b7be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    58d0:	f10a 0183 	add.w	r1, sl, #131	; 0x83
    58d4:	f109 0083 	add.w	r0, r9, #131	; 0x83
    58d8:	2210      	movs	r2, #16
    58da:	f005 ff70 	bl	b7be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    58de:	1960      	adds	r0, r4, r5
    58e0:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    58e4:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    58e8:	f887 1103 	strb.w	r1, [r7, #259]	; 0x103
    58ec:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    58f0:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    58f4:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    58f8:	f8d2 310b 	ldr.w	r3, [r2, #267]	; 0x10b
    58fc:	f8c1 310b 	str.w	r3, [r1, #267]	; 0x10b
    5900:	f8b2 210f 	ldrh.w	r2, [r2, #271]	; 0x10f
    5904:	f8a1 210f 	strh.w	r2, [r1, #271]	; 0x10f
    5908:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    590c:	f887 013b 	strb.w	r0, [r7, #315]	; 0x13b
    5910:	eb04 00c8 	add.w	r0, r4, r8, lsl #3
    5914:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    5918:	07c0      	lsls	r0, r0, #31
    591a:	d104      	bne.n	5926 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x21e>
    591c:	4640      	mov	r0, r8
    591e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5922:	f7ff bf97 	b.w	5854 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x14c>
    5926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    592a:	0000      	.short	0x0000
    592c:	20000f30 	.word	0x20000f30
    5930:	4905      	ldr	r1, [pc, #20]	; (5948 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x240>)
    5932:	784a      	ldrb	r2, [r1, #1]
    5934:	1e52      	subs	r2, r2, #1
    5936:	704a      	strb	r2, [r1, #1]
    5938:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    593c:	2200      	movs	r2, #0
    593e:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
    5942:	f7ff bf87 	b.w	5854 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x14c>
    5946:	0000      	.short	0x0000
    5948:	20000f30 	.word	0x20000f30

0000594c <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ>:
    594c:	b5f0      	push	{r4, r5, r6, r7, lr}
    594e:	f06f 021f 	mvn.w	r2, #31
    5952:	0c01      	lsrs	r1, r0, #16
    5954:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    5958:	251f      	movs	r5, #31
    595a:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    595e:	3854      	subs	r0, #84	; 0x54
    5960:	d00d      	beq.n	597e <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x32>
    5962:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    5966:	3855      	subs	r0, #85	; 0x55
    5968:	d009      	beq.n	597e <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x32>
    596a:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    596e:	38aa      	subs	r0, #170	; 0xaa
    5970:	d005      	beq.n	597e <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x32>
    5972:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    5976:	38aa      	subs	r0, #170	; 0xaa
    5978:	d001      	beq.n	597e <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x32>
    597a:	2001      	movs	r0, #1
    597c:	e000      	b.n	5980 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x34>
    597e:	2000      	movs	r0, #0
    5980:	2200      	movs	r2, #0
    5982:	4613      	mov	r3, r2
    5984:	ea4f 0402 	mov.w	r4, r2
    5988:	ea82 0701 	eor.w	r7, r2, r1
    598c:	43ff      	mvns	r7, r7
    598e:	431f      	orrs	r7, r3
    5990:	1c7f      	adds	r7, r7, #1
    5992:	d00f      	beq.n	59b4 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x68>
    5994:	f006 0701 	and.w	r7, r6, #1
    5998:	0852      	lsrs	r2, r2, #1
    599a:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    599e:	f005 0701 	and.w	r7, r5, #1
    59a2:	085b      	lsrs	r3, r3, #1
    59a4:	0876      	lsrs	r6, r6, #1
    59a6:	086d      	lsrs	r5, r5, #1
    59a8:	1c64      	adds	r4, r4, #1
    59aa:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    59ae:	2c16      	cmp	r4, #22
    59b0:	d3ea      	bcc.n	5988 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x3c>
    59b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    59b4:	2000      	movs	r0, #0
    59b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000059b8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    59b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    59bc:	4604      	mov	r4, r0
    59be:	f100 0568 	add.w	r5, r0, #104	; 0x68
    59c2:	f04f 0901 	mov.w	r9, #1
    59c6:	b171      	cbz	r1, 59e6 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x2e>
    59c8:	f104 077e 	add.w	r7, r4, #126	; 0x7e
    59cc:	1e7e      	subs	r6, r7, #1
    59ce:	2901      	cmp	r1, #1
    59d0:	d021      	beq.n	5a16 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5e>
    59d2:	2902      	cmp	r1, #2
    59d4:	d046      	beq.n	5a64 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xac>
    59d6:	2903      	cmp	r1, #3
    59d8:	d11b      	bne.n	5a12 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5a>
    59da:	4639      	mov	r1, r7
    59dc:	4630      	mov	r0, r6
    59de:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    59e2:	f007 ba40 	b.w	ce66 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    59e6:	f44f 7204 	mov.w	r2, #528	; 0x210
    59ea:	2100      	movs	r1, #0
    59ec:	f005 ff61 	bl	b8b2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    59f0:	f004 fbf4 	bl	a1dc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    59f4:	f644 112b 	movw	r1, #18731	; 0x492b
    59f8:	4008      	ands	r0, r1
    59fa:	f885 9015 	strb.w	r9, [r5, #21]
    59fe:	f885 004c 	strb.w	r0, [r5, #76]	; 0x4c
    5a02:	0a00      	lsrs	r0, r0, #8
    5a04:	f885 004d 	strb.w	r0, [r5, #77]	; 0x4d
    5a08:	20fe      	movs	r0, #254	; 0xfe
    5a0a:	f885 007c 	strb.w	r0, [r5, #124]	; 0x7c
    5a0e:	207f      	movs	r0, #127	; 0x7f
    5a10:	7268      	strb	r0, [r5, #9]
    5a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5a16:	f04f 0800 	mov.w	r8, #0
    5a1a:	f8a4 8106 	strh.w	r8, [r4, #262]	; 0x106
    5a1e:	f884 80fb 	strb.w	r8, [r4, #251]	; 0xfb
    5a22:	6861      	ldr	r1, [r4, #4]
    5a24:	4814      	ldr	r0, [pc, #80]	; (5a78 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc0>)
    5a26:	460a      	mov	r2, r1
    5a28:	4408      	add	r0, r1
    5a2a:	fbb0 f0f1 	udiv	r0, r0, r1
    5a2e:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
    5a32:	f640 30b8 	movw	r0, #3000	; 0xbb8
    5a36:	f8a4 0098 	strh.w	r0, [r4, #152]	; 0x98
    5a3a:	8963      	ldrh	r3, [r4, #10]
    5a3c:	4628      	mov	r0, r5
    5a3e:	f000 f81d 	bl	5a7c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc4>
    5a42:	4639      	mov	r1, r7
    5a44:	4630      	mov	r0, r6
    5a46:	f007 fa0e 	bl	ce66 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    5a4a:	f005 fe82 	bl	b752 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    5a4e:	b118      	cbz	r0, 5a58 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa0>
    5a50:	68e0      	ldr	r0, [r4, #12]
    5a52:	f7ff ff7b 	bl	594c <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ>
    5a56:	b110      	cbz	r0, 5a5e <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa6>
    5a58:	f884 816c 	strb.w	r8, [r4, #364]	; 0x16c
    5a5c:	e7d9      	b.n	5a12 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5a>
    5a5e:	f884 916c 	strb.w	r9, [r4, #364]	; 0x16c
    5a62:	e7d6      	b.n	5a12 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5a>
    5a64:	6841      	ldr	r1, [r0, #4]
    5a66:	f8b4 319a 	ldrh.w	r3, [r4, #410]	; 0x19a
    5a6a:	f8d4 2194 	ldr.w	r2, [r4, #404]	; 0x194
    5a6e:	4628      	mov	r0, r5
    5a70:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5a74:	f000 b802 	b.w	5a7c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc4>
    5a78:	01c9c37f 	.word	0x01c9c37f
    5a7c:	b530      	push	{r4, r5, lr}
    5a7e:	2400      	movs	r4, #0
    5a80:	8684      	strh	r4, [r0, #52]	; 0x34
    5a82:	8f04      	ldrh	r4, [r0, #56]	; 0x38
    5a84:	4d13      	ldr	r5, [pc, #76]	; (5ad4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x11c>)
    5a86:	434c      	muls	r4, r1
    5a88:	fbb4 f4f2 	udiv	r4, r4, r2
    5a8c:	8704      	strh	r4, [r0, #56]	; 0x38
    5a8e:	f242 7410 	movw	r4, #10000	; 0x2710
    5a92:	4363      	muls	r3, r4
    5a94:	fbb3 f3f2 	udiv	r3, r3, r2
    5a98:	1c5b      	adds	r3, r3, #1
    5a9a:	b29b      	uxth	r3, r3
    5a9c:	fb03 f402 	mul.w	r4, r3, r2
    5aa0:	86c3      	strh	r3, [r0, #54]	; 0x36
    5aa2:	42ac      	cmp	r4, r5
    5aa4:	d901      	bls.n	5aaa <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xf2>
    5aa6:	1e5b      	subs	r3, r3, #1
    5aa8:	86c3      	strh	r3, [r0, #54]	; 0x36
    5aaa:	4b0b      	ldr	r3, [pc, #44]	; (5ad8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x120>)
    5aac:	f240 2471 	movw	r4, #625	; 0x271
    5ab0:	fbb3 f3f2 	udiv	r3, r3, r2
    5ab4:	1c5b      	adds	r3, r3, #1
    5ab6:	8783      	strh	r3, [r0, #60]	; 0x3c
    5ab8:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    5aba:	4363      	muls	r3, r4
    5abc:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    5ac0:	1e5b      	subs	r3, r3, #1
    5ac2:	fbb3 f3f2 	udiv	r3, r3, r2
    5ac6:	62c3      	str	r3, [r0, #44]	; 0x2c
    5ac8:	6a83      	ldr	r3, [r0, #40]	; 0x28
    5aca:	434b      	muls	r3, r1
    5acc:	fbb3 f1f2 	udiv	r1, r3, r2
    5ad0:	6281      	str	r1, [r0, #40]	; 0x28
    5ad2:	bd30      	pop	{r4, r5, pc}
    5ad4:	01e84800 	.word	0x01e84800
    5ad8:	02625a00 	.word	0x02625a00
    5adc:	b570      	push	{r4, r5, r6, lr}
    5ade:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
    5ae2:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
    5ae6:	2401      	movs	r4, #1
    5ae8:	fb03 2101 	mla	r1, r3, r1, r2
    5aec:	2225      	movs	r2, #37	; 0x25
    5aee:	fbb1 f3f2 	udiv	r3, r1, r2
    5af2:	fb02 1113 	mls	r1, r2, r3, r1
    5af6:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    5afa:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    5afe:	f001 0307 	and.w	r3, r1, #7
    5b02:	7d92      	ldrb	r2, [r2, #22]
    5b04:	fa04 f303 	lsl.w	r3, r4, r3
    5b08:	421a      	tst	r2, r3
    5b0a:	d003      	beq.n	5b14 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x15c>
    5b0c:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    5b10:	2000      	movs	r0, #0
    5b12:	bd70      	pop	{r4, r5, r6, pc}
    5b14:	f890 2020 	ldrb.w	r2, [r0, #32]
    5b18:	fbb1 f3f2 	udiv	r3, r1, r2
    5b1c:	fb02 1113 	mls	r1, r2, r3, r1
    5b20:	1c49      	adds	r1, r1, #1
    5b22:	b2c9      	uxtb	r1, r1
    5b24:	2300      	movs	r3, #0
    5b26:	18c5      	adds	r5, r0, r3
    5b28:	7eea      	ldrb	r2, [r5, #27]
    5b2a:	428a      	cmp	r2, r1
    5b2c:	d311      	bcc.n	5b52 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x19a>
    5b2e:	f895 5016 	ldrb.w	r5, [r5, #22]
    5b32:	2200      	movs	r2, #0
    5b34:	fa04 f602 	lsl.w	r6, r4, r2
    5b38:	4235      	tst	r5, r6
    5b3a:	d001      	beq.n	5b40 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x188>
    5b3c:	1e49      	subs	r1, r1, #1
    5b3e:	b2c9      	uxtb	r1, r1
    5b40:	b121      	cbz	r1, 5b4c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x194>
    5b42:	1c52      	adds	r2, r2, #1
    5b44:	b2d2      	uxtb	r2, r2
    5b46:	2a08      	cmp	r2, #8
    5b48:	d3f4      	bcc.n	5b34 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x17c>
    5b4a:	e004      	b.n	5b56 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x19e>
    5b4c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    5b50:	e7dc      	b.n	5b0c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x154>
    5b52:	1a89      	subs	r1, r1, r2
    5b54:	b2c9      	uxtb	r1, r1
    5b56:	1c5b      	adds	r3, r3, #1
    5b58:	b2db      	uxtb	r3, r3
    5b5a:	2b05      	cmp	r3, #5
    5b5c:	d3e3      	bcc.n	5b26 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x16e>
    5b5e:	201f      	movs	r0, #31
    5b60:	bd70      	pop	{r4, r5, r6, pc}
	...

00005b64 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>:
    5b64:	7841      	ldrb	r1, [r0, #1]
    5b66:	b141      	cbz	r1, 5b7a <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    5b68:	78c0      	ldrb	r0, [r0, #3]
    5b6a:	2819      	cmp	r0, #25
    5b6c:	d203      	bcs.n	5b76 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x12>
    5b6e:	4a04      	ldr	r2, [pc, #16]	; (5b80 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x1c>)
    5b70:	5c10      	ldrb	r0, [r2, r0]
    5b72:	4288      	cmp	r0, r1
    5b74:	d101      	bne.n	5b7a <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    5b76:	2001      	movs	r0, #1
    5b78:	4770      	bx	lr
    5b7a:	2000      	movs	r0, #0
    5b7c:	4770      	bx	lr
    5b7e:	0000      	.short	0x0000
    5b80:	0000f20c 	.word	0x0000f20c

00005b84 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>:
    5b84:	b50c      	push	{r2, r3, lr}
    5b86:	a20b      	add	r2, pc, #44	; (adr r2, 5bb4 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x30>)
    5b88:	e9d2 1200 	ldrd	r1, r2, [r2]
    5b8c:	e9cd 1200 	strd	r1, r2, [sp]
    5b90:	7901      	ldrb	r1, [r0, #4]
    5b92:	7940      	ldrb	r0, [r0, #5]
    5b94:	f001 0207 	and.w	r2, r1, #7
    5b98:	4669      	mov	r1, sp
    5b9a:	f81d 2002 	ldrb.w	r2, [sp, r2]
    5b9e:	2a01      	cmp	r2, #1
    5ba0:	d804      	bhi.n	5bac <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x28>
    5ba2:	f000 0007 	and.w	r0, r0, #7
    5ba6:	5c08      	ldrb	r0, [r1, r0]
    5ba8:	2801      	cmp	r0, #1
    5baa:	d901      	bls.n	5bb0 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x2c>
    5bac:	2000      	movs	r0, #0
    5bae:	bd0c      	pop	{r2, r3, pc}
    5bb0:	2001      	movs	r0, #1
    5bb2:	bd0c      	pop	{r2, r3, pc}
    5bb4:	02010100 	.word	0x02010100
    5bb8:	03020201 	.word	0x03020201

00005bbc <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>:
    5bbc:	b510      	push	{r4, lr}
    5bbe:	2201      	movs	r2, #1
    5bc0:	70c1      	strb	r1, [r0, #3]
    5bc2:	2919      	cmp	r1, #25
    5bc4:	d202      	bcs.n	5bcc <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x10>
    5bc6:	4a06      	ldr	r2, [pc, #24]	; (5be0 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x24>)
    5bc8:	5c52      	ldrb	r2, [r2, r1]
    5bca:	e006      	b.n	5bda <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    5bcc:	29ff      	cmp	r1, #255	; 0xff
    5bce:	d004      	beq.n	5bda <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    5bd0:	f44f 716e 	mov.w	r1, #952	; 0x3b8
    5bd4:	202a      	movs	r0, #42	; 0x2a
    5bd6:	f7fd ffdd 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5bda:	7042      	strb	r2, [r0, #1]
    5bdc:	bd10      	pop	{r4, pc}
    5bde:	0000      	.short	0x0000
    5be0:	0000f20c 	.word	0x0000f20c

00005be4 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA>:
    5be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5be8:	ea5f 0900 	movs.w	r9, r0
    5bec:	d006      	beq.n	5bfc <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x18>
    5bee:	4d21      	ldr	r5, [pc, #132]	; (5c74 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x90>)
    5bf0:	f105 0010 	add.w	r0, r5, #16
    5bf4:	7b69      	ldrb	r1, [r5, #13]
    5bf6:	4682      	mov	sl, r0
    5bf8:	b119      	cbz	r1, 5c02 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x1e>
    5bfa:	e00b      	b.n	5c14 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x30>
    5bfc:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    5c00:	e005      	b.n	5c0e <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x2a>
    5c02:	2100      	movs	r1, #0
    5c04:	f007 fb18 	bl	d238 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa6>
    5c08:	b120      	cbz	r0, 5c14 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x30>
    5c0a:	f240 31d3 	movw	r1, #979	; 0x3d3
    5c0e:	202b      	movs	r0, #43	; 0x2b
    5c10:	f7fd ffc0 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5c14:	8a2e      	ldrh	r6, [r5, #16]
    5c16:	2000      	movs	r0, #0
    5c18:	f7fe f9c2 	bl	3fa0 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    5c1c:	4f16      	ldr	r7, [pc, #88]	; (5c78 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x94>)
    5c1e:	f8df 805c 	ldr.w	r8, [pc, #92]	; 5c7c <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x98>
    5c22:	4604      	mov	r4, r0
    5c24:	6838      	ldr	r0, [r7, #0]
    5c26:	b158      	cbz	r0, 5c40 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x5c>
    5c28:	8a28      	ldrh	r0, [r5, #16]
    5c2a:	42a0      	cmp	r0, r4
    5c2c:	d308      	bcc.n	5c40 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x5c>
    5c2e:	1b00      	subs	r0, r0, r4
    5c30:	b2c0      	uxtb	r0, r0
    5c32:	2101      	movs	r1, #1
    5c34:	f006 fdbb 	bl	c7ae <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    5c38:	b148      	cbz	r0, 5c4e <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x6a>
    5c3a:	4649      	mov	r1, r9
    5c3c:	683a      	ldr	r2, [r7, #0]
    5c3e:	e004      	b.n	5c4a <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x66>
    5c40:	f8d8 2000 	ldr.w	r2, [r8]
    5c44:	b11a      	cbz	r2, 5c4e <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x6a>
    5c46:	8a28      	ldrh	r0, [r5, #16]
    5c48:	4649      	mov	r1, r9
    5c4a:	4790      	blx	r2
    5c4c:	b968      	cbnz	r0, 5c6a <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x86>
    5c4e:	2100      	movs	r1, #0
    5c50:	4650      	mov	r0, sl
    5c52:	f007 faf1 	bl	d238 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa6>
    5c56:	b910      	cbnz	r0, 5c5e <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x7a>
    5c58:	8a28      	ldrh	r0, [r5, #16]
    5c5a:	42b0      	cmp	r0, r6
    5c5c:	d1e2      	bne.n	5c24 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x40>
    5c5e:	4808      	ldr	r0, [pc, #32]	; (5c80 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x9c>)
    5c60:	6801      	ldr	r1, [r0, #0]
    5c62:	b129      	cbz	r1, 5c70 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x8c>
    5c64:	4648      	mov	r0, r9
    5c66:	4788      	blx	r1
    5c68:	b110      	cbz	r0, 5c70 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x8c>
    5c6a:	2001      	movs	r0, #1
    5c6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5c70:	2000      	movs	r0, #0
    5c72:	e7fb      	b.n	5c6c <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x88>
    5c74:	20000d48 	.word	0x20000d48
    5c78:	2000023c 	.word	0x2000023c
    5c7c:	20000240 	.word	0x20000240
    5c80:	20000248 	.word	0x20000248

00005c84 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI>:
    5c84:	b570      	push	{r4, r5, r6, lr}
    5c86:	0005      	movs	r5, r0
    5c88:	460c      	mov	r4, r1
    5c8a:	d02e      	beq.n	5cea <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x66>
    5c8c:	4818      	ldr	r0, [pc, #96]	; (5cf0 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x6c>)
    5c8e:	6802      	ldr	r2, [r0, #0]
    5c90:	b35a      	cbz	r2, 5cea <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x66>
    5c92:	4628      	mov	r0, r5
    5c94:	4790      	blx	r2
    5c96:	b340      	cbz	r0, 5cea <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x66>
    5c98:	7820      	ldrb	r0, [r4, #0]
    5c9a:	2811      	cmp	r0, #17
    5c9c:	d002      	beq.n	5ca4 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x20>
    5c9e:	2814      	cmp	r0, #20
    5ca0:	d003      	beq.n	5caa <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x26>
    5ca2:	e020      	b.n	5ce6 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    5ca4:	7920      	ldrb	r0, [r4, #4]
    5ca6:	b1f0      	cbz	r0, 5ce6 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    5ca8:	e00a      	b.n	5cc0 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x3c>
    5caa:	7920      	ldrb	r0, [r4, #4]
    5cac:	b120      	cbz	r0, 5cb8 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x34>
    5cae:	4628      	mov	r0, r5
    5cb0:	f007 fcba 	bl	d628 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    5cb4:	b120      	cbz	r0, 5cc0 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x3c>
    5cb6:	e016      	b.n	5ce6 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    5cb8:	490e      	ldr	r1, [pc, #56]	; (5cf4 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x70>)
    5cba:	2000      	movs	r0, #0
    5cbc:	7348      	strb	r0, [r1, #13]
    5cbe:	e012      	b.n	5ce6 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    5cc0:	88e4      	ldrh	r4, [r4, #6]
    5cc2:	2100      	movs	r1, #0
    5cc4:	4620      	mov	r0, r4
    5cc6:	f006 fd72 	bl	c7ae <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    5cca:	b160      	cbz	r0, 5ce6 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    5ccc:	8800      	ldrh	r0, [r0, #0]
    5cce:	f006 fde7 	bl	c8a0 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    5cd2:	2100      	movs	r1, #0
    5cd4:	4620      	mov	r0, r4
    5cd6:	f7fe f9ff 	bl	40d8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    5cda:	b120      	cbz	r0, 5ce6 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    5cdc:	f44f 719a 	mov.w	r1, #308	; 0x134
    5ce0:	202b      	movs	r0, #43	; 0x2b
    5ce2:	f7fd ff57 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5ce6:	2001      	movs	r0, #1
    5ce8:	bd70      	pop	{r4, r5, r6, pc}
    5cea:	2000      	movs	r0, #0
    5cec:	bd70      	pop	{r4, r5, r6, pc}
    5cee:	0000      	.short	0x0000
    5cf0:	20000238 	.word	0x20000238
    5cf4:	20000d48 	.word	0x20000d48

00005cf8 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA>:
    5cf8:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5cfc:	b087      	sub	sp, #28
    5cfe:	460c      	mov	r4, r1
    5d00:	a902      	add	r1, sp, #8
    5d02:	9807      	ldr	r0, [sp, #28]
    5d04:	f006 fe8c 	bl	ca20 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    5d08:	2800      	cmp	r0, #0
    5d0a:	d17d      	bne.n	5e08 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x110>
    5d0c:	f8df 9120 	ldr.w	r9, [pc, #288]	; 5e30 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x138>
    5d10:	f04f 0a01 	mov.w	sl, #1
    5d14:	4680      	mov	r8, r0
    5d16:	9803      	ldr	r0, [sp, #12]
    5d18:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
    5d1c:	2800      	cmp	r0, #0
    5d1e:	d00c      	beq.n	5d3a <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x42>
    5d20:	f8d9 2000 	ldr.w	r2, [r9]
    5d24:	b162      	cbz	r2, 5d40 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x48>
    5d26:	4621      	mov	r1, r4
    5d28:	9807      	ldr	r0, [sp, #28]
    5d2a:	4790      	blx	r2
    5d2c:	b140      	cbz	r0, 5d40 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x48>
    5d2e:	4620      	mov	r0, r4
    5d30:	f000 f91a 	bl	5f68 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe0>
    5d34:	2800      	cmp	r0, #0
    5d36:	d1ee      	bne.n	5d16 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x1e>
    5d38:	2001      	movs	r0, #1
    5d3a:	b009      	add	sp, #36	; 0x24
    5d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5d40:	9d03      	ldr	r5, [sp, #12]
    5d42:	f895 012c 	ldrb.w	r0, [r5, #300]	; 0x12c
    5d46:	3568      	adds	r5, #104	; 0x68
    5d48:	b950      	cbnz	r0, 5d60 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x68>
    5d4a:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    5d4e:	f88d 0004 	strb.w	r0, [sp, #4]
    5d52:	9801      	ldr	r0, [sp, #4]
    5d54:	9001      	str	r0, [sp, #4]
    5d56:	f89d 0004 	ldrb.w	r0, [sp, #4]
    5d5a:	b108      	cbz	r0, 5d60 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x68>
    5d5c:	2001      	movs	r0, #1
    5d5e:	e000      	b.n	5d62 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x6a>
    5d60:	2000      	movs	r0, #0
    5d62:	4683      	mov	fp, r0
    5d64:	f895 0045 	ldrb.w	r0, [r5, #69]	; 0x45
    5d68:	b1c0      	cbz	r0, 5d9c <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xa4>
    5d6a:	f895 0046 	ldrb.w	r0, [r5, #70]	; 0x46
    5d6e:	0780      	lsls	r0, r0, #30
    5d70:	d514      	bpl.n	5d9c <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xa4>
    5d72:	f884 8001 	strb.w	r8, [r4, #1]
    5d76:	f884 a000 	strb.w	sl, [r4]
    5d7a:	f884 8004 	strb.w	r8, [r4, #4]
    5d7e:	9907      	ldr	r1, [sp, #28]
    5d80:	f8a4 1005 	strh.w	r1, [r4, #5]
    5d84:	f895 1047 	ldrb.w	r1, [r5, #71]	; 0x47
    5d88:	71e1      	strb	r1, [r4, #7]
    5d8a:	f8b5 1048 	ldrh.w	r1, [r5, #72]	; 0x48
    5d8e:	8121      	strh	r1, [r4, #8]
    5d90:	f8b5 104a 	ldrh.w	r1, [r5, #74]	; 0x4a
    5d94:	8161      	strh	r1, [r4, #10]
    5d96:	f885 8045 	strb.w	r8, [r5, #69]	; 0x45
    5d9a:	e7c8      	b.n	5d2e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x36>
    5d9c:	9807      	ldr	r0, [sp, #28]
    5d9e:	f7fe fb43 	bl	4428 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    5da2:	0007      	movs	r7, r0
    5da4:	d00d      	beq.n	5dc2 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xca>
    5da6:	f006 fb10 	bl	c3ca <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>
    5daa:	0006      	movs	r6, r0
    5dac:	d015      	beq.n	5dda <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xe2>
    5dae:	f884 8001 	strb.w	r8, [r4, #1]
    5db2:	200d      	movs	r0, #13
    5db4:	7020      	strb	r0, [r4, #0]
    5db6:	9807      	ldr	r0, [sp, #28]
    5db8:	80e0      	strh	r0, [r4, #6]
    5dba:	8126      	strh	r6, [r4, #8]
    5dbc:	f884 a004 	strb.w	sl, [r4, #4]
    5dc0:	e007      	b.n	5dd2 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xda>
    5dc2:	f240 213a 	movw	r1, #570	; 0x23a
    5dc6:	e02d      	b.n	5e24 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x12c>
    5dc8:	2100      	movs	r1, #0
    5dca:	4638      	mov	r0, r7
    5dcc:	460a      	mov	r2, r1
    5dce:	f006 fc0a 	bl	c5e6 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    5dd2:	1e76      	subs	r6, r6, #1
    5dd4:	b2b6      	uxth	r6, r6
    5dd6:	d2f7      	bcs.n	5dc8 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xd0>
    5dd8:	e7a9      	b.n	5d2e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x36>
    5dda:	9807      	ldr	r0, [sp, #28]
    5ddc:	f7fe fb0e 	bl	43fc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    5de0:	b1f0      	cbz	r0, 5e20 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x128>
    5de2:	f1bb 0f00 	cmp.w	fp, #0
    5de6:	d020      	beq.n	5e2a <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x132>
    5de8:	f006 fa27 	bl	c23a <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    5dec:	b160      	cbz	r0, 5e08 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x110>
    5dee:	9807      	ldr	r0, [sp, #28]
    5df0:	f006 fd56 	bl	c8a0 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    5df4:	2100      	movs	r1, #0
    5df6:	9807      	ldr	r0, [sp, #28]
    5df8:	f7fe f96e 	bl	40d8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    5dfc:	f884 8001 	strb.w	r8, [r4, #1]
    5e00:	210a      	movs	r1, #10
    5e02:	4640      	mov	r0, r8
    5e04:	7021      	strb	r1, [r4, #0]
    5e06:	e000      	b.n	5e0a <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x112>
    5e08:	e00f      	b.n	5e2a <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x132>
    5e0a:	f884 8004 	strb.w	r8, [r4, #4]
    5e0e:	9907      	ldr	r1, [sp, #28]
    5e10:	f8a4 1005 	strh.w	r1, [r4, #5]
    5e14:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
    5e18:	71e1      	strb	r1, [r4, #7]
    5e1a:	3524      	adds	r5, #36	; 0x24
    5e1c:	7028      	strb	r0, [r5, #0]
    5e1e:	e786      	b.n	5d2e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x36>
    5e20:	f44f 7116 	mov.w	r1, #600	; 0x258
    5e24:	202b      	movs	r0, #43	; 0x2b
    5e26:	f7fd feb5 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5e2a:	2000      	movs	r0, #0
    5e2c:	e785      	b.n	5d3a <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x42>
    5e2e:	0000      	.short	0x0000
    5e30:	20000244 	.word	0x20000244

00005e34 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>:
    5e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5e38:	4c12      	ldr	r4, [pc, #72]	; (5e84 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    5e3a:	4607      	mov	r7, r0
    5e3c:	460e      	mov	r6, r1
    5e3e:	7de0      	ldrb	r0, [r4, #23]
    5e40:	b110      	cbz	r0, 5e48 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x14>
    5e42:	8b20      	ldrh	r0, [r4, #24]
    5e44:	2800      	cmp	r0, #0
    5e46:	d012      	beq.n	5e6e <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    5e48:	480e      	ldr	r0, [pc, #56]	; (5e84 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    5e4a:	300e      	adds	r0, #14
    5e4c:	4680      	mov	r8, r0
    5e4e:	f007 f99d 	bl	d18c <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    5e52:	b9a8      	cbnz	r0, 5e80 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    5e54:	89e5      	ldrh	r5, [r4, #14]
    5e56:	89e0      	ldrh	r0, [r4, #14]
    5e58:	4632      	mov	r2, r6
    5e5a:	4639      	mov	r1, r7
    5e5c:	f007 f9a5 	bl	d1aa <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x18>
    5e60:	b138      	cbz	r0, 5e72 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3e>
    5e62:	7de0      	ldrb	r0, [r4, #23]
    5e64:	b110      	cbz	r0, 5e6c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x38>
    5e66:	8b20      	ldrh	r0, [r4, #24]
    5e68:	1e40      	subs	r0, r0, #1
    5e6a:	8320      	strh	r0, [r4, #24]
    5e6c:	2001      	movs	r0, #1
    5e6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5e72:	4640      	mov	r0, r8
    5e74:	f007 f98a 	bl	d18c <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    5e78:	b910      	cbnz	r0, 5e80 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    5e7a:	89e0      	ldrh	r0, [r4, #14]
    5e7c:	42a8      	cmp	r0, r5
    5e7e:	d1ea      	bne.n	5e56 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x22>
    5e80:	2000      	movs	r0, #0
    5e82:	e7f4      	b.n	5e6e <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    5e84:	20000d48 	.word	0x20000d48

00005e88 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    5e88:	b510      	push	{r4, lr}
    5e8a:	7901      	ldrb	r1, [r0, #4]
    5e8c:	b119      	cbz	r1, 5e96 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    5e8e:	2901      	cmp	r1, #1
    5e90:	d006      	beq.n	5ea0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    5e92:	2000      	movs	r0, #0
    5e94:	bd10      	pop	{r4, pc}
    5e96:	8842      	ldrh	r2, [r0, #2]
    5e98:	6883      	ldr	r3, [r0, #8]
    5e9a:	8800      	ldrh	r0, [r0, #0]
    5e9c:	2102      	movs	r1, #2
    5e9e:	e003      	b.n	5ea8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    5ea0:	8842      	ldrh	r2, [r0, #2]
    5ea2:	6883      	ldr	r3, [r0, #8]
    5ea4:	8800      	ldrh	r0, [r0, #0]
    5ea6:	2101      	movs	r1, #1
    5ea8:	f000 f808 	bl	5ebc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x34>
    5eac:	b910      	cbnz	r0, 5eb4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2c>
    5eae:	4902      	ldr	r1, [pc, #8]	; (5eb8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x30>)
    5eb0:	2001      	movs	r0, #1
    5eb2:	7008      	strb	r0, [r1, #0]
    5eb4:	2001      	movs	r0, #1
    5eb6:	bd10      	pop	{r4, pc}
    5eb8:	20000d48 	.word	0x20000d48
    5ebc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    5ec0:	468a      	mov	sl, r1
    5ec2:	4699      	mov	r9, r3
    5ec4:	4615      	mov	r5, r2
    5ec6:	4604      	mov	r4, r0
    5ec8:	a901      	add	r1, sp, #4
    5eca:	f006 fda9 	bl	ca20 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    5ece:	bbe0      	cbnz	r0, 5f4a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xc2>
    5ed0:	9f02      	ldr	r7, [sp, #8]
    5ed2:	f04f 0800 	mov.w	r8, #0
    5ed6:	3768      	adds	r7, #104	; 0x68
    5ed8:	b18d      	cbz	r5, 5efe <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x76>
    5eda:	4620      	mov	r0, r4
    5edc:	f7fe faa4 	bl	4428 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    5ee0:	0004      	movs	r4, r0
    5ee2:	d00f      	beq.n	5f04 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x7c>
    5ee4:	4629      	mov	r1, r5
    5ee6:	f006 faaf 	bl	c448 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    5eea:	0006      	movs	r6, r0
    5eec:	d003      	beq.n	5ef6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6e>
    5eee:	481d      	ldr	r0, [pc, #116]	; (5f64 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xdc>)
    5ef0:	8880      	ldrh	r0, [r0, #4]
    5ef2:	42a8      	cmp	r0, r5
    5ef4:	d208      	bcs.n	5f08 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x80>
    5ef6:	2000      	movs	r0, #0
    5ef8:	b004      	add	sp, #16
    5efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5efe:	2001      	movs	r0, #1
    5f00:	7538      	strb	r0, [r7, #20]
    5f02:	e029      	b.n	5f58 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd0>
    5f04:	2189      	movs	r1, #137	; 0x89
    5f06:	e02a      	b.n	5f5e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd6>
    5f08:	4620      	mov	r0, r4
    5f0a:	4631      	mov	r1, r6
    5f0c:	aa03      	add	r2, sp, #12
    5f0e:	f006 fa94 	bl	c43a <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    5f12:	9803      	ldr	r0, [sp, #12]
    5f14:	f8a0 8000 	strh.w	r8, [r0]
    5f18:	f880 8002 	strb.w	r8, [r0, #2]
    5f1c:	7d39      	ldrb	r1, [r7, #20]
    5f1e:	b109      	cbz	r1, 5f24 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x9c>
    5f20:	f04f 0a02 	mov.w	sl, #2
    5f24:	4651      	mov	r1, sl
    5f26:	f007 f888 	bl	d03a <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    5f2a:	4631      	mov	r1, r6
    5f2c:	2603      	movs	r6, #3
    5f2e:	4620      	mov	r0, r4
    5f30:	464a      	mov	r2, r9
    5f32:	462b      	mov	r3, r5
    5f34:	9600      	str	r6, [sp, #0]
    5f36:	f006 f969 	bl	c20c <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>
    5f3a:	4620      	mov	r0, r4
    5f3c:	4629      	mov	r1, r5
    5f3e:	f006 fa20 	bl	c382 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    5f42:	b158      	cbz	r0, 5f5c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd4>
    5f44:	4644      	mov	r4, r8
    5f46:	a801      	add	r0, sp, #4
    5f48:	e000      	b.n	5f4c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xc4>
    5f4a:	e005      	b.n	5f58 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd0>
    5f4c:	f007 f921 	bl	d192 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    5f50:	9802      	ldr	r0, [sp, #8]
    5f52:	f8a0 40f2 	strh.w	r4, [r0, #242]	; 0xf2
    5f56:	753c      	strb	r4, [r7, #20]
    5f58:	2001      	movs	r0, #1
    5f5a:	e7cd      	b.n	5ef8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x70>
    5f5c:	219f      	movs	r1, #159	; 0x9f
    5f5e:	202b      	movs	r0, #43	; 0x2b
    5f60:	f7fd fe18 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5f64:	20000d48 	.word	0x20000d48
    5f68:	b510      	push	{r4, lr}
    5f6a:	492c      	ldr	r1, [pc, #176]	; (601c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x194>)
    5f6c:	b086      	sub	sp, #24
    5f6e:	7d8a      	ldrb	r2, [r1, #22]
    5f70:	7801      	ldrb	r1, [r0, #0]
    5f72:	07d3      	lsls	r3, r2, #31
    5f74:	d101      	bne.n	5f7a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xf2>
    5f76:	2919      	cmp	r1, #25
    5f78:	d004      	beq.n	5f84 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xfc>
    5f7a:	2918      	cmp	r1, #24
    5f7c:	d01e      	beq.n	5fbc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x134>
    5f7e:	2912      	cmp	r1, #18
    5f80:	d045      	beq.n	600e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x186>
    5f82:	e049      	b.n	6018 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x190>
    5f84:	8880      	ldrh	r0, [r0, #4]
    5f86:	f8ad 0000 	strh.w	r0, [sp]
    5f8a:	a902      	add	r1, sp, #8
    5f8c:	f006 fd48 	bl	ca20 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    5f90:	b108      	cbz	r0, 5f96 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x10e>
    5f92:	2158      	movs	r1, #88	; 0x58
    5f94:	e035      	b.n	6002 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x17a>
    5f96:	9803      	ldr	r0, [sp, #12]
    5f98:	f810 1f5e 	ldrb.w	r1, [r0, #94]!
    5f9c:	f88d 1002 	strb.w	r1, [sp, #2]
    5fa0:	7841      	ldrb	r1, [r0, #1]
    5fa2:	f88d 1003 	strb.w	r1, [sp, #3]
    5fa6:	8840      	ldrh	r0, [r0, #2]
    5fa8:	f8ad 0004 	strh.w	r0, [sp, #4]
    5fac:	2102      	movs	r1, #2
    5fae:	4668      	mov	r0, sp
    5fb0:	f008 fd10 	bl	e9d4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    5fb4:	b340      	cbz	r0, 6008 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x180>
    5fb6:	f240 114d 	movw	r1, #333	; 0x14d
    5fba:	e022      	b.n	6002 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x17a>
    5fbc:	0791      	lsls	r1, r2, #30
    5fbe:	d42b      	bmi.n	6018 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x190>
    5fc0:	8884      	ldrh	r4, [r0, #4]
    5fc2:	a903      	add	r1, sp, #12
    5fc4:	4620      	mov	r0, r4
    5fc6:	f008 fb70 	bl	e6aa <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    5fca:	b110      	cbz	r0, 5fd2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x14a>
    5fcc:	f44f 71aa 	mov.w	r1, #340	; 0x154
    5fd0:	e017      	b.n	6002 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x17a>
    5fd2:	f8ad 4000 	strh.w	r4, [sp]
    5fd6:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    5fda:	f8ad 0002 	strh.w	r0, [sp, #2]
    5fde:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    5fe2:	f8ad 0004 	strh.w	r0, [sp, #4]
    5fe6:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    5fea:	f8ad 0006 	strh.w	r0, [sp, #6]
    5fee:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    5ff2:	f8ad 0008 	strh.w	r0, [sp, #8]
    5ff6:	4668      	mov	r0, sp
    5ff8:	f008 fbf4 	bl	e7e4 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    5ffc:	b120      	cbz	r0, 6008 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x180>
    5ffe:	f240 115d 	movw	r1, #349	; 0x15d
    6002:	202b      	movs	r0, #43	; 0x2b
    6004:	f7fd fdc6 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6008:	2001      	movs	r0, #1
    600a:	b006      	add	sp, #24
    600c:	bd10      	pop	{r4, pc}
    600e:	0751      	lsls	r1, r2, #29
    6010:	d402      	bmi.n	6018 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x190>
    6012:	7b80      	ldrb	r0, [r0, #14]
    6014:	07c0      	lsls	r0, r0, #31
    6016:	d0f7      	beq.n	6008 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x180>
    6018:	2000      	movs	r0, #0
    601a:	e7f6      	b.n	600a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x182>
    601c:	20000d48 	.word	0x20000d48

00006020 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
    6020:	b570      	push	{r4, r5, r6, lr}
    6022:	4604      	mov	r4, r0
    6024:	7c00      	ldrb	r0, [r0, #16]
    6026:	b300      	cbz	r0, 606a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    6028:	2802      	cmp	r0, #2
    602a:	d01e      	beq.n	606a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    602c:	f05f 0001 	movs.w	r0, #1
    6030:	f104 0149 	add.w	r1, r4, #73	; 0x49
    6034:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
    6038:	460d      	mov	r5, r1
    603a:	b1c0      	cbz	r0, 606e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4e>
    603c:	7de0      	ldrb	r0, [r4, #23]
    603e:	b1f0      	cbz	r0, 607e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x5e>
    6040:	f8d4 0011 	ldr.w	r0, [r4, #17]
    6044:	f8c4 0049 	str.w	r0, [r4, #73]	; 0x49
    6048:	f8b4 0015 	ldrh.w	r0, [r4, #21]
    604c:	f8a4 004d 	strh.w	r0, [r4, #77]	; 0x4d
    6050:	7c20      	ldrb	r0, [r4, #16]
    6052:	f007 fa57 	bl	d504 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xcc>
    6056:	7620      	strb	r0, [r4, #24]
    6058:	2008      	movs	r0, #8
    605a:	7660      	strb	r0, [r4, #25]
    605c:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    6060:	4629      	mov	r1, r5
    6062:	f007 fa3b 	bl	d4dc <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xa4>
    6066:	b9a8      	cbnz	r0, 6094 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x74>
    6068:	e00e      	b.n	6088 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x68>
    606a:	2000      	movs	r0, #0
    606c:	e7e0      	b.n	6030 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10>
    606e:	2000      	movs	r0, #0
    6070:	f7fe fc52 	bl	4918 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    6074:	2800      	cmp	r0, #0
    6076:	d1eb      	bne.n	6050 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x30>
    6078:	f240 417f 	movw	r1, #1151	; 0x47f
    607c:	e001      	b.n	6082 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x62>
    607e:	f240 4183 	movw	r1, #1155	; 0x483
    6082:	202d      	movs	r0, #45	; 0x2d
    6084:	f7fd fd86 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6088:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    608c:	4629      	mov	r1, r5
    608e:	f007 fa2e 	bl	d4ee <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb6>
    6092:	b100      	cbz	r0, 6096 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x76>
    6094:	2001      	movs	r0, #1
    6096:	76a0      	strb	r0, [r4, #26]
    6098:	7e20      	ldrb	r0, [r4, #24]
    609a:	b910      	cbnz	r0, 60a2 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x82>
    609c:	78a0      	ldrb	r0, [r4, #2]
    609e:	0740      	lsls	r0, r0, #29
    60a0:	d506      	bpl.n	60b0 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x90>
    60a2:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
    60a6:	f104 0150 	add.w	r1, r4, #80	; 0x50
    60aa:	f006 fc76 	bl	c99a <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    60ae:	7660      	strb	r0, [r4, #25]
    60b0:	2500      	movs	r5, #0
    60b2:	6425      	str	r5, [r4, #64]	; 0x40
    60b4:	f005 fa03 	bl	b4be <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    60b8:	6460      	str	r0, [r4, #68]	; 0x44
    60ba:	2100      	movs	r1, #0
    60bc:	4620      	mov	r0, r4
    60be:	f007 fb6f 	bl	d7a0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8e>
    60c2:	f884 5056 	strb.w	r5, [r4, #86]	; 0x56
    60c6:	78a0      	ldrb	r0, [r4, #2]
    60c8:	0740      	lsls	r0, r0, #29
    60ca:	d508      	bpl.n	60de <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbe>
    60cc:	7e20      	ldrb	r0, [r4, #24]
    60ce:	2800      	cmp	r0, #0
    60d0:	d005      	beq.n	60de <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbe>
    60d2:	4620      	mov	r0, r4
    60d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    60d8:	2100      	movs	r1, #0
    60da:	f000 bdcd 	b.w	6c78 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x600>
    60de:	bd70      	pop	{r4, r5, r6, pc}

000060e0 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA>:
    60e0:	b508      	push	{r3, lr}
    60e2:	f890 20a8 	ldrb.w	r2, [r0, #168]	; 0xa8
    60e6:	f88d 2000 	strb.w	r2, [sp]
    60ea:	9a00      	ldr	r2, [sp, #0]
    60ec:	9200      	str	r2, [sp, #0]
    60ee:	f89d 3000 	ldrb.w	r3, [sp]
    60f2:	2200      	movs	r2, #0
    60f4:	b163      	cbz	r3, 6110 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x30>
    60f6:	704a      	strb	r2, [r1, #1]
    60f8:	2317      	movs	r3, #23
    60fa:	700b      	strb	r3, [r1, #0]
    60fc:	f850 3fa9 	ldr.w	r3, [r0, #169]!
    6100:	604b      	str	r3, [r1, #4]
    6102:	6843      	ldr	r3, [r0, #4]
    6104:	608b      	str	r3, [r1, #8]
    6106:	7a03      	ldrb	r3, [r0, #8]
    6108:	730b      	strb	r3, [r1, #12]
    610a:	f800 2c01 	strb.w	r2, [r0, #-1]
    610e:	e03b      	b.n	6188 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    6110:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    6114:	f88d 3000 	strb.w	r3, [sp]
    6118:	9b00      	ldr	r3, [sp, #0]
    611a:	9300      	str	r3, [sp, #0]
    611c:	f89d 3000 	ldrb.w	r3, [sp]
    6120:	b143      	cbz	r3, 6134 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x54>
    6122:	704a      	strb	r2, [r1, #1]
    6124:	2305      	movs	r3, #5
    6126:	700b      	strb	r3, [r1, #0]
    6128:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    612c:	604b      	str	r3, [r1, #4]
    612e:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
    6132:	e029      	b.n	6188 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    6134:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
    6138:	f88d 3000 	strb.w	r3, [sp]
    613c:	9b00      	ldr	r3, [sp, #0]
    613e:	9300      	str	r3, [sp, #0]
    6140:	f89d 3000 	ldrb.w	r3, [sp]
    6144:	b11b      	cbz	r3, 614e <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x6e>
    6146:	bf00      	nop
    6148:	f007 fb01 	bl	d74e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3c>
    614c:	e01c      	b.n	6188 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    614e:	f890 309a 	ldrb.w	r3, [r0, #154]	; 0x9a
    6152:	f88d 3000 	strb.w	r3, [sp]
    6156:	9b00      	ldr	r3, [sp, #0]
    6158:	9300      	str	r3, [sp, #0]
    615a:	f89d 3000 	ldrb.w	r3, [sp]
    615e:	b1ab      	cbz	r3, 618c <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xac>
    6160:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
    6164:	f88d 3000 	strb.w	r3, [sp]
    6168:	9b00      	ldr	r3, [sp, #0]
    616a:	9300      	str	r3, [sp, #0]
    616c:	f89d 3000 	ldrb.w	r3, [sp]
    6170:	2b00      	cmp	r3, #0
    6172:	d1e9      	bne.n	6148 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x68>
    6174:	704a      	strb	r2, [r1, #1]
    6176:	2314      	movs	r3, #20
    6178:	700b      	strb	r3, [r1, #0]
    617a:	f850 3f9c 	ldr.w	r3, [r0, #156]!
    617e:	604b      	str	r3, [r1, #4]
    6180:	8883      	ldrh	r3, [r0, #4]
    6182:	810b      	strh	r3, [r1, #8]
    6184:	f800 2c02 	strb.w	r2, [r0, #-2]
    6188:	2001      	movs	r0, #1
    618a:	bd08      	pop	{r3, pc}
    618c:	2000      	movs	r0, #0
    618e:	bd08      	pop	{r3, pc}

00006190 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
    6190:	b530      	push	{r4, r5, lr}
    6192:	460c      	mov	r4, r1
    6194:	b08d      	sub	sp, #52	; 0x34
    6196:	4605      	mov	r5, r0
    6198:	4601      	mov	r1, r0
    619a:	2220      	movs	r2, #32
    619c:	a802      	add	r0, sp, #8
    619e:	f005 fb0e 	bl	b7be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    61a2:	a80a      	add	r0, sp, #40	; 0x28
    61a4:	f007 fba9 	bl	d8fa <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    61a8:	7aa0      	ldrb	r0, [r4, #10]
    61aa:	f88d 0018 	strb.w	r0, [sp, #24]
    61ae:	7820      	ldrb	r0, [r4, #0]
    61b0:	f88d 0008 	strb.w	r0, [sp, #8]
    61b4:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    61b8:	f8ad 0000 	strh.w	r0, [sp]
    61bc:	f89d 0000 	ldrb.w	r0, [sp]
    61c0:	f000 0101 	and.w	r1, r0, #1
    61c4:	f3c0 0240 	ubfx	r2, r0, #1, #1
    61c8:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    61cc:	f3c0 0280 	ubfx	r2, r0, #2, #1
    61d0:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    61d4:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    61d8:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    61dc:	f3c0 1200 	ubfx	r2, r0, #4, #1
    61e0:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    61e4:	f3c0 1240 	ubfx	r2, r0, #5, #1
    61e8:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    61ec:	f3c0 1080 	ubfx	r0, r0, #6, #1
    61f0:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
    61f4:	f8ad 000a 	strh.w	r0, [sp, #10]
    61f8:	7d20      	ldrb	r0, [r4, #20]
    61fa:	2801      	cmp	r0, #1
    61fc:	d006      	beq.n	620c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    61fe:	2802      	cmp	r0, #2
    6200:	d004      	beq.n	620c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    6202:	f240 2185 	movw	r1, #645	; 0x285
    6206:	2006      	movs	r0, #6
    6208:	f7fd fcc4 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    620c:	f88d 000c 	strb.w	r0, [sp, #12]
    6210:	7a61      	ldrb	r1, [r4, #9]
    6212:	a80a      	add	r0, sp, #40	; 0x28
    6214:	f007 fb58 	bl	d8c8 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
    6218:	7d20      	ldrb	r0, [r4, #20]
    621a:	2101      	movs	r1, #1
    621c:	2802      	cmp	r0, #2
    621e:	d102      	bne.n	6226 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x96>
    6220:	7d60      	ldrb	r0, [r4, #21]
    6222:	1c40      	adds	r0, r0, #1
    6224:	b2c1      	uxtb	r1, r0
    6226:	7ea0      	ldrb	r0, [r4, #26]
    6228:	1c40      	adds	r0, r0, #1
    622a:	b2c2      	uxtb	r2, r0
    622c:	a80a      	add	r0, sp, #40	; 0x28
    622e:	f007 fb12 	bl	d856 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
    6232:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    6236:	0700      	lsls	r0, r0, #28
    6238:	d501      	bpl.n	623e <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xae>
    623a:	2000      	movs	r0, #0
    623c:	e020      	b.n	6280 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf0>
    623e:	a80a      	add	r0, sp, #40	; 0x28
    6240:	f007 fb1b 	bl	d87a <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    6244:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    6248:	2228      	movs	r2, #40	; 0x28
    624a:	f000 fdbd 	bl	6dc8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    624e:	f240 2171 	movw	r1, #625	; 0x271
    6252:	f200 20d5 	addw	r0, r0, #725	; 0x2d5
    6256:	fbb0 f0f1 	udiv	r0, r0, r1
    625a:	4348      	muls	r0, r1
    625c:	f8d4 1002 	ldr.w	r1, [r4, #2]
    6260:	f240 2371 	movw	r3, #625	; 0x271
    6264:	0a0a      	lsrs	r2, r1, #8
    6266:	f240 2171 	movw	r1, #625	; 0x271
    626a:	434a      	muls	r2, r1
    626c:	f8d4 1005 	ldr.w	r1, [r4, #5]
    6270:	0a09      	lsrs	r1, r1, #8
    6272:	4359      	muls	r1, r3
    6274:	4290      	cmp	r0, r2
    6276:	d801      	bhi.n	627c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xec>
    6278:	9204      	str	r2, [sp, #16]
    627a:	e004      	b.n	6286 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    627c:	4288      	cmp	r0, r1
    627e:	d801      	bhi.n	6284 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf4>
    6280:	9004      	str	r0, [sp, #16]
    6282:	e000      	b.n	6286 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    6284:	9104      	str	r1, [sp, #16]
    6286:	7ca0      	ldrb	r0, [r4, #18]
    6288:	f88d 0017 	strb.w	r0, [sp, #23]
    628c:	7e20      	ldrb	r0, [r4, #24]
    628e:	2801      	cmp	r0, #1
    6290:	d000      	beq.n	6294 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x104>
    6292:	2000      	movs	r0, #0
    6294:	f88d 0014 	strb.w	r0, [sp, #20]
    6298:	f895 0074 	ldrb.w	r0, [r5, #116]	; 0x74
    629c:	f895 0075 	ldrb.w	r0, [r5, #117]	; 0x75
    62a0:	2220      	movs	r2, #32
    62a2:	a902      	add	r1, sp, #8
    62a4:	4628      	mov	r0, r5
    62a6:	f005 fa8a 	bl	b7be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    62aa:	980a      	ldr	r0, [sp, #40]	; 0x28
    62ac:	6228      	str	r0, [r5, #32]
    62ae:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
    62b2:	84a8      	strh	r0, [r5, #36]	; 0x24
    62b4:	7ae0      	ldrb	r0, [r4, #11]
    62b6:	b168      	cbz	r0, 62d4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x144>
    62b8:	2802      	cmp	r0, #2
    62ba:	d00b      	beq.n	62d4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x144>
    62bc:	f05f 0001 	movs.w	r0, #1
    62c0:	f885 004f 	strb.w	r0, [r5, #79]	; 0x4f
    62c4:	68e0      	ldr	r0, [r4, #12]
    62c6:	6528      	str	r0, [r5, #80]	; 0x50
    62c8:	8a20      	ldrh	r0, [r4, #16]
    62ca:	f8a5 0054 	strh.w	r0, [r5, #84]	; 0x54
    62ce:	b00d      	add	sp, #52	; 0x34
    62d0:	2000      	movs	r0, #0
    62d2:	bd30      	pop	{r4, r5, pc}
    62d4:	2000      	movs	r0, #0
    62d6:	e7f3      	b.n	62c0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x130>

000062d8 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
    62d8:	4a0a      	ldr	r2, [pc, #40]	; (6304 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x2c>)
    62da:	b510      	push	{r4, lr}
    62dc:	2100      	movs	r1, #0
    62de:	7011      	strb	r1, [r2, #0]
    62e0:	4c09      	ldr	r4, [pc, #36]	; (6308 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x30>)
    62e2:	6060      	str	r0, [r4, #4]
    62e4:	f000 f822 	bl	632c <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    62e8:	b110      	cbz	r0, 62f0 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x18>
    62ea:	f44f 7148 	mov.w	r1, #800	; 0x320
    62ee:	e004      	b.n	62fa <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x22>
    62f0:	68a0      	ldr	r0, [r4, #8]
    62f2:	2800      	cmp	r0, #0
    62f4:	d104      	bne.n	6300 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x28>
    62f6:	f240 3123 	movw	r1, #803	; 0x323
    62fa:	202d      	movs	r0, #45	; 0x2d
    62fc:	f7fd fc4a 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6300:	bd10      	pop	{r4, pc}
    6302:	0000      	.short	0x0000
    6304:	20000d64 	.word	0x20000d64
    6308:	20000100 	.word	0x20000100

0000630c <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
    630c:	4902      	ldr	r1, [pc, #8]	; (6318 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
    630e:	4801      	ldr	r0, [pc, #4]	; (6314 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
    6310:	6088      	str	r0, [r1, #8]
    6312:	4770      	bx	lr
    6314:	00006db0 	.word	0x00006db0
    6318:	20000100 	.word	0x20000100

0000631c <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
    631c:	4902      	ldr	r1, [pc, #8]	; (6328 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0xc>)
    631e:	6008      	str	r0, [r1, #0]
    6320:	6889      	ldr	r1, [r1, #8]
    6322:	6809      	ldr	r1, [r1, #0]
    6324:	4708      	bx	r1
    6326:	0000      	.short	0x0000
    6328:	20000100 	.word	0x20000100

0000632c <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
    632c:	4808      	ldr	r0, [pc, #32]	; (6350 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    632e:	b510      	push	{r4, lr}
    6330:	7801      	ldrb	r1, [r0, #0]
    6332:	b111      	cbz	r1, 633a <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
    6334:	240c      	movs	r4, #12
    6336:	4620      	mov	r0, r4
    6338:	bd10      	pop	{r4, pc}
    633a:	2400      	movs	r4, #0
    633c:	6004      	str	r4, [r0, #0]
    633e:	6044      	str	r4, [r0, #4]
    6340:	6084      	str	r4, [r0, #8]
    6342:	60c4      	str	r4, [r0, #12]
    6344:	f004 f92e 	bl	a5a4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    6348:	f003 ff70 	bl	a22c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    634c:	e7f3      	b.n	6336 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xa>
    634e:	0000      	.short	0x0000
    6350:	20000d64 	.word	0x20000d64

00006354 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
    6354:	4904      	ldr	r1, [pc, #16]	; (6368 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x14>)
    6356:	b510      	push	{r4, lr}
    6358:	7809      	ldrb	r1, [r1, #0]
    635a:	2901      	cmp	r1, #1
    635c:	d101      	bne.n	6362 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xe>
    635e:	f000 fb77 	bl	6a50 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d8>
    6362:	2000      	movs	r0, #0
    6364:	bd10      	pop	{r4, pc}
    6366:	0000      	.short	0x0000
    6368:	20000d64 	.word	0x20000d64

0000636c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>:
    636c:	4902      	ldr	r1, [pc, #8]	; (6378 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xc>)
    636e:	4801      	ldr	r0, [pc, #4]	; (6374 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8>)
    6370:	6008      	str	r0, [r1, #0]
    6372:	4770      	bx	lr
    6374:	00006b9d 	.word	0x00006b9d
    6378:	2000010c 	.word	0x2000010c
    637c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6380:	000f      	movs	r7, r1
    6382:	4604      	mov	r4, r0
    6384:	d023      	beq.n	63ce <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x62>
    6386:	f104 0020 	add.w	r0, r4, #32
    638a:	4605      	mov	r5, r0
    638c:	f007 fa9e 	bl	d8cc <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    6390:	b9b0      	cbnz	r0, 63c0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x54>
    6392:	78a0      	ldrb	r0, [r4, #2]
    6394:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    6398:	b350      	cbz	r0, 63f0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x84>
    639a:	4628      	mov	r0, r5
    639c:	f007 fa6d 	bl	d87a <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    63a0:	4606      	mov	r6, r0
    63a2:	4628      	mov	r0, r5
    63a4:	f007 fa92 	bl	d8cc <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    63a8:	1a30      	subs	r0, r6, r0
    63aa:	b2c0      	uxtb	r0, r0
    63ac:	f007 fae3 	bl	d976 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    63b0:	4601      	mov	r1, r0
    63b2:	4835      	ldr	r0, [pc, #212]	; (6488 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x11c>)
    63b4:	6842      	ldr	r2, [r0, #4]
    63b6:	4411      	add	r1, r2
    63b8:	6041      	str	r1, [r0, #4]
    63ba:	4628      	mov	r0, r5
    63bc:	f007 faa4 	bl	d908 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    63c0:	4628      	mov	r0, r5
    63c2:	f007 fa66 	bl	d892 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    63c6:	4601      	mov	r1, r0
    63c8:	4620      	mov	r0, r4
    63ca:	f007 fa25 	bl	d818 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x106>
    63ce:	4d2f      	ldr	r5, [pc, #188]	; (648c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x120>)
    63d0:	f894 6056 	ldrb.w	r6, [r4, #86]	; 0x56
    63d4:	2100      	movs	r1, #0
    63d6:	6868      	ldr	r0, [r5, #4]
    63d8:	8001      	strh	r1, [r0, #0]
    63da:	f007 fa33 	bl	d844 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x132>
    63de:	8860      	ldrh	r0, [r4, #2]
    63e0:	2813      	cmp	r0, #19
    63e2:	d013      	beq.n	640c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xa0>
    63e4:	dc09      	bgt.n	63fa <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8e>
    63e6:	2810      	cmp	r0, #16
    63e8:	d036      	beq.n	6458 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xec>
    63ea:	2812      	cmp	r0, #18
    63ec:	d109      	bne.n	6402 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x96>
    63ee:	e031      	b.n	6454 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe8>
    63f0:	4620      	mov	r0, r4
    63f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    63f6:	f000 bb2b 	b.w	6a50 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d8>
    63fa:	2815      	cmp	r0, #21
    63fc:	d00f      	beq.n	641e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    63fe:	281d      	cmp	r0, #29
    6400:	d00d      	beq.n	641e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    6402:	f240 6196 	movw	r1, #1686	; 0x696
    6406:	202d      	movs	r0, #45	; 0x2d
    6408:	f7fd fbc4 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    640c:	2100      	movs	r1, #0
    640e:	6868      	ldr	r0, [r5, #4]
    6410:	f006 fe75 	bl	d0fe <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    6414:	2101      	movs	r1, #1
    6416:	6868      	ldr	r0, [r5, #4]
    6418:	f007 fa14 	bl	d844 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x132>
    641c:	e020      	b.n	6460 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    641e:	2101      	movs	r1, #1
    6420:	6868      	ldr	r0, [r5, #4]
    6422:	f006 fe6c 	bl	d0fe <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    6426:	2101      	movs	r1, #1
    6428:	6868      	ldr	r0, [r5, #4]
    642a:	f007 fa0b 	bl	d844 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x132>
    642e:	b136      	cbz	r6, 643e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xd2>
    6430:	f104 0157 	add.w	r1, r4, #87	; 0x57
    6434:	6868      	ldr	r0, [r5, #4]
    6436:	f006 fe7d 	bl	d134 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    643a:	2101      	movs	r1, #1
    643c:	e006      	b.n	644c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe0>
    643e:	f104 0150 	add.w	r1, r4, #80	; 0x50
    6442:	6868      	ldr	r0, [r5, #4]
    6444:	f006 fe76 	bl	d134 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    6448:	f894 104f 	ldrb.w	r1, [r4, #79]	; 0x4f
    644c:	6868      	ldr	r0, [r5, #4]
    644e:	f006 fe77 	bl	d140 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    6452:	e005      	b.n	6460 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    6454:	2106      	movs	r1, #6
    6456:	e000      	b.n	645a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xee>
    6458:	2102      	movs	r1, #2
    645a:	6868      	ldr	r0, [r5, #4]
    645c:	f006 fe4f 	bl	d0fe <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    6460:	4620      	mov	r0, r4
    6462:	f000 fc7f 	bl	6d64 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6ec>
    6466:	8860      	ldrh	r0, [r4, #2]
    6468:	281d      	cmp	r0, #29
    646a:	d006      	beq.n	647a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10e>
    646c:	2815      	cmp	r0, #21
    646e:	d004      	beq.n	647a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10e>
    6470:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    6472:	6b21      	ldr	r1, [r4, #48]	; 0x30
    6474:	6868      	ldr	r0, [r5, #4]
    6476:	f006 fe32 	bl	d0de <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>
    647a:	4639      	mov	r1, r7
    647c:	4620      	mov	r0, r4
    647e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6482:	f000 b9e5 	b.w	6850 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d8>
    6486:	0000      	.short	0x0000
    6488:	20000d64 	.word	0x20000d64
    648c:	20000100 	.word	0x20000100
    6490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6494:	4d28      	ldr	r5, [pc, #160]	; (6538 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1cc>)
    6496:	4680      	mov	r8, r0
    6498:	7828      	ldrb	r0, [r5, #0]
    649a:	2802      	cmp	r0, #2
    649c:	d005      	beq.n	64aa <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    649e:	7828      	ldrb	r0, [r5, #0]
    64a0:	2803      	cmp	r0, #3
    64a2:	d002      	beq.n	64aa <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    64a4:	f640 4191 	movw	r1, #3217	; 0xc91
    64a8:	e01f      	b.n	64ea <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x17e>
    64aa:	4c24      	ldr	r4, [pc, #144]	; (653c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1d0>)
    64ac:	6820      	ldr	r0, [r4, #0]
    64ae:	7b01      	ldrb	r1, [r0, #12]
    64b0:	b109      	cbz	r1, 64b6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x14a>
    64b2:	f007 f9bc 	bl	d82e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x11c>
    64b6:	6860      	ldr	r0, [r4, #4]
    64b8:	2700      	movs	r7, #0
    64ba:	f1b8 0f00 	cmp.w	r8, #0
    64be:	7800      	ldrb	r0, [r0, #0]
    64c0:	f000 060f 	and.w	r6, r0, #15
    64c4:	d01f      	beq.n	6506 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x19a>
    64c6:	f004 fa7b 	bl	a9c0 <sym_JG4OWOPOBDSVKYOWPCJHHMQ7GDZVMOEUZX73ZYA>
    64ca:	b1e0      	cbz	r0, 6506 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x19a>
    64cc:	4639      	mov	r1, r7
    64ce:	6860      	ldr	r0, [r4, #4]
    64d0:	f006 fdcb 	bl	d06a <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>
    64d4:	b1b8      	cbz	r0, 6506 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x19a>
    64d6:	782a      	ldrb	r2, [r5, #0]
    64d8:	6820      	ldr	r0, [r4, #0]
    64da:	4631      	mov	r1, r6
    64dc:	2a02      	cmp	r2, #2
    64de:	d007      	beq.n	64f0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x184>
    64e0:	782a      	ldrb	r2, [r5, #0]
    64e2:	2a03      	cmp	r2, #3
    64e4:	d004      	beq.n	64f0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x184>
    64e6:	f640 416a 	movw	r1, #3178	; 0xc6a
    64ea:	202d      	movs	r0, #45	; 0x2d
    64ec:	f7fd fb52 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    64f0:	68a2      	ldr	r2, [r4, #8]
    64f2:	782b      	ldrb	r3, [r5, #0]
    64f4:	6952      	ldr	r2, [r2, #20]
    64f6:	f06f 0607 	mvn.w	r6, #7
    64fa:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    64fe:	58d2      	ldr	r2, [r2, r3]
    6500:	4790      	blx	r2
    6502:	4606      	mov	r6, r0
    6504:	e000      	b.n	6508 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x19c>
    6506:	2601      	movs	r6, #1
    6508:	7ba8      	ldrb	r0, [r5, #14]
    650a:	b118      	cbz	r0, 6514 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1a8>
    650c:	f004 f84a 	bl	a5a4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    6510:	f003 fe8c 	bl	a22c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    6514:	2e00      	cmp	r6, #0
    6516:	d00d      	beq.n	6534 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1c8>
    6518:	6820      	ldr	r0, [r4, #0]
    651a:	f007 fa42 	bl	d9a2 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    651e:	b120      	cbz	r0, 652a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1be>
    6520:	68a0      	ldr	r0, [r4, #8]
    6522:	6880      	ldr	r0, [r0, #8]
    6524:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6528:	4700      	bx	r0
    652a:	6820      	ldr	r0, [r4, #0]
    652c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6530:	f000 ba8e 	b.w	6a50 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d8>
    6534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6538:	20000d64 	.word	0x20000d64
    653c:	20000100 	.word	0x20000100
    6540:	b510      	push	{r4, lr}
    6542:	2903      	cmp	r1, #3
    6544:	d002      	beq.n	654c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e0>
    6546:	2905      	cmp	r1, #5
    6548:	d10a      	bne.n	6560 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1f4>
    654a:	e002      	b.n	6552 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e6>
    654c:	f000 fb5a 	bl	6c04 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x58c>
    6550:	e003      	b.n	655a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ee>
    6552:	4904      	ldr	r1, [pc, #16]	; (6564 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1f8>)
    6554:	6809      	ldr	r1, [r1, #0]
    6556:	b109      	cbz	r1, 655c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1f0>
    6558:	4788      	blx	r1
    655a:	b108      	cbz	r0, 6560 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1f4>
    655c:	2000      	movs	r0, #0
    655e:	bd10      	pop	{r4, pc}
    6560:	2001      	movs	r0, #1
    6562:	bd10      	pop	{r4, pc}
    6564:	2000010c 	.word	0x2000010c
    6568:	4a09      	ldr	r2, [pc, #36]	; (6590 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x224>)
    656a:	0003      	movs	r3, r0
    656c:	6810      	ldr	r0, [r2, #0]
    656e:	d001      	beq.n	6574 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x208>
    6570:	f000 ba6e 	b.w	6a50 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d8>
    6574:	2900      	cmp	r1, #0
    6576:	d009      	beq.n	658c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x220>
    6578:	6891      	ldr	r1, [r2, #8]
    657a:	4a06      	ldr	r2, [pc, #24]	; (6594 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x228>)
    657c:	6909      	ldr	r1, [r1, #16]
    657e:	7812      	ldrb	r2, [r2, #0]
    6580:	f06f 030f 	mvn.w	r3, #15
    6584:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    6588:	5889      	ldr	r1, [r1, r2]
    658a:	4708      	bx	r1
    658c:	4770      	bx	lr
    658e:	0000      	.short	0x0000
    6590:	20000100 	.word	0x20000100
    6594:	20000d64 	.word	0x20000d64
    6598:	b570      	push	{r4, r5, r6, lr}
    659a:	4604      	mov	r4, r0
    659c:	8840      	ldrh	r0, [r0, #2]
    659e:	2500      	movs	r5, #0
    65a0:	2810      	cmp	r0, #16
    65a2:	d014      	beq.n	65ce <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x262>
    65a4:	4e14      	ldr	r6, [pc, #80]	; (65f8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x28c>)
    65a6:	7bb0      	ldrb	r0, [r6, #14]
    65a8:	b120      	cbz	r0, 65b4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x248>
    65aa:	f003 fe5f 	bl	a26c <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    65ae:	2040      	movs	r0, #64	; 0x40
    65b0:	f004 f808 	bl	a5c4 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    65b4:	4811      	ldr	r0, [pc, #68]	; (65fc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x290>)
    65b6:	6840      	ldr	r0, [r0, #4]
    65b8:	f004 fac2 	bl	ab40 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    65bc:	78a0      	ldrb	r0, [r4, #2]
    65be:	0740      	lsls	r0, r0, #29
    65c0:	d413      	bmi.n	65ea <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x27e>
    65c2:	7be0      	ldrb	r0, [r4, #15]
    65c4:	2801      	cmp	r0, #1
    65c6:	d008      	beq.n	65da <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x26e>
    65c8:	2803      	cmp	r0, #3
    65ca:	d006      	beq.n	65da <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x26e>
    65cc:	e006      	b.n	65dc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x270>
    65ce:	4620      	mov	r0, r4
    65d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    65d4:	2101      	movs	r1, #1
    65d6:	f7ff bed1 	b.w	637c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    65da:	2510      	movs	r5, #16
    65dc:	2100      	movs	r1, #0
    65de:	f045 020e 	orr.w	r2, r5, #14
    65e2:	7923      	ldrb	r3, [r4, #4]
    65e4:	4608      	mov	r0, r1
    65e6:	f004 fb35 	bl	ac54 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    65ea:	2000      	movs	r0, #0
    65ec:	f004 f940 	bl	a870 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    65f0:	2002      	movs	r0, #2
    65f2:	7030      	strb	r0, [r6, #0]
    65f4:	bd70      	pop	{r4, r5, r6, pc}
    65f6:	0000      	.short	0x0000
    65f8:	20000d64 	.word	0x20000d64
    65fc:	20000100 	.word	0x20000100
    6600:	b510      	push	{r4, lr}
    6602:	4c12      	ldr	r4, [pc, #72]	; (664c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e0>)
    6604:	6820      	ldr	r0, [r4, #0]
    6606:	f000 f825 	bl	6654 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e8>
    660a:	6820      	ldr	r0, [r4, #0]
    660c:	f007 f9c9 	bl	d9a2 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    6610:	2800      	cmp	r0, #0
    6612:	6820      	ldr	r0, [r4, #0]
    6614:	d00b      	beq.n	662e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2c2>
    6616:	490e      	ldr	r1, [pc, #56]	; (6650 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e4>)
    6618:	780a      	ldrb	r2, [r1, #0]
    661a:	2a02      	cmp	r2, #2
    661c:	d00b      	beq.n	6636 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ca>
    661e:	780a      	ldrb	r2, [r1, #0]
    6620:	2a03      	cmp	r2, #3
    6622:	d008      	beq.n	6636 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ca>
    6624:	f640 31a5 	movw	r1, #2981	; 0xba5
    6628:	202d      	movs	r0, #45	; 0x2d
    662a:	f7fd fab3 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    662e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6632:	f000 ba0d 	b.w	6a50 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d8>
    6636:	68a2      	ldr	r2, [r4, #8]
    6638:	7809      	ldrb	r1, [r1, #0]
    663a:	68d2      	ldr	r2, [r2, #12]
    663c:	f06f 0307 	mvn.w	r3, #7
    6640:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    6644:	5851      	ldr	r1, [r2, r1]
    6646:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    664a:	4708      	bx	r1
    664c:	20000100 	.word	0x20000100
    6650:	20000d64 	.word	0x20000d64
    6654:	b510      	push	{r4, lr}
    6656:	7b01      	ldrb	r1, [r0, #12]
    6658:	b109      	cbz	r1, 665e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2f2>
    665a:	f007 f8e8 	bl	d82e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x11c>
    665e:	4805      	ldr	r0, [pc, #20]	; (6674 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x308>)
    6660:	7b80      	ldrb	r0, [r0, #14]
    6662:	2800      	cmp	r0, #0
    6664:	d005      	beq.n	6672 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x306>
    6666:	f003 ff9d 	bl	a5a4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    666a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    666e:	f003 bddd 	b.w	a22c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    6672:	bd10      	pop	{r4, pc}
    6674:	20000d64 	.word	0x20000d64

00006678 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
    6678:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    667c:	4d5a      	ldr	r5, [pc, #360]	; (67e8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x170>)
    667e:	4604      	mov	r4, r0
    6680:	7828      	ldrb	r0, [r5, #0]
    6682:	bbe8      	cbnz	r0, 6700 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x88>
    6684:	7820      	ldrb	r0, [r4, #0]
    6686:	28ff      	cmp	r0, #255	; 0xff
    6688:	d049      	beq.n	671e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa6>
    668a:	f04f 0900 	mov.w	r9, #0
    668e:	f8a5 900c 	strh.w	r9, [r5, #12]
    6692:	f8c5 9004 	str.w	r9, [r5, #4]
    6696:	f885 9001 	strb.w	r9, [r5, #1]
    669a:	f885 9002 	strb.w	r9, [r5, #2]
    669e:	f884 9061 	strb.w	r9, [r4, #97]	; 0x61
    66a2:	4648      	mov	r0, r9
    66a4:	f004 f94c 	bl	a940 <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA>
    66a8:	4b50      	ldr	r3, [pc, #320]	; (67ec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x174>)
    66aa:	f8df a144 	ldr.w	sl, [pc, #324]	; 67f0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x178>
    66ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    66b0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    66b4:	f8da 0008 	ldr.w	r0, [sl, #8]
    66b8:	6840      	ldr	r0, [r0, #4]
    66ba:	9003      	str	r0, [sp, #12]
    66bc:	4668      	mov	r0, sp
    66be:	f004 f8ab 	bl	a818 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    66c2:	f004 f9af 	bl	aa24 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    66c6:	f003 ff6d 	bl	a5a4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    66ca:	f003 fdaf 	bl	a22c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    66ce:	4847      	ldr	r0, [pc, #284]	; (67ec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x174>)
    66d0:	1f40      	subs	r0, r0, #5
    66d2:	f004 fb11 	bl	acf8 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    66d6:	4845      	ldr	r0, [pc, #276]	; (67ec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x174>)
    66d8:	3808      	subs	r0, #8
    66da:	f004 fb19 	bl	ad10 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    66de:	f104 0020 	add.w	r0, r4, #32
    66e2:	4606      	mov	r6, r0
    66e4:	f007 f910 	bl	d908 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    66e8:	4630      	mov	r0, r6
    66ea:	f007 f8d2 	bl	d892 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    66ee:	4601      	mov	r1, r0
    66f0:	4620      	mov	r0, r4
    66f2:	f007 f891 	bl	d818 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x106>
    66f6:	f994 000e 	ldrsb.w	r0, [r4, #14]
    66fa:	f004 fa1b 	bl	ab34 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    66fe:	e000      	b.n	6702 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8a>
    6700:	e00d      	b.n	671e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa6>
    6702:	7921      	ldrb	r1, [r4, #4]
    6704:	2000      	movs	r0, #0
    6706:	f004 f80b 	bl	a720 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    670a:	2601      	movs	r6, #1
    670c:	60a8      	str	r0, [r5, #8]
    670e:	b150      	cbz	r0, 6726 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xae>
    6710:	210f      	movs	r1, #15
    6712:	2005      	movs	r0, #5
    6714:	f003 ff6a 	bl	a5ec <sym_ZBDJ2Y5I72NG5GLPCDB32P7JVZVIRY3EZS6BW2Y>
    6718:	7ea0      	ldrb	r0, [r4, #26]
    671a:	b958      	cbnz	r0, 6734 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xbc>
    671c:	e005      	b.n	672a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb2>
    671e:	200c      	movs	r0, #12
    6720:	b004      	add	sp, #16
    6722:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    6726:	702e      	strb	r6, [r5, #0]
    6728:	e05b      	b.n	67e2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16a>
    672a:	7e20      	ldrb	r0, [r4, #24]
    672c:	b910      	cbnz	r0, 6734 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xbc>
    672e:	78a0      	ldrb	r0, [r4, #2]
    6730:	0740      	lsls	r0, r0, #29
    6732:	d52b      	bpl.n	678c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x114>
    6734:	f004 fec3 	bl	b4be <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    6738:	4683      	mov	fp, r0
    673a:	4659      	mov	r1, fp
    673c:	6c60      	ldr	r0, [r4, #68]	; 0x44
    673e:	f7fa fee5 	bl	150c <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    6742:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 67f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x17c>
    6746:	4607      	mov	r7, r0
    6748:	fb90 f1f8 	sdiv	r1, r0, r8
    674c:	fb08 7011 	mls	r0, r8, r1, r7
    6750:	4241      	negs	r1, r0
    6752:	4658      	mov	r0, fp
    6754:	f7fa fea8 	bl	14a8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    6758:	6460      	str	r0, [r4, #68]	; 0x44
    675a:	fb97 f0f8 	sdiv	r0, r7, r8
    675e:	6c21      	ldr	r1, [r4, #64]	; 0x40
    6760:	4408      	add	r0, r1
    6762:	6420      	str	r0, [r4, #64]	; 0x40
    6764:	f7fe ff6a 	bl	563c <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    6768:	6c21      	ldr	r1, [r4, #64]	; 0x40
    676a:	4288      	cmp	r0, r1
    676c:	d80e      	bhi.n	678c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x114>
    676e:	e9c4 9b10 	strd	r9, fp, [r4, #64]	; 0x40
    6772:	2101      	movs	r1, #1
    6774:	4620      	mov	r0, r4
    6776:	f007 f813 	bl	d7a0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8e>
    677a:	78a0      	ldrb	r0, [r4, #2]
    677c:	0740      	lsls	r0, r0, #29
    677e:	d505      	bpl.n	678c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x114>
    6780:	7e20      	ldrb	r0, [r4, #24]
    6782:	b118      	cbz	r0, 678c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x114>
    6784:	2101      	movs	r1, #1
    6786:	4620      	mov	r0, r4
    6788:	f000 fa76 	bl	6c78 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x600>
    678c:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
    6790:	f104 0049 	add.w	r0, r4, #73	; 0x49
    6794:	f004 faa4 	bl	ace0 <sym_LZLCMBXYRGNNSS6IYQ5J2ORWQO6TGPOEG4SEIWQ>
    6798:	f894 0074 	ldrb.w	r0, [r4, #116]	; 0x74
    679c:	2802      	cmp	r0, #2
    679e:	d10a      	bne.n	67b6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x13e>
    67a0:	4622      	mov	r2, r4
    67a2:	e9d2 3719 	ldrd	r3, r7, [r2, #100]	; 0x64
    67a6:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
    67aa:	e9c4 370c 	strd	r3, r7, [r4, #48]	; 0x30
    67ae:	e9c4 0119 	strd	r0, r1, [r4, #100]	; 0x64
    67b2:	f884 6074 	strb.w	r6, [r4, #116]	; 0x74
    67b6:	f894 0075 	ldrb.w	r0, [r4, #117]	; 0x75
    67ba:	2802      	cmp	r0, #2
    67bc:	d109      	bne.n	67d2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x15a>
    67be:	e9d4 100e 	ldrd	r1, r0, [r4, #56]	; 0x38
    67c2:	e9d4 231b 	ldrd	r2, r3, [r4, #108]	; 0x6c
    67c6:	e9c4 101b 	strd	r1, r0, [r4, #108]	; 0x6c
    67ca:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
    67ce:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
    67d2:	f7fe ff99 	bl	5708 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    67d6:	2103      	movs	r1, #3
    67d8:	f8da 0004 	ldr.w	r0, [sl, #4]
    67dc:	f006 f8d0 	bl	c980 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    67e0:	73a8      	strb	r0, [r5, #14]
    67e2:	2000      	movs	r0, #0
    67e4:	e79c      	b.n	6720 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa8>
    67e6:	0000      	.short	0x0000
    67e8:	20000d64 	.word	0x20000d64
    67ec:	00006d90 	.word	0x00006d90
    67f0:	20000100 	.word	0x20000100
    67f4:	000f4240 	.word	0x000f4240
    67f8:	b510      	push	{r4, lr}
    67fa:	4604      	mov	r4, r0
    67fc:	f7ff ff3c 	bl	6678 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
    6800:	2800      	cmp	r0, #0
    6802:	d108      	bne.n	6816 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x19e>
    6804:	4804      	ldr	r0, [pc, #16]	; (6818 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1a0>)
    6806:	7800      	ldrb	r0, [r0, #0]
    6808:	2801      	cmp	r0, #1
    680a:	d003      	beq.n	6814 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x19c>
    680c:	2100      	movs	r1, #0
    680e:	4620      	mov	r0, r4
    6810:	f7ff fdb4 	bl	637c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    6814:	2000      	movs	r0, #0
    6816:	bd10      	pop	{r4, pc}
    6818:	20000d64 	.word	0x20000d64
    681c:	480a      	ldr	r0, [pc, #40]	; (6848 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d0>)
    681e:	b510      	push	{r4, lr}
    6820:	490a      	ldr	r1, [pc, #40]	; (684c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d4>)
    6822:	6804      	ldr	r4, [r0, #0]
    6824:	7808      	ldrb	r0, [r1, #0]
    6826:	2800      	cmp	r0, #0
    6828:	d00d      	beq.n	6846 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ce>
    682a:	7808      	ldrb	r0, [r1, #0]
    682c:	2802      	cmp	r0, #2
    682e:	d002      	beq.n	6836 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1be>
    6830:	7808      	ldrb	r0, [r1, #0]
    6832:	2803      	cmp	r0, #3
    6834:	d102      	bne.n	683c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1c4>
    6836:	4620      	mov	r0, r4
    6838:	f7ff ff0c 	bl	6654 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e8>
    683c:	4620      	mov	r0, r4
    683e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6842:	f000 b905 	b.w	6a50 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d8>
    6846:	bd10      	pop	{r4, pc}
    6848:	20000100 	.word	0x20000100
    684c:	20000d64 	.word	0x20000d64
    6850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6854:	4604      	mov	r4, r0
    6856:	4827      	ldr	r0, [pc, #156]	; (68f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27c>)
    6858:	460d      	mov	r5, r1
    685a:	6840      	ldr	r0, [r0, #4]
    685c:	f004 f970 	bl	ab40 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6860:	4e25      	ldr	r6, [pc, #148]	; (68f8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>)
    6862:	2004      	movs	r0, #4
    6864:	7030      	strb	r0, [r6, #0]
    6866:	b325      	cbz	r5, 68b2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x23a>
    6868:	8860      	ldrh	r0, [r4, #2]
    686a:	2810      	cmp	r0, #16
    686c:	d02a      	beq.n	68c4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x24c>
    686e:	f104 0020 	add.w	r0, r4, #32
    6872:	4680      	mov	r8, r0
    6874:	68b5      	ldr	r5, [r6, #8]
    6876:	f007 f800 	bl	d87a <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    687a:	4607      	mov	r7, r0
    687c:	4640      	mov	r0, r8
    687e:	f007 f825 	bl	d8cc <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    6882:	1a38      	subs	r0, r7, r0
    6884:	1e40      	subs	r0, r0, #1
    6886:	b2c0      	uxtb	r0, r0
    6888:	8861      	ldrh	r1, [r4, #2]
    688a:	2228      	movs	r2, #40	; 0x28
    688c:	f000 fabc 	bl	6e08 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
    6890:	4405      	add	r5, r0
    6892:	78a0      	ldrb	r0, [r4, #2]
    6894:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    6898:	b130      	cbz	r0, 68a8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x230>
    689a:	6870      	ldr	r0, [r6, #4]
    689c:	4405      	add	r5, r0
    689e:	f007 f86e 	bl	d97e <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
    68a2:	4428      	add	r0, r5
    68a4:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    68a8:	7922      	ldrb	r2, [r4, #4]
    68aa:	4629      	mov	r1, r5
    68ac:	2000      	movs	r0, #0
    68ae:	f004 f955 	bl	ab5c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    68b2:	8860      	ldrh	r0, [r4, #2]
    68b4:	2813      	cmp	r0, #19
    68b6:	d013      	beq.n	68e0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x268>
    68b8:	dc09      	bgt.n	68ce <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x256>
    68ba:	2810      	cmp	r0, #16
    68bc:	d018      	beq.n	68f0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x278>
    68be:	2812      	cmp	r0, #18
    68c0:	d109      	bne.n	68d6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x25e>
    68c2:	e00d      	b.n	68e0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x268>
    68c4:	7921      	ldrb	r1, [r4, #4]
    68c6:	2000      	movs	r0, #0
    68c8:	f003 fede 	bl	a688 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    68cc:	e7f1      	b.n	68b2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x23a>
    68ce:	2815      	cmp	r0, #21
    68d0:	d006      	beq.n	68e0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x268>
    68d2:	281d      	cmp	r0, #29
    68d4:	d004      	beq.n	68e0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x268>
    68d6:	f640 511c 	movw	r1, #3356	; 0xd1c
    68da:	202d      	movs	r0, #45	; 0x2d
    68dc:	f7fd f95a 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    68e0:	7923      	ldrb	r3, [r4, #4]
    68e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    68e6:	2201      	movs	r2, #1
    68e8:	4611      	mov	r1, r2
    68ea:	2000      	movs	r0, #0
    68ec:	f004 b9b2 	b.w	ac54 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    68f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    68f4:	20000100 	.word	0x20000100
    68f8:	20000d64 	.word	0x20000d64
    68fc:	b510      	push	{r4, lr}
    68fe:	4604      	mov	r4, r0
    6900:	7800      	ldrb	r0, [r0, #0]
    6902:	460b      	mov	r3, r1
    6904:	f884 00a9 	strb.w	r0, [r4, #169]	; 0xa9
    6908:	29ff      	cmp	r1, #255	; 0xff
    690a:	d010      	beq.n	692e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2b6>
    690c:	f104 02ab 	add.w	r2, r4, #171	; 0xab
    6910:	1e51      	subs	r1, r2, #1
    6912:	4618      	mov	r0, r3
    6914:	f7fe fe10 	bl	5538 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    6918:	b130      	cbz	r0, 6928 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2b0>
    691a:	f894 00aa 	ldrb.w	r0, [r4, #170]	; 0xaa
    691e:	f040 0002 	orr.w	r0, r0, #2
    6922:	f884 00aa 	strb.w	r0, [r4, #170]	; 0xaa
    6926:	e011      	b.n	694c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2d4>
    6928:	f640 712c 	movw	r1, #3884	; 0xf2c
    692c:	e01d      	b.n	696a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2f2>
    692e:	4810      	ldr	r0, [pc, #64]	; (6970 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2f8>)
    6930:	6840      	ldr	r0, [r0, #4]
    6932:	7801      	ldrb	r1, [r0, #0]
    6934:	f3c1 1180 	ubfx	r1, r1, #6, #1
    6938:	f884 10aa 	strb.w	r1, [r4, #170]	; 0xaa
    693c:	f8d0 1003 	ldr.w	r1, [r0, #3]
    6940:	f8c4 10ab 	str.w	r1, [r4, #171]	; 0xab
    6944:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    6948:	f8a4 00af 	strh.w	r0, [r4, #175]	; 0xaf
    694c:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
    6950:	287f      	cmp	r0, #127	; 0x7f
    6952:	d008      	beq.n	6966 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2ee>
    6954:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1
    6958:	207f      	movs	r0, #127	; 0x7f
    695a:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    695e:	3492      	adds	r4, #146	; 0x92
    6960:	2001      	movs	r0, #1
    6962:	75a0      	strb	r0, [r4, #22]
    6964:	bd10      	pop	{r4, pc}
    6966:	f640 51ce 	movw	r1, #3534	; 0xdce
    696a:	202d      	movs	r0, #45	; 0x2d
    696c:	f7fd f912 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6970:	20000100 	.word	0x20000100
    6974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6978:	4604      	mov	r4, r0
    697a:	8840      	ldrh	r0, [r0, #2]
    697c:	4617      	mov	r7, r2
    697e:	4688      	mov	r8, r1
    6980:	2903      	cmp	r1, #3
    6982:	d006      	beq.n	6992 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x31a>
    6984:	f000 0501 	and.w	r5, r0, #1
    6988:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
    698c:	b118      	cbz	r0, 6996 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x31e>
    698e:	2001      	movs	r0, #1
    6990:	e002      	b.n	6998 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x320>
    6992:	f3c0 0540 	ubfx	r5, r0, #1, #1
    6996:	2000      	movs	r0, #0
    6998:	4681      	mov	r9, r0
    699a:	f003 fe21 	bl	a5e0 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>
    699e:	4606      	mov	r6, r0
    69a0:	f1b8 0f03 	cmp.w	r8, #3
    69a4:	d025      	beq.n	69f2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x37a>
    69a6:	2001      	movs	r0, #1
    69a8:	4680      	mov	r8, r0
    69aa:	ea35 0509 	bics.w	r5, r5, r9
    69ae:	d046      	beq.n	6a3e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c6>
    69b0:	4825      	ldr	r0, [pc, #148]	; (6a48 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d0>)
    69b2:	7b80      	ldrb	r0, [r0, #14]
    69b4:	b138      	cbz	r0, 69c6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x34e>
    69b6:	f005 ffe6 	bl	c986 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    69ba:	7038      	strb	r0, [r7, #0]
    69bc:	28ff      	cmp	r0, #255	; 0xff
    69be:	d002      	beq.n	69c6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x34e>
    69c0:	f7fe fdd4 	bl	556c <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    69c4:	4306      	orrs	r6, r0
    69c6:	4d21      	ldr	r5, [pc, #132]	; (6a4c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d4>)
    69c8:	f894 204f 	ldrb.w	r2, [r4, #79]	; 0x4f
    69cc:	6868      	ldr	r0, [r5, #4]
    69ce:	7801      	ldrb	r1, [r0, #0]
    69d0:	f3c1 1180 	ubfx	r1, r1, #6, #1
    69d4:	4291      	cmp	r1, r2
    69d6:	d106      	bne.n	69e6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x36e>
    69d8:	2206      	movs	r2, #6
    69da:	f104 0150 	add.w	r1, r4, #80	; 0x50
    69de:	1cc0      	adds	r0, r0, #3
    69e0:	f004 fedb 	bl	b79a <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    69e4:	b138      	cbz	r0, 69f6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x37e>
    69e6:	2000      	movs	r0, #0
    69e8:	7839      	ldrb	r1, [r7, #0]
    69ea:	29ff      	cmp	r1, #255	; 0xff
    69ec:	d009      	beq.n	6a02 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x38a>
    69ee:	b9b8      	cbnz	r0, 6a20 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a8>
    69f0:	e003      	b.n	69fa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x382>
    69f2:	2002      	movs	r0, #2
    69f4:	e7d8      	b.n	69a8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x330>
    69f6:	2001      	movs	r0, #1
    69f8:	e7f6      	b.n	69e8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x370>
    69fa:	7e60      	ldrb	r0, [r4, #25]
    69fc:	4288      	cmp	r0, r1
    69fe:	d00f      	beq.n	6a20 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a8>
    6a00:	e008      	b.n	6a14 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x39c>
    6a02:	b138      	cbz	r0, 6a14 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x39c>
    6a04:	6869      	ldr	r1, [r5, #4]
    6a06:	f811 0b03 	ldrb.w	r0, [r1], #3
    6a0a:	f3c0 1080 	ubfx	r0, r0, #6, #1
    6a0e:	f006 fe85 	bl	d71c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    6a12:	b128      	cbz	r0, 6a20 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a8>
    6a14:	2000      	movs	r0, #0
    6a16:	78a1      	ldrb	r1, [r4, #2]
    6a18:	0749      	lsls	r1, r1, #29
    6a1a:	d503      	bpl.n	6a24 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ac>
    6a1c:	b990      	cbnz	r0, 6a44 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3cc>
    6a1e:	e00e      	b.n	6a3e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c6>
    6a20:	2001      	movs	r0, #1
    6a22:	e7f8      	b.n	6a16 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x39e>
    6a24:	b976      	cbnz	r6, 6a44 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3cc>
    6a26:	7be0      	ldrb	r0, [r4, #15]
    6a28:	b108      	cbz	r0, 6a2e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b6>
    6a2a:	4540      	cmp	r0, r8
    6a2c:	d107      	bne.n	6a3e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c6>
    6a2e:	6869      	ldr	r1, [r5, #4]
    6a30:	f811 0b03 	ldrb.w	r0, [r1], #3
    6a34:	f3c0 1080 	ubfx	r0, r0, #6, #1
    6a38:	f006 fe70 	bl	d71c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    6a3c:	b110      	cbz	r0, 6a44 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3cc>
    6a3e:	2000      	movs	r0, #0
    6a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6a44:	2001      	movs	r0, #1
    6a46:	e7fb      	b.n	6a40 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c8>
    6a48:	20000d64 	.word	0x20000d64
    6a4c:	20000100 	.word	0x20000100
    6a50:	b570      	push	{r4, r5, r6, lr}
    6a52:	4604      	mov	r4, r0
    6a54:	6a80      	ldr	r0, [r0, #40]	; 0x28
    6a56:	4d10      	ldr	r5, [pc, #64]	; (6a98 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x420>)
    6a58:	1c40      	adds	r0, r0, #1
    6a5a:	62a0      	str	r0, [r4, #40]	; 0x28
    6a5c:	7ba8      	ldrb	r0, [r5, #14]
    6a5e:	2600      	movs	r6, #0
    6a60:	b120      	cbz	r0, 6a6c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f4>
    6a62:	f003 fd9f 	bl	a5a4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    6a66:	f003 fbe1 	bl	a22c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    6a6a:	73ae      	strb	r6, [r5, #14]
    6a6c:	702e      	strb	r6, [r5, #0]
    6a6e:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
    6a72:	b108      	cbz	r0, 6a78 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x400>
    6a74:	2101      	movs	r1, #1
    6a76:	e00a      	b.n	6a8e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x416>
    6a78:	7b60      	ldrb	r0, [r4, #13]
    6a7a:	b138      	cbz	r0, 6a8c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x414>
    6a7c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    6a7e:	4288      	cmp	r0, r1
    6a80:	d804      	bhi.n	6a8c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x414>
    6a82:	2101      	movs	r1, #1
    6a84:	4620      	mov	r0, r4
    6a86:	f006 ffa1 	bl	d9cc <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    6a8a:	bd70      	pop	{r4, r5, r6, pc}
    6a8c:	2100      	movs	r1, #0
    6a8e:	4620      	mov	r0, r4
    6a90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6a94:	f006 bf9a 	b.w	d9cc <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    6a98:	20000d64 	.word	0x20000d64
    6a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6aa0:	4604      	mov	r4, r0
    6aa2:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    6aa6:	4690      	mov	r8, r2
    6aa8:	460d      	mov	r5, r1
    6aaa:	f88d 0000 	strb.w	r0, [sp]
    6aae:	9800      	ldr	r0, [sp, #0]
    6ab0:	9000      	str	r0, [sp, #0]
    6ab2:	f89d 0000 	ldrb.w	r0, [sp]
    6ab6:	b110      	cbz	r0, 6abe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x446>
    6ab8:	f640 31d9 	movw	r1, #3033	; 0xbd9
    6abc:	e058      	b.n	6b70 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4f8>
    6abe:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
    6ac2:	8828      	ldrh	r0, [r5, #0]
    6ac4:	f8a4 007c 	strh.w	r0, [r4, #124]	; 0x7c
    6ac8:	2b00      	cmp	r3, #0
    6aca:	d163      	bne.n	6b94 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x51c>
    6acc:	6868      	ldr	r0, [r5, #4]
    6ace:	f005 ffb8 	bl	ca42 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    6ad2:	f8a4 0092 	strh.w	r0, [r4, #146]	; 0x92
    6ad6:	8928      	ldrh	r0, [r5, #8]
    6ad8:	f8a4 0094 	strh.w	r0, [r4, #148]	; 0x94
    6adc:	8968      	ldrh	r0, [r5, #10]
    6ade:	f8a4 0096 	strh.w	r0, [r4, #150]	; 0x96
    6ae2:	f895 016d 	ldrb.w	r0, [r5, #365]	; 0x16d
    6ae6:	f884 0098 	strb.w	r0, [r4, #152]	; 0x98
    6aea:	7e21      	ldrb	r1, [r4, #24]
    6aec:	f104 0649 	add.w	r6, r4, #73	; 0x49
    6af0:	2700      	movs	r7, #0
    6af2:	f104 0980 	add.w	r9, r4, #128	; 0x80
    6af6:	b129      	cbz	r1, 6b04 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x48c>
    6af8:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    6afc:	4631      	mov	r1, r6
    6afe:	f006 fcf6 	bl	d4ee <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb6>
    6b02:	b940      	cbnz	r0, 6b16 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x49e>
    6b04:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    6b08:	b170      	cbz	r0, 6b28 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4b0>
    6b0a:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    6b0e:	4631      	mov	r1, r6
    6b10:	f006 fce4 	bl	d4dc <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xa4>
    6b14:	b140      	cbz	r0, 6b28 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4b0>
    6b16:	f8d4 0049 	ldr.w	r0, [r4, #73]	; 0x49
    6b1a:	f8c4 0086 	str.w	r0, [r4, #134]	; 0x86
    6b1e:	f8b4 004d 	ldrh.w	r0, [r4, #77]	; 0x4d
    6b22:	f8a4 008a 	strh.w	r0, [r4, #138]	; 0x8a
    6b26:	e003      	b.n	6b30 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4b8>
    6b28:	f8c4 7086 	str.w	r7, [r4, #134]	; 0x86
    6b2c:	f8a4 708a 	strh.w	r7, [r4, #138]	; 0x8a
    6b30:	4819      	ldr	r0, [pc, #100]	; (6b98 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x520>)
    6b32:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    6b36:	6840      	ldr	r0, [r0, #4]
    6b38:	7801      	ldrb	r1, [r0, #0]
    6b3a:	f3c1 1180 	ubfx	r1, r1, #6, #1
    6b3e:	f884 107f 	strb.w	r1, [r4, #127]	; 0x7f
    6b42:	f850 1f03 	ldr.w	r1, [r0, #3]!
    6b46:	d016      	beq.n	6b76 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4fe>
    6b48:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    6b4c:	8880      	ldrh	r0, [r0, #4]
    6b4e:	f8a4 0090 	strh.w	r0, [r4, #144]	; 0x90
    6b52:	464a      	mov	r2, r9
    6b54:	f104 017f 	add.w	r1, r4, #127	; 0x7f
    6b58:	4640      	mov	r0, r8
    6b5a:	f7fe fced 	bl	5538 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    6b5e:	b128      	cbz	r0, 6b6c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4f4>
    6b60:	f814 0f7f 	ldrb.w	r0, [r4, #127]!
    6b64:	f040 0002 	orr.w	r0, r0, #2
    6b68:	7020      	strb	r0, [r4, #0]
    6b6a:	e00c      	b.n	6b86 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x50e>
    6b6c:	f640 31fa 	movw	r1, #3066	; 0xbfa
    6b70:	202d      	movs	r0, #45	; 0x2d
    6b72:	f7fd f80f 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6b76:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
    6b7a:	8880      	ldrh	r0, [r0, #4]
    6b7c:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
    6b80:	f844 7f8c 	str.w	r7, [r4, #140]!
    6b84:	80a7      	strh	r7, [r4, #4]
    6b86:	8828      	ldrh	r0, [r5, #0]
    6b88:	f7fd fc38 	bl	43fc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    6b8c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6b90:	f005 bce3 	b.w	c55a <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    6b94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6b98:	20000100 	.word	0x20000100
    6b9c:	b538      	push	{r3, r4, r5, lr}
    6b9e:	4604      	mov	r4, r0
    6ba0:	20ff      	movs	r0, #255	; 0xff
    6ba2:	f88d 0000 	strb.w	r0, [sp]
    6ba6:	2501      	movs	r5, #1
    6ba8:	466a      	mov	r2, sp
    6baa:	2105      	movs	r1, #5
    6bac:	4620      	mov	r0, r4
    6bae:	f7ff fee1 	bl	6974 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2fc>
    6bb2:	b300      	cbz	r0, 6bf6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x57e>
    6bb4:	4a11      	ldr	r2, [pc, #68]	; (6bfc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x584>)
    6bb6:	69e0      	ldr	r0, [r4, #28]
    6bb8:	6852      	ldr	r2, [r2, #4]
    6bba:	f810 1f7d 	ldrb.w	r1, [r0, #125]!
    6bbe:	7812      	ldrb	r2, [r2, #0]
    6bc0:	f3c2 1240 	ubfx	r2, r2, #5, #1
    6bc4:	4011      	ands	r1, r2
    6bc6:	7001      	strb	r1, [r0, #0]
    6bc8:	2201      	movs	r2, #1
    6bca:	4620      	mov	r0, r4
    6bcc:	69e1      	ldr	r1, [r4, #28]
    6bce:	f000 f881 	bl	6cd4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x65c>
    6bd2:	2300      	movs	r3, #0
    6bd4:	f89d 2000 	ldrb.w	r2, [sp]
    6bd8:	4620      	mov	r0, r4
    6bda:	69e1      	ldr	r1, [r4, #28]
    6bdc:	f7ff ff5e 	bl	6a9c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x424>
    6be0:	2001      	movs	r0, #1
    6be2:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
    6be6:	4a06      	ldr	r2, [pc, #24]	; (6c00 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x588>)
    6be8:	2100      	movs	r1, #0
    6bea:	69e0      	ldr	r0, [r4, #28]
    6bec:	7011      	strb	r1, [r2, #0]
    6bee:	2105      	movs	r1, #5
    6bf0:	f000 fa1a 	bl	7028 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    6bf4:	e000      	b.n	6bf8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x580>
    6bf6:	2500      	movs	r5, #0
    6bf8:	4628      	mov	r0, r5
    6bfa:	bd38      	pop	{r3, r4, r5, pc}
    6bfc:	20000100 	.word	0x20000100
    6c00:	20000d64 	.word	0x20000d64
    6c04:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    6c06:	4604      	mov	r4, r0
    6c08:	20ff      	movs	r0, #255	; 0xff
    6c0a:	f88d 0000 	strb.w	r0, [sp]
    6c0e:	2501      	movs	r5, #1
    6c10:	466a      	mov	r2, sp
    6c12:	2103      	movs	r1, #3
    6c14:	4620      	mov	r0, r4
    6c16:	f7ff fead 	bl	6974 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2fc>
    6c1a:	b328      	cbz	r0, 6c68 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5f0>
    6c1c:	7b20      	ldrb	r0, [r4, #12]
    6c1e:	b168      	cbz	r0, 6c3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5c4>
    6c20:	f894 00a8 	ldrb.w	r0, [r4, #168]	; 0xa8
    6c24:	f88d 0004 	strb.w	r0, [sp, #4]
    6c28:	9801      	ldr	r0, [sp, #4]
    6c2a:	9001      	str	r0, [sp, #4]
    6c2c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    6c30:	b920      	cbnz	r0, 6c3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5c4>
    6c32:	f89d 1000 	ldrb.w	r1, [sp]
    6c36:	4620      	mov	r0, r4
    6c38:	f7ff fe60 	bl	68fc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x284>
    6c3c:	4e0c      	ldr	r6, [pc, #48]	; (6c70 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5f8>)
    6c3e:	2100      	movs	r1, #0
    6c40:	6870      	ldr	r0, [r6, #4]
    6c42:	8001      	strh	r1, [r0, #0]
    6c44:	2104      	movs	r1, #4
    6c46:	f006 fa5a 	bl	d0fe <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    6c4a:	4620      	mov	r0, r4
    6c4c:	f000 f88a 	bl	6d64 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6ec>
    6c50:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    6c52:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    6c54:	6870      	ldr	r0, [r6, #4]
    6c56:	f006 fa89 	bl	d16c <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>
    6c5a:	4906      	ldr	r1, [pc, #24]	; (6c74 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5fc>)
    6c5c:	2005      	movs	r0, #5
    6c5e:	7008      	strb	r0, [r1, #0]
    6c60:	6870      	ldr	r0, [r6, #4]
    6c62:	f003 ff6d 	bl	ab40 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6c66:	e000      	b.n	6c6a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5f2>
    6c68:	2500      	movs	r5, #0
    6c6a:	4628      	mov	r0, r5
    6c6c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    6c6e:	0000      	.short	0x0000
    6c70:	20000100 	.word	0x20000100
    6c74:	20000d64 	.word	0x20000d64
    6c78:	b570      	push	{r4, r5, r6, lr}
    6c7a:	4604      	mov	r4, r0
    6c7c:	460e      	mov	r6, r1
    6c7e:	7e40      	ldrb	r0, [r0, #25]
    6c80:	f7fe fc28 	bl	54d4 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    6c84:	0005      	movs	r5, r0
    6c86:	d019      	beq.n	6cbc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x644>
    6c88:	2110      	movs	r1, #16
    6c8a:	f006 f865 	bl	cd58 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    6c8e:	2800      	cmp	r0, #0
    6c90:	d114      	bne.n	6cbc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x644>
    6c92:	2001      	movs	r0, #1
    6c94:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    6c98:	f104 0157 	add.w	r1, r4, #87	; 0x57
    6c9c:	4632      	mov	r2, r6
    6c9e:	460c      	mov	r4, r1
    6ca0:	4628      	mov	r0, r5
    6ca2:	f005 fe12 	bl	c8ca <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    6ca6:	4621      	mov	r1, r4
    6ca8:	4c05      	ldr	r4, [pc, #20]	; (6cc0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x648>)
    6caa:	6860      	ldr	r0, [r4, #4]
    6cac:	f006 fa42 	bl	d134 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    6cb0:	6860      	ldr	r0, [r4, #4]
    6cb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6cb6:	2101      	movs	r1, #1
    6cb8:	f006 ba42 	b.w	d140 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    6cbc:	bd70      	pop	{r4, r5, r6, pc}
    6cbe:	0000      	.short	0x0000
    6cc0:	20000100 	.word	0x20000100
    6cc4:	4802      	ldr	r0, [pc, #8]	; (6cd0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x658>)
    6cc6:	2101      	movs	r1, #1
    6cc8:	6800      	ldr	r0, [r0, #0]
    6cca:	f7ff bb57 	b.w	637c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    6cce:	0000      	.short	0x0000
    6cd0:	20000100 	.word	0x20000100
    6cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6cd8:	4e21      	ldr	r6, [pc, #132]	; (6d60 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6e8>)
    6cda:	4680      	mov	r8, r0
    6cdc:	460c      	mov	r4, r1
    6cde:	6870      	ldr	r0, [r6, #4]
    6ce0:	4615      	mov	r5, r2
    6ce2:	f850 1f0f 	ldr.w	r1, [r0, #15]!
    6ce6:	60e1      	str	r1, [r4, #12]
    6ce8:	8881      	ldrh	r1, [r0, #4]
    6cea:	8221      	strh	r1, [r4, #16]
    6cec:	7981      	ldrb	r1, [r0, #6]
    6cee:	74a1      	strb	r1, [r4, #18]
    6cf0:	8940      	ldrh	r0, [r0, #10]
    6cf2:	f005 fea2 	bl	ca3a <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    6cf6:	4607      	mov	r7, r0
    6cf8:	6060      	str	r0, [r4, #4]
    6cfa:	6870      	ldr	r0, [r6, #4]
    6cfc:	4639      	mov	r1, r7
    6cfe:	7d80      	ldrb	r0, [r0, #22]
    6d00:	f006 f825 	bl	cd4e <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    6d04:	82a0      	strh	r0, [r4, #20]
    6d06:	6870      	ldr	r0, [r6, #4]
    6d08:	4639      	mov	r1, r7
    6d0a:	f8b0 0017 	ldrh.w	r0, [r0, #23]
    6d0e:	f006 f81a 	bl	cd46 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    6d12:	61a0      	str	r0, [r4, #24]
    6d14:	6870      	ldr	r0, [r6, #4]
    6d16:	f830 1f1b 	ldrh.w	r1, [r0, #27]!
    6d1a:	8121      	strh	r1, [r4, #8]
    6d1c:	8841      	ldrh	r1, [r0, #2]
    6d1e:	8161      	strh	r1, [r4, #10]
    6d20:	6841      	ldr	r1, [r0, #4]
    6d22:	f8c4 107e 	str.w	r1, [r4, #126]	; 0x7e
    6d26:	7a01      	ldrb	r1, [r0, #8]
    6d28:	f884 1082 	strb.w	r1, [r4, #130]	; 0x82
    6d2c:	7a41      	ldrb	r1, [r0, #9]
    6d2e:	f001 011f 	and.w	r1, r1, #31
    6d32:	f884 1089 	strb.w	r1, [r4, #137]	; 0x89
    6d36:	7a40      	ldrb	r0, [r0, #9]
    6d38:	0940      	lsrs	r0, r0, #5
    6d3a:	f884 016d 	strb.w	r0, [r4, #365]	; 0x16d
    6d3e:	f104 005a 	add.w	r0, r4, #90	; 0x5a
    6d42:	2101      	movs	r1, #1
    6d44:	7205      	strb	r5, [r0, #8]
    6d46:	7245      	strb	r5, [r0, #9]
    6d48:	7281      	strb	r1, [r0, #10]
    6d4a:	2100      	movs	r1, #0
    6d4c:	3836      	subs	r0, #54	; 0x36
    6d4e:	f006 fb48 	bl	d3e2 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    6d52:	f898 000e 	ldrb.w	r0, [r8, #14]
    6d56:	f884 0066 	strb.w	r0, [r4, #102]	; 0x66
    6d5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6d5e:	0000      	.short	0x0000
    6d60:	20000100 	.word	0x20000100
    6d64:	b570      	push	{r4, r5, r6, lr}
    6d66:	4d07      	ldr	r5, [pc, #28]	; (6d84 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x70c>)
    6d68:	4604      	mov	r4, r0
    6d6a:	f100 0149 	add.w	r1, r0, #73	; 0x49
    6d6e:	6868      	ldr	r0, [r5, #4]
    6d70:	f006 f9ed 	bl	d14e <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
    6d74:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
    6d78:	6868      	ldr	r0, [r5, #4]
    6d7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6d7e:	f006 b9ec 	b.w	d15a <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    6d82:	0000      	.short	0x0000
    6d84:	20000100 	.word	0x20000100
    6d88:	d6555555 	.word	0xd6555555
    6d8c:	008e89be 	.word	0x008e89be
    6d90:	00006601 	.word	0x00006601
    6d94:	00006491 	.word	0x00006491
    6d98:	00006569 	.word	0x00006569
    6d9c:	00000000 	.word	0x00000000
    6da0:	00006541 	.word	0x00006541
    6da4:	00006599 	.word	0x00006599
    6da8:	0000d743 	.word	0x0000d743
    6dac:	0000d749 	.word	0x0000d749
    6db0:	000067f9 	.word	0x000067f9
    6db4:	0000681d 	.word	0x0000681d
    6db8:	00006cc5 	.word	0x00006cc5
    6dbc:	00006dac 	.word	0x00006dac
    6dc0:	00006da4 	.word	0x00006da4
    6dc4:	00006da0 	.word	0x00006da0

00006dc8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
    6dc8:	b510      	push	{r4, lr}
    6dca:	1e42      	subs	r2, r0, #1
    6dcc:	2a02      	cmp	r2, #2
    6dce:	d901      	bls.n	6dd4 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0xc>
    6dd0:	21ca      	movs	r1, #202	; 0xca
    6dd2:	e009      	b.n	6de8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x20>
    6dd4:	1e40      	subs	r0, r0, #1
    6dd6:	2910      	cmp	r1, #16
    6dd8:	d009      	beq.n	6dee <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x26>
    6dda:	2912      	cmp	r1, #18
    6ddc:	d00c      	beq.n	6df8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    6dde:	2913      	cmp	r1, #19
    6de0:	d00a      	beq.n	6df8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    6de2:	2915      	cmp	r1, #21
    6de4:	d005      	beq.n	6df2 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x2a>
    6de6:	21d8      	movs	r1, #216	; 0xd8
    6de8:	202f      	movs	r0, #47	; 0x2f
    6dea:	f7fc fed3 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6dee:	4905      	ldr	r1, [pc, #20]	; (6e04 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    6df0:	e004      	b.n	6dfc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    6df2:	4904      	ldr	r1, [pc, #16]	; (6e04 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    6df4:	1d89      	adds	r1, r1, #6
    6df6:	e001      	b.n	6dfc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    6df8:	4902      	ldr	r1, [pc, #8]	; (6e04 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    6dfa:	1f89      	subs	r1, r1, #6
    6dfc:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    6e00:	bd10      	pop	{r4, pc}
    6e02:	0000      	.short	0x0000
    6e04:	0000d996 	.word	0x0000d996

00006e08 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
    6e08:	1e42      	subs	r2, r0, #1
    6e0a:	b510      	push	{r4, lr}
    6e0c:	b2d2      	uxtb	r2, r2
    6e0e:	2a01      	cmp	r2, #1
    6e10:	d903      	bls.n	6e1a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    6e12:	291d      	cmp	r1, #29
    6e14:	d001      	beq.n	6e1a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    6e16:	21ee      	movs	r1, #238	; 0xee
    6e18:	e00d      	b.n	6e36 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
    6e1a:	2913      	cmp	r1, #19
    6e1c:	d013      	beq.n	6e46 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    6e1e:	dc04      	bgt.n	6e2a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x22>
    6e20:	2910      	cmp	r1, #16
    6e22:	d00b      	beq.n	6e3c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x34>
    6e24:	2912      	cmp	r1, #18
    6e26:	d104      	bne.n	6e32 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2a>
    6e28:	e00d      	b.n	6e46 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    6e2a:	2915      	cmp	r1, #21
    6e2c:	d008      	beq.n	6e40 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x38>
    6e2e:	291d      	cmp	r1, #29
    6e30:	d00e      	beq.n	6e50 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x48>
    6e32:	f44f 7181 	mov.w	r1, #258	; 0x102
    6e36:	202f      	movs	r0, #47	; 0x2f
    6e38:	f7fc feac 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6e3c:	4807      	ldr	r0, [pc, #28]	; (6e5c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    6e3e:	e004      	b.n	6e4a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    6e40:	4806      	ldr	r0, [pc, #24]	; (6e5c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    6e42:	3008      	adds	r0, #8
    6e44:	e001      	b.n	6e4a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    6e46:	4805      	ldr	r0, [pc, #20]	; (6e5c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    6e48:	1d00      	adds	r0, r0, #4
    6e4a:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    6e4e:	bd10      	pop	{r4, pc}
    6e50:	f240 315a 	movw	r1, #858	; 0x35a
    6e54:	fb10 f001 	smulbb	r0, r0, r1
    6e58:	bd10      	pop	{r4, pc}
    6e5a:	0000      	.short	0x0000
    6e5c:	0000d984 	.word	0x0000d984

00006e60 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA>:
    6e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6e64:	4604      	mov	r4, r0
    6e66:	f890 00c8 	ldrb.w	r0, [r0, #200]	; 0xc8
    6e6a:	4615      	mov	r5, r2
    6e6c:	460f      	mov	r7, r1
    6e6e:	2800      	cmp	r0, #0
    6e70:	d15d      	bne.n	6f2e <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xce>
    6e72:	4621      	mov	r1, r4
    6e74:	4844      	ldr	r0, [pc, #272]	; (6f88 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x128>)
    6e76:	f7fb f9d3 	bl	2220 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    6e7a:	4606      	mov	r6, r0
    6e7c:	2820      	cmp	r0, #32
    6e7e:	d056      	beq.n	6f2e <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xce>
    6e80:	2234      	movs	r2, #52	; 0x34
    6e82:	2100      	movs	r1, #0
    6e84:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    6e88:	f004 fd13 	bl	b8b2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6e8c:	f884 60b4 	strb.w	r6, [r4, #180]	; 0xb4
    6e90:	2601      	movs	r6, #1
    6e92:	f8c4 70b8 	str.w	r7, [r4, #184]	; 0xb8
    6e96:	f884 60c8 	strb.w	r6, [r4, #200]	; 0xc8
    6e9a:	b15f      	cbz	r7, 6eb4 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x54>
    6e9c:	2101      	movs	r1, #1
    6e9e:	f507 708e 	add.w	r0, r7, #284	; 0x11c
    6ea2:	f7fc ff2b 	bl	3cfc <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    6ea6:	f897 011c 	ldrb.w	r0, [r7, #284]	; 0x11c
    6eaa:	f000 0007 	and.w	r0, r0, #7
    6eae:	1c40      	adds	r0, r0, #1
    6eb0:	f887 011c 	strb.w	r0, [r7, #284]	; 0x11c
    6eb4:	4620      	mov	r0, r4
    6eb6:	f006 ff13 	bl	dce0 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x22a>
    6eba:	f8a4 00d4 	strh.w	r0, [r4, #212]	; 0xd4
    6ebe:	2003      	movs	r0, #3
    6ec0:	f884 00d6 	strb.w	r0, [r4, #214]	; 0xd6
    6ec4:	f884 60d7 	strb.w	r6, [r4, #215]	; 0xd7
    6ec8:	2700      	movs	r7, #0
    6eca:	f804 7fcc 	strb.w	r7, [r4, #204]!
    6ece:	f7fa fc41 	bl	1754 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    6ed2:	8921      	ldrh	r1, [r4, #8]
    6ed4:	3ccc      	subs	r4, #204	; 0xcc
    6ed6:	4288      	cmp	r0, r1
    6ed8:	d800      	bhi.n	6edc <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x7c>
    6eda:	4608      	mov	r0, r1
    6edc:	f200 60bf 	addw	r0, r0, #1727	; 0x6bf
    6ee0:	fa1f f880 	uxth.w	r8, r0
    6ee4:	4620      	mov	r0, r4
    6ee6:	f006 fb9f 	bl	d628 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    6eea:	b318      	cbz	r0, 6f34 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xd4>
    6eec:	4827      	ldr	r0, [pc, #156]	; (6f8c <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x12c>)
    6eee:	7800      	ldrb	r0, [r0, #0]
    6ef0:	f000 f8e4 	bl	70bc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x94>
    6ef4:	f500 60cd 	add.w	r0, r0, #1640	; 0x668
    6ef8:	b281      	uxth	r1, r0
    6efa:	4628      	mov	r0, r5
    6efc:	f004 fb1e 	bl	b53c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    6f00:	4428      	add	r0, r5
    6f02:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
    6f06:	34b8      	adds	r4, #184	; 0xb8
    6f08:	f004 fad9 	bl	b4be <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    6f0c:	4641      	mov	r1, r8
    6f0e:	f7fa facb 	bl	14a8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    6f12:	6220      	str	r0, [r4, #32]
    6f14:	f804 7c03 	strb.w	r7, [r4, #-3]
    6f18:	7126      	strb	r6, [r4, #4]
    6f1a:	2001      	movs	r0, #1
    6f1c:	f006 fd2b 	bl	d976 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    6f20:	f200 1007 	addw	r0, r0, #263	; 0x107
    6f24:	1a28      	subs	r0, r5, r0
    6f26:	62a7      	str	r7, [r4, #40]	; 0x28
    6f28:	60a0      	str	r0, [r4, #8]
    6f2a:	3cb8      	subs	r4, #184	; 0xb8
    6f2c:	e017      	b.n	6f5e <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xfe>
    6f2e:	200c      	movs	r0, #12
    6f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6f34:	4620      	mov	r0, r4
    6f36:	f006 fe81 	bl	dc3c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x186>
    6f3a:	f844 0fd0 	str.w	r0, [r4, #208]!
    6f3e:	f804 6c1b 	strb.w	r6, [r4, #-27]
    6f42:	f004 fabc 	bl	b4be <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    6f46:	4606      	mov	r6, r0
    6f48:	2000      	movs	r0, #0
    6f4a:	f006 ff78 	bl	de3e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x388>
    6f4e:	eb00 0108 	add.w	r1, r0, r8
    6f52:	4630      	mov	r0, r6
    6f54:	f7fa faa8 	bl	14a8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    6f58:	6125      	str	r5, [r4, #16]
    6f5a:	60a0      	str	r0, [r4, #8]
    6f5c:	3cd0      	subs	r4, #208	; 0xd0
    6f5e:	f104 01cc 	add.w	r1, r4, #204	; 0xcc
    6f62:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
    6f66:	f006 feb9 	bl	dcdc <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x226>
    6f6a:	b138      	cbz	r0, 6f7c <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x11c>
    6f6c:	f8a4 70dc 	strh.w	r7, [r4, #220]	; 0xdc
    6f70:	2100      	movs	r1, #0
    6f72:	4620      	mov	r0, r4
    6f74:	f006 fbb8 	bl	d6e8 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    6f78:	2000      	movs	r0, #0
    6f7a:	e7d9      	b.n	6f30 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xd0>
    6f7c:	f44f 71fd 	mov.w	r1, #506	; 0x1fa
    6f80:	2030      	movs	r0, #48	; 0x30
    6f82:	f7fc fe07 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6f86:	0000      	.short	0x0000
    6f88:	00007775 	.word	0x00007775
    6f8c:	20000110 	.word	0x20000110

00006f90 <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY>:
    6f90:	4804      	ldr	r0, [pc, #16]	; (6fa4 <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY+0x14>)
    6f92:	2101      	movs	r1, #1
    6f94:	2200      	movs	r2, #0
    6f96:	7001      	strb	r1, [r0, #0]
    6f98:	7042      	strb	r2, [r0, #1]
    6f9a:	70c1      	strb	r1, [r0, #3]
    6f9c:	7082      	strb	r2, [r0, #2]
    6f9e:	f006 bd57 	b.w	da50 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA>
    6fa2:	0000      	.short	0x0000
    6fa4:	20000110 	.word	0x20000110

00006fa8 <sym_24SKLESBEZEAQ7XSDAQVJQD35IVFROKORCGBXPI>:
    6fa8:	4901      	ldr	r1, [pc, #4]	; (6fb0 <sym_24SKLESBEZEAQ7XSDAQVJQD35IVFROKORCGBXPI+0x8>)
    6faa:	7008      	strb	r0, [r1, #0]
    6fac:	4770      	bx	lr
    6fae:	0000      	.short	0x0000
    6fb0:	20000110 	.word	0x20000110

00006fb4 <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A>:
    6fb4:	4901      	ldr	r1, [pc, #4]	; (6fbc <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A+0x8>)
    6fb6:	7048      	strb	r0, [r1, #1]
    6fb8:	4770      	bx	lr
    6fba:	0000      	.short	0x0000
    6fbc:	20000110 	.word	0x20000110

00006fc0 <sym_2XQD73Z3W4NFFHWTLZCIS7IQ3ACFNR3KKEBKCJQ>:
    6fc0:	4905      	ldr	r1, [pc, #20]	; (6fd8 <sym_2XQD73Z3W4NFFHWTLZCIS7IQ3ACFNR3KKEBKCJQ+0x18>)
    6fc2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    6fc6:	fbb1 f1f2 	udiv	r1, r1, r2
    6fca:	b510      	push	{r4, lr}
    6fcc:	f201 218b 	addw	r1, r1, #651	; 0x28b
    6fd0:	f006 fa20 	bl	d414 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    6fd4:	b280      	uxth	r0, r0
    6fd6:	bd10      	pop	{r4, pc}
    6fd8:	0001527d 	.word	0x0001527d

00006fdc <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>:
    6fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6fe0:	4c10      	ldr	r4, [pc, #64]	; (7024 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24>)
    6fe2:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
    6fe6:	f003 fcb1 	bl	a94c <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    6fea:	4606      	mov	r6, r0
    6fec:	7860      	ldrb	r0, [r4, #1]
    6fee:	b128      	cbz	r0, 6ffc <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x20>
    6ff0:	4632      	mov	r2, r6
    6ff2:	4639      	mov	r1, r7
    6ff4:	4628      	mov	r0, r5
    6ff6:	f005 fd2a 	bl	ca4e <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    6ffa:	4605      	mov	r5, r0
    6ffc:	6860      	ldr	r0, [r4, #4]
    6ffe:	4285      	cmp	r5, r0
    7000:	d005      	beq.n	700e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe>
    7002:	68e1      	ldr	r1, [r4, #12]
    7004:	1a28      	subs	r0, r5, r0
    7006:	4408      	add	r0, r1
    7008:	60e0      	str	r0, [r4, #12]
    700a:	f7fb fa0b 	bl	2424 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    700e:	6065      	str	r5, [r4, #4]
    7010:	42ae      	cmp	r6, r5
    7012:	d801      	bhi.n	7018 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18>
    7014:	78a0      	ldrb	r0, [r4, #2]
    7016:	b110      	cbz	r0, 701e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e>
    7018:	2000      	movs	r0, #0
    701a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    701e:	2001      	movs	r0, #1
    7020:	e7fb      	b.n	701a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a>
    7022:	0000      	.short	0x0000
    7024:	20000110 	.word	0x20000110

00007028 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>:
    7028:	b570      	push	{r4, r5, r6, lr}
    702a:	4c22      	ldr	r4, [pc, #136]	; (70b4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8c>)
    702c:	4605      	mov	r5, r0
    702e:	2906      	cmp	r1, #6
    7030:	d23c      	bcs.n	70ac <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x84>
    7032:	e8df f001 	tbb	[pc, r1]
    7036:	0b05      	.short	0x0b05
    7038:	250f0e03 	.word	0x250f0e03
    703c:	2100      	movs	r1, #0
    703e:	e000      	b.n	7042 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1a>
    7040:	2101      	movs	r1, #1
    7042:	4628      	mov	r0, r5
    7044:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7048:	f000 b94c 	b.w	72e4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2bc>
    704c:	2003      	movs	r0, #3
    704e:	f885 012c 	strb.w	r0, [r5, #300]	; 0x12c
    7052:	bd70      	pop	{r4, r5, r6, pc}
    7054:	f003 fcae 	bl	a9b4 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>
    7058:	f8c5 0168 	str.w	r0, [r5, #360]	; 0x168
    705c:	f895 0063 	ldrb.w	r0, [r5, #99]	; 0x63
    7060:	f008 f826 	bl	f0b0 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    7064:	f8d5 1168 	ldr.w	r1, [r5, #360]	; 0x168
    7068:	1a08      	subs	r0, r1, r0
    706a:	6861      	ldr	r1, [r4, #4]
    706c:	4401      	add	r1, r0
    706e:	6061      	str	r1, [r4, #4]
    7070:	68a1      	ldr	r1, [r4, #8]
    7072:	4408      	add	r0, r1
    7074:	60a0      	str	r0, [r4, #8]
    7076:	4628      	mov	r0, r5
    7078:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    707c:	f000 b8d2 	b.w	7224 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1fc>
    7080:	f003 fc64 	bl	a94c <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    7084:	4601      	mov	r1, r0
    7086:	2200      	movs	r2, #0
    7088:	69a0      	ldr	r0, [r4, #24]
    708a:	f006 fe8d 	bl	dda8 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2f2>
    708e:	69a0      	ldr	r0, [r4, #24]
    7090:	4909      	ldr	r1, [pc, #36]	; (70b8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x90>)
    7092:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
    7096:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    709a:	f7fa ff87 	bl	1fac <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>
    709e:	2800      	cmp	r0, #0
    70a0:	d1d7      	bne.n	7052 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2a>
    70a2:	f240 717a 	movw	r1, #1914	; 0x77a
    70a6:	2030      	movs	r0, #48	; 0x30
    70a8:	f7fc fd74 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    70ac:	f240 7191 	movw	r1, #1937	; 0x791
    70b0:	e7f9      	b.n	70a6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7e>
    70b2:	0000      	.short	0x0000
    70b4:	20000110 	.word	0x20000110
    70b8:	0000de69 	.word	0x0000de69
    70bc:	b510      	push	{r4, lr}
    70be:	280c      	cmp	r0, #12
    70c0:	d304      	bcc.n	70cc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa4>
    70c2:	f44f 7140 	mov.w	r1, #768	; 0x300
    70c6:	2006      	movs	r0, #6
    70c8:	f7fc fd64 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    70cc:	4901      	ldr	r1, [pc, #4]	; (70d4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xac>)
    70ce:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    70d2:	bd10      	pop	{r4, pc}
    70d4:	0000df4a 	.word	0x0000df4a
    70d8:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    70da:	4c18      	ldr	r4, [pc, #96]	; (713c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x114>)
    70dc:	2001      	movs	r0, #1
    70de:	70a0      	strb	r0, [r4, #2]
    70e0:	f64f 75ff 	movw	r5, #65535	; 0xffff
    70e4:	e00b      	b.n	70fe <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xd6>
    70e6:	2100      	movs	r1, #0
    70e8:	f005 fb61 	bl	c7ae <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    70ec:	0006      	movs	r6, r0
    70ee:	d010      	beq.n	7112 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xea>
    70f0:	f896 0160 	ldrb.w	r0, [r6, #352]	; 0x160
    70f4:	f7fa ff8c 	bl	2010 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    70f8:	4630      	mov	r0, r6
    70fa:	f006 fe48 	bl	dd8e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2d8>
    70fe:	4669      	mov	r1, sp
    7100:	2000      	movs	r0, #0
    7102:	f005 fb5e 	bl	c7c2 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    7106:	b180      	cbz	r0, 712a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x102>
    7108:	f240 1111 	movw	r1, #273	; 0x111
    710c:	2030      	movs	r0, #48	; 0x30
    710e:	f7fc fd41 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7112:	f240 1131 	movw	r1, #305	; 0x131
    7116:	e7f9      	b.n	710c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xe4>
    7118:	9802      	ldr	r0, [sp, #8]
    711a:	b130      	cbz	r0, 712a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x102>
    711c:	f890 112c 	ldrb.w	r1, [r0, #300]	; 0x12c
    7120:	b119      	cbz	r1, 712a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x102>
    7122:	8800      	ldrh	r0, [r0, #0]
    7124:	42a8      	cmp	r0, r5
    7126:	d1de      	bne.n	70e6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xbe>
    7128:	e004      	b.n	7134 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x10c>
    712a:	4668      	mov	r0, sp
    712c:	f7fc ff84 	bl	4038 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    7130:	2800      	cmp	r0, #0
    7132:	d0f1      	beq.n	7118 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xf0>
    7134:	2000      	movs	r0, #0
    7136:	70a0      	strb	r0, [r4, #2]
    7138:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    713a:	0000      	.short	0x0000
    713c:	20000110 	.word	0x20000110
    7140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7144:	4604      	mov	r4, r0
    7146:	4836      	ldr	r0, [pc, #216]	; (7220 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1f8>)
    7148:	461e      	mov	r6, r3
    714a:	4690      	mov	r8, r2
    714c:	78c0      	ldrb	r0, [r0, #3]
    714e:	4689      	mov	r9, r1
    7150:	2500      	movs	r5, #0
    7152:	b368      	cbz	r0, 71b0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x188>
    7154:	f7fc f9c8 	bl	34e8 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    7158:	b350      	cbz	r0, 71b0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x188>
    715a:	f8b4 0118 	ldrh.w	r0, [r4, #280]	; 0x118
    715e:	2802      	cmp	r0, #2
    7160:	d326      	bcc.n	71b0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x188>
    7162:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    7166:	2802      	cmp	r0, #2
    7168:	d022      	beq.n	71b0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x188>
    716a:	f894 0142 	ldrb.w	r0, [r4, #322]	; 0x142
    716e:	b9f8      	cbnz	r0, 71b0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x188>
    7170:	f894 016d 	ldrb.w	r0, [r4, #365]	; 0x16d
    7174:	f7ff ffa2 	bl	70bc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x94>
    7178:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    717c:	b281      	uxth	r1, r0
    717e:	8031      	strh	r1, [r6, #0]
    7180:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    7184:	2700      	movs	r7, #0
    7186:	2801      	cmp	r0, #1
    7188:	d015      	beq.n	71b6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x18e>
    718a:	6860      	ldr	r0, [r4, #4]
    718c:	f004 f9d6 	bl	b53c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7190:	f8b4 2106 	ldrh.w	r2, [r4, #262]	; 0x106
    7194:	b280      	uxth	r0, r0
    7196:	4442      	add	r2, r8
    7198:	eba2 0109 	sub.w	r1, r2, r9
    719c:	f8d4 2134 	ldr.w	r2, [r4, #308]	; 0x134
    71a0:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    71a4:	1a82      	subs	r2, r0, r2
    71a6:	fb01 7502 	mla	r5, r1, r2, r7
    71aa:	2001      	movs	r0, #1
    71ac:	f884 0142 	strb.w	r0, [r4, #322]	; 0x142
    71b0:	4628      	mov	r0, r5
    71b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    71b6:	f894 0079 	ldrb.w	r0, [r4, #121]	; 0x79
    71ba:	2803      	cmp	r0, #3
    71bc:	d02c      	beq.n	7218 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1f0>
    71be:	2101      	movs	r1, #1
    71c0:	2000      	movs	r0, #0
    71c2:	f005 fcfe 	bl	cbc2 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    71c6:	69a1      	ldr	r1, [r4, #24]
    71c8:	1847      	adds	r7, r0, r1
    71ca:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
    71ce:	8831      	ldrh	r1, [r6, #0]
    71d0:	34c8      	adds	r4, #200	; 0xc8
    71d2:	f004 f9b3 	bl	b53c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    71d6:	6da2      	ldr	r2, [r4, #88]	; 0x58
    71d8:	6e21      	ldr	r1, [r4, #96]	; 0x60
    71da:	1a82      	subs	r2, r0, r2
    71dc:	fb01 5502 	mla	r5, r1, r2, r5
    71e0:	65a0      	str	r0, [r4, #88]	; 0x58
    71e2:	8831      	ldrh	r1, [r6, #0]
    71e4:	4638      	mov	r0, r7
    71e6:	f004 f9a9 	bl	b53c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    71ea:	6ea1      	ldr	r1, [r4, #104]	; 0x68
    71ec:	66a0      	str	r0, [r4, #104]	; 0x68
    71ee:	1a41      	subs	r1, r0, r1
    71f0:	440d      	add	r5, r1
    71f2:	8831      	ldrh	r1, [r6, #0]
    71f4:	f854 0cc4 	ldr.w	r0, [r4, #-196]
    71f8:	f004 f9a0 	bl	b53c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    71fc:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    71fe:	4442      	add	r2, r8
    7200:	eba2 0109 	sub.w	r1, r2, r9
    7204:	6e22      	ldr	r2, [r4, #96]	; 0x60
    7206:	1a89      	subs	r1, r1, r2
    7208:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    720a:	1e49      	subs	r1, r1, #1
    720c:	1a82      	subs	r2, r0, r2
    720e:	fb01 5502 	mla	r5, r1, r2, r5
    7212:	66e0      	str	r0, [r4, #108]	; 0x6c
    7214:	3cc8      	subs	r4, #200	; 0xc8
    7216:	e7c8      	b.n	71aa <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x182>
    7218:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
    721c:	e7d3      	b.n	71c6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x19e>
    721e:	0000      	.short	0x0000
    7220:	20000110 	.word	0x20000110
    7224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7228:	4604      	mov	r4, r0
    722a:	f890 0142 	ldrb.w	r0, [r0, #322]	; 0x142
    722e:	2800      	cmp	r0, #0
    7230:	d053      	beq.n	72da <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2b2>
    7232:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    7236:	2803      	cmp	r0, #3
    7238:	d14f      	bne.n	72da <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2b2>
    723a:	4829      	ldr	r0, [pc, #164]	; (72e0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2b8>)
    723c:	f894 9063 	ldrb.w	r9, [r4, #99]	; 0x63
    7240:	7800      	ldrb	r0, [r0, #0]
    7242:	f7ff ff3b 	bl	70bc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x94>
    7246:	4605      	mov	r5, r0
    7248:	f894 016d 	ldrb.w	r0, [r4, #365]	; 0x16d
    724c:	f7ff ff36 	bl	70bc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x94>
    7250:	4428      	add	r0, r5
    7252:	b286      	uxth	r6, r0
    7254:	f894 016d 	ldrb.w	r0, [r4, #365]	; 0x16d
    7258:	f7ff ff30 	bl	70bc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x94>
    725c:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    7260:	fa1f f880 	uxth.w	r8, r0
    7264:	4648      	mov	r0, r9
    7266:	f007 ff23 	bl	f0b0 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    726a:	f8d4 1168 	ldr.w	r1, [r4, #360]	; 0x168
    726e:	1a0d      	subs	r5, r1, r0
    7270:	4648      	mov	r0, r9
    7272:	f007 ff2b 	bl	f0cc <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    7276:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
    727a:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    727e:	fbb0 f0fa 	udiv	r0, r0, sl
    7282:	1a2d      	subs	r5, r5, r0
    7284:	4648      	mov	r0, r9
    7286:	f007 ff13 	bl	f0b0 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    728a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    728e:	1a0f      	subs	r7, r1, r0
    7290:	4648      	mov	r0, r9
    7292:	f007 ff1b 	bl	f0cc <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    7296:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    729a:	4401      	add	r1, r0
    729c:	fbb1 f0fa 	udiv	r0, r1, sl
    72a0:	1a39      	subs	r1, r7, r0
    72a2:	f1a1 0060 	sub.w	r0, r1, #96	; 0x60
    72a6:	4370      	muls	r0, r6
    72a8:	fbb0 f2f8 	udiv	r2, r0, r8
    72ac:	2029      	movs	r0, #41	; 0x29
    72ae:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    72b2:	3260      	adds	r2, #96	; 0x60
    72b4:	eba0 0152 	sub.w	r1, r0, r2, lsr #1
    72b8:	eb00 0052 	add.w	r0, r0, r2, lsr #1
    72bc:	42a9      	cmp	r1, r5
    72be:	d801      	bhi.n	72c4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x29c>
    72c0:	4285      	cmp	r5, r0
    72c2:	d901      	bls.n	72c8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2a0>
    72c4:	f7fc f8f2 	bl	34ac <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>
    72c8:	4631      	mov	r1, r6
    72ca:	6860      	ldr	r0, [r4, #4]
    72cc:	f004 f936 	bl	b53c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    72d0:	2100      	movs	r1, #0
    72d2:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    72d6:	f884 1142 	strb.w	r1, [r4, #322]	; 0x142
    72da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    72de:	0000      	.short	0x0000
    72e0:	20000110 	.word	0x20000110
    72e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    72e6:	460e      	mov	r6, r1
    72e8:	4604      	mov	r4, r0
    72ea:	f003 fb2f 	bl	a94c <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    72ee:	2500      	movs	r5, #0
    72f0:	f8c4 0164 	str.w	r0, [r4, #356]	; 0x164
    72f4:	2e01      	cmp	r6, #1
    72f6:	d102      	bne.n	72fe <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2d6>
    72f8:	480f      	ldr	r0, [pc, #60]	; (7338 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x310>)
    72fa:	7880      	ldrb	r0, [r0, #2]
    72fc:	b168      	cbz	r0, 731a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2f2>
    72fe:	2004      	movs	r0, #4
    7300:	f884 012c 	strb.w	r0, [r4, #300]	; 0x12c
    7304:	f006 fcd1 	bl	dcaa <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1f4>
    7308:	f8a4 515e 	strh.w	r5, [r4, #350]	; 0x15e
    730c:	f8b4 006c 	ldrh.w	r0, [r4, #108]	; 0x6c
    7310:	f8a4 013e 	strh.w	r0, [r4, #318]	; 0x13e
    7314:	f884 5141 	strb.w	r5, [r4, #321]	; 0x141
    7318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    731a:	9500      	str	r5, [sp, #0]
    731c:	f8b4 10f4 	ldrh.w	r1, [r4, #244]	; 0xf4
    7320:	2301      	movs	r3, #1
    7322:	2200      	movs	r2, #0
    7324:	4620      	mov	r0, r4
    7326:	f000 f809 	bl	733c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x314>
    732a:	2800      	cmp	r0, #0
    732c:	d0ea      	beq.n	7304 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2dc>
    732e:	f240 61e2 	movw	r1, #1762	; 0x6e2
    7332:	2030      	movs	r0, #48	; 0x30
    7334:	f7fc fc2e 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7338:	20000110 	.word	0x20000110
    733c:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7340:	4604      	mov	r4, r0
    7342:	b085      	sub	sp, #20
    7344:	f890 0063 	ldrb.w	r0, [r0, #99]	; 0x63
    7348:	f8df b424 	ldr.w	fp, [pc, #1060]	; 7770 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x748>
    734c:	e9cd 3000 	strd	r3, r0, [sp]
    7350:	4699      	mov	r9, r3
    7352:	460f      	mov	r7, r1
    7354:	f89b 0000 	ldrb.w	r0, [fp]
    7358:	f7ff feb0 	bl	70bc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x94>
    735c:	4605      	mov	r5, r0
    735e:	f894 016d 	ldrb.w	r0, [r4, #365]	; 0x16d
    7362:	f7ff feab 	bl	70bc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x94>
    7366:	4428      	add	r0, r5
    7368:	f8ad 0008 	strh.w	r0, [sp, #8]
    736c:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
    7370:	280d      	cmp	r0, #13
    7372:	d004      	beq.n	737e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x356>
    7374:	2000      	movs	r0, #0
    7376:	9003      	str	r0, [sp, #12]
    7378:	9807      	ldr	r0, [sp, #28]
    737a:	b110      	cbz	r0, 7382 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x35a>
    737c:	e02e      	b.n	73dc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x3b4>
    737e:	2001      	movs	r0, #1
    7380:	e7f9      	b.n	7376 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x34e>
    7382:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    7386:	2803      	cmp	r0, #3
    7388:	d128      	bne.n	73dc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x3b4>
    738a:	9803      	ldr	r0, [sp, #12]
    738c:	b330      	cbz	r0, 73dc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x3b4>
    738e:	f8b4 018c 	ldrh.w	r0, [r4, #396]	; 0x18c
    7392:	42b8      	cmp	r0, r7
    7394:	d122      	bne.n	73dc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x3b4>
    7396:	f8d4 0134 	ldr.w	r0, [r4, #308]	; 0x134
    739a:	f8c4 0120 	str.w	r0, [r4, #288]	; 0x120
    739e:	6860      	ldr	r0, [r4, #4]
    73a0:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
    73a4:	f8b4 015e 	ldrh.w	r0, [r4, #350]	; 0x15e
    73a8:	f8b4 1106 	ldrh.w	r1, [r4, #262]	; 0x106
    73ac:	4408      	add	r0, r1
    73ae:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
    73b2:	4620      	mov	r0, r4
    73b4:	f006 fddf 	bl	df76 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>
    73b8:	f8d4 0190 	ldr.w	r0, [r4, #400]	; 0x190
    73bc:	61a0      	str	r0, [r4, #24]
    73be:	f8b4 018e 	ldrh.w	r0, [r4, #398]	; 0x18e
    73c2:	82a0      	strh	r0, [r4, #20]
    73c4:	f8d4 0194 	ldr.w	r0, [r4, #404]	; 0x194
    73c8:	6060      	str	r0, [r4, #4]
    73ca:	f8b4 0198 	ldrh.w	r0, [r4, #408]	; 0x198
    73ce:	8120      	strh	r0, [r4, #8]
    73d0:	f8b4 019a 	ldrh.w	r0, [r4, #410]	; 0x19a
    73d4:	8160      	strh	r0, [r4, #10]
    73d6:	2002      	movs	r0, #2
    73d8:	f884 012c 	strb.w	r0, [r4, #300]	; 0x12c
    73dc:	f8b4 006c 	ldrh.w	r0, [r4, #108]	; 0x6c
    73e0:	f504 75a2 	add.w	r5, r4, #324	; 0x144
    73e4:	1a38      	subs	r0, r7, r0
    73e6:	fa0f fa80 	sxth.w	sl, r0
    73ea:	f8b4 015c 	ldrh.w	r0, [r4, #348]	; 0x15c
    73ee:	1a38      	subs	r0, r7, r0
    73f0:	fa0f f880 	sxth.w	r8, r0
    73f4:	f1b8 0f00 	cmp.w	r8, #0
    73f8:	da06      	bge.n	7408 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x3e0>
    73fa:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
    73fe:	f8c4 0158 	str.w	r0, [r4, #344]	; 0x158
    7402:	2001      	movs	r0, #1
    7404:	46d0      	mov	r8, sl
    7406:	9000      	str	r0, [sp, #0]
    7408:	ab02      	add	r3, sp, #8
    740a:	4652      	mov	r2, sl
    740c:	4641      	mov	r1, r8
    740e:	4620      	mov	r0, r4
    7410:	f7ff fe96 	bl	7140 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x118>
    7414:	9004      	str	r0, [sp, #16]
    7416:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    741a:	b140      	cbz	r0, 742e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x406>
    741c:	2801      	cmp	r0, #1
    741e:	d07c      	beq.n	751a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4f2>
    7420:	2802      	cmp	r0, #2
    7422:	d05a      	beq.n	74da <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4b2>
    7424:	2803      	cmp	r0, #3
    7426:	d079      	beq.n	751c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4f4>
    7428:	f44f 61ac 	mov.w	r1, #1376	; 0x560
    742c:	e19c      	b.n	7768 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x740>
    742e:	f8d4 0164 	ldr.w	r0, [r4, #356]	; 0x164
    7432:	b3e8      	cbz	r0, 74b0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x488>
    7434:	2101      	movs	r1, #1
    7436:	2000      	movs	r0, #0
    7438:	f005 fbc3 	bl	cbc2 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    743c:	4606      	mov	r6, r0
    743e:	69a0      	ldr	r0, [r4, #24]
    7440:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    7444:	4430      	add	r0, r6
    7446:	f004 f879 	bl	b53c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    744a:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
    744e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    7452:	6860      	ldr	r0, [r4, #4]
    7454:	f004 f872 	bl	b53c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7458:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    745c:	a901      	add	r1, sp, #4
    745e:	4668      	mov	r0, sp
    7460:	f003 f9d2 	bl	a808 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>
    7464:	e9dd 1200 	ldrd	r1, r2, [sp]
    7468:	f8d4 0158 	ldr.w	r0, [r4, #344]	; 0x158
    746c:	f7fb f88c 	bl	2588 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>
    7470:	4682      	mov	sl, r0
    7472:	4620      	mov	r0, r4
    7474:	f006 fc0b 	bl	dc8e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1d8>
    7478:	f894 0063 	ldrb.w	r0, [r4, #99]	; 0x63
    747c:	f8d4 8164 	ldr.w	r8, [r4, #356]	; 0x164
    7480:	f007 fe24 	bl	f0cc <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    7484:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    7488:	4401      	add	r1, r0
    748a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    748e:	fbb1 f0f0 	udiv	r0, r1, r0
    7492:	69a1      	ldr	r1, [r4, #24]
    7494:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
    7498:	4431      	add	r1, r6
    749a:	1a08      	subs	r0, r1, r0
    749c:	1a81      	subs	r1, r0, r2
    749e:	4441      	add	r1, r8
    74a0:	3920      	subs	r1, #32
    74a2:	eba1 060a 	sub.w	r6, r1, sl
    74a6:	0050      	lsls	r0, r2, #1
    74a8:	8aa1      	ldrh	r1, [r4, #20]
    74aa:	3060      	adds	r0, #96	; 0x60
    74ac:	4401      	add	r1, r0
    74ae:	e000      	b.n	74b2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x48a>
    74b0:	e010      	b.n	74d4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4ac>
    74b2:	f894 0063 	ldrb.w	r0, [r4, #99]	; 0x63
    74b6:	f006 fbff 	bl	dcb8 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x202>
    74ba:	3020      	adds	r0, #32
    74bc:	f8cb 0010 	str.w	r0, [fp, #16]
    74c0:	f8d4 0164 	ldr.w	r0, [r4, #356]	; 0x164
    74c4:	4659      	mov	r1, fp
    74c6:	1a30      	subs	r0, r6, r0
    74c8:	f5b0 7fd7 	cmp.w	r0, #430	; 0x1ae
    74cc:	d85c      	bhi.n	7588 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x560>
    74ce:	f240 41f9 	movw	r1, #1273	; 0x4f9
    74d2:	e149      	b.n	7768 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x740>
    74d4:	f240 41d7 	movw	r1, #1239	; 0x4d7
    74d8:	e146      	b.n	7768 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x740>
    74da:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
    74de:	69a0      	ldr	r0, [r4, #24]
    74e0:	4408      	add	r0, r1
    74e2:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    74e6:	f004 f829 	bl	b53c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    74ea:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
    74ee:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    74f2:	6860      	ldr	r0, [r4, #4]
    74f4:	f004 f822 	bl	b53c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    74f8:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    74fc:	4620      	mov	r0, r4
    74fe:	f006 fbc6 	bl	dc8e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1d8>
    7502:	f8b4 0106 	ldrh.w	r0, [r4, #262]	; 0x106
    7506:	bb10      	cbnz	r0, 754e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x526>
    7508:	f1b9 0f00 	cmp.w	r9, #0
    750c:	d01f      	beq.n	754e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x526>
    750e:	f894 8063 	ldrb.w	r8, [r4, #99]	; 0x63
    7512:	4640      	mov	r0, r8
    7514:	f007 fdda 	bl	f0cc <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    7518:	e001      	b.n	751e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4f6>
    751a:	e036      	b.n	758a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x562>
    751c:	e052      	b.n	75c4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x59c>
    751e:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    7522:	4401      	add	r1, r0
    7524:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    7528:	fbb1 f0f0 	udiv	r0, r1, r0
    752c:	f8d4 1130 	ldr.w	r1, [r4, #304]	; 0x130
    7530:	69a2      	ldr	r2, [r4, #24]
    7532:	4408      	add	r0, r1
    7534:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
    7538:	4411      	add	r1, r2
    753a:	1a0e      	subs	r6, r1, r0
    753c:	4640      	mov	r0, r8
    753e:	f007 fdb7 	bl	f0b0 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    7542:	f8d4 1168 	ldr.w	r1, [r4, #360]	; 0x168
    7546:	1a08      	subs	r0, r1, r0
    7548:	4406      	add	r6, r0
    754a:	3e20      	subs	r6, #32
    754c:	e006      	b.n	755c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x534>
    754e:	69a1      	ldr	r1, [r4, #24]
    7550:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
    7554:	4408      	add	r0, r1
    7556:	f8d4 1130 	ldr.w	r1, [r4, #304]	; 0x130
    755a:	1a46      	subs	r6, r0, r1
    755c:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
    7560:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
    7564:	f8d4 0130 	ldr.w	r0, [r4, #304]	; 0x130
    7568:	fb01 0002 	mla	r0, r1, r2, r0
    756c:	0040      	lsls	r0, r0, #1
    756e:	8aa1      	ldrh	r1, [r4, #20]
    7570:	3060      	adds	r0, #96	; 0x60
    7572:	4401      	add	r1, r0
    7574:	f894 0063 	ldrb.w	r0, [r4, #99]	; 0x63
    7578:	f006 fb9e 	bl	dcb8 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x202>
    757c:	f8cb 0010 	str.w	r0, [fp, #16]
    7580:	2001      	movs	r0, #1
    7582:	4659      	mov	r1, fp
    7584:	f884 012c 	strb.w	r0, [r4, #300]	; 0x12c
    7588:	e066      	b.n	7658 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x630>
    758a:	f8d4 1134 	ldr.w	r1, [r4, #308]	; 0x134
    758e:	6860      	ldr	r0, [r4, #4]
    7590:	f8b4 2106 	ldrh.w	r2, [r4, #262]	; 0x106
    7594:	1a46      	subs	r6, r0, r1
    7596:	eb02 000a 	add.w	r0, r2, sl
    759a:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
    759e:	f8d4 c120 	ldr.w	ip, [r4, #288]	; 0x120
    75a2:	1a80      	subs	r0, r0, r2
    75a4:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
    75a8:	1e40      	subs	r0, r0, #1
    75aa:	fb0c 3202 	mla	r2, ip, r2, r3
    75ae:	fb00 2001 	mla	r0, r0, r1, r2
    75b2:	0040      	lsls	r0, r0, #1
    75b4:	8aa1      	ldrh	r1, [r4, #20]
    75b6:	3060      	adds	r0, #96	; 0x60
    75b8:	4401      	add	r1, r0
    75ba:	fb06 f608 	mul.w	r6, r6, r8
    75be:	f894 0063 	ldrb.w	r0, [r4, #99]	; 0x63
    75c2:	e044      	b.n	764e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x626>
    75c4:	6860      	ldr	r0, [r4, #4]
    75c6:	f8d4 1134 	ldr.w	r1, [r4, #308]	; 0x134
    75ca:	fb00 f008 	mul.w	r0, r0, r8
    75ce:	fb08 0611 	mls	r6, r8, r1, r0
    75d2:	f894 0075 	ldrb.w	r0, [r4, #117]	; 0x75
    75d6:	2824      	cmp	r0, #36	; 0x24
    75d8:	d003      	beq.n	75e2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x5ba>
    75da:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
    75de:	2824      	cmp	r0, #36	; 0x24
    75e0:	d109      	bne.n	75f6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x5ce>
    75e2:	f8b4 018c 	ldrh.w	r0, [r4, #396]	; 0x18c
    75e6:	1a38      	subs	r0, r7, r0
    75e8:	b200      	sxth	r0, r0
    75ea:	2800      	cmp	r0, #0
    75ec:	db03      	blt.n	75f6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x5ce>
    75ee:	f894 018f 	ldrb.w	r0, [r4, #399]	; 0x18f
    75f2:	b100      	cbz	r0, 75f6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x5ce>
    75f4:	9001      	str	r0, [sp, #4]
    75f6:	9800      	ldr	r0, [sp, #0]
    75f8:	b1f8      	cbz	r0, 763a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x612>
    75fa:	f8b4 0106 	ldrh.w	r0, [r4, #262]	; 0x106
    75fe:	b9e0      	cbnz	r0, 763a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x612>
    7600:	f8d4 0168 	ldr.w	r0, [r4, #360]	; 0x168
    7604:	2800      	cmp	r0, #0
    7606:	d07d      	beq.n	7704 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6dc>
    7608:	f8d4 0164 	ldr.w	r0, [r4, #356]	; 0x164
    760c:	2800      	cmp	r0, #0
    760e:	d079      	beq.n	7704 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6dc>
    7610:	f894 0063 	ldrb.w	r0, [r4, #99]	; 0x63
    7614:	f007 fd5a 	bl	f0cc <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    7618:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    761c:	4401      	add	r1, r0
    761e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    7622:	fbb1 f0f0 	udiv	r0, r1, r0
    7626:	1a36      	subs	r6, r6, r0
    7628:	f894 0063 	ldrb.w	r0, [r4, #99]	; 0x63
    762c:	f007 fd40 	bl	f0b0 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    7630:	f8d4 1168 	ldr.w	r1, [r4, #360]	; 0x168
    7634:	1a08      	subs	r0, r1, r0
    7636:	4406      	add	r6, r0
    7638:	3e20      	subs	r6, #32
    763a:	f8b4 1106 	ldrh.w	r1, [r4, #262]	; 0x106
    763e:	eb01 000a 	add.w	r0, r1, sl
    7642:	f8d4 1134 	ldr.w	r1, [r4, #308]	; 0x134
    7646:	4348      	muls	r0, r1
    7648:	0041      	lsls	r1, r0, #1
    764a:	3160      	adds	r1, #96	; 0x60
    764c:	9801      	ldr	r0, [sp, #4]
    764e:	f006 fb33 	bl	dcb8 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x202>
    7652:	4659      	mov	r1, fp
    7654:	f8cb 0010 	str.w	r0, [fp, #16]
    7658:	9804      	ldr	r0, [sp, #16]
    765a:	6909      	ldr	r1, [r1, #16]
    765c:	1a33      	subs	r3, r6, r0
    765e:	f8d4 6134 	ldr.w	r6, [r4, #308]	; 0x134
    7662:	6860      	ldr	r0, [r4, #4]
    7664:	1b80      	subs	r0, r0, r6
    7666:	f2a0 203d 	subw	r0, r0, #573	; 0x23d
    766a:	f8cb 0014 	str.w	r0, [fp, #20]
    766e:	4281      	cmp	r1, r0
    7670:	d800      	bhi.n	7674 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x64c>
    7672:	4608      	mov	r0, r1
    7674:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    7678:	2000      	movs	r0, #0
    767a:	7028      	strb	r0, [r5, #0]
    767c:	2064      	movs	r0, #100	; 0x64
    767e:	8128      	strh	r0, [r5, #8]
    7680:	f8d4 0158 	ldr.w	r0, [r4, #344]	; 0x158
    7684:	4619      	mov	r1, r3
    7686:	34dc      	adds	r4, #220	; 0xdc
    7688:	f7f9 ff0e 	bl	14a8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    768c:	60e8      	str	r0, [r5, #12]
    768e:	f854 0cb4 	ldr.w	r0, [r4, #-180]
    7692:	6a61      	ldr	r1, [r4, #36]	; 0x24
    7694:	4408      	add	r0, r1
    7696:	6068      	str	r0, [r5, #4]
    7698:	68e8      	ldr	r0, [r5, #12]
    769a:	67e0      	str	r0, [r4, #124]	; 0x7c
    769c:	f8a4 7080 	strh.w	r7, [r4, #128]	; 0x80
    76a0:	2001      	movs	r0, #1
    76a2:	72a8      	strb	r0, [r5, #10]
    76a4:	8aa1      	ldrh	r1, [r4, #20]
    76a6:	3cdc      	subs	r4, #220	; 0xdc
    76a8:	1bc9      	subs	r1, r1, r7
    76aa:	b209      	sxth	r1, r1
    76ac:	2900      	cmp	r1, #0
    76ae:	dd01      	ble.n	76b4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x68c>
    76b0:	2103      	movs	r1, #3
    76b2:	72a9      	strb	r1, [r5, #10]
    76b4:	9903      	ldr	r1, [sp, #12]
    76b6:	b331      	cbz	r1, 7706 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6de>
    76b8:	f1b9 0f00 	cmp.w	r9, #0
    76bc:	d027      	beq.n	770e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6e6>
    76be:	bf00      	nop
    76c0:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
    76c4:	b392      	cbz	r2, 772c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x704>
    76c6:	f8b4 111a 	ldrh.w	r1, [r4, #282]	; 0x11a
    76ca:	bf00      	nop
    76cc:	f8a4 111a 	strh.w	r1, [r4, #282]	; 0x11a
    76d0:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
    76d4:	1c49      	adds	r1, r1, #1
    76d6:	434b      	muls	r3, r1
    76d8:	4293      	cmp	r3, r2
    76da:	d218      	bcs.n	770e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6e6>
    76dc:	7aa9      	ldrb	r1, [r5, #10]
    76de:	1e49      	subs	r1, r1, #1
    76e0:	2900      	cmp	r1, #0
    76e2:	dd14      	ble.n	770e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6e6>
    76e4:	72a8      	strb	r0, [r5, #10]
    76e6:	f8b4 011a 	ldrh.w	r0, [r4, #282]	; 0x11a
    76ea:	2101      	movs	r1, #1
    76ec:	1c40      	adds	r0, r0, #1
    76ee:	f8a4 011a 	strh.w	r0, [r4, #282]	; 0x11a
    76f2:	f504 708e 	add.w	r0, r4, #284	; 0x11c
    76f6:	f7fc fae5 	bl	3cc4 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    76fa:	f894 011c 	ldrb.w	r0, [r4, #284]	; 0x11c
    76fe:	f000 0007 	and.w	r0, r0, #7
    7702:	e001      	b.n	7708 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6e0>
    7704:	e013      	b.n	772e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x706>
    7706:	e015      	b.n	7734 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x70c>
    7708:	1c40      	adds	r0, r0, #1
    770a:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
    770e:	f894 0160 	ldrb.w	r0, [r4, #352]	; 0x160
    7712:	4629      	mov	r1, r5
    7714:	f006 fae2 	bl	dcdc <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x226>
    7718:	b320      	cbz	r0, 7764 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x73c>
    771a:	9807      	ldr	r0, [sp, #28]
    771c:	f080 0001 	eor.w	r0, r0, #1
    7720:	f884 0140 	strb.w	r0, [r4, #320]	; 0x140
    7724:	2000      	movs	r0, #0
    7726:	b009      	add	sp, #36	; 0x24
    7728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    772c:	e018      	b.n	7760 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x738>
    772e:	f240 514b 	movw	r1, #1355	; 0x54b
    7732:	e019      	b.n	7768 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x740>
    7734:	f1b9 0f00 	cmp.w	r9, #0
    7738:	d1c2      	bne.n	76c0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x698>
    773a:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    773e:	2800      	cmp	r0, #0
    7740:	d0e5      	beq.n	770e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6e6>
    7742:	f8d4 1134 	ldr.w	r1, [r4, #308]	; 0x134
    7746:	6860      	ldr	r0, [r4, #4]
    7748:	1a41      	subs	r1, r0, r1
    774a:	4628      	mov	r0, r5
    774c:	f005 fa4b 	bl	cbe6 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    7750:	0400      	lsls	r0, r0, #16
    7752:	0c00      	lsrs	r0, r0, #16
    7754:	d0db      	beq.n	770e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6e6>
    7756:	9912      	ldr	r1, [sp, #72]	; 0x48
    7758:	b101      	cbz	r1, 775c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x734>
    775a:	8008      	strh	r0, [r1, #0]
    775c:	2001      	movs	r0, #1
    775e:	e7e2      	b.n	7726 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6fe>
    7760:	2100      	movs	r1, #0
    7762:	e7b3      	b.n	76cc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6a4>
    7764:	f240 51ab 	movw	r1, #1451	; 0x5ab
    7768:	2030      	movs	r0, #48	; 0x30
    776a:	f7fc fa13 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    776e:	0000      	.short	0x0000
    7770:	20000110 	.word	0x20000110
    7774:	b570      	push	{r4, r5, r6, lr}
    7776:	b140      	cbz	r0, 778a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x762>
    7778:	2909      	cmp	r1, #9
    777a:	d24a      	bcs.n	7812 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7ea>
    777c:	e8df f001 	tbb	[pc, r1]
    7780:	3d3d1707 	.word	0x3d3d1707
    7784:	412b4939 	.word	0x412b4939
    7788:	0045      	.short	0x0045
    778a:	21d5      	movs	r1, #213	; 0xd5
    778c:	e03e      	b.n	780c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7e4>
    778e:	4922      	ldr	r1, [pc, #136]	; (7818 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7f0>)
    7790:	4604      	mov	r4, r0
    7792:	6188      	str	r0, [r1, #24]
    7794:	f7fe fdc2 	bl	631c <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
    7798:	b110      	cbz	r0, 77a0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x778>
    779a:	f240 2187 	movw	r1, #647	; 0x287
    779e:	e035      	b.n	780c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7e4>
    77a0:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
    77a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    77a8:	38f6      	subs	r0, #246	; 0xf6
    77aa:	f7fa be3b 	b.w	2424 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    77ae:	4605      	mov	r5, r0
    77b0:	f005 ff3a 	bl	d628 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    77b4:	b9a8      	cbnz	r0, 77e2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7ba>
    77b6:	4628      	mov	r0, r5
    77b8:	f006 fa40 	bl	dc3c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x186>
    77bc:	4604      	mov	r4, r0
    77be:	f8d5 00d0 	ldr.w	r0, [r5, #208]	; 0xd0
    77c2:	42a0      	cmp	r0, r4
    77c4:	d20b      	bcs.n	77de <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7b6>
    77c6:	1a20      	subs	r0, r4, r0
    77c8:	2104      	movs	r1, #4
    77ca:	f7f9 fdab 	bl	1324 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    77ce:	b130      	cbz	r0, 77de <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7b6>
    77d0:	4628      	mov	r0, r5
    77d2:	f8c5 40d0 	str.w	r4, [r5, #208]	; 0xd0
    77d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    77da:	f005 bef6 	b.w	d5ca <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
    77de:	f8c5 40d0 	str.w	r4, [r5, #208]	; 0xd0
    77e2:	4628      	mov	r0, r5
    77e4:	f7fe fdb6 	bl	6354 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
    77e8:	2800      	cmp	r0, #0
    77ea:	d014      	beq.n	7816 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7ee>
    77ec:	f240 21bb 	movw	r1, #699	; 0x2bb
    77f0:	e00c      	b.n	780c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7e4>
    77f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    77f6:	f003 baab 	b.w	ad50 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    77fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    77fe:	f006 b9b7 	b.w	db70 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xba>
    7802:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7806:	f006 ba10 	b.w	dc2a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x174>
    780a:	21f7      	movs	r1, #247	; 0xf7
    780c:	2030      	movs	r0, #48	; 0x30
    780e:	f7fc f9c1 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7812:	21fb      	movs	r1, #251	; 0xfb
    7814:	e7fa      	b.n	780c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7e4>
    7816:	bd70      	pop	{r4, r5, r6, pc}
    7818:	20000110 	.word	0x20000110
    781c:	b570      	push	{r4, r5, r6, lr}
    781e:	4604      	mov	r4, r0
    7820:	f7f9 ff98 	bl	1754 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    7824:	2864      	cmp	r0, #100	; 0x64
    7826:	d901      	bls.n	782c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x804>
    7828:	4605      	mov	r5, r0
    782a:	e000      	b.n	782e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x806>
    782c:	2564      	movs	r5, #100	; 0x64
    782e:	f894 0063 	ldrb.w	r0, [r4, #99]	; 0x63
    7832:	2128      	movs	r1, #40	; 0x28
    7834:	f006 f99a 	bl	db6c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb6>
    7838:	4428      	add	r0, r5
    783a:	f8d4 1134 	ldr.w	r1, [r4, #308]	; 0x134
    783e:	f200 2037 	addw	r0, r0, #567	; 0x237
    7842:	180e      	adds	r6, r1, r0
    7844:	f894 0063 	ldrb.w	r0, [r4, #99]	; 0x63
    7848:	2128      	movs	r1, #40	; 0x28
    784a:	f006 f98f 	bl	db6c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb6>
    784e:	f200 229b 	addw	r2, r0, #667	; 0x29b
    7852:	4620      	mov	r0, r4
    7854:	6a61      	ldr	r1, [r4, #36]	; 0x24
    7856:	f005 fd51 	bl	d2fc <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    785a:	4605      	mov	r5, r0
    785c:	4632      	mov	r2, r6
    785e:	4620      	mov	r0, r4
    7860:	6861      	ldr	r1, [r4, #4]
    7862:	f005 fd4b 	bl	d2fc <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    7866:	4907      	ldr	r1, [pc, #28]	; (7884 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x85c>)
    7868:	4285      	cmp	r5, r0
    786a:	6088      	str	r0, [r1, #8]
    786c:	d200      	bcs.n	7870 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x848>
    786e:	4628      	mov	r0, r5
    7870:	6048      	str	r0, [r1, #4]
    7872:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
    7876:	f5a0 70b2 	sub.w	r0, r0, #356	; 0x164
    787a:	60c8      	str	r0, [r1, #12]
    787c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7880:	f7fa bdd0 	b.w	2424 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    7884:	20000110 	.word	0x20000110
    7888:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    788a:	4604      	mov	r4, r0
    788c:	f003 fe17 	bl	b4be <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    7890:	4601      	mov	r1, r0
    7892:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
    7896:	f7f9 fe39 	bl	150c <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    789a:	6861      	ldr	r1, [r4, #4]
    789c:	b111      	cbz	r1, 78a4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x87c>
    789e:	fbb0 f0f1 	udiv	r0, r0, r1
    78a2:	e000      	b.n	78a6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x87e>
    78a4:	2000      	movs	r0, #0
    78a6:	f894 1076 	ldrb.w	r1, [r4, #118]	; 0x76
    78aa:	290d      	cmp	r1, #13
    78ac:	d00c      	beq.n	78c8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8a0>
    78ae:	f8b4 206c 	ldrh.w	r2, [r4, #108]	; 0x6c
    78b2:	f8b4 113e 	ldrh.w	r1, [r4, #318]	; 0x13e
    78b6:	1813      	adds	r3, r2, r0
    78b8:	1acb      	subs	r3, r1, r3
    78ba:	b21b      	sxth	r3, r3
    78bc:	2b00      	cmp	r3, #0
    78be:	db06      	blt.n	78ce <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8a6>
    78c0:	1c49      	adds	r1, r1, #1
    78c2:	f8a4 113e 	strh.w	r1, [r4, #318]	; 0x13e
    78c6:	e006      	b.n	78d6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8ae>
    78c8:	f8b4 013e 	ldrh.w	r0, [r4, #318]	; 0x13e
    78cc:	e00c      	b.n	78e8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8c0>
    78ce:	1c40      	adds	r0, r0, #1
    78d0:	4410      	add	r0, r2
    78d2:	f8a4 013e 	strh.w	r0, [r4, #318]	; 0x13e
    78d6:	f894 0141 	ldrb.w	r0, [r4, #321]	; 0x141
    78da:	b940      	cbnz	r0, 78ee <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8c6>
    78dc:	f8b4 013e 	ldrh.w	r0, [r4, #318]	; 0x13e
    78e0:	f8b4 10f4 	ldrh.w	r1, [r4, #244]	; 0xf4
    78e4:	4288      	cmp	r0, r1
    78e6:	d102      	bne.n	78ee <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8c6>
    78e8:	1c40      	adds	r0, r0, #1
    78ea:	f8a4 013e 	strh.w	r0, [r4, #318]	; 0x13e
    78ee:	f8b4 015e 	ldrh.w	r0, [r4, #350]	; 0x15e
    78f2:	1c40      	adds	r0, r0, #1
    78f4:	f8a4 015e 	strh.w	r0, [r4, #350]	; 0x15e
    78f8:	f8b4 009e 	ldrh.w	r0, [r4, #158]	; 0x9e
    78fc:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
    7900:	1a40      	subs	r0, r0, r1
    7902:	f8b4 106c 	ldrh.w	r1, [r4, #108]	; 0x6c
    7906:	1e40      	subs	r0, r0, #1
    7908:	4408      	add	r0, r1
    790a:	b285      	uxth	r5, r0
    790c:	e023      	b.n	7956 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x92e>
    790e:	a801      	add	r0, sp, #4
    7910:	2300      	movs	r3, #0
    7912:	9000      	str	r0, [sp, #0]
    7914:	461a      	mov	r2, r3
    7916:	4620      	mov	r0, r4
    7918:	f7ff fd10 	bl	733c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x314>
    791c:	2800      	cmp	r0, #0
    791e:	d036      	beq.n	798e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x966>
    7920:	2801      	cmp	r0, #1
    7922:	d004      	beq.n	792e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x906>
    7924:	f240 6162 	movw	r1, #1634	; 0x662
    7928:	2030      	movs	r0, #48	; 0x30
    792a:	f7fc f933 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    792e:	f8b4 113e 	ldrh.w	r1, [r4, #318]	; 0x13e
    7932:	f8b4 00f0 	ldrh.w	r0, [r4, #240]	; 0xf0
    7936:	1a0a      	subs	r2, r1, r0
    7938:	b212      	sxth	r2, r2
    793a:	2a00      	cmp	r2, #0
    793c:	da06      	bge.n	794c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x924>
    793e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    7942:	440a      	add	r2, r1
    7944:	1aaa      	subs	r2, r5, r2
    7946:	b212      	sxth	r2, r2
    7948:	2a00      	cmp	r2, #0
    794a:	db02      	blt.n	7952 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x92a>
    794c:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    7950:	4408      	add	r0, r1
    7952:	f8a4 013e 	strh.w	r0, [r4, #318]	; 0x13e
    7956:	f8b4 113e 	ldrh.w	r1, [r4, #318]	; 0x13e
    795a:	1a68      	subs	r0, r5, r1
    795c:	b200      	sxth	r0, r0
    795e:	2800      	cmp	r0, #0
    7960:	dad5      	bge.n	790e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8e6>
    7962:	f894 0079 	ldrb.w	r0, [r4, #121]	; 0x79
    7966:	b180      	cbz	r0, 798a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x962>
    7968:	f05f 0008 	movs.w	r0, #8
    796c:	f884 008d 	strb.w	r0, [r4, #141]	; 0x8d
    7970:	2001      	movs	r0, #1
    7972:	f884 008c 	strb.w	r0, [r4, #140]	; 0x8c
    7976:	4620      	mov	r0, r4
    7978:	f006 fb32 	bl	dfe0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    797c:	4620      	mov	r0, r4
    797e:	f006 fa06 	bl	dd8e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2d8>
    7982:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    7986:	f002 b861 	b.w	9a4c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    798a:	203e      	movs	r0, #62	; 0x3e
    798c:	e7ee      	b.n	796c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x944>
    798e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

00007990 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>:
    7990:	4806      	ldr	r0, [pc, #24]	; (79ac <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x1c>)
    7992:	4905      	ldr	r1, [pc, #20]	; (79a8 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x18>)
    7994:	6501      	str	r1, [r0, #80]	; 0x50
    7996:	4906      	ldr	r1, [pc, #24]	; (79b0 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x20>)
    7998:	6541      	str	r1, [r0, #84]	; 0x54
    799a:	4807      	ldr	r0, [pc, #28]	; (79b8 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x28>)
    799c:	4905      	ldr	r1, [pc, #20]	; (79b4 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x24>)
    799e:	6501      	str	r1, [r0, #80]	; 0x50
    79a0:	4906      	ldr	r1, [pc, #24]	; (79bc <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x2c>)
    79a2:	6541      	str	r1, [r0, #84]	; 0x54
    79a4:	4770      	bx	lr
    79a6:	0000      	.short	0x0000
    79a8:	00008e35 	.word	0x00008e35
    79ac:	20000140 	.word	0x20000140
    79b0:	00008ef5 	.word	0x00008ef5
    79b4:	00009541 	.word	0x00009541
    79b8:	200001a4 	.word	0x200001a4
    79bc:	00009571 	.word	0x00009571

000079c0 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA>:
    79c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    79c2:	460d      	mov	r5, r1
    79c4:	4607      	mov	r7, r0
    79c6:	2100      	movs	r1, #0
    79c8:	f004 fef1 	bl	c7ae <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    79cc:	1e04      	subs	r4, r0, #0
    79ce:	d04f      	beq.n	7a70 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
    79d0:	f894 0068 	ldrb.w	r0, [r4, #104]	; 0x68
    79d4:	2800      	cmp	r0, #0
    79d6:	d04b      	beq.n	7a70 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
    79d8:	f894 01b0 	ldrb.w	r0, [r4, #432]	; 0x1b0
    79dc:	f88d 0000 	strb.w	r0, [sp]
    79e0:	9800      	ldr	r0, [sp, #0]
    79e2:	9000      	str	r0, [sp, #0]
    79e4:	f89d 0000 	ldrb.w	r0, [sp]
    79e8:	2600      	movs	r6, #0
    79ea:	b1d8      	cbz	r0, 7a24 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x64>
    79ec:	706e      	strb	r6, [r5, #1]
    79ee:	2007      	movs	r0, #7
    79f0:	7028      	strb	r0, [r5, #0]
    79f2:	e00b      	b.n	7a0c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x4c>
    79f4:	f884 61b0 	strb.w	r6, [r4, #432]	; 0x1b0
    79f8:	83a6      	strh	r6, [r4, #28]
    79fa:	f8d4 01b2 	ldr.w	r0, [r4, #434]	; 0x1b2
    79fe:	6068      	str	r0, [r5, #4]
    7a00:	f8d4 01b6 	ldr.w	r0, [r4, #438]	; 0x1b6
    7a04:	60a8      	str	r0, [r5, #8]
    7a06:	f8b4 01ba 	ldrh.w	r0, [r4, #442]	; 0x1ba
    7a0a:	81a8      	strh	r0, [r5, #12]
    7a0c:	f894 01b0 	ldrb.w	r0, [r4, #432]	; 0x1b0
    7a10:	f88d 0000 	strb.w	r0, [sp]
    7a14:	9800      	ldr	r0, [sp, #0]
    7a16:	9000      	str	r0, [sp, #0]
    7a18:	f89d 0000 	ldrb.w	r0, [sp]
    7a1c:	2800      	cmp	r0, #0
    7a1e:	d1e9      	bne.n	79f4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x34>
    7a20:	712e      	strb	r6, [r5, #4]
    7a22:	e10b      	b.n	7c3c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7a24:	f894 01bc 	ldrb.w	r0, [r4, #444]	; 0x1bc
    7a28:	b3a0      	cbz	r0, 7a94 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xd4>
    7a2a:	f894 01bc 	ldrb.w	r0, [r4, #444]	; 0x1bc
    7a2e:	280b      	cmp	r0, #11
    7a30:	d016      	beq.n	7a60 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xa0>
    7a32:	280c      	cmp	r0, #12
    7a34:	d004      	beq.n	7a40 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x80>
    7a36:	f640 21ce 	movw	r1, #2766	; 0xace
    7a3a:	2031      	movs	r0, #49	; 0x31
    7a3c:	f7fc f8aa 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7a40:	8820      	ldrh	r0, [r4, #0]
    7a42:	f7fc fcdb 	bl	43fc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    7a46:	4607      	mov	r7, r0
    7a48:	f004 fd6c 	bl	c524 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    7a4c:	b978      	cbnz	r0, 7a6e <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xae>
    7a4e:	706e      	strb	r6, [r5, #1]
    7a50:	200c      	movs	r0, #12
    7a52:	7028      	strb	r0, [r5, #0]
    7a54:	f894 01be 	ldrb.w	r0, [r4, #446]	; 0x1be
    7a58:	7128      	strb	r0, [r5, #4]
    7a5a:	8820      	ldrh	r0, [r4, #0]
    7a5c:	80e8      	strh	r0, [r5, #6]
    7a5e:	e013      	b.n	7a88 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xc8>
    7a60:	8820      	ldrh	r0, [r4, #0]
    7a62:	f7fc fccb 	bl	43fc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    7a66:	4607      	mov	r7, r0
    7a68:	f004 fd5c 	bl	c524 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    7a6c:	b108      	cbz	r0, 7a72 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb2>
    7a6e:	2000      	movs	r0, #0
    7a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7a72:	706e      	strb	r6, [r5, #1]
    7a74:	200b      	movs	r0, #11
    7a76:	7028      	strb	r0, [r5, #0]
    7a78:	f894 01be 	ldrb.w	r0, [r4, #446]	; 0x1be
    7a7c:	7128      	strb	r0, [r5, #4]
    7a7e:	8820      	ldrh	r0, [r4, #0]
    7a80:	80e8      	strh	r0, [r5, #6]
    7a82:	f894 01c2 	ldrb.w	r0, [r4, #450]	; 0x1c2
    7a86:	7228      	strb	r0, [r5, #8]
    7a88:	f884 61bc 	strb.w	r6, [r4, #444]	; 0x1bc
    7a8c:	4638      	mov	r0, r7
    7a8e:	f004 fd5e 	bl	c54e <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    7a92:	e0d3      	b.n	7c3c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7a94:	e7ff      	b.n	7a96 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xd6>
    7a96:	f894 01f2 	ldrb.w	r0, [r4, #498]	; 0x1f2
    7a9a:	f88d 0000 	strb.w	r0, [sp]
    7a9e:	9800      	ldr	r0, [sp, #0]
    7aa0:	9000      	str	r0, [sp, #0]
    7aa2:	f89d 0000 	ldrb.w	r0, [sp]
    7aa6:	b130      	cbz	r0, 7ab6 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xf6>
    7aa8:	706e      	strb	r6, [r5, #1]
    7aaa:	200e      	movs	r0, #14
    7aac:	7028      	strb	r0, [r5, #0]
    7aae:	80af      	strh	r7, [r5, #4]
    7ab0:	f884 61f2 	strb.w	r6, [r4, #498]	; 0x1f2
    7ab4:	e0c2      	b.n	7c3c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7ab6:	f894 01c4 	ldrb.w	r0, [r4, #452]	; 0x1c4
    7aba:	f88d 0000 	strb.w	r0, [sp]
    7abe:	9800      	ldr	r0, [sp, #0]
    7ac0:	9000      	str	r0, [sp, #0]
    7ac2:	f89d 0000 	ldrb.w	r0, [sp]
    7ac6:	b198      	cbz	r0, 7af0 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x130>
    7ac8:	706e      	strb	r6, [r5, #1]
    7aca:	2008      	movs	r0, #8
    7acc:	7028      	strb	r0, [r5, #0]
    7ace:	8820      	ldrh	r0, [r4, #0]
    7ad0:	80a8      	strh	r0, [r5, #4]
    7ad2:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
    7ad6:	f8c5 1006 	str.w	r1, [r5, #6]
    7ada:	f8d4 11cc 	ldr.w	r1, [r4, #460]	; 0x1cc
    7ade:	f8c5 100a 	str.w	r1, [r5, #10]
    7ae2:	f8b4 01d0 	ldrh.w	r0, [r4, #464]	; 0x1d0
    7ae6:	81e8      	strh	r0, [r5, #14]
    7ae8:	f504 74e2 	add.w	r4, r4, #452	; 0x1c4
    7aec:	7026      	strb	r6, [r4, #0]
    7aee:	e0a5      	b.n	7c3c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7af0:	f894 01ec 	ldrb.w	r0, [r4, #492]	; 0x1ec
    7af4:	f88d 0000 	strb.w	r0, [sp]
    7af8:	9800      	ldr	r0, [sp, #0]
    7afa:	9000      	str	r0, [sp, #0]
    7afc:	f89d 0000 	ldrb.w	r0, [sp]
    7b00:	b1a0      	cbz	r0, 7b2c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x16c>
    7b02:	706e      	strb	r6, [r5, #1]
    7b04:	2016      	movs	r0, #22
    7b06:	7028      	strb	r0, [r5, #0]
    7b08:	e005      	b.n	7b16 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x156>
    7b0a:	bf00      	nop
    7b0c:	f884 61ec 	strb.w	r6, [r4, #492]	; 0x1ec
    7b10:	f8d4 01ee 	ldr.w	r0, [r4, #494]	; 0x1ee
    7b14:	6068      	str	r0, [r5, #4]
    7b16:	f894 01ec 	ldrb.w	r0, [r4, #492]	; 0x1ec
    7b1a:	f88d 0000 	strb.w	r0, [sp]
    7b1e:	9800      	ldr	r0, [sp, #0]
    7b20:	9000      	str	r0, [sp, #0]
    7b22:	f89d 0000 	ldrb.w	r0, [sp]
    7b26:	2800      	cmp	r0, #0
    7b28:	d1f0      	bne.n	7b0c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x14c>
    7b2a:	e087      	b.n	7c3c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7b2c:	f894 0202 	ldrb.w	r0, [r4, #514]	; 0x202
    7b30:	f88d 0000 	strb.w	r0, [sp]
    7b34:	9800      	ldr	r0, [sp, #0]
    7b36:	9000      	str	r0, [sp, #0]
    7b38:	f89d 0000 	ldrb.w	r0, [sp]
    7b3c:	b170      	cbz	r0, 7b5c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x19c>
    7b3e:	706e      	strb	r6, [r5, #1]
    7b40:	2006      	movs	r0, #6
    7b42:	7028      	strb	r0, [r5, #0]
    7b44:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
    7b48:	6068      	str	r0, [r5, #4]
    7b4a:	f8d4 0208 	ldr.w	r0, [r4, #520]	; 0x208
    7b4e:	60a8      	str	r0, [r5, #8]
    7b50:	f8d4 020c 	ldr.w	r0, [r4, #524]	; 0x20c
    7b54:	60e8      	str	r0, [r5, #12]
    7b56:	f504 7401 	add.w	r4, r4, #516	; 0x204
    7b5a:	e03a      	b.n	7bd2 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x212>
    7b5c:	f894 01d2 	ldrb.w	r0, [r4, #466]	; 0x1d2
    7b60:	f88d 0000 	strb.w	r0, [sp]
    7b64:	9800      	ldr	r0, [sp, #0]
    7b66:	9000      	str	r0, [sp, #0]
    7b68:	f89d 0000 	ldrb.w	r0, [sp]
    7b6c:	b1d0      	cbz	r0, 7ba4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1e4>
    7b6e:	706e      	strb	r6, [r5, #1]
    7b70:	2012      	movs	r0, #18
    7b72:	7028      	strb	r0, [r5, #0]
    7b74:	e00b      	b.n	7b8e <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1ce>
    7b76:	bf00      	nop
    7b78:	f884 61d2 	strb.w	r6, [r4, #466]	; 0x1d2
    7b7c:	f8d4 01d4 	ldr.w	r0, [r4, #468]	; 0x1d4
    7b80:	6068      	str	r0, [r5, #4]
    7b82:	f8d4 01d8 	ldr.w	r0, [r4, #472]	; 0x1d8
    7b86:	60a8      	str	r0, [r5, #8]
    7b88:	f8d4 01dc 	ldr.w	r0, [r4, #476]	; 0x1dc
    7b8c:	60e8      	str	r0, [r5, #12]
    7b8e:	f894 01d2 	ldrb.w	r0, [r4, #466]	; 0x1d2
    7b92:	f88d 0000 	strb.w	r0, [sp]
    7b96:	9800      	ldr	r0, [sp, #0]
    7b98:	9000      	str	r0, [sp, #0]
    7b9a:	f89d 0000 	ldrb.w	r0, [sp]
    7b9e:	2800      	cmp	r0, #0
    7ba0:	d1ea      	bne.n	7b78 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1b8>
    7ba2:	e04b      	b.n	7c3c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7ba4:	f894 01e0 	ldrb.w	r0, [r4, #480]	; 0x1e0
    7ba8:	f88d 0000 	strb.w	r0, [sp]
    7bac:	9800      	ldr	r0, [sp, #0]
    7bae:	9000      	str	r0, [sp, #0]
    7bb0:	f89d 0000 	ldrb.w	r0, [sp]
    7bb4:	b180      	cbz	r0, 7bd8 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x218>
    7bb6:	706e      	strb	r6, [r5, #1]
    7bb8:	2018      	movs	r0, #24
    7bba:	7028      	strb	r0, [r5, #0]
    7bbc:	f8d4 01e2 	ldr.w	r0, [r4, #482]	; 0x1e2
    7bc0:	6068      	str	r0, [r5, #4]
    7bc2:	f8d4 01e6 	ldr.w	r0, [r4, #486]	; 0x1e6
    7bc6:	60a8      	str	r0, [r5, #8]
    7bc8:	f8b4 01ea 	ldrh.w	r0, [r4, #490]	; 0x1ea
    7bcc:	81a8      	strh	r0, [r5, #12]
    7bce:	f504 74f1 	add.w	r4, r4, #482	; 0x1e2
    7bd2:	f804 6c02 	strb.w	r6, [r4, #-2]
    7bd6:	e031      	b.n	7c3c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7bd8:	f894 01f4 	ldrb.w	r0, [r4, #500]	; 0x1f4
    7bdc:	f88d 0000 	strb.w	r0, [sp]
    7be0:	9800      	ldr	r0, [sp, #0]
    7be2:	9000      	str	r0, [sp, #0]
    7be4:	f89d 0000 	ldrb.w	r0, [sp]
    7be8:	b138      	cbz	r0, 7bfa <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x23a>
    7bea:	2019      	movs	r0, #25
    7bec:	7028      	strb	r0, [r5, #0]
    7bee:	f8d4 01f6 	ldr.w	r0, [r4, #502]	; 0x1f6
    7bf2:	6068      	str	r0, [r5, #4]
    7bf4:	f884 61f4 	strb.w	r6, [r4, #500]	; 0x1f4
    7bf8:	e020      	b.n	7c3c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7bfa:	f894 01fa 	ldrb.w	r0, [r4, #506]	; 0x1fa
    7bfe:	f88d 0000 	strb.w	r0, [sp]
    7c02:	9800      	ldr	r0, [sp, #0]
    7c04:	9000      	str	r0, [sp, #0]
    7c06:	f89d 0000 	ldrb.w	r0, [sp]
    7c0a:	2800      	cmp	r0, #0
    7c0c:	f43f af30 	beq.w	7a70 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
    7c10:	706e      	strb	r6, [r5, #1]
    7c12:	2013      	movs	r0, #19
    7c14:	7028      	strb	r0, [r5, #0]
    7c16:	e007      	b.n	7c28 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x268>
    7c18:	f884 61fa 	strb.w	r6, [r4, #506]	; 0x1fa
    7c1c:	f8d4 01fc 	ldr.w	r0, [r4, #508]	; 0x1fc
    7c20:	6068      	str	r0, [r5, #4]
    7c22:	f8b4 0200 	ldrh.w	r0, [r4, #512]	; 0x200
    7c26:	8128      	strh	r0, [r5, #8]
    7c28:	f894 01fa 	ldrb.w	r0, [r4, #506]	; 0x1fa
    7c2c:	f88d 0000 	strb.w	r0, [sp]
    7c30:	9800      	ldr	r0, [sp, #0]
    7c32:	9000      	str	r0, [sp, #0]
    7c34:	f89d 0000 	ldrb.w	r0, [sp]
    7c38:	2800      	cmp	r0, #0
    7c3a:	d1ed      	bne.n	7c18 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x258>
    7c3c:	2001      	movs	r0, #1
    7c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00007c40 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>:
    7c40:	481b      	ldr	r0, [pc, #108]	; (7cb0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x70>)
    7c42:	491a      	ldr	r1, [pc, #104]	; (7cac <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x6c>)
    7c44:	6081      	str	r1, [r0, #8]
    7c46:	491b      	ldr	r1, [pc, #108]	; (7cb4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x74>)
    7c48:	6041      	str	r1, [r0, #4]
    7c4a:	491b      	ldr	r1, [pc, #108]	; (7cb8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x78>)
    7c4c:	6001      	str	r1, [r0, #0]
    7c4e:	491b      	ldr	r1, [pc, #108]	; (7cbc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x7c>)
    7c50:	6281      	str	r1, [r0, #40]	; 0x28
    7c52:	491b      	ldr	r1, [pc, #108]	; (7cc0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x80>)
    7c54:	62c1      	str	r1, [r0, #44]	; 0x2c
    7c56:	491b      	ldr	r1, [pc, #108]	; (7cc4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x84>)
    7c58:	60c1      	str	r1, [r0, #12]
    7c5a:	491b      	ldr	r1, [pc, #108]	; (7cc8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x88>)
    7c5c:	6181      	str	r1, [r0, #24]
    7c5e:	491b      	ldr	r1, [pc, #108]	; (7ccc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x8c>)
    7c60:	6301      	str	r1, [r0, #48]	; 0x30
    7c62:	491b      	ldr	r1, [pc, #108]	; (7cd0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x90>)
    7c64:	6201      	str	r1, [r0, #32]
    7c66:	491b      	ldr	r1, [pc, #108]	; (7cd4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x94>)
    7c68:	64c1      	str	r1, [r0, #76]	; 0x4c
    7c6a:	491b      	ldr	r1, [pc, #108]	; (7cd8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x98>)
    7c6c:	6481      	str	r1, [r0, #72]	; 0x48
    7c6e:	491b      	ldr	r1, [pc, #108]	; (7cdc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x9c>)
    7c70:	6441      	str	r1, [r0, #68]	; 0x44
    7c72:	491b      	ldr	r1, [pc, #108]	; (7ce0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa0>)
    7c74:	6341      	str	r1, [r0, #52]	; 0x34
    7c76:	491b      	ldr	r1, [pc, #108]	; (7ce4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa4>)
    7c78:	61c1      	str	r1, [r0, #28]
    7c7a:	481c      	ldr	r0, [pc, #112]	; (7cec <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xac>)
    7c7c:	491a      	ldr	r1, [pc, #104]	; (7ce8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa8>)
    7c7e:	6081      	str	r1, [r0, #8]
    7c80:	491b      	ldr	r1, [pc, #108]	; (7cf0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb0>)
    7c82:	61c1      	str	r1, [r0, #28]
    7c84:	491b      	ldr	r1, [pc, #108]	; (7cf4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb4>)
    7c86:	6241      	str	r1, [r0, #36]	; 0x24
    7c88:	491b      	ldr	r1, [pc, #108]	; (7cf8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb8>)
    7c8a:	62c1      	str	r1, [r0, #44]	; 0x2c
    7c8c:	491b      	ldr	r1, [pc, #108]	; (7cfc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xbc>)
    7c8e:	6101      	str	r1, [r0, #16]
    7c90:	491b      	ldr	r1, [pc, #108]	; (7d00 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc0>)
    7c92:	6141      	str	r1, [r0, #20]
    7c94:	491b      	ldr	r1, [pc, #108]	; (7d04 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc4>)
    7c96:	6441      	str	r1, [r0, #68]	; 0x44
    7c98:	6341      	str	r1, [r0, #52]	; 0x34
    7c9a:	491b      	ldr	r1, [pc, #108]	; (7d08 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc8>)
    7c9c:	6181      	str	r1, [r0, #24]
    7c9e:	491b      	ldr	r1, [pc, #108]	; (7d0c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xcc>)
    7ca0:	6301      	str	r1, [r0, #48]	; 0x30
    7ca2:	491b      	ldr	r1, [pc, #108]	; (7d10 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd0>)
    7ca4:	6481      	str	r1, [r0, #72]	; 0x48
    7ca6:	491b      	ldr	r1, [pc, #108]	; (7d14 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd4>)
    7ca8:	64c1      	str	r1, [r0, #76]	; 0x4c
    7caa:	4770      	bx	lr
    7cac:	00009295 	.word	0x00009295
    7cb0:	20000140 	.word	0x20000140
    7cb4:	00008bfd 	.word	0x00008bfd
    7cb8:	00008c59 	.word	0x00008c59
    7cbc:	00008fbd 	.word	0x00008fbd
    7cc0:	00009001 	.word	0x00009001
    7cc4:	00008d05 	.word	0x00008d05
    7cc8:	0000926d 	.word	0x0000926d
    7ccc:	000093b1 	.word	0x000093b1
    7cd0:	00008db1 	.word	0x00008db1
    7cd4:	00008f91 	.word	0x00008f91
    7cd8:	00008f65 	.word	0x00008f65
    7cdc:	0000922d 	.word	0x0000922d
    7ce0:	0000925d 	.word	0x0000925d
    7ce4:	000092c9 	.word	0x000092c9
    7ce8:	00009729 	.word	0x00009729
    7cec:	200001a4 	.word	0x200001a4
    7cf0:	00009751 	.word	0x00009751
    7cf4:	00009511 	.word	0x00009511
    7cf8:	000095e9 	.word	0x000095e9
    7cfc:	000094e5 	.word	0x000094e5
    7d00:	00009691 	.word	0x00009691
    7d04:	0000966d 	.word	0x0000966d
    7d08:	000096b5 	.word	0x000096b5
    7d0c:	000097a9 	.word	0x000097a9
    7d10:	000095a1 	.word	0x000095a1
    7d14:	000095d1 	.word	0x000095d1

00007d18 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>:
    7d18:	4806      	ldr	r0, [pc, #24]	; (7d34 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x1c>)
    7d1a:	4905      	ldr	r1, [pc, #20]	; (7d30 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x18>)
    7d1c:	6581      	str	r1, [r0, #88]	; 0x58
    7d1e:	4906      	ldr	r1, [pc, #24]	; (7d38 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x20>)
    7d20:	6601      	str	r1, [r0, #96]	; 0x60
    7d22:	4807      	ldr	r0, [pc, #28]	; (7d40 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x28>)
    7d24:	4905      	ldr	r1, [pc, #20]	; (7d3c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x24>)
    7d26:	6581      	str	r1, [r0, #88]	; 0x58
    7d28:	4906      	ldr	r1, [pc, #24]	; (7d44 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2c>)
    7d2a:	65c1      	str	r1, [r0, #92]	; 0x5c
    7d2c:	4770      	bx	lr
    7d2e:	0000      	.short	0x0000
    7d30:	00009021 	.word	0x00009021
    7d34:	20000140 	.word	0x20000140
    7d38:	000090e9 	.word	0x000090e9
    7d3c:	00009615 	.word	0x00009615
    7d40:	200001a4 	.word	0x200001a4
    7d44:	00009645 	.word	0x00009645

00007d48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>:
    7d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7d4c:	2701      	movs	r7, #1
    7d4e:	4c73      	ldr	r4, [pc, #460]	; (7f1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d4>)
    7d50:	2500      	movs	r5, #0
    7d52:	f367 0107 	bfi	r1, r7, #0, #8
    7d56:	8065      	strh	r5, [r4, #2]
    7d58:	7065      	strb	r5, [r4, #1]
    7d5a:	7025      	strb	r5, [r4, #0]
    7d5c:	60a0      	str	r0, [r4, #8]
    7d5e:	4689      	mov	r9, r1
    7d60:	4680      	mov	r8, r0
    7d62:	f880 70fb 	strb.w	r7, [r0, #251]	; 0xfb
    7d66:	8800      	ldrh	r0, [r0, #0]
    7d68:	f7fc fb5e 	bl	4428 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    7d6c:	b180      	cbz	r0, 7d90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x48>
    7d6e:	68a0      	ldr	r0, [r4, #8]
    7d70:	8800      	ldrh	r0, [r0, #0]
    7d72:	f7fc fdad 	bl	48d0 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    7d76:	68a0      	ldr	r0, [r4, #8]
    7d78:	8800      	ldrh	r0, [r0, #0]
    7d7a:	f7fc fd51 	bl	4820 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    7d7e:	68a0      	ldr	r0, [r4, #8]
    7d80:	f8b0 10f2 	ldrh.w	r1, [r0, #242]	; 0xf2
    7d84:	b1a9      	cbz	r1, 7db2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a>
    7d86:	3068      	adds	r0, #104	; 0x68
    7d88:	f006 f939 	bl	dffe <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    7d8c:	b128      	cbz	r0, 7d9a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x52>
    7d8e:	e010      	b.n	7db2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a>
    7d90:	f640 31a9 	movw	r1, #2985	; 0xba9
    7d94:	2031      	movs	r0, #49	; 0x31
    7d96:	f7fb fefd 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7d9a:	68a0      	ldr	r0, [r4, #8]
    7d9c:	f890 1170 	ldrb.w	r1, [r0, #368]	; 0x170
    7da0:	b139      	cbz	r1, 7db2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a>
    7da2:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
    7da6:	2301      	movs	r3, #1
    7da8:	4619      	mov	r1, r3
    7daa:	3068      	adds	r0, #104	; 0x68
    7dac:	f004 fe62 	bl	ca74 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    7db0:	b180      	cbz	r0, 7dd4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8c>
    7db2:	68a0      	ldr	r0, [r4, #8]
    7db4:	3068      	adds	r0, #104	; 0x68
    7db6:	f006 f922 	bl	dffe <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    7dba:	b128      	cbz	r0, 7dc8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80>
    7dbc:	68a0      	ldr	r0, [r4, #8]
    7dbe:	f890 00e4 	ldrb.w	r0, [r0, #228]	; 0xe4
    7dc2:	bf00      	nop
    7dc4:	f000 fb88 	bl	84d8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4d8>
    7dc8:	68a0      	ldr	r0, [r4, #8]
    7dca:	f890 10fd 	ldrb.w	r1, [r0, #253]	; 0xfd
    7dce:	b189      	cbz	r1, 7df4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xac>
    7dd0:	80a5      	strh	r5, [r4, #4]
    7dd2:	e01e      	b.n	7e12 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca>
    7dd4:	68a0      	ldr	r0, [r4, #8]
    7dd6:	f8a0 50a0 	strh.w	r5, [r0, #160]	; 0xa0
    7dda:	f890 1171 	ldrb.w	r1, [r0, #369]	; 0x171
    7dde:	f880 10e6 	strb.w	r1, [r0, #230]	; 0xe6
    7de2:	2100      	movs	r1, #0
    7de4:	2002      	movs	r0, #2
    7de6:	f000 fe03 	bl	89f0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9f0>
    7dea:	68a0      	ldr	r0, [r4, #8]
    7dec:	f880 50fa 	strb.w	r5, [r0, #250]	; 0xfa
    7df0:	2002      	movs	r0, #2
    7df2:	e7e7      	b.n	7dc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7c>
    7df4:	f890 11b0 	ldrb.w	r1, [r0, #432]	; 0x1b0
    7df8:	f88d 1000 	strb.w	r1, [sp]
    7dfc:	9900      	ldr	r1, [sp, #0]
    7dfe:	9100      	str	r1, [sp, #0]
    7e00:	f89d 1000 	ldrb.w	r1, [sp]
    7e04:	b919      	cbnz	r1, 7e0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc6>
    7e06:	8b81      	ldrh	r1, [r0, #28]
    7e08:	8902      	ldrh	r2, [r0, #8]
    7e0a:	4291      	cmp	r1, r2
    7e0c:	d800      	bhi.n	7e10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc8>
    7e0e:	8901      	ldrh	r1, [r0, #8]
    7e10:	80a1      	strh	r1, [r4, #4]
    7e12:	f830 1ff6 	ldrh.w	r1, [r0, #246]!
    7e16:	1e49      	subs	r1, r1, #1
    7e18:	b28e      	uxth	r6, r1
    7e1a:	f830 1f02 	ldrh.w	r1, [r0, #2]!
    7e1e:	4431      	add	r1, r6
    7e20:	f820 195c 	strh.w	r1, [r0], #-92
    7e24:	8801      	ldrh	r1, [r0, #0]
    7e26:	4431      	add	r1, r6
    7e28:	8001      	strh	r1, [r0, #0]
    7e2a:	f001 fceb 	bl	9804 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1804>
    7e2e:	b120      	cbz	r0, 7e3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf2>
    7e30:	68a0      	ldr	r0, [r4, #8]
    7e32:	f850 1f90 	ldr.w	r1, [r0, #144]!
    7e36:	4431      	add	r1, r6
    7e38:	6001      	str	r1, [r0, #0]
    7e3a:	68a0      	ldr	r0, [r4, #8]
    7e3c:	f8b0 10f2 	ldrh.w	r1, [r0, #242]	; 0xf2
    7e40:	2901      	cmp	r1, #1
    7e42:	d802      	bhi.n	7e4a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x102>
    7e44:	1c49      	adds	r1, r1, #1
    7e46:	f8a0 10f2 	strh.w	r1, [r0, #242]	; 0xf2
    7e4a:	b10e      	cbz	r6, 7e50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x108>
    7e4c:	f880 5104 	strb.w	r5, [r0, #260]	; 0x104
    7e50:	f880 50fa 	strb.w	r5, [r0, #250]	; 0xfa
    7e54:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    7e58:	290b      	cmp	r1, #11
    7e5a:	d001      	beq.n	7e60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x118>
    7e5c:	290c      	cmp	r1, #12
    7e5e:	d118      	bne.n	7e92 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14a>
    7e60:	f8b0 206c 	ldrh.w	r2, [r0, #108]	; 0x6c
    7e64:	f8b0 318c 	ldrh.w	r3, [r0, #396]	; 0x18c
    7e68:	1ad2      	subs	r2, r2, r3
    7e6a:	b212      	sxth	r2, r2
    7e6c:	2a00      	cmp	r2, #0
    7e6e:	db10      	blt.n	7e92 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14a>
    7e70:	f8d0 118e 	ldr.w	r1, [r0, #398]	; 0x18e
    7e74:	f8c0 107e 	str.w	r1, [r0, #126]	; 0x7e
    7e78:	f890 1192 	ldrb.w	r1, [r0, #402]	; 0x192
    7e7c:	f880 1082 	strb.w	r1, [r0, #130]	; 0x82
    7e80:	2103      	movs	r1, #3
    7e82:	f7fd fd99 	bl	59b8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    7e86:	68a0      	ldr	r0, [r4, #8]
    7e88:	f880 5076 	strb.w	r5, [r0, #118]	; 0x76
    7e8c:	f880 70b6 	strb.w	r7, [r0, #182]	; 0xb6
    7e90:	e024      	b.n	7edc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    7e92:	2924      	cmp	r1, #36	; 0x24
    7e94:	d10f      	bne.n	7eb6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16e>
    7e96:	f8b0 106c 	ldrh.w	r1, [r0, #108]	; 0x6c
    7e9a:	f8b0 218c 	ldrh.w	r2, [r0, #396]	; 0x18c
    7e9e:	1a89      	subs	r1, r1, r2
    7ea0:	b209      	sxth	r1, r1
    7ea2:	2900      	cmp	r1, #0
    7ea4:	db07      	blt.n	7eb6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16e>
    7ea6:	f000 fe4f 	bl	8b48 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb48>
    7eaa:	68a0      	ldr	r0, [r4, #8]
    7eac:	f880 5076 	strb.w	r5, [r0, #118]	; 0x76
    7eb0:	f880 51a6 	strb.w	r5, [r0, #422]	; 0x1a6
    7eb4:	e012      	b.n	7edc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    7eb6:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
    7eba:	2924      	cmp	r1, #36	; 0x24
    7ebc:	d001      	beq.n	7ec2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17a>
    7ebe:	2925      	cmp	r1, #37	; 0x25
    7ec0:	d10c      	bne.n	7edc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    7ec2:	f8b0 106c 	ldrh.w	r1, [r0, #108]	; 0x6c
    7ec6:	f8b0 018c 	ldrh.w	r0, [r0, #396]	; 0x18c
    7eca:	1a08      	subs	r0, r1, r0
    7ecc:	b200      	sxth	r0, r0
    7ece:	2800      	cmp	r0, #0
    7ed0:	db04      	blt.n	7edc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    7ed2:	f000 fe39 	bl	8b48 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb48>
    7ed6:	68a0      	ldr	r0, [r4, #8]
    7ed8:	f880 5075 	strb.w	r5, [r0, #117]	; 0x75
    7edc:	68a0      	ldr	r0, [r4, #8]
    7ede:	4601      	mov	r1, r0
    7ee0:	f8b0 20f6 	ldrh.w	r2, [r0, #246]	; 0xf6
    7ee4:	3068      	adds	r0, #104	; 0x68
    7ee6:	f004 ff9d 	bl	ce24 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    7eea:	480d      	ldr	r0, [pc, #52]	; (7f20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d8>)
    7eec:	9000      	str	r0, [sp, #0]
    7eee:	4b0d      	ldr	r3, [pc, #52]	; (7f24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dc>)
    7ef0:	4a0d      	ldr	r2, [pc, #52]	; (7f28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e0>)
    7ef2:	4641      	mov	r1, r8
    7ef4:	4648      	mov	r0, r9
    7ef6:	f7fc fda1 	bl	4a3c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    7efa:	68a0      	ldr	r0, [r4, #8]
    7efc:	2301      	movs	r3, #1
    7efe:	2105      	movs	r1, #5
    7f00:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    7f04:	3068      	adds	r0, #104	; 0x68
    7f06:	f004 fdb5 	bl	ca74 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    7f0a:	2800      	cmp	r0, #0
    7f0c:	d003      	beq.n	7f16 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ce>
    7f0e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7f12:	f7fc bd8d 	b.w	4a30 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    7f16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7f1a:	0000      	.short	0x0000
    7f1c:	2000012c 	.word	0x2000012c
    7f20:	00008689 	.word	0x00008689
    7f24:	000081a1 	.word	0x000081a1
    7f28:	00008a95 	.word	0x00008a95
    7f2c:	b570      	push	{r4, r5, r6, lr}
    7f2e:	4c0f      	ldr	r4, [pc, #60]	; (7f6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x224>)
    7f30:	68a5      	ldr	r5, [r4, #8]
    7f32:	f895 1075 	ldrb.w	r1, [r5, #117]	; 0x75
    7f36:	2920      	cmp	r1, #32
    7f38:	d002      	beq.n	7f40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f8>
    7f3a:	2926      	cmp	r1, #38	; 0x26
    7f3c:	d003      	beq.n	7f46 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fe>
    7f3e:	e011      	b.n	7f64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    7f40:	f000 fe38 	bl	8bb4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbb4>
    7f44:	e008      	b.n	7f58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x210>
    7f46:	f895 2076 	ldrb.w	r2, [r5, #118]	; 0x76
    7f4a:	2301      	movs	r3, #1
    7f4c:	210b      	movs	r1, #11
    7f4e:	f105 0068 	add.w	r0, r5, #104	; 0x68
    7f52:	f004 fd8f 	bl	ca74 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    7f56:	b138      	cbz	r0, 7f68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x220>
    7f58:	68a1      	ldr	r1, [r4, #8]
    7f5a:	2000      	movs	r0, #0
    7f5c:	f881 0075 	strb.w	r0, [r1, #117]	; 0x75
    7f60:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    7f64:	2000      	movs	r0, #0
    7f66:	bd70      	pop	{r4, r5, r6, pc}
    7f68:	202a      	movs	r0, #42	; 0x2a
    7f6a:	e7e9      	b.n	7f40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f8>
    7f6c:	2000012c 	.word	0x2000012c
    7f70:	4804      	ldr	r0, [pc, #16]	; (7f84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23c>)
    7f72:	2100      	movs	r1, #0
    7f74:	6880      	ldr	r0, [r0, #8]
    7f76:	f820 1fa8 	strh.w	r1, [r0, #168]!
    7f7a:	7881      	ldrb	r1, [r0, #2]
    7f7c:	1c49      	adds	r1, r1, #1
    7f7e:	7081      	strb	r1, [r0, #2]
    7f80:	4770      	bx	lr
    7f82:	0000      	.short	0x0000
    7f84:	2000012c 	.word	0x2000012c
    7f88:	4807      	ldr	r0, [pc, #28]	; (7fa8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x260>)
    7f8a:	b510      	push	{r4, lr}
    7f8c:	6881      	ldr	r1, [r0, #8]
    7f8e:	f811 0faa 	ldrb.w	r0, [r1, #170]!
    7f92:	1e40      	subs	r0, r0, #1
    7f94:	b240      	sxtb	r0, r0
    7f96:	7008      	strb	r0, [r1, #0]
    7f98:	2800      	cmp	r0, #0
    7f9a:	da04      	bge.n	7fa6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x25e>
    7f9c:	f240 118f 	movw	r1, #399	; 0x18f
    7fa0:	2031      	movs	r0, #49	; 0x31
    7fa2:	f7fb fdf7 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7fa6:	bd10      	pop	{r4, pc}
    7fa8:	2000012c 	.word	0x2000012c
    7fac:	4917      	ldr	r1, [pc, #92]	; (800c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc>)
    7fae:	b510      	push	{r4, lr}
    7fb0:	6889      	ldr	r1, [r1, #8]
    7fb2:	f891 2076 	ldrb.w	r2, [r1, #118]	; 0x76
    7fb6:	b1b8      	cbz	r0, 7fe8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2a0>
    7fb8:	2a10      	cmp	r2, #16
    7fba:	d006      	beq.n	7fca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x282>
    7fbc:	2a14      	cmp	r2, #20
    7fbe:	d007      	beq.n	7fd0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x288>
    7fc0:	2a15      	cmp	r2, #21
    7fc2:	d008      	beq.n	7fd6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x28e>
    7fc4:	2a1b      	cmp	r2, #27
    7fc6:	d11c      	bne.n	8002 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2>
    7fc8:	e008      	b.n	7fdc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x294>
    7fca:	2101      	movs	r1, #1
    7fcc:	200b      	movs	r0, #11
    7fce:	e007      	b.n	7fe0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x298>
    7fd0:	f001 fa4a 	bl	9468 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1468>
    7fd4:	e006      	b.n	7fe4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x29c>
    7fd6:	f000 fd29 	bl	8a2c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa2c>
    7fda:	e003      	b.n	7fe4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x29c>
    7fdc:	2101      	movs	r1, #1
    7fde:	2006      	movs	r0, #6
    7fe0:	f000 fd06 	bl	89f0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9f0>
    7fe4:	2001      	movs	r0, #1
    7fe6:	bd10      	pop	{r4, pc}
    7fe8:	2a21      	cmp	r2, #33	; 0x21
    7fea:	d10a      	bne.n	8002 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2>
    7fec:	f891 01a6 	ldrb.w	r0, [r1, #422]	; 0x1a6
    7ff0:	2802      	cmp	r0, #2
    7ff2:	d008      	beq.n	8006 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6>
    7ff4:	f891 01a6 	ldrb.w	r0, [r1, #422]	; 0x1a6
    7ff8:	2801      	cmp	r0, #1
    7ffa:	d102      	bne.n	8002 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2>
    7ffc:	f891 01a7 	ldrb.w	r0, [r1, #423]	; 0x1a7
    8000:	b108      	cbz	r0, 8006 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6>
    8002:	2000      	movs	r0, #0
    8004:	bd10      	pop	{r4, pc}
    8006:	2101      	movs	r1, #1
    8008:	2017      	movs	r0, #23
    800a:	e7e9      	b.n	7fe0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x298>
    800c:	2000012c 	.word	0x2000012c
    8010:	b510      	push	{r4, lr}
    8012:	bbe8      	cbnz	r0, 8090 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x90>
    8014:	4c31      	ldr	r4, [pc, #196]	; (80dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdc>)
    8016:	68a0      	ldr	r0, [r4, #8]
    8018:	f890 1077 	ldrb.w	r1, [r0, #119]	; 0x77
    801c:	07ca      	lsls	r2, r1, #31
    801e:	d002      	beq.n	8026 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x26>
    8020:	2101      	movs	r1, #1
    8022:	2009      	movs	r0, #9
    8024:	e052      	b.n	80cc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcc>
    8026:	078a      	lsls	r2, r1, #30
    8028:	d50a      	bpl.n	8040 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x40>
    802a:	2101      	movs	r1, #1
    802c:	200c      	movs	r0, #12
    802e:	f000 fcdf 	bl	89f0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9f0>
    8032:	68a0      	ldr	r0, [r4, #8]
    8034:	f810 1fae 	ldrb.w	r1, [r0, #174]!
    8038:	f041 0101 	orr.w	r1, r1, #1
    803c:	7001      	strb	r1, [r0, #0]
    803e:	e047      	b.n	80d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd0>
    8040:	074a      	lsls	r2, r1, #29
    8042:	d502      	bpl.n	804a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4a>
    8044:	2101      	movs	r1, #1
    8046:	2013      	movs	r0, #19
    8048:	e040      	b.n	80cc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcc>
    804a:	070a      	lsls	r2, r1, #28
    804c:	d505      	bpl.n	805a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5a>
    804e:	f810 1fe1 	ldrb.w	r1, [r0, #225]!
    8052:	7141      	strb	r1, [r0, #5]
    8054:	2101      	movs	r1, #1
    8056:	2007      	movs	r0, #7
    8058:	e038      	b.n	80cc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcc>
    805a:	f011 0f30 	tst.w	r1, #48	; 0x30
    805e:	d03b      	beq.n	80d8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd8>
    8060:	f890 119d 	ldrb.w	r1, [r0, #413]	; 0x19d
    8064:	b9a1      	cbnz	r1, 8090 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x90>
    8066:	f890 119c 	ldrb.w	r1, [r0, #412]	; 0x19c
    806a:	b1e1      	cbz	r1, 80a6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa6>
    806c:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    8070:	2924      	cmp	r1, #36	; 0x24
    8072:	d02f      	beq.n	80d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd4>
    8074:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
    8078:	2924      	cmp	r1, #36	; 0x24
    807a:	d02b      	beq.n	80d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd4>
    807c:	f05f 0300 	movs.w	r3, #0
    8080:	f500 72c7 	add.w	r2, r0, #398	; 0x18e
    8084:	f500 71ce 	add.w	r1, r0, #412	; 0x19c
    8088:	f005 f92a 	bl	d2e0 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    808c:	68a1      	ldr	r1, [r4, #8]
    808e:	e000      	b.n	8092 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x92>
    8090:	e022      	b.n	80d8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd8>
    8092:	f811 0f77 	ldrb.w	r0, [r1, #119]!
    8096:	f020 0020 	bic.w	r0, r0, #32
    809a:	f040 0010 	orr.w	r0, r0, #16
    809e:	7008      	strb	r0, [r1, #0]
    80a0:	2000      	movs	r0, #0
    80a2:	f881 0125 	strb.w	r0, [r1, #293]	; 0x125
    80a6:	68a0      	ldr	r0, [r4, #8]
    80a8:	f890 1077 	ldrb.w	r1, [r0, #119]	; 0x77
    80ac:	06c9      	lsls	r1, r1, #27
    80ae:	d513      	bpl.n	80d8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd8>
    80b0:	f005 f931 	bl	d316 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    80b4:	f000 f906 	bl	82c4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2c4>
    80b8:	68a1      	ldr	r1, [r4, #8]
    80ba:	f101 0024 	add.w	r0, r1, #36	; 0x24
    80be:	8bc2      	ldrh	r2, [r0, #30]
    80c0:	f821 2fe6 	strh.w	r2, [r1, #230]!
    80c4:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    80c6:	8048      	strh	r0, [r1, #2]
    80c8:	2101      	movs	r1, #1
    80ca:	2015      	movs	r0, #21
    80cc:	f000 fc90 	bl	89f0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9f0>
    80d0:	2001      	movs	r0, #1
    80d2:	bd10      	pop	{r4, pc}
    80d4:	2301      	movs	r3, #1
    80d6:	e7d3      	b.n	8080 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x80>
    80d8:	2000      	movs	r0, #0
    80da:	bd10      	pop	{r4, pc}
    80dc:	2000012c 	.word	0x2000012c
    80e0:	b570      	push	{r4, r5, r6, lr}
    80e2:	460d      	mov	r5, r1
    80e4:	4606      	mov	r6, r0
    80e6:	f004 ff48 	bl	cf7a <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    80ea:	4604      	mov	r4, r0
    80ec:	4630      	mov	r0, r6
    80ee:	f004 ff50 	bl	cf92 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    80f2:	4629      	mov	r1, r5
    80f4:	f000 f81e 	bl	8134 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x134>
    80f8:	b1b8      	cbz	r0, 812a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x12a>
    80fa:	4620      	mov	r0, r4
    80fc:	f004 fd53 	bl	cba6 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    8100:	0001      	movs	r1, r0
    8102:	d00d      	beq.n	8120 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x120>
    8104:	480a      	ldr	r0, [pc, #40]	; (8130 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x130>)
    8106:	6880      	ldr	r0, [r0, #8]
    8108:	f890 2063 	ldrb.w	r2, [r0, #99]	; 0x63
    810c:	428a      	cmp	r2, r1
    810e:	d007      	beq.n	8120 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x120>
    8110:	f890 11a6 	ldrb.w	r1, [r0, #422]	; 0x1a6
    8114:	2901      	cmp	r1, #1
    8116:	d005      	beq.n	8124 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x124>
    8118:	f890 005f 	ldrb.w	r0, [r0, #95]	; 0x5f
    811c:	4220      	tst	r0, r4
    811e:	d004      	beq.n	812a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x12a>
    8120:	2001      	movs	r0, #1
    8122:	bd70      	pop	{r4, r5, r6, pc}
    8124:	f890 01a9 	ldrb.w	r0, [r0, #425]	; 0x1a9
    8128:	e7f8      	b.n	811c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x11c>
    812a:	2000      	movs	r0, #0
    812c:	bd70      	pop	{r4, r5, r6, pc}
    812e:	0000      	.short	0x0000
    8130:	2000012c 	.word	0x2000012c
    8134:	b570      	push	{r4, r5, r6, lr}
    8136:	460d      	mov	r5, r1
    8138:	4604      	mov	r4, r0
    813a:	f004 fd34 	bl	cba6 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    813e:	b350      	cbz	r0, 8196 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x196>
    8140:	4916      	ldr	r1, [pc, #88]	; (819c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x19c>)
    8142:	6889      	ldr	r1, [r1, #8]
    8144:	f891 2062 	ldrb.w	r2, [r1, #98]	; 0x62
    8148:	4282      	cmp	r2, r0
    814a:	d024      	beq.n	8196 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x196>
    814c:	f891 31a6 	ldrb.w	r3, [r1, #422]	; 0x1a6
    8150:	2b01      	cmp	r3, #1
    8152:	d005      	beq.n	8160 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x160>
    8154:	f891 305e 	ldrb.w	r3, [r1, #94]	; 0x5e
    8158:	4223      	tst	r3, r4
    815a:	d013      	beq.n	8184 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x184>
    815c:	b11d      	cbz	r5, 8166 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x166>
    815e:	e01a      	b.n	8196 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x196>
    8160:	f891 31a8 	ldrb.w	r3, [r1, #424]	; 0x1a8
    8164:	e7f8      	b.n	8158 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x158>
    8166:	f891 105b 	ldrb.w	r1, [r1, #91]	; 0x5b
    816a:	4221      	tst	r1, r4
    816c:	d113      	bne.n	8196 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x196>
    816e:	b15a      	cbz	r2, 8188 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x188>
    8170:	2a04      	cmp	r2, #4
    8172:	d00e      	beq.n	8192 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x192>
    8174:	2804      	cmp	r0, #4
    8176:	d00c      	beq.n	8192 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x192>
    8178:	2a08      	cmp	r2, #8
    817a:	d00a      	beq.n	8192 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x192>
    817c:	2808      	cmp	r0, #8
    817e:	d008      	beq.n	8192 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x192>
    8180:	4282      	cmp	r2, r0
    8182:	d908      	bls.n	8196 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x196>
    8184:	2000      	movs	r0, #0
    8186:	bd70      	pop	{r4, r5, r6, pc}
    8188:	f240 1165 	movw	r1, #357	; 0x165
    818c:	2006      	movs	r0, #6
    818e:	f7fb fd01 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8192:	4282      	cmp	r2, r0
    8194:	d3f6      	bcc.n	8184 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x184>
    8196:	2001      	movs	r0, #1
    8198:	bd70      	pop	{r4, r5, r6, pc}
    819a:	0000      	.short	0x0000
    819c:	2000012c 	.word	0x2000012c
    81a0:	490c      	ldr	r1, [pc, #48]	; (81d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d4>)
    81a2:	4602      	mov	r2, r0
    81a4:	7848      	ldrb	r0, [r1, #1]
    81a6:	b998      	cbnz	r0, 81d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d0>
    81a8:	4608      	mov	r0, r1
    81aa:	6880      	ldr	r0, [r0, #8]
    81ac:	b142      	cbz	r2, 81c0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c0>
    81ae:	7889      	ldrb	r1, [r1, #2]
    81b0:	0709      	lsls	r1, r1, #28
    81b2:	d503      	bpl.n	81bc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1bc>
    81b4:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    81b8:	2808      	cmp	r0, #8
    81ba:	d009      	beq.n	81d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d0>
    81bc:	2001      	movs	r0, #1
    81be:	4770      	bx	lr
    81c0:	f100 0124 	add.w	r1, r0, #36	; 0x24
    81c4:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    81c6:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
    81c8:	428a      	cmp	r2, r1
    81ca:	d801      	bhi.n	81d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d0>
    81cc:	f7fe bf06 	b.w	6fdc <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>
    81d0:	2000      	movs	r0, #0
    81d2:	4770      	bx	lr
    81d4:	2000012c 	.word	0x2000012c
    81d8:	b570      	push	{r4, r5, r6, lr}
    81da:	4c39      	ldr	r4, [pc, #228]	; (82c0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2c0>)
    81dc:	4605      	mov	r5, r0
    81de:	68a0      	ldr	r0, [r4, #8]
    81e0:	3068      	adds	r0, #104	; 0x68
    81e2:	f005 ff0c 	bl	dffe <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    81e6:	2800      	cmp	r0, #0
    81e8:	d169      	bne.n	82be <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2be>
    81ea:	2d00      	cmp	r5, #0
    81ec:	d167      	bne.n	82be <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2be>
    81ee:	68a0      	ldr	r0, [r4, #8]
    81f0:	2301      	movs	r3, #1
    81f2:	4619      	mov	r1, r3
    81f4:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
    81f8:	3068      	adds	r0, #104	; 0x68
    81fa:	f004 fc3b 	bl	ca74 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    81fe:	2800      	cmp	r0, #0
    8200:	d15d      	bne.n	82be <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2be>
    8202:	68a0      	ldr	r0, [r4, #8]
    8204:	f890 1170 	ldrb.w	r1, [r0, #368]	; 0x170
    8208:	b149      	cbz	r1, 821e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x21e>
    820a:	2100      	movs	r1, #0
    820c:	f8a0 10a0 	strh.w	r1, [r0, #160]	; 0xa0
    8210:	f890 1171 	ldrb.w	r1, [r0, #369]	; 0x171
    8214:	f880 10e6 	strb.w	r1, [r0, #230]	; 0xe6
    8218:	2100      	movs	r1, #0
    821a:	2002      	movs	r0, #2
    821c:	e045      	b.n	82aa <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2aa>
    821e:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    8222:	2301      	movs	r3, #1
    8224:	2104      	movs	r1, #4
    8226:	3068      	adds	r0, #104	; 0x68
    8228:	f004 fc24 	bl	ca74 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    822c:	4605      	mov	r5, r0
    822e:	f7ff feef 	bl	8010 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x10>
    8232:	2800      	cmp	r0, #0
    8234:	d143      	bne.n	82be <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2be>
    8236:	4628      	mov	r0, r5
    8238:	f7ff feb8 	bl	7fac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    823c:	2800      	cmp	r0, #0
    823e:	d13e      	bne.n	82be <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2be>
    8240:	68a0      	ldr	r0, [r4, #8]
    8242:	2301      	movs	r3, #1
    8244:	2100      	movs	r1, #0
    8246:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    824a:	3068      	adds	r0, #104	; 0x68
    824c:	f004 fc12 	bl	ca74 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8250:	b178      	cbz	r0, 8272 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x272>
    8252:	68a0      	ldr	r0, [r4, #8]
    8254:	2301      	movs	r3, #1
    8256:	2104      	movs	r1, #4
    8258:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    825c:	3068      	adds	r0, #104	; 0x68
    825e:	f004 fc09 	bl	ca74 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8262:	b930      	cbnz	r0, 8272 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x272>
    8264:	68a0      	ldr	r0, [r4, #8]
    8266:	f890 009a 	ldrb.w	r0, [r0, #154]	; 0x9a
    826a:	b110      	cbz	r0, 8272 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x272>
    826c:	2100      	movs	r1, #0
    826e:	2012      	movs	r0, #18
    8270:	e01b      	b.n	82aa <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2aa>
    8272:	68a0      	ldr	r0, [r4, #8]
    8274:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
    8278:	290a      	cmp	r1, #10
    827a:	d01a      	beq.n	82b2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2b2>
    827c:	2d00      	cmp	r5, #0
    827e:	d11e      	bne.n	82be <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2be>
    8280:	f000 fb16 	bl	88b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8b0>
    8284:	2800      	cmp	r0, #0
    8286:	d11a      	bne.n	82be <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2be>
    8288:	68a0      	ldr	r0, [r4, #8]
    828a:	2301      	movs	r3, #1
    828c:	2100      	movs	r1, #0
    828e:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    8292:	3068      	adds	r0, #104	; 0x68
    8294:	f004 fbee 	bl	ca74 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8298:	2800      	cmp	r0, #0
    829a:	d010      	beq.n	82be <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2be>
    829c:	68a0      	ldr	r0, [r4, #8]
    829e:	f890 0184 	ldrb.w	r0, [r0, #388]	; 0x184
    82a2:	2800      	cmp	r0, #0
    82a4:	d00b      	beq.n	82be <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2be>
    82a6:	2100      	movs	r1, #0
    82a8:	20ff      	movs	r0, #255	; 0xff
    82aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    82ae:	f000 bb9f 	b.w	89f0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9f0>
    82b2:	f810 1fe2 	ldrb.w	r1, [r0, #226]!
    82b6:	7101      	strb	r1, [r0, #4]
    82b8:	2100      	movs	r1, #0
    82ba:	2007      	movs	r0, #7
    82bc:	e7f5      	b.n	82aa <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2aa>
    82be:	bd70      	pop	{r4, r5, r6, pc}
    82c0:	2000012c 	.word	0x2000012c
    82c4:	480a      	ldr	r0, [pc, #40]	; (82f0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2f0>)
    82c6:	b510      	push	{r4, lr}
    82c8:	6881      	ldr	r1, [r0, #8]
    82ca:	f891 0058 	ldrb.w	r0, [r1, #88]	; 0x58
    82ce:	2801      	cmp	r0, #1
    82d0:	d009      	beq.n	82e6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2e6>
    82d2:	8808      	ldrh	r0, [r1, #0]
    82d4:	f501 72e9 	add.w	r2, r1, #466	; 0x1d2
    82d8:	3124      	adds	r1, #36	; 0x24
    82da:	f004 ffdd 	bl	d298 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    82de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    82e2:	f001 bbb3 	b.w	9a4c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    82e6:	2002      	movs	r0, #2
    82e8:	f881 0058 	strb.w	r0, [r1, #88]	; 0x58
    82ec:	bd10      	pop	{r4, pc}
    82ee:	0000      	.short	0x0000
    82f0:	2000012c 	.word	0x2000012c
    82f4:	b570      	push	{r4, r5, r6, lr}
    82f6:	4c25      	ldr	r4, [pc, #148]	; (838c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x38c>)
    82f8:	0005      	movs	r5, r0
    82fa:	d12f      	bne.n	835c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x35c>
    82fc:	f000 f8a4 	bl	8448 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x448>
    8300:	f000 f848 	bl	8394 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x394>
    8304:	0005      	movs	r5, r0
    8306:	d129      	bne.n	835c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x35c>
    8308:	8860      	ldrh	r0, [r4, #2]
    830a:	0741      	lsls	r1, r0, #29
    830c:	d506      	bpl.n	831c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x31c>
    830e:	68a1      	ldr	r1, [r4, #8]
    8310:	f891 1078 	ldrb.w	r1, [r1, #120]	; 0x78
    8314:	2907      	cmp	r1, #7
    8316:	d101      	bne.n	831c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x31c>
    8318:	2101      	movs	r1, #1
    831a:	7021      	strb	r1, [r4, #0]
    831c:	0780      	lsls	r0, r0, #30
    831e:	d512      	bpl.n	8346 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x346>
    8320:	68e0      	ldr	r0, [r4, #12]
    8322:	78c0      	ldrb	r0, [r0, #3]
    8324:	2819      	cmp	r0, #25
    8326:	d205      	bcs.n	8334 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x334>
    8328:	4919      	ldr	r1, [pc, #100]	; (8390 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x390>)
    832a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    832e:	b109      	cbz	r1, 8334 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x334>
    8330:	4788      	blx	r1
    8332:	e008      	b.n	8346 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x346>
    8334:	28ff      	cmp	r0, #255	; 0xff
    8336:	d004      	beq.n	8342 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x342>
    8338:	f240 713c 	movw	r1, #1852	; 0x73c
    833c:	2031      	movs	r0, #49	; 0x31
    833e:	f7fb fc29 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8342:	f001 f8c3 	bl	94cc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14cc>
    8346:	78a0      	ldrb	r0, [r4, #2]
    8348:	06c0      	lsls	r0, r0, #27
    834a:	d507      	bpl.n	835c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x35c>
    834c:	68a0      	ldr	r0, [r4, #8]
    834e:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    8352:	290b      	cmp	r1, #11
    8354:	d102      	bne.n	835c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x35c>
    8356:	210c      	movs	r1, #12
    8358:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
    835c:	7860      	ldrb	r0, [r4, #1]
    835e:	0700      	lsls	r0, r0, #28
    8360:	d511      	bpl.n	8386 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x386>
    8362:	68a0      	ldr	r0, [r4, #8]
    8364:	2301      	movs	r3, #1
    8366:	2105      	movs	r1, #5
    8368:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    836c:	3068      	adds	r0, #104	; 0x68
    836e:	f004 fb81 	bl	ca74 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8372:	b128      	cbz	r0, 8380 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x380>
    8374:	68a1      	ldr	r1, [r4, #8]
    8376:	2508      	movs	r5, #8
    8378:	2000      	movs	r0, #0
    837a:	f881 01bc 	strb.w	r0, [r1, #444]	; 0x1bc
    837e:	e002      	b.n	8386 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x386>
    8380:	2000      	movs	r0, #0
    8382:	f7fc fc15 	bl	4bb0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    8386:	4628      	mov	r0, r5
    8388:	bd70      	pop	{r4, r5, r6, pc}
    838a:	0000      	.short	0x0000
    838c:	2000012c 	.word	0x2000012c
    8390:	200001a4 	.word	0x200001a4
    8394:	b570      	push	{r4, r5, r6, lr}
    8396:	4c2a      	ldr	r4, [pc, #168]	; (8440 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x440>)
    8398:	2000      	movs	r0, #0
    839a:	78a1      	ldrb	r1, [r4, #2]
    839c:	07c9      	lsls	r1, r1, #31
    839e:	d015      	beq.n	83cc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3cc>
    83a0:	6920      	ldr	r0, [r4, #16]
    83a2:	2301      	movs	r3, #1
    83a4:	2105      	movs	r1, #5
    83a6:	78c5      	ldrb	r5, [r0, #3]
    83a8:	68a0      	ldr	r0, [r4, #8]
    83aa:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    83ae:	3068      	adds	r0, #104	; 0x68
    83b0:	f004 fb60 	bl	ca74 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    83b4:	b158      	cbz	r0, 83ce <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3ce>
    83b6:	1ead      	subs	r5, r5, #2
    83b8:	2d0a      	cmp	r5, #10
    83ba:	d206      	bcs.n	83ca <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3ca>
    83bc:	e8df f005 	tbb	[pc, r5]
    83c0:	05050707 	.word	0x05050707
    83c4:	05050707 	.word	0x05050707
    83c8:	0707      	.short	0x0707
    83ca:	2008      	movs	r0, #8
    83cc:	bd70      	pop	{r4, r5, r6, pc}
    83ce:	6920      	ldr	r0, [r4, #16]
    83d0:	f7fd fbc8 	bl	5b64 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>
    83d4:	b138      	cbz	r0, 83e6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3e6>
    83d6:	6920      	ldr	r0, [r4, #16]
    83d8:	78c5      	ldrb	r5, [r0, #3]
    83da:	b145      	cbz	r5, 83ee <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3ee>
    83dc:	2d01      	cmp	r5, #1
    83de:	d006      	beq.n	83ee <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3ee>
    83e0:	2d16      	cmp	r5, #22
    83e2:	d118      	bne.n	8416 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x416>
    83e4:	e003      	b.n	83ee <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3ee>
    83e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    83ea:	f000 bd0b 	b.w	8e04 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe04>
    83ee:	68a0      	ldr	r0, [r4, #8]
    83f0:	f890 0075 	ldrb.w	r0, [r0, #117]	; 0x75
    83f4:	f004 fb8c 	bl	cb10 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    83f8:	b168      	cbz	r0, 8416 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x416>
    83fa:	68a1      	ldr	r1, [r4, #8]
    83fc:	f891 0075 	ldrb.w	r0, [r1, #117]	; 0x75
    8400:	281f      	cmp	r0, #31
    8402:	d008      	beq.n	8416 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x416>
    8404:	2820      	cmp	r0, #32
    8406:	d003      	beq.n	8410 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x410>
    8408:	2d16      	cmp	r5, #22
    840a:	d00c      	beq.n	8426 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x426>
    840c:	2002      	movs	r0, #2
    840e:	bd70      	pop	{r4, r5, r6, pc}
    8410:	2026      	movs	r0, #38	; 0x26
    8412:	f881 0075 	strb.w	r0, [r1, #117]	; 0x75
    8416:	2d19      	cmp	r5, #25
    8418:	d207      	bcs.n	842a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x42a>
    841a:	480a      	ldr	r0, [pc, #40]	; (8444 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x444>)
    841c:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    8420:	b118      	cbz	r0, 842a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x42a>
    8422:	4780      	blx	r0
    8424:	e003      	b.n	842e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x42e>
    8426:	2020      	movs	r0, #32
    8428:	bd70      	pop	{r4, r5, r6, pc}
    842a:	f000 fceb 	bl	8e04 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe04>
    842e:	68a2      	ldr	r2, [r4, #8]
    8430:	e9f2 1330 	ldrd	r1, r3, [r2, #192]!	; 0xc0
    8434:	1c49      	adds	r1, r1, #1
    8436:	f143 0300 	adc.w	r3, r3, #0
    843a:	e9c2 1300 	strd	r1, r3, [r2]
    843e:	bd70      	pop	{r4, r5, r6, pc}
    8440:	2000012c 	.word	0x2000012c
    8444:	20000140 	.word	0x20000140
    8448:	b570      	push	{r4, r5, r6, lr}
    844a:	4c22      	ldr	r4, [pc, #136]	; (84d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4d4>)
    844c:	78a0      	ldrb	r0, [r4, #2]
    844e:	0700      	lsls	r0, r0, #28
    8450:	d53e      	bpl.n	84d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4d0>
    8452:	68a0      	ldr	r0, [r4, #8]
    8454:	3068      	adds	r0, #104	; 0x68
    8456:	f005 fdd2 	bl	dffe <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    845a:	b148      	cbz	r0, 8470 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x470>
    845c:	68a0      	ldr	r0, [r4, #8]
    845e:	21fe      	movs	r1, #254	; 0xfe
    8460:	2500      	movs	r5, #0
    8462:	f880 10e4 	strb.w	r1, [r0, #228]	; 0xe4
    8466:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    846a:	2919      	cmp	r1, #25
    846c:	d10c      	bne.n	8488 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x488>
    846e:	e004      	b.n	847a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x47a>
    8470:	f240 7146 	movw	r1, #1862	; 0x746
    8474:	2031      	movs	r0, #49	; 0x31
    8476:	f7fb fb8d 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    847a:	f880 50ab 	strb.w	r5, [r0, #171]	; 0xab
    847e:	f7ff fd83 	bl	7f88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x240>
    8482:	68a0      	ldr	r0, [r4, #8]
    8484:	f880 5076 	strb.w	r5, [r0, #118]	; 0x76
    8488:	68a0      	ldr	r0, [r4, #8]
    848a:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
    848e:	291f      	cmp	r1, #31
    8490:	d002      	beq.n	8498 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x498>
    8492:	2927      	cmp	r1, #39	; 0x27
    8494:	d113      	bne.n	84be <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4be>
    8496:	e00b      	b.n	84b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4b0>
    8498:	f890 0076 	ldrb.w	r0, [r0, #118]	; 0x76
    849c:	f004 fb38 	bl	cb10 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    84a0:	b108      	cbz	r0, 84a6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4a6>
    84a2:	2026      	movs	r0, #38	; 0x26
    84a4:	e000      	b.n	84a8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4a8>
    84a6:	2020      	movs	r0, #32
    84a8:	68a1      	ldr	r1, [r4, #8]
    84aa:	f881 0075 	strb.w	r0, [r1, #117]	; 0x75
    84ae:	e006      	b.n	84be <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4be>
    84b0:	2101      	movs	r1, #1
    84b2:	f880 1185 	strb.w	r1, [r0, #389]	; 0x185
    84b6:	f880 5075 	strb.w	r5, [r0, #117]	; 0x75
    84ba:	f880 50a6 	strb.w	r5, [r0, #166]	; 0xa6
    84be:	68a0      	ldr	r0, [r4, #8]
    84c0:	f890 1078 	ldrb.w	r1, [r0, #120]	; 0x78
    84c4:	2908      	cmp	r1, #8
    84c6:	d103      	bne.n	84d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4d0>
    84c8:	2102      	movs	r1, #2
    84ca:	7021      	strb	r1, [r4, #0]
    84cc:	f880 10e4 	strb.w	r1, [r0, #228]	; 0xe4
    84d0:	bd70      	pop	{r4, r5, r6, pc}
    84d2:	0000      	.short	0x0000
    84d4:	2000012c 	.word	0x2000012c
    84d8:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    84da:	4605      	mov	r5, r0
    84dc:	4668      	mov	r0, sp
    84de:	f7fc f9e1 	bl	48a4 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    84e2:	b318      	cbz	r0, 852c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x52c>
    84e4:	2222      	movs	r2, #34	; 0x22
    84e6:	2100      	movs	r1, #0
    84e8:	9800      	ldr	r0, [sp, #0]
    84ea:	f003 f9e2 	bl	b8b2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    84ee:	2103      	movs	r1, #3
    84f0:	9800      	ldr	r0, [sp, #0]
    84f2:	f004 fda2 	bl	d03a <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    84f6:	9800      	ldr	r0, [sp, #0]
    84f8:	7801      	ldrb	r1, [r0, #0]
    84fa:	f021 0110 	bic.w	r1, r1, #16
    84fe:	7001      	strb	r1, [r0, #0]
    8500:	4629      	mov	r1, r5
    8502:	f7fd fb5b 	bl	5bbc <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>
    8506:	2100      	movs	r1, #0
    8508:	4c5e      	ldr	r4, [pc, #376]	; (8684 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x684>)
    850a:	f644 162f 	movw	r6, #18735	; 0x492f
    850e:	2d0e      	cmp	r5, #14
    8510:	d07e      	beq.n	8610 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x610>
    8512:	dc0e      	bgt.n	8532 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x532>
    8514:	f1a5 0502 	sub.w	r5, r5, #2
    8518:	2d0c      	cmp	r5, #12
    851a:	d21c      	bcs.n	8556 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x556>
    851c:	e8df f005 	tbb	[pc, r5]
    8520:	a7451b1e 	.word	0xa7451b1e
    8524:	511b1ea7 	.word	0x511b1ea7
    8528:	3723a71b 	.word	0x3723a71b
    852c:	f640 116b 	movw	r1, #2411	; 0x96b
    8530:	e0a3      	b.n	867a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x67a>
    8532:	2d15      	cmp	r5, #21
    8534:	d058      	beq.n	85e8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5e8>
    8536:	dc08      	bgt.n	854a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x54a>
    8538:	2d11      	cmp	r5, #17
    853a:	d01f      	beq.n	857c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x57c>
    853c:	2d12      	cmp	r5, #18
    853e:	d01c      	beq.n	857a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x57a>
    8540:	2d13      	cmp	r5, #19
    8542:	d01a      	beq.n	857a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x57a>
    8544:	2d14      	cmp	r5, #20
    8546:	d106      	bne.n	8556 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x556>
    8548:	e04e      	b.n	85e8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5e8>
    854a:	2d16      	cmp	r5, #22
    854c:	d023      	beq.n	8596 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x596>
    854e:	2d17      	cmp	r5, #23
    8550:	d065      	beq.n	861e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x61e>
    8552:	2dff      	cmp	r5, #255	; 0xff
    8554:	d07e      	beq.n	8654 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x654>
    8556:	f640 11dd 	movw	r1, #2525	; 0x9dd
    855a:	e08e      	b.n	867a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x67a>
    855c:	68a1      	ldr	r1, [r4, #8]
    855e:	9800      	ldr	r0, [sp, #0]
    8560:	f891 10e6 	ldrb.w	r1, [r1, #230]	; 0xe6
    8564:	e015      	b.n	8592 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x592>
    8566:	9800      	ldr	r0, [sp, #0]
    8568:	220b      	movs	r2, #11
    856a:	7102      	strb	r2, [r0, #4]
    856c:	2259      	movs	r2, #89	; 0x59
    856e:	7142      	strb	r2, [r0, #5]
    8570:	7181      	strb	r1, [r0, #6]
    8572:	215b      	movs	r1, #91	; 0x5b
    8574:	71c1      	strb	r1, [r0, #7]
    8576:	2112      	movs	r1, #18
    8578:	7201      	strb	r1, [r0, #8]
    857a:	e078      	b.n	866e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x66e>
    857c:	2103      	movs	r1, #3
    857e:	9800      	ldr	r0, [sp, #0]
    8580:	f004 fd37 	bl	cff2 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>
    8584:	2106      	movs	r1, #6
    8586:	9800      	ldr	r0, [sp, #0]
    8588:	f004 fd35 	bl	cff6 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>
    858c:	e06f      	b.n	866e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x66e>
    858e:	9800      	ldr	r0, [sp, #0]
    8590:	2106      	movs	r1, #6
    8592:	7101      	strb	r1, [r0, #4]
    8594:	e06b      	b.n	866e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x66e>
    8596:	9800      	ldr	r0, [sp, #0]
    8598:	f8d4 1008 	ldr.w	r1, [r4, #8]
    859c:	f891 21a8 	ldrb.w	r2, [r1, #424]	; 0x1a8
    85a0:	7102      	strb	r2, [r0, #4]
    85a2:	f891 11a9 	ldrb.w	r1, [r1, #425]	; 0x1a9
    85a6:	7141      	strb	r1, [r0, #5]
    85a8:	e061      	b.n	866e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x66e>
    85aa:	68a1      	ldr	r1, [r4, #8]
    85ac:	9800      	ldr	r0, [sp, #0]
    85ae:	f501 7188 	add.w	r1, r1, #272	; 0x110
    85b2:	f004 fd33 	bl	d01c <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>
    85b6:	68a1      	ldr	r1, [r4, #8]
    85b8:	9800      	ldr	r0, [sp, #0]
    85ba:	31dc      	adds	r1, #220	; 0xdc
    85bc:	f004 fd2b 	bl	d016 <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>
    85c0:	e055      	b.n	866e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x66e>
    85c2:	9101      	str	r1, [sp, #4]
    85c4:	9102      	str	r1, [sp, #8]
    85c6:	f001 fe09 	bl	a1dc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    85ca:	68a1      	ldr	r1, [r4, #8]
    85cc:	4030      	ands	r0, r6
    85ce:	f891 10b4 	ldrb.w	r1, [r1, #180]	; 0xb4
    85d2:	4001      	ands	r1, r0
    85d4:	f88d 1004 	strb.w	r1, [sp, #4]
    85d8:	0a00      	lsrs	r0, r0, #8
    85da:	f88d 0005 	strb.w	r0, [sp, #5]
    85de:	a901      	add	r1, sp, #4
    85e0:	9800      	ldr	r0, [sp, #0]
    85e2:	f004 fd25 	bl	d030 <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>
    85e6:	e042      	b.n	866e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x66e>
    85e8:	68a0      	ldr	r0, [r4, #8]
    85ea:	f8b0 1044 	ldrh.w	r1, [r0, #68]	; 0x44
    85ee:	9800      	ldr	r0, [sp, #0]
    85f0:	f004 fd2b 	bl	d04a <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>
    85f4:	68a0      	ldr	r0, [r4, #8]
    85f6:	f8b0 10e8 	ldrh.w	r1, [r0, #232]	; 0xe8
    85fa:	9800      	ldr	r0, [sp, #0]
    85fc:	f004 fd29 	bl	d052 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>
    8600:	68a0      	ldr	r0, [r4, #8]
    8602:	f8b0 1040 	ldrh.w	r1, [r0, #64]	; 0x40
    8606:	9800      	ldr	r0, [sp, #0]
    8608:	f004 fd27 	bl	d05a <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>
    860c:	68a0      	ldr	r0, [r4, #8]
    860e:	e000      	b.n	8612 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x612>
    8610:	e010      	b.n	8634 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x634>
    8612:	f8b0 10e6 	ldrh.w	r1, [r0, #230]	; 0xe6
    8616:	9800      	ldr	r0, [sp, #0]
    8618:	f004 fd23 	bl	d062 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>
    861c:	e027      	b.n	866e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x66e>
    861e:	68a1      	ldr	r1, [r4, #8]
    8620:	f891 01a6 	ldrb.w	r0, [r1, #422]	; 0x1a6
    8624:	2801      	cmp	r0, #1
    8626:	9800      	ldr	r0, [sp, #0]
    8628:	d0b8      	beq.n	859c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x59c>
    862a:	f811 2f5e 	ldrb.w	r2, [r1, #94]!
    862e:	7102      	strb	r2, [r0, #4]
    8630:	7849      	ldrb	r1, [r1, #1]
    8632:	e7b8      	b.n	85a6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5a6>
    8634:	9101      	str	r1, [sp, #4]
    8636:	9102      	str	r1, [sp, #8]
    8638:	f001 fdd0 	bl	a1dc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    863c:	68a1      	ldr	r1, [r4, #8]
    863e:	4030      	ands	r0, r6
    8640:	f891 10b4 	ldrb.w	r1, [r1, #180]	; 0xb4
    8644:	4001      	ands	r1, r0
    8646:	f88d 1004 	strb.w	r1, [sp, #4]
    864a:	0a00      	lsrs	r0, r0, #8
    864c:	f88d 0005 	strb.w	r0, [sp, #5]
    8650:	a901      	add	r1, sp, #4
    8652:	e000      	b.n	8656 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x656>
    8654:	e003      	b.n	865e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x65e>
    8656:	9800      	ldr	r0, [sp, #0]
    8658:	f004 fce5 	bl	d026 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>
    865c:	e007      	b.n	866e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x66e>
    865e:	68a0      	ldr	r0, [r4, #8]
    8660:	f890 2187 	ldrb.w	r2, [r0, #391]	; 0x187
    8664:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
    8668:	9800      	ldr	r0, [sp, #0]
    866a:	f004 fcc6 	bl	cffa <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>
    866e:	f7fc f8f3 	bl	4858 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    8672:	2800      	cmp	r0, #0
    8674:	d104      	bne.n	8680 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x680>
    8676:	f640 11e1 	movw	r1, #2529	; 0x9e1
    867a:	2031      	movs	r0, #49	; 0x31
    867c:	f7fb fa8a 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8680:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    8682:	0000      	.short	0x0000
    8684:	2000012c 	.word	0x2000012c
    8688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    868c:	4c87      	ldr	r4, [pc, #540]	; (88ac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8ac>)
    868e:	4682      	mov	sl, r0
    8690:	4689      	mov	r9, r1
    8692:	68a0      	ldr	r0, [r4, #8]
    8694:	8800      	ldrh	r0, [r0, #0]
    8696:	f7fb fec7 	bl	4428 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    869a:	0006      	movs	r6, r0
    869c:	d00a      	beq.n	86b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6b4>
    869e:	8860      	ldrh	r0, [r4, #2]
    86a0:	f04f 0500 	mov.w	r5, #0
    86a4:	05c0      	lsls	r0, r0, #23
    86a6:	68a0      	ldr	r0, [r4, #8]
    86a8:	d509      	bpl.n	86be <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6be>
    86aa:	f8a0 509c 	strh.w	r5, [r0, #156]	; 0x9c
    86ae:	f880 5104 	strb.w	r5, [r0, #260]	; 0x104
    86b2:	e008      	b.n	86c6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6c6>
    86b4:	f640 5181 	movw	r1, #3457	; 0xd81
    86b8:	2031      	movs	r0, #49	; 0x31
    86ba:	f7fb fa6b 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    86be:	f830 1f9c 	ldrh.w	r1, [r0, #156]!
    86c2:	1c49      	adds	r1, r1, #1
    86c4:	8001      	strh	r1, [r0, #0]
    86c6:	f001 f89d 	bl	9804 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1804>
    86ca:	f04f 0801 	mov.w	r8, #1
    86ce:	b320      	cbz	r0, 871a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x71a>
    86d0:	8860      	ldrh	r0, [r4, #2]
    86d2:	0500      	lsls	r0, r0, #20
    86d4:	d506      	bpl.n	86e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6e4>
    86d6:	68a0      	ldr	r0, [r4, #8]
    86d8:	f890 107b 	ldrb.w	r1, [r0, #123]	; 0x7b
    86dc:	b111      	cbz	r1, 86e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6e4>
    86de:	f8c0 5090 	str.w	r5, [r0, #144]	; 0x90
    86e2:	e01a      	b.n	871a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x71a>
    86e4:	68a0      	ldr	r0, [r4, #8]
    86e6:	f8d0 1090 	ldr.w	r1, [r0, #144]	; 0x90
    86ea:	1c49      	adds	r1, r1, #1
    86ec:	f8c0 1090 	str.w	r1, [r0, #144]	; 0x90
    86f0:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
    86f4:	428b      	cmp	r3, r1
    86f6:	d301      	bcc.n	86fc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6fc>
    86f8:	1a5a      	subs	r2, r3, r1
    86fa:	e000      	b.n	86fe <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6fe>
    86fc:	2200      	movs	r2, #0
    86fe:	88a7      	ldrh	r7, [r4, #4]
    8700:	1d7f      	adds	r7, r7, #5
    8702:	42ba      	cmp	r2, r7
    8704:	d801      	bhi.n	870a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x70a>
    8706:	f880 809a 	strb.w	r8, [r0, #154]	; 0x9a
    870a:	4299      	cmp	r1, r3
    870c:	d305      	bcc.n	871a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x71a>
    870e:	f8c0 5090 	str.w	r5, [r0, #144]	; 0x90
    8712:	f880 81f2 	strb.w	r8, [r0, #498]	; 0x1f2
    8716:	f001 f999 	bl	9a4c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    871a:	8860      	ldrh	r0, [r4, #2]
    871c:	f04f 0702 	mov.w	r7, #2
    8720:	f410 7f40 	tst.w	r0, #768	; 0x300
    8724:	d00e      	beq.n	8744 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x744>
    8726:	68a0      	ldr	r0, [r4, #8]
    8728:	f890 1079 	ldrb.w	r1, [r0, #121]	; 0x79
    872c:	b111      	cbz	r1, 8734 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x734>
    872e:	2903      	cmp	r1, #3
    8730:	d108      	bne.n	8744 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x744>
    8732:	e002      	b.n	873a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x73a>
    8734:	f880 8079 	strb.w	r8, [r0, #121]	; 0x79
    8738:	e001      	b.n	873e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x73e>
    873a:	f880 7079 	strb.w	r7, [r0, #121]	; 0x79
    873e:	2101      	movs	r1, #1
    8740:	f7fe fc72 	bl	7028 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    8744:	68a0      	ldr	r0, [r4, #8]
    8746:	f890 1079 	ldrb.w	r1, [r0, #121]	; 0x79
    874a:	2901      	cmp	r1, #1
    874c:	d104      	bne.n	8758 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x758>
    874e:	8861      	ldrh	r1, [r4, #2]
    8750:	0549      	lsls	r1, r1, #21
    8752:	d501      	bpl.n	8758 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x758>
    8754:	f880 7079 	strb.w	r7, [r0, #121]	; 0x79
    8758:	f1ba 0f00 	cmp.w	sl, #0
    875c:	d175      	bne.n	884a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x84a>
    875e:	78a1      	ldrb	r1, [r4, #2]
    8760:	0649      	lsls	r1, r1, #25
    8762:	d502      	bpl.n	876a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x76a>
    8764:	f8a0 5118 	strh.w	r5, [r0, #280]	; 0x118
    8768:	e004      	b.n	8774 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x774>
    876a:	f8b0 1118 	ldrh.w	r1, [r0, #280]	; 0x118
    876e:	1c49      	adds	r1, r1, #1
    8770:	f8a0 1118 	strh.w	r1, [r0, #280]	; 0x118
    8774:	4648      	mov	r0, r9
    8776:	f7ff fdbd 	bl	82f4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2f4>
    877a:	ea40 0009 	orr.w	r0, r0, r9
    877e:	4681      	mov	r9, r0
    8780:	f7ff fd2a 	bl	81d8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d8>
    8784:	68a7      	ldr	r7, [r4, #8]
    8786:	f8b7 00f8 	ldrh.w	r0, [r7, #248]	; 0xf8
    878a:	1c40      	adds	r0, r0, #1
    878c:	f8a7 00f8 	strh.w	r0, [r7, #248]	; 0xf8
    8790:	f897 00fc 	ldrb.w	r0, [r7, #252]	; 0xfc
    8794:	b128      	cbz	r0, 87a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7a2>
    8796:	f7fc fa79 	bl	4c8c <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>
    879a:	b1a8      	cbz	r0, 87c8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7c8>
    879c:	f8a7 50f8 	strh.w	r5, [r7, #248]	; 0xf8
    87a0:	e012      	b.n	87c8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7c8>
    87a2:	f7fc f901 	bl	49a8 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>
    87a6:	b108      	cbz	r0, 87ac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7ac>
    87a8:	f8a7 50f8 	strh.w	r5, [r7, #248]	; 0xf8
    87ac:	f7fc f8f6 	bl	499c <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>
    87b0:	b150      	cbz	r0, 87c8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7c8>
    87b2:	f897 0104 	ldrb.w	r0, [r7, #260]	; 0x104
    87b6:	1c40      	adds	r0, r0, #1
    87b8:	b2c0      	uxtb	r0, r0
    87ba:	f887 0104 	strb.w	r0, [r7, #260]	; 0x104
    87be:	2802      	cmp	r0, #2
    87c0:	d902      	bls.n	87c8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7c8>
    87c2:	f827 5ff8 	strh.w	r5, [r7, #248]!
    87c6:	733d      	strb	r5, [r7, #12]
    87c8:	68a0      	ldr	r0, [r4, #8]
    87ca:	2301      	movs	r3, #1
    87cc:	2100      	movs	r1, #0
    87ce:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    87d2:	3068      	adds	r0, #104	; 0x68
    87d4:	f004 f94e 	bl	ca74 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    87d8:	b920      	cbnz	r0, 87e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7e4>
    87da:	68a0      	ldr	r0, [r4, #8]
    87dc:	f890 0076 	ldrb.w	r0, [r0, #118]	; 0x76
    87e0:	280c      	cmp	r0, #12
    87e2:	d15f      	bne.n	88a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8a4>
    87e4:	68a0      	ldr	r0, [r4, #8]
    87e6:	2301      	movs	r3, #1
    87e8:	2100      	movs	r1, #0
    87ea:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    87ee:	3068      	adds	r0, #104	; 0x68
    87f0:	f004 f940 	bl	ca74 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    87f4:	b350      	cbz	r0, 884c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x84c>
    87f6:	68a0      	ldr	r0, [r4, #8]
    87f8:	2301      	movs	r3, #1
    87fa:	2100      	movs	r1, #0
    87fc:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
    8800:	3068      	adds	r0, #104	; 0x68
    8802:	f004 f937 	bl	ca74 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8806:	b308      	cbz	r0, 884c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x84c>
    8808:	68a0      	ldr	r0, [r4, #8]
    880a:	f890 1079 	ldrb.w	r1, [r0, #121]	; 0x79
    880e:	2902      	cmp	r1, #2
    8810:	d148      	bne.n	88a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8a4>
    8812:	f890 0104 	ldrb.w	r0, [r0, #260]	; 0x104
    8816:	b9c8      	cbnz	r0, 884c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x84c>
    8818:	4630      	mov	r0, r6
    881a:	f003 fd0e 	bl	c23a <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    881e:	b1a8      	cbz	r0, 884c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x84c>
    8820:	68a0      	ldr	r0, [r4, #8]
    8822:	3068      	adds	r0, #104	; 0x68
    8824:	f005 fbeb 	bl	dffe <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    8828:	b980      	cbnz	r0, 884c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x84c>
    882a:	68a1      	ldr	r1, [r4, #8]
    882c:	f8b1 00f2 	ldrh.w	r0, [r1, #242]	; 0xf2
    8830:	2801      	cmp	r0, #1
    8832:	d937      	bls.n	88a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8a4>
    8834:	f881 80fa 	strb.w	r8, [r1, #250]	; 0xfa
    8838:	f8b1 209e 	ldrh.w	r2, [r1, #158]	; 0x9e
    883c:	f8b1 009c 	ldrh.w	r0, [r1, #156]	; 0x9c
    8840:	1e93      	subs	r3, r2, #2
    8842:	4298      	cmp	r0, r3
    8844:	db03      	blt.n	884e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x84e>
    8846:	2001      	movs	r0, #1
    8848:	e004      	b.n	8854 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x854>
    884a:	e01d      	b.n	8888 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x888>
    884c:	e02a      	b.n	88a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8a4>
    884e:	1a10      	subs	r0, r2, r0
    8850:	1e40      	subs	r0, r0, #1
    8852:	b280      	uxth	r0, r0
    8854:	f8b1 20f8 	ldrh.w	r2, [r1, #248]	; 0xf8
    8858:	88a3      	ldrh	r3, [r4, #4]
    885a:	429a      	cmp	r2, r3
    885c:	d301      	bcc.n	8862 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x862>
    885e:	2201      	movs	r2, #1
    8860:	e002      	b.n	8868 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x868>
    8862:	1a9a      	subs	r2, r3, r2
    8864:	1c52      	adds	r2, r2, #1
    8866:	b292      	uxth	r2, r2
    8868:	4290      	cmp	r0, r2
    886a:	d900      	bls.n	886e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x86e>
    886c:	4610      	mov	r0, r2
    886e:	2801      	cmp	r0, #1
    8870:	d102      	bne.n	8878 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x878>
    8872:	bf00      	nop
    8874:	f881 50fa 	strb.w	r5, [r1, #250]	; 0xfa
    8878:	68a1      	ldr	r1, [r4, #8]
    887a:	f8b1 206c 	ldrh.w	r2, [r1, #108]	; 0x6c
    887e:	4410      	add	r0, r2
    8880:	f8a1 00f4 	strh.w	r0, [r1, #244]	; 0xf4
    8884:	f001 f87e 	bl	9984 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1984>
    8888:	78a0      	ldrb	r0, [r4, #2]
    888a:	464a      	mov	r2, r9
    888c:	f3c0 1180 	ubfx	r1, r0, #6, #1
    8890:	4650      	mov	r0, sl
    8892:	f000 ffcb 	bl	982c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x182c>
    8896:	68a0      	ldr	r0, [r4, #8]
    8898:	f880 50fb 	strb.w	r5, [r0, #251]	; 0xfb
    889c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    88a0:	f7fb bfc4 	b.w	482c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    88a4:	2001      	movs	r0, #1
    88a6:	68a1      	ldr	r1, [r4, #8]
    88a8:	e7e4      	b.n	8874 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x874>
    88aa:	0000      	.short	0x0000
    88ac:	2000012c 	.word	0x2000012c
    88b0:	b570      	push	{r4, r5, r6, lr}
    88b2:	4c4e      	ldr	r4, [pc, #312]	; (89ec <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9ec>)
    88b4:	2301      	movs	r3, #1
    88b6:	2100      	movs	r1, #0
    88b8:	68a0      	ldr	r0, [r4, #8]
    88ba:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    88be:	3068      	adds	r0, #104	; 0x68
    88c0:	f004 f8d8 	bl	ca74 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    88c4:	2800      	cmp	r0, #0
    88c6:	d076      	beq.n	89b6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9b6>
    88c8:	68a0      	ldr	r0, [r4, #8]
    88ca:	f890 11ad 	ldrb.w	r1, [r0, #429]	; 0x1ad
    88ce:	2500      	movs	r5, #0
    88d0:	b139      	cbz	r1, 88e2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8e2>
    88d2:	2100      	movs	r1, #0
    88d4:	200e      	movs	r0, #14
    88d6:	f000 f88b 	bl	89f0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9f0>
    88da:	68a0      	ldr	r0, [r4, #8]
    88dc:	f880 51ad 	strb.w	r5, [r0, #429]	; 0x1ad
    88e0:	e082      	b.n	89e8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9e8>
    88e2:	f890 11ac 	ldrb.w	r1, [r0, #428]	; 0x1ac
    88e6:	b119      	cbz	r1, 88f0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8f0>
    88e8:	f890 10ae 	ldrb.w	r1, [r0, #174]	; 0xae
    88ec:	0789      	lsls	r1, r1, #30
    88ee:	d00a      	beq.n	8906 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x906>
    88f0:	f890 119c 	ldrb.w	r1, [r0, #412]	; 0x19c
    88f4:	b111      	cbz	r1, 88fc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8fc>
    88f6:	f890 119d 	ldrb.w	r1, [r0, #413]	; 0x19d
    88fa:	b189      	cbz	r1, 8920 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x920>
    88fc:	f890 11a6 	ldrb.w	r1, [r0, #422]	; 0x1a6
    8900:	2901      	cmp	r1, #1
    8902:	d02f      	beq.n	8964 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x964>
    8904:	e06a      	b.n	89dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9dc>
    8906:	2100      	movs	r1, #0
    8908:	200c      	movs	r0, #12
    890a:	f000 f871 	bl	89f0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9f0>
    890e:	68a0      	ldr	r0, [r4, #8]
    8910:	f810 1fae 	ldrb.w	r1, [r0, #174]!
    8914:	f041 0101 	orr.w	r1, r1, #1
    8918:	7001      	strb	r1, [r0, #0]
    891a:	f880 50fe 	strb.w	r5, [r0, #254]	; 0xfe
    891e:	e063      	b.n	89e8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9e8>
    8920:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    8924:	2924      	cmp	r1, #36	; 0x24
    8926:	d01b      	beq.n	8960 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x960>
    8928:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
    892c:	2924      	cmp	r1, #36	; 0x24
    892e:	d017      	beq.n	8960 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x960>
    8930:	f05f 0300 	movs.w	r3, #0
    8934:	f500 72c7 	add.w	r2, r0, #398	; 0x18e
    8938:	f500 71ce 	add.w	r1, r0, #412	; 0x19c
    893c:	f004 fcd0 	bl	d2e0 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    8940:	68a0      	ldr	r0, [r4, #8]
    8942:	f880 519c 	strb.w	r5, [r0, #412]	; 0x19c
    8946:	2100      	movs	r1, #0
    8948:	2014      	movs	r0, #20
    894a:	f000 f851 	bl	89f0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9f0>
    894e:	68a1      	ldr	r1, [r4, #8]
    8950:	f101 0024 	add.w	r0, r1, #36	; 0x24
    8954:	8bc2      	ldrh	r2, [r0, #30]
    8956:	f821 2fe6 	strh.w	r2, [r1, #230]!
    895a:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    895c:	8048      	strh	r0, [r1, #2]
    895e:	e043      	b.n	89e8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9e8>
    8960:	2301      	movs	r3, #1
    8962:	e7e7      	b.n	8934 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x934>
    8964:	f890 11a7 	ldrb.w	r1, [r0, #423]	; 0x1a7
    8968:	bb21      	cbnz	r1, 89b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9b4>
    896a:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    896e:	2301      	movs	r3, #1
    8970:	210b      	movs	r1, #11
    8972:	3068      	adds	r0, #104	; 0x68
    8974:	f004 f87e 	bl	ca74 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8978:	b9e0      	cbnz	r0, 89b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9b4>
    897a:	68a0      	ldr	r0, [r4, #8]
    897c:	f890 0062 	ldrb.w	r0, [r0, #98]	; 0x62
    8980:	f005 fb45 	bl	e00e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    8984:	4605      	mov	r5, r0
    8986:	68a0      	ldr	r0, [r4, #8]
    8988:	f890 0063 	ldrb.w	r0, [r0, #99]	; 0x63
    898c:	f005 fb3f 	bl	e00e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    8990:	4606      	mov	r6, r0
    8992:	68a0      	ldr	r0, [r4, #8]
    8994:	f890 11a8 	ldrb.w	r1, [r0, #424]	; 0x1a8
    8998:	4628      	mov	r0, r5
    899a:	f005 fb43 	bl	e024 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    899e:	b158      	cbz	r0, 89b8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9b8>
    89a0:	68a0      	ldr	r0, [r4, #8]
    89a2:	f890 11a9 	ldrb.w	r1, [r0, #425]	; 0x1a9
    89a6:	4630      	mov	r0, r6
    89a8:	f005 fb3c 	bl	e024 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    89ac:	b120      	cbz	r0, 89b8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9b8>
    89ae:	2000      	movs	r0, #0
    89b0:	f000 f900 	bl	8bb4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbb4>
    89b4:	e012      	b.n	89dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9dc>
    89b6:	e012      	b.n	89de <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9de>
    89b8:	68a0      	ldr	r0, [r4, #8]
    89ba:	2301      	movs	r3, #1
    89bc:	2103      	movs	r1, #3
    89be:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    89c2:	3068      	adds	r0, #104	; 0x68
    89c4:	f004 f856 	bl	ca74 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    89c8:	b940      	cbnz	r0, 89dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9dc>
    89ca:	68a0      	ldr	r0, [r4, #8]
    89cc:	2301      	movs	r3, #1
    89ce:	2102      	movs	r1, #2
    89d0:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    89d4:	3068      	adds	r0, #104	; 0x68
    89d6:	f004 f84d 	bl	ca74 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    89da:	b108      	cbz	r0, 89e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9e0>
    89dc:	2000      	movs	r0, #0
    89de:	bd70      	pop	{r4, r5, r6, pc}
    89e0:	2100      	movs	r1, #0
    89e2:	2016      	movs	r0, #22
    89e4:	f000 f804 	bl	89f0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9f0>
    89e8:	2001      	movs	r0, #1
    89ea:	bd70      	pop	{r4, r5, r6, pc}
    89ec:	2000012c 	.word	0x2000012c
    89f0:	b570      	push	{r4, r5, r6, lr}
    89f2:	4c0d      	ldr	r4, [pc, #52]	; (8a28 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa28>)
    89f4:	4606      	mov	r6, r0
    89f6:	460d      	mov	r5, r1
    89f8:	68a0      	ldr	r0, [r4, #8]
    89fa:	3068      	adds	r0, #104	; 0x68
    89fc:	f005 faff 	bl	dffe <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    8a00:	b120      	cbz	r0, 8a0c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa0c>
    8a02:	f640 11f4 	movw	r1, #2548	; 0x9f4
    8a06:	2031      	movs	r0, #49	; 0x31
    8a08:	f7fb f8c4 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8a0c:	68a2      	ldr	r2, [r4, #8]
    8a0e:	2000      	movs	r0, #0
    8a10:	f882 60e4 	strb.w	r6, [r2, #228]	; 0xe4
    8a14:	b115      	cbz	r5, 8a1c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa1c>
    8a16:	f8a2 00a8 	strh.w	r0, [r2, #168]	; 0xa8
    8a1a:	bd70      	pop	{r4, r5, r6, pc}
    8a1c:	f822 0fa2 	strh.w	r0, [r2, #162]!
    8a20:	2001      	movs	r0, #1
    8a22:	7110      	strb	r0, [r2, #4]
    8a24:	bd70      	pop	{r4, r5, r6, pc}
    8a26:	0000      	.short	0x0000
    8a28:	2000012c 	.word	0x2000012c
    8a2c:	b570      	push	{r4, r5, r6, lr}
    8a2e:	4c18      	ldr	r4, [pc, #96]	; (8a90 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa90>)
    8a30:	2500      	movs	r5, #0
    8a32:	68a0      	ldr	r0, [r4, #8]
    8a34:	f890 1173 	ldrb.w	r1, [r0, #371]	; 0x173
    8a38:	2901      	cmp	r1, #1
    8a3a:	d00a      	beq.n	8a52 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa52>
    8a3c:	2902      	cmp	r1, #2
    8a3e:	d125      	bne.n	8a8c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa8c>
    8a40:	f890 10ac 	ldrb.w	r1, [r0, #172]	; 0xac
    8a44:	b1a9      	cbz	r1, 8a72 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa72>
    8a46:	2106      	movs	r1, #6
    8a48:	f880 10e6 	strb.w	r1, [r0, #230]	; 0xe6
    8a4c:	2101      	movs	r1, #1
    8a4e:	2002      	movs	r0, #2
    8a50:	e017      	b.n	8a82 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa82>
    8a52:	f890 11bc 	ldrb.w	r1, [r0, #444]	; 0x1bc
    8a56:	2900      	cmp	r1, #0
    8a58:	d118      	bne.n	8a8c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa8c>
    8a5a:	f100 03c8 	add.w	r3, r0, #200	; 0xc8
    8a5e:	f500 7184 	add.w	r1, r0, #264	; 0x108
    8a62:	2200      	movs	r2, #0
    8a64:	f500 70ba 	add.w	r0, r0, #372	; 0x174
    8a68:	f003 ffbc 	bl	c9e4 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    8a6c:	2101      	movs	r1, #1
    8a6e:	2005      	movs	r0, #5
    8a70:	e007      	b.n	8a82 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa82>
    8a72:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    8a76:	0740      	lsls	r0, r0, #29
    8a78:	d501      	bpl.n	8a7e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa7e>
    8a7a:	2011      	movs	r0, #17
    8a7c:	e000      	b.n	8a80 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa80>
    8a7e:	200d      	movs	r0, #13
    8a80:	2101      	movs	r1, #1
    8a82:	f7ff ffb5 	bl	89f0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9f0>
    8a86:	68a0      	ldr	r0, [r4, #8]
    8a88:	f880 5173 	strb.w	r5, [r0, #371]	; 0x173
    8a8c:	bd70      	pop	{r4, r5, r6, pc}
    8a8e:	0000      	.short	0x0000
    8a90:	2000012c 	.word	0x2000012c
    8a94:	b570      	push	{r4, r5, r6, lr}
    8a96:	4a2b      	ldr	r2, [pc, #172]	; (8b44 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb44>)
    8a98:	4603      	mov	r3, r0
    8a9a:	8850      	ldrh	r0, [r2, #2]
    8a9c:	4318      	orrs	r0, r3
    8a9e:	8050      	strh	r0, [r2, #2]
    8aa0:	4610      	mov	r0, r2
    8aa2:	2b40      	cmp	r3, #64	; 0x40
    8aa4:	6880      	ldr	r0, [r0, #8]
    8aa6:	d00d      	beq.n	8ac4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xac4>
    8aa8:	079e      	lsls	r6, r3, #30
    8aaa:	f04f 0500 	mov.w	r5, #0
    8aae:	f04f 0401 	mov.w	r4, #1
    8ab2:	ea4f 76c3 	mov.w	r6, r3, lsl #31
    8ab6:	d50c      	bpl.n	8ad2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xad2>
    8ab8:	b14e      	cbz	r6, 8ace <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xace>
    8aba:	f640 41ee 	movw	r1, #3310	; 0xcee
    8abe:	2031      	movs	r0, #49	; 0x31
    8ac0:	f7fb f868 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8ac4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8ac8:	2104      	movs	r1, #4
    8aca:	f7fe baad 	b.w	7028 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    8ace:	60d1      	str	r1, [r2, #12]
    8ad0:	e01c      	b.n	8b0c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb0c>
    8ad2:	b1c6      	cbz	r6, 8b06 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb06>
    8ad4:	6111      	str	r1, [r2, #16]
    8ad6:	78c9      	ldrb	r1, [r1, #3]
    8ad8:	2906      	cmp	r1, #6
    8ada:	d002      	beq.n	8ae2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xae2>
    8adc:	290b      	cmp	r1, #11
    8ade:	d112      	bne.n	8b06 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb06>
    8ae0:	e009      	b.n	8af6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xaf6>
    8ae2:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    8ae6:	2917      	cmp	r1, #23
    8ae8:	d10d      	bne.n	8b06 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb06>
    8aea:	2100      	movs	r1, #0
    8aec:	e9c0 112e 	strd	r1, r1, [r0, #184]	; 0xb8
    8af0:	f880 407a 	strb.w	r4, [r0, #122]	; 0x7a
    8af4:	e007      	b.n	8b06 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb06>
    8af6:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    8afa:	2911      	cmp	r1, #17
    8afc:	d103      	bne.n	8b06 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb06>
    8afe:	f880 507a 	strb.w	r5, [r0, #122]	; 0x7a
    8b02:	f880 40ac 	strb.w	r4, [r0, #172]	; 0xac
    8b06:	0799      	lsls	r1, r3, #30
    8b08:	d516      	bpl.n	8b38 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb38>
    8b0a:	68d1      	ldr	r1, [r2, #12]
    8b0c:	78c9      	ldrb	r1, [r1, #3]
    8b0e:	2905      	cmp	r1, #5
    8b10:	d002      	beq.n	8b18 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb18>
    8b12:	290b      	cmp	r1, #11
    8b14:	d110      	bne.n	8b38 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb38>
    8b16:	e009      	b.n	8b2c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb2c>
    8b18:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    8b1c:	2915      	cmp	r1, #21
    8b1e:	d10b      	bne.n	8b38 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb38>
    8b20:	2100      	movs	r1, #0
    8b22:	e9e0 1130 	strd	r1, r1, [r0, #192]!	; 0xc0
    8b26:	f800 4c45 	strb.w	r4, [r0, #-69]
    8b2a:	e005      	b.n	8b38 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb38>
    8b2c:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    8b30:	2910      	cmp	r1, #16
    8b32:	d101      	bne.n	8b38 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb38>
    8b34:	f880 507b 	strb.w	r5, [r0, #123]	; 0x7b
    8b38:	0698      	lsls	r0, r3, #26
    8b3a:	d501      	bpl.n	8b40 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb40>
    8b3c:	2008      	movs	r0, #8
    8b3e:	7050      	strb	r0, [r2, #1]
    8b40:	bd70      	pop	{r4, r5, r6, pc}
    8b42:	0000      	.short	0x0000
    8b44:	2000012c 	.word	0x2000012c
    8b48:	b570      	push	{r4, r5, r6, lr}
    8b4a:	4c19      	ldr	r4, [pc, #100]	; (8bb0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbb0>)
    8b4c:	68a0      	ldr	r0, [r4, #8]
    8b4e:	f890 118e 	ldrb.w	r1, [r0, #398]	; 0x18e
    8b52:	b109      	cbz	r1, 8b58 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb58>
    8b54:	2601      	movs	r6, #1
    8b56:	e000      	b.n	8b5a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb5a>
    8b58:	2600      	movs	r6, #0
    8b5a:	f890 218f 	ldrb.w	r2, [r0, #399]	; 0x18f
    8b5e:	b10a      	cbz	r2, 8b64 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb64>
    8b60:	2501      	movs	r5, #1
    8b62:	e000      	b.n	8b66 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb66>
    8b64:	2500      	movs	r5, #0
    8b66:	b90e      	cbnz	r6, 8b6c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb6c>
    8b68:	f890 1062 	ldrb.w	r1, [r0, #98]	; 0x62
    8b6c:	b90d      	cbnz	r5, 8b72 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb72>
    8b6e:	f890 2063 	ldrb.w	r2, [r0, #99]	; 0x63
    8b72:	f100 035a 	add.w	r3, r0, #90	; 0x5a
    8b76:	7219      	strb	r1, [r3, #8]
    8b78:	725a      	strb	r2, [r3, #9]
    8b7a:	2101      	movs	r1, #1
    8b7c:	7299      	strb	r1, [r3, #10]
    8b7e:	f890 01a6 	ldrb.w	r0, [r0, #422]	; 0x1a6
    8b82:	2801      	cmp	r0, #1
    8b84:	d001      	beq.n	8b8a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb8a>
    8b86:	b906      	cbnz	r6, 8b8a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb8a>
    8b88:	b115      	cbz	r5, 8b90 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb90>
    8b8a:	2000      	movs	r0, #0
    8b8c:	f000 f812 	bl	8bb4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbb4>
    8b90:	68a0      	ldr	r0, [r4, #8]
    8b92:	f004 fbc0 	bl	d316 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    8b96:	2800      	cmp	r0, #0
    8b98:	d008      	beq.n	8bac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbac>
    8b9a:	68a1      	ldr	r1, [r4, #8]
    8b9c:	f501 72e9 	add.w	r2, r1, #466	; 0x1d2
    8ba0:	8808      	ldrh	r0, [r1, #0]
    8ba2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8ba6:	3124      	adds	r1, #36	; 0x24
    8ba8:	f004 bb76 	b.w	d298 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    8bac:	bd70      	pop	{r4, r5, r6, pc}
    8bae:	0000      	.short	0x0000
    8bb0:	2000012c 	.word	0x2000012c
    8bb4:	b510      	push	{r4, lr}
    8bb6:	4c10      	ldr	r4, [pc, #64]	; (8bf8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbf8>)
    8bb8:	68a1      	ldr	r1, [r4, #8]
    8bba:	880a      	ldrh	r2, [r1, #0]
    8bbc:	f8a1 21fe 	strh.w	r2, [r1, #510]	; 0x1fe
    8bc0:	f881 01fc 	strb.w	r0, [r1, #508]	; 0x1fc
    8bc4:	f891 0062 	ldrb.w	r0, [r1, #98]	; 0x62
    8bc8:	f005 fa21 	bl	e00e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    8bcc:	68a1      	ldr	r1, [r4, #8]
    8bce:	f881 0200 	strb.w	r0, [r1, #512]	; 0x200
    8bd2:	f891 0063 	ldrb.w	r0, [r1, #99]	; 0x63
    8bd6:	f005 fa1a 	bl	e00e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    8bda:	68a2      	ldr	r2, [r4, #8]
    8bdc:	f502 71fd 	add.w	r1, r2, #506	; 0x1fa
    8be0:	f882 0201 	strb.w	r0, [r2, #513]	; 0x201
    8be4:	2001      	movs	r0, #1
    8be6:	7008      	strb	r0, [r1, #0]
    8be8:	2000      	movs	r0, #0
    8bea:	f882 01a6 	strb.w	r0, [r2, #422]	; 0x1a6
    8bee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8bf2:	f000 bf2b 	b.w	9a4c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8bf6:	0000      	.short	0x0000
    8bf8:	2000012c 	.word	0x2000012c
    8bfc:	b510      	push	{r4, lr}
    8bfe:	4c15      	ldr	r4, [pc, #84]	; (8c54 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc54>)
    8c00:	2301      	movs	r3, #1
    8c02:	2100      	movs	r1, #0
    8c04:	68a0      	ldr	r0, [r4, #8]
    8c06:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    8c0a:	3068      	adds	r0, #104	; 0x68
    8c0c:	f003 ff32 	bl	ca74 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8c10:	b190      	cbz	r0, 8c38 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc38>
    8c12:	6920      	ldr	r0, [r4, #16]
    8c14:	f004 f98a 	bl	cf2c <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>
    8c18:	68a1      	ldr	r1, [r4, #8]
    8c1a:	f8a1 018c 	strh.w	r0, [r1, #396]	; 0x18c
    8c1e:	f8b1 106c 	ldrh.w	r1, [r1, #108]	; 0x6c
    8c22:	f005 fa0d 	bl	e040 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    8c26:	b148      	cbz	r0, 8c3c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc3c>
    8c28:	68a0      	ldr	r0, [r4, #8]
    8c2a:	2128      	movs	r1, #40	; 0x28
    8c2c:	f880 108d 	strb.w	r1, [r0, #141]	; 0x8d
    8c30:	306e      	adds	r0, #110	; 0x6e
    8c32:	2101      	movs	r1, #1
    8c34:	7781      	strb	r1, [r0, #30]
    8c36:	e00b      	b.n	8c50 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc50>
    8c38:	2001      	movs	r0, #1
    8c3a:	bd10      	pop	{r4, pc}
    8c3c:	68a1      	ldr	r1, [r4, #8]
    8c3e:	6920      	ldr	r0, [r4, #16]
    8c40:	f501 71c7 	add.w	r1, r1, #398	; 0x18e
    8c44:	f004 f96d 	bl	cf22 <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>
    8c48:	68a1      	ldr	r1, [r4, #8]
    8c4a:	200b      	movs	r0, #11
    8c4c:	f881 0076 	strb.w	r0, [r1, #118]	; 0x76
    8c50:	2000      	movs	r0, #0
    8c52:	bd10      	pop	{r4, pc}
    8c54:	2000012c 	.word	0x2000012c
    8c58:	b570      	push	{r4, r5, r6, lr}
    8c5a:	4c29      	ldr	r4, [pc, #164]	; (8d00 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd00>)
    8c5c:	2301      	movs	r3, #1
    8c5e:	2100      	movs	r1, #0
    8c60:	68a0      	ldr	r0, [r4, #8]
    8c62:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    8c66:	3068      	adds	r0, #104	; 0x68
    8c68:	f003 ff04 	bl	ca74 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8c6c:	b1b8      	cbz	r0, 8c9e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc9e>
    8c6e:	2100      	movs	r1, #0
    8c70:	6920      	ldr	r0, [r4, #16]
    8c72:	f004 f92e 	bl	ced2 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>
    8c76:	b1a0      	cbz	r0, 8ca2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xca2>
    8c78:	6920      	ldr	r0, [r4, #16]
    8c7a:	68a1      	ldr	r1, [r4, #8]
    8c7c:	f8b0 000d 	ldrh.w	r0, [r0, #13]
    8c80:	f8a1 018c 	strh.w	r0, [r1, #396]	; 0x18c
    8c84:	f8b1 106c 	ldrh.w	r1, [r1, #108]	; 0x6c
    8c88:	f005 f9da 	bl	e040 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    8c8c:	b168      	cbz	r0, 8caa <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcaa>
    8c8e:	68a0      	ldr	r0, [r4, #8]
    8c90:	2128      	movs	r1, #40	; 0x28
    8c92:	f880 108d 	strb.w	r1, [r0, #141]	; 0x8d
    8c96:	306e      	adds	r0, #110	; 0x6e
    8c98:	2101      	movs	r1, #1
    8c9a:	7781      	strb	r1, [r0, #30]
    8c9c:	e02e      	b.n	8cfc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcfc>
    8c9e:	2001      	movs	r0, #1
    8ca0:	bd70      	pop	{r4, r5, r6, pc}
    8ca2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8ca6:	f000 b8ad 	b.w	8e04 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe04>
    8caa:	6920      	ldr	r0, [r4, #16]
    8cac:	f004 f941 	bl	cf32 <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>
    8cb0:	f003 fec3 	bl	ca3a <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    8cb4:	4605      	mov	r5, r0
    8cb6:	68a0      	ldr	r0, [r4, #8]
    8cb8:	4629      	mov	r1, r5
    8cba:	f8c0 5194 	str.w	r5, [r0, #404]	; 0x194
    8cbe:	6920      	ldr	r0, [r4, #16]
    8cc0:	7900      	ldrb	r0, [r0, #4]
    8cc2:	f004 f844 	bl	cd4e <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    8cc6:	68a1      	ldr	r1, [r4, #8]
    8cc8:	f8a1 018e 	strh.w	r0, [r1, #398]	; 0x18e
    8ccc:	6920      	ldr	r0, [r4, #16]
    8cce:	4629      	mov	r1, r5
    8cd0:	f8b0 0005 	ldrh.w	r0, [r0, #5]
    8cd4:	f004 f837 	bl	cd46 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    8cd8:	68a1      	ldr	r1, [r4, #8]
    8cda:	f8c1 0190 	str.w	r0, [r1, #400]	; 0x190
    8cde:	6920      	ldr	r0, [r4, #16]
    8ce0:	f004 f92a 	bl	cf38 <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>
    8ce4:	68a1      	ldr	r1, [r4, #8]
    8ce6:	f8a1 0198 	strh.w	r0, [r1, #408]	; 0x198
    8cea:	6920      	ldr	r0, [r4, #16]
    8cec:	f004 f927 	bl	cf3e <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>
    8cf0:	68a1      	ldr	r1, [r4, #8]
    8cf2:	f8a1 019a 	strh.w	r0, [r1, #410]	; 0x19a
    8cf6:	200d      	movs	r0, #13
    8cf8:	f881 0076 	strb.w	r0, [r1, #118]	; 0x76
    8cfc:	2000      	movs	r0, #0
    8cfe:	bd70      	pop	{r4, r5, r6, pc}
    8d00:	2000012c 	.word	0x2000012c
    8d04:	b538      	push	{r3, r4, r5, lr}
    8d06:	4c29      	ldr	r4, [pc, #164]	; (8dac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdac>)
    8d08:	2301      	movs	r3, #1
    8d0a:	2100      	movs	r1, #0
    8d0c:	68a0      	ldr	r0, [r4, #8]
    8d0e:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    8d12:	3068      	adds	r0, #104	; 0x68
    8d14:	f003 feae 	bl	ca74 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8d18:	b970      	cbnz	r0, 8d38 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd38>
    8d1a:	68a0      	ldr	r0, [r4, #8]
    8d1c:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    8d20:	2a12      	cmp	r2, #18
    8d22:	d009      	beq.n	8d38 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd38>
    8d24:	2301      	movs	r3, #1
    8d26:	2105      	movs	r1, #5
    8d28:	3068      	adds	r0, #104	; 0x68
    8d2a:	f003 fea3 	bl	ca74 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8d2e:	b108      	cbz	r0, 8d34 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd34>
    8d30:	2008      	movs	r0, #8
    8d32:	bd38      	pop	{r3, r4, r5, pc}
    8d34:	2001      	movs	r0, #1
    8d36:	bd38      	pop	{r3, r4, r5, pc}
    8d38:	68a0      	ldr	r0, [r4, #8]
    8d3a:	f890 00ac 	ldrb.w	r0, [r0, #172]	; 0xac
    8d3e:	b908      	cbnz	r0, 8d44 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd44>
    8d40:	f7ff f916 	bl	7f70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x228>
    8d44:	68a1      	ldr	r1, [r4, #8]
    8d46:	6920      	ldr	r0, [r4, #16]
    8d48:	f501 7184 	add.w	r1, r1, #264	; 0x108
    8d4c:	f004 f906 	bl	cf5c <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>
    8d50:	68a1      	ldr	r1, [r4, #8]
    8d52:	6920      	ldr	r0, [r4, #16]
    8d54:	31d8      	adds	r1, #216	; 0xd8
    8d56:	f004 f8f8 	bl	cf4a <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>
    8d5a:	68a1      	ldr	r1, [r4, #8]
    8d5c:	f891 01c4 	ldrb.w	r0, [r1, #452]	; 0x1c4
    8d60:	f88d 0000 	strb.w	r0, [sp]
    8d64:	9800      	ldr	r0, [sp, #0]
    8d66:	9000      	str	r0, [sp, #0]
    8d68:	f89d 0000 	ldrb.w	r0, [sp]
    8d6c:	b120      	cbz	r0, 8d78 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd78>
    8d6e:	f240 219d 	movw	r1, #669	; 0x29d
    8d72:	2031      	movs	r0, #49	; 0x31
    8d74:	f7fa ff0e 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8d78:	8808      	ldrh	r0, [r1, #0]
    8d7a:	f8a1 01c6 	strh.w	r0, [r1, #454]	; 0x1c6
    8d7e:	f501 71e4 	add.w	r1, r1, #456	; 0x1c8
    8d82:	6920      	ldr	r0, [r4, #16]
    8d84:	f004 f8e5 	bl	cf52 <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>
    8d88:	68a1      	ldr	r1, [r4, #8]
    8d8a:	6920      	ldr	r0, [r4, #16]
    8d8c:	f501 71e8 	add.w	r1, r1, #464	; 0x1d0
    8d90:	f004 f8d8 	bl	cf44 <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>
    8d94:	68a0      	ldr	r0, [r4, #8]
    8d96:	4601      	mov	r1, r0
    8d98:	2201      	movs	r2, #1
    8d9a:	f880 21c4 	strb.w	r2, [r0, #452]	; 0x1c4
    8d9e:	2014      	movs	r0, #20
    8da0:	f881 0076 	strb.w	r0, [r1, #118]	; 0x76
    8da4:	f000 fe52 	bl	9a4c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8da8:	2000      	movs	r0, #0
    8daa:	bd38      	pop	{r3, r4, r5, pc}
    8dac:	2000012c 	.word	0x2000012c
    8db0:	b51c      	push	{r2, r3, r4, lr}
    8db2:	4c13      	ldr	r4, [pc, #76]	; (8e00 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe00>)
    8db4:	68a0      	ldr	r0, [r4, #8]
    8db6:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
    8dba:	07c0      	lsls	r0, r0, #31
    8dbc:	d001      	beq.n	8dc2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdc2>
    8dbe:	2001      	movs	r0, #1
    8dc0:	bd1c      	pop	{r2, r3, r4, pc}
    8dc2:	4669      	mov	r1, sp
    8dc4:	6920      	ldr	r0, [r4, #16]
    8dc6:	f004 f8cf 	bl	cf68 <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>
    8dca:	f001 fa07 	bl	a1dc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    8dce:	f644 112f 	movw	r1, #18735	; 0x492f
    8dd2:	4008      	ands	r0, r1
    8dd4:	f89d 2000 	ldrb.w	r2, [sp]
    8dd8:	68a1      	ldr	r1, [r4, #8]
    8dda:	4002      	ands	r2, r0
    8ddc:	f801 2fb4 	strb.w	r2, [r1, #180]!
    8de0:	f89d 2001 	ldrb.w	r2, [sp, #1]
    8de4:	ea02 2010 	and.w	r0, r2, r0, lsr #8
    8de8:	7048      	strb	r0, [r1, #1]
    8dea:	f7ff f8c1 	bl	7f70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x228>
    8dee:	68a0      	ldr	r0, [r4, #8]
    8df0:	f810 1f77 	ldrb.w	r1, [r0, #119]!
    8df4:	f041 0101 	orr.w	r1, r1, #1
    8df8:	7001      	strb	r1, [r0, #0]
    8dfa:	2000      	movs	r0, #0
    8dfc:	bd1c      	pop	{r2, r3, r4, pc}
    8dfe:	0000      	.short	0x0000
    8e00:	2000012c 	.word	0x2000012c
    8e04:	4a0a      	ldr	r2, [pc, #40]	; (8e30 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe30>)
    8e06:	b510      	push	{r4, lr}
    8e08:	6890      	ldr	r0, [r2, #8]
    8e0a:	f890 1077 	ldrb.w	r1, [r0, #119]	; 0x77
    8e0e:	070b      	lsls	r3, r1, #28
    8e10:	d501      	bpl.n	8e16 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe16>
    8e12:	2001      	movs	r0, #1
    8e14:	bd10      	pop	{r4, pc}
    8e16:	f041 0108 	orr.w	r1, r1, #8
    8e1a:	f880 1077 	strb.w	r1, [r0, #119]	; 0x77
    8e1e:	6911      	ldr	r1, [r2, #16]
    8e20:	78c9      	ldrb	r1, [r1, #3]
    8e22:	f880 10e1 	strb.w	r1, [r0, #225]	; 0xe1
    8e26:	f7ff f8a3 	bl	7f70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x228>
    8e2a:	2000      	movs	r0, #0
    8e2c:	bd10      	pop	{r4, pc}
    8e2e:	0000      	.short	0x0000
    8e30:	2000012c 	.word	0x2000012c
    8e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8e36:	4c2e      	ldr	r4, [pc, #184]	; (8ef0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xef0>)
    8e38:	68a0      	ldr	r0, [r4, #8]
    8e3a:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
    8e3e:	f010 0f30 	tst.w	r0, #48	; 0x30
    8e42:	d001      	beq.n	8e48 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe48>
    8e44:	2001      	movs	r0, #1
    8e46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8e48:	6920      	ldr	r0, [r4, #16]
    8e4a:	f004 f8a8 	bl	cf9e <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    8e4e:	b350      	cbz	r0, 8ea6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xea6>
    8e50:	6920      	ldr	r0, [r4, #16]
    8e52:	f004 f896 	bl	cf82 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    8e56:	4607      	mov	r7, r0
    8e58:	6920      	ldr	r0, [r4, #16]
    8e5a:	f004 f896 	bl	cf8a <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    8e5e:	4606      	mov	r6, r0
    8e60:	6920      	ldr	r0, [r4, #16]
    8e62:	f004 f88c 	bl	cf7e <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    8e66:	4605      	mov	r5, r0
    8e68:	6920      	ldr	r0, [r4, #16]
    8e6a:	f004 f88c 	bl	cf86 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    8e6e:	4601      	mov	r1, r0
    8e70:	9700      	str	r7, [sp, #0]
    8e72:	68a0      	ldr	r0, [r4, #8]
    8e74:	4633      	mov	r3, r6
    8e76:	462a      	mov	r2, r5
    8e78:	3024      	adds	r0, #36	; 0x24
    8e7a:	f004 fad6 	bl	d42a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    8e7e:	78a0      	ldrb	r0, [r4, #2]
    8e80:	0780      	lsls	r0, r0, #30
    8e82:	d503      	bpl.n	8e8c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe8c>
    8e84:	68e0      	ldr	r0, [r4, #12]
    8e86:	78c0      	ldrb	r0, [r0, #3]
    8e88:	2814      	cmp	r0, #20
    8e8a:	d010      	beq.n	8eae <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xeae>
    8e8c:	68a1      	ldr	r1, [r4, #8]
    8e8e:	f891 0075 	ldrb.w	r0, [r1, #117]	; 0x75
    8e92:	281c      	cmp	r0, #28
    8e94:	d00b      	beq.n	8eae <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xeae>
    8e96:	f891 0058 	ldrb.w	r0, [r1, #88]	; 0x58
    8e9a:	2801      	cmp	r0, #1
    8e9c:	d00f      	beq.n	8ebe <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xebe>
    8e9e:	f891 019d 	ldrb.w	r0, [r1, #413]	; 0x19d
    8ea2:	b960      	cbnz	r0, 8ebe <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xebe>
    8ea4:	e008      	b.n	8eb8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xeb8>
    8ea6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8eaa:	f7ff bfab 	b.w	8e04 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe04>
    8eae:	68a1      	ldr	r1, [r4, #8]
    8eb0:	2001      	movs	r0, #1
    8eb2:	f881 0058 	strb.w	r0, [r1, #88]	; 0x58
    8eb6:	e002      	b.n	8ebe <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xebe>
    8eb8:	f891 019c 	ldrb.w	r0, [r1, #412]	; 0x19c
    8ebc:	b130      	cbz	r0, 8ecc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xecc>
    8ebe:	68a0      	ldr	r0, [r4, #8]
    8ec0:	f810 1f77 	ldrb.w	r1, [r0, #119]!
    8ec4:	f041 0110 	orr.w	r1, r1, #16
    8ec8:	7001      	strb	r1, [r0, #0]
    8eca:	e00d      	b.n	8ee8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xee8>
    8ecc:	f891 0077 	ldrb.w	r0, [r1, #119]	; 0x77
    8ed0:	f501 72f0 	add.w	r2, r1, #480	; 0x1e0
    8ed4:	f040 0020 	orr.w	r0, r0, #32
    8ed8:	f881 0077 	strb.w	r0, [r1, #119]	; 0x77
    8edc:	f831 0b24 	ldrh.w	r0, [r1], #36
    8ee0:	f004 faaa 	bl	d438 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    8ee4:	f000 fdb2 	bl	9a4c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8ee8:	f7ff f842 	bl	7f70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x228>
    8eec:	2000      	movs	r0, #0
    8eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8ef0:	2000012c 	.word	0x2000012c
    8ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8ef6:	4c1a      	ldr	r4, [pc, #104]	; (8f60 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf60>)
    8ef8:	2301      	movs	r3, #1
    8efa:	210a      	movs	r1, #10
    8efc:	68a0      	ldr	r0, [r4, #8]
    8efe:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    8f02:	3068      	adds	r0, #104	; 0x68
    8f04:	f003 fdb6 	bl	ca74 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8f08:	b338      	cbz	r0, 8f5a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf5a>
    8f0a:	6920      	ldr	r0, [r4, #16]
    8f0c:	f004 f847 	bl	cf9e <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    8f10:	b1c8      	cbz	r0, 8f46 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf46>
    8f12:	6920      	ldr	r0, [r4, #16]
    8f14:	f004 f835 	bl	cf82 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    8f18:	4607      	mov	r7, r0
    8f1a:	6920      	ldr	r0, [r4, #16]
    8f1c:	f004 f835 	bl	cf8a <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    8f20:	4606      	mov	r6, r0
    8f22:	6920      	ldr	r0, [r4, #16]
    8f24:	f004 f82b 	bl	cf7e <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    8f28:	4605      	mov	r5, r0
    8f2a:	6920      	ldr	r0, [r4, #16]
    8f2c:	f004 f82b 	bl	cf86 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    8f30:	4601      	mov	r1, r0
    8f32:	9700      	str	r7, [sp, #0]
    8f34:	68a0      	ldr	r0, [r4, #8]
    8f36:	4633      	mov	r3, r6
    8f38:	462a      	mov	r2, r5
    8f3a:	3024      	adds	r0, #36	; 0x24
    8f3c:	f004 fa75 	bl	d42a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    8f40:	68a0      	ldr	r0, [r4, #8]
    8f42:	f004 f9e8 	bl	d316 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    8f46:	68a1      	ldr	r1, [r4, #8]
    8f48:	2000      	movs	r0, #0
    8f4a:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    8f4e:	f881 0075 	strb.w	r0, [r1, #117]	; 0x75
    8f52:	f7ff f9b7 	bl	82c4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2c4>
    8f56:	2000      	movs	r0, #0
    8f58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8f5a:	2001      	movs	r0, #1
    8f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8f5e:	0000      	.short	0x0000
    8f60:	2000012c 	.word	0x2000012c
    8f64:	b510      	push	{r4, lr}
    8f66:	4c09      	ldr	r4, [pc, #36]	; (8f8c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf8c>)
    8f68:	68a0      	ldr	r0, [r4, #8]
    8f6a:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
    8f6e:	0740      	lsls	r0, r0, #29
    8f70:	d501      	bpl.n	8f76 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf76>
    8f72:	2001      	movs	r0, #1
    8f74:	bd10      	pop	{r4, pc}
    8f76:	f7fe fffb 	bl	7f70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x228>
    8f7a:	68a0      	ldr	r0, [r4, #8]
    8f7c:	f810 1f77 	ldrb.w	r1, [r0, #119]!
    8f80:	f041 0104 	orr.w	r1, r1, #4
    8f84:	7001      	strb	r1, [r0, #0]
    8f86:	2000      	movs	r0, #0
    8f88:	bd10      	pop	{r4, pc}
    8f8a:	0000      	.short	0x0000
    8f8c:	2000012c 	.word	0x2000012c
    8f90:	b510      	push	{r4, lr}
    8f92:	4c09      	ldr	r4, [pc, #36]	; (8fb8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xfb8>)
    8f94:	2301      	movs	r3, #1
    8f96:	2109      	movs	r1, #9
    8f98:	68a0      	ldr	r0, [r4, #8]
    8f9a:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    8f9e:	3068      	adds	r0, #104	; 0x68
    8fa0:	f003 fd68 	bl	ca74 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8fa4:	2800      	cmp	r0, #0
    8fa6:	d006      	beq.n	8fb6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xfb6>
    8fa8:	68a1      	ldr	r1, [r4, #8]
    8faa:	2000      	movs	r0, #0
    8fac:	f801 0f9a 	strb.w	r0, [r1, #154]!
    8fb0:	7308      	strb	r0, [r1, #12]
    8fb2:	f801 0c25 	strb.w	r0, [r1, #-37]
    8fb6:	bd10      	pop	{r4, pc}
    8fb8:	2000012c 	.word	0x2000012c
    8fbc:	b510      	push	{r4, lr}
    8fbe:	4c0f      	ldr	r4, [pc, #60]	; (8ffc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xffc>)
    8fc0:	2301      	movs	r3, #1
    8fc2:	2100      	movs	r1, #0
    8fc4:	68a0      	ldr	r0, [r4, #8]
    8fc6:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    8fca:	3068      	adds	r0, #104	; 0x68
    8fcc:	f003 fd52 	bl	ca74 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8fd0:	b138      	cbz	r0, 8fe2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xfe2>
    8fd2:	f7fe ffcd 	bl	7f70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x228>
    8fd6:	68a1      	ldr	r1, [r4, #8]
    8fd8:	2010      	movs	r0, #16
    8fda:	f881 0076 	strb.w	r0, [r1, #118]	; 0x76
    8fde:	2000      	movs	r0, #0
    8fe0:	bd10      	pop	{r4, pc}
    8fe2:	68a0      	ldr	r0, [r4, #8]
    8fe4:	2301      	movs	r3, #1
    8fe6:	2105      	movs	r1, #5
    8fe8:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    8fec:	3068      	adds	r0, #104	; 0x68
    8fee:	f003 fd41 	bl	ca74 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8ff2:	b108      	cbz	r0, 8ff8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xff8>
    8ff4:	2008      	movs	r0, #8
    8ff6:	bd10      	pop	{r4, pc}
    8ff8:	2001      	movs	r0, #1
    8ffa:	bd10      	pop	{r4, pc}
    8ffc:	2000012c 	.word	0x2000012c
    9000:	4806      	ldr	r0, [pc, #24]	; (901c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x101c>)
    9002:	6880      	ldr	r0, [r0, #8]
    9004:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    9008:	2911      	cmp	r1, #17
    900a:	d001      	beq.n	9010 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1010>
    900c:	2002      	movs	r0, #2
    900e:	4770      	bx	lr
    9010:	2112      	movs	r1, #18
    9012:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
    9016:	2000      	movs	r0, #0
    9018:	4770      	bx	lr
    901a:	0000      	.short	0x0000
    901c:	2000012c 	.word	0x2000012c
    9020:	b570      	push	{r4, r5, r6, lr}
    9022:	4c30      	ldr	r4, [pc, #192]	; (90e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x10e4>)
    9024:	2301      	movs	r3, #1
    9026:	210b      	movs	r1, #11
    9028:	68a0      	ldr	r0, [r4, #8]
    902a:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    902e:	3068      	adds	r0, #104	; 0x68
    9030:	f003 fd20 	bl	ca74 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9034:	bb48      	cbnz	r0, 908a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x108a>
    9036:	68a0      	ldr	r0, [r4, #8]
    9038:	2301      	movs	r3, #1
    903a:	2100      	movs	r1, #0
    903c:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    9040:	3068      	adds	r0, #104	; 0x68
    9042:	f003 fd17 	bl	ca74 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9046:	b1f0      	cbz	r0, 9086 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1086>
    9048:	68a0      	ldr	r0, [r4, #8]
    904a:	f890 0075 	ldrb.w	r0, [r0, #117]	; 0x75
    904e:	2824      	cmp	r0, #36	; 0x24
    9050:	d01b      	beq.n	908a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x108a>
    9052:	6920      	ldr	r0, [r4, #16]
    9054:	f003 ffbf 	bl	cfd6 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>
    9058:	b1c8      	cbz	r0, 908e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x108e>
    905a:	68a0      	ldr	r0, [r4, #8]
    905c:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    9060:	f041 0104 	orr.w	r1, r1, #4
    9064:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    9068:	6921      	ldr	r1, [r4, #16]
    906a:	794a      	ldrb	r2, [r1, #5]
    906c:	f002 0207 	and.w	r2, r2, #7
    9070:	f880 205b 	strb.w	r2, [r0, #91]	; 0x5b
    9074:	7909      	ldrb	r1, [r1, #4]
    9076:	f001 0107 	and.w	r1, r1, #7
    907a:	f880 105a 	strb.w	r1, [r0, #90]	; 0x5a
    907e:	f890 31a7 	ldrb.w	r3, [r0, #423]	; 0x1a7
    9082:	bb3b      	cbnz	r3, 90d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x10d4>
    9084:	e007      	b.n	9096 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1096>
    9086:	2001      	movs	r0, #1
    9088:	bd70      	pop	{r4, r5, r6, pc}
    908a:	2020      	movs	r0, #32
    908c:	bd70      	pop	{r4, r5, r6, pc}
    908e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9092:	f7ff beb7 	b.w	8e04 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe04>
    9096:	f890 31a6 	ldrb.w	r3, [r0, #422]	; 0x1a6
    909a:	2b01      	cmp	r3, #1
    909c:	d01a      	beq.n	90d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x10d4>
    909e:	f100 0362 	add.w	r3, r0, #98	; 0x62
    90a2:	2501      	movs	r5, #1
    90a4:	785e      	ldrb	r6, [r3, #1]
    90a6:	428e      	cmp	r6, r1
    90a8:	d106      	bne.n	90b8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x10b8>
    90aa:	7819      	ldrb	r1, [r3, #0]
    90ac:	4291      	cmp	r1, r2
    90ae:	d103      	bne.n	90b8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x10b8>
    90b0:	2102      	movs	r1, #2
    90b2:	f880 11a6 	strb.w	r1, [r0, #422]	; 0x1a6
    90b6:	e00d      	b.n	90d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x10d4>
    90b8:	f500 71fb 	add.w	r1, r0, #502	; 0x1f6
    90bc:	8802      	ldrh	r2, [r0, #0]
    90be:	f821 2902 	strh.w	r2, [r1], #-2
    90c2:	f890 205a 	ldrb.w	r2, [r0, #90]	; 0x5a
    90c6:	710a      	strb	r2, [r1, #4]
    90c8:	f890 005b 	ldrb.w	r0, [r0, #91]	; 0x5b
    90cc:	7148      	strb	r0, [r1, #5]
    90ce:	700d      	strb	r5, [r1, #0]
    90d0:	f000 fcbc 	bl	9a4c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    90d4:	68a1      	ldr	r1, [r4, #8]
    90d6:	2021      	movs	r0, #33	; 0x21
    90d8:	f881 0076 	strb.w	r0, [r1, #118]	; 0x76
    90dc:	f7fe ff48 	bl	7f70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x228>
    90e0:	2000      	movs	r0, #0
    90e2:	bd70      	pop	{r4, r5, r6, pc}
    90e4:	2000012c 	.word	0x2000012c
    90e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    90ec:	4c4e      	ldr	r4, [pc, #312]	; (9228 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1228>)
    90ee:	68a0      	ldr	r0, [r4, #8]
    90f0:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
    90f4:	2920      	cmp	r1, #32
    90f6:	d009      	beq.n	910c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x110c>
    90f8:	f05f 0700 	movs.w	r7, #0
    90fc:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    9100:	2922      	cmp	r1, #34	; 0x22
    9102:	d005      	beq.n	9110 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1110>
    9104:	b387      	cbz	r7, 9168 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1168>
    9106:	f100 0575 	add.w	r5, r0, #117	; 0x75
    910a:	e003      	b.n	9114 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1114>
    910c:	2701      	movs	r7, #1
    910e:	e7f5      	b.n	90fc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x10fc>
    9110:	f100 0576 	add.w	r5, r0, #118	; 0x76
    9114:	f810 1fb4 	ldrb.w	r1, [r0, #180]!
    9118:	f041 0104 	orr.w	r1, r1, #4
    911c:	7001      	strb	r1, [r0, #0]
    911e:	6920      	ldr	r0, [r4, #16]
    9120:	f7fc fd30 	bl	5b84 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>
    9124:	f04f 0801 	mov.w	r8, #1
    9128:	2600      	movs	r6, #0
    912a:	b308      	cbz	r0, 9170 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1170>
    912c:	4639      	mov	r1, r7
    912e:	6920      	ldr	r0, [r4, #16]
    9130:	f7fe ffd6 	bl	80e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe0>
    9134:	b1e0      	cbz	r0, 9170 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1170>
    9136:	466a      	mov	r2, sp
    9138:	6921      	ldr	r1, [r4, #16]
    913a:	68a0      	ldr	r0, [r4, #8]
    913c:	f003 fdbd 	bl	ccba <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>
    9140:	b388      	cbz	r0, 91a6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x11a6>
    9142:	6920      	ldr	r0, [r4, #16]
    9144:	f003 ff23 	bl	cf8e <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    9148:	68a1      	ldr	r1, [r4, #8]
    914a:	f8a1 018c 	strh.w	r0, [r1, #396]	; 0x18c
    914e:	f8b1 106c 	ldrh.w	r1, [r1, #108]	; 0x6c
    9152:	f004 ff75 	bl	e040 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    9156:	b338      	cbz	r0, 91a8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x11a8>
    9158:	68a0      	ldr	r0, [r4, #8]
    915a:	2128      	movs	r1, #40	; 0x28
    915c:	f880 108d 	strb.w	r1, [r0, #141]	; 0x8d
    9160:	306e      	adds	r0, #110	; 0x6e
    9162:	f880 801e 	strb.w	r8, [r0, #30]
    9166:	e053      	b.n	9210 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1210>
    9168:	e7ff      	b.n	916a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x116a>
    916a:	2002      	movs	r0, #2
    916c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9170:	68a0      	ldr	r0, [r4, #8]
    9172:	f04f 0900 	mov.w	r9, #0
    9176:	f890 11a6 	ldrb.w	r1, [r0, #422]	; 0x1a6
    917a:	2901      	cmp	r1, #1
    917c:	d015      	beq.n	91aa <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x11aa>
    917e:	f880 61a6 	strb.w	r6, [r0, #422]	; 0x1a6
    9182:	b1f7      	cbz	r7, 91c2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x11c2>
    9184:	6920      	ldr	r0, [r4, #16]
    9186:	68a1      	ldr	r1, [r4, #8]
    9188:	78c0      	ldrb	r0, [r0, #3]
    918a:	f881 00e2 	strb.w	r0, [r1, #226]	; 0xe2
    918e:	fa08 f200 	lsl.w	r2, r8, r0
    9192:	f3c2 6000 	ubfx	r0, r2, #24, #1
    9196:	b160      	cbz	r0, 91b2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x11b2>
    9198:	200a      	movs	r0, #10
    919a:	f881 0075 	strb.w	r0, [r1, #117]	; 0x75
    919e:	f891 00a6 	ldrb.w	r0, [r1, #166]	; 0xa6
    91a2:	b9a0      	cbnz	r0, 91ce <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x11ce>
    91a4:	e008      	b.n	91b8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x11b8>
    91a6:	e014      	b.n	91d2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x11d2>
    91a8:	e027      	b.n	91fa <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x11fa>
    91aa:	201e      	movs	r0, #30
    91ac:	f7ff fd02 	bl	8bb4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbb4>
    91b0:	e7e7      	b.n	9182 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1182>
    91b2:	f44f 7172 	mov.w	r1, #968	; 0x3c8
    91b6:	e001      	b.n	91bc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x11bc>
    91b8:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    91bc:	2031      	movs	r0, #49	; 0x31
    91be:	f7fa fce9 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    91c2:	702e      	strb	r6, [r5, #0]
    91c4:	f7fe fee0 	bl	7f88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x240>
    91c8:	f7ff fe1c 	bl	8e04 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe04>
    91cc:	4681      	mov	r9, r0
    91ce:	4648      	mov	r0, r9
    91d0:	e7cc      	b.n	916c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x116c>
    91d2:	68a0      	ldr	r0, [r4, #8]
    91d4:	f890 11a6 	ldrb.w	r1, [r0, #422]	; 0x1a6
    91d8:	2901      	cmp	r1, #1
    91da:	d009      	beq.n	91f0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x11f0>
    91dc:	f880 61a6 	strb.w	r6, [r0, #422]	; 0x1a6
    91e0:	68a0      	ldr	r0, [r4, #8]
    91e2:	f100 0176 	add.w	r1, r0, #118	; 0x76
    91e6:	428d      	cmp	r5, r1
    91e8:	d112      	bne.n	9210 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1210>
    91ea:	f880 6076 	strb.w	r6, [r0, #118]	; 0x76
    91ee:	e00f      	b.n	9210 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1210>
    91f0:	2000      	movs	r0, #0
    91f2:	f7ff fcdf 	bl	8bb4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbb4>
    91f6:	702e      	strb	r6, [r5, #0]
    91f8:	e7f2      	b.n	91e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x11e0>
    91fa:	68a0      	ldr	r0, [r4, #8]
    91fc:	f89d 1000 	ldrb.w	r1, [sp]
    9200:	f880 118e 	strb.w	r1, [r0, #398]	; 0x18e
    9204:	f89d 1001 	ldrb.w	r1, [sp, #1]
    9208:	f880 118f 	strb.w	r1, [r0, #399]	; 0x18f
    920c:	2024      	movs	r0, #36	; 0x24
    920e:	7028      	strb	r0, [r5, #0]
    9210:	68a0      	ldr	r0, [r4, #8]
    9212:	f100 0176 	add.w	r1, r0, #118	; 0x76
    9216:	428d      	cmp	r5, r1
    9218:	d102      	bne.n	9220 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1220>
    921a:	f7fe feb5 	bl	7f88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x240>
    921e:	e001      	b.n	9224 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1224>
    9220:	f880 60a6 	strb.w	r6, [r0, #166]	; 0xa6
    9224:	2000      	movs	r0, #0
    9226:	e7a1      	b.n	916c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x116c>
    9228:	2000012c 	.word	0x2000012c
    922c:	b510      	push	{r4, lr}
    922e:	4c0a      	ldr	r4, [pc, #40]	; (9258 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1258>)
    9230:	68a0      	ldr	r0, [r4, #8]
    9232:	f810 1fb4 	ldrb.w	r1, [r0, #180]!
    9236:	f041 0104 	orr.w	r1, r1, #4
    923a:	7001      	strb	r1, [r0, #0]
    923c:	6920      	ldr	r0, [r4, #16]
    923e:	f003 fed4 	bl	cfea <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>
    9242:	2816      	cmp	r0, #22
    9244:	d001      	beq.n	924a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x124a>
    9246:	2000      	movs	r0, #0
    9248:	bd10      	pop	{r4, pc}
    924a:	6920      	ldr	r0, [r4, #16]
    924c:	f003 fecf 	bl	cfee <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>
    9250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9254:	f7fe be6a 	b.w	7f2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e4>
    9258:	2000012c 	.word	0x2000012c
    925c:	4802      	ldr	r0, [pc, #8]	; (9268 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1268>)
    925e:	6900      	ldr	r0, [r0, #16]
    9260:	7900      	ldrb	r0, [r0, #4]
    9262:	f7fe be63 	b.w	7f2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e4>
    9266:	0000      	.short	0x0000
    9268:	2000012c 	.word	0x2000012c
    926c:	b510      	push	{r4, lr}
    926e:	4c08      	ldr	r4, [pc, #32]	; (9290 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1290>)
    9270:	68a0      	ldr	r0, [r4, #8]
    9272:	f890 0076 	ldrb.w	r0, [r0, #118]	; 0x76
    9276:	2817      	cmp	r0, #23
    9278:	d001      	beq.n	927e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x127e>
    927a:	2002      	movs	r0, #2
    927c:	bd10      	pop	{r4, pc}
    927e:	f7fe fe83 	bl	7f88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x240>
    9282:	68a1      	ldr	r1, [r4, #8]
    9284:	201b      	movs	r0, #27
    9286:	f881 0076 	strb.w	r0, [r1, #118]	; 0x76
    928a:	2000      	movs	r0, #0
    928c:	bd10      	pop	{r4, pc}
    928e:	0000      	.short	0x0000
    9290:	2000012c 	.word	0x2000012c
    9294:	b510      	push	{r4, lr}
    9296:	4c0b      	ldr	r4, [pc, #44]	; (92c4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x12c4>)
    9298:	2301      	movs	r3, #1
    929a:	4619      	mov	r1, r3
    929c:	68a0      	ldr	r0, [r4, #8]
    929e:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
    92a2:	3068      	adds	r0, #104	; 0x68
    92a4:	f003 fbe6 	bl	ca74 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    92a8:	b108      	cbz	r0, 92ae <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x12ae>
    92aa:	2000      	movs	r0, #0
    92ac:	bd10      	pop	{r4, pc}
    92ae:	6920      	ldr	r0, [r4, #16]
    92b0:	f003 fe71 	bl	cf96 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>
    92b4:	68a1      	ldr	r1, [r4, #8]
    92b6:	f881 0172 	strb.w	r0, [r1, #370]	; 0x172
    92ba:	2007      	movs	r0, #7
    92bc:	f881 0078 	strb.w	r0, [r1, #120]	; 0x78
    92c0:	e7f3      	b.n	92aa <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x12aa>
    92c2:	0000      	.short	0x0000
    92c4:	2000012c 	.word	0x2000012c
    92c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    92cc:	4d37      	ldr	r5, [pc, #220]	; (93ac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13ac>)
    92ce:	2600      	movs	r6, #0
    92d0:	4628      	mov	r0, r5
    92d2:	68a9      	ldr	r1, [r5, #8]
    92d4:	6900      	ldr	r0, [r0, #16]
    92d6:	2701      	movs	r7, #1
    92d8:	f891 3075 	ldrb.w	r3, [r1, #117]	; 0x75
    92dc:	7900      	ldrb	r0, [r0, #4]
    92de:	2b0e      	cmp	r3, #14
    92e0:	d101      	bne.n	92e6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x12e6>
    92e2:	2812      	cmp	r0, #18
    92e4:	d006      	beq.n	92f4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x12f4>
    92e6:	4a31      	ldr	r2, [pc, #196]	; (93ac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13ac>)
    92e8:	2400      	movs	r4, #0
    92ea:	6892      	ldr	r2, [r2, #8]
    92ec:	32b4      	adds	r2, #180	; 0xb4
    92ee:	2b1c      	cmp	r3, #28
    92f0:	d004      	beq.n	92fc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x12fc>
    92f2:	e005      	b.n	9300 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1300>
    92f4:	f7ff fe4c 	bl	8f90 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf90>
    92f8:	4606      	mov	r6, r0
    92fa:	e053      	b.n	93a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13a4>
    92fc:	2814      	cmp	r0, #20
    92fe:	d002      	beq.n	9306 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1306>
    9300:	2b04      	cmp	r3, #4
    9302:	d00b      	beq.n	931c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x131c>
    9304:	e00c      	b.n	9320 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1320>
    9306:	f881 4075 	strb.w	r4, [r1, #117]	; 0x75
    930a:	f881 40a6 	strb.w	r4, [r1, #166]	; 0xa6
    930e:	2105      	movs	r1, #5
    9310:	4610      	mov	r0, r2
    9312:	f004 fe26 	bl	df62 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x4ac>
    9316:	f7fe ffd5 	bl	82c4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2c4>
    931a:	e043      	b.n	93a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13a4>
    931c:	280e      	cmp	r0, #14
    931e:	d002      	beq.n	9326 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1326>
    9320:	2b20      	cmp	r3, #32
    9322:	d00f      	beq.n	9344 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1344>
    9324:	e010      	b.n	9348 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1348>
    9326:	f881 4075 	strb.w	r4, [r1, #117]	; 0x75
    932a:	f881 40a6 	strb.w	r4, [r1, #166]	; 0xa6
    932e:	8808      	ldrh	r0, [r1, #0]
    9330:	f8a1 0206 	strh.w	r0, [r1, #518]	; 0x206
    9334:	201a      	movs	r0, #26
    9336:	f881 0204 	strb.w	r0, [r1, #516]	; 0x204
    933a:	f881 7202 	strb.w	r7, [r1, #514]	; 0x202
    933e:	f000 fb85 	bl	9a4c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9342:	e02f      	b.n	93a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13a4>
    9344:	2816      	cmp	r0, #22
    9346:	d006      	beq.n	9356 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1356>
    9348:	2b26      	cmp	r3, #38	; 0x26
    934a:	d101      	bne.n	9350 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1350>
    934c:	2816      	cmp	r0, #22
    934e:	d002      	beq.n	9356 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1356>
    9350:	2817      	cmp	r0, #23
    9352:	d014      	beq.n	937e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x137e>
    9354:	e026      	b.n	93a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13a4>
    9356:	f801 4f75 	strb.w	r4, [r1, #117]!
    935a:	f881 4031 	strb.w	r4, [r1, #49]	; 0x31
    935e:	7848      	ldrb	r0, [r1, #1]
    9360:	2821      	cmp	r0, #33	; 0x21
    9362:	d01f      	beq.n	93a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13a4>
    9364:	2108      	movs	r1, #8
    9366:	4610      	mov	r0, r2
    9368:	f004 fdfb 	bl	df62 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x4ac>
    936c:	68a8      	ldr	r0, [r5, #8]
    936e:	210b      	movs	r1, #11
    9370:	30b4      	adds	r0, #180	; 0xb4
    9372:	f004 fdf6 	bl	df62 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x4ac>
    9376:	201a      	movs	r0, #26
    9378:	f7ff fc1c 	bl	8bb4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbb4>
    937c:	e012      	b.n	93a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13a4>
    937e:	f891 0076 	ldrb.w	r0, [r1, #118]	; 0x76
    9382:	2822      	cmp	r0, #34	; 0x22
    9384:	d10e      	bne.n	93a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13a4>
    9386:	f881 4076 	strb.w	r4, [r1, #118]	; 0x76
    938a:	f7fe fdfd 	bl	7f88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x240>
    938e:	68a8      	ldr	r0, [r5, #8]
    9390:	f890 01a6 	ldrb.w	r0, [r0, #422]	; 0x1a6
    9394:	2801      	cmp	r0, #1
    9396:	d102      	bne.n	939e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x139e>
    9398:	2000      	movs	r0, #0
    939a:	f7ff fc0b 	bl	8bb4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbb4>
    939e:	68a8      	ldr	r0, [r5, #8]
    93a0:	f880 41a6 	strb.w	r4, [r0, #422]	; 0x1a6
    93a4:	4630      	mov	r0, r6
    93a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    93aa:	0000      	.short	0x0000
    93ac:	2000012c 	.word	0x2000012c
    93b0:	b570      	push	{r4, r5, r6, lr}
    93b2:	4c2c      	ldr	r4, [pc, #176]	; (9464 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1464>)
    93b4:	68a0      	ldr	r0, [r4, #8]
    93b6:	f890 1077 	ldrb.w	r1, [r0, #119]	; 0x77
    93ba:	0789      	lsls	r1, r1, #30
    93bc:	d507      	bpl.n	93ce <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13ce>
    93be:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    93c2:	2301      	movs	r3, #1
    93c4:	2108      	movs	r1, #8
    93c6:	3068      	adds	r0, #104	; 0x68
    93c8:	f003 fb54 	bl	ca74 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    93cc:	b1e8      	cbz	r0, 940a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x140a>
    93ce:	68a0      	ldr	r0, [r4, #8]
    93d0:	f890 00ae 	ldrb.w	r0, [r0, #174]	; 0xae
    93d4:	0780      	lsls	r0, r0, #30
    93d6:	d412      	bmi.n	93fe <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13fe>
    93d8:	6920      	ldr	r0, [r4, #16]
    93da:	f003 fdde 	bl	cf9a <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>
    93de:	68a1      	ldr	r1, [r4, #8]
    93e0:	f881 00af 	strb.w	r0, [r1, #175]	; 0xaf
    93e4:	6920      	ldr	r0, [r4, #16]
    93e6:	f830 2f05 	ldrh.w	r2, [r0, #5]!
    93ea:	f8a1 20b0 	strh.w	r2, [r1, #176]	; 0xb0
    93ee:	8840      	ldrh	r0, [r0, #2]
    93f0:	f8a1 00b2 	strh.w	r0, [r1, #178]	; 0xb2
    93f4:	f811 0fae 	ldrb.w	r0, [r1, #174]!
    93f8:	f040 0002 	orr.w	r0, r0, #2
    93fc:	7008      	strb	r0, [r1, #0]
    93fe:	68a0      	ldr	r0, [r4, #8]
    9400:	f890 10ae 	ldrb.w	r1, [r0, #174]	; 0xae
    9404:	07c9      	lsls	r1, r1, #31
    9406:	d002      	beq.n	940e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x140e>
    9408:	e010      	b.n	942c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x142c>
    940a:	2001      	movs	r0, #1
    940c:	bd70      	pop	{r4, r5, r6, pc}
    940e:	f890 1077 	ldrb.w	r1, [r0, #119]	; 0x77
    9412:	078a      	lsls	r2, r1, #30
    9414:	d504      	bpl.n	9420 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1420>
    9416:	f240 21d9 	movw	r1, #729	; 0x2d9
    941a:	2031      	movs	r0, #49	; 0x31
    941c:	f7fa fbba 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9420:	f041 0102 	orr.w	r1, r1, #2
    9424:	f880 1077 	strb.w	r1, [r0, #119]	; 0x77
    9428:	f7fe fda2 	bl	7f70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x228>
    942c:	68a0      	ldr	r0, [r4, #8]
    942e:	2500      	movs	r5, #0
    9430:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
    9434:	2906      	cmp	r1, #6
    9436:	d105      	bne.n	9444 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1444>
    9438:	f880 5075 	strb.w	r5, [r0, #117]	; 0x75
    943c:	f880 50a6 	strb.w	r5, [r0, #166]	; 0xa6
    9440:	f000 fb04 	bl	9a4c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9444:	68a0      	ldr	r0, [r4, #8]
    9446:	f890 11ac 	ldrb.w	r1, [r0, #428]	; 0x1ac
    944a:	b149      	cbz	r1, 9460 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1460>
    944c:	f880 51ac 	strb.w	r5, [r0, #428]	; 0x1ac
    9450:	f000 fafc 	bl	9a4c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9454:	68a0      	ldr	r0, [r4, #8]
    9456:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
    945a:	b909      	cbnz	r1, 9460 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1460>
    945c:	f880 50a6 	strb.w	r5, [r0, #166]	; 0xa6
    9460:	2000      	movs	r0, #0
    9462:	bd70      	pop	{r4, r5, r6, pc}
    9464:	2000012c 	.word	0x2000012c
    9468:	b510      	push	{r4, lr}
    946a:	4c17      	ldr	r4, [pc, #92]	; (94c8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14c8>)
    946c:	68a3      	ldr	r3, [r4, #8]
    946e:	f893 00ea 	ldrb.w	r0, [r3, #234]	; 0xea
    9472:	2808      	cmp	r0, #8
    9474:	d20e      	bcs.n	9494 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1494>
    9476:	f100 0208 	add.w	r2, r0, #8
    947a:	f1c0 0008 	rsb	r0, r0, #8
    947e:	b2c1      	uxtb	r1, r0
    9480:	1898      	adds	r0, r3, r2
    9482:	f500 7084 	add.w	r0, r0, #264	; 0x108
    9486:	f7fa fc1d 	bl	3cc4 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    948a:	68a1      	ldr	r1, [r4, #8]
    948c:	f811 2fea 	ldrb.w	r2, [r1, #234]!
    9490:	4410      	add	r0, r2
    9492:	7008      	strb	r0, [r1, #0]
    9494:	68a3      	ldr	r3, [r4, #8]
    9496:	f893 00ea 	ldrb.w	r0, [r3, #234]	; 0xea
    949a:	3808      	subs	r0, #8
    949c:	2804      	cmp	r0, #4
    949e:	d211      	bcs.n	94c4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14c4>
    94a0:	1d02      	adds	r2, r0, #4
    94a2:	f1c0 0004 	rsb	r0, r0, #4
    94a6:	b2c1      	uxtb	r1, r0
    94a8:	1898      	adds	r0, r3, r2
    94aa:	30d8      	adds	r0, #216	; 0xd8
    94ac:	f7fa fc0a 	bl	3cc4 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    94b0:	68a0      	ldr	r0, [r4, #8]
    94b2:	2100      	movs	r1, #0
    94b4:	f880 10ea 	strb.w	r1, [r0, #234]	; 0xea
    94b8:	2101      	movs	r1, #1
    94ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    94be:	2004      	movs	r0, #4
    94c0:	f7ff ba96 	b.w	89f0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9f0>
    94c4:	bd10      	pop	{r4, pc}
    94c6:	0000      	.short	0x0000
    94c8:	2000012c 	.word	0x2000012c
    94cc:	4804      	ldr	r0, [pc, #16]	; (94e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14e0>)
    94ce:	2127      	movs	r1, #39	; 0x27
    94d0:	6880      	ldr	r0, [r0, #8]
    94d2:	f880 1075 	strb.w	r1, [r0, #117]	; 0x75
    94d6:	2100      	movs	r1, #0
    94d8:	f880 1184 	strb.w	r1, [r0, #388]	; 0x184
    94dc:	4770      	bx	lr
    94de:	0000      	.short	0x0000
    94e0:	2000012c 	.word	0x2000012c
    94e4:	4809      	ldr	r0, [pc, #36]	; (950c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x150c>)
    94e6:	b510      	push	{r4, lr}
    94e8:	6880      	ldr	r0, [r0, #8]
    94ea:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    94ee:	2914      	cmp	r1, #20
    94f0:	d004      	beq.n	94fc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14fc>
    94f2:	f240 6189 	movw	r1, #1673	; 0x689
    94f6:	2031      	movs	r0, #49	; 0x31
    94f8:	f7fa fb4c 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    94fc:	2101      	movs	r1, #1
    94fe:	f880 10ab 	strb.w	r1, [r0, #171]	; 0xab
    9502:	2115      	movs	r1, #21
    9504:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
    9508:	bd10      	pop	{r4, pc}
    950a:	0000      	.short	0x0000
    950c:	2000012c 	.word	0x2000012c
    9510:	b510      	push	{r4, lr}
    9512:	4c0a      	ldr	r4, [pc, #40]	; (953c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x153c>)
    9514:	68a0      	ldr	r0, [r4, #8]
    9516:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
    951a:	07c0      	lsls	r0, r0, #31
    951c:	d008      	beq.n	9530 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1530>
    951e:	f7fe fd33 	bl	7f88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x240>
    9522:	68a0      	ldr	r0, [r4, #8]
    9524:	f810 1f77 	ldrb.w	r1, [r0, #119]!
    9528:	f021 0101 	bic.w	r1, r1, #1
    952c:	7001      	strb	r1, [r0, #0]
    952e:	bd10      	pop	{r4, pc}
    9530:	f240 6172 	movw	r1, #1650	; 0x672
    9534:	2031      	movs	r0, #49	; 0x31
    9536:	f7fa fb2d 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    953a:	0000      	.short	0x0000
    953c:	2000012c 	.word	0x2000012c
    9540:	b510      	push	{r4, lr}
    9542:	4c0a      	ldr	r4, [pc, #40]	; (956c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x156c>)
    9544:	2301      	movs	r3, #1
    9546:	2100      	movs	r1, #0
    9548:	68a0      	ldr	r0, [r4, #8]
    954a:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    954e:	3068      	adds	r0, #104	; 0x68
    9550:	f003 fa90 	bl	ca74 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9554:	b120      	cbz	r0, 9560 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1560>
    9556:	68a1      	ldr	r1, [r4, #8]
    9558:	201c      	movs	r0, #28
    955a:	f881 0075 	strb.w	r0, [r1, #117]	; 0x75
    955e:	bd10      	pop	{r4, pc}
    9560:	f240 61f7 	movw	r1, #1783	; 0x6f7
    9564:	2031      	movs	r0, #49	; 0x31
    9566:	f7fa fb15 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    956a:	0000      	.short	0x0000
    956c:	2000012c 	.word	0x2000012c
    9570:	480a      	ldr	r0, [pc, #40]	; (959c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x159c>)
    9572:	b510      	push	{r4, lr}
    9574:	6880      	ldr	r0, [r0, #8]
    9576:	f890 1077 	ldrb.w	r1, [r0, #119]	; 0x77
    957a:	f3c1 1201 	ubfx	r2, r1, #4, #2
    957e:	2a01      	cmp	r2, #1
    9580:	d004      	beq.n	958c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x158c>
    9582:	f240 61fe 	movw	r1, #1790	; 0x6fe
    9586:	2031      	movs	r0, #49	; 0x31
    9588:	f7fa fb04 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    958c:	f021 0110 	bic.w	r1, r1, #16
    9590:	f880 1077 	strb.w	r1, [r0, #119]	; 0x77
    9594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9598:	f7fe bcf6 	b.w	7f88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x240>
    959c:	2000012c 	.word	0x2000012c
    95a0:	b510      	push	{r4, lr}
    95a2:	4c0a      	ldr	r4, [pc, #40]	; (95cc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x15cc>)
    95a4:	2301      	movs	r3, #1
    95a6:	2100      	movs	r1, #0
    95a8:	68a0      	ldr	r0, [r4, #8]
    95aa:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    95ae:	3068      	adds	r0, #104	; 0x68
    95b0:	f003 fa60 	bl	ca74 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    95b4:	b120      	cbz	r0, 95c0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x15c0>
    95b6:	68a1      	ldr	r1, [r4, #8]
    95b8:	200e      	movs	r0, #14
    95ba:	f881 0075 	strb.w	r0, [r1, #117]	; 0x75
    95be:	bd10      	pop	{r4, pc}
    95c0:	f240 61ea 	movw	r1, #1770	; 0x6ea
    95c4:	2031      	movs	r0, #49	; 0x31
    95c6:	f7fa fae5 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    95ca:	0000      	.short	0x0000
    95cc:	2000012c 	.word	0x2000012c
    95d0:	4804      	ldr	r0, [pc, #16]	; (95e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x15e4>)
    95d2:	6880      	ldr	r0, [r0, #8]
    95d4:	f810 1f77 	ldrb.w	r1, [r0, #119]!
    95d8:	f021 0104 	bic.w	r1, r1, #4
    95dc:	7001      	strb	r1, [r0, #0]
    95de:	f7fe bcd3 	b.w	7f88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x240>
    95e2:	0000      	.short	0x0000
    95e4:	2000012c 	.word	0x2000012c
    95e8:	4809      	ldr	r0, [pc, #36]	; (9610 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1610>)
    95ea:	b510      	push	{r4, lr}
    95ec:	6880      	ldr	r0, [r0, #8]
    95ee:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    95f2:	2910      	cmp	r1, #16
    95f4:	d004      	beq.n	9600 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1600>
    95f6:	f240 6181 	movw	r1, #1665	; 0x681
    95fa:	2031      	movs	r0, #49	; 0x31
    95fc:	f7fa faca 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9600:	2101      	movs	r1, #1
    9602:	f880 10ab 	strb.w	r1, [r0, #171]	; 0xab
    9606:	2111      	movs	r1, #17
    9608:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
    960c:	bd10      	pop	{r4, pc}
    960e:	0000      	.short	0x0000
    9610:	2000012c 	.word	0x2000012c
    9614:	b510      	push	{r4, lr}
    9616:	4c0a      	ldr	r4, [pc, #40]	; (9640 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1640>)
    9618:	2301      	movs	r3, #1
    961a:	2100      	movs	r1, #0
    961c:	68a0      	ldr	r0, [r4, #8]
    961e:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    9622:	3068      	adds	r0, #104	; 0x68
    9624:	f003 fa26 	bl	ca74 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9628:	b120      	cbz	r0, 9634 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1634>
    962a:	68a1      	ldr	r1, [r4, #8]
    962c:	201f      	movs	r0, #31
    962e:	f881 0075 	strb.w	r0, [r1, #117]	; 0x75
    9632:	bd10      	pop	{r4, pc}
    9634:	f240 710a 	movw	r1, #1802	; 0x70a
    9638:	2031      	movs	r0, #49	; 0x31
    963a:	f7fa faab 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    963e:	0000      	.short	0x0000
    9640:	2000012c 	.word	0x2000012c
    9644:	4808      	ldr	r0, [pc, #32]	; (9668 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1668>)
    9646:	b510      	push	{r4, lr}
    9648:	6880      	ldr	r0, [r0, #8]
    964a:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    964e:	2921      	cmp	r1, #33	; 0x21
    9650:	d005      	beq.n	965e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x165e>
    9652:	b121      	cbz	r1, 965e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x165e>
    9654:	f240 7111 	movw	r1, #1809	; 0x711
    9658:	2031      	movs	r0, #49	; 0x31
    965a:	f7fa fa9b 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    965e:	2122      	movs	r1, #34	; 0x22
    9660:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
    9664:	bd10      	pop	{r4, pc}
    9666:	0000      	.short	0x0000
    9668:	2000012c 	.word	0x2000012c
    966c:	4807      	ldr	r0, [pc, #28]	; (968c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x168c>)
    966e:	b510      	push	{r4, lr}
    9670:	6880      	ldr	r0, [r0, #8]
    9672:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    9676:	2915      	cmp	r1, #21
    9678:	d004      	beq.n	9684 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1684>
    967a:	f240 6196 	movw	r1, #1686	; 0x696
    967e:	2031      	movs	r0, #49	; 0x31
    9680:	f7fa fa88 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9684:	2119      	movs	r1, #25
    9686:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
    968a:	bd10      	pop	{r4, pc}
    968c:	2000012c 	.word	0x2000012c
    9690:	4807      	ldr	r0, [pc, #28]	; (96b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16b0>)
    9692:	b510      	push	{r4, lr}
    9694:	6880      	ldr	r0, [r0, #8]
    9696:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    969a:	2915      	cmp	r1, #21
    969c:	d004      	beq.n	96a8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16a8>
    969e:	f44f 61d2 	mov.w	r1, #1680	; 0x690
    96a2:	2031      	movs	r0, #49	; 0x31
    96a4:	f7fa fa76 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    96a8:	2117      	movs	r1, #23
    96aa:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
    96ae:	bd10      	pop	{r4, pc}
    96b0:	2000012c 	.word	0x2000012c
    96b4:	b570      	push	{r4, r5, r6, lr}
    96b6:	4d1b      	ldr	r5, [pc, #108]	; (9724 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1724>)
    96b8:	68a8      	ldr	r0, [r5, #8]
    96ba:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    96be:	291b      	cmp	r1, #27
    96c0:	d002      	beq.n	96c8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16c8>
    96c2:	f44f 61d6 	mov.w	r1, #1712	; 0x6b0
    96c6:	e007      	b.n	96d8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16d8>
    96c8:	2400      	movs	r4, #0
    96ca:	f880 40ab 	strb.w	r4, [r0, #171]	; 0xab
    96ce:	f890 11bc 	ldrb.w	r1, [r0, #444]	; 0x1bc
    96d2:	b121      	cbz	r1, 96de <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16de>
    96d4:	f240 61b4 	movw	r1, #1716	; 0x6b4
    96d8:	2031      	movs	r0, #49	; 0x31
    96da:	f7fa fa5b 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    96de:	f890 10ac 	ldrb.w	r1, [r0, #172]	; 0xac
    96e2:	b141      	cbz	r1, 96f6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16f6>
    96e4:	f880 40ac 	strb.w	r4, [r0, #172]	; 0xac
    96e8:	8801      	ldrh	r1, [r0, #0]
    96ea:	f8a0 11c0 	strh.w	r1, [r0, #448]	; 0x1c0
    96ee:	f880 41be 	strb.w	r4, [r0, #446]	; 0x1be
    96f2:	210c      	movs	r1, #12
    96f4:	e008      	b.n	9708 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1708>
    96f6:	8801      	ldrh	r1, [r0, #0]
    96f8:	f8a0 11c0 	strh.w	r1, [r0, #448]	; 0x1c0
    96fc:	f880 41be 	strb.w	r4, [r0, #446]	; 0x1be
    9700:	2101      	movs	r1, #1
    9702:	f880 11c2 	strb.w	r1, [r0, #450]	; 0x1c2
    9706:	210b      	movs	r1, #11
    9708:	f880 11bc 	strb.w	r1, [r0, #444]	; 0x1bc
    970c:	8800      	ldrh	r0, [r0, #0]
    970e:	f7fa fe75 	bl	43fc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    9712:	f002 ff22 	bl	c55a <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    9716:	f000 f999 	bl	9a4c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    971a:	68a8      	ldr	r0, [r5, #8]
    971c:	f880 4076 	strb.w	r4, [r0, #118]	; 0x76
    9720:	bd70      	pop	{r4, r5, r6, pc}
    9722:	0000      	.short	0x0000
    9724:	2000012c 	.word	0x2000012c
    9728:	b510      	push	{r4, lr}
    972a:	4c08      	ldr	r4, [pc, #32]	; (974c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x174c>)
    972c:	2301      	movs	r3, #1
    972e:	4619      	mov	r1, r3
    9730:	68a0      	ldr	r0, [r4, #8]
    9732:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
    9736:	3068      	adds	r0, #104	; 0x68
    9738:	f003 f99c 	bl	ca74 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    973c:	2800      	cmp	r0, #0
    973e:	d103      	bne.n	9748 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1748>
    9740:	68a1      	ldr	r1, [r4, #8]
    9742:	2008      	movs	r0, #8
    9744:	f881 0078 	strb.w	r0, [r1, #120]	; 0x78
    9748:	bd10      	pop	{r4, pc}
    974a:	0000      	.short	0x0000
    974c:	2000012c 	.word	0x2000012c
    9750:	4814      	ldr	r0, [pc, #80]	; (97a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x17a4>)
    9752:	b510      	push	{r4, lr}
    9754:	68c1      	ldr	r1, [r0, #12]
    9756:	6880      	ldr	r0, [r0, #8]
    9758:	7909      	ldrb	r1, [r1, #4]
    975a:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    975e:	2a0a      	cmp	r2, #10
    9760:	d109      	bne.n	9776 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1776>
    9762:	f890 20e2 	ldrb.w	r2, [r0, #226]	; 0xe2
    9766:	428a      	cmp	r2, r1
    9768:	d105      	bne.n	9776 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1776>
    976a:	2100      	movs	r1, #0
    976c:	f880 1075 	strb.w	r1, [r0, #117]	; 0x75
    9770:	f880 10a6 	strb.w	r1, [r0, #166]	; 0xa6
    9774:	bd10      	pop	{r4, pc}
    9776:	f890 2077 	ldrb.w	r2, [r0, #119]	; 0x77
    977a:	0713      	lsls	r3, r2, #28
    977c:	d507      	bpl.n	978e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x178e>
    977e:	f022 0108 	bic.w	r1, r2, #8
    9782:	f880 1077 	strb.w	r1, [r0, #119]	; 0x77
    9786:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    978a:	f7fe bbfd 	b.w	7f88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x240>
    978e:	29ff      	cmp	r1, #255	; 0xff
    9790:	d004      	beq.n	979c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x179c>
    9792:	f240 616c 	movw	r1, #1644	; 0x66c
    9796:	2031      	movs	r0, #49	; 0x31
    9798:	f7fa f9fc 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    979c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    97a0:	f7ff be94 	b.w	94cc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14cc>
    97a4:	2000012c 	.word	0x2000012c
    97a8:	b510      	push	{r4, lr}
    97aa:	4c15      	ldr	r4, [pc, #84]	; (9800 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1800>)
    97ac:	68a0      	ldr	r0, [r4, #8]
    97ae:	f890 10ae 	ldrb.w	r1, [r0, #174]	; 0xae
    97b2:	0789      	lsls	r1, r1, #30
    97b4:	d411      	bmi.n	97da <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x17da>
    97b6:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    97ba:	2301      	movs	r3, #1
    97bc:	2100      	movs	r1, #0
    97be:	3068      	adds	r0, #104	; 0x68
    97c0:	f003 f958 	bl	ca74 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    97c4:	b120      	cbz	r0, 97d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x17d0>
    97c6:	68a1      	ldr	r1, [r4, #8]
    97c8:	2006      	movs	r0, #6
    97ca:	f881 0075 	strb.w	r0, [r1, #117]	; 0x75
    97ce:	e009      	b.n	97e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x17e4>
    97d0:	f240 61d6 	movw	r1, #1750	; 0x6d6
    97d4:	2031      	movs	r0, #49	; 0x31
    97d6:	f7fa f9dd 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    97da:	2100      	movs	r1, #0
    97dc:	f880 10a6 	strb.w	r1, [r0, #166]	; 0xa6
    97e0:	f880 11ac 	strb.w	r1, [r0, #428]	; 0x1ac
    97e4:	68a0      	ldr	r0, [r4, #8]
    97e6:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
    97ea:	0780      	lsls	r0, r0, #30
    97ec:	d507      	bpl.n	97fe <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x17fe>
    97ee:	f7fe fbcb 	bl	7f88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x240>
    97f2:	68a0      	ldr	r0, [r4, #8]
    97f4:	f810 1f77 	ldrb.w	r1, [r0, #119]!
    97f8:	f021 0102 	bic.w	r1, r1, #2
    97fc:	7001      	strb	r1, [r0, #0]
    97fe:	bd10      	pop	{r4, pc}
    9800:	2000012c 	.word	0x2000012c
    9804:	4808      	ldr	r0, [pc, #32]	; (9828 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1828>)
    9806:	b510      	push	{r4, lr}
    9808:	6880      	ldr	r0, [r0, #8]
    980a:	f890 107b 	ldrb.w	r1, [r0, #123]	; 0x7b
    980e:	b941      	cbnz	r1, 9822 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1822>
    9810:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    9814:	2301      	movs	r3, #1
    9816:	2106      	movs	r1, #6
    9818:	3068      	adds	r0, #104	; 0x68
    981a:	f003 f92b 	bl	ca74 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    981e:	2800      	cmp	r0, #0
    9820:	d000      	beq.n	9824 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1824>
    9822:	2001      	movs	r0, #1
    9824:	bd10      	pop	{r4, pc}
    9826:	0000      	.short	0x0000
    9828:	2000012c 	.word	0x2000012c
    982c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    982e:	4c54      	ldr	r4, [pc, #336]	; (9980 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1980>)
    9830:	4606      	mov	r6, r0
    9832:	4615      	mov	r5, r2
    9834:	68a0      	ldr	r0, [r4, #8]
    9836:	b109      	cbz	r1, 983c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x183c>
    9838:	2100      	movs	r1, #0
    983a:	e004      	b.n	9846 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1846>
    983c:	f8b0 1106 	ldrh.w	r1, [r0, #262]	; 0x106
    9840:	f8b0 20f6 	ldrh.w	r2, [r0, #246]	; 0xf6
    9844:	4411      	add	r1, r2
    9846:	f8a0 1106 	strh.w	r1, [r0, #262]	; 0x106
    984a:	f890 1170 	ldrb.w	r1, [r0, #368]	; 0x170
    984e:	b939      	cbnz	r1, 9860 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1860>
    9850:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
    9854:	2301      	movs	r3, #1
    9856:	4619      	mov	r1, r3
    9858:	3068      	adds	r0, #104	; 0x68
    985a:	f003 f90b 	bl	ca74 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    985e:	b130      	cbz	r0, 986e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x186e>
    9860:	68a0      	ldr	r0, [r4, #8]
    9862:	f830 1fa0 	ldrh.w	r1, [r0, #160]!
    9866:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
    986a:	4411      	add	r1, r2
    986c:	8001      	strh	r1, [r0, #0]
    986e:	68a0      	ldr	r0, [r4, #8]
    9870:	f890 20a6 	ldrb.w	r2, [r0, #166]	; 0xa6
    9874:	b132      	cbz	r2, 9884 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1884>
    9876:	f8b0 10a2 	ldrh.w	r1, [r0, #162]	; 0xa2
    987a:	f8b0 30f6 	ldrh.w	r3, [r0, #246]	; 0xf6
    987e:	4419      	add	r1, r3
    9880:	f8a0 10a2 	strh.w	r1, [r0, #162]	; 0xa2
    9884:	f990 70aa 	ldrsb.w	r7, [r0, #170]	; 0xaa
    9888:	2f00      	cmp	r7, #0
    988a:	dd06      	ble.n	989a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x189a>
    988c:	f8b0 10a8 	ldrh.w	r1, [r0, #168]	; 0xa8
    9890:	f8b0 30f6 	ldrh.w	r3, [r0, #246]	; 0xf6
    9894:	4419      	add	r1, r3
    9896:	f8a0 10a8 	strh.w	r1, [r0, #168]	; 0xa8
    989a:	2101      	movs	r1, #1
    989c:	233d      	movs	r3, #61	; 0x3d
    989e:	b116      	cbz	r6, 98a6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x18a6>
    98a0:	f880 308d 	strb.w	r3, [r0, #141]	; 0x8d
    98a4:	e013      	b.n	98ce <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x18ce>
    98a6:	7824      	ldrb	r4, [r4, #0]
    98a8:	2c02      	cmp	r4, #2
    98aa:	d00a      	beq.n	98c2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x18c2>
    98ac:	2c01      	cmp	r4, #1
    98ae:	d012      	beq.n	98d6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x18d6>
    98b0:	b345      	cbz	r5, 9904 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1904>
    98b2:	f100 028c 	add.w	r2, r0, #140	; 0x8c
    98b6:	7011      	strb	r1, [r2, #0]
    98b8:	f015 0f14 	tst.w	r5, #20
    98bc:	d00e      	beq.n	98dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x18dc>
    98be:	211e      	movs	r1, #30
    98c0:	e018      	b.n	98f4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x18f4>
    98c2:	f890 20e6 	ldrb.w	r2, [r0, #230]	; 0xe6
    98c6:	2a06      	cmp	r2, #6
    98c8:	d03e      	beq.n	9948 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1948>
    98ca:	2216      	movs	r2, #22
    98cc:	e03c      	b.n	9948 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1948>
    98ce:	f100 028c 	add.w	r2, r0, #140	; 0x8c
    98d2:	7011      	strb	r1, [r2, #0]
    98d4:	e041      	b.n	995a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x195a>
    98d6:	f890 2172 	ldrb.w	r2, [r0, #370]	; 0x172
    98da:	e035      	b.n	9948 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1948>
    98dc:	0729      	lsls	r1, r5, #28
    98de:	d502      	bpl.n	98e6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x18e6>
    98e0:	f880 308d 	strb.w	r3, [r0, #141]	; 0x8d
    98e4:	e039      	b.n	995a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x195a>
    98e6:	06a9      	lsls	r1, r5, #26
    98e8:	d501      	bpl.n	98ee <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x18ee>
    98ea:	2123      	movs	r1, #35	; 0x23
    98ec:	e002      	b.n	98f4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x18f4>
    98ee:	07a9      	lsls	r1, r5, #30
    98f0:	d003      	beq.n	98fa <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x18fa>
    98f2:	212a      	movs	r1, #42	; 0x2a
    98f4:	f880 108d 	strb.w	r1, [r0, #141]	; 0x8d
    98f8:	e02f      	b.n	995a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x195a>
    98fa:	f640 419b 	movw	r1, #3227	; 0xc9b
    98fe:	2031      	movs	r0, #49	; 0x31
    9900:	f7fa f948 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9904:	b12a      	cbz	r2, 9912 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1912>
    9906:	f8b0 20a2 	ldrh.w	r2, [r0, #162]	; 0xa2
    990a:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
    990e:	429a      	cmp	r2, r3
    9910:	d210      	bcs.n	9934 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1934>
    9912:	2f00      	cmp	r7, #0
    9914:	dd05      	ble.n	9922 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1922>
    9916:	f8b0 20a8 	ldrh.w	r2, [r0, #168]	; 0xa8
    991a:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
    991e:	429a      	cmp	r2, r3
    9920:	d208      	bcs.n	9934 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1934>
    9922:	f8b0 30a0 	ldrh.w	r3, [r0, #160]	; 0xa0
    9926:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
    992a:	4293      	cmp	r3, r2
    992c:	d304      	bcc.n	9938 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1938>
    992e:	f890 3170 	ldrb.w	r3, [r0, #368]	; 0x170
    9932:	b10b      	cbz	r3, 9938 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1938>
    9934:	2222      	movs	r2, #34	; 0x22
    9936:	e007      	b.n	9948 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1948>
    9938:	f890 3079 	ldrb.w	r3, [r0, #121]	; 0x79
    993c:	b13b      	cbz	r3, 994e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x194e>
    993e:	f8b0 309c 	ldrh.w	r3, [r0, #156]	; 0x9c
    9942:	4293      	cmp	r3, r2
    9944:	d309      	bcc.n	995a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x195a>
    9946:	2208      	movs	r2, #8
    9948:	f880 208d 	strb.w	r2, [r0, #141]	; 0x8d
    994c:	e7bf      	b.n	98ce <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x18ce>
    994e:	f8b0 209c 	ldrh.w	r2, [r0, #156]	; 0x9c
    9952:	2a06      	cmp	r2, #6
    9954:	d301      	bcc.n	995a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x195a>
    9956:	223e      	movs	r2, #62	; 0x3e
    9958:	e7f6      	b.n	9948 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1948>
    995a:	f890 108c 	ldrb.w	r1, [r0, #140]	; 0x8c
    995e:	f88d 1000 	strb.w	r1, [sp]
    9962:	9900      	ldr	r1, [sp, #0]
    9964:	9100      	str	r1, [sp, #0]
    9966:	f89d 1000 	ldrb.w	r1, [sp]
    996a:	b119      	cbz	r1, 9974 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1974>
    996c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    9970:	f004 bb36 	b.w	dfe0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    9974:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    9978:	2100      	movs	r1, #0
    997a:	f7fd bb55 	b.w	7028 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    997e:	0000      	.short	0x0000
    9980:	2000012c 	.word	0x2000012c
    9984:	b570      	push	{r4, r5, r6, lr}
    9986:	4d2d      	ldr	r5, [pc, #180]	; (9a3c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a3c>)
    9988:	68a8      	ldr	r0, [r5, #8]
    998a:	f890 1079 	ldrb.w	r1, [r0, #121]	; 0x79
    998e:	b151      	cbz	r1, 99a6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x19a6>
    9990:	2901      	cmp	r1, #1
    9992:	d008      	beq.n	99a6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x19a6>
    9994:	2902      	cmp	r1, #2
    9996:	d009      	beq.n	99ac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x19ac>
    9998:	2903      	cmp	r1, #3
    999a:	d007      	beq.n	99ac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x19ac>
    999c:	f640 215f 	movw	r1, #2655	; 0xa5f
    99a0:	2031      	movs	r0, #49	; 0x31
    99a2:	f7fa f8f7 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    99a6:	f8b0 10f4 	ldrh.w	r1, [r0, #244]	; 0xf4
    99aa:	e035      	b.n	9a18 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a18>
    99ac:	f890 1078 	ldrb.w	r1, [r0, #120]	; 0x78
    99b0:	2908      	cmp	r1, #8
    99b2:	d034      	beq.n	9a1e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a1e>
    99b4:	f8b0 109c 	ldrh.w	r1, [r0, #156]	; 0x9c
    99b8:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
    99bc:	2400      	movs	r4, #0
    99be:	1c8b      	adds	r3, r1, #2
    99c0:	429a      	cmp	r2, r3
    99c2:	d306      	bcc.n	99d2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x19d2>
    99c4:	1a51      	subs	r1, r2, r1
    99c6:	1e89      	subs	r1, r1, #2
    99c8:	040c      	lsls	r4, r1, #16
    99ca:	0c24      	lsrs	r4, r4, #16
    99cc:	d001      	beq.n	99d2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x19d2>
    99ce:	1e64      	subs	r4, r4, #1
    99d0:	b2a4      	uxth	r4, r4
    99d2:	f890 109a 	ldrb.w	r1, [r0, #154]	; 0x9a
    99d6:	b139      	cbz	r1, 99e8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x19e8>
    99d8:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    99dc:	2301      	movs	r3, #1
    99de:	2109      	movs	r1, #9
    99e0:	3068      	adds	r0, #104	; 0x68
    99e2:	f003 f847 	bl	ca74 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    99e6:	b330      	cbz	r0, 9a36 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a36>
    99e8:	f7ff ff0c 	bl	9804 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1804>
    99ec:	b168      	cbz	r0, 9a0a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a0a>
    99ee:	68a9      	ldr	r1, [r5, #8]
    99f0:	2000      	movs	r0, #0
    99f2:	3190      	adds	r1, #144	; 0x90
    99f4:	c906      	ldmia	r1, {r1, r2}
    99f6:	1c8b      	adds	r3, r1, #2
    99f8:	429a      	cmp	r2, r3
    99fa:	d303      	bcc.n	9a04 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a04>
    99fc:	1a50      	subs	r0, r2, r1
    99fe:	1e80      	subs	r0, r0, #2
    9a00:	d000      	beq.n	9a04 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a04>
    9a02:	1e40      	subs	r0, r0, #1
    9a04:	42a0      	cmp	r0, r4
    9a06:	d200      	bcs.n	9a0a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a0a>
    9a08:	b284      	uxth	r4, r0
    9a0a:	b10c      	cbz	r4, 9a10 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a10>
    9a0c:	1e64      	subs	r4, r4, #1
    9a0e:	b2a4      	uxth	r4, r4
    9a10:	68a8      	ldr	r0, [r5, #8]
    9a12:	f8b0 10f4 	ldrh.w	r1, [r0, #244]	; 0xf4
    9a16:	4421      	add	r1, r4
    9a18:	f8a0 10f0 	strh.w	r1, [r0, #240]	; 0xf0
    9a1c:	bd70      	pop	{r4, r5, r6, pc}
    9a1e:	f8b0 109c 	ldrh.w	r1, [r0, #156]	; 0x9c
    9a22:	2903      	cmp	r1, #3
    9a24:	d3bf      	bcc.n	99a6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x19a6>
    9a26:	f830 1f6c 	ldrh.w	r1, [r0, #108]!
    9a2a:	8e42      	ldrh	r2, [r0, #50]	; 0x32
    9a2c:	4411      	add	r1, r2
    9a2e:	1c49      	adds	r1, r1, #1
    9a30:	f8a0 1084 	strh.w	r1, [r0, #132]	; 0x84
    9a34:	bd70      	pop	{r4, r5, r6, pc}
    9a36:	2400      	movs	r4, #0
    9a38:	e7ea      	b.n	9a10 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a10>
    9a3a:	0000      	.short	0x0000
    9a3c:	2000012c 	.word	0x2000012c

00009a40 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    9a40:	4901      	ldr	r1, [pc, #4]	; (9a48 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    9a42:	7008      	strb	r0, [r1, #0]
    9a44:	4770      	bx	lr
    9a46:	0000      	.short	0x0000
    9a48:	200002ab 	.word	0x200002ab

00009a4c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>:
    9a4c:	4801      	ldr	r0, [pc, #4]	; (9a54 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI+0x8>)
    9a4e:	7800      	ldrb	r0, [r0, #0]
    9a50:	f7f9 beda 	b.w	3808 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    9a54:	200002ab 	.word	0x200002ab

00009a58 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    9a58:	4903      	ldr	r1, [pc, #12]	; (9a68 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    9a5a:	888a      	ldrh	r2, [r1, #4]
    9a5c:	8002      	strh	r2, [r0, #0]
    9a5e:	7889      	ldrb	r1, [r1, #2]
    9a60:	7081      	strb	r1, [r0, #2]
    9a62:	2000      	movs	r0, #0
    9a64:	4770      	bx	lr
    9a66:	0000      	.short	0x0000
    9a68:	20000d48 	.word	0x20000d48

00009a6c <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    9a6c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    9a6e:	460c      	mov	r4, r1
    9a70:	4605      	mov	r5, r0
    9a72:	8800      	ldrh	r0, [r0, #0]
    9a74:	4669      	mov	r1, sp
    9a76:	f002 ffd3 	bl	ca20 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    9a7a:	2200      	movs	r2, #0
    9a7c:	b128      	cbz	r0, 9a8a <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x1e>
    9a7e:	f8c4 2002 	str.w	r2, [r4, #2]
    9a82:	71a2      	strb	r2, [r4, #6]
    9a84:	8022      	strh	r2, [r4, #0]
    9a86:	2002      	movs	r0, #2
    9a88:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    9a8a:	9901      	ldr	r1, [sp, #4]
    9a8c:	f111 0168 	adds.w	r1, r1, #104	; 0x68
    9a90:	f881 204e 	strb.w	r2, [r1, #78]	; 0x4e
    9a94:	f8d1 0016 	ldr.w	r0, [r1, #22]
    9a98:	f8c4 0002 	str.w	r0, [r4, #2]
    9a9c:	7e88      	ldrb	r0, [r1, #26]
    9a9e:	71a0      	strb	r0, [r4, #6]
    9aa0:	8828      	ldrh	r0, [r5, #0]
    9aa2:	8020      	strh	r0, [r4, #0]
    9aa4:	f891 004e 	ldrb.w	r0, [r1, #78]	; 0x4e
    9aa8:	2800      	cmp	r0, #0
    9aaa:	d1f1      	bne.n	9a90 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x24>
    9aac:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
	...

00009ab0 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    9ab0:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    9ab4:	460d      	mov	r5, r1
    9ab6:	4606      	mov	r6, r0
    9ab8:	f000 fb90 	bl	a1dc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    9abc:	f3c0 2000 	ubfx	r0, r0, #8, #1
    9ac0:	b1e0      	cbz	r0, 9afc <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x4c>
    9ac2:	8830      	ldrh	r0, [r6, #0]
    9ac4:	4669      	mov	r1, sp
    9ac6:	f002 ffab 	bl	ca20 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    9aca:	2800      	cmp	r0, #0
    9acc:	d114      	bne.n	9af8 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>
    9ace:	f8dd 4004 	ldr.w	r4, [sp, #4]
    9ad2:	2700      	movs	r7, #0
    9ad4:	f884 7064 	strb.w	r7, [r4, #100]	; 0x64
    9ad8:	f814 0f62 	ldrb.w	r0, [r4, #98]!
    9adc:	f004 fffb 	bl	ead6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x38>
    9ae0:	70a8      	strb	r0, [r5, #2]
    9ae2:	7860      	ldrb	r0, [r4, #1]
    9ae4:	f004 fff7 	bl	ead6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x38>
    9ae8:	70e8      	strb	r0, [r5, #3]
    9aea:	78a0      	ldrb	r0, [r4, #2]
    9aec:	3c62      	subs	r4, #98	; 0x62
    9aee:	2800      	cmp	r0, #0
    9af0:	d1f0      	bne.n	9ad4 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x24>
    9af2:	8830      	ldrh	r0, [r6, #0]
    9af4:	8028      	strh	r0, [r5, #0]
    9af6:	2000      	movs	r0, #0
    9af8:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    9afc:	2001      	movs	r0, #1
    9afe:	e7fb      	b.n	9af8 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>

00009b00 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
    9b00:	b51c      	push	{r2, r3, r4, lr}
    9b02:	8800      	ldrh	r0, [r0, #0]
    9b04:	4669      	mov	r1, sp
    9b06:	f002 ff8b 	bl	ca20 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    9b0a:	2800      	cmp	r0, #0
    9b0c:	d10b      	bne.n	9b26 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x26>
    9b0e:	480b      	ldr	r0, [pc, #44]	; (9b3c <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x3c>)
    9b10:	7800      	ldrb	r0, [r0, #0]
    9b12:	b188      	cbz	r0, 9b38 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x38>
    9b14:	9801      	ldr	r0, [sp, #4]
    9b16:	f005 f95c 	bl	edd2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x334>
    9b1a:	b128      	cbz	r0, 9b28 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x28>
    9b1c:	9801      	ldr	r0, [sp, #4]
    9b1e:	f890 01ad 	ldrb.w	r0, [r0, #429]	; 0x1ad
    9b22:	b118      	cbz	r0, 9b2c <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2c>
    9b24:	203a      	movs	r0, #58	; 0x3a
    9b26:	bd1c      	pop	{r2, r3, r4, pc}
    9b28:	2002      	movs	r0, #2
    9b2a:	bd1c      	pop	{r2, r3, r4, pc}
    9b2c:	9901      	ldr	r1, [sp, #4]
    9b2e:	2001      	movs	r0, #1
    9b30:	f881 01ad 	strb.w	r0, [r1, #429]	; 0x1ad
    9b34:	2000      	movs	r0, #0
    9b36:	bd1c      	pop	{r2, r3, r4, pc}
    9b38:	2011      	movs	r0, #17
    9b3a:	bd1c      	pop	{r2, r3, r4, pc}
    9b3c:	20000208 	.word	0x20000208

00009b40 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    9b40:	b510      	push	{r4, lr}
    9b42:	4604      	mov	r4, r0
    9b44:	f005 f93c 	bl	edc0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x322>
    9b48:	b130      	cbz	r0, 9b58 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x18>
    9b4a:	4804      	ldr	r0, [pc, #16]	; (9b5c <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x1c>)
    9b4c:	8881      	ldrh	r1, [r0, #4]
    9b4e:	8021      	strh	r1, [r4, #0]
    9b50:	88c0      	ldrh	r0, [r0, #6]
    9b52:	8060      	strh	r0, [r4, #2]
    9b54:	2000      	movs	r0, #0
    9b56:	bd10      	pop	{r4, pc}
    9b58:	2001      	movs	r0, #1
    9b5a:	bd10      	pop	{r4, pc}
    9b5c:	20000210 	.word	0x20000210

00009b60 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    9b60:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    9b62:	4605      	mov	r5, r0
    9b64:	f000 fb3a 	bl	a1dc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    9b68:	f3c0 2000 	ubfx	r0, r0, #8, #1
    9b6c:	b310      	cbz	r0, 9bb4 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x54>
    9b6e:	2400      	movs	r4, #0
    9b70:	a802      	add	r0, sp, #8
    9b72:	f88d 4004 	strb.w	r4, [sp, #4]
    9b76:	f88d 4008 	strb.w	r4, [sp, #8]
    9b7a:	9000      	str	r0, [sp, #0]
    9b7c:	78aa      	ldrb	r2, [r5, #2]
    9b7e:	7869      	ldrb	r1, [r5, #1]
    9b80:	7828      	ldrb	r0, [r5, #0]
    9b82:	ab01      	add	r3, sp, #4
    9b84:	f005 f977 	bl	ee76 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3d8>
    9b88:	2800      	cmp	r0, #0
    9b8a:	d112      	bne.n	9bb2 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x52>
    9b8c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    9b90:	f005 f877 	bl	ec82 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e4>
    9b94:	b180      	cbz	r0, 9bb8 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
    9b96:	f89d 0008 	ldrb.w	r0, [sp, #8]
    9b9a:	f005 f872 	bl	ec82 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e4>
    9b9e:	b158      	cbz	r0, 9bb8 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
    9ba0:	4806      	ldr	r0, [pc, #24]	; (9bbc <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x5c>)
    9ba2:	f89d 1004 	ldrb.w	r1, [sp, #4]
    9ba6:	7481      	strb	r1, [r0, #18]
    9ba8:	f89d 1008 	ldrb.w	r1, [sp, #8]
    9bac:	74c1      	strb	r1, [r0, #19]
    9bae:	8284      	strh	r4, [r0, #20]
    9bb0:	2000      	movs	r0, #0
    9bb2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    9bb4:	2001      	movs	r0, #1
    9bb6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    9bb8:	2011      	movs	r0, #17
    9bba:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    9bbc:	20000d48 	.word	0x20000d48

00009bc0 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    9bc0:	7801      	ldrb	r1, [r0, #0]
    9bc2:	b179      	cbz	r1, 9be4 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    9bc4:	7841      	ldrb	r1, [r0, #1]
    9bc6:	b169      	cbz	r1, 9be4 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    9bc8:	8841      	ldrh	r1, [r0, #2]
    9bca:	291b      	cmp	r1, #27
    9bcc:	d30a      	bcc.n	9be4 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    9bce:	8881      	ldrh	r1, [r0, #4]
    9bd0:	291b      	cmp	r1, #27
    9bd2:	d307      	bcc.n	9be4 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    9bd4:	4904      	ldr	r1, [pc, #16]	; (9be8 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    9bd6:	6802      	ldr	r2, [r0, #0]
    9bd8:	f8c1 2002 	str.w	r2, [r1, #2]
    9bdc:	8880      	ldrh	r0, [r0, #4]
    9bde:	80c8      	strh	r0, [r1, #6]
    9be0:	2000      	movs	r0, #0
    9be2:	4770      	bx	lr
    9be4:	2012      	movs	r0, #18
    9be6:	4770      	bx	lr
    9be8:	20000d48 	.word	0x20000d48

00009bec <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    9bec:	6800      	ldr	r0, [r0, #0]
    9bee:	f240 41e2 	movw	r1, #1250	; 0x4e2
    9bf2:	4288      	cmp	r0, r1
    9bf4:	d303      	bcc.n	9bfe <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    9bf6:	4903      	ldr	r1, [pc, #12]	; (9c04 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    9bf8:	6088      	str	r0, [r1, #8]
    9bfa:	2000      	movs	r0, #0
    9bfc:	4770      	bx	lr
    9bfe:	2012      	movs	r0, #18
    9c00:	4770      	bx	lr
    9c02:	0000      	.short	0x0000
    9c04:	20000d48 	.word	0x20000d48

00009c08 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    9c08:	4a03      	ldr	r2, [pc, #12]	; (9c18 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    9c0a:	e9d2 1200 	ldrd	r1, r2, [r2]
    9c0e:	6001      	str	r1, [r0, #0]
    9c10:	6042      	str	r2, [r0, #4]
    9c12:	2000      	movs	r0, #0
    9c14:	4770      	bx	lr
    9c16:	0000      	.short	0x0000
    9c18:	0000a07c 	.word	0x0000a07c

00009c1c <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>:
    9c1c:	b510      	push	{r4, lr}
    9c1e:	2005      	movs	r0, #5
    9c20:	f000 fad2 	bl	a1c8 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    9c24:	f7fd feb4 	bl	7990 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>
    9c28:	4902      	ldr	r1, [pc, #8]	; (9c34 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x18>)
    9c2a:	4801      	ldr	r0, [pc, #4]	; (9c30 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x14>)
    9c2c:	6048      	str	r0, [r1, #4]
    9c2e:	bd10      	pop	{r4, pc}
    9c30:	00009cbd 	.word	0x00009cbd
    9c34:	20000208 	.word	0x20000208

00009c38 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    9c38:	b510      	push	{r4, lr}
    9c3a:	f002 fe45 	bl	c8c8 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    9c3e:	f7fb fc55 	bl	54ec <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    9c42:	480f      	ldr	r0, [pc, #60]	; (9c80 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x48>)
    9c44:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9c48:	4b0e      	ldr	r3, [pc, #56]	; (9c84 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4c>)
    9c4a:	81c1      	strh	r1, [r0, #14]
    9c4c:	8201      	strh	r1, [r0, #16]
    9c4e:	2100      	movs	r1, #0
    9c50:	75c1      	strb	r1, [r0, #23]
    9c52:	8301      	strh	r1, [r0, #24]
    9c54:	8001      	strh	r1, [r0, #0]
    9c56:	221b      	movs	r2, #27
    9c58:	801a      	strh	r2, [r3, #0]
    9c5a:	f44f 74a4 	mov.w	r4, #328	; 0x148
    9c5e:	805c      	strh	r4, [r3, #2]
    9c60:	809a      	strh	r2, [r3, #4]
    9c62:	80dc      	strh	r4, [r3, #6]
    9c64:	7481      	strb	r1, [r0, #18]
    9c66:	74c1      	strb	r1, [r0, #19]
    9c68:	2303      	movs	r3, #3
    9c6a:	7083      	strb	r3, [r0, #2]
    9c6c:	2302      	movs	r3, #2
    9c6e:	70c3      	strb	r3, [r0, #3]
    9c70:	8082      	strh	r2, [r0, #4]
    9c72:	80c2      	strh	r2, [r0, #6]
    9c74:	f640 62a6 	movw	r2, #3750	; 0xea6
    9c78:	6082      	str	r2, [r0, #8]
    9c7a:	7581      	strb	r1, [r0, #22]
    9c7c:	7301      	strb	r1, [r0, #12]
    9c7e:	bd10      	pop	{r4, pc}
    9c80:	20000d48 	.word	0x20000d48
    9c84:	20000210 	.word	0x20000210

00009c88 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    9c88:	b510      	push	{r4, lr}
    9c8a:	b158      	cbz	r0, 9ca4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1c>
    9c8c:	490a      	ldr	r1, [pc, #40]	; (9cb8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x30>)
    9c8e:	780a      	ldrb	r2, [r1, #0]
    9c90:	b16a      	cbz	r2, 9cae <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x26>
    9c92:	2200      	movs	r2, #0
    9c94:	7042      	strb	r2, [r0, #1]
    9c96:	2303      	movs	r3, #3
    9c98:	7003      	strb	r3, [r0, #0]
    9c9a:	2301      	movs	r3, #1
    9c9c:	7103      	strb	r3, [r0, #4]
    9c9e:	700a      	strb	r2, [r1, #0]
    9ca0:	4618      	mov	r0, r3
    9ca2:	bd10      	pop	{r4, pc}
    9ca4:	f44f 51be 	mov.w	r1, #6080	; 0x17c0
    9ca8:	2039      	movs	r0, #57	; 0x39
    9caa:	f7f9 ff73 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9cae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9cb2:	f7fb bf97 	b.w	5be4 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA>
    9cb6:	0000      	.short	0x0000
    9cb8:	20000d48 	.word	0x20000d48
    9cbc:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9cc0:	4692      	mov	sl, r2
    9cc2:	460f      	mov	r7, r1
    9cc4:	4681      	mov	r9, r0
    9cc6:	f005 f87b 	bl	edc0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x322>
    9cca:	2800      	cmp	r0, #0
    9ccc:	d063      	beq.n	9d96 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    9cce:	4933      	ldr	r1, [pc, #204]	; (9d9c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x114>)
    9cd0:	f8b9 204c 	ldrh.w	r2, [r9, #76]	; 0x4c
    9cd4:	f8b9 604a 	ldrh.w	r6, [r9, #74]	; 0x4a
    9cd8:	8808      	ldrh	r0, [r1, #0]
    9cda:	4290      	cmp	r0, r2
    9cdc:	d300      	bcc.n	9ce0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x58>
    9cde:	4610      	mov	r0, r2
    9ce0:	4680      	mov	r8, r0
    9ce2:	8888      	ldrh	r0, [r1, #4]
    9ce4:	42b0      	cmp	r0, r6
    9ce6:	d200      	bcs.n	9cea <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x62>
    9ce8:	4606      	mov	r6, r0
    9cea:	884c      	ldrh	r4, [r1, #2]
    9cec:	f640 0048 	movw	r0, #2120	; 0x848
    9cf0:	4284      	cmp	r4, r0
    9cf2:	d300      	bcc.n	9cf6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x6e>
    9cf4:	4604      	mov	r4, r0
    9cf6:	88cd      	ldrh	r5, [r1, #6]
    9cf8:	4285      	cmp	r5, r0
    9cfa:	d300      	bcc.n	9cfe <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x76>
    9cfc:	4605      	mov	r5, r0
    9cfe:	4284      	cmp	r4, r0
    9d00:	d300      	bcc.n	9d04 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x7c>
    9d02:	4604      	mov	r4, r0
    9d04:	f44f 71a4 	mov.w	r1, #328	; 0x148
    9d08:	2e1b      	cmp	r6, #27
    9d0a:	d001      	beq.n	9d10 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x88>
    9d0c:	428d      	cmp	r5, r1
    9d0e:	d104      	bne.n	9d1a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x92>
    9d10:	f1b8 0f1b 	cmp.w	r8, #27
    9d14:	d03f      	beq.n	9d96 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    9d16:	428c      	cmp	r4, r1
    9d18:	d03d      	beq.n	9d96 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    9d1a:	466a      	mov	r2, sp
    9d1c:	4651      	mov	r1, sl
    9d1e:	4648      	mov	r0, r9
    9d20:	f004 ffd2 	bl	ecc8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x22a>
    9d24:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    9d28:	4641      	mov	r1, r8
    9d2a:	4540      	cmp	r0, r8
    9d2c:	d900      	bls.n	9d30 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa8>
    9d2e:	4608      	mov	r0, r1
    9d30:	80f8      	strh	r0, [r7, #6]
    9d32:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    9d36:	42a1      	cmp	r1, r4
    9d38:	d800      	bhi.n	9d3c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xb4>
    9d3a:	460c      	mov	r4, r1
    9d3c:	813c      	strh	r4, [r7, #8]
    9d3e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    9d42:	42b1      	cmp	r1, r6
    9d44:	d800      	bhi.n	9d48 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc0>
    9d46:	460e      	mov	r6, r1
    9d48:	807e      	strh	r6, [r7, #2]
    9d4a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    9d4e:	42a9      	cmp	r1, r5
    9d50:	d900      	bls.n	9d54 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    9d52:	4629      	mov	r1, r5
    9d54:	80b9      	strh	r1, [r7, #4]
    9d56:	2201      	movs	r2, #1
    9d58:	703a      	strb	r2, [r7, #0]
    9d5a:	381b      	subs	r0, #27
    9d5c:	28e0      	cmp	r0, #224	; 0xe0
    9d5e:	d902      	bls.n	9d66 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xde>
    9d60:	f640 419b 	movw	r1, #3227	; 0xc9b
    9d64:	e014      	b.n	9d90 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x108>
    9d66:	3e1b      	subs	r6, #27
    9d68:	2ee0      	cmp	r6, #224	; 0xe0
    9d6a:	d902      	bls.n	9d72 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xea>
    9d6c:	f640 419d 	movw	r1, #3229	; 0xc9d
    9d70:	e00e      	b.n	9d90 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x108>
    9d72:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    9d76:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    9d7a:	4284      	cmp	r4, r0
    9d7c:	d902      	bls.n	9d84 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xfc>
    9d7e:	f640 419f 	movw	r1, #3231	; 0xc9f
    9d82:	e005      	b.n	9d90 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x108>
    9d84:	f5a1 71a4 	sub.w	r1, r1, #328	; 0x148
    9d88:	4281      	cmp	r1, r0
    9d8a:	d904      	bls.n	9d96 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    9d8c:	f640 41a1 	movw	r1, #3233	; 0xca1
    9d90:	2039      	movs	r0, #57	; 0x39
    9d92:	f7f9 feff 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9d96:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9d9a:	0000      	.short	0x0000
    9d9c:	20000210 	.word	0x20000210

00009da0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
    9da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9da4:	b088      	sub	sp, #32
    9da6:	460c      	mov	r4, r1
    9da8:	4606      	mov	r6, r0
    9daa:	f003 fc4a 	bl	d642 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    9dae:	b198      	cbz	r0, 9dd8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x38>
    9db0:	4630      	mov	r0, r6
    9db2:	f003 fc39 	bl	d628 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    9db6:	b130      	cbz	r0, 9dc6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x26>
    9db8:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    9dbc:	2012      	movs	r0, #18
    9dbe:	2900      	cmp	r1, #0
    9dc0:	d00b      	beq.n	9dda <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    9dc2:	2980      	cmp	r1, #128	; 0x80
    9dc4:	d809      	bhi.n	9dda <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    9dc6:	4630      	mov	r0, r6
    9dc8:	f003 fc19 	bl	d5fe <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>
    9dcc:	b140      	cbz	r0, 9de0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    9dce:	4630      	mov	r0, r6
    9dd0:	f003 fba0 	bl	d514 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
    9dd4:	b130      	cbz	r0, 9de4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x44>
    9dd6:	e009      	b.n	9dec <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x4c>
    9dd8:	2042      	movs	r0, #66	; 0x42
    9dda:	b008      	add	sp, #32
    9ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9de0:	200c      	movs	r0, #12
    9de2:	e7fa      	b.n	9dda <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    9de4:	4630      	mov	r0, r6
    9de6:	f003 fc19 	bl	d61c <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
    9dea:	b3a8      	cbz	r0, 9e58 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xb8>
    9dec:	4630      	mov	r0, r6
    9dee:	f003 fe2c 	bl	da4a <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    9df2:	2800      	cmp	r0, #0
    9df4:	d1f4      	bne.n	9de0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    9df6:	4630      	mov	r0, r6
    9df8:	f003 fba7 	bl	d54a <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
    9dfc:	2800      	cmp	r0, #0
    9dfe:	d1ef      	bne.n	9de0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    9e00:	4630      	mov	r0, r6
    9e02:	f7fc f90d 	bl	6020 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
    9e06:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    9e0a:	f242 7110 	movw	r1, #10000	; 0x2710
    9e0e:	fb00 f801 	mul.w	r8, r0, r1
    9e12:	78e1      	ldrb	r1, [r4, #3]
    9e14:	4630      	mov	r0, r6
    9e16:	f003 fbe9 	bl	d5ec <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
    9e1a:	4630      	mov	r0, r6
    9e1c:	f003 fc00 	bl	d620 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    9e20:	b1e8      	cbz	r0, 9e5e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xbe>
    9e22:	2200      	movs	r2, #0
    9e24:	4611      	mov	r1, r2
    9e26:	a801      	add	r0, sp, #4
    9e28:	f7fa f92c 	bl	4084 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    9e2c:	0004      	movs	r4, r0
    9e2e:	d06a      	beq.n	9f06 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x166>
    9e30:	2100      	movs	r1, #0
    9e32:	f7fb fdc1 	bl	59b8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    9e36:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    9e3a:	8020      	strh	r0, [r4, #0]
    9e3c:	4621      	mov	r1, r4
    9e3e:	4630      	mov	r0, r6
    9e40:	f003 fc12 	bl	d668 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
    9e44:	f004 ffbc 	bl	edc0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x322>
    9e48:	4d3a      	ldr	r5, [pc, #232]	; (9f34 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x194>)
    9e4a:	2800      	cmp	r0, #0
    9e4c:	f104 0024 	add.w	r0, r4, #36	; 0x24
    9e50:	d00f      	beq.n	9e72 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xd2>
    9e52:	88aa      	ldrh	r2, [r5, #4]
    9e54:	88e9      	ldrh	r1, [r5, #6]
    9e56:	e00e      	b.n	9e76 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xd6>
    9e58:	e7ff      	b.n	9e5a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xba>
    9e5a:	2012      	movs	r0, #18
    9e5c:	e7bd      	b.n	9dda <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    9e5e:	4642      	mov	r2, r8
    9e60:	2100      	movs	r1, #0
    9e62:	4630      	mov	r0, r6
    9e64:	f7fc fffc 	bl	6e60 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA>
    9e68:	2800      	cmp	r0, #0
    9e6a:	d0b6      	beq.n	9dda <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    9e6c:	f241 31fd 	movw	r1, #5117	; 0x13fd
    9e70:	e053      	b.n	9f1a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    9e72:	221b      	movs	r2, #27
    9e74:	4611      	mov	r1, r2
    9e76:	84c2      	strh	r2, [r0, #38]	; 0x26
    9e78:	8501      	strh	r1, [r0, #40]	; 0x28
    9e7a:	68a8      	ldr	r0, [r5, #8]
    9e7c:	6260      	str	r0, [r4, #36]	; 0x24
    9e7e:	f641 574c 	movw	r7, #7500	; 0x1d4c
    9e82:	4630      	mov	r0, r6
    9e84:	f003 fbd4 	bl	d630 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    9e88:	b910      	cbnz	r0, 9e90 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xf0>
    9e8a:	4630      	mov	r0, r6
    9e8c:	f003 fbea 	bl	d664 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    9e90:	6067      	str	r7, [r4, #4]
    9e92:	8821      	ldrh	r1, [r4, #0]
    9e94:	f8ad 1008 	strh.w	r1, [sp, #8]
    9e98:	7ca9      	ldrb	r1, [r5, #18]
    9e9a:	f88d 100a 	strb.w	r1, [sp, #10]
    9e9e:	7ce9      	ldrb	r1, [r5, #19]
    9ea0:	f88d 100b 	strb.w	r1, [sp, #11]
    9ea4:	8aa9      	ldrh	r1, [r5, #20]
    9ea6:	f8ad 100c 	strh.w	r1, [sp, #12]
    9eaa:	a905      	add	r1, sp, #20
    9eac:	9100      	str	r1, [sp, #0]
    9eae:	2001      	movs	r0, #1
    9eb0:	ab04      	add	r3, sp, #16
    9eb2:	aa02      	add	r2, sp, #8
    9eb4:	4621      	mov	r1, r4
    9eb6:	f004 ff44 	bl	ed42 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2a4>
    9eba:	b140      	cbz	r0, 9ece <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x12e>
    9ebc:	2100      	movs	r1, #0
    9ebe:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    9ec2:	f7fa f909 	bl	40d8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    9ec6:	b1f0      	cbz	r0, 9f06 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x166>
    9ec8:	f241 4148 	movw	r1, #5192	; 0x1448
    9ecc:	e025      	b.n	9f1a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    9ece:	f89d 0010 	ldrb.w	r0, [sp, #16]
    9ed2:	f88d 0018 	strb.w	r0, [sp, #24]
    9ed6:	f89d 0014 	ldrb.w	r0, [sp, #20]
    9eda:	f88d 0019 	strb.w	r0, [sp, #25]
    9ede:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    9ee2:	f8ad 001a 	strh.w	r0, [sp, #26]
    9ee6:	a906      	add	r1, sp, #24
    9ee8:	4620      	mov	r0, r4
    9eea:	f002 fe58 	bl	cb9e <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    9eee:	78e8      	ldrb	r0, [r5, #3]
    9ef0:	9000      	str	r0, [sp, #0]
    9ef2:	78ab      	ldrb	r3, [r5, #2]
    9ef4:	88ea      	ldrh	r2, [r5, #6]
    9ef6:	88a9      	ldrh	r1, [r5, #4]
    9ef8:	8820      	ldrh	r0, [r4, #0]
    9efa:	f7fa f9b9 	bl	4270 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    9efe:	b120      	cbz	r0, 9f0a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x16a>
    9f00:	f241 4153 	movw	r1, #5203	; 0x1453
    9f04:	e009      	b.n	9f1a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    9f06:	2009      	movs	r0, #9
    9f08:	e767      	b.n	9dda <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    9f0a:	4642      	mov	r2, r8
    9f0c:	4621      	mov	r1, r4
    9f0e:	4630      	mov	r0, r6
    9f10:	f7fc ffa6 	bl	6e60 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA>
    9f14:	b120      	cbz	r0, 9f20 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x180>
    9f16:	f241 4155 	movw	r1, #5205	; 0x1455
    9f1a:	2039      	movs	r0, #57	; 0x39
    9f1c:	f7f9 fe3a 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9f20:	4805      	ldr	r0, [pc, #20]	; (9f38 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x198>)
    9f22:	6843      	ldr	r3, [r0, #4]
    9f24:	b123      	cbz	r3, 9f30 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x190>
    9f26:	2200      	movs	r2, #0
    9f28:	f504 71ce 	add.w	r1, r4, #412	; 0x19c
    9f2c:	4620      	mov	r0, r4
    9f2e:	4798      	blx	r3
    9f30:	2000      	movs	r0, #0
    9f32:	e752      	b.n	9dda <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    9f34:	20000d48 	.word	0x20000d48
    9f38:	20000208 	.word	0x20000208
    9f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9f40:	b088      	sub	sp, #32
    9f42:	4604      	mov	r4, r0
    9f44:	8800      	ldrh	r0, [r0, #0]
    9f46:	a906      	add	r1, sp, #24
    9f48:	f002 fd6a 	bl	ca20 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    9f4c:	2800      	cmp	r0, #0
    9f4e:	d147      	bne.n	9fe0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    9f50:	9807      	ldr	r0, [sp, #28]
    9f52:	2700      	movs	r7, #0
    9f54:	f890 11e0 	ldrb.w	r1, [r0, #480]	; 0x1e0
    9f58:	f88d 1008 	strb.w	r1, [sp, #8]
    9f5c:	9902      	ldr	r1, [sp, #8]
    9f5e:	9102      	str	r1, [sp, #8]
    9f60:	f89d 1008 	ldrb.w	r1, [sp, #8]
    9f64:	f88d 100c 	strb.w	r1, [sp, #12]
    9f68:	f890 1077 	ldrb.w	r1, [r0, #119]	; 0x77
    9f6c:	3068      	adds	r0, #104	; 0x68
    9f6e:	0689      	lsls	r1, r1, #26
    9f70:	d502      	bpl.n	9f78 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1d8>
    9f72:	f89d 100c 	ldrb.w	r1, [sp, #12]
    9f76:	b149      	cbz	r1, 9f8c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1ec>
    9f78:	f05f 0100 	movs.w	r1, #0
    9f7c:	f88d 1004 	strb.w	r1, [sp, #4]
    9f80:	2105      	movs	r1, #5
    9f82:	304c      	adds	r0, #76	; 0x4c
    9f84:	f004 f868 	bl	e058 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    9f88:	b110      	cbz	r0, 9f90 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1f0>
    9f8a:	e004      	b.n	9f96 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1f6>
    9f8c:	2101      	movs	r1, #1
    9f8e:	e7f5      	b.n	9f7c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1dc>
    9f90:	f89d 0004 	ldrb.w	r0, [sp, #4]
    9f94:	b318      	cbz	r0, 9fde <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x23e>
    9f96:	8921      	ldrh	r1, [r4, #8]
    9f98:	88e0      	ldrh	r0, [r4, #6]
    9f9a:	f004 fe87 	bl	ecac <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20e>
    9f9e:	2800      	cmp	r0, #0
    9fa0:	d11e      	bne.n	9fe0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    9fa2:	88a1      	ldrh	r1, [r4, #4]
    9fa4:	8860      	ldrh	r0, [r4, #2]
    9fa6:	f004 fe81 	bl	ecac <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20e>
    9faa:	2800      	cmp	r0, #0
    9fac:	d118      	bne.n	9fe0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    9fae:	8921      	ldrh	r1, [r4, #8]
    9fb0:	88e0      	ldrh	r0, [r4, #6]
    9fb2:	f004 fe71 	bl	ec98 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
    9fb6:	2800      	cmp	r0, #0
    9fb8:	d112      	bne.n	9fe0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    9fba:	88a1      	ldrh	r1, [r4, #4]
    9fbc:	8860      	ldrh	r0, [r4, #2]
    9fbe:	f004 fe6b 	bl	ec98 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
    9fc2:	0006      	movs	r6, r0
    9fc4:	d10c      	bne.n	9fe0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    9fc6:	9807      	ldr	r0, [sp, #28]
    9fc8:	f04f 0801 	mov.w	r8, #1
    9fcc:	f500 75ce 	add.w	r5, r0, #412	; 0x19c
    9fd0:	f880 819d 	strb.w	r8, [r0, #413]	; 0x19d
    9fd4:	f89d 100c 	ldrb.w	r1, [sp, #12]
    9fd8:	b129      	cbz	r1, 9fe6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x246>
    9fda:	263a      	movs	r6, #58	; 0x3a
    9fdc:	e02f      	b.n	a03e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x29e>
    9fde:	201a      	movs	r0, #26
    9fe0:	b008      	add	sp, #32
    9fe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9fe6:	4639      	mov	r1, r7
    9fe8:	aa03      	add	r2, sp, #12
    9fea:	f004 fe6d 	bl	ecc8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x22a>
    9fee:	8861      	ldrh	r1, [r4, #2]
    9ff0:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    9ff4:	4281      	cmp	r1, r0
    9ff6:	d200      	bcs.n	9ffa <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x25a>
    9ff8:	4608      	mov	r0, r1
    9ffa:	80e8      	strh	r0, [r5, #6]
    9ffc:	88a1      	ldrh	r1, [r4, #4]
    9ffe:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    a002:	4281      	cmp	r1, r0
    a004:	d200      	bcs.n	a008 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x268>
    a006:	4608      	mov	r0, r1
    a008:	8128      	strh	r0, [r5, #8]
    a00a:	88e2      	ldrh	r2, [r4, #6]
    a00c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    a010:	428a      	cmp	r2, r1
    a012:	d200      	bcs.n	a016 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x276>
    a014:	4611      	mov	r1, r2
    a016:	8069      	strh	r1, [r5, #2]
    a018:	8922      	ldrh	r2, [r4, #8]
    a01a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    a01e:	428a      	cmp	r2, r1
    a020:	d200      	bcs.n	a024 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x284>
    a022:	4611      	mov	r1, r2
    a024:	f640 0248 	movw	r2, #2120	; 0x848
    a028:	80a9      	strh	r1, [r5, #4]
    a02a:	4291      	cmp	r1, r2
    a02c:	d300      	bcc.n	a030 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x290>
    a02e:	4611      	mov	r1, r2
    a030:	80a9      	strh	r1, [r5, #4]
    a032:	4290      	cmp	r0, r2
    a034:	d200      	bcs.n	a038 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x298>
    a036:	4602      	mov	r2, r0
    a038:	812a      	strh	r2, [r5, #8]
    a03a:	f885 8000 	strb.w	r8, [r5]
    a03e:	706f      	strb	r7, [r5, #1]
    a040:	4630      	mov	r0, r6
    a042:	e7cd      	b.n	9fe0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    a044:	b510      	push	{r4, lr}
    a046:	4604      	mov	r4, r0
    a048:	88c1      	ldrh	r1, [r0, #6]
    a04a:	8880      	ldrh	r0, [r0, #4]
    a04c:	f004 fe2e 	bl	ecac <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20e>
    a050:	2800      	cmp	r0, #0
    a052:	d10f      	bne.n	a074 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d4>
    a054:	8861      	ldrh	r1, [r4, #2]
    a056:	8820      	ldrh	r0, [r4, #0]
    a058:	f004 fe28 	bl	ecac <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20e>
    a05c:	2800      	cmp	r0, #0
    a05e:	d109      	bne.n	a074 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d4>
    a060:	4805      	ldr	r0, [pc, #20]	; (a078 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d8>)
    a062:	88a1      	ldrh	r1, [r4, #4]
    a064:	8081      	strh	r1, [r0, #4]
    a066:	8821      	ldrh	r1, [r4, #0]
    a068:	8001      	strh	r1, [r0, #0]
    a06a:	88e1      	ldrh	r1, [r4, #6]
    a06c:	80c1      	strh	r1, [r0, #6]
    a06e:	8861      	ldrh	r1, [r4, #2]
    a070:	8041      	strh	r1, [r0, #2]
    a072:	2000      	movs	r0, #0
    a074:	bd10      	pop	{r4, pc}
    a076:	0000      	.short	0x0000
    a078:	20000210 	.word	0x20000210
    a07c:	0b125b0b 	.word	0x0b125b0b
    a080:	125b0059 	.word	0x125b0059
    a084:	05060708 	.word	0x05060708
    a088:	00020304 	.word	0x00020304
    a08c:	f0f4f8fc 	.word	0xf0f4f8fc
    a090:	0304d8ec 	.word	0x0304d8ec
    a094:	f4f8fc00 	.word	0xf4f8fc00
    a098:	00d8ecf0 	.word	0x00d8ecf0

0000a09c <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    a09c:	b510      	push	{r4, lr}
    a09e:	f7ff fccf 	bl	9a40 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    a0a2:	4804      	ldr	r0, [pc, #16]	; (a0b4 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x18>)
    a0a4:	6840      	ldr	r0, [r0, #4]
    a0a6:	f004 ff5e 	bl	ef66 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x3e>
    a0aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a0ae:	f004 bc8f 	b.w	e9d0 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    a0b2:	0000      	.short	0x0000
    a0b4:	20000218 	.word	0x20000218

0000a0b8 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    a0b8:	b510      	push	{r4, lr}
    a0ba:	4c07      	ldr	r4, [pc, #28]	; (a0d8 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x20>)
    a0bc:	68a0      	ldr	r0, [r4, #8]
    a0be:	f004 ff52 	bl	ef66 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x3e>
    a0c2:	68e0      	ldr	r0, [r4, #12]
    a0c4:	f004 ff4f 	bl	ef66 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x3e>
    a0c8:	f002 fbfe 	bl	c8c8 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    a0cc:	f7fb fa0e 	bl	54ec <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    a0d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a0d4:	f7ff bdb0 	b.w	9c38 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    a0d8:	20000218 	.word	0x20000218

0000a0dc <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
    a0dc:	b500      	push	{lr}
    a0de:	4905      	ldr	r1, [pc, #20]	; (a0f4 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
    a0e0:	4805      	ldr	r0, [pc, #20]	; (a0f8 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    a0e2:	f004 ff21 	bl	ef28 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    a0e6:	4804      	ldr	r0, [pc, #16]	; (a0f8 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    a0e8:	4904      	ldr	r1, [pc, #16]	; (a0fc <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
    a0ea:	1d00      	adds	r0, r0, #4
    a0ec:	f85d eb04 	ldr.w	lr, [sp], #4
    a0f0:	f004 bf1a 	b.w	ef28 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    a0f4:	20000228 	.word	0x20000228
    a0f8:	2000021c 	.word	0x2000021c
    a0fc:	20000230 	.word	0x20000230

0000a100 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>:
    a100:	b500      	push	{lr}
    a102:	4908      	ldr	r1, [pc, #32]	; (a124 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x24>)
    a104:	4808      	ldr	r0, [pc, #32]	; (a128 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    a106:	f004 ff0f 	bl	ef28 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    a10a:	4807      	ldr	r0, [pc, #28]	; (a128 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    a10c:	4907      	ldr	r1, [pc, #28]	; (a12c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x2c>)
    a10e:	1d00      	adds	r0, r0, #4
    a110:	f004 ff0a 	bl	ef28 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    a114:	4804      	ldr	r0, [pc, #16]	; (a128 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    a116:	4906      	ldr	r1, [pc, #24]	; (a130 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x30>)
    a118:	3008      	adds	r0, #8
    a11a:	f85d eb04 	ldr.w	lr, [sp], #4
    a11e:	f004 bf03 	b.w	ef28 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    a122:	0000      	.short	0x0000
    a124:	20000254 	.word	0x20000254
    a128:	2000021c 	.word	0x2000021c
    a12c:	2000025c 	.word	0x2000025c
    a130:	2000024c 	.word	0x2000024c

0000a134 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
    a134:	4801      	ldr	r0, [pc, #4]	; (a13c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
    a136:	7800      	ldrb	r0, [r0, #0]
    a138:	4770      	bx	lr
    a13a:	0000      	.short	0x0000
    a13c:	20000218 	.word	0x20000218
    a140:	b510      	push	{r4, lr}
    a142:	f7fc f8e3 	bl	630c <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
    a146:	f7fc ff23 	bl	6f90 <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY>
    a14a:	4805      	ldr	r0, [pc, #20]	; (a160 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x2c>)
    a14c:	f7fc f8c4 	bl	62d8 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
    a150:	4905      	ldr	r1, [pc, #20]	; (a168 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x34>)
    a152:	4804      	ldr	r0, [pc, #16]	; (a164 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x30>)
    a154:	6008      	str	r0, [r1, #0]
    a156:	4906      	ldr	r1, [pc, #24]	; (a170 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x3c>)
    a158:	4804      	ldr	r0, [pc, #16]	; (a16c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x38>)
    a15a:	6008      	str	r0, [r1, #0]
    a15c:	bd10      	pop	{r4, pc}
    a15e:	0000      	.short	0x0000
    a160:	20001113 	.word	0x20001113
    a164:	000060e1 	.word	0x000060e1
    a168:	20000238 	.word	0x20000238
    a16c:	00005c85 	.word	0x00005c85
    a170:	2000023c 	.word	0x2000023c
    a174:	490c      	ldr	r1, [pc, #48]	; (a1a8 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x74>)
    a176:	b510      	push	{r4, lr}
    a178:	2001      	movs	r0, #1
    a17a:	7008      	strb	r0, [r1, #0]
    a17c:	f7fc f8f6 	bl	636c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>
    a180:	f7fd fd5e 	bl	7c40 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>
    a184:	f002 fb8e 	bl	c8a4 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    a188:	4808      	ldr	r0, [pc, #32]	; (a1ac <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x78>)
    a18a:	f7fa fc3d 	bl	4a08 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
    a18e:	2000      	movs	r0, #0
    a190:	f7f9 feea 	bl	3f68 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    a194:	4907      	ldr	r1, [pc, #28]	; (a1b4 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x80>)
    a196:	4806      	ldr	r0, [pc, #24]	; (a1b0 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x7c>)
    a198:	6008      	str	r0, [r1, #0]
    a19a:	4908      	ldr	r1, [pc, #32]	; (a1bc <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x88>)
    a19c:	4806      	ldr	r0, [pc, #24]	; (a1b8 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x84>)
    a19e:	6008      	str	r0, [r1, #0]
    a1a0:	4908      	ldr	r1, [pc, #32]	; (a1c4 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x90>)
    a1a2:	4807      	ldr	r0, [pc, #28]	; (a1c0 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8c>)
    a1a4:	6008      	str	r0, [r1, #0]
    a1a6:	bd10      	pop	{r4, pc}
    a1a8:	20000218 	.word	0x20000218
    a1ac:	20001113 	.word	0x20001113
    a1b0:	000049b5 	.word	0x000049b5
    a1b4:	20000248 	.word	0x20000248
    a1b8:	000079c1 	.word	0x000079c1
    a1bc:	20000244 	.word	0x20000244
    a1c0:	00005cf9 	.word	0x00005cf9
    a1c4:	20000240 	.word	0x20000240

0000a1c8 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    a1c8:	2101      	movs	r1, #1
    a1ca:	4081      	lsls	r1, r0
    a1cc:	4802      	ldr	r0, [pc, #8]	; (a1d8 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x10>)
    a1ce:	6802      	ldr	r2, [r0, #0]
    a1d0:	4311      	orrs	r1, r2
    a1d2:	6001      	str	r1, [r0, #0]
    a1d4:	4770      	bx	lr
    a1d6:	0000      	.short	0x0000
    a1d8:	20000264 	.word	0x20000264

0000a1dc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    a1dc:	4801      	ldr	r0, [pc, #4]	; (a1e4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    a1de:	6800      	ldr	r0, [r0, #0]
    a1e0:	4770      	bx	lr
    a1e2:	0000      	.short	0x0000
    a1e4:	20000264 	.word	0x20000264

0000a1e8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    a1e8:	4803      	ldr	r0, [pc, #12]	; (a1f8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x10>)
    a1ea:	8800      	ldrh	r0, [r0, #0]
    a1ec:	f3c0 2000 	ubfx	r0, r0, #8, #1
    a1f0:	0040      	lsls	r0, r0, #1
    a1f2:	1c40      	adds	r0, r0, #1
    a1f4:	4770      	bx	lr
    a1f6:	0000      	.short	0x0000
    a1f8:	20000264 	.word	0x20000264

0000a1fc <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    a1fc:	b570      	push	{r4, r5, r6, lr}
    a1fe:	4605      	mov	r5, r0
    a200:	4616      	mov	r6, r2
    a202:	460c      	mov	r4, r1
    a204:	2002      	movs	r0, #2
    a206:	f000 f999 	bl	a53c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a20a:	4906      	ldr	r1, [pc, #24]	; (a224 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    a20c:	2001      	movs	r0, #1
    a20e:	1ef6      	subs	r6, r6, #3
    a210:	7008      	strb	r0, [r1, #0]
    a212:	4805      	ldr	r0, [pc, #20]	; (a228 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    a214:	6006      	str	r6, [r0, #0]
    a216:	4804      	ldr	r0, [pc, #16]	; (a228 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    a218:	3808      	subs	r0, #8
    a21a:	6005      	str	r5, [r0, #0]
    a21c:	1f00      	subs	r0, r0, #4
    a21e:	6004      	str	r4, [r0, #0]
    a220:	bd70      	pop	{r4, r5, r6, pc}
    a222:	0000      	.short	0x0000
    a224:	200002ac 	.word	0x200002ac
    a228:	4000f510 	.word	0x4000f510

0000a22c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    a22c:	b510      	push	{r4, lr}
    a22e:	4c0c      	ldr	r4, [pc, #48]	; (a260 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    a230:	7820      	ldrb	r0, [r4, #0]
    a232:	b180      	cbz	r0, a256 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    a234:	490b      	ldr	r1, [pc, #44]	; (a264 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    a236:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    a23a:	6008      	str	r0, [r1, #0]
    a23c:	f000 f86a 	bl	a314 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    a240:	2100      	movs	r1, #0
    a242:	b120      	cbz	r0, a24e <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    a244:	2001      	movs	r0, #1
    a246:	7060      	strb	r0, [r4, #1]
    a248:	4807      	ldr	r0, [pc, #28]	; (a268 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    a24a:	6800      	ldr	r0, [r0, #0]
    a24c:	e001      	b.n	a252 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    a24e:	7061      	strb	r1, [r4, #1]
    a250:	2010      	movs	r0, #16
    a252:	70a0      	strb	r0, [r4, #2]
    a254:	7021      	strb	r1, [r4, #0]
    a256:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a25a:	2000      	movs	r0, #0
    a25c:	f000 b96e 	b.w	a53c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a260:	200002ac 	.word	0x200002ac
    a264:	4001f508 	.word	0x4001f508
    a268:	4000f400 	.word	0x4000f400

0000a26c <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    a26c:	b510      	push	{r4, lr}
    a26e:	2002      	movs	r0, #2
    a270:	f000 f964 	bl	a53c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a274:	4904      	ldr	r1, [pc, #16]	; (a288 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    a276:	2001      	movs	r0, #1
    a278:	7008      	strb	r0, [r1, #0]
    a27a:	f000 f859 	bl	a330 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    a27e:	4903      	ldr	r1, [pc, #12]	; (a28c <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    a280:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    a284:	6008      	str	r0, [r1, #0]
    a286:	bd10      	pop	{r4, pc}
    a288:	200002ac 	.word	0x200002ac
    a28c:	4001f504 	.word	0x4001f504

0000a290 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    a290:	4803      	ldr	r0, [pc, #12]	; (a2a0 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    a292:	2100      	movs	r1, #0
    a294:	7001      	strb	r1, [r0, #0]
    a296:	7041      	strb	r1, [r0, #1]
    a298:	2110      	movs	r1, #16
    a29a:	7081      	strb	r1, [r0, #2]
    a29c:	4770      	bx	lr
    a29e:	0000      	.short	0x0000
    a2a0:	200002ac 	.word	0x200002ac

0000a2a4 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    a2a4:	4807      	ldr	r0, [pc, #28]	; (a2c4 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    a2a6:	b510      	push	{r4, lr}
    a2a8:	7801      	ldrb	r1, [r0, #0]
    a2aa:	b141      	cbz	r1, a2be <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    a2ac:	f000 f832 	bl	a314 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    a2b0:	b118      	cbz	r0, a2ba <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    a2b2:	4805      	ldr	r0, [pc, #20]	; (a2c8 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    a2b4:	6800      	ldr	r0, [r0, #0]
    a2b6:	b2c0      	uxtb	r0, r0
    a2b8:	bd10      	pop	{r4, pc}
    a2ba:	2010      	movs	r0, #16
    a2bc:	bd10      	pop	{r4, pc}
    a2be:	7880      	ldrb	r0, [r0, #2]
    a2c0:	bd10      	pop	{r4, pc}
    a2c2:	0000      	.short	0x0000
    a2c4:	200002ac 	.word	0x200002ac
    a2c8:	4000f400 	.word	0x4000f400

0000a2cc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    a2cc:	4808      	ldr	r0, [pc, #32]	; (a2f0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    a2ce:	b510      	push	{r4, lr}
    a2d0:	7801      	ldrb	r1, [r0, #0]
    a2d2:	b159      	cbz	r1, a2ec <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    a2d4:	4807      	ldr	r0, [pc, #28]	; (a2f4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    a2d6:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    a2da:	b128      	cbz	r0, a2e8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    a2dc:	f000 f80c 	bl	a2f8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    a2e0:	2800      	cmp	r0, #0
    a2e2:	d000      	beq.n	a2e6 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    a2e4:	2001      	movs	r0, #1
    a2e6:	bd10      	pop	{r4, pc}
    a2e8:	2002      	movs	r0, #2
    a2ea:	bd10      	pop	{r4, pc}
    a2ec:	7840      	ldrb	r0, [r0, #1]
    a2ee:	bd10      	pop	{r4, pc}
    a2f0:	200002ac 	.word	0x200002ac
    a2f4:	4000f000 	.word	0x4000f000
    a2f8:	4805      	ldr	r0, [pc, #20]	; (a310 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    a2fa:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    a2fe:	b111      	cbz	r1, a306 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    a300:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    a304:	b108      	cbz	r0, a30a <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    a306:	2000      	movs	r0, #0
    a308:	4770      	bx	lr
    a30a:	2001      	movs	r0, #1
    a30c:	4770      	bx	lr
    a30e:	0000      	.short	0x0000
    a310:	4000f000 	.word	0x4000f000
    a314:	4805      	ldr	r0, [pc, #20]	; (a32c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    a316:	b510      	push	{r4, lr}
    a318:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    a31c:	b120      	cbz	r0, a328 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    a31e:	f7ff ffeb 	bl	a2f8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    a322:	b108      	cbz	r0, a328 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    a324:	2001      	movs	r0, #1
    a326:	bd10      	pop	{r4, pc}
    a328:	2000      	movs	r0, #0
    a32a:	bd10      	pop	{r4, pc}
    a32c:	4000f000 	.word	0x4000f000
    a330:	4804      	ldr	r0, [pc, #16]	; (a344 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    a332:	2100      	movs	r1, #0
    a334:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    a338:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    a33c:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    a340:	4770      	bx	lr
    a342:	0000      	.short	0x0000
    a344:	4000f000 	.word	0x4000f000

0000a348 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>:
    a348:	4a08      	ldr	r2, [pc, #32]	; (a36c <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x24>)
    a34a:	b510      	push	{r4, lr}
    a34c:	e9c2 0102 	strd	r0, r1, [r2, #8]
    a350:	4907      	ldr	r1, [pc, #28]	; (a370 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x28>)
    a352:	4610      	mov	r0, r2
    a354:	f7f9 fb04 	bl	3960 <mpsl_fem_lna_configuration_set>
    a358:	2800      	cmp	r0, #0
    a35a:	d005      	beq.n	a368 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    a35c:	1c40      	adds	r0, r0, #1
    a35e:	d003      	beq.n	a368 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    a360:	217d      	movs	r1, #125	; 0x7d
    a362:	2040      	movs	r0, #64	; 0x40
    a364:	f7f9 fc16 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a368:	bd10      	pop	{r4, pc}
    a36a:	0000      	.short	0x0000
    a36c:	20000268 	.word	0x20000268
    a370:	0000a3a0 	.word	0x0000a3a0

0000a374 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>:
    a374:	4a08      	ldr	r2, [pc, #32]	; (a398 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x24>)
    a376:	b510      	push	{r4, lr}
    a378:	e9c2 0102 	strd	r0, r1, [r2, #8]
    a37c:	4907      	ldr	r1, [pc, #28]	; (a39c <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x28>)
    a37e:	4610      	mov	r0, r2
    a380:	f7f9 fafa 	bl	3978 <mpsl_fem_pa_configuration_set>
    a384:	2800      	cmp	r0, #0
    a386:	d005      	beq.n	a394 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    a388:	1c40      	adds	r0, r0, #1
    a38a:	d003      	beq.n	a394 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    a38c:	2172      	movs	r1, #114	; 0x72
    a38e:	2040      	movs	r0, #64	; 0x40
    a390:	f7f9 fc00 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a394:	bd10      	pop	{r4, pc}
    a396:	0000      	.short	0x0000
    a398:	20000268 	.word	0x20000268
    a39c:	0000a3a0 	.word	0x0000a3a0
    a3a0:	00000001 	.word	0x00000001
    a3a4:	40001110 	.word	0x40001110
	...

0000a3b8 <sym_2A6IJT7MGQ7OBCRC2X2OJJKRLO2X7VBUN6GSTWQ>:
    a3b8:	b570      	push	{r4, r5, r6, lr}
    a3ba:	4606      	mov	r6, r0
    a3bc:	4614      	mov	r4, r2
    a3be:	460d      	mov	r5, r1
    a3c0:	2001      	movs	r0, #1
    a3c2:	f000 f8bb 	bl	a53c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a3c6:	4803      	ldr	r0, [pc, #12]	; (a3d4 <sym_2A6IJT7MGQ7OBCRC2X2OJJKRLO2X7VBUN6GSTWQ+0x1c>)
    a3c8:	6006      	str	r6, [r0, #0]
    a3ca:	1d00      	adds	r0, r0, #4
    a3cc:	6004      	str	r4, [r0, #0]
    a3ce:	1d00      	adds	r0, r0, #4
    a3d0:	6005      	str	r5, [r0, #0]
    a3d2:	bd70      	pop	{r4, r5, r6, pc}
    a3d4:	4000f508 	.word	0x4000f508

0000a3d8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    a3d8:	480a      	ldr	r0, [pc, #40]	; (a404 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x2c>)
    a3da:	7801      	ldrb	r1, [r0, #0]
    a3dc:	b171      	cbz	r1, a3fc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x24>
    a3de:	4a0a      	ldr	r2, [pc, #40]	; (a408 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x30>)
    a3e0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
    a3e4:	6011      	str	r1, [r2, #0]
    a3e6:	4909      	ldr	r1, [pc, #36]	; (a40c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x34>)
    a3e8:	f8d1 2104 	ldr.w	r2, [r1, #260]	; 0x104
    a3ec:	2100      	movs	r1, #0
    a3ee:	b11a      	cbz	r2, a3f8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x20>
    a3f0:	4a07      	ldr	r2, [pc, #28]	; (a410 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x38>)
    a3f2:	6812      	ldr	r2, [r2, #0]
    a3f4:	7042      	strb	r2, [r0, #1]
    a3f6:	e000      	b.n	a3fa <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x22>
    a3f8:	7041      	strb	r1, [r0, #1]
    a3fa:	7001      	strb	r1, [r0, #0]
    a3fc:	2000      	movs	r0, #0
    a3fe:	f000 b89d 	b.w	a53c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a402:	0000      	.short	0x0000
    a404:	200002af 	.word	0x200002af
    a408:	4001f508 	.word	0x4001f508
    a40c:	4000f000 	.word	0x4000f000
    a410:	4000f400 	.word	0x4000f400

0000a414 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A>:
    a414:	b570      	push	{r4, r5, r6, lr}
    a416:	4604      	mov	r4, r0
    a418:	4816      	ldr	r0, [pc, #88]	; (a474 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x60>)
    a41a:	460e      	mov	r6, r1
    a41c:	2501      	movs	r5, #1
    a41e:	7005      	strb	r5, [r0, #0]
    a420:	4915      	ldr	r1, [pc, #84]	; (a478 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x64>)
    a422:	ea44 4002 	orr.w	r0, r4, r2, lsl #16
    a426:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
    a42a:	6008      	str	r0, [r1, #0]
    a42c:	f001 f975 	bl	b71a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    a430:	b930      	cbnz	r0, a440 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x2c>
    a432:	4811      	ldr	r0, [pc, #68]	; (a478 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x64>)
    a434:	3014      	adds	r0, #20
    a436:	6801      	ldr	r1, [r0, #0]
    a438:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    a43c:	4331      	orrs	r1, r6
    a43e:	6001      	str	r1, [r0, #0]
    a440:	490e      	ldr	r1, [pc, #56]	; (a47c <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x68>)
    a442:	2200      	movs	r2, #0
    a444:	f8c1 2104 	str.w	r2, [r1, #260]	; 0x104
    a448:	4b0d      	ldr	r3, [pc, #52]	; (a480 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x6c>)
    a44a:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    a44e:	6018      	str	r0, [r3, #0]
    a450:	b12c      	cbz	r4, a45e <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x4a>
    a452:	2c01      	cmp	r4, #1
    a454:	d007      	beq.n	a466 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x52>
    a456:	2185      	movs	r1, #133	; 0x85
    a458:	203c      	movs	r0, #60	; 0x3c
    a45a:	f7f9 fb9b 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a45e:	f8c1 5200 	str.w	r5, [r1, #512]	; 0x200
    a462:	600d      	str	r5, [r1, #0]
    a464:	bd70      	pop	{r4, r5, r6, pc}
    a466:	f8c1 2200 	str.w	r2, [r1, #512]	; 0x200
    a46a:	600d      	str	r5, [r1, #0]
    a46c:	4904      	ldr	r1, [pc, #16]	; (a480 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x6c>)
    a46e:	1f09      	subs	r1, r1, #4
    a470:	6008      	str	r0, [r1, #0]
    a472:	bd70      	pop	{r4, r5, r6, pc}
    a474:	200002af 	.word	0x200002af
    a478:	4000f504 	.word	0x4000f504
    a47c:	4000f000 	.word	0x4000f000
    a480:	4001f508 	.word	0x4001f508

0000a484 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    a484:	4802      	ldr	r0, [pc, #8]	; (a490 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    a486:	2100      	movs	r1, #0
    a488:	7001      	strb	r1, [r0, #0]
    a48a:	7041      	strb	r1, [r0, #1]
    a48c:	4770      	bx	lr
    a48e:	0000      	.short	0x0000
    a490:	200002af 	.word	0x200002af

0000a494 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    a494:	4806      	ldr	r0, [pc, #24]	; (a4b0 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1c>)
    a496:	7801      	ldrb	r1, [r0, #0]
    a498:	b141      	cbz	r1, a4ac <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x18>
    a49a:	4806      	ldr	r0, [pc, #24]	; (a4b4 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>)
    a49c:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    a4a0:	2800      	cmp	r0, #0
    a4a2:	d002      	beq.n	a4aa <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x16>
    a4a4:	4804      	ldr	r0, [pc, #16]	; (a4b8 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x24>)
    a4a6:	6800      	ldr	r0, [r0, #0]
    a4a8:	b2c0      	uxtb	r0, r0
    a4aa:	4770      	bx	lr
    a4ac:	7840      	ldrb	r0, [r0, #1]
    a4ae:	4770      	bx	lr
    a4b0:	200002af 	.word	0x200002af
    a4b4:	4000f000 	.word	0x4000f000
    a4b8:	4000f400 	.word	0x4000f400

0000a4bc <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    a4bc:	4901      	ldr	r1, [pc, #4]	; (a4c4 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    a4be:	2001      	movs	r0, #1
    a4c0:	6088      	str	r0, [r1, #8]
    a4c2:	4770      	bx	lr
    a4c4:	4000f000 	.word	0x4000f000

0000a4c8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    a4c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a4cc:	2800      	cmp	r0, #0
    a4ce:	d02c      	beq.n	a52a <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x62>
    a4d0:	4817      	ldr	r0, [pc, #92]	; (a530 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x68>)
    a4d2:	7800      	ldrb	r0, [r0, #0]
    a4d4:	b1b0      	cbz	r0, a504 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x3c>
    a4d6:	4d17      	ldr	r5, [pc, #92]	; (a534 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6c>)
    a4d8:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    a4dc:	2800      	cmp	r0, #0
    a4de:	d124      	bne.n	a52a <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x62>
    a4e0:	2702      	movs	r7, #2
    a4e2:	f8c5 7304 	str.w	r7, [r5, #772]	; 0x304
    a4e6:	4c14      	ldr	r4, [pc, #80]	; (a538 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>)
    a4e8:	6820      	ldr	r0, [r4, #0]
    a4ea:	43c0      	mvns	r0, r0
    a4ec:	f340 1600 	sbfx	r6, r0, #4, #1
    a4f0:	6820      	ldr	r0, [r4, #0]
    a4f2:	f040 0010 	orr.w	r0, r0, #16
    a4f6:	6020      	str	r0, [r4, #0]
    a4f8:	f44f 4800 	mov.w	r8, #32768	; 0x8000
    a4fc:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    a500:	1c76      	adds	r6, r6, #1
    a502:	e007      	b.n	a514 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x4c>
    a504:	21fd      	movs	r1, #253	; 0xfd
    a506:	203c      	movs	r0, #60	; 0x3c
    a508:	f7f9 fb44 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a50c:	f8c9 8280 	str.w	r8, [r9, #640]	; 0x280
    a510:	f7f9 f9d0 	bl	38b4 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    a514:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    a518:	2800      	cmp	r0, #0
    a51a:	d0f7      	beq.n	a50c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x44>
    a51c:	b91e      	cbnz	r6, a526 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x5e>
    a51e:	6820      	ldr	r0, [r4, #0]
    a520:	f020 0010 	bic.w	r0, r0, #16
    a524:	6020      	str	r0, [r4, #0]
    a526:	f8c5 7308 	str.w	r7, [r5, #776]	; 0x308
    a52a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a52e:	0000      	.short	0x0000
    a530:	200002af 	.word	0x200002af
    a534:	4000f000 	.word	0x4000f000
    a538:	e000ed10 	.word	0xe000ed10

0000a53c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    a53c:	b510      	push	{r4, lr}
    a53e:	4604      	mov	r4, r0
    a540:	f000 f822 	bl	a588 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
    a544:	2c00      	cmp	r4, #0
    a546:	d017      	beq.n	a578 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>
    a548:	4a0c      	ldr	r2, [pc, #48]	; (a57c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    a54a:	480c      	ldr	r0, [pc, #48]	; (a57c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    a54c:	490c      	ldr	r1, [pc, #48]	; (a580 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    a54e:	3214      	adds	r2, #20
    a550:	4b0c      	ldr	r3, [pc, #48]	; (a584 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>)
    a552:	2c01      	cmp	r4, #1
    a554:	d005      	beq.n	a562 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x26>
    a556:	2c02      	cmp	r4, #2
    a558:	d008      	beq.n	a56c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x30>
    a55a:	217d      	movs	r1, #125	; 0x7d
    a55c:	203d      	movs	r0, #61	; 0x3d
    a55e:	f7f9 fb19 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a562:	2402      	movs	r4, #2
    a564:	6004      	str	r4, [r0, #0]
    a566:	6011      	str	r1, [r2, #0]
    a568:	0620      	lsls	r0, r4, #24
    a56a:	e004      	b.n	a576 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3a>
    a56c:	2403      	movs	r4, #3
    a56e:	6004      	str	r4, [r0, #0]
    a570:	6011      	str	r1, [r2, #0]
    a572:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    a576:	6018      	str	r0, [r3, #0]
    a578:	bd10      	pop	{r4, pc}
    a57a:	0000      	.short	0x0000
    a57c:	4000f500 	.word	0x4000f500
    a580:	20001215 	.word	0x20001215
    a584:	4001f504 	.word	0x4001f504
    a588:	4804      	ldr	r0, [pc, #16]	; (a59c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    a58a:	2100      	movs	r1, #0
    a58c:	6001      	str	r1, [r0, #0]
    a58e:	6001      	str	r1, [r0, #0]
    a590:	4903      	ldr	r1, [pc, #12]	; (a5a0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    a592:	f04f 7020 	mov.w	r0, #41943040	; 0x2800000
    a596:	6008      	str	r0, [r1, #0]
    a598:	4770      	bx	lr
    a59a:	0000      	.short	0x0000
    a59c:	4000f500 	.word	0x4000f500
    a5a0:	4001f508 	.word	0x4001f508

0000a5a4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    a5a4:	4805      	ldr	r0, [pc, #20]	; (a5bc <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    a5a6:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    a5aa:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    a5ae:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    a5b2:	4903      	ldr	r1, [pc, #12]	; (a5c0 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x1c>)
    a5b4:	2000      	movs	r0, #0
    a5b6:	6008      	str	r0, [r1, #0]
    a5b8:	4770      	bx	lr
    a5ba:	0000      	.short	0x0000
    a5bc:	40001000 	.word	0x40001000
    a5c0:	40001560 	.word	0x40001560

0000a5c4 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    a5c4:	4904      	ldr	r1, [pc, #16]	; (a5d8 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    a5c6:	6008      	str	r0, [r1, #0]
    a5c8:	4804      	ldr	r0, [pc, #16]	; (a5dc <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x18>)
    a5ca:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    a5ce:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    a5d2:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    a5d6:	4770      	bx	lr
    a5d8:	40001560 	.word	0x40001560
    a5dc:	40001000 	.word	0x40001000

0000a5e0 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>:
    a5e0:	4801      	ldr	r0, [pc, #4]	; (a5e8 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I+0x8>)
    a5e2:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
    a5e6:	4770      	bx	lr
    a5e8:	20000d84 	.word	0x20000d84

0000a5ec <sym_ZBDJ2Y5I72NG5GLPCDB32P7JVZVIRY3EZS6BW2Y>:
    a5ec:	4a01      	ldr	r2, [pc, #4]	; (a5f4 <sym_ZBDJ2Y5I72NG5GLPCDB32P7JVZVIRY3EZS6BW2Y+0x8>)
    a5ee:	7051      	strb	r1, [r2, #1]
    a5f0:	7010      	strb	r0, [r2, #0]
    a5f2:	4770      	bx	lr
    a5f4:	20000d84 	.word	0x20000d84

0000a5f8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    a5f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a5fa:	4c1e      	ldr	r4, [pc, #120]	; (a674 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x7c>)
    a5fc:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    a600:	2710      	movs	r7, #16
    a602:	f3c0 1600 	ubfx	r6, r0, #4, #1
    a606:	f8c4 7308 	str.w	r7, [r4, #776]	; 0x308
    a60a:	2002      	movs	r0, #2
    a60c:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    a610:	4819      	ldr	r0, [pc, #100]	; (a678 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x80>)
    a612:	2500      	movs	r5, #0
    a614:	491a      	ldr	r1, [pc, #104]	; (a680 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x88>)
    a616:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    a61a:	4818      	ldr	r0, [pc, #96]	; (a67c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x84>)
    a61c:	6008      	str	r0, [r1, #0]
    a61e:	4819      	ldr	r0, [pc, #100]	; (a684 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8c>)
    a620:	6800      	ldr	r0, [r0, #0]
    a622:	b1b0      	cbz	r0, a652 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5a>
    a624:	20ff      	movs	r0, #255	; 0xff
    a626:	f88d 0000 	strb.w	r0, [sp]
    a62a:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    a62e:	2001      	movs	r0, #1
    a630:	6120      	str	r0, [r4, #16]
    a632:	e004      	b.n	a63e <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x46>
    a634:	f89d 0000 	ldrb.w	r0, [sp]
    a638:	1e40      	subs	r0, r0, #1
    a63a:	f88d 0000 	strb.w	r0, [sp]
    a63e:	f89d 0000 	ldrb.w	r0, [sp]
    a642:	b118      	cbz	r0, a64c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x54>
    a644:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
    a648:	2800      	cmp	r0, #0
    a64a:	d0f3      	beq.n	a634 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x3c>
    a64c:	f89d 0000 	ldrb.w	r0, [sp]
    a650:	b150      	cbz	r0, a668 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x70>
    a652:	f000 fd07 	bl	b064 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x12c>
    a656:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    a65a:	f000 fe9f 	bl	b39c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x464>
    a65e:	2e00      	cmp	r6, #0
    a660:	d001      	beq.n	a666 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6e>
    a662:	f8c4 7304 	str.w	r7, [r4, #772]	; 0x304
    a666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a668:	f240 71c3 	movw	r1, #1987	; 0x7c3
    a66c:	203e      	movs	r0, #62	; 0x3e
    a66e:	f7f9 fa91 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a672:	0000      	.short	0x0000
    a674:	40001000 	.word	0x40001000
    a678:	20000d84 	.word	0x20000d84
    a67c:	0c0e0000 	.word	0x0c0e0000
    a680:	4001f508 	.word	0x4001f508
    a684:	40001550 	.word	0x40001550

0000a688 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    a688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a68c:	4c1f      	ldr	r4, [pc, #124]	; (a70c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x84>)
    a68e:	4607      	mov	r7, r0
    a690:	4688      	mov	r8, r1
    a692:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
    a696:	07c1      	lsls	r1, r0, #31
    a698:	d018      	beq.n	a6cc <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x44>
    a69a:	4a1d      	ldr	r2, [pc, #116]	; (a710 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x88>)
    a69c:	f04f 6140 	mov.w	r1, #201326592	; 0xc000000
    a6a0:	6011      	str	r1, [r2, #0]
    a6a2:	4d1c      	ldr	r5, [pc, #112]	; (a714 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x8c>)
    a6a4:	f8d5 1200 	ldr.w	r1, [r5, #512]	; 0x200
    a6a8:	f041 0101 	orr.w	r1, r1, #1
    a6ac:	f8c5 1200 	str.w	r1, [r5, #512]	; 0x200
    a6b0:	f040 0002 	orr.w	r0, r0, #2
    a6b4:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    a6b8:	4640      	mov	r0, r8
    a6ba:	f000 fed5 	bl	b468 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    a6be:	f000 fc7f 	bl	afc0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x88>
    a6c2:	2601      	movs	r6, #1
    a6c4:	b13f      	cbz	r7, a6d6 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x4e>
    a6c6:	2f01      	cmp	r7, #1
    a6c8:	d00e      	beq.n	a6e8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x60>
    a6ca:	e016      	b.n	a6fa <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    a6cc:	f240 6155 	movw	r1, #1621	; 0x655
    a6d0:	203e      	movs	r0, #62	; 0x3e
    a6d2:	f7f9 fa5f 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a6d6:	4640      	mov	r0, r8
    a6d8:	f000 fc92 	bl	b000 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc8>
    a6dc:	4640      	mov	r0, r8
    a6de:	f000 fc53 	bl	af88 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    a6e2:	72e6      	strb	r6, [r4, #11]
    a6e4:	602e      	str	r6, [r5, #0]
    a6e6:	e008      	b.n	a6fa <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    a6e8:	f000 fcb2 	bl	b050 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x118>
    a6ec:	f000 fe20 	bl	b330 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3f8>
    a6f0:	2002      	movs	r0, #2
    a6f2:	72e0      	strb	r0, [r4, #11]
    a6f4:	f000 fd28 	bl	b148 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x210>
    a6f8:	606e      	str	r6, [r5, #4]
    a6fa:	4807      	ldr	r0, [pc, #28]	; (a718 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x90>)
    a6fc:	64c6      	str	r6, [r0, #76]	; 0x4c
    a6fe:	4807      	ldr	r0, [pc, #28]	; (a71c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x94>)
    a700:	6801      	ldr	r1, [r0, #0]
    a702:	4638      	mov	r0, r7
    a704:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    a708:	f004 bcf2 	b.w	f0f0 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    a70c:	20000d84 	.word	0x20000d84
    a710:	4001f504 	.word	0x4001f504
    a714:	40001000 	.word	0x40001000
    a718:	40008000 	.word	0x40008000
    a71c:	4000854c 	.word	0x4000854c

0000a720 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    a720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a724:	4d35      	ldr	r5, [pc, #212]	; (a7fc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xdc>)
    a726:	4606      	mov	r6, r0
    a728:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    a72c:	4689      	mov	r9, r1
    a72e:	6028      	str	r0, [r5, #0]
    a730:	4c33      	ldr	r4, [pc, #204]	; (a800 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe0>)
    a732:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
    a736:	f040 0002 	orr.w	r0, r0, #2
    a73a:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    a73e:	4608      	mov	r0, r1
    a740:	f000 fe92 	bl	b468 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    a744:	f000 fc3c 	bl	afc0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x88>
    a748:	f8df 80b8 	ldr.w	r8, [pc, #184]	; a804 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe4>
    a74c:	2700      	movs	r7, #0
    a74e:	b116      	cbz	r6, a756 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x36>
    a750:	2e01      	cmp	r6, #1
    a752:	d027      	beq.n	a7a4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    a754:	e03f      	b.n	a7d6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    a756:	4648      	mov	r0, r9
    a758:	f000 fc52 	bl	b000 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc8>
    a75c:	7a60      	ldrb	r0, [r4, #9]
    a75e:	2801      	cmp	r0, #1
    a760:	d105      	bne.n	a76e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x4e>
    a762:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    a766:	f041 0108 	orr.w	r1, r1, #8
    a76a:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    a76e:	4648      	mov	r0, r9
    a770:	f000 fc0a 	bl	af88 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    a774:	2001      	movs	r0, #1
    a776:	72e0      	strb	r0, [r4, #11]
    a778:	6b20      	ldr	r0, [r4, #48]	; 0x30
    a77a:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    a77e:	6320      	str	r0, [r4, #48]	; 0x30
    a780:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    a784:	6028      	str	r0, [r5, #0]
    a786:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    a78a:	f1b9 0f02 	cmp.w	r9, #2
    a78e:	d007      	beq.n	a7a0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x80>
    a790:	f640 0034 	movw	r0, #2100	; 0x834
    a794:	f649 72ec 	movw	r2, #40940	; 0x9fec
    a798:	4410      	add	r0, r2
    a79a:	fbb0 f7f1 	udiv	r7, r0, r1
    a79e:	e01a      	b.n	a7d6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    a7a0:	4608      	mov	r0, r1
    a7a2:	e7f7      	b.n	a794 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x74>
    a7a4:	f000 fc54 	bl	b050 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x118>
    a7a8:	f000 fdc2 	bl	b330 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3f8>
    a7ac:	7a60      	ldrb	r0, [r4, #9]
    a7ae:	2801      	cmp	r0, #1
    a7b0:	d105      	bne.n	a7be <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x9e>
    a7b2:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    a7b6:	f041 0104 	orr.w	r1, r1, #4
    a7ba:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    a7be:	2002      	movs	r0, #2
    a7c0:	72e0      	strb	r0, [r4, #11]
    a7c2:	6b20      	ldr	r0, [r4, #48]	; 0x30
    a7c4:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    a7c8:	6320      	str	r0, [r4, #48]	; 0x30
    a7ca:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    a7ce:	6028      	str	r0, [r5, #0]
    a7d0:	2729      	movs	r7, #41	; 0x29
    a7d2:	f000 fcb9 	bl	b148 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x210>
    a7d6:	f000 fca3 	bl	b120 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1e8>
    a7da:	f000 fe6d 	bl	b4b8 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>
    a7de:	6800      	ldr	r0, [r0, #0]
    a7e0:	2801      	cmp	r0, #1
    a7e2:	d006      	beq.n	a7f2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xd2>
    a7e4:	2100      	movs	r1, #0
    a7e6:	4630      	mov	r0, r6
    a7e8:	f004 fc82 	bl	f0f0 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    a7ec:	4638      	mov	r0, r7
    a7ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a7f2:	f7ff ff01 	bl	a5f8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    a7f6:	2000      	movs	r0, #0
    a7f8:	e7f9      	b.n	a7ee <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xce>
    a7fa:	0000      	.short	0x0000
    a7fc:	4001f504 	.word	0x4001f504
    a800:	20000d84 	.word	0x20000d84
    a804:	40001000 	.word	0x40001000

0000a808 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>:
    a808:	4a02      	ldr	r2, [pc, #8]	; (a814 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY+0xc>)
    a80a:	6b93      	ldr	r3, [r2, #56]	; 0x38
    a80c:	6003      	str	r3, [r0, #0]
    a80e:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    a810:	6008      	str	r0, [r1, #0]
    a812:	4770      	bx	lr
    a814:	20000d84 	.word	0x20000d84

0000a818 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    a818:	b510      	push	{r4, lr}
    a81a:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    a81c:	4901      	ldr	r1, [pc, #4]	; (a824 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    a81e:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    a822:	bd10      	pop	{r4, pc}
    a824:	20000d74 	.word	0x20000d74

0000a828 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>:
    a828:	490e      	ldr	r1, [pc, #56]	; (a864 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x3c>)
    a82a:	b510      	push	{r4, lr}
    a82c:	6a4a      	ldr	r2, [r1, #36]	; 0x24
    a82e:	4282      	cmp	r2, r0
    a830:	d302      	bcc.n	a838 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x10>
    a832:	f640 0143 	movw	r1, #2115	; 0x843
    a836:	e00a      	b.n	a84e <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x26>
    a838:	2201      	movs	r2, #1
    a83a:	740a      	strb	r2, [r1, #16]
    a83c:	6148      	str	r0, [r1, #20]
    a83e:	490a      	ldr	r1, [pc, #40]	; (a868 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x40>)
    a840:	644a      	str	r2, [r1, #68]	; 0x44
    a842:	4a0a      	ldr	r2, [pc, #40]	; (a86c <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x44>)
    a844:	6813      	ldr	r3, [r2, #0]
    a846:	4283      	cmp	r3, r0
    a848:	d304      	bcc.n	a854 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x2c>
    a84a:	f640 014c 	movw	r1, #2124	; 0x84c
    a84e:	203e      	movs	r0, #62	; 0x3e
    a850:	f7f9 f9a0 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a854:	2300      	movs	r3, #0
    a856:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
    a85a:	6010      	str	r0, [r2, #0]
    a85c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a860:	f000 bd74 	b.w	b34c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x414>
    a864:	20000d84 	.word	0x20000d84
    a868:	40008000 	.word	0x40008000
    a86c:	40008544 	.word	0x40008544

0000a870 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    a870:	b570      	push	{r4, r5, r6, lr}
    a872:	4c10      	ldr	r4, [pc, #64]	; (a8b4 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    a874:	4606      	mov	r6, r0
    a876:	2002      	movs	r0, #2
    a878:	7420      	strb	r0, [r4, #16]
    a87a:	2596      	movs	r5, #150	; 0x96
    a87c:	f000 f86c 	bl	a958 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    a880:	4602      	mov	r2, r0
    a882:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    a886:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    a88a:	2801      	cmp	r0, #1
    a88c:	d00d      	beq.n	a8aa <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x3a>
    a88e:	4628      	mov	r0, r5
    a890:	f004 fc46 	bl	f120 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    a894:	4908      	ldr	r1, [pc, #32]	; (a8b8 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x48>)
    a896:	6160      	str	r0, [r4, #20]
    a898:	2000      	movs	r0, #0
    a89a:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    a89e:	6961      	ldr	r1, [r4, #20]
    a8a0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    a8a2:	4408      	add	r0, r1
    a8a4:	4905      	ldr	r1, [pc, #20]	; (a8bc <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x4c>)
    a8a6:	6008      	str	r0, [r1, #0]
    a8a8:	bd70      	pop	{r4, r5, r6, pc}
    a8aa:	4633      	mov	r3, r6
    a8ac:	4628      	mov	r0, r5
    a8ae:	f004 fc53 	bl	f158 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    a8b2:	e7ef      	b.n	a894 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x24>
    a8b4:	20000d84 	.word	0x20000d84
    a8b8:	40008000 	.word	0x40008000
    a8bc:	40008544 	.word	0x40008544

0000a8c0 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>:
    a8c0:	b510      	push	{r4, lr}
    a8c2:	f000 ff46 	bl	b752 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    a8c6:	2800      	cmp	r0, #0
    a8c8:	d006      	beq.n	a8d8 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x18>
    a8ca:	4804      	ldr	r0, [pc, #16]	; (a8dc <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x1c>)
    a8cc:	6801      	ldr	r1, [r0, #0]
    a8ce:	f021 0101 	bic.w	r1, r1, #1
    a8d2:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
    a8d6:	6001      	str	r1, [r0, #0]
    a8d8:	bd10      	pop	{r4, pc}
    a8da:	0000      	.short	0x0000
    a8dc:	40001774 	.word	0x40001774

0000a8e0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    a8e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a8e4:	2240      	movs	r2, #64	; 0x40
    a8e6:	2100      	movs	r1, #0
    a8e8:	4813      	ldr	r0, [pc, #76]	; (a938 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    a8ea:	f000 ffe2 	bl	b8b2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    a8ee:	f000 fd55 	bl	b39c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x464>
    a8f2:	f000 fee7 	bl	b6c4 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    a8f6:	4d11      	ldr	r5, [pc, #68]	; (a93c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    a8f8:	4e10      	ldr	r6, [pc, #64]	; (a93c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    a8fa:	2400      	movs	r4, #0
    a8fc:	4f0f      	ldr	r7, [pc, #60]	; (a93c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    a8fe:	3508      	adds	r5, #8
    a900:	3610      	adds	r6, #16
    a902:	b928      	cbnz	r0, a910 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    a904:	f000 fef5 	bl	b6f2 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    a908:	b910      	cbnz	r0, a910 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    a90a:	f000 fefc 	bl	b706 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    a90e:	b108      	cbz	r0, a914 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    a910:	2224      	movs	r2, #36	; 0x24
    a912:	e006      	b.n	a922 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    a914:	f000 ff37 	bl	b786 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    a918:	b910      	cbnz	r0, a920 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    a91a:	f000 ff2a 	bl	b772 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    a91e:	b140      	cbz	r0, a932 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    a920:	2240      	movs	r2, #64	; 0x40
    a922:	21ff      	movs	r1, #255	; 0xff
    a924:	4638      	mov	r0, r7
    a926:	f000 ffc4 	bl	b8b2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    a92a:	602c      	str	r4, [r5, #0]
    a92c:	6034      	str	r4, [r6, #0]
    a92e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a932:	2238      	movs	r2, #56	; 0x38
    a934:	e7f5      	b.n	a922 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    a936:	0000      	.short	0x0000
    a938:	20000d84 	.word	0x20000d84
    a93c:	40000e00 	.word	0x40000e00

0000a940 <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA>:
    a940:	4901      	ldr	r1, [pc, #4]	; (a948 <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA+0x8>)
    a942:	7008      	strb	r0, [r1, #0]
    a944:	4770      	bx	lr
    a946:	0000      	.short	0x0000
    a948:	20000280 	.word	0x20000280

0000a94c <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    a94c:	4801      	ldr	r0, [pc, #4]	; (a954 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x8>)
    a94e:	6a40      	ldr	r0, [r0, #36]	; 0x24
    a950:	4770      	bx	lr
    a952:	0000      	.short	0x0000
    a954:	20000d84 	.word	0x20000d84

0000a958 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>:
    a958:	4814      	ldr	r0, [pc, #80]	; (a9ac <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x54>)
    a95a:	b510      	push	{r4, lr}
    a95c:	f890 1029 	ldrb.w	r1, [r0, #41]	; 0x29
    a960:	7ac0      	ldrb	r0, [r0, #11]
    a962:	b141      	cbz	r1, a976 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x1e>
    a964:	2902      	cmp	r1, #2
    a966:	d00b      	beq.n	a980 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    a968:	2802      	cmp	r0, #2
    a96a:	d009      	beq.n	a980 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    a96c:	2901      	cmp	r1, #1
    a96e:	d00b      	beq.n	a988 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    a970:	2801      	cmp	r0, #1
    a972:	d009      	beq.n	a988 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    a974:	e015      	b.n	a9a2 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4a>
    a976:	2800      	cmp	r0, #0
    a978:	d1f6      	bne.n	a968 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x10>
    a97a:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
    a97e:	e00d      	b.n	a99c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x44>
    a980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a984:	f000 bc6e 	b.w	b264 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x32c>
    a988:	4809      	ldr	r0, [pc, #36]	; (a9b0 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x58>)
    a98a:	6800      	ldr	r0, [r0, #0]
    a98c:	f000 000f 	and.w	r0, r0, #15
    a990:	2803      	cmp	r0, #3
    a992:	d006      	beq.n	a9a2 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4a>
    a994:	2804      	cmp	r0, #4
    a996:	d006      	beq.n	a9a6 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4e>
    a998:	f240 210b 	movw	r1, #523	; 0x20b
    a99c:	203e      	movs	r0, #62	; 0x3e
    a99e:	f7f9 f8f9 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a9a2:	2001      	movs	r0, #1
    a9a4:	bd10      	pop	{r4, pc}
    a9a6:	2002      	movs	r0, #2
    a9a8:	bd10      	pop	{r4, pc}
    a9aa:	0000      	.short	0x0000
    a9ac:	20000d84 	.word	0x20000d84
    a9b0:	40001510 	.word	0x40001510

0000a9b4 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>:
    a9b4:	4801      	ldr	r0, [pc, #4]	; (a9bc <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x8>)
    a9b6:	6a00      	ldr	r0, [r0, #32]
    a9b8:	4770      	bx	lr
    a9ba:	0000      	.short	0x0000
    a9bc:	20000d84 	.word	0x20000d84

0000a9c0 <sym_JG4OWOPOBDSVKYOWPCJHHMQ7GDZVMOEUZX73ZYA>:
    a9c0:	4801      	ldr	r0, [pc, #4]	; (a9c8 <sym_JG4OWOPOBDSVKYOWPCJHHMQ7GDZVMOEUZX73ZYA+0x8>)
    a9c2:	7f40      	ldrb	r0, [r0, #29]
    a9c4:	4770      	bx	lr
    a9c6:	0000      	.short	0x0000
    a9c8:	20000d84 	.word	0x20000d84

0000a9cc <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    a9cc:	b510      	push	{r4, lr}
    a9ce:	f000 fccb 	bl	b368 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x430>
    a9d2:	f7ff fe11 	bl	a5f8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    a9d6:	f004 fb21 	bl	f01c <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>
    a9da:	480f      	ldr	r0, [pc, #60]	; (aa18 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x4c>)
    a9dc:	4a0f      	ldr	r2, [pc, #60]	; (aa1c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x50>)
    a9de:	6b01      	ldr	r1, [r0, #48]	; 0x30
    a9e0:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    a9e4:	6011      	str	r1, [r2, #0]
    a9e6:	2400      	movs	r4, #0
    a9e8:	6304      	str	r4, [r0, #48]	; 0x30
    a9ea:	7404      	strb	r4, [r0, #16]
    a9ec:	6244      	str	r4, [r0, #36]	; 0x24
    a9ee:	6204      	str	r4, [r0, #32]
    a9f0:	f000 fcba 	bl	b368 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x430>
    a9f4:	480a      	ldr	r0, [pc, #40]	; (aa20 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x54>)
    a9f6:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    a9fa:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    a9fe:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    aa02:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    aa06:	2001      	movs	r0, #1
    aa08:	f004 fb41 	bl	f08e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    aa0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    aa10:	2001      	movs	r0, #1
    aa12:	f004 bb2f 	b.w	f074 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    aa16:	0000      	.short	0x0000
    aa18:	20000d84 	.word	0x20000d84
    aa1c:	4001f508 	.word	0x4001f508
    aa20:	40008000 	.word	0x40008000

0000aa24 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    aa24:	b570      	push	{r4, r5, r6, lr}
    aa26:	2001      	movs	r0, #1
    aa28:	f004 fb31 	bl	f08e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    aa2c:	4837      	ldr	r0, [pc, #220]	; (ab0c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    aa2e:	2400      	movs	r4, #0
    aa30:	6004      	str	r4, [r0, #0]
    aa32:	2601      	movs	r6, #1
    aa34:	6006      	str	r6, [r0, #0]
    aa36:	f000 fe7c 	bl	b732 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    aa3a:	4d35      	ldr	r5, [pc, #212]	; (ab10 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    aa3c:	b118      	cbz	r0, aa46 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x22>
    aa3e:	6828      	ldr	r0, [r5, #0]
    aa40:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    aa44:	6028      	str	r0, [r5, #0]
    aa46:	f000 fe68 	bl	b71a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    aa4a:	b128      	cbz	r0, aa58 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x34>
    aa4c:	6828      	ldr	r0, [r5, #0]
    aa4e:	4931      	ldr	r1, [pc, #196]	; (ab14 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    aa50:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    aa54:	4308      	orrs	r0, r1
    aa56:	6028      	str	r0, [r5, #0]
    aa58:	f000 fe7b 	bl	b752 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    aa5c:	b138      	cbz	r0, aa6e <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4a>
    aa5e:	482c      	ldr	r0, [pc, #176]	; (ab10 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    aa60:	1d00      	adds	r0, r0, #4
    aa62:	6801      	ldr	r1, [r0, #0]
    aa64:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    aa68:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    aa6c:	6001      	str	r1, [r0, #0]
    aa6e:	4928      	ldr	r1, [pc, #160]	; (ab10 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    aa70:	4829      	ldr	r0, [pc, #164]	; (ab18 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    aa72:	313c      	adds	r1, #60	; 0x3c
    aa74:	6008      	str	r0, [r1, #0]
    aa76:	f7f8 ff8b 	bl	3990 <mpsl_fem_device_config_254_apply_get>
    aa7a:	b140      	cbz	r0, aa8e <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6a>
    aa7c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    aa80:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    aa84:	1c41      	adds	r1, r0, #1
    aa86:	d002      	beq.n	aa8e <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6a>
    aa88:	4921      	ldr	r1, [pc, #132]	; (ab10 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    aa8a:	3110      	adds	r1, #16
    aa8c:	6008      	str	r0, [r1, #0]
    aa8e:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    aa92:	6e00      	ldr	r0, [r0, #96]	; 0x60
    aa94:	1c41      	adds	r1, r0, #1
    aa96:	d004      	beq.n	aaa2 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x7e>
    aa98:	4920      	ldr	r1, [pc, #128]	; (ab1c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    aa9a:	680a      	ldr	r2, [r1, #0]
    aa9c:	f360 4217 	bfi	r2, r0, #16, #8
    aaa0:	600a      	str	r2, [r1, #0]
    aaa2:	491e      	ldr	r1, [pc, #120]	; (ab1c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    aaa4:	f240 605b 	movw	r0, #1627	; 0x65b
    aaa8:	3954      	subs	r1, #84	; 0x54
    aaaa:	6008      	str	r0, [r1, #0]
    aaac:	1f09      	subs	r1, r1, #4
    aaae:	f240 1003 	movw	r0, #259	; 0x103
    aab2:	6008      	str	r0, [r1, #0]
    aab4:	1f08      	subs	r0, r1, #4
    aab6:	6006      	str	r6, [r0, #0]
    aab8:	2001      	movs	r0, #1
    aaba:	f000 fcd5 	bl	b468 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    aabe:	4917      	ldr	r1, [pc, #92]	; (ab1c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    aac0:	f240 1001 	movw	r0, #257	; 0x101
    aac4:	31c4      	adds	r1, #196	; 0xc4
    aac6:	6008      	str	r0, [r1, #0]
    aac8:	4e15      	ldr	r6, [pc, #84]	; (ab20 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    aaca:	2502      	movs	r5, #2
    aacc:	f8c6 5200 	str.w	r5, [r6, #512]	; 0x200
    aad0:	4915      	ldr	r1, [pc, #84]	; (ab28 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    aad2:	4814      	ldr	r0, [pc, #80]	; (ab24 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    aad4:	6008      	str	r0, [r1, #0]
    aad6:	4815      	ldr	r0, [pc, #84]	; (ab2c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x108>)
    aad8:	f506 7600 	add.w	r6, r6, #512	; 0x200
    aadc:	8704      	strh	r4, [r0, #56]	; 0x38
    aade:	3010      	adds	r0, #16
    aae0:	6244      	str	r4, [r0, #36]	; 0x24
    aae2:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
    aae6:	2001      	movs	r0, #1
    aae8:	f004 fac4 	bl	f074 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    aaec:	2010      	movs	r0, #16
    aaee:	f8c6 0104 	str.w	r0, [r6, #260]	; 0x104
    aaf2:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    aaf6:	f8c0 5100 	str.w	r5, [r0, #256]	; 0x100
    aafa:	480d      	ldr	r0, [pc, #52]	; (ab30 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x10c>)
    aafc:	6840      	ldr	r0, [r0, #4]
    aafe:	2800      	cmp	r0, #0
    ab00:	d002      	beq.n	ab08 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe4>
    ab02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ab06:	4700      	bx	r0
    ab08:	bd70      	pop	{r4, r5, r6, pc}
    ab0a:	0000      	.short	0x0000
    ab0c:	40001ffc 	.word	0x40001ffc
    ab10:	4000173c 	.word	0x4000173c
    ab14:	80000096 	.word	0x80000096
    ab18:	8900002c 	.word	0x8900002c
    ab1c:	4000158c 	.word	0x4000158c
    ab20:	40001000 	.word	0x40001000
    ab24:	0c0e0000 	.word	0x0c0e0000
    ab28:	4001f508 	.word	0x4001f508
    ab2c:	20000d74 	.word	0x20000d74
    ab30:	20000280 	.word	0x20000280

0000ab34 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    ab34:	4901      	ldr	r1, [pc, #4]	; (ab3c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    ab36:	7608      	strb	r0, [r1, #24]
    ab38:	4770      	bx	lr
    ab3a:	0000      	.short	0x0000
    ab3c:	20000d84 	.word	0x20000d84

0000ab40 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    ab40:	4904      	ldr	r1, [pc, #16]	; (ab54 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x14>)
    ab42:	6008      	str	r0, [r1, #0]
    ab44:	4804      	ldr	r0, [pc, #16]	; (ab58 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    ab46:	f810 1f34 	ldrb.w	r1, [r0, #52]!
    ab4a:	f041 0101 	orr.w	r1, r1, #1
    ab4e:	7001      	strb	r1, [r0, #0]
    ab50:	f000 baae 	b.w	b0b0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x178>
    ab54:	40001504 	.word	0x40001504
    ab58:	20000d84 	.word	0x20000d84

0000ab5c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    ab5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ab60:	4e35      	ldr	r6, [pc, #212]	; (ac38 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xdc>)
    ab62:	4607      	mov	r7, r0
    ab64:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    ab68:	468a      	mov	sl, r1
    ab6a:	4614      	mov	r4, r2
    ab6c:	6030      	str	r0, [r6, #0]
    ab6e:	4610      	mov	r0, r2
    ab70:	f000 fc7a 	bl	b468 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    ab74:	f000 fa24 	bl	afc0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x88>
    ab78:	f8df 90c0 	ldr.w	r9, [pc, #192]	; ac3c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>
    ab7c:	4d30      	ldr	r5, [pc, #192]	; (ac40 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe4>)
    ab7e:	f04f 0801 	mov.w	r8, #1
    ab82:	b127      	cbz	r7, ab8e <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x32>
    ab84:	2f01      	cmp	r7, #1
    ab86:	d01d      	beq.n	abc4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x68>
    ab88:	f240 7144 	movw	r1, #1860	; 0x744
    ab8c:	e04a      	b.n	ac24 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>
    ab8e:	4620      	mov	r0, r4
    ab90:	f000 fa36 	bl	b000 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc8>
    ab94:	4620      	mov	r0, r4
    ab96:	f000 f9f7 	bl	af88 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    ab9a:	2c02      	cmp	r4, #2
    ab9c:	d00f      	beq.n	abbe <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x62>
    ab9e:	f640 0034 	movw	r0, #2100	; 0x834
    aba2:	bf00      	nop
    aba4:	f649 51f8 	movw	r1, #40440	; 0x9df8
    aba8:	4401      	add	r1, r0
    abaa:	4650      	mov	r0, sl
    abac:	f000 fc00 	bl	b3b0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x478>
    abb0:	4604      	mov	r4, r0
    abb2:	4648      	mov	r0, r9
    abb4:	f000 fbe6 	bl	b384 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x44c>
    abb8:	f885 800b 	strb.w	r8, [r5, #11]
    abbc:	e014      	b.n	abe8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x8c>
    abbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    abc2:	e7ef      	b.n	aba4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x48>
    abc4:	f000 fa44 	bl	b050 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x118>
    abc8:	f000 fbb2 	bl	b330 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3f8>
    abcc:	f000 fabc 	bl	b148 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x210>
    abd0:	f649 71ba 	movw	r1, #40890	; 0x9fba
    abd4:	4650      	mov	r0, sl
    abd6:	f000 fbeb 	bl	b3b0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x478>
    abda:	4604      	mov	r4, r0
    abdc:	4817      	ldr	r0, [pc, #92]	; (ac3c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    abde:	1d00      	adds	r0, r0, #4
    abe0:	f000 fbd0 	bl	b384 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x44c>
    abe4:	2002      	movs	r0, #2
    abe6:	72e8      	strb	r0, [r5, #11]
    abe8:	4816      	ldr	r0, [pc, #88]	; (ac44 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe8>)
    abea:	6004      	str	r4, [r0, #0]
    abec:	4917      	ldr	r1, [pc, #92]	; (ac4c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf0>)
    abee:	4816      	ldr	r0, [pc, #88]	; (ac48 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xec>)
    abf0:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    abf4:	6b28      	ldr	r0, [r5, #48]	; 0x30
    abf6:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    abfa:	6328      	str	r0, [r5, #48]	; 0x30
    abfc:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    ac00:	6030      	str	r0, [r6, #0]
    ac02:	2110      	movs	r1, #16
    ac04:	f8c9 1304 	str.w	r1, [r9, #772]	; 0x304
    ac08:	1200      	asrs	r0, r0, #8
    ac0a:	6030      	str	r0, [r6, #0]
    ac0c:	f000 fa88 	bl	b120 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1e8>
    ac10:	490f      	ldr	r1, [pc, #60]	; (ac50 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf4>)
    ac12:	f8c1 804c 	str.w	r8, [r1, #76]	; 0x4c
    ac16:	480b      	ldr	r0, [pc, #44]	; (ac44 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe8>)
    ac18:	300c      	adds	r0, #12
    ac1a:	6800      	ldr	r0, [r0, #0]
    ac1c:	42a0      	cmp	r0, r4
    ac1e:	d304      	bcc.n	ac2a <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xce>
    ac20:	f240 7169 	movw	r1, #1897	; 0x769
    ac24:	203e      	movs	r0, #62	; 0x3e
    ac26:	f7f8 ffb5 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ac2a:	4621      	mov	r1, r4
    ac2c:	4638      	mov	r0, r7
    ac2e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ac32:	f004 ba5d 	b.w	f0f0 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    ac36:	0000      	.short	0x0000
    ac38:	4001f504 	.word	0x4001f504
    ac3c:	40001000 	.word	0x40001000
    ac40:	20000d84 	.word	0x20000d84
    ac44:	40008540 	.word	0x40008540
    ac48:	40008140 	.word	0x40008140
    ac4c:	4001f098 	.word	0x4001f098
    ac50:	40008000 	.word	0x40008000

0000ac54 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    ac54:	b510      	push	{r4, lr}
    ac56:	b14a      	cbz	r2, ac6c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x18>
    ac58:	4c12      	ldr	r4, [pc, #72]	; (aca4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x50>)
    ac5a:	7260      	strb	r0, [r4, #9]
    ac5c:	7363      	strb	r3, [r4, #13]
    ac5e:	07d0      	lsls	r0, r2, #31
    ac60:	d007      	beq.n	ac72 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x1e>
    ac62:	2a01      	cmp	r2, #1
    ac64:	d005      	beq.n	ac72 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x1e>
    ac66:	f640 113e 	movw	r1, #2366	; 0x93e
    ac6a:	e00c      	b.n	ac86 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x32>
    ac6c:	f640 1137 	movw	r1, #2359	; 0x937
    ac70:	e009      	b.n	ac86 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x32>
    ac72:	b159      	cbz	r1, ac8c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>
    ac74:	2002      	movs	r0, #2
    ac76:	72a0      	strb	r0, [r4, #10]
    ac78:	7322      	strb	r2, [r4, #12]
    ac7a:	2801      	cmp	r0, #1
    ac7c:	d008      	beq.n	ac90 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x3c>
    ac7e:	2802      	cmp	r0, #2
    ac80:	d00f      	beq.n	aca2 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x4e>
    ac82:	f640 1155 	movw	r1, #2389	; 0x955
    ac86:	203e      	movs	r0, #62	; 0x3e
    ac88:	f7f8 ff84 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ac8c:	2001      	movs	r0, #1
    ac8e:	e7f2      	b.n	ac76 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x22>
    ac90:	7ae0      	ldrb	r0, [r4, #11]
    ac92:	2802      	cmp	r0, #2
    ac94:	d105      	bne.n	aca2 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x4e>
    ac96:	f000 f9db 	bl	b050 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x118>
    ac9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ac9e:	f000 bb47 	b.w	b330 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3f8>
    aca2:	bd10      	pop	{r4, pc}
    aca4:	20000d84 	.word	0x20000d84

0000aca8 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    aca8:	490a      	ldr	r1, [pc, #40]	; (acd4 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x2c>)
    acaa:	b508      	push	{r3, lr}
    acac:	f8d1 211c 	ldr.w	r2, [r1, #284]	; 0x11c
    acb0:	2a01      	cmp	r2, #1
    acb2:	d001      	beq.n	acb8 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x10>
    acb4:	2000      	movs	r0, #0
    acb6:	bd08      	pop	{r3, pc}
    acb8:	4a07      	ldr	r2, [pc, #28]	; (acd8 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x30>)
    acba:	6812      	ldr	r2, [r2, #0]
    acbc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    acc0:	4252      	negs	r2, r2
    acc2:	7002      	strb	r2, [r0, #0]
    acc4:	2000      	movs	r0, #0
    acc6:	f8c1 011c 	str.w	r0, [r1, #284]	; 0x11c
    acca:	4804      	ldr	r0, [pc, #16]	; (acdc <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x34>)
    accc:	6800      	ldr	r0, [r0, #0]
    acce:	9000      	str	r0, [sp, #0]
    acd0:	2001      	movs	r0, #1
    acd2:	bd08      	pop	{r3, pc}
    acd4:	40001000 	.word	0x40001000
    acd8:	40001548 	.word	0x40001548
    acdc:	4000111c 	.word	0x4000111c

0000ace0 <sym_LZLCMBXYRGNNSS6IYQ5J2ORWQO6TGPOEG4SEIWQ>:
    ace0:	4a04      	ldr	r2, [pc, #16]	; (acf4 <sym_LZLCMBXYRGNNSS6IYQ5J2ORWQO6TGPOEG4SEIWQ+0x14>)
    ace2:	6803      	ldr	r3, [r0, #0]
    ace4:	f8c2 3012 	str.w	r3, [r2, #18]
    ace8:	8880      	ldrh	r0, [r0, #4]
    acea:	82d0      	strh	r0, [r2, #22]
    acec:	f102 0010 	add.w	r0, r2, #16
    acf0:	7201      	strb	r1, [r0, #8]
    acf2:	4770      	bx	lr
    acf4:	20000d74 	.word	0x20000d74

0000acf8 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    acf8:	4a04      	ldr	r2, [pc, #16]	; (ad0c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x14>)
    acfa:	78c1      	ldrb	r1, [r0, #3]
    acfc:	6011      	str	r1, [r2, #0]
    acfe:	6800      	ldr	r0, [r0, #0]
    ad00:	4902      	ldr	r1, [pc, #8]	; (ad0c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x14>)
    ad02:	0200      	lsls	r0, r0, #8
    ad04:	3908      	subs	r1, #8
    ad06:	6008      	str	r0, [r1, #0]
    ad08:	4770      	bx	lr
    ad0a:	0000      	.short	0x0000
    ad0c:	40001524 	.word	0x40001524

0000ad10 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    ad10:	6800      	ldr	r0, [r0, #0]
    ad12:	4902      	ldr	r1, [pc, #8]	; (ad1c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0xc>)
    ad14:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ad18:	6008      	str	r0, [r1, #0]
    ad1a:	4770      	bx	lr
    ad1c:	4000153c 	.word	0x4000153c

0000ad20 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>:
    ad20:	b510      	push	{r4, lr}
    ad22:	f000 fb7d 	bl	b420 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4e8>
    ad26:	4806      	ldr	r0, [pc, #24]	; (ad40 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x20>)
    ad28:	6800      	ldr	r0, [r0, #0]
    ad2a:	2803      	cmp	r0, #3
    ad2c:	d001      	beq.n	ad32 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x12>
    ad2e:	280b      	cmp	r0, #11
    ad30:	d104      	bne.n	ad3c <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x1c>
    ad32:	f240 21a5 	movw	r1, #677	; 0x2a5
    ad36:	203e      	movs	r0, #62	; 0x3e
    ad38:	f7f8 ff2c 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ad3c:	bd10      	pop	{r4, pc}
    ad3e:	0000      	.short	0x0000
    ad40:	40001550 	.word	0x40001550

0000ad44 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    ad44:	4901      	ldr	r1, [pc, #4]	; (ad4c <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    ad46:	7648      	strb	r0, [r1, #25]
    ad48:	4770      	bx	lr
    ad4a:	0000      	.short	0x0000
    ad4c:	20000d84 	.word	0x20000d84

0000ad50 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    ad50:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    ad54:	4d6f      	ldr	r5, [pc, #444]	; (af14 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1c4>)
    ad56:	2701      	movs	r7, #1
    ad58:	64ef      	str	r7, [r5, #76]	; 0x4c
    ad5a:	486f      	ldr	r0, [pc, #444]	; (af18 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1c8>)
    ad5c:	f8d0 a000 	ldr.w	sl, [r0]
    ad60:	486e      	ldr	r0, [pc, #440]	; (af1c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1cc>)
    ad62:	6800      	ldr	r0, [r0, #0]
    ad64:	4c6e      	ldr	r4, [pc, #440]	; (af20 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d0>)
    ad66:	f8df 81bc 	ldr.w	r8, [pc, #444]	; af24 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d4>
    ad6a:	e9c4 0a0e 	strd	r0, sl, [r4, #56]	; 0x38
    ad6e:	f898 0000 	ldrb.w	r0, [r8]
    ad72:	2804      	cmp	r0, #4
    ad74:	d302      	bcc.n	ad7c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2c>
    ad76:	f44f 612d 	mov.w	r1, #2768	; 0xad0
    ad7a:	e0c0      	b.n	aefe <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1ae>
    ad7c:	f000 f972 	bl	b064 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x12c>
    ad80:	4969      	ldr	r1, [pc, #420]	; (af28 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d8>)
    ad82:	6b20      	ldr	r0, [r4, #48]	; 0x30
    ad84:	6008      	str	r0, [r1, #0]
    ad86:	f8df b1a4 	ldr.w	fp, [pc, #420]	; af2c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1dc>
    ad8a:	2600      	movs	r6, #0
    ad8c:	6326      	str	r6, [r4, #48]	; 0x30
    ad8e:	f8db 1200 	ldr.w	r1, [fp, #512]	; 0x200
    ad92:	f240 121d 	movw	r2, #285	; 0x11d
    ad96:	4391      	bics	r1, r2
    ad98:	f8cb 1200 	str.w	r1, [fp, #512]	; 0x200
    ad9c:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    ada0:	f8db 010c 	ldr.w	r0, [fp, #268]	; 0x10c
    ada4:	b900      	cbnz	r0, ada8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x58>
    ada6:	64af      	str	r7, [r5, #72]	; 0x48
    ada8:	f000 f9e0 	bl	b16c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x234>
    adac:	4605      	mov	r5, r0
    adae:	485a      	ldr	r0, [pc, #360]	; (af18 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1c8>)
    adb0:	1f00      	subs	r0, r0, #4
    adb2:	6800      	ldr	r0, [r0, #0]
    adb4:	6260      	str	r0, [r4, #36]	; 0x24
    adb6:	f7ff fdcf 	bl	a958 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    adba:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    adbe:	7ae0      	ldrb	r0, [r4, #11]
    adc0:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    adc4:	495a      	ldr	r1, [pc, #360]	; (af30 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e0>)
    adc6:	6226      	str	r6, [r4, #32]
    adc8:	2802      	cmp	r0, #2
    adca:	d107      	bne.n	addc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x8c>
    adcc:	7860      	ldrb	r0, [r4, #1]
    adce:	b128      	cbz	r0, addc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x8c>
    add0:	680a      	ldr	r2, [r1, #0]
    add2:	7812      	ldrb	r2, [r2, #0]
    add4:	4002      	ands	r2, r0
    add6:	7820      	ldrb	r0, [r4, #0]
    add8:	4390      	bics	r0, r2
    adda:	d011      	beq.n	ae00 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xb0>
    addc:	7726      	strb	r6, [r4, #28]
    adde:	f8df 9154 	ldr.w	r9, [pc, #340]	; af34 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e4>
    ade2:	07a8      	lsls	r0, r5, #30
    ade4:	d502      	bpl.n	adec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x9c>
    ade6:	f8d9 0000 	ldr.w	r0, [r9]
    adea:	6220      	str	r0, [r4, #32]
    adec:	0728      	lsls	r0, r5, #28
    adee:	d502      	bpl.n	adf6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xa6>
    adf0:	f8d9 0000 	ldr.w	r0, [r9]
    adf4:	6220      	str	r0, [r4, #32]
    adf6:	f898 0000 	ldrb.w	r0, [r8]
    adfa:	07c0      	lsls	r0, r0, #31
    adfc:	d002      	beq.n	ae04 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xb4>
    adfe:	e01c      	b.n	ae3a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xea>
    ae00:	7727      	strb	r7, [r4, #28]
    ae02:	e7ec      	b.n	adde <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x8e>
    ae04:	f8d1 8000 	ldr.w	r8, [r1]
    ae08:	f898 0000 	ldrb.w	r0, [r8]
    ae0c:	f000 000f 	and.w	r0, r0, #15
    ae10:	2807      	cmp	r0, #7
    ae12:	d211      	bcs.n	ae38 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    ae14:	2206      	movs	r2, #6
    ae16:	f108 0109 	add.w	r1, r8, #9
    ae1a:	1ca0      	adds	r0, r4, #2
    ae1c:	f000 fcbd 	bl	b79a <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    ae20:	b938      	cbnz	r0, ae32 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    ae22:	7a20      	ldrb	r0, [r4, #8]
    ae24:	f898 1000 	ldrb.w	r1, [r8]
    ae28:	ebb0 1fd1 	cmp.w	r0, r1, lsr #7
    ae2c:	d101      	bne.n	ae32 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    ae2e:	2001      	movs	r0, #1
    ae30:	e000      	b.n	ae34 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe4>
    ae32:	2000      	movs	r0, #0
    ae34:	7760      	strb	r0, [r4, #29]
    ae36:	e000      	b.n	ae3a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xea>
    ae38:	7766      	strb	r6, [r4, #29]
    ae3a:	f04f 0800 	mov.w	r8, #0
    ae3e:	4651      	mov	r1, sl
    ae40:	4628      	mov	r0, r5
    ae42:	f000 fa23 	bl	b28c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x354>
    ae46:	b918      	cbnz	r0, ae50 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x100>
    ae48:	f8cb 7010 	str.w	r7, [fp, #16]
    ae4c:	f04f 0801 	mov.w	r8, #1
    ae50:	4e33      	ldr	r6, [pc, #204]	; (af20 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d0>)
    ae52:	07e8      	lsls	r0, r5, #31
    ae54:	f1a6 0610 	sub.w	r6, r6, #16
    ae58:	d002      	beq.n	ae60 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x110>
    ae5a:	6830      	ldr	r0, [r6, #0]
    ae5c:	4780      	blx	r0
    ae5e:	e031      	b.n	aec4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x174>
    ae60:	07a8      	lsls	r0, r5, #30
    ae62:	d526      	bpl.n	aeb2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x162>
    ae64:	0768      	lsls	r0, r5, #29
    ae66:	d41e      	bmi.n	aea6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x156>
    ae68:	f000 fc73 	bl	b752 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    ae6c:	b9d8      	cbnz	r0, aea6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x156>
    ae6e:	f000 fc60 	bl	b732 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    ae72:	b9c0      	cbnz	r0, aea6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x156>
    ae74:	482e      	ldr	r0, [pc, #184]	; (af30 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e0>)
    ae76:	38b4      	subs	r0, #180	; 0xb4
    ae78:	6800      	ldr	r0, [r0, #0]
    ae7a:	f3c0 5742 	ubfx	r7, r0, #21, #3
    ae7e:	f3c0 6300 	ubfx	r3, r0, #24, #1
    ae82:	f000 020f 	and.w	r2, r0, #15
    ae86:	f3c0 1103 	ubfx	r1, r0, #4, #4
    ae8a:	f3c0 2003 	ubfx	r0, r0, #8, #4
    ae8e:	b153      	cbz	r3, aea6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x156>
    ae90:	b10a      	cbz	r2, ae96 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
    ae92:	b101      	cbz	r1, ae96 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
    ae94:	b938      	cbnz	r0, aea6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x156>
    ae96:	4826      	ldr	r0, [pc, #152]	; (af30 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e0>)
    ae98:	38b0      	subs	r0, #176	; 0xb0
    ae9a:	6800      	ldr	r0, [r0, #0]
    ae9c:	b118      	cbz	r0, aea6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x156>
    ae9e:	2f03      	cmp	r7, #3
    aea0:	d201      	bcs.n	aea6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x156>
    aea2:	f045 0504 	orr.w	r5, r5, #4
    aea6:	f345 0080 	sbfx	r0, r5, #2, #1
    aeaa:	4641      	mov	r1, r8
    aeac:	1c40      	adds	r0, r0, #1
    aeae:	6872      	ldr	r2, [r6, #4]
    aeb0:	e007      	b.n	aec2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x172>
    aeb2:	f015 0f28 	tst.w	r5, #40	; 0x28
    aeb6:	d005      	beq.n	aec4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x174>
    aeb8:	f345 1140 	sbfx	r1, r5, #5, #1
    aebc:	68b2      	ldr	r2, [r6, #8]
    aebe:	4640      	mov	r0, r8
    aec0:	1c49      	adds	r1, r1, #1
    aec2:	4790      	blx	r2
    aec4:	06e8      	lsls	r0, r5, #27
    aec6:	d501      	bpl.n	aecc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x17c>
    aec8:	68f0      	ldr	r0, [r6, #12]
    aeca:	4780      	blx	r0
    aecc:	7ae0      	ldrb	r0, [r4, #11]
    aece:	2802      	cmp	r0, #2
    aed0:	d11e      	bne.n	af10 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1c0>
    aed2:	7c20      	ldrb	r0, [r4, #16]
    aed4:	2800      	cmp	r0, #0
    aed6:	d01b      	beq.n	af10 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1c0>
    aed8:	2802      	cmp	r0, #2
    aeda:	d004      	beq.n	aee6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x196>
    aedc:	2801      	cmp	r0, #1
    aede:	d008      	beq.n	aef2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1a2>
    aee0:	f640 3166 	movw	r1, #2918	; 0xb66
    aee4:	e00b      	b.n	aefe <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1ae>
    aee6:	6961      	ldr	r1, [r4, #20]
    aee8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    aeea:	4401      	add	r1, r0
    aeec:	f8c9 1000 	str.w	r1, [r9]
    aef0:	e00a      	b.n	af08 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1b8>
    aef2:	6a61      	ldr	r1, [r4, #36]	; 0x24
    aef4:	6960      	ldr	r0, [r4, #20]
    aef6:	4288      	cmp	r0, r1
    aef8:	d804      	bhi.n	af04 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1b4>
    aefa:	f640 3167 	movw	r1, #2919	; 0xb67
    aefe:	203e      	movs	r0, #62	; 0x3e
    af00:	f7f8 fe48 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    af04:	f8c9 0000 	str.w	r0, [r9]
    af08:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    af0c:	f000 ba1e 	b.w	b34c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x414>
    af10:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    af14:	40008000 	.word	0x40008000
    af18:	4000854c 	.word	0x4000854c
    af1c:	4000b504 	.word	0x4000b504
    af20:	20000d84 	.word	0x20000d84
    af24:	20000280 	.word	0x20000280
    af28:	4001f508 	.word	0x4001f508
    af2c:	40001000 	.word	0x40001000
    af30:	40001504 	.word	0x40001504
    af34:	40008544 	.word	0x40008544

0000af38 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    af38:	b570      	push	{r4, r5, r6, lr}
    af3a:	4b11      	ldr	r3, [pc, #68]	; (af80 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x48>)
    af3c:	888c      	ldrh	r4, [r1, #4]
    af3e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    af42:	f8c3 4620 	str.w	r4, [r3, #1568]	; 0x620
    af46:	780c      	ldrb	r4, [r1, #0]
    af48:	f8d1 1001 	ldr.w	r1, [r1, #1]
    af4c:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    af50:	f8c3 1600 	str.w	r1, [r3, #1536]	; 0x600
    af54:	4d0b      	ldr	r5, [pc, #44]	; (af84 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4c>)
    af56:	6829      	ldr	r1, [r5, #0]
    af58:	f100 0608 	add.w	r6, r0, #8
    af5c:	2401      	movs	r4, #1
    af5e:	fa04 f306 	lsl.w	r3, r4, r6
    af62:	b132      	cbz	r2, af72 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a>
    af64:	2a01      	cmp	r2, #1
    af66:	d006      	beq.n	af76 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3e>
    af68:	f240 41f1 	movw	r1, #1265	; 0x4f1
    af6c:	203e      	movs	r0, #62	; 0x3e
    af6e:	f7f8 fe11 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    af72:	4399      	bics	r1, r3
    af74:	e000      	b.n	af78 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x40>
    af76:	4319      	orrs	r1, r3
    af78:	4084      	lsls	r4, r0
    af7a:	430c      	orrs	r4, r1
    af7c:	602c      	str	r4, [r5, #0]
    af7e:	bd70      	pop	{r4, r5, r6, pc}
    af80:	40001000 	.word	0x40001000
    af84:	40001640 	.word	0x40001640
    af88:	b510      	push	{r4, lr}
    af8a:	4604      	mov	r4, r0
    af8c:	f000 fbe1 	bl	b752 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    af90:	2800      	cmp	r0, #0
    af92:	d00e      	beq.n	afb2 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x7a>
    af94:	4a09      	ldr	r2, [pc, #36]	; (afbc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x84>)
    af96:	6811      	ldr	r1, [r2, #0]
    af98:	0650      	lsls	r0, r2, #25
    af9a:	2c02      	cmp	r4, #2
    af9c:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    afa0:	d008      	beq.n	afb4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x7c>
    afa2:	f3c0 2006 	ubfx	r0, r0, #8, #7
    afa6:	bf00      	nop
    afa8:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    afac:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    afb0:	6010      	str	r0, [r2, #0]
    afb2:	bd10      	pop	{r4, pc}
    afb4:	f3c0 6006 	ubfx	r0, r0, #24, #7
    afb8:	e7f6      	b.n	afa8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x70>
    afba:	0000      	.short	0x0000
    afbc:	40001588 	.word	0x40001588
    afc0:	480d      	ldr	r0, [pc, #52]	; (aff8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc0>)
    afc2:	7e40      	ldrb	r0, [r0, #25]
    afc4:	2825      	cmp	r0, #37	; 0x25
    afc6:	d007      	beq.n	afd8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xa0>
    afc8:	2826      	cmp	r0, #38	; 0x26
    afca:	d007      	beq.n	afdc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xa4>
    afcc:	2827      	cmp	r0, #39	; 0x27
    afce:	d007      	beq.n	afe0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xa8>
    afd0:	280a      	cmp	r0, #10
    afd2:	d807      	bhi.n	afe4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xac>
    afd4:	2204      	movs	r2, #4
    afd6:	e006      	b.n	afe6 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xae>
    afd8:	2102      	movs	r1, #2
    afda:	e007      	b.n	afec <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xb4>
    afdc:	211a      	movs	r1, #26
    afde:	e005      	b.n	afec <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xb4>
    afe0:	2150      	movs	r1, #80	; 0x50
    afe2:	e003      	b.n	afec <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xb4>
    afe4:	2206      	movs	r2, #6
    afe6:	eb02 0140 	add.w	r1, r2, r0, lsl #1
    afea:	b2c9      	uxtb	r1, r1
    afec:	4a03      	ldr	r2, [pc, #12]	; (affc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc4>)
    afee:	6011      	str	r1, [r2, #0]
    aff0:	4902      	ldr	r1, [pc, #8]	; (affc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc4>)
    aff2:	314c      	adds	r1, #76	; 0x4c
    aff4:	6008      	str	r0, [r1, #0]
    aff6:	4770      	bx	lr
    aff8:	20000d84 	.word	0x20000d84
    affc:	40001508 	.word	0x40001508
    b000:	4912      	ldr	r1, [pc, #72]	; (b04c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x114>)
    b002:	b508      	push	{r3, lr}
    b004:	f991 2018 	ldrsb.w	r2, [r1, #24]
    b008:	7e49      	ldrb	r1, [r1, #25]
    b00a:	2801      	cmp	r0, #1
    b00c:	d00a      	beq.n	b024 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xec>
    b00e:	2802      	cmp	r0, #2
    b010:	d00a      	beq.n	b028 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xf0>
    b012:	2804      	cmp	r0, #4
    b014:	d00a      	beq.n	b02c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xf4>
    b016:	2808      	cmp	r0, #8
    b018:	d00a      	beq.n	b030 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xf8>
    b01a:	f240 31d7 	movw	r1, #983	; 0x3d7
    b01e:	2006      	movs	r0, #6
    b020:	f7f8 fdb8 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b024:	2000      	movs	r0, #0
    b026:	e004      	b.n	b032 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xfa>
    b028:	2001      	movs	r0, #1
    b02a:	e002      	b.n	b032 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xfa>
    b02c:	2003      	movs	r0, #3
    b02e:	e000      	b.n	b032 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xfa>
    b030:	2002      	movs	r0, #2
    b032:	466b      	mov	r3, sp
    b034:	f7f5 f9d4 	bl	3e0 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    b038:	b118      	cbz	r0, b042 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x10a>
    b03a:	f44f 61a4 	mov.w	r1, #1312	; 0x520
    b03e:	203e      	movs	r0, #62	; 0x3e
    b040:	e7ee      	b.n	b020 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xe8>
    b042:	f99d 0000 	ldrsb.w	r0, [sp]
    b046:	f000 fa09 	bl	b45c <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    b04a:	bd08      	pop	{r3, pc}
    b04c:	20000d84 	.word	0x20000d84
    b050:	4803      	ldr	r0, [pc, #12]	; (b060 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x128>)
    b052:	7a81      	ldrb	r1, [r0, #10]
    b054:	2901      	cmp	r1, #1
    b056:	d102      	bne.n	b05e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x126>
    b058:	7b40      	ldrb	r0, [r0, #13]
    b05a:	f7ff bfd1 	b.w	b000 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc8>
    b05e:	4770      	bx	lr
    b060:	20000d84 	.word	0x20000d84
    b064:	4805      	ldr	r0, [pc, #20]	; (b07c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x144>)
    b066:	7ac0      	ldrb	r0, [r0, #11]
    b068:	2801      	cmp	r0, #1
    b06a:	d003      	beq.n	b074 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x13c>
    b06c:	2802      	cmp	r0, #2
    b06e:	d103      	bne.n	b078 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x140>
    b070:	f003 bfbc 	b.w	efec <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>
    b074:	f003 bfc6 	b.w	f004 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>
    b078:	4770      	bx	lr
    b07a:	0000      	.short	0x0000
    b07c:	20000d84 	.word	0x20000d84
    b080:	4809      	ldr	r0, [pc, #36]	; (b0a8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x170>)
    b082:	b508      	push	{r3, lr}
    b084:	2100      	movs	r1, #0
    b086:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    b08a:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    b08e:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    b092:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    b096:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    b09a:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    b09e:	4803      	ldr	r0, [pc, #12]	; (b0ac <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x174>)
    b0a0:	6800      	ldr	r0, [r0, #0]
    b0a2:	9000      	str	r0, [sp, #0]
    b0a4:	bd08      	pop	{r3, pc}
    b0a6:	0000      	.short	0x0000
    b0a8:	40001000 	.word	0x40001000
    b0ac:	40001118 	.word	0x40001118
    b0b0:	4816      	ldr	r0, [pc, #88]	; (b10c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1d4>)
    b0b2:	b510      	push	{r4, lr}
    b0b4:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
    b0b8:	07c1      	lsls	r1, r0, #31
    b0ba:	d026      	beq.n	b10a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1d2>
    b0bc:	0781      	lsls	r1, r0, #30
    b0be:	d513      	bpl.n	b0e8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1b0>
    b0c0:	4813      	ldr	r0, [pc, #76]	; (b110 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1d8>)
    b0c2:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    b0c6:	f041 0101 	orr.w	r1, r1, #1
    b0ca:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b0ce:	4811      	ldr	r0, [pc, #68]	; (b114 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1dc>)
    b0d0:	6800      	ldr	r0, [r0, #0]
    b0d2:	280b      	cmp	r0, #11
    b0d4:	d005      	beq.n	b0e2 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1aa>
    b0d6:	280a      	cmp	r0, #10
    b0d8:	d003      	beq.n	b0e2 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1aa>
    b0da:	2803      	cmp	r0, #3
    b0dc:	d001      	beq.n	b0e2 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1aa>
    b0de:	2802      	cmp	r0, #2
    b0e0:	d113      	bne.n	b10a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1d2>
    b0e2:	f240 514b 	movw	r1, #1355	; 0x54b
    b0e6:	e00d      	b.n	b104 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1cc>
    b0e8:	0740      	lsls	r0, r0, #29
    b0ea:	d50e      	bpl.n	b10a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1d2>
    b0ec:	4808      	ldr	r0, [pc, #32]	; (b110 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1d8>)
    b0ee:	490a      	ldr	r1, [pc, #40]	; (b118 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1e0>)
    b0f0:	3008      	adds	r0, #8
    b0f2:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    b0f6:	4809      	ldr	r0, [pc, #36]	; (b11c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1e4>)
    b0f8:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
    b0fc:	2801      	cmp	r0, #1
    b0fe:	d104      	bne.n	b10a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1d2>
    b100:	f240 5152 	movw	r1, #1362	; 0x552
    b104:	203e      	movs	r0, #62	; 0x3e
    b106:	f7f8 fd45 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b10a:	bd10      	pop	{r4, pc}
    b10c:	20000d84 	.word	0x20000d84
    b110:	40001000 	.word	0x40001000
    b114:	40001550 	.word	0x40001550
    b118:	4001f098 	.word	0x4001f098
    b11c:	40008000 	.word	0x40008000
    b120:	4808      	ldr	r0, [pc, #32]	; (b144 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x20c>)
    b122:	4601      	mov	r1, r0
    b124:	7a42      	ldrb	r2, [r0, #9]
    b126:	f891 1034 	ldrb.w	r1, [r1, #52]	; 0x34
    b12a:	b112      	cbz	r2, b132 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1fa>
    b12c:	2a01      	cmp	r2, #1
    b12e:	d003      	beq.n	b138 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x200>
    b130:	e006      	b.n	b140 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x208>
    b132:	f041 0102 	orr.w	r1, r1, #2
    b136:	e001      	b.n	b13c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x204>
    b138:	f041 0104 	orr.w	r1, r1, #4
    b13c:	f880 1034 	strb.w	r1, [r0, #52]	; 0x34
    b140:	f7ff bfb6 	b.w	b0b0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x178>
    b144:	20000d84 	.word	0x20000d84
    b148:	b510      	push	{r4, lr}
    b14a:	f000 fb02 	bl	b752 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b14e:	2800      	cmp	r0, #0
    b150:	d108      	bne.n	b164 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x22c>
    b152:	f000 faee 	bl	b732 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    b156:	2800      	cmp	r0, #0
    b158:	d104      	bne.n	b164 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x22c>
    b15a:	4803      	ldr	r0, [pc, #12]	; (b168 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x230>)
    b15c:	6801      	ldr	r1, [r0, #0]
    b15e:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    b162:	6001      	str	r1, [r0, #0]
    b164:	bd10      	pop	{r4, pc}
    b166:	0000      	.short	0x0000
    b168:	40001568 	.word	0x40001568
    b16c:	b538      	push	{r3, r4, r5, lr}
    b16e:	4d36      	ldr	r5, [pc, #216]	; (b248 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x310>)
    b170:	2400      	movs	r4, #0
    b172:	7c28      	ldrb	r0, [r5, #16]
    b174:	b120      	cbz	r0, b180 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x248>
    b176:	4835      	ldr	r0, [pc, #212]	; (b24c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x314>)
    b178:	f8d0 0144 	ldr.w	r0, [r0, #324]	; 0x144
    b17c:	2801      	cmp	r0, #1
    b17e:	d007      	beq.n	b190 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x258>
    b180:	2200      	movs	r2, #0
    b182:	7ae9      	ldrb	r1, [r5, #11]
    b184:	4832      	ldr	r0, [pc, #200]	; (b250 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x318>)
    b186:	2901      	cmp	r1, #1
    b188:	d004      	beq.n	b194 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x25c>
    b18a:	2902      	cmp	r1, #2
    b18c:	d00a      	beq.n	b1a4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x26c>
    b18e:	e019      	b.n	b1c4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x28c>
    b190:	2201      	movs	r2, #1
    b192:	e7f6      	b.n	b182 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x24a>
    b194:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    b198:	2901      	cmp	r1, #1
    b19a:	d001      	beq.n	b1a0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x268>
    b19c:	2400      	movs	r4, #0
    b19e:	e011      	b.n	b1c4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x28c>
    b1a0:	2408      	movs	r4, #8
    b1a2:	e00f      	b.n	b1c4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x28c>
    b1a4:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    b1a8:	2901      	cmp	r1, #1
    b1aa:	d006      	beq.n	b1ba <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x282>
    b1ac:	2100      	movs	r1, #0
    b1ae:	4b29      	ldr	r3, [pc, #164]	; (b254 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x31c>)
    b1b0:	681b      	ldr	r3, [r3, #0]
    b1b2:	2b01      	cmp	r3, #1
    b1b4:	d003      	beq.n	b1be <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x286>
    b1b6:	2404      	movs	r4, #4
    b1b8:	e002      	b.n	b1c0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x288>
    b1ba:	2102      	movs	r1, #2
    b1bc:	e7f7      	b.n	b1ae <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x276>
    b1be:	2400      	movs	r4, #0
    b1c0:	430c      	orrs	r4, r1
    b1c2:	4314      	orrs	r4, r2
    b1c4:	f014 0f0b 	tst.w	r4, #11
    b1c8:	d105      	bne.n	b1d6 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x29e>
    b1ca:	f8d0 1110 	ldr.w	r1, [r0, #272]	; 0x110
    b1ce:	2901      	cmp	r1, #1
    b1d0:	d006      	beq.n	b1e0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2a8>
    b1d2:	2100      	movs	r1, #0
    b1d4:	430c      	orrs	r4, r1
    b1d6:	4920      	ldr	r1, [pc, #128]	; (b258 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x320>)
    b1d8:	7809      	ldrb	r1, [r1, #0]
    b1da:	07c9      	lsls	r1, r1, #31
    b1dc:	d002      	beq.n	b1e4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2ac>
    b1de:	e023      	b.n	b228 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2f0>
    b1e0:	2110      	movs	r1, #16
    b1e2:	e7f7      	b.n	b1d4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x29c>
    b1e4:	491d      	ldr	r1, [pc, #116]	; (b25c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x324>)
    b1e6:	6809      	ldr	r1, [r1, #0]
    b1e8:	f011 0fff 	tst.w	r1, #255	; 0xff
    b1ec:	d003      	beq.n	b1f6 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2be>
    b1ee:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    b1f2:	2a01      	cmp	r2, #1
    b1f4:	d000      	beq.n	b1f8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2c0>
    b1f6:	2200      	movs	r2, #0
    b1f8:	f885 202a 	strb.w	r2, [r5, #42]	; 0x2a
    b1fc:	f011 0fff 	tst.w	r1, #255	; 0xff
    b200:	d003      	beq.n	b20a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2d2>
    b202:	f8d0 0118 	ldr.w	r0, [r0, #280]	; 0x118
    b206:	2801      	cmp	r0, #1
    b208:	d000      	beq.n	b20c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2d4>
    b20a:	2000      	movs	r0, #0
    b20c:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
    b210:	4810      	ldr	r0, [pc, #64]	; (b254 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x31c>)
    b212:	3010      	adds	r0, #16
    b214:	6800      	ldr	r0, [r0, #0]
    b216:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    b21a:	f7ff f857 	bl	a2cc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
    b21e:	2801      	cmp	r0, #1
    b220:	d000      	beq.n	b224 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2ec>
    b222:	2000      	movs	r0, #0
    b224:	f885 002d 	strb.w	r0, [r5, #45]	; 0x2d
    b228:	f7ff ff2a 	bl	b080 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x148>
    b22c:	06e0      	lsls	r0, r4, #27
    b22e:	d506      	bpl.n	b23e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x306>
    b230:	0720      	lsls	r0, r4, #28
    b232:	d404      	bmi.n	b23e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x306>
    b234:	7ae8      	ldrb	r0, [r5, #11]
    b236:	2801      	cmp	r0, #1
    b238:	d101      	bne.n	b23e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x306>
    b23a:	f044 0420 	orr.w	r4, r4, #32
    b23e:	4808      	ldr	r0, [pc, #32]	; (b260 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x328>)
    b240:	6800      	ldr	r0, [r0, #0]
    b242:	9000      	str	r0, [sp, #0]
    b244:	4620      	mov	r0, r4
    b246:	bd38      	pop	{r3, r4, r5, pc}
    b248:	20000d84 	.word	0x20000d84
    b24c:	40008000 	.word	0x40008000
    b250:	40001000 	.word	0x40001000
    b254:	40001400 	.word	0x40001400
    b258:	20000280 	.word	0x20000280
    b25c:	40001640 	.word	0x40001640
    b260:	40008144 	.word	0x40008144
    b264:	4808      	ldr	r0, [pc, #32]	; (b288 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x350>)
    b266:	b510      	push	{r4, lr}
    b268:	6800      	ldr	r0, [r0, #0]
    b26a:	f000 000f 	and.w	r0, r0, #15
    b26e:	2803      	cmp	r0, #3
    b270:	d006      	beq.n	b280 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x348>
    b272:	2804      	cmp	r0, #4
    b274:	d006      	beq.n	b284 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x34c>
    b276:	f240 2136 	movw	r1, #566	; 0x236
    b27a:	203e      	movs	r0, #62	; 0x3e
    b27c:	f7f8 fc8a 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b280:	2001      	movs	r0, #1
    b282:	bd10      	pop	{r4, pc}
    b284:	2002      	movs	r0, #2
    b286:	bd10      	pop	{r4, pc}
    b288:	40001510 	.word	0x40001510
    b28c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b290:	4c25      	ldr	r4, [pc, #148]	; (b328 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3f0>)
    b292:	460d      	mov	r5, r1
    b294:	7aa2      	ldrb	r2, [r4, #10]
    b296:	b19a      	cbz	r2, b2c0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x388>
    b298:	7b21      	ldrb	r1, [r4, #12]
    b29a:	078b      	lsls	r3, r1, #30
    b29c:	d503      	bpl.n	b2a6 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x36e>
    b29e:	0783      	lsls	r3, r0, #30
    b2a0:	d501      	bpl.n	b2a6 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x36e>
    b2a2:	0743      	lsls	r3, r0, #29
    b2a4:	d41c      	bmi.n	b2e0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a8>
    b2a6:	06cb      	lsls	r3, r1, #27
    b2a8:	d505      	bpl.n	b2b6 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x37e>
    b2aa:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
    b2ae:	b113      	cbz	r3, b2b6 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x37e>
    b2b0:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
    b2b4:	b1a3      	cbz	r3, b2e0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a8>
    b2b6:	070b      	lsls	r3, r1, #28
    b2b8:	d50b      	bpl.n	b2d2 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x39a>
    b2ba:	7f23      	ldrb	r3, [r4, #28]
    b2bc:	b983      	cbnz	r3, b2e0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a8>
    b2be:	e008      	b.n	b2d2 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x39a>
    b2c0:	491a      	ldr	r1, [pc, #104]	; (b32c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3f4>)
    b2c2:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    b2c6:	6008      	str	r0, [r1, #0]
    b2c8:	f000 f868 	bl	b39c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x464>
    b2cc:	2000      	movs	r0, #0
    b2ce:	7420      	strb	r0, [r4, #16]
    b2d0:	e028      	b.n	b324 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3ec>
    b2d2:	0749      	lsls	r1, r1, #29
    b2d4:	d501      	bpl.n	b2da <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a2>
    b2d6:	7f61      	ldrb	r1, [r4, #29]
    b2d8:	b111      	cbz	r1, b2e0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a8>
    b2da:	f010 0f11 	tst.w	r0, #17
    b2de:	d002      	beq.n	b2e6 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3ae>
    b2e0:	f7ff f98a 	bl	a5f8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    b2e4:	e01e      	b.n	b324 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3ec>
    b2e6:	2a01      	cmp	r2, #1
    b2e8:	d001      	beq.n	b2ee <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3b6>
    b2ea:	2601      	movs	r6, #1
    b2ec:	e000      	b.n	b2f0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3b8>
    b2ee:	2600      	movs	r6, #0
    b2f0:	7a60      	ldrb	r0, [r4, #9]
    b2f2:	2801      	cmp	r0, #1
    b2f4:	d00e      	beq.n	b314 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3dc>
    b2f6:	2700      	movs	r7, #0
    b2f8:	f000 f850 	bl	b39c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x464>
    b2fc:	2196      	movs	r1, #150	; 0x96
    b2fe:	4630      	mov	r0, r6
    b300:	f000 f864 	bl	b3cc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x494>
    b304:	4601      	mov	r1, r0
    b306:	b14f      	cbz	r7, b31c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3e4>
    b308:	353b      	adds	r5, #59	; 0x3b
    b30a:	428d      	cmp	r5, r1
    b30c:	d904      	bls.n	b318 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3e0>
    b30e:	2000      	movs	r0, #0
    b310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b314:	2701      	movs	r7, #1
    b316:	e7ef      	b.n	b2f8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3c0>
    b318:	2001      	movs	r0, #1
    b31a:	7260      	strb	r0, [r4, #9]
    b31c:	7b62      	ldrb	r2, [r4, #13]
    b31e:	4630      	mov	r0, r6
    b320:	f7ff fc1c 	bl	ab5c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    b324:	2001      	movs	r0, #1
    b326:	e7f3      	b.n	b310 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3d8>
    b328:	20000d84 	.word	0x20000d84
    b32c:	4001f508 	.word	0x4001f508
    b330:	4805      	ldr	r0, [pc, #20]	; (b348 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x410>)
    b332:	2100      	movs	r1, #0
    b334:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
    b338:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    b33c:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    b340:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b344:	4770      	bx	lr
    b346:	0000      	.short	0x0000
    b348:	40001000 	.word	0x40001000
    b34c:	4804      	ldr	r0, [pc, #16]	; (b360 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x428>)
    b34e:	6b01      	ldr	r1, [r0, #48]	; 0x30
    b350:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    b354:	6301      	str	r1, [r0, #48]	; 0x30
    b356:	4903      	ldr	r1, [pc, #12]	; (b364 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x42c>)
    b358:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    b35c:	6008      	str	r0, [r1, #0]
    b35e:	4770      	bx	lr
    b360:	20000d84 	.word	0x20000d84
    b364:	4001f504 	.word	0x4001f504
    b368:	4905      	ldr	r1, [pc, #20]	; (b380 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x448>)
    b36a:	2000      	movs	r0, #0
    b36c:	6008      	str	r0, [r1, #0]
    b36e:	1f09      	subs	r1, r1, #4
    b370:	6008      	str	r0, [r1, #0]
    b372:	1f09      	subs	r1, r1, #4
    b374:	6008      	str	r0, [r1, #0]
    b376:	4902      	ldr	r1, [pc, #8]	; (b380 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x448>)
    b378:	1d09      	adds	r1, r1, #4
    b37a:	6008      	str	r0, [r1, #0]
    b37c:	4770      	bx	lr
    b37e:	0000      	.short	0x0000
    b380:	40008548 	.word	0x40008548
    b384:	4903      	ldr	r1, [pc, #12]	; (b394 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x45c>)
    b386:	7a49      	ldrb	r1, [r1, #9]
    b388:	2900      	cmp	r1, #0
    b38a:	d102      	bne.n	b392 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x45a>
    b38c:	4902      	ldr	r1, [pc, #8]	; (b398 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x460>)
    b38e:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    b392:	4770      	bx	lr
    b394:	20000d84 	.word	0x20000d84
    b398:	4001f098 	.word	0x4001f098
    b39c:	4803      	ldr	r0, [pc, #12]	; (b3ac <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x474>)
    b39e:	2100      	movs	r1, #0
    b3a0:	7241      	strb	r1, [r0, #9]
    b3a2:	7281      	strb	r1, [r0, #10]
    b3a4:	72c1      	strb	r1, [r0, #11]
    b3a6:	2101      	movs	r1, #1
    b3a8:	7301      	strb	r1, [r0, #12]
    b3aa:	4770      	bx	lr
    b3ac:	20000d84 	.word	0x20000d84
    b3b0:	4a05      	ldr	r2, [pc, #20]	; (b3c8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x490>)
    b3b2:	7a52      	ldrb	r2, [r2, #9]
    b3b4:	2a01      	cmp	r2, #1
    b3b6:	d006      	beq.n	b3c6 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x48e>
    b3b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b3bc:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    b3c0:	fbb1 f1f2 	udiv	r1, r1, r2
    b3c4:	1a40      	subs	r0, r0, r1
    b3c6:	4770      	bx	lr
    b3c8:	20000d84 	.word	0x20000d84
    b3cc:	b570      	push	{r4, r5, r6, lr}
    b3ce:	4c13      	ldr	r4, [pc, #76]	; (b41c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4e4>)
    b3d0:	4603      	mov	r3, r0
    b3d2:	460d      	mov	r5, r1
    b3d4:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
    b3d8:	2000      	movs	r0, #0
    b3da:	b15a      	cbz	r2, b3f4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4bc>
    b3dc:	4621      	mov	r1, r4
    b3de:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    b3e2:	b163      	cbz	r3, b3fe <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4c6>
    b3e4:	2b01      	cmp	r3, #1
    b3e6:	d111      	bne.n	b40c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4d4>
    b3e8:	2a01      	cmp	r2, #1
    b3ea:	4628      	mov	r0, r5
    b3ec:	d012      	beq.n	b414 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4dc>
    b3ee:	f003 fed7 	bl	f1a0 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    b3f2:	e009      	b.n	b408 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4d0>
    b3f4:	f240 7186 	movw	r1, #1926	; 0x786
    b3f8:	203e      	movs	r0, #62	; 0x3e
    b3fa:	f7f8 fbcb 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b3fe:	2a01      	cmp	r2, #1
    b400:	4628      	mov	r0, r5
    b402:	d004      	beq.n	b40e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4d6>
    b404:	f003 feda 	bl	f1bc <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    b408:	6a61      	ldr	r1, [r4, #36]	; 0x24
    b40a:	4408      	add	r0, r1
    b40c:	bd70      	pop	{r4, r5, r6, pc}
    b40e:	f003 feef 	bl	f1f0 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    b412:	e7f9      	b.n	b408 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4d0>
    b414:	f003 fedd 	bl	f1d2 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    b418:	e7f6      	b.n	b408 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4d0>
    b41a:	0000      	.short	0x0000
    b41c:	20000d84 	.word	0x20000d84
    b420:	b510      	push	{r4, lr}
    b422:	2200      	movs	r2, #0
    b424:	2901      	cmp	r1, #1
    b426:	d008      	beq.n	b43a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x502>
    b428:	2902      	cmp	r1, #2
    b42a:	d004      	beq.n	b436 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4fe>
    b42c:	f44f 7121 	mov.w	r1, #644	; 0x284
    b430:	203e      	movs	r0, #62	; 0x3e
    b432:	f7f8 fbaf 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b436:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    b43a:	4905      	ldr	r1, [pc, #20]	; (b450 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x518>)
    b43c:	430a      	orrs	r2, r1
    b43e:	4905      	ldr	r1, [pc, #20]	; (b454 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x51c>)
    b440:	600a      	str	r2, [r1, #0]
    b442:	4905      	ldr	r1, [pc, #20]	; (b458 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x520>)
    b444:	4308      	orrs	r0, r1
    b446:	4903      	ldr	r1, [pc, #12]	; (b454 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x51c>)
    b448:	1d09      	adds	r1, r1, #4
    b44a:	6008      	str	r0, [r1, #0]
    b44c:	bd10      	pop	{r4, pc}
    b44e:	0000      	.short	0x0000
    b450:	00100108 	.word	0x00100108
    b454:	40001514 	.word	0x40001514
    b458:	02030000 	.word	0x02030000

0000b45c <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    b45c:	4901      	ldr	r1, [pc, #4]	; (b464 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    b45e:	b2c0      	uxtb	r0, r0
    b460:	6008      	str	r0, [r1, #0]
    b462:	4770      	bx	lr
    b464:	4000150c 	.word	0x4000150c

0000b468 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>:
    b468:	b510      	push	{r4, lr}
    b46a:	4907      	ldr	r1, [pc, #28]	; (b488 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x20>)
    b46c:	2801      	cmp	r0, #1
    b46e:	d005      	beq.n	b47c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x14>
    b470:	2802      	cmp	r0, #2
    b472:	d005      	beq.n	b480 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x18>
    b474:	2197      	movs	r1, #151	; 0x97
    b476:	203f      	movs	r0, #63	; 0x3f
    b478:	f7f8 fb8c 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b47c:	2003      	movs	r0, #3
    b47e:	e000      	b.n	b482 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1a>
    b480:	2004      	movs	r0, #4
    b482:	6008      	str	r0, [r1, #0]
    b484:	bd10      	pop	{r4, pc}
    b486:	0000      	.short	0x0000
    b488:	40001510 	.word	0x40001510

0000b48c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>:
    b48c:	4770      	bx	lr
    b48e:	2100      	movs	r1, #0
    b490:	7081      	strb	r1, [r0, #2]
    b492:	7001      	strb	r1, [r0, #0]
    b494:	7041      	strb	r1, [r0, #1]
    b496:	4770      	bx	lr

0000b498 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    b498:	b570      	push	{r4, r5, r6, lr}
    b49a:	f7f4 ffbb 	bl	414 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    b49e:	4605      	mov	r5, r0
    b4a0:	2400      	movs	r4, #0
    b4a2:	e006      	b.n	b4b2 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    b4a4:	4620      	mov	r0, r4
    b4a6:	f7f4 ffbb 	bl	420 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    b4aa:	f7ff fff0 	bl	b48e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2>
    b4ae:	1c64      	adds	r4, r4, #1
    b4b0:	b2e4      	uxtb	r4, r4
    b4b2:	42ac      	cmp	r4, r5
    b4b4:	d3f6      	bcc.n	b4a4 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    b4b6:	bd70      	pop	{r4, r5, r6, pc}

0000b4b8 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>:
    b4b8:	2000      	movs	r0, #0
    b4ba:	f7f7 bd13 	b.w	2ee4 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>

0000b4be <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>:
    b4be:	b510      	push	{r4, lr}
    b4c0:	f7f7 f9fc 	bl	28bc <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    b4c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b4c8:	f000 b80b 	b.w	b4e2 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>

0000b4cc <sym_BE2HGIHF5RDQALAHNCCVX54XTGKEN4KZFXFBHBQ>:
    b4cc:	0a41      	lsrs	r1, r0, #9
    b4ce:	f643 5209 	movw	r2, #15625	; 0x3d09
    b4d2:	4351      	muls	r1, r2
    b4d4:	f3c0 0008 	ubfx	r0, r0, #0, #9
    b4d8:	fb10 f002 	smulbb	r0, r0, r2
    b4dc:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    b4e0:	4770      	bx	lr

0000b4e2 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
    b4e2:	0a41      	lsrs	r1, r0, #9
    b4e4:	f643 5209 	movw	r2, #15625	; 0x3d09
    b4e8:	4351      	muls	r1, r2
    b4ea:	f3c0 0008 	ubfx	r0, r0, #0, #9
    b4ee:	fb10 f002 	smulbb	r0, r0, r2
    b4f2:	f500 7080 	add.w	r0, r0, #256	; 0x100
    b4f6:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    b4fa:	4770      	bx	lr

0000b4fc <MPSL_IRQ_RADIO_Handler>:
    b4fc:	f7f6 b82a 	b.w	1554 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>
    b500:	2800      	cmp	r0, #0
    b502:	db09      	blt.n	b518 <MPSL_IRQ_RADIO_Handler+0x1c>
    b504:	f000 021f 	and.w	r2, r0, #31
    b508:	2101      	movs	r1, #1
    b50a:	4091      	lsls	r1, r2
    b50c:	0940      	lsrs	r0, r0, #5
    b50e:	0080      	lsls	r0, r0, #2
    b510:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    b514:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    b518:	4770      	bx	lr
    b51a:	2800      	cmp	r0, #0
    b51c:	db0d      	blt.n	b53a <MPSL_IRQ_RADIO_Handler+0x3e>
    b51e:	f000 021f 	and.w	r2, r0, #31
    b522:	2101      	movs	r1, #1
    b524:	4091      	lsls	r1, r2
    b526:	0940      	lsrs	r0, r0, #5
    b528:	0080      	lsls	r0, r0, #2
    b52a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    b52e:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    b532:	f3bf 8f4f 	dsb	sy
    b536:	f3bf 8f6f 	isb	sy
    b53a:	4770      	bx	lr

0000b53c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    b53c:	b570      	push	{r4, r5, r6, lr}
    b53e:	4602      	mov	r2, r0
    b540:	2000      	movs	r0, #0
    b542:	2900      	cmp	r1, #0
    b544:	d01d      	beq.n	b582 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
    b546:	fba2 0101 	umull	r0, r1, r2, r1
    b54a:	0a40      	lsrs	r0, r0, #9
    b54c:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
    b550:	0a49      	lsrs	r1, r1, #9
    b552:	1c40      	adds	r0, r0, #1
    b554:	f141 0100 	adc.w	r1, r1, #0
    b558:	f240 72a1 	movw	r2, #1953	; 0x7a1
    b55c:	1883      	adds	r3, r0, r2
    b55e:	f141 0100 	adc.w	r1, r1, #0
    b562:	1c5b      	adds	r3, r3, #1
    b564:	f141 0400 	adc.w	r4, r1, #0
    b568:	2100      	movs	r1, #0
    b56a:	f1d3 33ff 	rsbs	r3, r3, #4294967295	; 0xffffffff
    b56e:	41a1      	sbcs	r1, r4
    b570:	d203      	bcs.n	b57a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
    b572:	2171      	movs	r1, #113	; 0x71
    b574:	206d      	movs	r0, #109	; 0x6d
    b576:	f7f8 f877 	bl	3668 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b57a:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
    b57e:	fbb0 f0f2 	udiv	r0, r0, r2
    b582:	bd70      	pop	{r4, r5, r6, pc}
    b584:	5840      	ldr	r0, [r0, r1]
    b586:	2800      	cmp	r0, #0
    b588:	d000      	beq.n	b58c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
    b58a:	2001      	movs	r0, #1
    b58c:	4770      	bx	lr
    b58e:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    b592:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    b596:	f002 0201 	and.w	r2, r2, #1
    b59a:	03c0      	lsls	r0, r0, #15
    b59c:	d503      	bpl.n	b5a6 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    b59e:	428a      	cmp	r2, r1
    b5a0:	d101      	bne.n	b5a6 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    b5a2:	2001      	movs	r0, #1
    b5a4:	4770      	bx	lr
    b5a6:	2000      	movs	r0, #0
    b5a8:	4770      	bx	lr

0000b5aa <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    b5aa:	b510      	push	{r4, lr}
    b5ac:	2101      	movs	r1, #1
    b5ae:	0788      	lsls	r0, r1, #30
    b5b0:	f7f8 f818 	bl	35e4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    b5b4:	2800      	cmp	r0, #0
    b5b6:	d000      	beq.n	b5ba <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    b5b8:	2001      	movs	r0, #1
    b5ba:	bd10      	pop	{r4, pc}

0000b5bc <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    b5bc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    b5c0:	2101      	movs	r1, #1
    b5c2:	6001      	str	r1, [r0, #0]
    b5c4:	4770      	bx	lr

0000b5c6 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    b5c6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    b5ca:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    b5ce:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    b5d2:	f002 0203 	and.w	r2, r2, #3
    b5d6:	03c9      	lsls	r1, r1, #15
    b5d8:	d503      	bpl.n	b5e2 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    b5da:	4282      	cmp	r2, r0
    b5dc:	d101      	bne.n	b5e2 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    b5de:	2001      	movs	r0, #1
    b5e0:	4770      	bx	lr
    b5e2:	2000      	movs	r0, #0
    b5e4:	4770      	bx	lr

0000b5e6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    b5e6:	b510      	push	{r4, lr}
    b5e8:	2100      	movs	r1, #0
    b5ea:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    b5ee:	f7f7 fff9 	bl	35e4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    b5f2:	2800      	cmp	r0, #0
    b5f4:	d000      	beq.n	b5f8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    b5f6:	2001      	movs	r0, #1
    b5f8:	bd10      	pop	{r4, pc}
    b5fa:	2800      	cmp	r0, #0
    b5fc:	db09      	blt.n	b612 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    b5fe:	f000 021f 	and.w	r2, r0, #31
    b602:	2101      	movs	r1, #1
    b604:	4091      	lsls	r1, r2
    b606:	0940      	lsrs	r0, r0, #5
    b608:	0080      	lsls	r0, r0, #2
    b60a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    b60e:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    b612:	4770      	bx	lr
    b614:	2800      	cmp	r0, #0
    b616:	db0d      	blt.n	b634 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    b618:	f000 021f 	and.w	r2, r0, #31
    b61c:	2101      	movs	r1, #1
    b61e:	4091      	lsls	r1, r2
    b620:	0940      	lsrs	r0, r0, #5
    b622:	0080      	lsls	r0, r0, #2
    b624:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    b628:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    b62c:	f3bf 8f4f 	dsb	sy
    b630:	f3bf 8f6f 	isb	sy
    b634:	4770      	bx	lr
    b636:	1000      	.short	0x1000
    b638:	00fa0002 	.word	0x00fa0002
    b63c:	8aac0000 	.word	0x8aac0000
    b640:	6d0bcd32 	.word	0x6d0bcd32
    b644:	d80b09dd 	.word	0xd80b09dd
    b648:	2eb78494 	.word	0x2eb78494
    b64c:	1808bff3 	.word	0x1808bff3
    b650:	7bd8      	.short	0x7bd8
    b652:	2800      	cmp	r0, #0
    b654:	db09      	blt.n	b66a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    b656:	f000 021f 	and.w	r2, r0, #31
    b65a:	2101      	movs	r1, #1
    b65c:	4091      	lsls	r1, r2
    b65e:	0940      	lsrs	r0, r0, #5
    b660:	0080      	lsls	r0, r0, #2
    b662:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    b666:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    b66a:	4770      	bx	lr

0000b66c <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    b66c:	f3ef 8110 	mrs	r1, PRIMASK
    b670:	b672      	cpsid	i
    b672:	7802      	ldrb	r2, [r0, #0]
    b674:	2a01      	cmp	r2, #1
    b676:	d001      	beq.n	b67c <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    b678:	2201      	movs	r2, #1
    b67a:	e000      	b.n	b67e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    b67c:	2200      	movs	r2, #0
    b67e:	2301      	movs	r3, #1
    b680:	7003      	strb	r3, [r0, #0]
    b682:	b901      	cbnz	r1, b686 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    b684:	b662      	cpsie	i
    b686:	b10a      	cbz	r2, b68c <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    b688:	2000      	movs	r0, #0
    b68a:	4770      	bx	lr
    b68c:	f06f 0022 	mvn.w	r0, #34	; 0x22
    b690:	4770      	bx	lr

0000b692 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    b692:	2100      	movs	r1, #0
    b694:	7001      	strb	r1, [r0, #0]
    b696:	4608      	mov	r0, r1
    b698:	4770      	bx	lr

0000b69a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    b69a:	f3ef 8110 	mrs	r1, PRIMASK
    b69e:	b672      	cpsid	i
    b6a0:	2200      	movs	r2, #0
    b6a2:	7002      	strb	r2, [r0, #0]
    b6a4:	b901      	cbnz	r1, b6a8 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    b6a6:	b662      	cpsie	i
    b6a8:	2000      	movs	r0, #0
    b6aa:	4770      	bx	lr

0000b6ac <mpsl_low_priority_process>:
    b6ac:	f7f8 b8c8 	b.w	3840 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

0000b6b0 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    b6b0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b6b4:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    b6b8:	280f      	cmp	r0, #15
    b6ba:	d001      	beq.n	b6c0 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    b6bc:	2000      	movs	r0, #0
    b6be:	4770      	bx	lr
    b6c0:	2001      	movs	r0, #1
    b6c2:	4770      	bx	lr

0000b6c4 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    b6c4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b6c8:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    b6cc:	280a      	cmp	r0, #10
    b6ce:	d001      	beq.n	b6d4 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    b6d0:	2000      	movs	r0, #0
    b6d2:	4770      	bx	lr
    b6d4:	2001      	movs	r0, #1
    b6d6:	4770      	bx	lr

0000b6d8 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    b6d8:	b500      	push	{lr}
    b6da:	f7ff fff3 	bl	b6c4 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    b6de:	b120      	cbz	r0, b6ea <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    b6e0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b6e4:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    b6e8:	b108      	cbz	r0, b6ee <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    b6ea:	2000      	movs	r0, #0
    b6ec:	bd00      	pop	{pc}
    b6ee:	2001      	movs	r0, #1
    b6f0:	bd00      	pop	{pc}

0000b6f2 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    b6f2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b6f6:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    b6fa:	280e      	cmp	r0, #14
    b6fc:	d001      	beq.n	b702 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    b6fe:	2000      	movs	r0, #0
    b700:	4770      	bx	lr
    b702:	2001      	movs	r0, #1
    b704:	4770      	bx	lr

0000b706 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    b706:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b70a:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    b70e:	2810      	cmp	r0, #16
    b710:	d001      	beq.n	b716 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    b712:	2000      	movs	r0, #0
    b714:	4770      	bx	lr
    b716:	2001      	movs	r0, #1
    b718:	4770      	bx	lr

0000b71a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    b71a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b71e:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    b722:	2806      	cmp	r0, #6
    b724:	d003      	beq.n	b72e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    b726:	1c40      	adds	r0, r0, #1
    b728:	d001      	beq.n	b72e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    b72a:	2000      	movs	r0, #0
    b72c:	4770      	bx	lr
    b72e:	2001      	movs	r0, #1
    b730:	4770      	bx	lr

0000b732 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    b732:	b500      	push	{lr}
    b734:	f7ff fff1 	bl	b71a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    b738:	b148      	cbz	r0, b74e <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    b73a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b73e:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    b742:	2806      	cmp	r0, #6
    b744:	d303      	bcc.n	b74e <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    b746:	1c40      	adds	r0, r0, #1
    b748:	d001      	beq.n	b74e <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    b74a:	2001      	movs	r0, #1
    b74c:	bd00      	pop	{pc}
    b74e:	2000      	movs	r0, #0
    b750:	bd00      	pop	{pc}

0000b752 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    b752:	b500      	push	{lr}
    b754:	f7ff ffe1 	bl	b71a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    b758:	b138      	cbz	r0, b76a <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    b75a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b75e:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    b762:	2806      	cmp	r0, #6
    b764:	d303      	bcc.n	b76e <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    b766:	1c40      	adds	r0, r0, #1
    b768:	d001      	beq.n	b76e <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    b76a:	2000      	movs	r0, #0
    b76c:	bd00      	pop	{pc}
    b76e:	2001      	movs	r0, #1
    b770:	bd00      	pop	{pc}

0000b772 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    b772:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b776:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    b77a:	280d      	cmp	r0, #13
    b77c:	d001      	beq.n	b782 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    b77e:	2000      	movs	r0, #0
    b780:	4770      	bx	lr
    b782:	2001      	movs	r0, #1
    b784:	4770      	bx	lr

0000b786 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    b786:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b78a:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    b78e:	2808      	cmp	r0, #8
    b790:	d001      	beq.n	b796 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    b792:	2000      	movs	r0, #0
    b794:	4770      	bx	lr
    b796:	2001      	movs	r0, #1
    b798:	4770      	bx	lr

0000b79a <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>:
    b79a:	2a00      	cmp	r2, #0
    b79c:	bf04      	itt	eq
    b79e:	2000      	moveq	r0, #0
    b7a0:	4770      	bxeq	lr
    b7a2:	1e52      	subs	r2, r2, #1
    b7a4:	d007      	beq.n	b7b6 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x1c>
    b7a6:	7803      	ldrb	r3, [r0, #0]
    b7a8:	f891 c000 	ldrb.w	ip, [r1]
    b7ac:	4563      	cmp	r3, ip
    b7ae:	bf04      	itt	eq
    b7b0:	1c40      	addeq	r0, r0, #1
    b7b2:	1c49      	addeq	r1, r1, #1
    b7b4:	d0f5      	beq.n	b7a2 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x8>
    b7b6:	7800      	ldrb	r0, [r0, #0]
    b7b8:	7809      	ldrb	r1, [r1, #0]
    b7ba:	1a40      	subs	r0, r0, r1
    b7bc:	4770      	bx	lr

0000b7be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    b7be:	b4f0      	push	{r4, r5, r6, r7}
    b7c0:	ea80 0c01 	eor.w	ip, r0, r1
    b7c4:	4603      	mov	r3, r0
    b7c6:	f01c 0f03 	tst.w	ip, #3
    b7ca:	d13c      	bne.n	b846 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    b7cc:	f013 0f03 	tst.w	r3, #3
    b7d0:	d00b      	beq.n	b7ea <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
    b7d2:	2a00      	cmp	r2, #0
    b7d4:	bf04      	itt	eq
    b7d6:	bcf0      	popeq	{r4, r5, r6, r7}
    b7d8:	4770      	bxeq	lr
    b7da:	f811 cb01 	ldrb.w	ip, [r1], #1
    b7de:	f803 cb01 	strb.w	ip, [r3], #1
    b7e2:	1e52      	subs	r2, r2, #1
    b7e4:	f013 0f03 	tst.w	r3, #3
    b7e8:	d1f3      	bne.n	b7d2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
    b7ea:	2a03      	cmp	r2, #3
    b7ec:	d94f      	bls.n	b88e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    b7ee:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    b7f2:	d24c      	bcs.n	b88e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    b7f4:	f1c2 0c00 	rsb	ip, r2, #0
    b7f8:	ea4f 74ec 	mov.w	r4, ip, asr #31
    b7fc:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
    b800:	ea4f 0cac 	mov.w	ip, ip, asr #2
    b804:	f1cc 0c00 	rsb	ip, ip, #0
    b808:	f1bc 0f00 	cmp.w	ip, #0
    b80c:	dd1b      	ble.n	b846 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    b80e:	1f0d      	subs	r5, r1, #4
    b810:	1f1c      	subs	r4, r3, #4
    b812:	f01c 0f01 	tst.w	ip, #1
    b816:	d003      	beq.n	b820 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
    b818:	f855 6f04 	ldr.w	r6, [r5, #4]!
    b81c:	f844 6f04 	str.w	r6, [r4, #4]!
    b820:	ea5f 066c 	movs.w	r6, ip, asr #1
    b824:	d007      	beq.n	b836 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
    b826:	686f      	ldr	r7, [r5, #4]
    b828:	6067      	str	r7, [r4, #4]
    b82a:	f855 7f08 	ldr.w	r7, [r5, #8]!
    b82e:	f844 7f08 	str.w	r7, [r4, #8]!
    b832:	1e76      	subs	r6, r6, #1
    b834:	d1f7      	bne.n	b826 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
    b836:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    b83a:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    b83e:	f1cc 0c00 	rsb	ip, ip, #0
    b842:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    b846:	2a00      	cmp	r2, #0
    b848:	bf04      	itt	eq
    b84a:	bcf0      	popeq	{r4, r5, r6, r7}
    b84c:	4770      	bxeq	lr
    b84e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    b852:	d226      	bcs.n	b8a2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    b854:	2a00      	cmp	r2, #0
    b856:	bfdc      	itt	le
    b858:	bcf0      	pople	{r4, r5, r6, r7}
    b85a:	4770      	bxle	lr
    b85c:	1e49      	subs	r1, r1, #1
    b85e:	1e5b      	subs	r3, r3, #1
    b860:	f012 0f01 	tst.w	r2, #1
    b864:	d003      	beq.n	b86e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
    b866:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    b86a:	f803 cf01 	strb.w	ip, [r3, #1]!
    b86e:	1052      	asrs	r2, r2, #1
    b870:	bf04      	itt	eq
    b872:	bcf0      	popeq	{r4, r5, r6, r7}
    b874:	4770      	bxeq	lr
    b876:	f891 c001 	ldrb.w	ip, [r1, #1]
    b87a:	f883 c001 	strb.w	ip, [r3, #1]
    b87e:	f811 cf02 	ldrb.w	ip, [r1, #2]!
    b882:	f803 cf02 	strb.w	ip, [r3, #2]!
    b886:	1e52      	subs	r2, r2, #1
    b888:	d1f5      	bne.n	b876 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
    b88a:	bcf0      	pop	{r4, r5, r6, r7}
    b88c:	4770      	bx	lr
    b88e:	2a04      	cmp	r2, #4
    b890:	d3d9      	bcc.n	b846 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    b892:	f851 cb04 	ldr.w	ip, [r1], #4
    b896:	1f12      	subs	r2, r2, #4
    b898:	f843 cb04 	str.w	ip, [r3], #4
    b89c:	2a04      	cmp	r2, #4
    b89e:	d2f8      	bcs.n	b892 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
    b8a0:	e7d1      	b.n	b846 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    b8a2:	f811 cb01 	ldrb.w	ip, [r1], #1
    b8a6:	f803 cb01 	strb.w	ip, [r3], #1
    b8aa:	1e52      	subs	r2, r2, #1
    b8ac:	d1f9      	bne.n	b8a2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    b8ae:	bcf0      	pop	{r4, r5, r6, r7}
    b8b0:	4770      	bx	lr

0000b8b2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    b8b2:	b470      	push	{r4, r5, r6}
    b8b4:	4603      	mov	r3, r0
    b8b6:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    b8ba:	f010 0f03 	tst.w	r0, #3
    b8be:	d009      	beq.n	b8d4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    b8c0:	2a00      	cmp	r2, #0
    b8c2:	bf04      	itt	eq
    b8c4:	bc70      	popeq	{r4, r5, r6}
    b8c6:	4770      	bxeq	lr
    b8c8:	f803 cb01 	strb.w	ip, [r3], #1
    b8cc:	1e52      	subs	r2, r2, #1
    b8ce:	f013 0f03 	tst.w	r3, #3
    b8d2:	d1f5      	bne.n	b8c0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
    b8d4:	b2c9      	uxtb	r1, r1
    b8d6:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    b8da:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
    b8de:	2a03      	cmp	r2, #3
    b8e0:	d939      	bls.n	b956 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    b8e2:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    b8e6:	d236      	bcs.n	b956 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    b8e8:	4251      	negs	r1, r2
    b8ea:	17cc      	asrs	r4, r1, #31
    b8ec:	eb01 7194 	add.w	r1, r1, r4, lsr #30
    b8f0:	1089      	asrs	r1, r1, #2
    b8f2:	424e      	negs	r6, r1
    b8f4:	2e00      	cmp	r6, #0
    b8f6:	dd11      	ble.n	b91c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    b8f8:	1f19      	subs	r1, r3, #4
    b8fa:	f016 0f01 	tst.w	r6, #1
    b8fe:	bf18      	it	ne
    b900:	f841 5f04 	strne.w	r5, [r1, #4]!
    b904:	1074      	asrs	r4, r6, #1
    b906:	d004      	beq.n	b912 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
    b908:	604d      	str	r5, [r1, #4]
    b90a:	f841 5f08 	str.w	r5, [r1, #8]!
    b90e:	1e64      	subs	r4, r4, #1
    b910:	d1fa      	bne.n	b908 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
    b912:	4271      	negs	r1, r6
    b914:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    b918:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    b91c:	2a00      	cmp	r2, #0
    b91e:	bf04      	itt	eq
    b920:	bc70      	popeq	{r4, r5, r6}
    b922:	4770      	bxeq	lr
    b924:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    b928:	d21d      	bcs.n	b966 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    b92a:	2a00      	cmp	r2, #0
    b92c:	bfdc      	itt	le
    b92e:	bc70      	pople	{r4, r5, r6}
    b930:	4770      	bxle	lr
    b932:	1e59      	subs	r1, r3, #1
    b934:	f012 0f01 	tst.w	r2, #1
    b938:	bf18      	it	ne
    b93a:	f801 cf01 	strbne.w	ip, [r1, #1]!
    b93e:	1052      	asrs	r2, r2, #1
    b940:	bf04      	itt	eq
    b942:	bc70      	popeq	{r4, r5, r6}
    b944:	4770      	bxeq	lr
    b946:	f881 c001 	strb.w	ip, [r1, #1]
    b94a:	f801 cf02 	strb.w	ip, [r1, #2]!
    b94e:	1e52      	subs	r2, r2, #1
    b950:	d1f9      	bne.n	b946 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
    b952:	bc70      	pop	{r4, r5, r6}
    b954:	4770      	bx	lr
    b956:	2a04      	cmp	r2, #4
    b958:	d3e0      	bcc.n	b91c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    b95a:	1f12      	subs	r2, r2, #4
    b95c:	f843 5b04 	str.w	r5, [r3], #4
    b960:	2a04      	cmp	r2, #4
    b962:	d2fa      	bcs.n	b95a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
    b964:	e7da      	b.n	b91c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    b966:	f803 cb01 	strb.w	ip, [r3], #1
    b96a:	1e52      	subs	r2, r2, #1
    b96c:	d1fb      	bne.n	b966 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    b96e:	bc70      	pop	{r4, r5, r6}
    b970:	4770      	bx	lr
    b972:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    b976:	4770      	bx	lr
    b978:	2000      	movs	r0, #0
    b97a:	4770      	bx	lr
    b97c:	2000      	movs	r0, #0
    b97e:	4770      	bx	lr
    b980:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    b984:	4770      	bx	lr
    b986:	4770      	bx	lr
    b988:	4770      	bx	lr
    b98a:	2000      	movs	r0, #0
    b98c:	4770      	bx	lr
    b98e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    b992:	4770      	bx	lr
    b994:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    b998:	4770      	bx	lr
    b99a:	2100      	movs	r1, #0
    b99c:	7001      	strb	r1, [r0, #0]
    b99e:	4770      	bx	lr
    b9a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    b9a4:	4770      	bx	lr
    b9a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    b9aa:	4770      	bx	lr
    b9ac:	2000      	movs	r0, #0
    b9ae:	4770      	bx	lr
    b9b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b9b2:	4604      	mov	r4, r0
    b9b4:	f100 0003 	add.w	r0, r0, #3
    b9b8:	f020 0003 	bic.w	r0, r0, #3
    b9bc:	0016      	movs	r6, r2
    b9be:	9000      	str	r0, [sp, #0]
    b9c0:	460d      	mov	r5, r1
    b9c2:	788a      	ldrb	r2, [r1, #2]
    b9c4:	7849      	ldrb	r1, [r1, #1]
    b9c6:	d000      	beq.n	b9ca <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x118>
    b9c8:	2000      	movs	r0, #0
    b9ca:	f7f8 faf7 	bl	3fbc <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    b9ce:	9900      	ldr	r1, [sp, #0]
    b9d0:	4408      	add	r0, r1
    b9d2:	9000      	str	r0, [sp, #0]
    b9d4:	78a9      	ldrb	r1, [r5, #2]
    b9d6:	b139      	cbz	r1, b9e8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x136>
    b9d8:	89ea      	ldrh	r2, [r5, #14]
    b9da:	b106      	cbz	r6, b9de <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x12c>
    b9dc:	2000      	movs	r0, #0
    b9de:	f7f8 fd53 	bl	4488 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>
    b9e2:	9900      	ldr	r1, [sp, #0]
    b9e4:	4408      	add	r0, r1
    b9e6:	9000      	str	r0, [sp, #0]
    b9e8:	4632      	mov	r2, r6
    b9ea:	4629      	mov	r1, r5
    b9ec:	4668      	mov	r0, sp
    b9ee:	f000 f807 	bl	ba00 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x14e>
    b9f2:	9800      	ldr	r0, [sp, #0]
    b9f4:	1dc0      	adds	r0, r0, #7
    b9f6:	f020 0007 	bic.w	r0, r0, #7
    b9fa:	9000      	str	r0, [sp, #0]
    b9fc:	1b00      	subs	r0, r0, r4
    b9fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ba00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ba04:	4606      	mov	r6, r0
    ba06:	460c      	mov	r4, r1
    ba08:	7808      	ldrb	r0, [r1, #0]
    ba0a:	7849      	ldrb	r1, [r1, #1]
    ba0c:	2700      	movs	r7, #0
    ba0e:	4408      	add	r0, r1
    ba10:	4691      	mov	r9, r2
    ba12:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    ba16:	463d      	mov	r5, r7
    ba18:	e00e      	b.n	ba38 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x186>
    ba1a:	79a3      	ldrb	r3, [r4, #6]
    ba1c:	2b02      	cmp	r3, #2
    ba1e:	d200      	bcs.n	ba22 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x170>
    ba20:	2302      	movs	r3, #2
    ba22:	7962      	ldrb	r2, [r4, #5]
    ba24:	2a03      	cmp	r2, #3
    ba26:	d200      	bcs.n	ba2a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x178>
    ba28:	2203      	movs	r2, #3
    ba2a:	7921      	ldrb	r1, [r4, #4]
    ba2c:	78e0      	ldrb	r0, [r4, #3]
    ba2e:	f000 fee4 	bl	c7fa <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    ba32:	1c6d      	adds	r5, r5, #1
    ba34:	4407      	add	r7, r0
    ba36:	b2ed      	uxtb	r5, r5
    ba38:	4545      	cmp	r5, r8
    ba3a:	d3ee      	bcc.n	ba1a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x168>
    ba3c:	6830      	ldr	r0, [r6, #0]
    ba3e:	1cc0      	adds	r0, r0, #3
    ba40:	f020 0003 	bic.w	r0, r0, #3
    ba44:	6030      	str	r0, [r6, #0]
    ba46:	f1b9 0f00 	cmp.w	r9, #0
    ba4a:	d000      	beq.n	ba4e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x19c>
    ba4c:	2000      	movs	r0, #0
    ba4e:	463a      	mov	r2, r7
    ba50:	4641      	mov	r1, r8
    ba52:	f7f8 fc8b 	bl	436c <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    ba56:	6831      	ldr	r1, [r6, #0]
    ba58:	4408      	add	r0, r1
    ba5a:	6030      	str	r0, [r6, #0]
    ba5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000ba60 <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>:
    ba60:	2000      	movs	r0, #0
    ba62:	4770      	bx	lr

0000ba64 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>:
    ba64:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    ba66:	4604      	mov	r4, r0
    ba68:	1d01      	adds	r1, r0, #4
    ba6a:	4668      	mov	r0, sp
    ba6c:	f7fa f9e2 	bl	5e34 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>
    ba70:	2800      	cmp	r0, #0
    ba72:	d004      	beq.n	ba7e <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I+0x1a>
    ba74:	4669      	mov	r1, sp
    ba76:	4620      	mov	r0, r4
    ba78:	f000 f848 	bl	bb0c <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
    ba7c:	2001      	movs	r0, #1
    ba7e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000ba80 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    ba80:	b50e      	push	{r1, r2, r3, lr}
    ba82:	4601      	mov	r1, r0
    ba84:	4668      	mov	r0, sp
    ba86:	f000 f827 	bl	bad8 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    ba8a:	4668      	mov	r0, sp
    ba8c:	f7fa f9fc 	bl	5e88 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    ba90:	bd0e      	pop	{r1, r2, r3, pc}

0000ba92 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>:
    ba92:	b510      	push	{r4, lr}
    ba94:	4604      	mov	r4, r0
    ba96:	4620      	mov	r0, r4
    ba98:	f7f8 f97c 	bl	3d94 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x50>
    ba9c:	2800      	cmp	r0, #0
    ba9e:	d006      	beq.n	baae <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1c>
    baa0:	78a1      	ldrb	r1, [r4, #2]
    baa2:	7820      	ldrb	r0, [r4, #0]
    baa4:	f000 f804 	bl	bab0 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    baa8:	2800      	cmp	r0, #0
    baaa:	d0f4      	beq.n	ba96 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x4>
    baac:	2001      	movs	r0, #1
    baae:	bd10      	pop	{r4, pc}
    bab0:	b570      	push	{r4, r5, r6, lr}
    bab2:	460c      	mov	r4, r1
    bab4:	4605      	mov	r5, r0
    bab6:	f7f8 f9e1 	bl	3e7c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    baba:	2800      	cmp	r0, #0
    babc:	d002      	beq.n	bac4 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x32>
    babe:	2d3e      	cmp	r5, #62	; 0x3e
    bac0:	d001      	beq.n	bac6 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x34>
    bac2:	2001      	movs	r0, #1
    bac4:	bd70      	pop	{r4, r5, r6, pc}
    bac6:	2c12      	cmp	r4, #18
    bac8:	d004      	beq.n	bad4 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x42>
    baca:	4620      	mov	r0, r4
    bacc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    bad0:	f7f8 b9f0 	b.w	3eb4 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    bad4:	2000      	movs	r0, #0
    bad6:	bd70      	pop	{r4, r5, r6, pc}

0000bad8 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    bad8:	880a      	ldrh	r2, [r1, #0]
    bada:	f3c2 020b 	ubfx	r2, r2, #0, #12
    bade:	8002      	strh	r2, [r0, #0]
    bae0:	884a      	ldrh	r2, [r1, #2]
    bae2:	8042      	strh	r2, [r0, #2]
    bae4:	784a      	ldrb	r2, [r1, #1]
    bae6:	0993      	lsrs	r3, r2, #6
    bae8:	2200      	movs	r2, #0
    baea:	7142      	strb	r2, [r0, #5]
    baec:	784b      	ldrb	r3, [r1, #1]
    baee:	f3c3 1301 	ubfx	r3, r3, #4, #2
    baf2:	b11b      	cbz	r3, bafc <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    baf4:	2b01      	cmp	r3, #1
    baf6:	d005      	beq.n	bb04 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    baf8:	2b02      	cmp	r3, #2
    bafa:	d005      	beq.n	bb08 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    bafc:	7102      	strb	r2, [r0, #4]
    bafe:	1d09      	adds	r1, r1, #4
    bb00:	6081      	str	r1, [r0, #8]
    bb02:	4770      	bx	lr
    bb04:	2201      	movs	r2, #1
    bb06:	e7f9      	b.n	bafc <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    bb08:	2202      	movs	r2, #2
    bb0a:	e7f7      	b.n	bafc <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000bb0c <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    bb0c:	b510      	push	{r4, lr}
    bb0e:	460c      	mov	r4, r1
    bb10:	7809      	ldrb	r1, [r1, #0]
    bb12:	7001      	strb	r1, [r0, #0]
    bb14:	7841      	ldrb	r1, [r0, #1]
    bb16:	f021 010f 	bic.w	r1, r1, #15
    bb1a:	7041      	strb	r1, [r0, #1]
    bb1c:	8822      	ldrh	r2, [r4, #0]
    bb1e:	f3c2 2203 	ubfx	r2, r2, #8, #4
    bb22:	4311      	orrs	r1, r2
    bb24:	7041      	strb	r1, [r0, #1]
    bb26:	78a2      	ldrb	r2, [r4, #2]
    bb28:	7082      	strb	r2, [r0, #2]
    bb2a:	8862      	ldrh	r2, [r4, #2]
    bb2c:	f021 0130 	bic.w	r1, r1, #48	; 0x30
    bb30:	0a12      	lsrs	r2, r2, #8
    bb32:	70c2      	strb	r2, [r0, #3]
    bb34:	7041      	strb	r1, [r0, #1]
    bb36:	7922      	ldrb	r2, [r4, #4]
    bb38:	f002 0203 	and.w	r2, r2, #3
    bb3c:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    bb40:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
    bb44:	7041      	strb	r1, [r0, #1]
    bb46:	7962      	ldrb	r2, [r4, #5]
    bb48:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    bb4c:	7041      	strb	r1, [r0, #1]
    bb4e:	68a1      	ldr	r1, [r4, #8]
    bb50:	1d02      	adds	r2, r0, #4
    bb52:	4291      	cmp	r1, r2
    bb54:	d006      	beq.n	bb64 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x58>
    bb56:	8862      	ldrh	r2, [r4, #2]
    bb58:	2afb      	cmp	r2, #251	; 0xfb
    bb5a:	d300      	bcc.n	bb5e <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x52>
    bb5c:	22fb      	movs	r2, #251	; 0xfb
    bb5e:	1d00      	adds	r0, r0, #4
    bb60:	f7ff fe2d 	bl	b7be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    bb64:	78a0      	ldrb	r0, [r4, #2]
    bb66:	1d00      	adds	r0, r0, #4
    bb68:	b2c0      	uxtb	r0, r0
    bb6a:	bd10      	pop	{r4, pc}

0000bb6c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    bb6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bb70:	4604      	mov	r4, r0
    bb72:	780f      	ldrb	r7, [r1, #0]
    bb74:	2000      	movs	r0, #0
    bb76:	250c      	movs	r5, #12
    bb78:	2605      	movs	r6, #5
    bb7a:	223e      	movs	r2, #62	; 0x3e
    bb7c:	23ff      	movs	r3, #255	; 0xff
    bb7e:	2f1b      	cmp	r7, #27
    bb80:	d27d      	bcs.n	bc7e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x112>
    bb82:	e8df f007 	tbb	[pc, r7]
    bb86:	0eeb      	.short	0x0eeb
    bb88:	632d2725 	.word	0x632d2725
    bb8c:	af9b816d 	.word	0xaf9b816d
    bb90:	e2c7bcb1 	.word	0xe2c7bcb1
    bb94:	31ebebf5 	.word	0x31ebebf5
    bb98:	f2fed5d2 	.word	0xf2fed5d2
    bb9c:	eeeff0f1 	.word	0xeeeff0f1
    bba0:	00ed      	.short	0x00ed
    bba2:	7025      	strb	r5, [r4, #0]
    bba4:	7908      	ldrb	r0, [r1, #4]
    bba6:	70a0      	strb	r0, [r4, #2]
    bba8:	7948      	ldrb	r0, [r1, #5]
    bbaa:	70e0      	strb	r0, [r4, #3]
    bbac:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    bbb0:	0a00      	lsrs	r0, r0, #8
    bbb2:	7120      	strb	r0, [r4, #4]
    bbb4:	79c8      	ldrb	r0, [r1, #7]
    bbb6:	7160      	strb	r0, [r4, #5]
    bbb8:	7a08      	ldrb	r0, [r1, #8]
    bbba:	71a0      	strb	r0, [r4, #6]
    bbbc:	8908      	ldrh	r0, [r1, #8]
    bbbe:	0a00      	lsrs	r0, r0, #8
    bbc0:	71e0      	strb	r0, [r4, #7]
    bbc2:	7a88      	ldrb	r0, [r1, #10]
    bbc4:	7220      	strb	r0, [r4, #8]
    bbc6:	8948      	ldrh	r0, [r1, #10]
    bbc8:	0a00      	lsrs	r0, r0, #8
    bbca:	7260      	strb	r0, [r4, #9]
    bbcc:	2008      	movs	r0, #8
    bbce:	e0c2      	b.n	bd56 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    bbd0:	2010      	movs	r0, #16
    bbd2:	e000      	b.n	bbd6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x6a>
    bbd4:	201a      	movs	r0, #26
    bbd6:	7020      	strb	r0, [r4, #0]
    bbd8:	7908      	ldrb	r0, [r1, #4]
    bbda:	70a0      	strb	r0, [r4, #2]
    bbdc:	2001      	movs	r0, #1
    bbde:	e0ba      	b.n	bd56 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    bbe0:	4620      	mov	r0, r4
    bbe2:	f000 f947 	bl	be74 <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>
    bbe6:	e0b4      	b.n	bd52 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e6>
    bbe8:	7022      	strb	r2, [r4, #0]
    bbea:	200a      	movs	r0, #10
    bbec:	70a0      	strb	r0, [r4, #2]
    bbee:	f811 0f04 	ldrb.w	r0, [r1, #4]!
    bbf2:	70e0      	strb	r0, [r4, #3]
    bbf4:	7888      	ldrb	r0, [r1, #2]
    bbf6:	7120      	strb	r0, [r4, #4]
    bbf8:	8848      	ldrh	r0, [r1, #2]
    bbfa:	0a00      	lsrs	r0, r0, #8
    bbfc:	7160      	strb	r0, [r4, #5]
    bbfe:	7908      	ldrb	r0, [r1, #4]
    bc00:	71a0      	strb	r0, [r4, #6]
    bc02:	7948      	ldrb	r0, [r1, #5]
    bc04:	71e0      	strb	r0, [r4, #7]
    bc06:	f8d1 0006 	ldr.w	r0, [r1, #6]
    bc0a:	60a0      	str	r0, [r4, #8]
    bc0c:	8948      	ldrh	r0, [r1, #10]
    bc0e:	81a0      	strh	r0, [r4, #12]
    bc10:	68c8      	ldr	r0, [r1, #12]
    bc12:	f8c4 000e 	str.w	r0, [r4, #14]
    bc16:	8a08      	ldrh	r0, [r1, #16]
    bc18:	8260      	strh	r0, [r4, #18]
    bc1a:	f8d1 0012 	ldr.w	r0, [r1, #18]
    bc1e:	6160      	str	r0, [r4, #20]
    bc20:	8ac8      	ldrh	r0, [r1, #22]
    bc22:	8320      	strh	r0, [r4, #24]
    bc24:	7e08      	ldrb	r0, [r1, #24]
    bc26:	76a0      	strb	r0, [r4, #26]
    bc28:	8b08      	ldrh	r0, [r1, #24]
    bc2a:	0a00      	lsrs	r0, r0, #8
    bc2c:	76e0      	strb	r0, [r4, #27]
    bc2e:	7e88      	ldrb	r0, [r1, #26]
    bc30:	7720      	strb	r0, [r4, #28]
    bc32:	8b48      	ldrh	r0, [r1, #26]
    bc34:	0a00      	lsrs	r0, r0, #8
    bc36:	7760      	strb	r0, [r4, #29]
    bc38:	7f08      	ldrb	r0, [r1, #28]
    bc3a:	77a0      	strb	r0, [r4, #30]
    bc3c:	8b88      	ldrh	r0, [r1, #28]
    bc3e:	0a00      	lsrs	r0, r0, #8
    bc40:	77e0      	strb	r0, [r4, #31]
    bc42:	7f88      	ldrb	r0, [r1, #30]
    bc44:	f884 0020 	strb.w	r0, [r4, #32]
    bc48:	201f      	movs	r0, #31
    bc4a:	e084      	b.n	bd56 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    bc4c:	7022      	strb	r2, [r4, #0]
    bc4e:	2014      	movs	r0, #20
    bc50:	70a0      	strb	r0, [r4, #2]
    bc52:	7908      	ldrb	r0, [r1, #4]
    bc54:	70e0      	strb	r0, [r4, #3]
    bc56:	8888      	ldrh	r0, [r1, #4]
    bc58:	0a00      	lsrs	r0, r0, #8
    bc5a:	7120      	strb	r0, [r4, #4]
    bc5c:	7988      	ldrb	r0, [r1, #6]
    bc5e:	e0a8      	b.n	bdb2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x246>
    bc60:	7022      	strb	r2, [r4, #0]
    bc62:	2004      	movs	r0, #4
    bc64:	70a0      	strb	r0, [r4, #2]
    bc66:	7908      	ldrb	r0, [r1, #4]
    bc68:	70e0      	strb	r0, [r4, #3]
    bc6a:	7988      	ldrb	r0, [r1, #6]
    bc6c:	7120      	strb	r0, [r4, #4]
    bc6e:	88c8      	ldrh	r0, [r1, #6]
    bc70:	0a00      	lsrs	r0, r0, #8
    bc72:	7160      	strb	r0, [r4, #5]
    bc74:	6888      	ldr	r0, [r1, #8]
    bc76:	f8c4 0006 	str.w	r0, [r4, #6]
    bc7a:	68c8      	ldr	r0, [r1, #12]
    bc7c:	e000      	b.n	bc80 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x114>
    bc7e:	e06d      	b.n	bd5c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1f0>
    bc80:	f8c4 000a 	str.w	r0, [r4, #10]
    bc84:	200c      	movs	r0, #12
    bc86:	e066      	b.n	bd56 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    bc88:	7022      	strb	r2, [r4, #0]
    bc8a:	2003      	movs	r0, #3
    bc8c:	70a0      	strb	r0, [r4, #2]
    bc8e:	7908      	ldrb	r0, [r1, #4]
    bc90:	70e0      	strb	r0, [r4, #3]
    bc92:	7988      	ldrb	r0, [r1, #6]
    bc94:	7120      	strb	r0, [r4, #4]
    bc96:	88c8      	ldrh	r0, [r1, #6]
    bc98:	0a00      	lsrs	r0, r0, #8
    bc9a:	7160      	strb	r0, [r4, #5]
    bc9c:	7a08      	ldrb	r0, [r1, #8]
    bc9e:	71a0      	strb	r0, [r4, #6]
    bca0:	8908      	ldrh	r0, [r1, #8]
    bca2:	0a00      	lsrs	r0, r0, #8
    bca4:	71e0      	strb	r0, [r4, #7]
    bca6:	7a88      	ldrb	r0, [r1, #10]
    bca8:	7220      	strb	r0, [r4, #8]
    bcaa:	8948      	ldrh	r0, [r1, #10]
    bcac:	0a00      	lsrs	r0, r0, #8
    bcae:	7260      	strb	r0, [r4, #9]
    bcb0:	7b08      	ldrb	r0, [r1, #12]
    bcb2:	72a0      	strb	r0, [r4, #10]
    bcb4:	8988      	ldrh	r0, [r1, #12]
    bcb6:	0a00      	lsrs	r0, r0, #8
    bcb8:	72e0      	strb	r0, [r4, #11]
    bcba:	e0d9      	b.n	be70 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x304>
    bcbc:	7022      	strb	r2, [r4, #0]
    bcbe:	70a6      	strb	r6, [r4, #2]
    bcc0:	7908      	ldrb	r0, [r1, #4]
    bcc2:	70e0      	strb	r0, [r4, #3]
    bcc4:	8888      	ldrh	r0, [r1, #4]
    bcc6:	0a00      	lsrs	r0, r0, #8
    bcc8:	7120      	strb	r0, [r4, #4]
    bcca:	f8d1 0006 	ldr.w	r0, [r1, #6]
    bcce:	f8c4 0005 	str.w	r0, [r4, #5]
    bcd2:	f8d1 000a 	ldr.w	r0, [r1, #10]
    bcd6:	f8c4 0009 	str.w	r0, [r4, #9]
    bcda:	89c8      	ldrh	r0, [r1, #14]
    bcdc:	f8a4 000d 	strh.w	r0, [r4, #13]
    bce0:	200d      	movs	r0, #13
    bce2:	e038      	b.n	bd56 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    bce4:	2011      	movs	r0, #17
    bce6:	e044      	b.n	bd72 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x206>
    bce8:	7026      	strb	r6, [r4, #0]
    bcea:	7908      	ldrb	r0, [r1, #4]
    bcec:	70a0      	strb	r0, [r4, #2]
    bcee:	7948      	ldrb	r0, [r1, #5]
    bcf0:	70e0      	strb	r0, [r4, #3]
    bcf2:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    bcf6:	0a00      	lsrs	r0, r0, #8
    bcf8:	7120      	strb	r0, [r4, #4]
    bcfa:	79c8      	ldrb	r0, [r1, #7]
    bcfc:	e059      	b.n	bdb2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x246>
    bcfe:	2008      	movs	r0, #8
    bd00:	7020      	strb	r0, [r4, #0]
    bd02:	7908      	ldrb	r0, [r1, #4]
    bd04:	70a0      	strb	r0, [r4, #2]
    bd06:	7988      	ldrb	r0, [r1, #6]
    bd08:	70e0      	strb	r0, [r4, #3]
    bd0a:	88c8      	ldrh	r0, [r1, #6]
    bd0c:	0a00      	lsrs	r0, r0, #8
    bd0e:	7120      	strb	r0, [r4, #4]
    bd10:	7a08      	ldrb	r0, [r1, #8]
    bd12:	e04e      	b.n	bdb2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x246>
    bd14:	2030      	movs	r0, #48	; 0x30
    bd16:	7020      	strb	r0, [r4, #0]
    bd18:	7908      	ldrb	r0, [r1, #4]
    bd1a:	70a0      	strb	r0, [r4, #2]
    bd1c:	7988      	ldrb	r0, [r1, #6]
    bd1e:	70e0      	strb	r0, [r4, #3]
    bd20:	88c8      	ldrh	r0, [r1, #6]
    bd22:	0a00      	lsrs	r0, r0, #8
    bd24:	7120      	strb	r0, [r4, #4]
    bd26:	2003      	movs	r0, #3
    bd28:	e015      	b.n	bd56 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    bd2a:	7022      	strb	r2, [r4, #0]
    bd2c:	2007      	movs	r0, #7
    bd2e:	e045      	b.n	bdbc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x250>
    bd30:	7022      	strb	r2, [r4, #0]
    bd32:	70a5      	strb	r5, [r4, #2]
    bd34:	7908      	ldrb	r0, [r1, #4]
    bd36:	70e0      	strb	r0, [r4, #3]
    bd38:	7988      	ldrb	r0, [r1, #6]
    bd3a:	7120      	strb	r0, [r4, #4]
    bd3c:	88c8      	ldrh	r0, [r1, #6]
    bd3e:	0a00      	lsrs	r0, r0, #8
    bd40:	7160      	strb	r0, [r4, #5]
    bd42:	7a08      	ldrb	r0, [r1, #8]
    bd44:	71a0      	strb	r0, [r4, #6]
    bd46:	7a48      	ldrb	r0, [r1, #9]
    bd48:	e028      	b.n	bd9c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x230>
    bd4a:	4620      	mov	r0, r4
    bd4c:	1d09      	adds	r1, r1, #4
    bd4e:	f7f8 f867 	bl	3e20 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xdc>
    bd52:	2800      	cmp	r0, #0
    bd54:	d002      	beq.n	bd5c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1f0>
    bd56:	7060      	strb	r0, [r4, #1]
    bd58:	1c80      	adds	r0, r0, #2
    bd5a:	b2c0      	uxtb	r0, r0
    bd5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bd60:	e073      	b.n	be4a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2de>
    bd62:	e047      	b.n	bdf4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x288>
    bd64:	e028      	b.n	bdb8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24c>
    bd66:	e053      	b.n	be10 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2a4>
    bd68:	e061      	b.n	be2e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c2>
    bd6a:	e01a      	b.n	bda2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x236>
    bd6c:	e009      	b.n	bd82 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x216>
    bd6e:	e7ff      	b.n	bd70 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x204>
    bd70:	2057      	movs	r0, #87	; 0x57
    bd72:	7020      	strb	r0, [r4, #0]
    bd74:	7908      	ldrb	r0, [r1, #4]
    bd76:	70a0      	strb	r0, [r4, #2]
    bd78:	8888      	ldrh	r0, [r1, #4]
    bd7a:	0a00      	lsrs	r0, r0, #8
    bd7c:	70e0      	strb	r0, [r4, #3]
    bd7e:	2002      	movs	r0, #2
    bd80:	e7e9      	b.n	bd56 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    bd82:	7022      	strb	r2, [r4, #0]
    bd84:	2012      	movs	r0, #18
    bd86:	70a0      	strb	r0, [r4, #2]
    bd88:	7908      	ldrb	r0, [r1, #4]
    bd8a:	70e0      	strb	r0, [r4, #3]
    bd8c:	7948      	ldrb	r0, [r1, #5]
    bd8e:	7120      	strb	r0, [r4, #4]
    bd90:	7988      	ldrb	r0, [r1, #6]
    bd92:	7160      	strb	r0, [r4, #5]
    bd94:	88c8      	ldrh	r0, [r1, #6]
    bd96:	0a00      	lsrs	r0, r0, #8
    bd98:	71a0      	strb	r0, [r4, #6]
    bd9a:	7a08      	ldrb	r0, [r1, #8]
    bd9c:	71e0      	strb	r0, [r4, #7]
    bd9e:	2006      	movs	r0, #6
    bda0:	e7d9      	b.n	bd56 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    bda2:	7023      	strb	r3, [r4, #0]
    bda4:	20a1      	movs	r0, #161	; 0xa1
    bda6:	70a0      	strb	r0, [r4, #2]
    bda8:	7908      	ldrb	r0, [r1, #4]
    bdaa:	70e0      	strb	r0, [r4, #3]
    bdac:	7948      	ldrb	r0, [r1, #5]
    bdae:	7120      	strb	r0, [r4, #4]
    bdb0:	2000      	movs	r0, #0
    bdb2:	7160      	strb	r0, [r4, #5]
    bdb4:	2004      	movs	r0, #4
    bdb6:	e7ce      	b.n	bd56 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    bdb8:	7023      	strb	r3, [r4, #0]
    bdba:	20a2      	movs	r0, #162	; 0xa2
    bdbc:	70a0      	strb	r0, [r4, #2]
    bdbe:	7908      	ldrb	r0, [r1, #4]
    bdc0:	70e0      	strb	r0, [r4, #3]
    bdc2:	8888      	ldrh	r0, [r1, #4]
    bdc4:	0a00      	lsrs	r0, r0, #8
    bdc6:	7120      	strb	r0, [r4, #4]
    bdc8:	7988      	ldrb	r0, [r1, #6]
    bdca:	7160      	strb	r0, [r4, #5]
    bdcc:	88c8      	ldrh	r0, [r1, #6]
    bdce:	0a00      	lsrs	r0, r0, #8
    bdd0:	71a0      	strb	r0, [r4, #6]
    bdd2:	7a08      	ldrb	r0, [r1, #8]
    bdd4:	71e0      	strb	r0, [r4, #7]
    bdd6:	8908      	ldrh	r0, [r1, #8]
    bdd8:	0a00      	lsrs	r0, r0, #8
    bdda:	7220      	strb	r0, [r4, #8]
    bddc:	7a88      	ldrb	r0, [r1, #10]
    bdde:	7260      	strb	r0, [r4, #9]
    bde0:	8948      	ldrh	r0, [r1, #10]
    bde2:	0a00      	lsrs	r0, r0, #8
    bde4:	72a0      	strb	r0, [r4, #10]
    bde6:	7b08      	ldrb	r0, [r1, #12]
    bde8:	72e0      	strb	r0, [r4, #11]
    bdea:	8988      	ldrh	r0, [r1, #12]
    bdec:	0a00      	lsrs	r0, r0, #8
    bdee:	7320      	strb	r0, [r4, #12]
    bdf0:	200b      	movs	r0, #11
    bdf2:	e7b0      	b.n	bd56 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    bdf4:	7023      	strb	r3, [r4, #0]
    bdf6:	20a3      	movs	r0, #163	; 0xa3
    bdf8:	70a0      	strb	r0, [r4, #2]
    bdfa:	7908      	ldrb	r0, [r1, #4]
    bdfc:	70e0      	strb	r0, [r4, #3]
    bdfe:	8888      	ldrh	r0, [r1, #4]
    be00:	0a00      	lsrs	r0, r0, #8
    be02:	7120      	strb	r0, [r4, #4]
    be04:	7988      	ldrb	r0, [r1, #6]
    be06:	7160      	strb	r0, [r4, #5]
    be08:	79c8      	ldrb	r0, [r1, #7]
    be0a:	71a0      	strb	r0, [r4, #6]
    be0c:	2005      	movs	r0, #5
    be0e:	e7a2      	b.n	bd56 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    be10:	7022      	strb	r2, [r4, #0]
    be12:	2013      	movs	r0, #19
    be14:	70a0      	strb	r0, [r4, #2]
    be16:	7908      	ldrb	r0, [r1, #4]
    be18:	70e0      	strb	r0, [r4, #3]
    be1a:	7948      	ldrb	r0, [r1, #5]
    be1c:	7120      	strb	r0, [r4, #4]
    be1e:	f8d1 0006 	ldr.w	r0, [r1, #6]
    be22:	f8c4 0005 	str.w	r0, [r4, #5]
    be26:	8948      	ldrh	r0, [r1, #10]
    be28:	f8a4 0009 	strh.w	r0, [r4, #9]
    be2c:	e020      	b.n	be70 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x304>
    be2e:	7023      	strb	r3, [r4, #0]
    be30:	20a4      	movs	r0, #164	; 0xa4
    be32:	70a0      	strb	r0, [r4, #2]
    be34:	7908      	ldrb	r0, [r1, #4]
    be36:	70e0      	strb	r0, [r4, #3]
    be38:	8888      	ldrh	r0, [r1, #4]
    be3a:	0a00      	lsrs	r0, r0, #8
    be3c:	7120      	strb	r0, [r4, #4]
    be3e:	7988      	ldrb	r0, [r1, #6]
    be40:	7160      	strb	r0, [r4, #5]
    be42:	79c8      	ldrb	r0, [r1, #7]
    be44:	71a0      	strb	r0, [r4, #6]
    be46:	2007      	movs	r0, #7
    be48:	e785      	b.n	bd56 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    be4a:	7023      	strb	r3, [r4, #0]
    be4c:	2080      	movs	r0, #128	; 0x80
    be4e:	70a0      	strb	r0, [r4, #2]
    be50:	888a      	ldrh	r2, [r1, #4]
    be52:	f8a4 2003 	strh.w	r2, [r4, #3]
    be56:	88ca      	ldrh	r2, [r1, #6]
    be58:	f8a4 2005 	strh.w	r2, [r4, #5]
    be5c:	7a0a      	ldrb	r2, [r1, #8]
    be5e:	71e2      	strb	r2, [r4, #7]
    be60:	7a4a      	ldrb	r2, [r1, #9]
    be62:	8122      	strh	r2, [r4, #8]
    be64:	7a8a      	ldrb	r2, [r1, #10]
    be66:	72a2      	strb	r2, [r4, #10]
    be68:	7ac9      	ldrb	r1, [r1, #11]
    be6a:	f001 0101 	and.w	r1, r1, #1
    be6e:	72e1      	strb	r1, [r4, #11]
    be70:	200a      	movs	r0, #10
    be72:	e770      	b.n	bd56 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>

0000be74 <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>:
    be74:	223e      	movs	r2, #62	; 0x3e
    be76:	7002      	strb	r2, [r0, #0]
    be78:	2201      	movs	r2, #1
    be7a:	7082      	strb	r2, [r0, #2]
    be7c:	790a      	ldrb	r2, [r1, #4]
    be7e:	70c2      	strb	r2, [r0, #3]
    be80:	798a      	ldrb	r2, [r1, #6]
    be82:	7102      	strb	r2, [r0, #4]
    be84:	88ca      	ldrh	r2, [r1, #6]
    be86:	0a12      	lsrs	r2, r2, #8
    be88:	7142      	strb	r2, [r0, #5]
    be8a:	7a0a      	ldrb	r2, [r1, #8]
    be8c:	7182      	strb	r2, [r0, #6]
    be8e:	7a4a      	ldrb	r2, [r1, #9]
    be90:	71c2      	strb	r2, [r0, #7]
    be92:	f8d1 200a 	ldr.w	r2, [r1, #10]
    be96:	6082      	str	r2, [r0, #8]
    be98:	89ca      	ldrh	r2, [r1, #14]
    be9a:	8182      	strh	r2, [r0, #12]
    be9c:	7c0a      	ldrb	r2, [r1, #16]
    be9e:	7382      	strb	r2, [r0, #14]
    bea0:	8a0a      	ldrh	r2, [r1, #16]
    bea2:	0a12      	lsrs	r2, r2, #8
    bea4:	73c2      	strb	r2, [r0, #15]
    bea6:	7c8a      	ldrb	r2, [r1, #18]
    bea8:	7402      	strb	r2, [r0, #16]
    beaa:	8a4a      	ldrh	r2, [r1, #18]
    beac:	0a12      	lsrs	r2, r2, #8
    beae:	7442      	strb	r2, [r0, #17]
    beb0:	7d0a      	ldrb	r2, [r1, #20]
    beb2:	7482      	strb	r2, [r0, #18]
    beb4:	8a8a      	ldrh	r2, [r1, #20]
    beb6:	0a12      	lsrs	r2, r2, #8
    beb8:	74c2      	strb	r2, [r0, #19]
    beba:	7d89      	ldrb	r1, [r1, #22]
    bebc:	7501      	strb	r1, [r0, #20]
    bebe:	2013      	movs	r0, #19
    bec0:	4770      	bx	lr

0000bec2 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
    bec2:	223e      	movs	r2, #62	; 0x3e
    bec4:	7002      	strb	r2, [r0, #0]
    bec6:	2201      	movs	r2, #1
    bec8:	7082      	strb	r2, [r0, #2]
    beca:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    bece:	70c2      	strb	r2, [r0, #3]
    bed0:	788a      	ldrb	r2, [r1, #2]
    bed2:	7102      	strb	r2, [r0, #4]
    bed4:	884a      	ldrh	r2, [r1, #2]
    bed6:	0a12      	lsrs	r2, r2, #8
    bed8:	7142      	strb	r2, [r0, #5]
    beda:	790a      	ldrb	r2, [r1, #4]
    bedc:	7182      	strb	r2, [r0, #6]
    bede:	794a      	ldrb	r2, [r1, #5]
    bee0:	71c2      	strb	r2, [r0, #7]
    bee2:	f8d1 2006 	ldr.w	r2, [r1, #6]
    bee6:	6082      	str	r2, [r0, #8]
    bee8:	894a      	ldrh	r2, [r1, #10]
    beea:	8182      	strh	r2, [r0, #12]
    beec:	7e0a      	ldrb	r2, [r1, #24]
    beee:	7382      	strb	r2, [r0, #14]
    bef0:	8b0a      	ldrh	r2, [r1, #24]
    bef2:	0a12      	lsrs	r2, r2, #8
    bef4:	73c2      	strb	r2, [r0, #15]
    bef6:	7e8a      	ldrb	r2, [r1, #26]
    bef8:	7402      	strb	r2, [r0, #16]
    befa:	8b4a      	ldrh	r2, [r1, #26]
    befc:	0a12      	lsrs	r2, r2, #8
    befe:	7442      	strb	r2, [r0, #17]
    bf00:	7f0a      	ldrb	r2, [r1, #28]
    bf02:	7482      	strb	r2, [r0, #18]
    bf04:	8b8a      	ldrh	r2, [r1, #28]
    bf06:	0a12      	lsrs	r2, r2, #8
    bf08:	74c2      	strb	r2, [r0, #19]
    bf0a:	7f89      	ldrb	r1, [r1, #30]
    bf0c:	7501      	strb	r1, [r0, #20]
    bf0e:	2113      	movs	r1, #19
    bf10:	7041      	strb	r1, [r0, #1]
    bf12:	4608      	mov	r0, r1
    bf14:	4770      	bx	lr

0000bf16 <sdc_hci_data_get>:
    bf16:	b510      	push	{r4, lr}
    bf18:	b120      	cbz	r0, bf24 <sdc_hci_data_get+0xe>
    bf1a:	f7ff fda3 	bl	ba64 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>
    bf1e:	b120      	cbz	r0, bf2a <sdc_hci_data_get+0x14>
    bf20:	2000      	movs	r0, #0
    bf22:	bd10      	pop	{r4, pc}
    bf24:	f06f 0015 	mvn.w	r0, #21
    bf28:	bd10      	pop	{r4, pc}
    bf2a:	f06f 0022 	mvn.w	r0, #34	; 0x22
    bf2e:	bd10      	pop	{r4, pc}

0000bf30 <sdc_hci_data_put>:
    bf30:	b510      	push	{r4, lr}
    bf32:	f06f 0415 	mvn.w	r4, #21
    bf36:	b120      	cbz	r0, bf42 <sdc_hci_data_put+0x12>
    bf38:	f7ff fda2 	bl	ba80 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    bf3c:	b108      	cbz	r0, bf42 <sdc_hci_data_put+0x12>
    bf3e:	2000      	movs	r0, #0
    bf40:	bd10      	pop	{r4, pc}
    bf42:	4620      	mov	r0, r4
    bf44:	bd10      	pop	{r4, pc}

0000bf46 <sdc_hci_evt_get>:
    bf46:	b510      	push	{r4, lr}
    bf48:	b120      	cbz	r0, bf54 <sdc_hci_evt_get+0xe>
    bf4a:	f7ff fda2 	bl	ba92 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>
    bf4e:	b120      	cbz	r0, bf5a <sdc_hci_evt_get+0x14>
    bf50:	2000      	movs	r0, #0
    bf52:	bd10      	pop	{r4, pc}
    bf54:	f06f 0015 	mvn.w	r0, #21
    bf58:	bd10      	pop	{r4, pc}
    bf5a:	f06f 0022 	mvn.w	r0, #34	; 0x22
    bf5e:	bd10      	pop	{r4, pc}

0000bf60 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    bf60:	f002 bcb7 	b.w	e8d2 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000bf64 <sdc_hci_cmd_cb_read_transmit_power_level>:
    bf64:	f002 bcf9 	b.w	e95a <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000bf68 <sdc_hci_cmd_cb_set_event_mask>:
    bf68:	b510      	push	{r4, lr}
    bf6a:	f7f7 ffb7 	bl	3edc <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    bf6e:	2000      	movs	r0, #0
    bf70:	bd10      	pop	{r4, pc}

0000bf72 <sdc_hci_cmd_cb_set_event_mask_page_2>:
    bf72:	b510      	push	{r4, lr}
    bf74:	f7f7 ffc0 	bl	3ef8 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    bf78:	2000      	movs	r0, #0
    bf7a:	bd10      	pop	{r4, pc}

0000bf7c <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    bf7c:	f002 bd09 	b.w	e992 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000bf80 <sdc_hci_cmd_vs_conn_event_extend>:
    bf80:	b508      	push	{r3, lr}
    bf82:	7800      	ldrb	r0, [r0, #0]
    bf84:	f88d 0000 	strb.w	r0, [sp]
    bf88:	4668      	mov	r0, sp
    bf8a:	f002 fc23 	bl	e7d4 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    bf8e:	bd08      	pop	{r3, pc}

0000bf90 <sdc_hci_cmd_vs_conn_update>:
    bf90:	2001      	movs	r0, #1
    bf92:	4770      	bx	lr

0000bf94 <sdc_hci_cmd_vs_event_length_set>:
    bf94:	f7fd be2a 	b.w	9bec <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000bf98 <sdc_hci_cmd_vs_llpm_mode_set>:
    bf98:	2001      	movs	r0, #1
    bf9a:	4770      	bx	lr

0000bf9c <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    bf9c:	7800      	ldrb	r0, [r0, #0]
    bf9e:	b100      	cbz	r0, bfa2 <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    bfa0:	2001      	movs	r0, #1
    bfa2:	f002 bb7d 	b.w	e6a0 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000bfa6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    bfa6:	b570      	push	{r4, r5, r6, lr}
    bfa8:	4605      	mov	r5, r0
    bfaa:	2210      	movs	r2, #16
    bfac:	2100      	movs	r1, #0
    bfae:	f7ff fc80 	bl	b8b2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    bfb2:	2210      	movs	r2, #16
    bfb4:	2100      	movs	r1, #0
    bfb6:	f105 0010 	add.w	r0, r5, #16
    bfba:	f7ff fc7a 	bl	b8b2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    bfbe:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    bfc2:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    bfc6:	1c40      	adds	r0, r0, #1
    bfc8:	d10b      	bne.n	bfe2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    bfca:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    bfce:	1c40      	adds	r0, r0, #1
    bfd0:	d107      	bne.n	bfe2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    bfd2:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    bfd6:	1c40      	adds	r0, r0, #1
    bfd8:	d103      	bne.n	bfe2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    bfda:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    bfde:	1c40      	adds	r0, r0, #1
    bfe0:	d00b      	beq.n	bffa <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    bfe2:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    bfe6:	6128      	str	r0, [r5, #16]
    bfe8:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    bfec:	6168      	str	r0, [r5, #20]
    bfee:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    bff2:	61a8      	str	r0, [r5, #24]
    bff4:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    bff8:	61e8      	str	r0, [r5, #28]
    bffa:	2000      	movs	r0, #0
    bffc:	f7f8 fcb8 	bl	4970 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    c000:	b918      	cbnz	r0, c00a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    c002:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    c006:	07c0      	lsls	r0, r0, #31
    c008:	d118      	bne.n	c03c <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    c00a:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    c00e:	1c40      	adds	r0, r0, #1
    c010:	d10b      	bne.n	c02a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    c012:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    c016:	1c40      	adds	r0, r0, #1
    c018:	d107      	bne.n	c02a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    c01a:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    c01e:	1c40      	adds	r0, r0, #1
    c020:	d103      	bne.n	c02a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    c022:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    c026:	1c40      	adds	r0, r0, #1
    c028:	d008      	beq.n	c03c <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    c02a:	f854 0f90 	ldr.w	r0, [r4, #144]!
    c02e:	6028      	str	r0, [r5, #0]
    c030:	6860      	ldr	r0, [r4, #4]
    c032:	6068      	str	r0, [r5, #4]
    c034:	68a0      	ldr	r0, [r4, #8]
    c036:	60a8      	str	r0, [r5, #8]
    c038:	68e0      	ldr	r0, [r4, #12]
    c03a:	60e8      	str	r0, [r5, #12]
    c03c:	2000      	movs	r0, #0
    c03e:	bd70      	pop	{r4, r5, r6, pc}

0000c040 <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    c040:	b570      	push	{r4, r5, r6, lr}
    c042:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    c046:	4604      	mov	r4, r0
    c048:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    c04c:	1c40      	adds	r0, r0, #1
    c04e:	d105      	bne.n	c05c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    c050:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    c054:	43c0      	mvns	r0, r0
    c056:	0400      	lsls	r0, r0, #16
    c058:	0c00      	lsrs	r0, r0, #16
    c05a:	d03a      	beq.n	c0d2 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x92>
    c05c:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    c060:	07c0      	lsls	r0, r0, #31
    c062:	d036      	beq.n	c0d2 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x92>
    c064:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    c068:	f8c4 0001 	str.w	r0, [r4, #1]
    c06c:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    c070:	f8a4 0005 	strh.w	r0, [r4, #5]
    c074:	79a0      	ldrb	r0, [r4, #6]
    c076:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    c07a:	71a0      	strb	r0, [r4, #6]
    c07c:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    c080:	1c40      	adds	r0, r0, #1
    c082:	d00f      	beq.n	c0a4 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    c084:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    c088:	1c40      	adds	r0, r0, #1
    c08a:	d00b      	beq.n	c0a4 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    c08c:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    c090:	1c40      	adds	r0, r0, #1
    c092:	d007      	beq.n	c0a4 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    c094:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    c098:	1c40      	adds	r0, r0, #1
    c09a:	d003      	beq.n	c0a4 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    c09c:	2000      	movs	r0, #0
    c09e:	f7f8 fc67 	bl	4970 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    c0a2:	b140      	cbz	r0, c0b6 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    c0a4:	2210      	movs	r2, #16
    c0a6:	2100      	movs	r1, #0
    c0a8:	1de0      	adds	r0, r4, #7
    c0aa:	f7ff fc02 	bl	b8b2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    c0ae:	2001      	movs	r0, #1
    c0b0:	7020      	strb	r0, [r4, #0]
    c0b2:	2000      	movs	r0, #0
    c0b4:	bd70      	pop	{r4, r5, r6, pc}
    c0b6:	f855 0f90 	ldr.w	r0, [r5, #144]!
    c0ba:	f8c4 0007 	str.w	r0, [r4, #7]
    c0be:	6868      	ldr	r0, [r5, #4]
    c0c0:	f8c4 000b 	str.w	r0, [r4, #11]
    c0c4:	68a8      	ldr	r0, [r5, #8]
    c0c6:	f8c4 000f 	str.w	r0, [r4, #15]
    c0ca:	68e8      	ldr	r0, [r5, #12]
    c0cc:	f8c4 0013 	str.w	r0, [r4, #19]
    c0d0:	e7ed      	b.n	c0ae <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6e>
    c0d2:	2000      	movs	r0, #0
    c0d4:	e7ec      	b.n	c0b0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x70>

0000c0d6 <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    c0d6:	f002 bb63 	b.w	e7a0 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000c0da <sdc_hci_cmd_ip_read_bd_addr>:
    c0da:	f002 bc0b 	b.w	e8f4 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000c0de <sdc_hci_cmd_ip_read_local_version_information>:
    c0de:	f7fd bd93 	b.w	9c08 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000c0e2 <sdc_hci_cmd_le_add_device_to_resolving_list>:
    c0e2:	f002 b81a 	b.w	e11a <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>

0000c0e6 <sdc_hci_cmd_le_add_device_to_white_list>:
    c0e6:	f002 b833 	b.w	e150 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000c0ea <sdc_hci_cmd_le_clear_resolving_list>:
    c0ea:	f002 b848 	b.w	e17e <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>

0000c0ee <sdc_hci_cmd_le_clear_white_list>:
    c0ee:	f002 b853 	b.w	e198 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000c0f2 <sdc_hci_cmd_le_encrypt>:
    c0f2:	f002 b85b 	b.w	e1ac <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000c0f6 <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
    c0f6:	8802      	ldrh	r2, [r0, #0]
    c0f8:	800a      	strh	r2, [r1, #0]
    c0fa:	f002 b860 	b.w	e1be <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

0000c0fe <sdc_hci_cmd_le_long_term_key_request_reply>:
    c0fe:	8802      	ldrh	r2, [r0, #0]
    c100:	800a      	strh	r2, [r1, #0]
    c102:	f002 b875 	b.w	e1f0 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>

0000c106 <sdc_hci_cmd_le_rand>:
    c106:	f002 b89d 	b.w	e244 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000c10a <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
    c10a:	f002 b8a1 	b.w	e250 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

0000c10e <sdc_hci_cmd_le_read_buffer_size>:
    c10e:	f7fd bca3 	b.w	9a58 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000c112 <sdc_hci_cmd_le_read_channel_map>:
    c112:	f7fd bcab 	b.w	9a6c <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000c116 <sdc_hci_cmd_le_read_max_data_length>:
    c116:	f002 b8a4 	b.w	e262 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000c11a <sdc_hci_cmd_le_read_phy>:
    c11a:	f7fd bcc9 	b.w	9ab0 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000c11e <sdc_hci_cmd_le_read_remote_features>:
    c11e:	f7fd bcef 	b.w	9b00 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000c122 <sdc_hci_cmd_le_read_resolving_list_size>:
    c122:	f002 b8ae 	b.w	e282 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>

0000c126 <sdc_hci_cmd_le_read_suggested_default_data_length>:
    c126:	f7fd bd0b 	b.w	9b40 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000c12a <sdc_hci_cmd_le_read_transmit_power>:
    c12a:	f002 b8ae 	b.w	e28a <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000c12e <sdc_hci_cmd_le_read_white_list_size>:
    c12e:	f002 b8b5 	b.w	e29c <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000c132 <sdc_hci_cmd_le_remove_device_from_resolving_list>:
    c132:	f002 b8b7 	b.w	e2a4 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>

0000c136 <sdc_hci_cmd_le_remove_device_from_white_list>:
    c136:	f002 b8ce 	b.w	e2d6 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000c13a <sdc_hci_cmd_le_set_address_resolution_enable>:
    c13a:	f002 b8e1 	b.w	e300 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>

0000c13e <sdc_hci_cmd_le_set_adv_data>:
    c13e:	f002 b8ed 	b.w	e31c <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

0000c142 <sdc_hci_cmd_le_set_adv_enable>:
    c142:	f002 b927 	b.w	e394 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

0000c146 <sdc_hci_cmd_le_set_adv_params>:
    c146:	f002 b958 	b.w	e3fa <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

0000c14a <sdc_hci_cmd_le_set_data_length>:
    c14a:	f002 b9e8 	b.w	e51e <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000c14e <sdc_hci_cmd_le_set_default_phy>:
    c14e:	f7fd bd07 	b.w	9b60 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000c152 <sdc_hci_cmd_le_set_event_mask>:
    c152:	b510      	push	{r4, lr}
    c154:	f7f7 febc 	bl	3ed0 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    c158:	2000      	movs	r0, #0
    c15a:	bd10      	pop	{r4, pc}

0000c15c <sdc_hci_cmd_le_set_phy>:
    c15c:	f002 ba06 	b.w	e56c <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000c160 <sdc_hci_cmd_le_set_privacy_mode>:
    c160:	f002 ba24 	b.w	e5ac <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>

0000c164 <sdc_hci_cmd_le_set_random_address>:
    c164:	f002 ba38 	b.w	e5d8 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000c168 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>:
    c168:	f002 ba44 	b.w	e5f4 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>

0000c16c <sdc_hci_cmd_le_set_scan_response_data>:
    c16c:	f002 ba4b 	b.w	e606 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>

0000c170 <sdc_hci_cmd_le_write_suggested_default_data_length>:
    c170:	f002 ba7f 	b.w	e672 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000c174 <sdc_hci_cmd_lc_disconnect>:
    c174:	f001 bf81 	b.w	e07a <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000c178 <sdc_hci_cmd_lc_read_remote_version_information>:
    c178:	f002 bbc8 	b.w	e90c <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    c17c:	b570      	push	{r4, r5, r6, lr}
    c17e:	880b      	ldrh	r3, [r1, #0]
    c180:	7f04      	ldrb	r4, [r0, #28]
    c182:	f100 0524 	add.w	r5, r0, #36	; 0x24
    c186:	f423 4600 	bic.w	r6, r3, #32768	; 0x8000
    c18a:	8802      	ldrh	r2, [r0, #0]
    c18c:	4435      	add	r5, r6
    c18e:	1da4      	adds	r4, r4, #6
    c190:	882d      	ldrh	r5, [r5, #0]
    c192:	4422      	add	r2, r4
    c194:	b292      	uxth	r2, r2
    c196:	4425      	add	r5, r4
    c198:	1e54      	subs	r4, r2, #1
    c19a:	442c      	add	r4, r5
    c19c:	fb94 f4f2 	sdiv	r4, r4, r2
    c1a0:	fb02 6204 	mla	r2, r2, r4, r6
    c1a4:	8840      	ldrh	r0, [r0, #2]
    c1a6:	b292      	uxth	r2, r2
    c1a8:	4290      	cmp	r0, r2
    c1aa:	d903      	bls.n	c1b4 <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    c1ac:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    c1b0:	4310      	orrs	r0, r2
    c1b2:	e002      	b.n	c1ba <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    c1b4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    c1b8:	4398      	bics	r0, r3
    c1ba:	8008      	strh	r0, [r1, #0]
    c1bc:	bd70      	pop	{r4, r5, r6, pc}
    c1be:	f420 4200 	bic.w	r2, r0, #32768	; 0x8000
    c1c2:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    c1c6:	429a      	cmp	r2, r3
    c1c8:	d107      	bne.n	c1da <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    c1ca:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    c1ce:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    c1d2:	4288      	cmp	r0, r1
    c1d4:	d001      	beq.n	c1da <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    c1d6:	2001      	movs	r0, #1
    c1d8:	4770      	bx	lr
    c1da:	2000      	movs	r0, #0
    c1dc:	4770      	bx	lr

0000c1de <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>:
    c1de:	b570      	push	{r4, r5, r6, lr}
    c1e0:	7f00      	ldrb	r0, [r0, #28]
    c1e2:	461c      	mov	r4, r3
    c1e4:	1d80      	adds	r0, r0, #6
    c1e6:	4408      	add	r0, r1
    c1e8:	4613      	mov	r3, r2
    c1ea:	8809      	ldrh	r1, [r1, #0]
    c1ec:	9a04      	ldr	r2, [sp, #16]
    c1ee:	1cc9      	adds	r1, r1, #3
    c1f0:	b289      	uxth	r1, r1
    c1f2:	1915      	adds	r5, r2, r4
    c1f4:	1ec0      	subs	r0, r0, #3
    c1f6:	428d      	cmp	r5, r1
    c1f8:	d805      	bhi.n	c206 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x28>
    c1fa:	1881      	adds	r1, r0, r2
    c1fc:	4622      	mov	r2, r4
    c1fe:	4618      	mov	r0, r3
    c200:	f7ff fadd 	bl	b7be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c204:	e000      	b.n	c208 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x2a>
    c206:	2400      	movs	r4, #0
    c208:	4620      	mov	r0, r4
    c20a:	bd70      	pop	{r4, r5, r6, pc}

0000c20c <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>:
    c20c:	b570      	push	{r4, r5, r6, lr}
    c20e:	7f00      	ldrb	r0, [r0, #28]
    c210:	461c      	mov	r4, r3
    c212:	1d80      	adds	r0, r0, #6
    c214:	4408      	add	r0, r1
    c216:	4613      	mov	r3, r2
    c218:	8809      	ldrh	r1, [r1, #0]
    c21a:	9a04      	ldr	r2, [sp, #16]
    c21c:	1cc9      	adds	r1, r1, #3
    c21e:	b289      	uxth	r1, r1
    c220:	1915      	adds	r5, r2, r4
    c222:	1ec0      	subs	r0, r0, #3
    c224:	428d      	cmp	r5, r1
    c226:	d805      	bhi.n	c234 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x28>
    c228:	4410      	add	r0, r2
    c22a:	4622      	mov	r2, r4
    c22c:	4619      	mov	r1, r3
    c22e:	f7ff fac6 	bl	b7be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c232:	e000      	b.n	c236 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x2a>
    c234:	2400      	movs	r4, #0
    c236:	4620      	mov	r0, r4
    c238:	bd70      	pop	{r4, r5, r6, pc}

0000c23a <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    c23a:	8881      	ldrh	r1, [r0, #4]
    c23c:	88c0      	ldrh	r0, [r0, #6]
    c23e:	4288      	cmp	r0, r1
    c240:	d101      	bne.n	c246 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    c242:	2001      	movs	r0, #1
    c244:	4770      	bx	lr
    c246:	2000      	movs	r0, #0
    c248:	4770      	bx	lr

0000c24a <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>:
    c24a:	8881      	ldrh	r1, [r0, #4]
    c24c:	8900      	ldrh	r0, [r0, #8]
    c24e:	4288      	cmp	r0, r1
    c250:	d101      	bne.n	c256 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI+0xc>
    c252:	2001      	movs	r0, #1
    c254:	4770      	bx	lr
    c256:	2000      	movs	r0, #0
    c258:	4770      	bx	lr

0000c25a <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    c25a:	b570      	push	{r4, r5, r6, lr}
    c25c:	4604      	mov	r4, r0
    c25e:	f100 0124 	add.w	r1, r0, #36	; 0x24
    c262:	8880      	ldrh	r0, [r0, #4]
    c264:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    c268:	4401      	add	r1, r0
    c26a:	8a20      	ldrh	r0, [r4, #16]
    c26c:	2800      	cmp	r0, #0
    c26e:	d01a      	beq.n	c2a6 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
    c270:	89a2      	ldrh	r2, [r4, #12]
    c272:	2500      	movs	r5, #0
    c274:	4410      	add	r0, r2
    c276:	b280      	uxth	r0, r0
    c278:	81a0      	strh	r0, [r4, #12]
    c27a:	880a      	ldrh	r2, [r1, #0]
    c27c:	4290      	cmp	r0, r2
    c27e:	d905      	bls.n	c28c <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x32>
    c280:	f44f 71a5 	mov.w	r1, #330	; 0x14a
    c284:	f04f 0014 	mov.w	r0, #20
    c288:	f7f7 fc84 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c28c:	d109      	bne.n	c2a2 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
    c28e:	69a0      	ldr	r0, [r4, #24]
    c290:	b108      	cbz	r0, c296 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x3c>
    c292:	7f40      	ldrb	r0, [r0, #29]
    c294:	7088      	strb	r0, [r1, #2]
    c296:	f104 0104 	add.w	r1, r4, #4
    c29a:	4620      	mov	r0, r4
    c29c:	f7ff ff6e 	bl	c17c <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    c2a0:	81a5      	strh	r5, [r4, #12]
    c2a2:	8225      	strh	r5, [r4, #16]
    c2a4:	2001      	movs	r0, #1
    c2a6:	bd70      	pop	{r4, r5, r6, pc}

0000c2a8 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    c2a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c2ac:	4604      	mov	r4, r0
    c2ae:	f100 0324 	add.w	r3, r0, #36	; 0x24
    c2b2:	88c0      	ldrh	r0, [r0, #6]
    c2b4:	460e      	mov	r6, r1
    c2b6:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    c2ba:	8a60      	ldrh	r0, [r4, #18]
    c2bc:	19d9      	adds	r1, r3, r7
    c2be:	b108      	cbz	r0, c2c4 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1c>
    c2c0:	42b0      	cmp	r0, r6
    c2c2:	d202      	bcs.n	c2ca <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x22>
    c2c4:	2000      	movs	r0, #0
    c2c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c2ca:	89e0      	ldrh	r0, [r4, #14]
    c2cc:	2500      	movs	r5, #0
    c2ce:	b140      	cbz	r0, c2e2 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3a>
    c2d0:	f8b1 c000 	ldrh.w	ip, [r1]
    c2d4:	4560      	cmp	r0, ip
    c2d6:	d008      	beq.n	c2ea <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x42>
    c2d8:	f240 211f 	movw	r1, #543	; 0x21f
    c2dc:	2014      	movs	r0, #20
    c2de:	f7f7 fc59 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c2e2:	7f60      	ldrb	r0, [r4, #29]
    c2e4:	7088      	strb	r0, [r1, #2]
    c2e6:	800d      	strh	r5, [r1, #0]
    c2e8:	e00e      	b.n	c308 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x60>
    c2ea:	f894 c01c 	ldrb.w	ip, [r4, #28]
    c2ee:	4418      	add	r0, r3
    c2f0:	f10c 0c06 	add.w	ip, ip, #6
    c2f4:	44bc      	add	ip, r7
    c2f6:	4460      	add	r0, ip
    c2f8:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    c2fc:	f820 cc03 	strh.w	ip, [r0, #-3]
    c300:	f894 c020 	ldrb.w	ip, [r4, #32]
    c304:	f800 cc01 	strb.w	ip, [r0, #-1]
    c308:	89e0      	ldrh	r0, [r4, #14]
    c30a:	4430      	add	r0, r6
    c30c:	81e0      	strh	r0, [r4, #14]
    c30e:	8808      	ldrh	r0, [r1, #0]
    c310:	4430      	add	r0, r6
    c312:	8008      	strh	r0, [r1, #0]
    c314:	b16a      	cbz	r2, c332 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x8a>
    c316:	1da1      	adds	r1, r4, #6
    c318:	4620      	mov	r0, r4
    c31a:	f7ff ff2f 	bl	c17c <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    c31e:	81e5      	strh	r5, [r4, #14]
    c320:	7f60      	ldrb	r0, [r4, #29]
    c322:	1c40      	adds	r0, r0, #1
    c324:	7760      	strb	r0, [r4, #29]
    c326:	7da0      	ldrb	r0, [r4, #22]
    c328:	b108      	cbz	r0, c32e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x86>
    c32a:	88e0      	ldrh	r0, [r4, #6]
    c32c:	82a0      	strh	r0, [r4, #20]
    c32e:	75a5      	strb	r5, [r4, #22]
    c330:	e00b      	b.n	c34a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xa2>
    c332:	7f20      	ldrb	r0, [r4, #28]
    c334:	89e1      	ldrh	r1, [r4, #14]
    c336:	1d80      	adds	r0, r0, #6
    c338:	4438      	add	r0, r7
    c33a:	4419      	add	r1, r3
    c33c:	4408      	add	r0, r1
    c33e:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    c342:	83e1      	strh	r1, [r4, #30]
    c344:	7880      	ldrb	r0, [r0, #2]
    c346:	f884 0020 	strb.w	r0, [r4, #32]
    c34a:	8265      	strh	r5, [r4, #18]
    c34c:	75e5      	strb	r5, [r4, #23]
    c34e:	2001      	movs	r0, #1
    c350:	e7b9      	b.n	c2c6 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>

0000c352 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    c352:	b510      	push	{r4, lr}
    c354:	4604      	mov	r4, r0
    c356:	88c0      	ldrh	r0, [r0, #6]
    c358:	88a1      	ldrh	r1, [r4, #4]
    c35a:	4281      	cmp	r1, r0
    c35c:	d007      	beq.n	c36e <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    c35e:	89a0      	ldrh	r0, [r4, #12]
    c360:	b928      	cbnz	r0, c36e <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    c362:	8a20      	ldrh	r0, [r4, #16]
    c364:	b918      	cbnz	r0, c36e <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    c366:	88a0      	ldrh	r0, [r4, #4]
    c368:	8aa1      	ldrh	r1, [r4, #20]
    c36a:	4288      	cmp	r0, r1
    c36c:	d101      	bne.n	c372 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x20>
    c36e:	2000      	movs	r0, #0
    c370:	bd10      	pop	{r4, pc}
    c372:	1d21      	adds	r1, r4, #4
    c374:	4620      	mov	r0, r4
    c376:	f7ff ff01 	bl	c17c <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    c37a:	2000      	movs	r0, #0
    c37c:	8220      	strh	r0, [r4, #16]
    c37e:	2001      	movs	r0, #1
    c380:	bd10      	pop	{r4, pc}

0000c382 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    c382:	b510      	push	{r4, lr}
    c384:	4604      	mov	r4, r0
    c386:	f100 0224 	add.w	r2, r0, #36	; 0x24
    c38a:	88c0      	ldrh	r0, [r0, #6]
    c38c:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    c390:	4402      	add	r2, r0
    c392:	8820      	ldrh	r0, [r4, #0]
    c394:	2845      	cmp	r0, #69	; 0x45
    c396:	d200      	bcs.n	c39a <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    c398:	2045      	movs	r0, #69	; 0x45
    c39a:	4288      	cmp	r0, r1
    c39c:	d204      	bcs.n	c3a8 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    c39e:	f44f 7180 	mov.w	r1, #256	; 0x100
    c3a2:	2014      	movs	r0, #20
    c3a4:	f7f7 fbf6 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c3a8:	7de0      	ldrb	r0, [r4, #23]
    c3aa:	2800      	cmp	r0, #0
    c3ac:	d003      	beq.n	c3b6 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    c3ae:	8810      	ldrh	r0, [r2, #0]
    c3b0:	4288      	cmp	r0, r1
    c3b2:	d201      	bcs.n	c3b8 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    c3b4:	2000      	movs	r0, #0
    c3b6:	bd10      	pop	{r4, pc}
    c3b8:	8011      	strh	r1, [r2, #0]
    c3ba:	1da1      	adds	r1, r4, #6
    c3bc:	4620      	mov	r0, r4
    c3be:	f7ff fedd 	bl	c17c <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    c3c2:	2000      	movs	r0, #0
    c3c4:	75e0      	strb	r0, [r4, #23]
    c3c6:	2001      	movs	r0, #1
    c3c8:	bd10      	pop	{r4, pc}

0000c3ca <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>:
    c3ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c3ce:	8941      	ldrh	r1, [r0, #10]
    c3d0:	8886      	ldrh	r6, [r0, #4]
    c3d2:	4604      	mov	r4, r0
    c3d4:	2500      	movs	r5, #0
    c3d6:	f100 070a 	add.w	r7, r0, #10
    c3da:	e006      	b.n	c3ea <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x20>
    c3dc:	4639      	mov	r1, r7
    c3de:	4620      	mov	r0, r4
    c3e0:	f7ff fecc 	bl	c17c <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    c3e4:	1c6d      	adds	r5, r5, #1
    c3e6:	8961      	ldrh	r1, [r4, #10]
    c3e8:	b2ad      	uxth	r5, r5
    c3ea:	42b1      	cmp	r1, r6
    c3ec:	d1f6      	bne.n	c3dc <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x12>
    c3ee:	4628      	mov	r0, r5
    c3f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c3f4 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    c3f4:	b530      	push	{r4, r5, lr}
    c3f6:	88c4      	ldrh	r4, [r0, #6]
    c3f8:	8881      	ldrh	r1, [r0, #4]
    c3fa:	f100 0224 	add.w	r2, r0, #36	; 0x24
    c3fe:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    c402:	4413      	add	r3, r2
    c404:	8882      	ldrh	r2, [r0, #4]
    c406:	8a85      	ldrh	r5, [r0, #20]
    c408:	42aa      	cmp	r2, r5
    c40a:	d012      	beq.n	c432 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    c40c:	42a1      	cmp	r1, r4
    c40e:	d010      	beq.n	c432 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    c410:	8981      	ldrh	r1, [r0, #12]
    c412:	b971      	cbnz	r1, c432 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    c414:	6982      	ldr	r2, [r0, #24]
    c416:	b172      	cbz	r2, c436 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    c418:	4610      	mov	r0, r2
    c41a:	f7ff ff16 	bl	c24a <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>
    c41e:	b950      	cbnz	r0, c436 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    c420:	8910      	ldrh	r0, [r2, #8]
    c422:	3224      	adds	r2, #36	; 0x24
    c424:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    c428:	4410      	add	r0, r2
    c42a:	7899      	ldrb	r1, [r3, #2]
    c42c:	7880      	ldrb	r0, [r0, #2]
    c42e:	4288      	cmp	r0, r1
    c430:	d101      	bne.n	c436 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    c432:	2000      	movs	r0, #0
    c434:	bd30      	pop	{r4, r5, pc}
    c436:	4618      	mov	r0, r3
    c438:	bd30      	pop	{r4, r5, pc}

0000c43a <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    c43a:	7f00      	ldrb	r0, [r0, #28]
    c43c:	1d80      	adds	r0, r0, #6
    c43e:	4408      	add	r0, r1
    c440:	1ec0      	subs	r0, r0, #3
    c442:	6010      	str	r0, [r2, #0]
    c444:	8808      	ldrh	r0, [r1, #0]
    c446:	4770      	bx	lr

0000c448 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    c448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c44c:	460e      	mov	r6, r1
    c44e:	88c1      	ldrh	r1, [r0, #6]
    c450:	8902      	ldrh	r2, [r0, #8]
    c452:	4604      	mov	r4, r0
    c454:	f100 0824 	add.w	r8, r0, #36	; 0x24
    c458:	8800      	ldrh	r0, [r0, #0]
    c45a:	f421 4500 	bic.w	r5, r1, #32768	; 0x8000
    c45e:	f422 4700 	bic.w	r7, r2, #32768	; 0x8000
    c462:	2845      	cmp	r0, #69	; 0x45
    c464:	d200      	bcs.n	c468 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    c466:	2045      	movs	r0, #69	; 0x45
    c468:	42b0      	cmp	r0, r6
    c46a:	d203      	bcs.n	c474 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    c46c:	21c2      	movs	r1, #194	; 0xc2
    c46e:	2014      	movs	r0, #20
    c470:	f7f7 fb90 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c474:	4610      	mov	r0, r2
    c476:	f7ff fea2 	bl	c1be <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    c47a:	b110      	cbz	r0, c482 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    c47c:	2000      	movs	r0, #0
    c47e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c482:	42af      	cmp	r7, r5
    c484:	d908      	bls.n	c498 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    c486:	7f21      	ldrb	r1, [r4, #28]
    c488:	1b78      	subs	r0, r7, r5
    c48a:	1a40      	subs	r0, r0, r1
    c48c:	1f80      	subs	r0, r0, #6
    c48e:	4286      	cmp	r6, r0
    c490:	dd02      	ble.n	c498 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    c492:	2000      	movs	r0, #0
    c494:	75e0      	strb	r0, [r4, #23]
    c496:	e7f1      	b.n	c47c <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    c498:	eb08 0005 	add.w	r0, r8, r5
    c49c:	2101      	movs	r1, #1
    c49e:	8006      	strh	r6, [r0, #0]
    c4a0:	75e1      	strb	r1, [r4, #23]
    c4a2:	e7ec      	b.n	c47e <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000c4a4 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    c4a4:	b538      	push	{r3, r4, r5, lr}
    c4a6:	88c4      	ldrh	r4, [r0, #6]
    c4a8:	8881      	ldrh	r1, [r0, #4]
    c4aa:	f100 0224 	add.w	r2, r0, #36	; 0x24
    c4ae:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    c4b2:	441a      	add	r2, r3
    c4b4:	42a1      	cmp	r1, r4
    c4b6:	d010      	beq.n	c4da <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    c4b8:	8983      	ldrh	r3, [r0, #12]
    c4ba:	8a05      	ldrh	r5, [r0, #16]
    c4bc:	8812      	ldrh	r2, [r2, #0]
    c4be:	442b      	add	r3, r5
    c4c0:	4293      	cmp	r3, r2
    c4c2:	d308      	bcc.n	c4d6 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    c4c4:	f8ad 1000 	strh.w	r1, [sp]
    c4c8:	4669      	mov	r1, sp
    c4ca:	f7ff fe57 	bl	c17c <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    c4ce:	f8bd 0000 	ldrh.w	r0, [sp]
    c4d2:	42a0      	cmp	r0, r4
    c4d4:	d001      	beq.n	c4da <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    c4d6:	2001      	movs	r0, #1
    c4d8:	bd38      	pop	{r3, r4, r5, pc}
    c4da:	2000      	movs	r0, #0
    c4dc:	bd38      	pop	{r3, r4, r5, pc}

0000c4de <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    c4de:	b570      	push	{r4, r5, r6, lr}
    c4e0:	88c6      	ldrh	r6, [r0, #6]
    c4e2:	8885      	ldrh	r5, [r0, #4]
    c4e4:	4603      	mov	r3, r0
    c4e6:	f100 0424 	add.w	r4, r0, #36	; 0x24
    c4ea:	f425 4000 	bic.w	r0, r5, #32768	; 0x8000
    c4ee:	4420      	add	r0, r4
    c4f0:	42b5      	cmp	r5, r6
    c4f2:	d102      	bne.n	c4fa <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    c4f4:	2000      	movs	r0, #0
    c4f6:	8218      	strh	r0, [r3, #16]
    c4f8:	bd70      	pop	{r4, r5, r6, pc}
    c4fa:	8804      	ldrh	r4, [r0, #0]
    c4fc:	899d      	ldrh	r5, [r3, #12]
    c4fe:	7f1e      	ldrb	r6, [r3, #28]
    c500:	1b64      	subs	r4, r4, r5
    c502:	4435      	add	r5, r6
    c504:	4428      	add	r0, r5
    c506:	880d      	ldrh	r5, [r1, #0]
    c508:	b2a4      	uxth	r4, r4
    c50a:	1cc0      	adds	r0, r0, #3
    c50c:	42a5      	cmp	r5, r4
    c50e:	d900      	bls.n	c512 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    c510:	800c      	strh	r4, [r1, #0]
    c512:	899c      	ldrh	r4, [r3, #12]
    c514:	b124      	cbz	r4, c520 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    c516:	2400      	movs	r4, #0
    c518:	7014      	strb	r4, [r2, #0]
    c51a:	8809      	ldrh	r1, [r1, #0]
    c51c:	8219      	strh	r1, [r3, #16]
    c51e:	bd70      	pop	{r4, r5, r6, pc}
    c520:	2401      	movs	r4, #1
    c522:	e7f9      	b.n	c518 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000c524 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>:
    c524:	b510      	push	{r4, lr}
    c526:	8a81      	ldrh	r1, [r0, #20]
    c528:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    c52c:	3aff      	subs	r2, #255	; 0xff
    c52e:	d002      	beq.n	c536 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x12>
    c530:	7d82      	ldrb	r2, [r0, #22]
    c532:	b952      	cbnz	r2, c54a <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x26>
    c534:	e004      	b.n	c540 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x1c>
    c536:	f240 3155 	movw	r1, #853	; 0x355
    c53a:	2014      	movs	r0, #20
    c53c:	f7f7 fb2a 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c540:	8880      	ldrh	r0, [r0, #4]
    c542:	4281      	cmp	r1, r0
    c544:	d101      	bne.n	c54a <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x26>
    c546:	2000      	movs	r0, #0
    c548:	bd10      	pop	{r4, pc}
    c54a:	2001      	movs	r0, #1
    c54c:	bd10      	pop	{r4, pc}

0000c54e <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>:
    c54e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c552:	8281      	strh	r1, [r0, #20]
    c554:	2100      	movs	r1, #0
    c556:	7581      	strb	r1, [r0, #22]
    c558:	4770      	bx	lr

0000c55a <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>:
    c55a:	b510      	push	{r4, lr}
    c55c:	8a81      	ldrh	r1, [r0, #20]
    c55e:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    c562:	3aff      	subs	r2, #255	; 0xff
    c564:	d004      	beq.n	c570 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x16>
    c566:	f44f 714e 	mov.w	r1, #824	; 0x338
    c56a:	2014      	movs	r0, #20
    c56c:	f7f7 fb12 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c570:	88c1      	ldrh	r1, [r0, #6]
    c572:	8281      	strh	r1, [r0, #20]
    c574:	89c1      	ldrh	r1, [r0, #14]
    c576:	b101      	cbz	r1, c57a <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x20>
    c578:	2101      	movs	r1, #1
    c57a:	7581      	strb	r1, [r0, #22]
    c57c:	bd10      	pop	{r4, pc}

0000c57e <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    c57e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c582:	461d      	mov	r5, r3
    c584:	4616      	mov	r6, r2
    c586:	9f06      	ldr	r7, [sp, #24]
    c588:	460b      	mov	r3, r1
    c58a:	4604      	mov	r4, r0
    c58c:	463a      	mov	r2, r7
    c58e:	4629      	mov	r1, r5
    c590:	4630      	mov	r0, r6
    c592:	f000 f84f 	bl	c634 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    c596:	4283      	cmp	r3, r0
    c598:	d201      	bcs.n	c59e <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    c59a:	21a1      	movs	r1, #161	; 0xa1
    c59c:	e018      	b.n	c5d0 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    c59e:	1ce0      	adds	r0, r4, #3
    c5a0:	f020 0103 	bic.w	r1, r0, #3
    c5a4:	4620      	mov	r0, r4
    c5a6:	42a1      	cmp	r1, r4
    c5a8:	d001      	beq.n	c5ae <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x30>
    c5aa:	21a2      	movs	r1, #162	; 0xa2
    c5ac:	e010      	b.n	c5d0 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    c5ae:	2224      	movs	r2, #36	; 0x24
    c5b0:	2100      	movs	r1, #0
    c5b2:	f7ff f97e 	bl	b8b2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    c5b6:	f64f 70ff 	movw	r0, #65535	; 0xffff
    c5ba:	82a0      	strh	r0, [r4, #20]
    c5bc:	19a8      	adds	r0, r5, r6
    c5be:	1d80      	adds	r0, r0, #6
    c5c0:	4378      	muls	r0, r7
    c5c2:	b280      	uxth	r0, r0
    c5c4:	7725      	strb	r5, [r4, #28]
    c5c6:	8060      	strh	r0, [r4, #2]
    c5c8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    c5cc:	d903      	bls.n	c5d6 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x58>
    c5ce:	21a8      	movs	r1, #168	; 0xa8
    c5d0:	2014      	movs	r0, #20
    c5d2:	f7f7 fadf 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c5d6:	8026      	strh	r6, [r4, #0]
    c5d8:	2000      	movs	r0, #0
    c5da:	7760      	strb	r0, [r4, #29]
    c5dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c5e0 <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>:
    c5e0:	6181      	str	r1, [r0, #24]
    c5e2:	6188      	str	r0, [r1, #24]
    c5e4:	4770      	bx	lr

0000c5e6 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    c5e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c5ea:	460b      	mov	r3, r1
    c5ec:	4604      	mov	r4, r0
    c5ee:	f100 0124 	add.w	r1, r0, #36	; 0x24
    c5f2:	8905      	ldrh	r5, [r0, #8]
    c5f4:	8946      	ldrh	r6, [r0, #10]
    c5f6:	8880      	ldrh	r0, [r0, #4]
    c5f8:	f425 4700 	bic.w	r7, r5, #32768	; 0x8000
    c5fc:	4439      	add	r1, r7
    c5fe:	460f      	mov	r7, r1
    c600:	4285      	cmp	r5, r0
    c602:	d102      	bne.n	c60a <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x24>
    c604:	2000      	movs	r0, #0
    c606:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c60a:	b10a      	cbz	r2, c610 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x2a>
    c60c:	1cc8      	adds	r0, r1, #3
    c60e:	6010      	str	r0, [r2, #0]
    c610:	b123      	cbz	r3, c61c <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x36>
    c612:	7f22      	ldrb	r2, [r4, #28]
    c614:	1cf9      	adds	r1, r7, #3
    c616:	4618      	mov	r0, r3
    c618:	f7ff f8d1 	bl	b7be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c61c:	883f      	ldrh	r7, [r7, #0]
    c61e:	f104 0108 	add.w	r1, r4, #8
    c622:	4620      	mov	r0, r4
    c624:	f7ff fdaa 	bl	c17c <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    c628:	42b5      	cmp	r5, r6
    c62a:	d101      	bne.n	c630 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x4a>
    c62c:	8920      	ldrh	r0, [r4, #8]
    c62e:	8160      	strh	r0, [r4, #10]
    c630:	4638      	mov	r0, r7
    c632:	e7e8      	b.n	c606 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x20>

0000c634 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    c634:	4401      	add	r1, r0
    c636:	1d89      	adds	r1, r1, #6
    c638:	4351      	muls	r1, r2
    c63a:	b28a      	uxth	r2, r1
    c63c:	2100      	movs	r1, #0
    c63e:	2845      	cmp	r0, #69	; 0x45
    c640:	d201      	bcs.n	c646 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x12>
    c642:	f1c0 0145 	rsb	r1, r0, #69	; 0x45
    c646:	3224      	adds	r2, #36	; 0x24
    c648:	1850      	adds	r0, r2, r1
    c64a:	b280      	uxth	r0, r0
    c64c:	4770      	bx	lr

0000c64e <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    c64e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c652:	4688      	mov	r8, r1
    c654:	88c1      	ldrh	r1, [r0, #6]
    c656:	4604      	mov	r4, r0
    c658:	8900      	ldrh	r0, [r0, #8]
    c65a:	f421 4600 	bic.w	r6, r1, #32768	; 0x8000
    c65e:	f104 0524 	add.w	r5, r4, #36	; 0x24
    c662:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    c666:	eb05 0906 	add.w	r9, r5, r6
    c66a:	f7ff fda8 	bl	c1be <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    c66e:	2200      	movs	r2, #0
    c670:	b998      	cbnz	r0, c69a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    c672:	8820      	ldrh	r0, [r4, #0]
    c674:	2845      	cmp	r0, #69	; 0x45
    c676:	d200      	bcs.n	c67a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    c678:	2045      	movs	r0, #69	; 0x45
    c67a:	42b7      	cmp	r7, r6
    c67c:	d906      	bls.n	c68c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    c67e:	7f23      	ldrb	r3, [r4, #28]
    c680:	1bb9      	subs	r1, r7, r6
    c682:	1ac9      	subs	r1, r1, r3
    c684:	1f89      	subs	r1, r1, #6
    c686:	4281      	cmp	r1, r0
    c688:	da00      	bge.n	c68c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    c68a:	4608      	mov	r0, r1
    c68c:	89e1      	ldrh	r1, [r4, #14]
    c68e:	b111      	cbz	r1, c696 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    c690:	f8b9 3000 	ldrh.w	r3, [r9]
    c694:	1ac0      	subs	r0, r0, r3
    c696:	4540      	cmp	r0, r8
    c698:	da03      	bge.n	c6a2 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    c69a:	8262      	strh	r2, [r4, #18]
    c69c:	2000      	movs	r0, #0
    c69e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c6a2:	7f20      	ldrb	r0, [r4, #28]
    c6a4:	4429      	add	r1, r5
    c6a6:	1d80      	adds	r0, r0, #6
    c6a8:	4430      	add	r0, r6
    c6aa:	4408      	add	r0, r1
    c6ac:	f8a4 8012 	strh.w	r8, [r4, #18]
    c6b0:	1ec0      	subs	r0, r0, #3
    c6b2:	e7f4      	b.n	c69e <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000c6b4 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>:
    c6b4:	2100      	movs	r1, #0
    c6b6:	81c1      	strh	r1, [r0, #14]
    c6b8:	8241      	strh	r1, [r0, #18]
    c6ba:	75c1      	strb	r1, [r0, #23]
    c6bc:	7581      	strb	r1, [r0, #22]
    c6be:	4770      	bx	lr

0000c6c0 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    c6c0:	b570      	push	{r4, r5, r6, lr}
    c6c2:	2300      	movs	r3, #0
    c6c4:	2908      	cmp	r1, #8
    c6c6:	d204      	bcs.n	c6d2 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x12>
    c6c8:	f240 11cb 	movw	r1, #459	; 0x1cb
    c6cc:	2015      	movs	r0, #21
    c6ce:	f7f7 fa61 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c6d2:	6802      	ldr	r2, [r0, #0]
    c6d4:	b90a      	cbnz	r2, c6da <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    c6d6:	e01e      	b.n	c716 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    c6d8:	4610      	mov	r0, r2
    c6da:	6802      	ldr	r2, [r0, #0]
    c6dc:	8893      	ldrh	r3, [r2, #4]
    c6de:	428b      	cmp	r3, r1
    c6e0:	d002      	beq.n	c6e8 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x28>
    c6e2:	6813      	ldr	r3, [r2, #0]
    c6e4:	2b00      	cmp	r3, #0
    c6e6:	d1f7      	bne.n	c6d8 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x18>
    c6e8:	8894      	ldrh	r4, [r2, #4]
    c6ea:	4613      	mov	r3, r2
    c6ec:	428c      	cmp	r4, r1
    c6ee:	d101      	bne.n	c6f4 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x34>
    c6f0:	6811      	ldr	r1, [r2, #0]
    c6f2:	e00d      	b.n	c710 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x50>
    c6f4:	f101 0508 	add.w	r5, r1, #8
    c6f8:	b2ae      	uxth	r6, r5
    c6fa:	2500      	movs	r5, #0
    c6fc:	42b4      	cmp	r4, r6
    c6fe:	d309      	bcc.n	c714 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x54>
    c700:	1a64      	subs	r4, r4, r1
    c702:	4411      	add	r1, r2
    c704:	600d      	str	r5, [r1, #0]
    c706:	808c      	strh	r4, [r1, #4]
    c708:	6802      	ldr	r2, [r0, #0]
    c70a:	6812      	ldr	r2, [r2, #0]
    c70c:	6002      	str	r2, [r0, #0]
    c70e:	600a      	str	r2, [r1, #0]
    c710:	6001      	str	r1, [r0, #0]
    c712:	e000      	b.n	c716 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    c714:	2300      	movs	r3, #0
    c716:	4618      	mov	r0, r3
    c718:	bd70      	pop	{r4, r5, r6, pc}

0000c71a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    c71a:	b510      	push	{r4, lr}
    c71c:	000c      	movs	r4, r1
    c71e:	d006      	beq.n	c72e <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x14>
    c720:	2c08      	cmp	r4, #8
    c722:	d209      	bcs.n	c738 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1e>
    c724:	f240 1195 	movw	r1, #405	; 0x195
    c728:	2015      	movs	r0, #21
    c72a:	f7f7 fa33 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c72e:	b108      	cbz	r0, c734 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    c730:	2100      	movs	r1, #0
    c732:	6001      	str	r1, [r0, #0]
    c734:	2000      	movs	r0, #0
    c736:	bd10      	pop	{r4, pc}
    c738:	b118      	cbz	r0, c742 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x28>
    c73a:	b2a1      	uxth	r1, r4
    c73c:	6800      	ldr	r0, [r0, #0]
    c73e:	f000 f814 	bl	c76a <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    c742:	1d20      	adds	r0, r4, #4
    c744:	bd10      	pop	{r4, pc}

0000c746 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    c746:	2100      	movs	r1, #0
    c748:	6802      	ldr	r2, [r0, #0]
    c74a:	e003      	b.n	c754 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    c74c:	8893      	ldrh	r3, [r2, #4]
    c74e:	6812      	ldr	r2, [r2, #0]
    c750:	4419      	add	r1, r3
    c752:	b289      	uxth	r1, r1
    c754:	2a00      	cmp	r2, #0
    c756:	d1f9      	bne.n	c74c <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    c758:	f000 b807 	b.w	c76a <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000c75c <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    c75c:	2300      	movs	r3, #0
    c75e:	600b      	str	r3, [r1, #0]
    c760:	808a      	strh	r2, [r1, #4]
    c762:	6802      	ldr	r2, [r0, #0]
    c764:	600a      	str	r2, [r1, #0]
    c766:	6001      	str	r1, [r0, #0]
    c768:	4770      	bx	lr
    c76a:	2300      	movs	r3, #0
    c76c:	6043      	str	r3, [r0, #4]
    c76e:	1d02      	adds	r2, r0, #4
    c770:	8101      	strh	r1, [r0, #8]
    c772:	6002      	str	r2, [r0, #0]
    c774:	4770      	bx	lr

0000c776 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>:
    c776:	f5a0 437f 	sub.w	r3, r0, #65280	; 0xff00
    c77a:	3bff      	subs	r3, #255	; 0xff
    c77c:	d001      	beq.n	c782 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0xc>
    c77e:	2902      	cmp	r1, #2
    c780:	d301      	bcc.n	c786 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x10>
    c782:	2000      	movs	r0, #0
    c784:	4770      	bx	lr
    c786:	f7f7 bcd9 	b.w	413c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>

0000c78a <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY>:
    c78a:	b50e      	push	{r1, r2, r3, lr}
    c78c:	4669      	mov	r1, sp
    c78e:	f000 f818 	bl	c7c2 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    c792:	b120      	cbz	r0, c79e <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY+0x14>
    c794:	f44f 71b2 	mov.w	r1, #356	; 0x164
    c798:	2017      	movs	r0, #23
    c79a:	f7f7 f9fb 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c79e:	4668      	mov	r0, sp
    c7a0:	f7f7 fc4a 	bl	4038 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    c7a4:	b108      	cbz	r0, c7aa <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY+0x20>
    c7a6:	2000      	movs	r0, #0
    c7a8:	bd0e      	pop	{r1, r2, r3, pc}
    c7aa:	2001      	movs	r0, #1
    c7ac:	bd0e      	pop	{r1, r2, r3, pc}

0000c7ae <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    c7ae:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    c7b2:	3aff      	subs	r2, #255	; 0xff
    c7b4:	d001      	beq.n	c7ba <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xc>
    c7b6:	2902      	cmp	r1, #2
    c7b8:	d301      	bcc.n	c7be <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x10>
    c7ba:	2000      	movs	r0, #0
    c7bc:	4770      	bx	lr
    c7be:	f7f7 bcf7 	b.w	41b0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>

0000c7c2 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>:
    c7c2:	b570      	push	{r4, r5, r6, lr}
    c7c4:	4605      	mov	r5, r0
    c7c6:	460c      	mov	r4, r1
    c7c8:	4608      	mov	r0, r1
    c7ca:	f000 f864 	bl	c896 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    c7ce:	b108      	cbz	r0, c7d4 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x12>
    c7d0:	2010      	movs	r0, #16
    c7d2:	bd70      	pop	{r4, r5, r6, pc}
    c7d4:	2d02      	cmp	r5, #2
    c7d6:	d301      	bcc.n	c7dc <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x1a>
    c7d8:	2007      	movs	r0, #7
    c7da:	bd70      	pop	{r4, r5, r6, pc}
    c7dc:	7025      	strb	r5, [r4, #0]
    c7de:	2000      	movs	r0, #0
    c7e0:	8060      	strh	r0, [r4, #2]
    c7e2:	bd70      	pop	{r4, r5, r6, pc}
    c7e4:	b510      	push	{r4, lr}
    c7e6:	4604      	mov	r4, r0
    c7e8:	f7f7 fd2e 	bl	4248 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    c7ec:	42a0      	cmp	r0, r4
    c7ee:	d901      	bls.n	c7f4 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x32>
    c7f0:	2001      	movs	r0, #1
    c7f2:	bd10      	pop	{r4, pc}
    c7f4:	2000      	movs	r0, #0
    c7f6:	bd10      	pop	{r4, pc}
    c7f8:	4770      	bx	lr

0000c7fa <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    c7fa:	b570      	push	{r4, r5, r6, lr}
    c7fc:	460e      	mov	r6, r1
    c7fe:	461d      	mov	r5, r3
    c800:	4611      	mov	r1, r2
    c802:	f000 f811 	bl	c828 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    c806:	4604      	mov	r4, r0
    c808:	4629      	mov	r1, r5
    c80a:	4630      	mov	r0, r6
    c80c:	f000 f803 	bl	c816 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    c810:	4420      	add	r0, r4
    c812:	1d00      	adds	r0, r0, #4
    c814:	bd70      	pop	{r4, r5, r6, pc}
    c816:	b510      	push	{r4, lr}
    c818:	460a      	mov	r2, r1
    c81a:	2101      	movs	r1, #1
    c81c:	f7ff ff0a 	bl	c634 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    c820:	1cc0      	adds	r0, r0, #3
    c822:	f020 0003 	bic.w	r0, r0, #3
    c826:	bd10      	pop	{r4, pc}
    c828:	b510      	push	{r4, lr}
    c82a:	460a      	mov	r2, r1
    c82c:	2101      	movs	r1, #1
    c82e:	f7ff ff01 	bl	c634 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    c832:	1cc0      	adds	r0, r0, #3
    c834:	f020 0003 	bic.w	r0, r0, #3
    c838:	bd10      	pop	{r4, pc}

0000c83a <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA>:
    c83a:	b510      	push	{r4, lr}
    c83c:	680b      	ldr	r3, [r1, #0]
    c83e:	4604      	mov	r4, r0
    c840:	2b00      	cmp	r3, #0
    c842:	d00d      	beq.n	c860 <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA+0x26>
    c844:	88ca      	ldrh	r2, [r1, #6]
    c846:	4619      	mov	r1, r3
    c848:	6820      	ldr	r0, [r4, #0]
    c84a:	f7ff ff87 	bl	c75c <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    c84e:	7920      	ldrb	r0, [r4, #4]
    c850:	2801      	cmp	r0, #1
    c852:	d102      	bne.n	c85a <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA+0x20>
    c854:	6820      	ldr	r0, [r4, #0]
    c856:	f7ff ff76 	bl	c746 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    c85a:	7920      	ldrb	r0, [r4, #4]
    c85c:	1e40      	subs	r0, r0, #1
    c85e:	7120      	strb	r0, [r4, #4]
    c860:	bd10      	pop	{r4, pc}
    c862:	2800      	cmp	r0, #0
    c864:	db09      	blt.n	c87a <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA+0x40>
    c866:	f000 021f 	and.w	r2, r0, #31
    c86a:	2101      	movs	r1, #1
    c86c:	4091      	lsls	r1, r2
    c86e:	0940      	lsrs	r0, r0, #5
    c870:	0080      	lsls	r0, r0, #2
    c872:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c876:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    c87a:	4770      	bx	lr

0000c87c <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    c87c:	f7f7 bef8 	b.w	4670 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>

0000c880 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>:
    c880:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    c884:	2000      	movs	r0, #0
    c886:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
    c88a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    c88e:	2001      	movs	r0, #1
    c890:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    c894:	4770      	bx	lr

0000c896 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>:
    c896:	b108      	cbz	r0, c89c <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI+0x6>
    c898:	2000      	movs	r0, #0
    c89a:	4770      	bx	lr
    c89c:	2001      	movs	r0, #1
    c89e:	4770      	bx	lr

0000c8a0 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    c8a0:	f7f8 b82c 	b.w	48fc <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000c8a4 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    c8a4:	f7f8 b81a 	b.w	48dc <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000c8a8 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    c8a8:	b510      	push	{r4, lr}
    c8aa:	2900      	cmp	r1, #0
    c8ac:	4604      	mov	r4, r0
    c8ae:	f04f 0106 	mov.w	r1, #6
    c8b2:	d002      	beq.n	c8ba <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    c8b4:	f7f7 fa06 	bl	3cc4 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    c8b8:	e001      	b.n	c8be <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    c8ba:	f7f7 fa1f 	bl	3cfc <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    c8be:	7960      	ldrb	r0, [r4, #5]
    c8c0:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    c8c4:	7160      	strb	r0, [r4, #5]
    c8c6:	bd10      	pop	{r4, pc}

0000c8c8 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    c8c8:	4770      	bx	lr

0000c8ca <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    c8ca:	b530      	push	{r4, r5, lr}
    c8cc:	460c      	mov	r4, r1
    c8ce:	4605      	mov	r5, r0
    c8d0:	b08d      	sub	sp, #52	; 0x34
    c8d2:	f04f 0103 	mov.w	r1, #3
    c8d6:	f104 0003 	add.w	r0, r4, #3
    c8da:	b112      	cbz	r2, c8e2 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    c8dc:	f7f7 f9f2 	bl	3cc4 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    c8e0:	e001      	b.n	c8e6 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    c8e2:	f7f7 fa0b 	bl	3cfc <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    c8e6:	7960      	ldrb	r0, [r4, #5]
    c8e8:	220d      	movs	r2, #13
    c8ea:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    c8ee:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    c8f2:	7160      	strb	r0, [r4, #5]
    c8f4:	2100      	movs	r1, #0
    c8f6:	a804      	add	r0, sp, #16
    c8f8:	f7fe ffdb 	bl	b8b2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    c8fc:	78e0      	ldrb	r0, [r4, #3]
    c8fe:	f88d 001f 	strb.w	r0, [sp, #31]
    c902:	7920      	ldrb	r0, [r4, #4]
    c904:	f88d 001e 	strb.w	r0, [sp, #30]
    c908:	7960      	ldrb	r0, [r4, #5]
    c90a:	f88d 001d 	strb.w	r0, [sp, #29]
    c90e:	2210      	movs	r2, #16
    c910:	4629      	mov	r1, r5
    c912:	4668      	mov	r0, sp
    c914:	f7fe ff53 	bl	b7be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c918:	4668      	mov	r0, sp
    c91a:	f7ff ffaf 	bl	c87c <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    c91e:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    c922:	7020      	strb	r0, [r4, #0]
    c924:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    c928:	7060      	strb	r0, [r4, #1]
    c92a:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    c92e:	70a0      	strb	r0, [r4, #2]
    c930:	b00d      	add	sp, #52	; 0x34
    c932:	bd30      	pop	{r4, r5, pc}

0000c934 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
    c934:	f7f8 bb78 	b.w	5028 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x370>
    c938:	07c1      	lsls	r1, r0, #31
    c93a:	d001      	beq.n	c940 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0xc>
    c93c:	2001      	movs	r0, #1
    c93e:	4770      	bx	lr
    c940:	0780      	lsls	r0, r0, #30
    c942:	d501      	bpl.n	c948 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x14>
    c944:	2002      	movs	r0, #2
    c946:	4770      	bx	lr
    c948:	2000      	movs	r0, #0
    c94a:	4770      	bx	lr
    c94c:	b510      	push	{r4, lr}
    c94e:	2801      	cmp	r0, #1
    c950:	d008      	beq.n	c964 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    c952:	2802      	cmp	r0, #2
    c954:	d004      	beq.n	c960 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x2c>
    c956:	f240 3197 	movw	r1, #919	; 0x397
    c95a:	2006      	movs	r0, #6
    c95c:	f7f7 f91a 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c960:	2001      	movs	r0, #1
    c962:	bd10      	pop	{r4, pc}
    c964:	2000      	movs	r0, #0
    c966:	bd10      	pop	{r4, pc}
    c968:	2900      	cmp	r1, #0
    c96a:	d004      	beq.n	c976 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x42>
    c96c:	2801      	cmp	r0, #1
    c96e:	d003      	beq.n	c978 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    c970:	2901      	cmp	r1, #1
    c972:	d001      	beq.n	c978 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    c974:	2002      	movs	r0, #2
    c976:	4770      	bx	lr
    c978:	2001      	movs	r0, #1
    c97a:	4770      	bx	lr
    c97c:	f7ff bdaf 	b.w	c4de <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000c980 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    c980:	2201      	movs	r2, #1
    c982:	f7f8 befb 	b.w	577c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

0000c986 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    c986:	b510      	push	{r4, lr}
    c988:	f002 fb1e 	bl	efc8 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    c98c:	b118      	cbz	r0, c996 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    c98e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c992:	f7fd bc87 	b.w	a2a4 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    c996:	20ff      	movs	r0, #255	; 0xff
    c998:	bd10      	pop	{r4, pc}

0000c99a <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    c99a:	b510      	push	{r4, lr}
    c99c:	f7f8 ff38 	bl	5810 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x108>
    c9a0:	2810      	cmp	r0, #16
    c9a2:	d003      	beq.n	c9ac <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    c9a4:	f7f8 ff04 	bl	57b0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    c9a8:	2810      	cmp	r0, #16
    c9aa:	d100      	bne.n	c9ae <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
    c9ac:	2008      	movs	r0, #8
    c9ae:	bd10      	pop	{r4, pc}

0000c9b0 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>:
    c9b0:	b510      	push	{r4, lr}
    c9b2:	f7f8 ff2d 	bl	5810 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x108>
    c9b6:	2810      	cmp	r0, #16
    c9b8:	d007      	beq.n	c9ca <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    c9ba:	f7f8 fef9 	bl	57b0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    c9be:	2810      	cmp	r0, #16
    c9c0:	d003      	beq.n	c9ca <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    c9c2:	f7f8 ff6d 	bl	58a0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x198>
    c9c6:	2001      	movs	r0, #1
    c9c8:	bd10      	pop	{r4, pc}
    c9ca:	2000      	movs	r0, #0
    c9cc:	bd10      	pop	{r4, pc}

0000c9ce <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    c9ce:	b510      	push	{r4, lr}
    c9d0:	f7f8 ff1e 	bl	5810 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x108>
    c9d4:	2810      	cmp	r0, #16
    c9d6:	d003      	beq.n	c9e0 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
    c9d8:	f7f8 ffaa 	bl	5930 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x228>
    c9dc:	2001      	movs	r0, #1
    c9de:	bd10      	pop	{r4, pc}
    c9e0:	2000      	movs	r0, #0
    c9e2:	bd10      	pop	{r4, pc}

0000c9e4 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    c9e4:	b570      	push	{r4, r5, r6, lr}
    c9e6:	460e      	mov	r6, r1
    c9e8:	b08c      	sub	sp, #48	; 0x30
    c9ea:	4614      	mov	r4, r2
    c9ec:	4601      	mov	r1, r0
    c9ee:	461d      	mov	r5, r3
    c9f0:	2210      	movs	r2, #16
    c9f2:	4668      	mov	r0, sp
    c9f4:	f000 f91a 	bl	cc2c <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    c9f8:	2210      	movs	r2, #16
    c9fa:	4631      	mov	r1, r6
    c9fc:	a804      	add	r0, sp, #16
    c9fe:	f000 f915 	bl	cc2c <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    ca02:	4668      	mov	r0, sp
    ca04:	f7ff ff3a 	bl	c87c <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    ca08:	a908      	add	r1, sp, #32
    ca0a:	f04f 0210 	mov.w	r2, #16
    ca0e:	4628      	mov	r0, r5
    ca10:	b11c      	cbz	r4, ca1a <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    ca12:	f000 f90b 	bl	cc2c <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    ca16:	b00c      	add	sp, #48	; 0x30
    ca18:	bd70      	pop	{r4, r5, r6, pc}
    ca1a:	f7fe fed0 	bl	b7be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ca1e:	e7fa      	b.n	ca16 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>

0000ca20 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    ca20:	b510      	push	{r4, lr}
    ca22:	460c      	mov	r4, r1
    ca24:	2100      	movs	r1, #0
    ca26:	f7ff fec2 	bl	c7ae <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ca2a:	6060      	str	r0, [r4, #4]
    ca2c:	b118      	cbz	r0, ca36 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
    ca2e:	2001      	movs	r0, #1
    ca30:	7020      	strb	r0, [r4, #0]
    ca32:	2000      	movs	r0, #0
    ca34:	bd10      	pop	{r4, pc}
    ca36:	2002      	movs	r0, #2
    ca38:	bd10      	pop	{r4, pc}

0000ca3a <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    ca3a:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ca3e:	4348      	muls	r0, r1
    ca40:	4770      	bx	lr

0000ca42 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    ca42:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ca46:	fbb0 f0f1 	udiv	r0, r0, r1
    ca4a:	b280      	uxth	r0, r0
    ca4c:	4770      	bx	lr

0000ca4e <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
    ca4e:	b570      	push	{r4, r5, r6, lr}
    ca50:	4604      	mov	r4, r0
    ca52:	4290      	cmp	r0, r2
    ca54:	d20b      	bcs.n	ca6e <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x20>
    ca56:	1b10      	subs	r0, r2, r4
    ca58:	2864      	cmp	r0, #100	; 0x64
    ca5a:	d200      	bcs.n	ca5e <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>
    ca5c:	2064      	movs	r0, #100	; 0x64
    ca5e:	1825      	adds	r5, r4, r0
    ca60:	428d      	cmp	r5, r1
    ca62:	d803      	bhi.n	ca6c <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x1e>
    ca64:	2104      	movs	r1, #4
    ca66:	f7f4 fc5d 	bl	1324 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    ca6a:	b108      	cbz	r0, ca70 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x22>
    ca6c:	4620      	mov	r0, r4
    ca6e:	bd70      	pop	{r4, r5, r6, pc}
    ca70:	4628      	mov	r0, r5
    ca72:	bd70      	pop	{r4, r5, r6, pc}

0000ca74 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    ca74:	b510      	push	{r4, lr}
    ca76:	f1a2 030f 	sub.w	r3, r2, #15
    ca7a:	290c      	cmp	r1, #12
    ca7c:	d244      	bcs.n	cb08 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ca7e:	e8df f001 	tbb	[pc, r1]
    ca82:	0806      	.short	0x0806
    ca84:	1815120d 	.word	0x1815120d
    ca88:	4127241c 	.word	0x4127241c
    ca8c:	312a      	.short	0x312a
    ca8e:	b3c2      	cbz	r2, cb02 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x8e>
    ca90:	e03a      	b.n	cb08 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ca92:	2a07      	cmp	r2, #7
    ca94:	d03a      	beq.n	cb0c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ca96:	2a08      	cmp	r2, #8
    ca98:	d038      	beq.n	cb0c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ca9a:	e035      	b.n	cb08 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ca9c:	2a0c      	cmp	r2, #12
    ca9e:	d035      	beq.n	cb0c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    caa0:	2a0b      	cmp	r2, #11
    caa2:	d033      	beq.n	cb0c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    caa4:	e030      	b.n	cb08 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    caa6:	2a0d      	cmp	r2, #13
    caa8:	d030      	beq.n	cb0c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    caaa:	e02d      	b.n	cb08 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    caac:	2b0c      	cmp	r3, #12
    caae:	d92d      	bls.n	cb0c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    cab0:	e02a      	b.n	cb08 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    cab2:	3a10      	subs	r2, #16
    cab4:	2a0b      	cmp	r2, #11
    cab6:	d929      	bls.n	cb0c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    cab8:	e026      	b.n	cb08 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    caba:	2b03      	cmp	r3, #3
    cabc:	d926      	bls.n	cb0c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    cabe:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
    cac2:	b308      	cbz	r0, cb08 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    cac4:	2a1b      	cmp	r2, #27
    cac6:	d921      	bls.n	cb0c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    cac8:	e01e      	b.n	cb08 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    caca:	2a04      	cmp	r2, #4
    cacc:	d01e      	beq.n	cb0c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    cace:	e01b      	b.n	cb08 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    cad0:	2a06      	cmp	r2, #6
    cad2:	d01b      	beq.n	cb0c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    cad4:	e018      	b.n	cb08 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    cad6:	2a1c      	cmp	r2, #28
    cad8:	d018      	beq.n	cb0c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    cada:	2a1d      	cmp	r2, #29
    cadc:	d016      	beq.n	cb0c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    cade:	2a1e      	cmp	r2, #30
    cae0:	d014      	beq.n	cb0c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    cae2:	e011      	b.n	cb08 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    cae4:	2a1f      	cmp	r2, #31
    cae6:	d011      	beq.n	cb0c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    cae8:	2a20      	cmp	r2, #32
    caea:	d00f      	beq.n	cb0c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    caec:	2a21      	cmp	r2, #33	; 0x21
    caee:	d00d      	beq.n	cb0c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    caf0:	2a22      	cmp	r2, #34	; 0x22
    caf2:	d00b      	beq.n	cb0c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    caf4:	2a23      	cmp	r2, #35	; 0x23
    caf6:	d009      	beq.n	cb0c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    caf8:	2a24      	cmp	r2, #36	; 0x24
    cafa:	d007      	beq.n	cb0c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    cafc:	2a26      	cmp	r2, #38	; 0x26
    cafe:	d005      	beq.n	cb0c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    cb00:	e002      	b.n	cb08 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    cb02:	e003      	b.n	cb0c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    cb04:	2a0e      	cmp	r2, #14
    cb06:	d001      	beq.n	cb0c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    cb08:	2000      	movs	r0, #0
    cb0a:	bd10      	pop	{r4, pc}
    cb0c:	2001      	movs	r0, #1
    cb0e:	bd10      	pop	{r4, pc}

0000cb10 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    cb10:	280c      	cmp	r0, #12
    cb12:	d013      	beq.n	cb3c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    cb14:	280b      	cmp	r0, #11
    cb16:	d011      	beq.n	cb3c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    cb18:	280d      	cmp	r0, #13
    cb1a:	d00f      	beq.n	cb3c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    cb1c:	281f      	cmp	r0, #31
    cb1e:	d00d      	beq.n	cb3c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    cb20:	2820      	cmp	r0, #32
    cb22:	d00b      	beq.n	cb3c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    cb24:	2821      	cmp	r0, #33	; 0x21
    cb26:	d009      	beq.n	cb3c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    cb28:	2822      	cmp	r0, #34	; 0x22
    cb2a:	d007      	beq.n	cb3c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    cb2c:	2823      	cmp	r0, #35	; 0x23
    cb2e:	d005      	beq.n	cb3c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    cb30:	2824      	cmp	r0, #36	; 0x24
    cb32:	d003      	beq.n	cb3c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    cb34:	2826      	cmp	r0, #38	; 0x26
    cb36:	d001      	beq.n	cb3c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    cb38:	2000      	movs	r0, #0
    cb3a:	4770      	bx	lr
    cb3c:	2001      	movs	r0, #1
    cb3e:	4770      	bx	lr

0000cb40 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    cb40:	f011 0f0c 	tst.w	r1, #12
    cb44:	d016      	beq.n	cb74 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    cb46:	074a      	lsls	r2, r1, #29
    cb48:	f44f 7116 	mov.w	r1, #600	; 0x258
    cb4c:	2a00      	cmp	r2, #0
    cb4e:	da02      	bge.n	cb56 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    cb50:	f04f 0210 	mov.w	r2, #16
    cb54:	e001      	b.n	cb5a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    cb56:	f04f 0240 	mov.w	r2, #64	; 0x40
    cb5a:	da01      	bge.n	cb60 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    cb5c:	f04f 0196 	mov.w	r1, #150	; 0x96
    cb60:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    cb64:	eba0 0301 	sub.w	r3, r0, r1
    cb68:	4288      	cmp	r0, r1
    cb6a:	d910      	bls.n	cb8e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    cb6c:	fb93 f0f2 	sdiv	r0, r3, r2
    cb70:	b280      	uxth	r0, r0
    cb72:	4770      	bx	lr
    cb74:	2902      	cmp	r1, #2
    cb76:	d002      	beq.n	cb7e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x3e>
    cb78:	2870      	cmp	r0, #112	; 0x70
    cb7a:	d80a      	bhi.n	cb92 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x52>
    cb7c:	e007      	b.n	cb8e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    cb7e:	283c      	cmp	r0, #60	; 0x3c
    cb80:	d905      	bls.n	cb8e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    cb82:	383c      	subs	r0, #60	; 0x3c
    cb84:	17c1      	asrs	r1, r0, #31
    cb86:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    cb8a:	1080      	asrs	r0, r0, #2
    cb8c:	e7f0      	b.n	cb70 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    cb8e:	2000      	movs	r0, #0
    cb90:	e7ee      	b.n	cb70 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    cb92:	3870      	subs	r0, #112	; 0x70
    cb94:	17c1      	asrs	r1, r0, #31
    cb96:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    cb9a:	10c0      	asrs	r0, r0, #3
    cb9c:	e7e8      	b.n	cb70 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>

0000cb9e <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    cb9e:	6809      	ldr	r1, [r1, #0]
    cba0:	f8c0 105e 	str.w	r1, [r0, #94]	; 0x5e
    cba4:	4770      	bx	lr

0000cba6 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>:
    cba6:	07c1      	lsls	r1, r0, #31
    cba8:	d001      	beq.n	cbae <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x8>
    cbaa:	2001      	movs	r0, #1
    cbac:	4770      	bx	lr
    cbae:	0781      	lsls	r1, r0, #30
    cbb0:	d501      	bpl.n	cbb6 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x10>
    cbb2:	2002      	movs	r0, #2
    cbb4:	4770      	bx	lr
    cbb6:	0740      	lsls	r0, r0, #29
    cbb8:	d501      	bpl.n	cbbe <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x18>
    cbba:	2008      	movs	r0, #8
    cbbc:	4770      	bx	lr
    cbbe:	2000      	movs	r0, #0
    cbc0:	4770      	bx	lr

0000cbc2 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
    cbc2:	b510      	push	{r4, lr}
    cbc4:	f640 12c4 	movw	r2, #2500	; 0x9c4
    cbc8:	2901      	cmp	r1, #1
    cbca:	d006      	beq.n	cbda <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
    cbcc:	2902      	cmp	r1, #2
    cbce:	d005      	beq.n	cbdc <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
    cbd0:	f240 4129 	movw	r1, #1065	; 0x429
    cbd4:	2029      	movs	r0, #41	; 0x29
    cbd6:	f7f6 ffdd 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cbda:	b108      	cbz	r0, cbe0 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
    cbdc:	4610      	mov	r0, r2
    cbde:	bd10      	pop	{r4, pc}
    cbe0:	f240 40e2 	movw	r0, #1250	; 0x4e2
    cbe4:	bd10      	pop	{r4, pc}

0000cbe6 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    cbe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cbea:	460c      	mov	r4, r1
    cbec:	4605      	mov	r5, r0
    cbee:	68c6      	ldr	r6, [r0, #12]
    cbf0:	f7f4 ff72 	bl	1ad8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    cbf4:	b198      	cbz	r0, cc1e <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x38>
    cbf6:	b1bc      	cbz	r4, cc28 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    cbf8:	4630      	mov	r0, r6
    cbfa:	68e9      	ldr	r1, [r5, #12]
    cbfc:	f7f4 fc86 	bl	150c <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    cc00:	2800      	cmp	r0, #0
    cc02:	dd11      	ble.n	cc28 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    cc04:	4420      	add	r0, r4
    cc06:	1e40      	subs	r0, r0, #1
    cc08:	fbb0 f7f4 	udiv	r7, r0, r4
    cc0c:	fb07 f104 	mul.w	r1, r7, r4
    cc10:	4630      	mov	r0, r6
    cc12:	f7f4 fc49 	bl	14a8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    cc16:	60e8      	str	r0, [r5, #12]
    cc18:	4638      	mov	r0, r7
    cc1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cc1e:	f240 21ae 	movw	r1, #686	; 0x2ae
    cc22:	2029      	movs	r0, #41	; 0x29
    cc24:	f7f6 ffb6 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cc28:	2000      	movs	r0, #0
    cc2a:	e7f6      	b.n	cc1a <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>

0000cc2c <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    cc2c:	b530      	push	{r4, r5, lr}
    cc2e:	4613      	mov	r3, r2
    cc30:	e006      	b.n	cc40 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    cc32:	18cc      	adds	r4, r1, r3
    cc34:	1ad5      	subs	r5, r2, r3
    cc36:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    cc3a:	1e5b      	subs	r3, r3, #1
    cc3c:	5544      	strb	r4, [r0, r5]
    cc3e:	b2db      	uxtb	r3, r3
    cc40:	2b00      	cmp	r3, #0
    cc42:	d1f6      	bne.n	cc32 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    cc44:	bd30      	pop	{r4, r5, pc}

0000cc46 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>:
    cc46:	b538      	push	{r3, r4, r5, lr}
    cc48:	4605      	mov	r5, r0
    cc4a:	460c      	mov	r4, r1
    cc4c:	4668      	mov	r0, sp
    cc4e:	f7fe f82b 	bl	aca8 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    cc52:	b308      	cbz	r0, cc98 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x52>
    cc54:	f99d 0000 	ldrsb.w	r0, [sp]
    cc58:	7260      	strb	r0, [r4, #9]
    cc5a:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
    cc5e:	72a1      	strb	r1, [r4, #10]
    cc60:	f994 100b 	ldrsb.w	r1, [r4, #11]
    cc64:	2200      	movs	r2, #0
    cc66:	1a41      	subs	r1, r0, r1
    cc68:	d500      	bpl.n	cc6c <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x26>
    cc6a:	4249      	negs	r1, r1
    cc6c:	7feb      	ldrb	r3, [r5, #31]
    cc6e:	428b      	cmp	r3, r1
    cc70:	dc10      	bgt.n	cc94 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x4e>
    cc72:	2bff      	cmp	r3, #255	; 0xff
    cc74:	d00e      	beq.n	cc94 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x4e>
    cc76:	7b21      	ldrb	r1, [r4, #12]
    cc78:	1c49      	adds	r1, r1, #1
    cc7a:	b2c9      	uxtb	r1, r1
    cc7c:	7321      	strb	r1, [r4, #12]
    cc7e:	f895 3020 	ldrb.w	r3, [r5, #32]
    cc82:	4299      	cmp	r1, r3
    cc84:	d802      	bhi.n	cc8c <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x46>
    cc86:	7ae1      	ldrb	r1, [r4, #11]
    cc88:	297f      	cmp	r1, #127	; 0x7f
    cc8a:	d103      	bne.n	cc94 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x4e>
    cc8c:	72e0      	strb	r0, [r4, #11]
    cc8e:	2000      	movs	r0, #0
    cc90:	7320      	strb	r0, [r4, #12]
    cc92:	2201      	movs	r2, #1
    cc94:	4610      	mov	r0, r2
    cc96:	bd38      	pop	{r3, r4, r5, pc}
    cc98:	207f      	movs	r0, #127	; 0x7f
    cc9a:	7260      	strb	r0, [r4, #9]
    cc9c:	2000      	movs	r0, #0
    cc9e:	bd38      	pop	{r3, r4, r5, pc}

0000cca0 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    cca0:	2300      	movs	r3, #0
    cca2:	6283      	str	r3, [r0, #40]	; 0x28
    cca4:	8602      	strh	r2, [r0, #48]	; 0x30
    cca6:	f240 2371 	movw	r3, #625	; 0x271
    ccaa:	435a      	muls	r2, r3
    ccac:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    ccb0:	1e52      	subs	r2, r2, #1
    ccb2:	fbb2 f1f1 	udiv	r1, r2, r1
    ccb6:	62c1      	str	r1, [r0, #44]	; 0x2c
    ccb8:	4770      	bx	lr

0000ccba <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>:
    ccba:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    ccbe:	4607      	mov	r7, r0
    ccc0:	4690      	mov	r8, r2
    ccc2:	468b      	mov	fp, r1
    ccc4:	2601      	movs	r6, #1
    ccc6:	4608      	mov	r0, r1
    ccc8:	f000 f957 	bl	cf7a <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    cccc:	4682      	mov	sl, r0
    ccce:	4658      	mov	r0, fp
    ccd0:	f000 f95f 	bl	cf92 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    ccd4:	4681      	mov	r9, r0
    ccd6:	f7ff ff66 	bl	cba6 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    ccda:	4604      	mov	r4, r0
    ccdc:	4650      	mov	r0, sl
    ccde:	f7ff ff62 	bl	cba6 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    cce2:	4605      	mov	r5, r0
    cce4:	ea54 0005 	orrs.w	r0, r4, r5
    cce8:	d100      	bne.n	ccec <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x32>
    ccea:	2600      	movs	r6, #0
    ccec:	f7fd fa7c 	bl	a1e8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    ccf0:	ea10 0f09 	tst.w	r0, r9
    ccf4:	d100      	bne.n	ccf8 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x3e>
    ccf6:	2400      	movs	r4, #0
    ccf8:	f7fd fa76 	bl	a1e8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    ccfc:	ea10 0f0a 	tst.w	r0, sl
    cd00:	d100      	bne.n	cd04 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x4a>
    cd02:	2500      	movs	r5, #0
    cd04:	f897 0062 	ldrb.w	r0, [r7, #98]	; 0x62
    cd08:	42a0      	cmp	r0, r4
    cd0a:	d100      	bne.n	cd0e <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x54>
    cd0c:	2400      	movs	r4, #0
    cd0e:	f888 4000 	strb.w	r4, [r8]
    cd12:	f897 0063 	ldrb.w	r0, [r7, #99]	; 0x63
    cd16:	42a8      	cmp	r0, r5
    cd18:	d100      	bne.n	cd1c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x62>
    cd1a:	2500      	movs	r5, #0
    cd1c:	f888 5001 	strb.w	r5, [r8, #1]
    cd20:	b974      	cbnz	r4, cd40 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    cd22:	b96d      	cbnz	r5, cd40 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    cd24:	4658      	mov	r0, fp
    cd26:	f000 f932 	bl	cf8e <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    cd2a:	f8b7 106c 	ldrh.w	r1, [r7, #108]	; 0x6c
    cd2e:	1a40      	subs	r0, r0, r1
    cd30:	b200      	sxth	r0, r0
    cd32:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    cd36:	4288      	cmp	r0, r1
    cd38:	dc01      	bgt.n	cd3e <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x84>
    cd3a:	2800      	cmp	r0, #0
    cd3c:	dc00      	bgt.n	cd40 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    cd3e:	2600      	movs	r6, #0
    cd40:	4630      	mov	r0, r6
    cd42:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

0000cd46 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
    cd46:	f240 41e2 	movw	r1, #1250	; 0x4e2
    cd4a:	4348      	muls	r0, r1
    cd4c:	4770      	bx	lr

0000cd4e <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    cd4e:	f240 41e2 	movw	r1, #1250	; 0x4e2
    cd52:	fb10 f001 	smulbb	r0, r0, r1
    cd56:	4770      	bx	lr

0000cd58 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    cd58:	b510      	push	{r4, lr}
    cd5a:	2300      	movs	r3, #0
    cd5c:	461a      	mov	r2, r3
    cd5e:	e003      	b.n	cd68 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    cd60:	5c84      	ldrb	r4, [r0, r2]
    cd62:	4323      	orrs	r3, r4
    cd64:	1c52      	adds	r2, r2, #1
    cd66:	b2d2      	uxtb	r2, r2
    cd68:	428a      	cmp	r2, r1
    cd6a:	d3f9      	bcc.n	cd60 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    cd6c:	b10b      	cbz	r3, cd72 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    cd6e:	2000      	movs	r0, #0
    cd70:	bd10      	pop	{r4, pc}
    cd72:	2001      	movs	r0, #1
    cd74:	bd10      	pop	{r4, pc}

0000cd76 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    cd76:	b570      	push	{r4, r5, r6, lr}
    cd78:	788b      	ldrb	r3, [r1, #2]
    cd7a:	780c      	ldrb	r4, [r1, #0]
    cd7c:	7ac5      	ldrb	r5, [r0, #11]
    cd7e:	4063      	eors	r3, r4
    cd80:	78cc      	ldrb	r4, [r1, #3]
    cd82:	7849      	ldrb	r1, [r1, #1]
    cd84:	404c      	eors	r4, r1
    cd86:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    cd8a:	ea83 0102 	eor.w	r1, r3, r2
    cd8e:	2200      	movs	r2, #0
    cd90:	b2cc      	uxtb	r4, r1
    cd92:	0a09      	lsrs	r1, r1, #8
    cd94:	fa94 f4a4 	rbit	r4, r4
    cd98:	fa91 f1a1 	rbit	r1, r1
    cd9c:	0e24      	lsrs	r4, r4, #24
    cd9e:	0e09      	lsrs	r1, r1, #24
    cda0:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    cda4:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    cda8:	1c52      	adds	r2, r2, #1
    cdaa:	4419      	add	r1, r3
    cdac:	b2d2      	uxtb	r2, r2
    cdae:	b289      	uxth	r1, r1
    cdb0:	2a03      	cmp	r2, #3
    cdb2:	d3ed      	bcc.n	cd90 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x1a>
    cdb4:	4059      	eors	r1, r3
    cdb6:	2225      	movs	r2, #37	; 0x25
    cdb8:	fbb1 f3f2 	udiv	r3, r1, r2
    cdbc:	fb02 1213 	mls	r2, r2, r3, r1
    cdc0:	eb00 03d2 	add.w	r3, r0, r2, lsr #3
    cdc4:	f002 0607 	and.w	r6, r2, #7
    cdc8:	785b      	ldrb	r3, [r3, #1]
    cdca:	2401      	movs	r4, #1
    cdcc:	fa04 f606 	lsl.w	r6, r4, r6
    cdd0:	4233      	tst	r3, r6
    cdd2:	d001      	beq.n	cdd8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x62>
    cdd4:	4610      	mov	r0, r2
    cdd6:	bd70      	pop	{r4, r5, r6, pc}
    cdd8:	434d      	muls	r5, r1
    cdda:	0c29      	lsrs	r1, r5, #16
    cddc:	1c49      	adds	r1, r1, #1
    cdde:	b2c9      	uxtb	r1, r1
    cde0:	2300      	movs	r3, #0
    cde2:	18c5      	adds	r5, r0, r3
    cde4:	79aa      	ldrb	r2, [r5, #6]
    cde6:	428a      	cmp	r2, r1
    cde8:	d311      	bcc.n	ce0e <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x98>
    cdea:	786d      	ldrb	r5, [r5, #1]
    cdec:	2200      	movs	r2, #0
    cdee:	fa04 f602 	lsl.w	r6, r4, r2
    cdf2:	4235      	tst	r5, r6
    cdf4:	d001      	beq.n	cdfa <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x84>
    cdf6:	1e49      	subs	r1, r1, #1
    cdf8:	b2c9      	uxtb	r1, r1
    cdfa:	b121      	cbz	r1, ce06 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x90>
    cdfc:	1c52      	adds	r2, r2, #1
    cdfe:	b2d2      	uxtb	r2, r2
    ce00:	2a08      	cmp	r2, #8
    ce02:	d3f4      	bcc.n	cdee <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x78>
    ce04:	e005      	b.n	ce12 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x9c>
    ce06:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
    ce0a:	b2c0      	uxtb	r0, r0
    ce0c:	bd70      	pop	{r4, r5, r6, pc}
    ce0e:	1a89      	subs	r1, r1, r2
    ce10:	b2c9      	uxtb	r1, r1
    ce12:	1c5b      	adds	r3, r3, #1
    ce14:	b2db      	uxtb	r3, r3
    ce16:	2b05      	cmp	r3, #5
    ce18:	d3e3      	bcc.n	cde2 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x6c>
    ce1a:	f44f 7187 	mov.w	r1, #270	; 0x10e
    ce1e:	2046      	movs	r0, #70	; 0x46
    ce20:	f7f6 feb8 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000ce24 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    ce24:	b510      	push	{r4, lr}
    ce26:	4604      	mov	r4, r0
    ce28:	f890 0020 	ldrb.w	r0, [r0, #32]
    ce2c:	b108      	cbz	r0, ce32 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    ce2e:	2825      	cmp	r0, #37	; 0x25
    ce30:	d901      	bls.n	ce36 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    ce32:	2012      	movs	r0, #18
    ce34:	bd10      	pop	{r4, pc}
    ce36:	b12a      	cbz	r2, ce44 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>
    ce38:	7d60      	ldrb	r0, [r4, #21]
    ce3a:	b128      	cbz	r0, ce48 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x24>
    ce3c:	2801      	cmp	r0, #1
    ce3e:	d009      	beq.n	ce54 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x30>
    ce40:	201f      	movs	r0, #31
    ce42:	bd10      	pop	{r4, pc}
    ce44:	2000      	movs	r0, #0
    ce46:	bd10      	pop	{r4, pc}
    ce48:	4620      	mov	r0, r4
    ce4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ce4e:	4611      	mov	r1, r2
    ce50:	f7f8 be44 	b.w	5adc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x124>
    ce54:	88a2      	ldrh	r2, [r4, #4]
    ce56:	f104 0015 	add.w	r0, r4, #21
    ce5a:	310c      	adds	r1, #12
    ce5c:	f7ff ff8b 	bl	cd76 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    ce60:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    ce64:	e7ee      	b.n	ce44 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>

0000ce66 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    ce66:	b530      	push	{r4, r5, lr}
    ce68:	1c42      	adds	r2, r0, #1
    ce6a:	428a      	cmp	r2, r1
    ce6c:	d004      	beq.n	ce78 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x12>
    ce6e:	680a      	ldr	r2, [r1, #0]
    ce70:	f8c0 2001 	str.w	r2, [r0, #1]
    ce74:	7909      	ldrb	r1, [r1, #4]
    ce76:	7141      	strb	r1, [r0, #5]
    ce78:	7941      	ldrb	r1, [r0, #5]
    ce7a:	f001 011f 	and.w	r1, r1, #31
    ce7e:	7141      	strb	r1, [r0, #5]
    ce80:	2100      	movs	r1, #0
    ce82:	72c1      	strb	r1, [r0, #11]
    ce84:	1843      	adds	r3, r0, r1
    ce86:	1c49      	adds	r1, r1, #1
    ce88:	785c      	ldrb	r4, [r3, #1]
    ce8a:	b2c9      	uxtb	r1, r1
    ce8c:	f004 0201 	and.w	r2, r4, #1
    ce90:	0864      	lsrs	r4, r4, #1
    ce92:	f004 0501 	and.w	r5, r4, #1
    ce96:	4415      	add	r5, r2
    ce98:	0862      	lsrs	r2, r4, #1
    ce9a:	f002 0401 	and.w	r4, r2, #1
    ce9e:	442c      	add	r4, r5
    cea0:	0852      	lsrs	r2, r2, #1
    cea2:	f002 0501 	and.w	r5, r2, #1
    cea6:	442c      	add	r4, r5
    cea8:	0852      	lsrs	r2, r2, #1
    ceaa:	f002 0501 	and.w	r5, r2, #1
    ceae:	442c      	add	r4, r5
    ceb0:	0852      	lsrs	r2, r2, #1
    ceb2:	f002 0501 	and.w	r5, r2, #1
    ceb6:	442c      	add	r4, r5
    ceb8:	0852      	lsrs	r2, r2, #1
    ceba:	f002 0501 	and.w	r5, r2, #1
    cebe:	442c      	add	r4, r5
    cec0:	eb04 0252 	add.w	r2, r4, r2, lsr #1
    cec4:	719a      	strb	r2, [r3, #6]
    cec6:	7ac3      	ldrb	r3, [r0, #11]
    cec8:	2905      	cmp	r1, #5
    ceca:	441a      	add	r2, r3
    cecc:	72c2      	strb	r2, [r0, #11]
    cece:	d3d9      	bcc.n	ce84 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x1e>
    ced0:	bd30      	pop	{r4, r5, pc}

0000ced2 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>:
    ced2:	b570      	push	{r4, r5, r6, lr}
    ced4:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    ced8:	f8b0 5009 	ldrh.w	r5, [r0, #9]
    cedc:	f830 4f05 	ldrh.w	r4, [r0, #5]!
    cee0:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    cee4:	88c0      	ldrh	r0, [r0, #6]
    cee6:	b131      	cbz	r1, cef6 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x24>
    cee8:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    ceec:	d903      	bls.n	cef6 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x24>
    ceee:	f640 5107 	movw	r1, #3335	; 0xd07
    cef2:	428a      	cmp	r2, r1
    cef4:	d90b      	bls.n	cf0e <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x3c>
    cef6:	1f91      	subs	r1, r2, #6
    cef8:	f640 467a 	movw	r6, #3194	; 0xc7a
    cefc:	42b1      	cmp	r1, r6
    cefe:	d80e      	bhi.n	cf1e <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    cf00:	b16b      	cbz	r3, cf1e <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    cf02:	2b08      	cmp	r3, #8
    cf04:	d80b      	bhi.n	cf1e <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    cf06:	4293      	cmp	r3, r2
    cf08:	d209      	bcs.n	cf1e <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    cf0a:	4294      	cmp	r4, r2
    cf0c:	d807      	bhi.n	cf1e <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    cf0e:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    cf12:	d204      	bcs.n	cf1e <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    cf14:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
    cf18:	d801      	bhi.n	cf1e <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    cf1a:	2001      	movs	r0, #1
    cf1c:	bd70      	pop	{r4, r5, r6, pc}
    cf1e:	2000      	movs	r0, #0
    cf20:	bd70      	pop	{r4, r5, r6, pc}

0000cf22 <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>:
    cf22:	6842      	ldr	r2, [r0, #4]
    cf24:	600a      	str	r2, [r1, #0]
    cf26:	7a00      	ldrb	r0, [r0, #8]
    cf28:	7108      	strb	r0, [r1, #4]
    cf2a:	4770      	bx	lr

0000cf2c <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>:
    cf2c:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    cf30:	4770      	bx	lr

0000cf32 <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>:
    cf32:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    cf36:	4770      	bx	lr

0000cf38 <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>:
    cf38:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    cf3c:	4770      	bx	lr

0000cf3e <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>:
    cf3e:	f8b0 000b 	ldrh.w	r0, [r0, #11]
    cf42:	4770      	bx	lr

0000cf44 <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>:
    cf44:	8980      	ldrh	r0, [r0, #12]
    cf46:	8008      	strh	r0, [r1, #0]
    cf48:	4770      	bx	lr

0000cf4a <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>:
    cf4a:	f8d0 0016 	ldr.w	r0, [r0, #22]
    cf4e:	6008      	str	r0, [r1, #0]
    cf50:	4770      	bx	lr

0000cf52 <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>:
    cf52:	6842      	ldr	r2, [r0, #4]
    cf54:	600a      	str	r2, [r1, #0]
    cf56:	6880      	ldr	r0, [r0, #8]
    cf58:	6048      	str	r0, [r1, #4]
    cf5a:	4770      	bx	lr

0000cf5c <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>:
    cf5c:	f850 2f0e 	ldr.w	r2, [r0, #14]!
    cf60:	600a      	str	r2, [r1, #0]
    cf62:	6840      	ldr	r0, [r0, #4]
    cf64:	6048      	str	r0, [r1, #4]
    cf66:	4770      	bx	lr

0000cf68 <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>:
    cf68:	6842      	ldr	r2, [r0, #4]
    cf6a:	600a      	str	r2, [r1, #0]
    cf6c:	6880      	ldr	r0, [r0, #8]
    cf6e:	6048      	str	r0, [r1, #4]
    cf70:	4770      	bx	lr

0000cf72 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>:
    cf72:	7800      	ldrb	r0, [r0, #0]
    cf74:	f000 0003 	and.w	r0, r0, #3
    cf78:	4770      	bx	lr

0000cf7a <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>:
    cf7a:	7900      	ldrb	r0, [r0, #4]
    cf7c:	4770      	bx	lr

0000cf7e <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>:
    cf7e:	8880      	ldrh	r0, [r0, #4]
    cf80:	4770      	bx	lr

0000cf82 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>:
    cf82:	88c0      	ldrh	r0, [r0, #6]
    cf84:	4770      	bx	lr

0000cf86 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>:
    cf86:	8900      	ldrh	r0, [r0, #8]
    cf88:	4770      	bx	lr

0000cf8a <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>:
    cf8a:	8940      	ldrh	r0, [r0, #10]
    cf8c:	4770      	bx	lr

0000cf8e <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>:
    cf8e:	88c0      	ldrh	r0, [r0, #6]
    cf90:	4770      	bx	lr

0000cf92 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>:
    cf92:	7940      	ldrb	r0, [r0, #5]
    cf94:	4770      	bx	lr

0000cf96 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>:
    cf96:	7900      	ldrb	r0, [r0, #4]
    cf98:	4770      	bx	lr

0000cf9a <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>:
    cf9a:	7900      	ldrb	r0, [r0, #4]
    cf9c:	4770      	bx	lr

0000cf9e <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>:
    cf9e:	8901      	ldrh	r1, [r0, #8]
    cfa0:	291b      	cmp	r1, #27
    cfa2:	d30c      	bcc.n	cfbe <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    cfa4:	8941      	ldrh	r1, [r0, #10]
    cfa6:	f44f 72a4 	mov.w	r2, #328	; 0x148
    cfaa:	4291      	cmp	r1, r2
    cfac:	d307      	bcc.n	cfbe <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    cfae:	8881      	ldrh	r1, [r0, #4]
    cfb0:	291b      	cmp	r1, #27
    cfb2:	d304      	bcc.n	cfbe <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    cfb4:	88c0      	ldrh	r0, [r0, #6]
    cfb6:	4290      	cmp	r0, r2
    cfb8:	d301      	bcc.n	cfbe <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    cfba:	2001      	movs	r0, #1
    cfbc:	4770      	bx	lr
    cfbe:	2000      	movs	r0, #0
    cfc0:	4770      	bx	lr

0000cfc2 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>:
    cfc2:	b510      	push	{r4, lr}
    cfc4:	29fb      	cmp	r1, #251	; 0xfb
    cfc6:	d904      	bls.n	cfd2 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA+0x10>
    cfc8:	f240 515b 	movw	r1, #1371	; 0x55b
    cfcc:	202a      	movs	r0, #42	; 0x2a
    cfce:	f7f6 fde1 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cfd2:	7041      	strb	r1, [r0, #1]
    cfd4:	bd10      	pop	{r4, pc}

0000cfd6 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>:
    cfd6:	7901      	ldrb	r1, [r0, #4]
    cfd8:	0749      	lsls	r1, r1, #29
    cfda:	d004      	beq.n	cfe6 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    cfdc:	7940      	ldrb	r0, [r0, #5]
    cfde:	0740      	lsls	r0, r0, #29
    cfe0:	d001      	beq.n	cfe6 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    cfe2:	2001      	movs	r0, #1
    cfe4:	4770      	bx	lr
    cfe6:	2000      	movs	r0, #0
    cfe8:	4770      	bx	lr

0000cfea <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>:
    cfea:	7900      	ldrb	r0, [r0, #4]
    cfec:	4770      	bx	lr

0000cfee <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>:
    cfee:	7940      	ldrb	r0, [r0, #5]
    cff0:	4770      	bx	lr

0000cff2 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>:
    cff2:	7101      	strb	r1, [r0, #4]
    cff4:	4770      	bx	lr

0000cff6 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>:
    cff6:	7141      	strb	r1, [r0, #5]
    cff8:	4770      	bx	lr

0000cffa <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>:
    cffa:	b510      	push	{r4, lr}
    cffc:	2a1b      	cmp	r2, #27
    cffe:	d904      	bls.n	d00a <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA+0x10>
    d000:	f240 31c2 	movw	r1, #962	; 0x3c2
    d004:	202a      	movs	r0, #42	; 0x2a
    d006:	f7f6 fdc5 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d00a:	7042      	strb	r2, [r0, #1]
    d00c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d010:	1cc0      	adds	r0, r0, #3
    d012:	f7fe bbd4 	b.w	b7be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

0000d016 <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>:
    d016:	6809      	ldr	r1, [r1, #0]
    d018:	60c1      	str	r1, [r0, #12]
    d01a:	4770      	bx	lr

0000d01c <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>:
    d01c:	680a      	ldr	r2, [r1, #0]
    d01e:	6042      	str	r2, [r0, #4]
    d020:	6849      	ldr	r1, [r1, #4]
    d022:	6081      	str	r1, [r0, #8]
    d024:	4770      	bx	lr

0000d026 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>:
    d026:	680a      	ldr	r2, [r1, #0]
    d028:	6042      	str	r2, [r0, #4]
    d02a:	6849      	ldr	r1, [r1, #4]
    d02c:	6081      	str	r1, [r0, #8]
    d02e:	4770      	bx	lr

0000d030 <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>:
    d030:	680a      	ldr	r2, [r1, #0]
    d032:	6042      	str	r2, [r0, #4]
    d034:	6849      	ldr	r1, [r1, #4]
    d036:	6081      	str	r1, [r0, #8]
    d038:	4770      	bx	lr

0000d03a <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>:
    d03a:	7802      	ldrb	r2, [r0, #0]
    d03c:	f001 0103 	and.w	r1, r1, #3
    d040:	f022 0203 	bic.w	r2, r2, #3
    d044:	430a      	orrs	r2, r1
    d046:	7002      	strb	r2, [r0, #0]
    d048:	4770      	bx	lr

0000d04a <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>:
    d04a:	7101      	strb	r1, [r0, #4]
    d04c:	0a09      	lsrs	r1, r1, #8
    d04e:	7141      	strb	r1, [r0, #5]
    d050:	4770      	bx	lr

0000d052 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>:
    d052:	7181      	strb	r1, [r0, #6]
    d054:	0a09      	lsrs	r1, r1, #8
    d056:	71c1      	strb	r1, [r0, #7]
    d058:	4770      	bx	lr

0000d05a <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>:
    d05a:	7201      	strb	r1, [r0, #8]
    d05c:	0a09      	lsrs	r1, r1, #8
    d05e:	7241      	strb	r1, [r0, #9]
    d060:	4770      	bx	lr

0000d062 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>:
    d062:	7281      	strb	r1, [r0, #10]
    d064:	0a09      	lsrs	r1, r1, #8
    d066:	72c1      	strb	r1, [r0, #11]
    d068:	4770      	bx	lr

0000d06a <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>:
    d06a:	b570      	push	{r4, r5, r6, lr}
    d06c:	7802      	ldrb	r2, [r0, #0]
    d06e:	f002 020f 	and.w	r2, r2, #15
    d072:	2a03      	cmp	r2, #3
    d074:	d02c      	beq.n	d0d0 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x66>
    d076:	2a05      	cmp	r2, #5
    d078:	d12d      	bne.n	d0d6 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    d07a:	f8b0 2019 	ldrh.w	r2, [r0, #25]
    d07e:	f8b0 501b 	ldrh.w	r5, [r0, #27]
    d082:	f8b0 4017 	ldrh.w	r4, [r0, #23]
    d086:	7d83      	ldrb	r3, [r0, #22]
    d088:	b141      	cbz	r1, d09c <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x32>
    d08a:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    d08e:	d905      	bls.n	d09c <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x32>
    d090:	f640 5107 	movw	r1, #3335	; 0xd07
    d094:	428a      	cmp	r2, r1
    d096:	d801      	bhi.n	d09c <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x32>
    d098:	2101      	movs	r1, #1
    d09a:	e000      	b.n	d09e <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x34>
    d09c:	2100      	movs	r1, #0
    d09e:	7846      	ldrb	r6, [r0, #1]
    d0a0:	2e22      	cmp	r6, #34	; 0x22
    d0a2:	d118      	bne.n	d0d6 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    d0a4:	b959      	cbnz	r1, d0be <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x54>
    d0a6:	1f91      	subs	r1, r2, #6
    d0a8:	f640 467a 	movw	r6, #3194	; 0xc7a
    d0ac:	42b1      	cmp	r1, r6
    d0ae:	d812      	bhi.n	d0d6 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    d0b0:	b18b      	cbz	r3, d0d6 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    d0b2:	2b08      	cmp	r3, #8
    d0b4:	d80f      	bhi.n	d0d6 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    d0b6:	4293      	cmp	r3, r2
    d0b8:	d20d      	bcs.n	d0d6 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    d0ba:	4294      	cmp	r4, r2
    d0bc:	d80b      	bhi.n	d0d6 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    d0be:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    d0c2:	d208      	bcs.n	d0d6 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    d0c4:	f8b0 001d 	ldrh.w	r0, [r0, #29]
    d0c8:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
    d0cc:	d905      	bls.n	d0da <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x70>
    d0ce:	e002      	b.n	d0d6 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    d0d0:	7840      	ldrb	r0, [r0, #1]
    d0d2:	280c      	cmp	r0, #12
    d0d4:	d001      	beq.n	d0da <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x70>
    d0d6:	2000      	movs	r0, #0
    d0d8:	bd70      	pop	{r4, r5, r6, pc}
    d0da:	2001      	movs	r0, #1
    d0dc:	bd70      	pop	{r4, r5, r6, pc}

0000d0de <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>:
    d0de:	b570      	push	{r4, r5, r6, lr}
    d0e0:	4614      	mov	r4, r2
    d0e2:	4605      	mov	r5, r0
    d0e4:	2a1f      	cmp	r2, #31
    d0e6:	d903      	bls.n	d0f0 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I+0x12>
    d0e8:	21b2      	movs	r1, #178	; 0xb2
    d0ea:	202a      	movs	r0, #42	; 0x2a
    d0ec:	f7f6 fd52 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d0f0:	f105 0009 	add.w	r0, r5, #9
    d0f4:	f7fe fb63 	bl	b7be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d0f8:	1da4      	adds	r4, r4, #6
    d0fa:	706c      	strb	r4, [r5, #1]
    d0fc:	bd70      	pop	{r4, r5, r6, pc}

0000d0fe <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>:
    d0fe:	b510      	push	{r4, lr}
    d100:	7802      	ldrb	r2, [r0, #0]
    d102:	f001 030f 	and.w	r3, r1, #15
    d106:	f022 020f 	bic.w	r2, r2, #15
    d10a:	431a      	orrs	r2, r3
    d10c:	7002      	strb	r2, [r0, #0]
    d10e:	2907      	cmp	r1, #7
    d110:	d20c      	bcs.n	d12c <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2e>
    d112:	e8df f001 	tbb	[pc, r1]
    d116:	0604      	.short	0x0604
    d118:	08040604 	.word	0x08040604
    d11c:	0004      	.short	0x0004
    d11e:	2106      	movs	r1, #6
    d120:	e002      	b.n	d128 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    d122:	210c      	movs	r1, #12
    d124:	e000      	b.n	d128 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    d126:	2122      	movs	r1, #34	; 0x22
    d128:	7041      	strb	r1, [r0, #1]
    d12a:	bd10      	pop	{r4, pc}
    d12c:	216e      	movs	r1, #110	; 0x6e
    d12e:	202a      	movs	r0, #42	; 0x2a
    d130:	f7f6 fd30 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000d134 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>:
    d134:	680a      	ldr	r2, [r1, #0]
    d136:	f840 2f09 	str.w	r2, [r0, #9]!
    d13a:	8889      	ldrh	r1, [r1, #4]
    d13c:	8081      	strh	r1, [r0, #4]
    d13e:	4770      	bx	lr

0000d140 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>:
    d140:	7802      	ldrb	r2, [r0, #0]
    d142:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    d146:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    d14a:	7002      	strb	r2, [r0, #0]
    d14c:	4770      	bx	lr

0000d14e <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>:
    d14e:	680a      	ldr	r2, [r1, #0]
    d150:	f840 2f03 	str.w	r2, [r0, #3]!
    d154:	8889      	ldrh	r1, [r1, #4]
    d156:	8081      	strh	r1, [r0, #4]
    d158:	4770      	bx	lr

0000d15a <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>:
    d15a:	7802      	ldrb	r2, [r0, #0]
    d15c:	2340      	movs	r3, #64	; 0x40
    d15e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    d162:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    d166:	430a      	orrs	r2, r1
    d168:	7002      	strb	r2, [r0, #0]
    d16a:	4770      	bx	lr

0000d16c <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>:
    d16c:	b570      	push	{r4, r5, r6, lr}
    d16e:	4614      	mov	r4, r2
    d170:	4605      	mov	r5, r0
    d172:	2a1f      	cmp	r2, #31
    d174:	d903      	bls.n	d17e <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY+0x12>
    d176:	21d4      	movs	r1, #212	; 0xd4
    d178:	202a      	movs	r0, #42	; 0x2a
    d17a:	f7f6 fd0b 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d17e:	f105 0009 	add.w	r0, r5, #9
    d182:	f7fe fb1c 	bl	b7be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d186:	1da4      	adds	r4, r4, #6
    d188:	706c      	strb	r4, [r5, #1]
    d18a:	bd70      	pop	{r4, r5, r6, pc}

0000d18c <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>:
    d18c:	2101      	movs	r1, #1
    d18e:	f000 b853 	b.w	d238 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa6>

0000d192 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>:
    d192:	6841      	ldr	r1, [r0, #4]
    d194:	2200      	movs	r2, #0
    d196:	f891 30fa 	ldrb.w	r3, [r1, #250]	; 0xfa
    d19a:	2b00      	cmp	r3, #0
    d19c:	d004      	beq.n	d1a8 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x16>
    d19e:	f881 20fa 	strb.w	r2, [r1, #250]	; 0xfa
    d1a2:	6840      	ldr	r0, [r0, #4]
    d1a4:	f000 bc87 	b.w	dab6 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY>
    d1a8:	4770      	bx	lr
    d1aa:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    d1ae:	460e      	mov	r6, r1
    d1b0:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    d1b4:	4617      	mov	r7, r2
    d1b6:	39ff      	subs	r1, #255	; 0xff
    d1b8:	d014      	beq.n	d1e4 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x52>
    d1ba:	8030      	strh	r0, [r6, #0]
    d1bc:	2100      	movs	r1, #0
    d1be:	7171      	strb	r1, [r6, #5]
    d1c0:	f7f7 f91c 	bl	43fc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    d1c4:	4604      	mov	r4, r0
    d1c6:	f7ff f915 	bl	c3f4 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    d1ca:	0005      	movs	r5, r0
    d1cc:	d00a      	beq.n	d1e4 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x52>
    d1ce:	4620      	mov	r0, r4
    d1d0:	4629      	mov	r1, r5
    d1d2:	aa01      	add	r2, sp, #4
    d1d4:	f7ff f931 	bl	c43a <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    d1d8:	8070      	strh	r0, [r6, #2]
    d1da:	b130      	cbz	r0, d1ea <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x58>
    d1dc:	28fb      	cmp	r0, #251	; 0xfb
    d1de:	d906      	bls.n	d1ee <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x5c>
    d1e0:	21c9      	movs	r1, #201	; 0xc9
    d1e2:	e026      	b.n	d232 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa0>
    d1e4:	2000      	movs	r0, #0
    d1e6:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    d1ea:	21c8      	movs	r1, #200	; 0xc8
    d1ec:	e021      	b.n	d232 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa0>
    d1ee:	9801      	ldr	r0, [sp, #4]
    d1f0:	f7ff febf 	bl	cf72 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>
    d1f4:	2801      	cmp	r0, #1
    d1f6:	d003      	beq.n	d200 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x6e>
    d1f8:	2802      	cmp	r0, #2
    d1fa:	d001      	beq.n	d200 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x6e>
    d1fc:	21d8      	movs	r1, #216	; 0xd8
    d1fe:	e018      	b.n	d232 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa0>
    d200:	7130      	strb	r0, [r6, #4]
    d202:	4629      	mov	r1, r5
    d204:	8873      	ldrh	r3, [r6, #2]
    d206:	2503      	movs	r5, #3
    d208:	4620      	mov	r0, r4
    d20a:	463a      	mov	r2, r7
    d20c:	9500      	str	r5, [sp, #0]
    d20e:	f7fe ffe6 	bl	c1de <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>
    d212:	4620      	mov	r0, r4
    d214:	60b7      	str	r7, [r6, #8]
    d216:	f7ff f89c 	bl	c352 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    d21a:	b138      	cbz	r0, d22c <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x9a>
    d21c:	2100      	movs	r1, #0
    d21e:	4620      	mov	r0, r4
    d220:	460a      	mov	r2, r1
    d222:	f7ff f9e0 	bl	c5e6 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    d226:	b118      	cbz	r0, d230 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x9e>
    d228:	2001      	movs	r0, #1
    d22a:	e7dc      	b.n	d1e6 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x54>
    d22c:	21e8      	movs	r1, #232	; 0xe8
    d22e:	e000      	b.n	d232 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa0>
    d230:	21ed      	movs	r1, #237	; 0xed
    d232:	202b      	movs	r0, #43	; 0x2b
    d234:	f7f6 fcae 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d238:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    d23c:	4604      	mov	r4, r0
    d23e:	460e      	mov	r6, r1
    d240:	2000      	movs	r0, #0
    d242:	f7f6 fead 	bl	3fa0 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    d246:	4605      	mov	r5, r0
    d248:	2000      	movs	r0, #0
    d24a:	b916      	cbnz	r6, d252 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xc0>
    d24c:	2001      	movs	r0, #1
    d24e:	f7f6 fea7 	bl	3fa0 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    d252:	2600      	movs	r6, #0
    d254:	46b0      	mov	r8, r6
    d256:	182f      	adds	r7, r5, r0
    d258:	e017      	b.n	d28a <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xf8>
    d25a:	8820      	ldrh	r0, [r4, #0]
    d25c:	1c40      	adds	r0, r0, #1
    d25e:	b280      	uxth	r0, r0
    d260:	8020      	strh	r0, [r4, #0]
    d262:	42b8      	cmp	r0, r7
    d264:	d302      	bcc.n	d26c <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xda>
    d266:	4640      	mov	r0, r8
    d268:	f8a4 8000 	strh.w	r8, [r4]
    d26c:	b280      	uxth	r0, r0
    d26e:	42a8      	cmp	r0, r5
    d270:	d304      	bcc.n	d27c <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xea>
    d272:	42b8      	cmp	r0, r7
    d274:	d202      	bcs.n	d27c <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xea>
    d276:	2000      	movs	r0, #0
    d278:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    d27c:	4669      	mov	r1, sp
    d27e:	f7ff fbcf 	bl	ca20 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    d282:	2800      	cmp	r0, #0
    d284:	d0f8      	beq.n	d278 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xe6>
    d286:	1c76      	adds	r6, r6, #1
    d288:	b2f6      	uxtb	r6, r6
    d28a:	42b7      	cmp	r7, r6
    d28c:	d8e5      	bhi.n	d25a <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xc8>
    d28e:	f64f 70ff 	movw	r0, #65535	; 0xffff
    d292:	8020      	strh	r0, [r4, #0]
    d294:	2012      	movs	r0, #18
    d296:	e7ef      	b.n	d278 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xe6>

0000d298 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    d298:	b570      	push	{r4, r5, r6, lr}
    d29a:	8050      	strh	r0, [r2, #2]
    d29c:	890c      	ldrh	r4, [r1, #8]
    d29e:	8094      	strh	r4, [r2, #4]
    d2a0:	898b      	ldrh	r3, [r1, #12]
    d2a2:	80d3      	strh	r3, [r2, #6]
    d2a4:	8948      	ldrh	r0, [r1, #10]
    d2a6:	8110      	strh	r0, [r2, #8]
    d2a8:	89cd      	ldrh	r5, [r1, #14]
    d2aa:	8155      	strh	r5, [r2, #10]
    d2ac:	8dce      	ldrh	r6, [r1, #46]	; 0x2e
    d2ae:	42ae      	cmp	r6, r5
    d2b0:	d108      	bne.n	d2c4 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    d2b2:	8d4d      	ldrh	r5, [r1, #42]	; 0x2a
    d2b4:	4285      	cmp	r5, r0
    d2b6:	d105      	bne.n	d2c4 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    d2b8:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
    d2ba:	429d      	cmp	r5, r3
    d2bc:	d102      	bne.n	d2c4 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    d2be:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
    d2c0:	42a3      	cmp	r3, r4
    d2c2:	d001      	beq.n	d2c8 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x30>
    d2c4:	2301      	movs	r3, #1
    d2c6:	e000      	b.n	d2ca <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    d2c8:	2300      	movs	r3, #0
    d2ca:	7313      	strb	r3, [r2, #12]
    d2cc:	8548      	strh	r0, [r1, #42]	; 0x2a
    d2ce:	8950      	ldrh	r0, [r2, #10]
    d2d0:	85c8      	strh	r0, [r1, #46]	; 0x2e
    d2d2:	8890      	ldrh	r0, [r2, #4]
    d2d4:	8588      	strh	r0, [r1, #44]	; 0x2c
    d2d6:	88d0      	ldrh	r0, [r2, #6]
    d2d8:	8608      	strh	r0, [r1, #48]	; 0x30
    d2da:	2001      	movs	r0, #1
    d2dc:	7010      	strb	r0, [r2, #0]
    d2de:	bd70      	pop	{r4, r5, r6, pc}

0000d2e0 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    d2e0:	b510      	push	{r4, lr}
    d2e2:	888c      	ldrh	r4, [r1, #4]
    d2e4:	890a      	ldrh	r2, [r1, #8]
    d2e6:	884b      	ldrh	r3, [r1, #2]
    d2e8:	88c9      	ldrh	r1, [r1, #6]
    d2ea:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    d2ee:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
    d2f2:	f8a0 4042 	strh.w	r4, [r0, #66]	; 0x42
    d2f6:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
    d2fa:	bd10      	pop	{r4, pc}

0000d2fc <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    d2fc:	b570      	push	{r4, r5, r6, lr}
    d2fe:	4615      	mov	r5, r2
    d300:	460c      	mov	r4, r1
    d302:	f000 f8c1 	bl	d488 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x50>
    d306:	3096      	adds	r0, #150	; 0x96
    d308:	4428      	add	r0, r5
    d30a:	42a0      	cmp	r0, r4
    d30c:	d801      	bhi.n	d312 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    d30e:	1a20      	subs	r0, r4, r0
    d310:	bd70      	pop	{r4, r5, r6, pc}
    d312:	2000      	movs	r0, #0
    d314:	bd70      	pop	{r4, r5, r6, pc}

0000d316 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    d316:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d31a:	4604      	mov	r4, r0
    d31c:	8dc7      	ldrh	r7, [r0, #46]	; 0x2e
    d31e:	8e46      	ldrh	r6, [r0, #50]	; 0x32
    d320:	f8b0 5044 	ldrh.w	r5, [r0, #68]	; 0x44
    d324:	8f00      	ldrh	r0, [r0, #56]	; 0x38
    d326:	4285      	cmp	r5, r0
    d328:	d300      	bcc.n	d32c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x16>
    d32a:	4605      	mov	r5, r0
    d32c:	4620      	mov	r0, r4
    d32e:	f894 1063 	ldrb.w	r1, [r4, #99]	; 0x63
    d332:	f000 f89b 	bl	d46c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    d336:	4601      	mov	r1, r0
    d338:	85e5      	strh	r5, [r4, #46]	; 0x2e
    d33a:	8661      	strh	r1, [r4, #50]	; 0x32
    d33c:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    d33e:	f104 0024 	add.w	r0, r4, #36	; 0x24
    d342:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    d344:	4680      	mov	r8, r0
    d346:	42aa      	cmp	r2, r5
    d348:	d200      	bcs.n	d34c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x36>
    d34a:	462a      	mov	r2, r5
    d34c:	428b      	cmp	r3, r1
    d34e:	d200      	bcs.n	d352 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3c>
    d350:	460b      	mov	r3, r1
    d352:	8202      	strh	r2, [r0, #16]
    d354:	f8a8 3012 	strh.w	r3, [r8, #18]
    d358:	42bd      	cmp	r5, r7
    d35a:	d101      	bne.n	d360 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4a>
    d35c:	42b1      	cmp	r1, r6
    d35e:	d001      	beq.n	d364 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4e>
    d360:	2001      	movs	r0, #1
    d362:	e000      	b.n	d366 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x50>
    d364:	2000      	movs	r0, #0
    d366:	4681      	mov	r9, r0
    d368:	f8b4 5040 	ldrh.w	r5, [r4, #64]	; 0x40
    d36c:	8f60      	ldrh	r0, [r4, #58]	; 0x3a
    d36e:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
    d370:	8e26      	ldrh	r6, [r4, #48]	; 0x30
    d372:	4285      	cmp	r5, r0
    d374:	d300      	bcc.n	d378 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x62>
    d376:	4605      	mov	r5, r0
    d378:	f894 1062 	ldrb.w	r1, [r4, #98]	; 0x62
    d37c:	4620      	mov	r0, r4
    d37e:	f000 f87c 	bl	d47a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x42>
    d382:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
    d386:	2902      	cmp	r1, #2
    d388:	d108      	bne.n	d39c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x86>
    d38a:	42af      	cmp	r7, r5
    d38c:	d200      	bcs.n	d390 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x7a>
    d38e:	463d      	mov	r5, r7
    d390:	4286      	cmp	r6, r0
    d392:	d200      	bcs.n	d396 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x80>
    d394:	4630      	mov	r0, r6
    d396:	2100      	movs	r1, #0
    d398:	f884 1058 	strb.w	r1, [r4, #88]	; 0x58
    d39c:	f8a8 5008 	strh.w	r5, [r8, #8]
    d3a0:	f8a8 000c 	strh.w	r0, [r8, #12]
    d3a4:	42bd      	cmp	r5, r7
    d3a6:	d101      	bne.n	d3ac <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x96>
    d3a8:	42b0      	cmp	r0, r6
    d3aa:	d001      	beq.n	d3b0 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9a>
    d3ac:	2001      	movs	r0, #1
    d3ae:	e000      	b.n	d3b2 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9c>
    d3b0:	2000      	movs	r0, #0
    d3b2:	ea40 0009 	orr.w	r0, r0, r9
    d3b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000d3ba <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
    d3ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d3be:	4616      	mov	r6, r2
    d3c0:	460f      	mov	r7, r1
    d3c2:	4604      	mov	r4, r0
    d3c4:	f000 f860 	bl	d488 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x50>
    d3c8:	4605      	mov	r5, r0
    d3ca:	463a      	mov	r2, r7
    d3cc:	6861      	ldr	r1, [r4, #4]
    d3ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
    d3d0:	f000 f847 	bl	d462 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2a>
    d3d4:	19a9      	adds	r1, r5, r6
    d3d6:	4281      	cmp	r1, r0
    d3d8:	d300      	bcc.n	d3dc <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY+0x22>
    d3da:	4608      	mov	r0, r1
    d3dc:	62a0      	str	r0, [r4, #40]	; 0x28
    d3de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d3e2 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    d3e2:	221b      	movs	r2, #27
    d3e4:	8402      	strh	r2, [r0, #32]
    d3e6:	8382      	strh	r2, [r0, #28]
    d3e8:	82c2      	strh	r2, [r0, #22]
    d3ea:	8282      	strh	r2, [r0, #20]
    d3ec:	8142      	strh	r2, [r0, #10]
    d3ee:	8202      	strh	r2, [r0, #16]
    d3f0:	8102      	strh	r2, [r0, #8]
    d3f2:	8542      	strh	r2, [r0, #42]	; 0x2a
    d3f4:	8582      	strh	r2, [r0, #44]	; 0x2c
    d3f6:	8482      	strh	r2, [r0, #36]	; 0x24
    d3f8:	2900      	cmp	r1, #0
    d3fa:	d10a      	bne.n	d412 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    d3fc:	f44f 71a4 	mov.w	r1, #328	; 0x148
    d400:	8441      	strh	r1, [r0, #34]	; 0x22
    d402:	83c1      	strh	r1, [r0, #30]
    d404:	8341      	strh	r1, [r0, #26]
    d406:	8301      	strh	r1, [r0, #24]
    d408:	81c1      	strh	r1, [r0, #14]
    d40a:	8241      	strh	r1, [r0, #18]
    d40c:	8181      	strh	r1, [r0, #12]
    d40e:	85c1      	strh	r1, [r0, #46]	; 0x2e
    d410:	8601      	strh	r1, [r0, #48]	; 0x30
    d412:	4770      	bx	lr

0000d414 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    d414:	6800      	ldr	r0, [r0, #0]
    d416:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    d41a:	4290      	cmp	r0, r2
    d41c:	d903      	bls.n	d426 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    d41e:	1a40      	subs	r0, r0, r1
    d420:	389c      	subs	r0, #156	; 0x9c
    d422:	0840      	lsrs	r0, r0, #1
    d424:	4770      	bx	lr
    d426:	2000      	movs	r0, #0
    d428:	4770      	bx	lr

0000d42a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    d42a:	b510      	push	{r4, lr}
    d42c:	9c02      	ldr	r4, [sp, #8]
    d42e:	8281      	strh	r1, [r0, #20]
    d430:	82c2      	strh	r2, [r0, #22]
    d432:	8303      	strh	r3, [r0, #24]
    d434:	8344      	strh	r4, [r0, #26]
    d436:	bd10      	pop	{r4, pc}

0000d438 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    d438:	8050      	strh	r0, [r2, #2]
    d43a:	8a88      	ldrh	r0, [r1, #20]
    d43c:	8090      	strh	r0, [r2, #4]
    d43e:	8ac8      	ldrh	r0, [r1, #22]
    d440:	80d0      	strh	r0, [r2, #6]
    d442:	8b08      	ldrh	r0, [r1, #24]
    d444:	8110      	strh	r0, [r2, #8]
    d446:	8b48      	ldrh	r0, [r1, #26]
    d448:	8150      	strh	r0, [r2, #10]
    d44a:	2001      	movs	r0, #1
    d44c:	7010      	strb	r0, [r2, #0]
    d44e:	4770      	bx	lr
    d450:	2902      	cmp	r1, #2
    d452:	d003      	beq.n	d45c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x24>
    d454:	00c0      	lsls	r0, r0, #3
    d456:	3070      	adds	r0, #112	; 0x70
    d458:	b280      	uxth	r0, r0
    d45a:	4770      	bx	lr
    d45c:	0080      	lsls	r0, r0, #2
    d45e:	303c      	adds	r0, #60	; 0x3c
    d460:	e7fa      	b.n	d458 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x20>
    d462:	4288      	cmp	r0, r1
    d464:	d300      	bcc.n	d468 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x30>
    d466:	4608      	mov	r0, r1
    d468:	1a80      	subs	r0, r0, r2
    d46a:	4770      	bx	lr
    d46c:	f8b0 1046 	ldrh.w	r1, [r0, #70]	; 0x46
    d470:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
    d472:	4281      	cmp	r1, r0
    d474:	d200      	bcs.n	d478 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x40>
    d476:	4608      	mov	r0, r1
    d478:	4770      	bx	lr
    d47a:	f8b0 1042 	ldrh.w	r1, [r0, #66]	; 0x42
    d47e:	8fc0      	ldrh	r0, [r0, #62]	; 0x3e
    d480:	4281      	cmp	r1, r0
    d482:	d200      	bcs.n	d486 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x4e>
    d484:	4608      	mov	r0, r1
    d486:	4770      	bx	lr
    d488:	2196      	movs	r1, #150	; 0x96
    d48a:	f890 3063 	ldrb.w	r3, [r0, #99]	; 0x63
    d48e:	f890 2062 	ldrb.w	r2, [r0, #98]	; 0x62
    d492:	f000 b800 	b.w	d496 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x5e>
    d496:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d49a:	460d      	mov	r5, r1
    d49c:	4606      	mov	r6, r0
    d49e:	4698      	mov	r8, r3
    d4a0:	4617      	mov	r7, r2
    d4a2:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
    d4a4:	4611      	mov	r1, r2
    d4a6:	f7ff ffd3 	bl	d450 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    d4aa:	4604      	mov	r4, r0
    d4ac:	4639      	mov	r1, r7
    d4ae:	4630      	mov	r0, r6
    d4b0:	f7ff ffe3 	bl	d47a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x42>
    d4b4:	42a0      	cmp	r0, r4
    d4b6:	d200      	bcs.n	d4ba <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x82>
    d4b8:	4604      	mov	r4, r0
    d4ba:	8eb0      	ldrh	r0, [r6, #52]	; 0x34
    d4bc:	4641      	mov	r1, r8
    d4be:	f7ff ffc7 	bl	d450 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    d4c2:	4607      	mov	r7, r0
    d4c4:	4641      	mov	r1, r8
    d4c6:	4630      	mov	r0, r6
    d4c8:	f7ff ffd0 	bl	d46c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    d4cc:	42b8      	cmp	r0, r7
    d4ce:	d300      	bcc.n	d4d2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x9a>
    d4d0:	4638      	mov	r0, r7
    d4d2:	4420      	add	r0, r4
    d4d4:	4428      	add	r0, r5
    d4d6:	1d80      	adds	r0, r0, #6
    d4d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d4dc:	2801      	cmp	r0, #1
    d4de:	d102      	bne.n	d4e6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xae>
    d4e0:	7948      	ldrb	r0, [r1, #5]
    d4e2:	0980      	lsrs	r0, r0, #6
    d4e4:	d001      	beq.n	d4ea <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb2>
    d4e6:	2000      	movs	r0, #0
    d4e8:	4770      	bx	lr
    d4ea:	2001      	movs	r0, #1
    d4ec:	4770      	bx	lr
    d4ee:	2801      	cmp	r0, #1
    d4f0:	d106      	bne.n	d500 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xc8>
    d4f2:	7948      	ldrb	r0, [r1, #5]
    d4f4:	2101      	movs	r1, #1
    d4f6:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    d4fa:	d101      	bne.n	d500 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xc8>
    d4fc:	2001      	movs	r0, #1
    d4fe:	4770      	bx	lr
    d500:	2000      	movs	r0, #0
    d502:	4770      	bx	lr
    d504:	2802      	cmp	r0, #2
    d506:	d003      	beq.n	d510 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd8>
    d508:	2803      	cmp	r0, #3
    d50a:	d001      	beq.n	d510 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd8>
    d50c:	2000      	movs	r0, #0
    d50e:	4770      	bx	lr
    d510:	2001      	movs	r0, #1
    d512:	4770      	bx	lr

0000d514 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
    d514:	b510      	push	{r4, lr}
    d516:	4604      	mov	r4, r0
    d518:	7c00      	ldrb	r0, [r0, #16]
    d51a:	f7ff fff3 	bl	d504 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xcc>
    d51e:	b148      	cbz	r0, d534 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    d520:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
    d524:	f104 0150 	add.w	r1, r4, #80	; 0x50
    d528:	f7ff fa37 	bl	c99a <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    d52c:	2808      	cmp	r0, #8
    d52e:	d001      	beq.n	d534 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    d530:	2001      	movs	r0, #1
    d532:	bd10      	pop	{r4, pc}
    d534:	7c20      	ldrb	r0, [r4, #16]
    d536:	b118      	cbz	r0, d540 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    d538:	2802      	cmp	r0, #2
    d53a:	d001      	beq.n	d540 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    d53c:	7de0      	ldrb	r0, [r4, #23]
    d53e:	bd10      	pop	{r4, pc}
    d540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d544:	2000      	movs	r0, #0
    d546:	f7f7 ba13 	b.w	4970 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>

0000d54a <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>:
    d54a:	b508      	push	{r3, lr}
    d54c:	f890 1078 	ldrb.w	r1, [r0, #120]	; 0x78
    d550:	f88d 1000 	strb.w	r1, [sp]
    d554:	9900      	ldr	r1, [sp, #0]
    d556:	9100      	str	r1, [sp, #0]
    d558:	f89d 1000 	ldrb.w	r1, [sp]
    d55c:	b109      	cbz	r1, d562 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x18>
    d55e:	2001      	movs	r0, #1
    d560:	bd08      	pop	{r3, pc}
    d562:	f890 009a 	ldrb.w	r0, [r0, #154]	; 0x9a
    d566:	f88d 0000 	strb.w	r0, [sp]
    d56a:	9800      	ldr	r0, [sp, #0]
    d56c:	9000      	str	r0, [sp, #0]
    d56e:	f89d 0000 	ldrb.w	r0, [sp]
    d572:	2000      	movs	r0, #0
    d574:	bd08      	pop	{r3, pc}

0000d576 <sym_2ORNMU44KG57RJ5GYPW4FCTEFWDXBHWXYAE3J6I>:
    d576:	20ff      	movs	r0, #255	; 0xff
    d578:	7008      	strb	r0, [r1, #0]
    d57a:	4770      	bx	lr

0000d57c <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>:
    d57c:	b570      	push	{r4, r5, r6, lr}
    d57e:	460d      	mov	r5, r1
    d580:	4604      	mov	r4, r0
    d582:	22e8      	movs	r2, #232	; 0xe8
    d584:	2100      	movs	r1, #0
    d586:	f7fe f994 	bl	b8b2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d58a:	20ff      	movs	r0, #255	; 0xff
    d58c:	7020      	strb	r0, [r4, #0]
    d58e:	207f      	movs	r0, #127	; 0x7f
    d590:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    d594:	2013      	movs	r0, #19
    d596:	8060      	strh	r0, [r4, #2]
    d598:	4628      	mov	r0, r5
    d59a:	f7f6 ffc5 	bl	4528 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>
    d59e:	62e0      	str	r0, [r4, #44]	; 0x2c
    d5a0:	2002      	movs	r0, #2
    d5a2:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
    d5a6:	f884 0075 	strb.w	r0, [r4, #117]	; 0x75
    d5aa:	2000      	movs	r0, #0
    d5ac:	73a0      	strb	r0, [r4, #14]
    d5ae:	f104 0020 	add.w	r0, r4, #32
    d5b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d5b6:	f000 b9a0 	b.w	d8fa <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>

0000d5ba <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
    d5ba:	7880      	ldrb	r0, [r0, #2]
    d5bc:	f3c0 0080 	ubfx	r0, r0, #2, #1
    d5c0:	b108      	cbz	r0, d5c6 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0xc>
    d5c2:	2000      	movs	r0, #0
    d5c4:	4770      	bx	lr
    d5c6:	201f      	movs	r0, #31
    d5c8:	4770      	bx	lr

0000d5ca <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>:
    d5ca:	f7f9 ba41 	b.w	6a50 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d8>

0000d5ce <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
    d5ce:	6880      	ldr	r0, [r0, #8]
    d5d0:	4770      	bx	lr

0000d5d2 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
    d5d2:	2001      	movs	r0, #1
    d5d4:	4770      	bx	lr

0000d5d6 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
    d5d6:	b510      	push	{r4, lr}
    d5d8:	4604      	mov	r4, r0
    d5da:	3020      	adds	r0, #32
    d5dc:	f000 f94d 	bl	d87a <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    d5e0:	8861      	ldrh	r1, [r4, #2]
    d5e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d5e6:	2228      	movs	r2, #40	; 0x28
    d5e8:	f7f9 bbee 	b.w	6dc8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>

0000d5ec <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
    d5ec:	2200      	movs	r2, #0
    d5ee:	6282      	str	r2, [r0, #40]	; 0x28
    d5f0:	8843      	ldrh	r3, [r0, #2]
    d5f2:	2b1d      	cmp	r3, #29
    d5f4:	d001      	beq.n	d5fa <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y+0xe>
    d5f6:	7341      	strb	r1, [r0, #13]
    d5f8:	4770      	bx	lr
    d5fa:	7342      	strb	r2, [r0, #13]
    d5fc:	4770      	bx	lr

0000d5fe <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>:
    d5fe:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    d602:	2100      	movs	r1, #0
    d604:	2a02      	cmp	r2, #2
    d606:	d104      	bne.n	d612 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0x14>
    d608:	f8b0 0070 	ldrh.w	r0, [r0, #112]	; 0x70
    d60c:	b108      	cbz	r0, d612 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0x14>
    d60e:	2001      	movs	r0, #1
    d610:	e000      	b.n	d614 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0x16>
    d612:	2000      	movs	r0, #0
    d614:	4381      	bics	r1, r0
    d616:	f081 0001 	eor.w	r0, r1, #1
    d61a:	4770      	bx	lr

0000d61c <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
    d61c:	2000      	movs	r0, #0
    d61e:	4770      	bx	lr

0000d620 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
    d620:	7880      	ldrb	r0, [r0, #2]
    d622:	f000 0001 	and.w	r0, r0, #1
    d626:	4770      	bx	lr

0000d628 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
    d628:	7880      	ldrb	r0, [r0, #2]
    d62a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    d62e:	4770      	bx	lr

0000d630 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
    d630:	2001      	movs	r0, #1
    d632:	4770      	bx	lr

0000d634 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
    d634:	7880      	ldrb	r0, [r0, #2]
    d636:	f3c0 0040 	ubfx	r0, r0, #1, #1
    d63a:	4770      	bx	lr

0000d63c <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
    d63c:	f990 000e 	ldrsb.w	r0, [r0, #14]
    d640:	4770      	bx	lr

0000d642 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
    d642:	7800      	ldrb	r0, [r0, #0]
    d644:	28ff      	cmp	r0, #255	; 0xff
    d646:	d001      	beq.n	d64c <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ+0xa>
    d648:	2001      	movs	r0, #1
    d64a:	4770      	bx	lr
    d64c:	2000      	movs	r0, #0
    d64e:	4770      	bx	lr

0000d650 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>:
    d650:	680a      	ldr	r2, [r1, #0]
    d652:	f840 2f11 	str.w	r2, [r0, #17]!
    d656:	8889      	ldrh	r1, [r1, #4]
    d658:	8081      	strh	r1, [r0, #4]
    d65a:	2101      	movs	r1, #1
    d65c:	7181      	strb	r1, [r0, #6]
    d65e:	4770      	bx	lr

0000d660 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
    d660:	7b00      	ldrb	r0, [r0, #12]
    d662:	4770      	bx	lr

0000d664 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
    d664:	2001      	movs	r0, #1
    d666:	4770      	bx	lr

0000d668 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
    d668:	61c1      	str	r1, [r0, #28]
    d66a:	4770      	bx	lr

0000d66c <sym_RNI25VYXYFKWFPBZMEWKYU7T2AE36PDSHGXVMJI>:
    d66c:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
    d670:	b102      	cbz	r2, d674 <sym_RNI25VYXYFKWFPBZMEWKYU7T2AE36PDSHGXVMJI+0x8>
    d672:	2201      	movs	r2, #1
    d674:	2300      	movs	r3, #0
    d676:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    d67a:	b119      	cbz	r1, d684 <sym_RNI25VYXYFKWFPBZMEWKYU7T2AE36PDSHGXVMJI+0x18>
    d67c:	e9d0 3019 	ldrd	r3, r0, [r0, #100]	; 0x64
    d680:	e9c1 3000 	strd	r3, r0, [r1]
    d684:	4610      	mov	r0, r2
    d686:	4770      	bx	lr

0000d688 <sym_6SMKGRHQAIZHR6JTRBTFU3LNEOI457UCNN7L2SY>:
    d688:	2102      	movs	r1, #2
    d68a:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
    d68e:	4770      	bx	lr

0000d690 <sym_UVJC3XBQQLDGXNDNKXZFSW7F5OWZWJU7FTAZXEI>:
    d690:	e9d0 2019 	ldrd	r2, r0, [r0, #100]	; 0x64
    d694:	e9c1 2000 	strd	r2, r0, [r1]
    d698:	4770      	bx	lr

0000d69a <sym_DZ4VHVOVANVDVX7ECCNFNRACUFPY2WIUPGGZ27Y>:
    d69a:	2201      	movs	r2, #1
    d69c:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
    d6a0:	e9d1 2100 	ldrd	r2, r1, [r1]
    d6a4:	e9c0 2119 	strd	r2, r1, [r0, #100]	; 0x64
    d6a8:	4770      	bx	lr

0000d6aa <sym_CDJCVCA2DPO4EZMIO3E74XFHRHPGT76HYWGJOCA>:
    d6aa:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    d6ae:	b102      	cbz	r2, d6b2 <sym_CDJCVCA2DPO4EZMIO3E74XFHRHPGT76HYWGJOCA+0x8>
    d6b0:	2201      	movs	r2, #1
    d6b2:	2300      	movs	r3, #0
    d6b4:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    d6b8:	b119      	cbz	r1, d6c2 <sym_CDJCVCA2DPO4EZMIO3E74XFHRHPGT76HYWGJOCA+0x18>
    d6ba:	e9d0 301b 	ldrd	r3, r0, [r0, #108]	; 0x6c
    d6be:	e9c1 3000 	strd	r3, r0, [r1]
    d6c2:	4610      	mov	r0, r2
    d6c4:	4770      	bx	lr

0000d6c6 <sym_57N4MHGOTN6SE7ESLAUPVT5Z7CNKRRVGNPONZCI>:
    d6c6:	2102      	movs	r1, #2
    d6c8:	f880 1075 	strb.w	r1, [r0, #117]	; 0x75
    d6cc:	4770      	bx	lr

0000d6ce <sym_ECJZL6MVN4B4UZUQDXL2OTZMAL25BOLWE4F7TMI>:
    d6ce:	e9d0 201b 	ldrd	r2, r0, [r0, #108]	; 0x6c
    d6d2:	e9c1 2000 	strd	r2, r0, [r1]
    d6d6:	4770      	bx	lr

0000d6d8 <sym_VD45NAZNLOGGVVD5JTOGXKZNINHWZNPETQGEFXA>:
    d6d8:	2201      	movs	r2, #1
    d6da:	f880 2075 	strb.w	r2, [r0, #117]	; 0x75
    d6de:	e9d1 2100 	ldrd	r2, r1, [r1]
    d6e2:	e9c0 211b 	strd	r2, r1, [r0, #108]	; 0x6c
    d6e6:	4770      	bx	lr

0000d6e8 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
    d6e8:	f880 1060 	strb.w	r1, [r0, #96]	; 0x60
    d6ec:	4770      	bx	lr

0000d6ee <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
    d6ee:	b570      	push	{r4, r5, r6, lr}
    d6f0:	4604      	mov	r4, r0
    d6f2:	7880      	ldrb	r0, [r0, #2]
    d6f4:	2501      	movs	r5, #1
    d6f6:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    d6fa:	b138      	cbz	r0, d70c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1e>
    d6fc:	233c      	movs	r3, #60	; 0x3c
    d6fe:	22ff      	movs	r2, #255	; 0xff
    d700:	4620      	mov	r0, r4
    d702:	69e1      	ldr	r1, [r4, #28]
    d704:	f7f9 f9ca 	bl	6a9c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x424>
    d708:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
    d70c:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
    d710:	bd70      	pop	{r4, r5, r6, pc}

0000d712 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
    d712:	7bc0      	ldrb	r0, [r0, #15]
    d714:	2800      	cmp	r0, #0
    d716:	d000      	beq.n	d71a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8>
    d718:	2001      	movs	r0, #1
    d71a:	4770      	bx	lr
    d71c:	b510      	push	{r4, lr}
    d71e:	f7ff f93c 	bl	c99a <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    d722:	4604      	mov	r4, r0
    d724:	f7f7 ff9e 	bl	5664 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    d728:	b138      	cbz	r0, d73a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
    d72a:	4620      	mov	r0, r4
    d72c:	f7f7 fed2 	bl	54d4 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    d730:	b118      	cbz	r0, d73a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
    d732:	2110      	movs	r1, #16
    d734:	f7ff fb10 	bl	cd58 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    d738:	b108      	cbz	r0, d73e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2c>
    d73a:	2000      	movs	r0, #0
    d73c:	bd10      	pop	{r4, pc}
    d73e:	2001      	movs	r0, #1
    d740:	bd10      	pop	{r4, pc}
    d742:	2101      	movs	r1, #1
    d744:	f7f8 be1a 	b.w	637c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    d748:	2101      	movs	r1, #1
    d74a:	f7f8 be17 	b.w	637c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    d74e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d752:	4604      	mov	r4, r0
    d754:	2700      	movs	r7, #0
    d756:	704f      	strb	r7, [r1, #1]
    d758:	2011      	movs	r0, #17
    d75a:	460d      	mov	r5, r1
    d75c:	7008      	strb	r0, [r1, #0]
    d75e:	2220      	movs	r2, #32
    d760:	f104 017a 	add.w	r1, r4, #122	; 0x7a
    d764:	1d28      	adds	r0, r5, #4
    d766:	f7fe f82a 	bl	b7be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d76a:	2601      	movs	r6, #1
    d76c:	722e      	strb	r6, [r5, #8]
    d76e:	f884 7078 	strb.w	r7, [r4, #120]	; 0x78
    d772:	7928      	ldrb	r0, [r5, #4]
    d774:	2800      	cmp	r0, #0
    d776:	d111      	bne.n	d79c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8a>
    d778:	88e8      	ldrh	r0, [r5, #6]
    d77a:	f8a4 00a4 	strh.w	r0, [r4, #164]	; 0xa4
    d77e:	69e0      	ldr	r0, [r4, #28]
    d780:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    d784:	f884 10a6 	strb.w	r1, [r4, #166]	; 0xa6
    d788:	f884 60a2 	strb.w	r6, [r4, #162]	; 0xa2
    d78c:	8800      	ldrh	r0, [r0, #0]
    d78e:	f7f6 fe35 	bl	43fc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    d792:	f7fe fedc 	bl	c54e <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    d796:	69e0      	ldr	r0, [r4, #28]
    d798:	f880 6068 	strb.w	r6, [r0, #104]	; 0x68
    d79c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d7a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d7a4:	4604      	mov	r4, r0
    d7a6:	460f      	mov	r7, r1
    d7a8:	7e40      	ldrb	r0, [r0, #25]
    d7aa:	f7f7 fe53 	bl	5454 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    d7ae:	4606      	mov	r6, r0
    d7b0:	7e20      	ldrb	r0, [r4, #24]
    d7b2:	f104 0549 	add.w	r5, r4, #73	; 0x49
    d7b6:	b120      	cbz	r0, d7c2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb0>
    d7b8:	b11e      	cbz	r6, d7c2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb0>
    d7ba:	7e60      	ldrb	r0, [r4, #25]
    d7bc:	f7f7 fe3e 	bl	543c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    d7c0:	b1a0      	cbz	r0, d7ec <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xda>
    d7c2:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    d7c6:	2800      	cmp	r0, #0
    d7c8:	d024      	beq.n	d814 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x102>
    d7ca:	7ea0      	ldrb	r0, [r4, #26]
    d7cc:	2800      	cmp	r0, #0
    d7ce:	d021      	beq.n	d814 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x102>
    d7d0:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    d7d4:	4629      	mov	r1, r5
    d7d6:	f7ff fe8a 	bl	d4ee <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb6>
    d7da:	b1a8      	cbz	r0, d808 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf6>
    d7dc:	f7f7 fe2a 	bl	5434 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    d7e0:	463a      	mov	r2, r7
    d7e2:	4629      	mov	r1, r5
    d7e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d7e8:	f7ff b86f 	b.w	c8ca <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    d7ec:	2001      	movs	r0, #1
    d7ee:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
    d7f2:	463a      	mov	r2, r7
    d7f4:	4629      	mov	r1, r5
    d7f6:	4630      	mov	r0, r6
    d7f8:	f7ff f867 	bl	c8ca <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    d7fc:	7e61      	ldrb	r1, [r4, #25]
    d7fe:	4628      	mov	r0, r5
    d800:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d804:	f7f7 be32 	b.w	546c <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    d808:	4639      	mov	r1, r7
    d80a:	4628      	mov	r0, r5
    d80c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d810:	f7ff b84a 	b.w	c8a8 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    d814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d818:	b510      	push	{r4, lr}
    d81a:	4604      	mov	r4, r0
    d81c:	4608      	mov	r0, r1
    d81e:	f7fd fa91 	bl	ad44 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    d822:	7921      	ldrb	r1, [r4, #4]
    d824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d828:	2025      	movs	r0, #37	; 0x25
    d82a:	f001 bc5f 	b.w	f0ec <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>
    d82e:	b510      	push	{r4, lr}
    d830:	4604      	mov	r4, r0
    d832:	3026      	adds	r0, #38	; 0x26
    d834:	f7fd fa38 	bl	aca8 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    d838:	2800      	cmp	r0, #0
    d83a:	d102      	bne.n	d842 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x130>
    d83c:	207f      	movs	r0, #127	; 0x7f
    d83e:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    d842:	bd10      	pop	{r4, pc}
    d844:	7802      	ldrb	r2, [r0, #0]
    d846:	2320      	movs	r3, #32
    d848:	f022 0220 	bic.w	r2, r2, #32
    d84c:	ea03 1141 	and.w	r1, r3, r1, lsl #5
    d850:	430a      	orrs	r2, r1
    d852:	7002      	strb	r2, [r0, #0]
    d854:	4770      	bx	lr

0000d856 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
    d856:	b570      	push	{r4, r5, r6, lr}
    d858:	7001      	strb	r1, [r0, #0]
    d85a:	7042      	strb	r2, [r0, #1]
    d85c:	4614      	mov	r4, r2
    d85e:	460d      	mov	r5, r1
    d860:	7880      	ldrb	r0, [r0, #2]
    d862:	f000 f87f 	bl	d964 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    d866:	fb10 f005 	smulbb	r0, r0, r5
    d86a:	4360      	muls	r0, r4
    d86c:	28ff      	cmp	r0, #255	; 0xff
    d86e:	d303      	bcc.n	d878 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y+0x22>
    d870:	215c      	movs	r1, #92	; 0x5c
    d872:	202e      	movs	r0, #46	; 0x2e
    d874:	f7f6 f98e 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d878:	bd70      	pop	{r4, r5, r6, pc}

0000d87a <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
    d87a:	b510      	push	{r4, lr}
    d87c:	4604      	mov	r4, r0
    d87e:	7880      	ldrb	r0, [r0, #2]
    d880:	f000 f870 	bl	d964 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    d884:	7861      	ldrb	r1, [r4, #1]
    d886:	7822      	ldrb	r2, [r4, #0]
    d888:	fb11 f102 	smulbb	r1, r1, r2
    d88c:	4348      	muls	r0, r1
    d88e:	b2c0      	uxtb	r0, r0
    d890:	bd10      	pop	{r4, pc}

0000d892 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
    d892:	b510      	push	{r4, lr}
    d894:	4604      	mov	r4, r0
    d896:	f000 f84d 	bl	d934 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x2c>
    d89a:	7961      	ldrb	r1, [r4, #5]
    d89c:	1c49      	adds	r1, r1, #1
    d89e:	b2c9      	uxtb	r1, r1
    d8a0:	7161      	strb	r1, [r4, #5]
    d8a2:	7862      	ldrb	r2, [r4, #1]
    d8a4:	4291      	cmp	r1, r2
    d8a6:	d10b      	bne.n	d8c0 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    d8a8:	2200      	movs	r2, #0
    d8aa:	7162      	strb	r2, [r4, #5]
    d8ac:	78e1      	ldrb	r1, [r4, #3]
    d8ae:	4301      	orrs	r1, r0
    d8b0:	70e1      	strb	r1, [r4, #3]
    d8b2:	78a3      	ldrb	r3, [r4, #2]
    d8b4:	4299      	cmp	r1, r3
    d8b6:	d103      	bne.n	d8c0 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    d8b8:	70e2      	strb	r2, [r4, #3]
    d8ba:	7921      	ldrb	r1, [r4, #4]
    d8bc:	1c49      	adds	r1, r1, #1
    d8be:	7121      	strb	r1, [r4, #4]
    d8c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d8c4:	f000 b825 	b.w	d912 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0xa>

0000d8c8 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
    d8c8:	7081      	strb	r1, [r0, #2]
    d8ca:	4770      	bx	lr

0000d8cc <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
    d8cc:	b570      	push	{r4, r5, r6, lr}
    d8ce:	4604      	mov	r4, r0
    d8d0:	7880      	ldrb	r0, [r0, #2]
    d8d2:	f000 f847 	bl	d964 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    d8d6:	7861      	ldrb	r1, [r4, #1]
    d8d8:	fb11 f500 	smulbb	r5, r1, r0
    d8dc:	78e0      	ldrb	r0, [r4, #3]
    d8de:	f000 f841 	bl	d964 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    d8e2:	7861      	ldrb	r1, [r4, #1]
    d8e4:	7962      	ldrb	r2, [r4, #5]
    d8e6:	fb10 2001 	smlabb	r0, r0, r1, r2
    d8ea:	7821      	ldrb	r1, [r4, #0]
    d8ec:	7922      	ldrb	r2, [r4, #4]
    d8ee:	1a89      	subs	r1, r1, r2
    d8f0:	fb11 f105 	smulbb	r1, r1, r5
    d8f4:	1a08      	subs	r0, r1, r0
    d8f6:	b2c0      	uxtb	r0, r0
    d8f8:	bd70      	pop	{r4, r5, r6, pc}

0000d8fa <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
    d8fa:	2100      	movs	r1, #0
    d8fc:	6001      	str	r1, [r0, #0]
    d8fe:	8081      	strh	r1, [r0, #4]
    d900:	2101      	movs	r1, #1
    d902:	7041      	strb	r1, [r0, #1]
    d904:	7001      	strb	r1, [r0, #0]
    d906:	4770      	bx	lr

0000d908 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
    d908:	2100      	movs	r1, #0
    d90a:	70c1      	strb	r1, [r0, #3]
    d90c:	7141      	strb	r1, [r0, #5]
    d90e:	7101      	strb	r1, [r0, #4]
    d910:	4770      	bx	lr
    d912:	b510      	push	{r4, lr}
    d914:	2801      	cmp	r0, #1
    d916:	d007      	beq.n	d928 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x20>
    d918:	2802      	cmp	r0, #2
    d91a:	d007      	beq.n	d92c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x24>
    d91c:	2804      	cmp	r0, #4
    d91e:	d007      	beq.n	d930 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x28>
    d920:	2139      	movs	r1, #57	; 0x39
    d922:	202e      	movs	r0, #46	; 0x2e
    d924:	f7f6 f936 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d928:	2025      	movs	r0, #37	; 0x25
    d92a:	bd10      	pop	{r4, pc}
    d92c:	2026      	movs	r0, #38	; 0x26
    d92e:	bd10      	pop	{r4, pc}
    d930:	2027      	movs	r0, #39	; 0x27
    d932:	bd10      	pop	{r4, pc}
    d934:	4601      	mov	r1, r0
    d936:	2000      	movs	r0, #0
    d938:	788a      	ldrb	r2, [r1, #2]
    d93a:	07d3      	lsls	r3, r2, #31
    d93c:	d002      	beq.n	d944 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x3c>
    d93e:	78cb      	ldrb	r3, [r1, #3]
    d940:	07db      	lsls	r3, r3, #31
    d942:	d006      	beq.n	d952 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4a>
    d944:	0793      	lsls	r3, r2, #30
    d946:	d506      	bpl.n	d956 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    d948:	78cb      	ldrb	r3, [r1, #3]
    d94a:	079b      	lsls	r3, r3, #30
    d94c:	d403      	bmi.n	d956 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    d94e:	2002      	movs	r0, #2
    d950:	4770      	bx	lr
    d952:	2001      	movs	r0, #1
    d954:	4770      	bx	lr
    d956:	0752      	lsls	r2, r2, #29
    d958:	d5fc      	bpl.n	d954 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    d95a:	78c9      	ldrb	r1, [r1, #3]
    d95c:	0749      	lsls	r1, r1, #29
    d95e:	d4f9      	bmi.n	d954 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    d960:	2004      	movs	r0, #4
    d962:	4770      	bx	lr
    d964:	f3c0 0180 	ubfx	r1, r0, #2, #1
    d968:	f3c0 0240 	ubfx	r2, r0, #1, #1
    d96c:	4411      	add	r1, r2
    d96e:	f000 0001 	and.w	r0, r0, #1
    d972:	4408      	add	r0, r1
    d974:	4770      	bx	lr

0000d976 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
    d976:	f240 315a 	movw	r1, #858	; 0x35a
    d97a:	4348      	muls	r0, r1
    d97c:	4770      	bx	lr

0000d97e <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
    d97e:	f240 20ef 	movw	r0, #751	; 0x2ef
    d982:	4770      	bx	lr
    d984:	041c020e 	.word	0x041c020e
    d988:	0c600630 	.word	0x0c600630
    d98c:	06b4035a 	.word	0x06b4035a
    d990:	0bf505c5 	.word	0x0bf505c5
    d994:	01a31225 	.word	0x01a31225
    d998:	05bf03b1 	.word	0x05bf03b1
    d99c:	064902ef 	.word	0x064902ef
    d9a0:	09a3      	.short	0x09a3

0000d9a2 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
    d9a2:	b510      	push	{r4, lr}
    d9a4:	f890 10e4 	ldrb.w	r1, [r0, #228]	; 0xe4
    d9a8:	b109      	cbz	r1, d9ae <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0xc>
    d9aa:	2000      	movs	r0, #0
    d9ac:	bd10      	pop	{r4, pc}
    d9ae:	f8d0 10e0 	ldr.w	r1, [r0, #224]	; 0xe0
    d9b2:	b949      	cbnz	r1, d9c8 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x26>
    d9b4:	f890 10bc 	ldrb.w	r1, [r0, #188]	; 0xbc
    d9b8:	b131      	cbz	r1, d9c8 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x26>
    d9ba:	e9d0 1230 	ldrd	r1, r2, [r0, #192]	; 0xc0
    d9be:	428a      	cmp	r2, r1
    d9c0:	d902      	bls.n	d9c8 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x26>
    d9c2:	f7ff fe94 	bl	d6ee <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    d9c6:	e7f0      	b.n	d9aa <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x8>
    d9c8:	2001      	movs	r0, #1
    d9ca:	bd10      	pop	{r4, pc}

0000d9cc <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
    d9cc:	b510      	push	{r4, lr}
    d9ce:	b131      	cbz	r1, d9de <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x12>
    d9d0:	2901      	cmp	r1, #1
    d9d2:	d008      	beq.n	d9e6 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x1a>
    d9d4:	f240 71a3 	movw	r1, #1955	; 0x7a3
    d9d8:	2030      	movs	r0, #48	; 0x30
    d9da:	f7f6 f8db 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d9de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d9e2:	f000 b999 	b.w	dd18 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x262>
    d9e6:	2100      	movs	r1, #0
    d9e8:	f880 10bc 	strb.w	r1, [r0, #188]	; 0xbc
    d9ec:	f000 f95d 	bl	dcaa <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1f4>
    d9f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d9f4:	f7fc b82a 	b.w	9a4c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>

0000d9f8 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI>:
    d9f8:	b510      	push	{r4, lr}
    d9fa:	4604      	mov	r4, r0
    d9fc:	f890 00c8 	ldrb.w	r0, [r0, #200]	; 0xc8
    da00:	2800      	cmp	r0, #0
    da02:	d019      	beq.n	da38 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x40>
    da04:	2001      	movs	r0, #1
    da06:	f884 00e4 	strb.w	r0, [r4, #228]	; 0xe4
    da0a:	4601      	mov	r1, r0
    da0c:	4620      	mov	r0, r4
    da0e:	f7ff fe6b 	bl	d6e8 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    da12:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    da16:	b170      	cbz	r0, da36 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x3e>
    da18:	f814 0fb4 	ldrb.w	r0, [r4, #180]!
    da1c:	f7f4 f9ba 	bl	1d94 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    da20:	7820      	ldrb	r0, [r4, #0]
    da22:	f7f4 faf5 	bl	2010 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    da26:	f814 09b4 	ldrb.w	r0, [r4], #-180
    da2a:	f7f4 facf 	bl	1fcc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    da2e:	b120      	cbz	r0, da3a <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x42>
    da30:	2000      	movs	r0, #0
    da32:	f884 00c8 	strb.w	r0, [r4, #200]	; 0xc8
    da36:	2000      	movs	r0, #0
    da38:	bd10      	pop	{r4, pc}
    da3a:	f240 2117 	movw	r1, #535	; 0x217
    da3e:	2030      	movs	r0, #48	; 0x30
    da40:	f7f6 f8a8 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000da44 <sym_WI2RDLNIWKOV64CKFZ2EF2DRND265I3CYCBNK6A>:
    da44:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
    da48:	4770      	bx	lr

0000da4a <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>:
    da4a:	f890 00c8 	ldrb.w	r0, [r0, #200]	; 0xc8
    da4e:	4770      	bx	lr

0000da50 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA>:
    da50:	b50e      	push	{r1, r2, r3, lr}
    da52:	4669      	mov	r1, sp
    da54:	2001      	movs	r0, #1
    da56:	f7fe feb4 	bl	c7c2 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    da5a:	b138      	cbz	r0, da6c <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0x1c>
    da5c:	f240 1145 	movw	r1, #325	; 0x145
    da60:	2030      	movs	r0, #48	; 0x30
    da62:	f7f6 f897 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    da66:	9802      	ldr	r0, [sp, #8]
    da68:	f7ff ffc6 	bl	d9f8 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI>
    da6c:	4668      	mov	r0, sp
    da6e:	f7f6 fae3 	bl	4038 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    da72:	2800      	cmp	r0, #0
    da74:	d0f7      	beq.n	da66 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0x16>
    da76:	f7f9 fb2f 	bl	70d8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xb0>
    da7a:	2000      	movs	r0, #0
    da7c:	bd0e      	pop	{r1, r2, r3, pc}

0000da7e <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY>:
    da7e:	b50e      	push	{r1, r2, r3, lr}
    da80:	4669      	mov	r1, sp
    da82:	2001      	movs	r0, #1
    da84:	f7fe fe9d 	bl	c7c2 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    da88:	b150      	cbz	r0, daa0 <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x22>
    da8a:	f240 71ae 	movw	r1, #1966	; 0x7ae
    da8e:	2030      	movs	r0, #48	; 0x30
    da90:	f7f6 f880 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    da94:	9802      	ldr	r0, [sp, #8]
    da96:	f890 00c8 	ldrb.w	r0, [r0, #200]	; 0xc8
    da9a:	b108      	cbz	r0, daa0 <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x22>
    da9c:	2000      	movs	r0, #0
    da9e:	bd0e      	pop	{r1, r2, r3, pc}
    daa0:	4668      	mov	r0, sp
    daa2:	f7f6 fac9 	bl	4038 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    daa6:	2800      	cmp	r0, #0
    daa8:	d0f4      	beq.n	da94 <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x16>
    daaa:	2000      	movs	r0, #0
    daac:	f7fe fe6d 	bl	c78a <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY>
    dab0:	f080 0001 	eor.w	r0, r0, #1
    dab4:	bd0e      	pop	{r1, r2, r3, pc}

0000dab6 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY>:
    dab6:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    dab8:	4604      	mov	r4, r0
    daba:	f890 00fb 	ldrb.w	r0, [r0, #251]	; 0xfb
    dabe:	2800      	cmp	r0, #0
    dac0:	d153      	bne.n	db6a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    dac2:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    dac6:	2803      	cmp	r0, #3
    dac8:	d14f      	bne.n	db6a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    daca:	f7fd fcf8 	bl	b4be <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    dace:	4601      	mov	r1, r0
    dad0:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
    dad4:	f7f3 fd1a 	bl	150c <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    dad8:	2800      	cmp	r0, #0
    dada:	dd46      	ble.n	db6a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    dadc:	6861      	ldr	r1, [r4, #4]
    dade:	b111      	cbz	r1, dae6 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x30>
    dae0:	fbb0 f0f1 	udiv	r0, r0, r1
    dae4:	e000      	b.n	dae8 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x32>
    dae6:	2000      	movs	r0, #0
    dae8:	f8b4 106c 	ldrh.w	r1, [r4, #108]	; 0x6c
    daec:	1c40      	adds	r0, r0, #1
    daee:	4408      	add	r0, r1
    daf0:	f8a4 013c 	strh.w	r0, [r4, #316]	; 0x13c
    daf4:	f8b4 013c 	ldrh.w	r0, [r4, #316]	; 0x13c
    daf8:	f8b4 10f4 	ldrh.w	r1, [r4, #244]	; 0xf4
    dafc:	1a08      	subs	r0, r1, r0
    dafe:	b200      	sxth	r0, r0
    db00:	2800      	cmp	r0, #0
    db02:	dd32      	ble.n	db6a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    db04:	f894 0160 	ldrb.w	r0, [r4, #352]	; 0x160
    db08:	f7f4 f944 	bl	1d94 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    db0c:	2800      	cmp	r0, #0
    db0e:	d02c      	beq.n	db6a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    db10:	2001      	movs	r0, #1
    db12:	f884 0141 	strb.w	r0, [r4, #321]	; 0x141
    db16:	f8b4 009e 	ldrh.w	r0, [r4, #158]	; 0x9e
    db1a:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
    db1e:	ae01      	add	r6, sp, #4
    db20:	1a40      	subs	r0, r0, r1
    db22:	f8b4 106c 	ldrh.w	r1, [r4, #108]	; 0x6c
    db26:	1e40      	subs	r0, r0, #1
    db28:	4408      	add	r0, r1
    db2a:	b285      	uxth	r5, r0
    db2c:	e017      	b.n	db5e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xa8>
    db2e:	9600      	str	r6, [sp, #0]
    db30:	f8b4 113c 	ldrh.w	r1, [r4, #316]	; 0x13c
    db34:	2300      	movs	r3, #0
    db36:	2201      	movs	r2, #1
    db38:	4620      	mov	r0, r4
    db3a:	f7f9 fbff 	bl	733c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x314>
    db3e:	2800      	cmp	r0, #0
    db40:	d013      	beq.n	db6a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    db42:	2801      	cmp	r0, #1
    db44:	d004      	beq.n	db50 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x9a>
    db46:	f240 6115 	movw	r1, #1557	; 0x615
    db4a:	2030      	movs	r0, #48	; 0x30
    db4c:	f7f6 f822 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    db50:	f8b4 013c 	ldrh.w	r0, [r4, #316]	; 0x13c
    db54:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    db58:	4408      	add	r0, r1
    db5a:	f8a4 013c 	strh.w	r0, [r4, #316]	; 0x13c
    db5e:	f8b4 013c 	ldrh.w	r0, [r4, #316]	; 0x13c
    db62:	1a28      	subs	r0, r5, r0
    db64:	b200      	sxth	r0, r0
    db66:	2800      	cmp	r0, #0
    db68:	dae1      	bge.n	db2e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x78>
    db6a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    db6c:	2000      	movs	r0, #0
    db6e:	4770      	bx	lr
    db70:	b570      	push	{r4, r5, r6, lr}
    db72:	4604      	mov	r4, r0
    db74:	2601      	movs	r6, #1
    db76:	f000 f8b3 	bl	dce0 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x22a>
    db7a:	f8a4 00d4 	strh.w	r0, [r4, #212]	; 0xd4
    db7e:	2000      	movs	r0, #0
    db80:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
    db84:	2001      	movs	r0, #1
    db86:	f884 00d7 	strb.w	r0, [r4, #215]	; 0xd7
    db8a:	f894 00bc 	ldrb.w	r0, [r4, #188]	; 0xbc
    db8e:	f104 05cc 	add.w	r5, r4, #204	; 0xcc
    db92:	b160      	cbz	r0, dbae <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xf8>
    db94:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    db98:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
    db9c:	f7f3 fc84 	bl	14a8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    dba0:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
    dba4:	2100      	movs	r1, #0
    dba6:	4628      	mov	r0, r5
    dba8:	f7ff f81d 	bl	cbe6 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    dbac:	e00f      	b.n	dbce <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x118>
    dbae:	4620      	mov	r0, r4
    dbb0:	f7ff fd0d 	bl	d5ce <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    dbb4:	4606      	mov	r6, r0
    dbb6:	4631      	mov	r1, r6
    dbb8:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
    dbbc:	f7f3 fc74 	bl	14a8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    dbc0:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
    dbc4:	4631      	mov	r1, r6
    dbc6:	4628      	mov	r0, r5
    dbc8:	f7ff f80d 	bl	cbe6 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    dbcc:	1c46      	adds	r6, r0, #1
    dbce:	f8b4 00dc 	ldrh.w	r0, [r4, #220]	; 0xdc
    dbd2:	1c41      	adds	r1, r0, #1
    dbd4:	290a      	cmp	r1, #10
    dbd6:	d202      	bcs.n	dbde <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x128>
    dbd8:	4430      	add	r0, r6
    dbda:	f8a4 00dc 	strh.w	r0, [r4, #220]	; 0xdc
    dbde:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
    dbe2:	b130      	cbz	r0, dbf2 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x13c>
    dbe4:	f8b4 00dc 	ldrh.w	r0, [r4, #220]	; 0xdc
    dbe8:	1c40      	adds	r0, r0, #1
    dbea:	280a      	cmp	r0, #10
    dbec:	d301      	bcc.n	dbf2 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x13c>
    dbee:	2002      	movs	r0, #2
    dbf0:	e000      	b.n	dbf4 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x13e>
    dbf2:	2003      	movs	r0, #3
    dbf4:	f884 00d6 	strb.w	r0, [r4, #214]	; 0xd6
    dbf8:	2100      	movs	r1, #0
    dbfa:	4620      	mov	r0, r4
    dbfc:	f000 f824 	bl	dc48 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x192>
    dc00:	b130      	cbz	r0, dc10 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x15a>
    dc02:	4620      	mov	r0, r4
    dc04:	f000 f811 	bl	dc2a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x174>
    dc08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    dc0c:	f7fb bf1e 	b.w	9a4c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    dc10:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
    dc14:	4629      	mov	r1, r5
    dc16:	f000 f861 	bl	dcdc <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x226>
    dc1a:	2800      	cmp	r0, #0
    dc1c:	d104      	bne.n	dc28 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x172>
    dc1e:	f240 61b6 	movw	r1, #1718	; 0x6b6
    dc22:	2030      	movs	r0, #48	; 0x30
    dc24:	f7f5 ffb6 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dc28:	bd70      	pop	{r4, r5, r6, pc}
    dc2a:	b510      	push	{r4, lr}
    dc2c:	4604      	mov	r4, r0
    dc2e:	f814 0fb4 	ldrb.w	r0, [r4, #180]!
    dc32:	f7f4 f9cb 	bl	1fcc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    dc36:	2000      	movs	r0, #0
    dc38:	7520      	strb	r0, [r4, #20]
    dc3a:	bd10      	pop	{r4, pc}
    dc3c:	b510      	push	{r4, lr}
    dc3e:	f7ff fcca 	bl	d5d6 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    dc42:	f200 1007 	addw	r0, r0, #263	; 0x107
    dc46:	bd10      	pop	{r4, pc}
    dc48:	b570      	push	{r4, r5, r6, lr}
    dc4a:	4604      	mov	r4, r0
    dc4c:	f890 00e4 	ldrb.w	r0, [r0, #228]	; 0xe4
    dc50:	460d      	mov	r5, r1
    dc52:	b108      	cbz	r0, dc58 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1a2>
    dc54:	2001      	movs	r0, #1
    dc56:	bd70      	pop	{r4, r5, r6, pc}
    dc58:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
    dc5c:	b1a8      	cbz	r0, dc8a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1d4>
    dc5e:	4620      	mov	r0, r4
    dc60:	f7ff fcb5 	bl	d5ce <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    dc64:	4405      	add	r5, r0
    dc66:	4620      	mov	r0, r4
    dc68:	f7ff ffe8 	bl	dc3c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x186>
    dc6c:	1941      	adds	r1, r0, r5
    dc6e:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
    dc72:	4288      	cmp	r0, r1
    dc74:	d206      	bcs.n	dc84 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1ce>
    dc76:	2001      	movs	r0, #1
    dc78:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
    dc7c:	4620      	mov	r0, r4
    dc7e:	f7ff fd36 	bl	d6ee <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    dc82:	e7e7      	b.n	dc54 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x19e>
    dc84:	1b40      	subs	r0, r0, r5
    dc86:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
    dc8a:	2000      	movs	r0, #0
    dc8c:	bd70      	pop	{r4, r5, r6, pc}
    dc8e:	b510      	push	{r4, lr}
    dc90:	4604      	mov	r4, r0
    dc92:	f890 0063 	ldrb.w	r0, [r0, #99]	; 0x63
    dc96:	f000 f94b 	bl	df30 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x47a>
    dc9a:	4602      	mov	r2, r0
    dc9c:	4620      	mov	r0, r4
    dc9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dca2:	f240 1117 	movw	r1, #279	; 0x117
    dca6:	f7ff bb88 	b.w	d3ba <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    dcaa:	b510      	push	{r4, lr}
    dcac:	f7fc fe8e 	bl	a9cc <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    dcb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dcb4:	f7f4 badc 	b.w	2270 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    dcb8:	b570      	push	{r4, r5, r6, lr}
    dcba:	460c      	mov	r4, r1
    dcbc:	4605      	mov	r5, r0
    dcbe:	f001 fa05 	bl	f0cc <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    dcc2:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    dcc6:	4408      	add	r0, r1
    dcc8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    dccc:	fbb0 f6f1 	udiv	r6, r0, r1
    dcd0:	4628      	mov	r0, r5
    dcd2:	f001 f9ed 	bl	f0b0 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    dcd6:	4430      	add	r0, r6
    dcd8:	4420      	add	r0, r4
    dcda:	bd70      	pop	{r4, r5, r6, pc}
    dcdc:	f7f3 bd44 	b.w	1768 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    dce0:	b510      	push	{r4, lr}
    dce2:	4604      	mov	r4, r0
    dce4:	f7ff fca4 	bl	d630 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    dce8:	b1a0      	cbz	r0, dd14 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x25e>
    dcea:	4620      	mov	r0, r4
    dcec:	f7ff fc98 	bl	d620 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    dcf0:	b918      	cbnz	r0, dcfa <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x244>
    dcf2:	4620      	mov	r0, r4
    dcf4:	f7ff fc9e 	bl	d634 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    dcf8:	b120      	cbz	r0, dd04 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x24e>
    dcfa:	2449      	movs	r4, #73	; 0x49
    dcfc:	f001 f9a4 	bl	f048 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>
    dd00:	b928      	cbnz	r0, dd0e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x258>
    dd02:	e001      	b.n	dd08 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x252>
    dd04:	2442      	movs	r4, #66	; 0x42
    dd06:	e7f9      	b.n	dcfc <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x246>
    dd08:	f001 f994 	bl	f034 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>
    dd0c:	b100      	cbz	r0, dd10 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x25a>
    dd0e:	1de4      	adds	r4, r4, #7
    dd10:	4620      	mov	r0, r4
    dd12:	bd10      	pop	{r4, pc}
    dd14:	206b      	movs	r0, #107	; 0x6b
    dd16:	bd10      	pop	{r4, pc}
    dd18:	b570      	push	{r4, r5, r6, lr}
    dd1a:	4604      	mov	r4, r0
    dd1c:	f890 00b5 	ldrb.w	r0, [r0, #181]	; 0xb5
    dd20:	2500      	movs	r5, #0
    dd22:	b118      	cbz	r0, dd2c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x276>
    dd24:	2001      	movs	r0, #1
    dd26:	f000 f88a 	bl	de3e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x388>
    dd2a:	4605      	mov	r5, r0
    dd2c:	4620      	mov	r0, r4
    dd2e:	f7ff fc4e 	bl	d5ce <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    dd32:	1941      	adds	r1, r0, r5
    dd34:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
    dd38:	34cc      	adds	r4, #204	; 0xcc
    dd3a:	f7f3 fbb5 	bl	14a8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    dd3e:	2600      	movs	r6, #0
    dd40:	60e0      	str	r0, [r4, #12]
    dd42:	f804 6b0b 	strb.w	r6, [r4], #11
    dd46:	2001      	movs	r0, #1
    dd48:	f804 0901 	strb.w	r0, [r4], #-1
    dd4c:	2003      	movs	r0, #3
    dd4e:	f804 09d6 	strb.w	r0, [r4], #-214
    dd52:	4620      	mov	r0, r4
    dd54:	f7ff ffc4 	bl	dce0 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x22a>
    dd58:	f8a4 00d4 	strh.w	r0, [r4, #212]	; 0xd4
    dd5c:	4629      	mov	r1, r5
    dd5e:	4620      	mov	r0, r4
    dd60:	f7ff ff72 	bl	dc48 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x192>
    dd64:	b930      	cbnz	r0, dd74 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2be>
    dd66:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
    dd6a:	f104 01cc 	add.w	r1, r4, #204	; 0xcc
    dd6e:	f7ff ffb5 	bl	dcdc <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x226>
    dd72:	b138      	cbz	r0, dd84 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2ce>
    dd74:	f8a4 60dc 	strh.w	r6, [r4, #220]	; 0xdc
    dd78:	f7ff ff97 	bl	dcaa <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1f4>
    dd7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    dd80:	f7fb be64 	b.w	9a4c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    dd84:	f240 7104 	movw	r1, #1796	; 0x704
    dd88:	2030      	movs	r0, #48	; 0x30
    dd8a:	f7f5 ff03 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dd8e:	b510      	push	{r4, lr}
    dd90:	4604      	mov	r4, r0
    dd92:	2000      	movs	r0, #0
    dd94:	f884 012c 	strb.w	r0, [r4, #300]	; 0x12c
    dd98:	f894 0160 	ldrb.w	r0, [r4, #352]	; 0x160
    dd9c:	f7f4 f916 	bl	1fcc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    dda0:	2020      	movs	r0, #32
    dda2:	f884 0160 	strb.w	r0, [r4, #352]	; 0x160
    dda6:	bd10      	pop	{r4, pc}
    dda8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ddac:	2500      	movs	r5, #0
    ddae:	f880 50bc 	strb.w	r5, [r0, #188]	; 0xbc
    ddb2:	f8d0 60d8 	ldr.w	r6, [r0, #216]	; 0xd8
    ddb6:	4688      	mov	r8, r1
    ddb8:	4604      	mov	r4, r0
    ddba:	f880 50c8 	strb.w	r5, [r0, #200]	; 0xc8
    ddbe:	2701      	movs	r7, #1
    ddc0:	f880 70c9 	strb.w	r7, [r0, #201]	; 0xc9
    ddc4:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
    ddc8:	4639      	mov	r1, r7
    ddca:	34b4      	adds	r4, #180	; 0xb4
    ddcc:	f7f7 fdf4 	bl	59b8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    ddd0:	6860      	ldr	r0, [r4, #4]
    ddd2:	f8c0 6154 	str.w	r6, [r0, #340]	; 0x154
    ddd6:	6861      	ldr	r1, [r4, #4]
    ddd8:	7820      	ldrb	r0, [r4, #0]
    ddda:	f881 0160 	strb.w	r0, [r1, #352]	; 0x160
    ddde:	6861      	ldr	r1, [r4, #4]
    dde0:	f8c1 8164 	str.w	r8, [r1, #356]	; 0x164
    dde4:	6860      	ldr	r0, [r4, #4]
    dde6:	f8c0 6158 	str.w	r6, [r0, #344]	; 0x158
    ddea:	6864      	ldr	r4, [r4, #4]
    ddec:	f884 512c 	strb.w	r5, [r4, #300]	; 0x12c
    ddf0:	2300      	movs	r3, #0
    ddf2:	f8a4 515c 	strh.w	r5, [r4, #348]	; 0x15c
    ddf6:	461a      	mov	r2, r3
    ddf8:	4619      	mov	r1, r3
    ddfa:	4620      	mov	r0, r4
    ddfc:	9500      	str	r5, [sp, #0]
    ddfe:	f7f9 fa9d 	bl	733c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x314>
    de02:	b120      	cbz	r0, de0e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x358>
    de04:	f240 212b 	movw	r1, #555	; 0x22b
    de08:	2030      	movs	r0, #48	; 0x30
    de0a:	f7f5 fec3 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    de0e:	f8c4 5128 	str.w	r5, [r4, #296]	; 0x128
    de12:	f8c4 5120 	str.w	r5, [r4, #288]	; 0x120
    de16:	f884 712c 	strb.w	r7, [r4, #300]	; 0x12c
    de1a:	f8a4 513e 	strh.w	r5, [r4, #318]	; 0x13e
    de1e:	f8a4 513c 	strh.w	r5, [r4, #316]	; 0x13c
    de22:	f884 5141 	strb.w	r5, [r4, #321]	; 0x141
    de26:	f834 0f6c 	ldrh.w	r0, [r4, #108]!
    de2a:	1e40      	subs	r0, r0, #1
    de2c:	f824 0bbc 	strh.w	r0, [r4], #188
    de30:	86e5      	strh	r5, [r4, #54]	; 0x36
    de32:	f7ff ff3a 	bl	dcaa <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1f4>
    de36:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    de3a:	f7fb be07 	b.w	9a4c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    de3e:	b508      	push	{r3, lr}
    de40:	2800      	cmp	r0, #0
    de42:	f04f 0101 	mov.w	r1, #1
    de46:	4668      	mov	r0, sp
    de48:	d002      	beq.n	de50 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x39a>
    de4a:	f7f5 ff3b 	bl	3cc4 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    de4e:	e001      	b.n	de54 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x39e>
    de50:	f7f5 ff46 	bl	3ce0 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>
    de54:	f89d 0000 	ldrb.w	r0, [sp]
    de58:	f242 7110 	movw	r1, #10000	; 0x2710
    de5c:	0200      	lsls	r0, r0, #8
    de5e:	fbb0 f2f1 	udiv	r2, r0, r1
    de62:	fb01 0012 	mls	r0, r1, r2, r0
    de66:	bd08      	pop	{r3, pc}
    de68:	b510      	push	{r4, lr}
    de6a:	0004      	movs	r4, r0
    de6c:	d008      	beq.n	de80 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x3ca>
    de6e:	2909      	cmp	r1, #9
    de70:	d25c      	bcs.n	df2c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x476>
    de72:	e8df f001 	tbb	[pc, r1]
    de76:	3607      	.short	0x3607
    de78:	5b3a3e3e 	.word	0x5b3a3e3e
    de7c:	00574a43 	.word	0x00574a43
    de80:	219e      	movs	r1, #158	; 0x9e
    de82:	e050      	b.n	df26 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x470>
    de84:	2100      	movs	r1, #0
    de86:	f8c4 1168 	str.w	r1, [r4, #360]	; 0x168
    de8a:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
    de8e:	4620      	mov	r0, r4
    de90:	b189      	cbz	r1, deb6 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x400>
    de92:	f8b0 213e 	ldrh.w	r2, [r0, #318]	; 0x13e
    de96:	f8b0 106c 	ldrh.w	r1, [r0, #108]	; 0x6c
    de9a:	428a      	cmp	r2, r1
    de9c:	d106      	bne.n	deac <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x3f6>
    de9e:	f8b0 20f4 	ldrh.w	r2, [r0, #244]	; 0xf4
    dea2:	1a51      	subs	r1, r2, r1
    dea4:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
    dea8:	4611      	mov	r1, r2
    deaa:	e00d      	b.n	dec8 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x412>
    deac:	1a51      	subs	r1, r2, r1
    deae:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
    deb2:	b291      	uxth	r1, r2
    deb4:	e008      	b.n	dec8 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x412>
    deb6:	f8b0 113c 	ldrh.w	r1, [r0, #316]	; 0x13c
    deba:	f8b0 206c 	ldrh.w	r2, [r0, #108]	; 0x6c
    debe:	1a89      	subs	r1, r1, r2
    dec0:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
    dec4:	f8b0 113c 	ldrh.w	r1, [r0, #316]	; 0x13c
    dec8:	f8a0 106c 	strh.w	r1, [r0, #108]	; 0x6c
    decc:	f8d0 1150 	ldr.w	r1, [r0, #336]	; 0x150
    ded0:	f8c0 1154 	str.w	r1, [r0, #340]	; 0x154
    ded4:	f7f9 ff38 	bl	7d48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>
    ded8:	4620      	mov	r0, r4
    deda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dede:	f7f9 bc9d 	b.w	781c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7f4>
    dee2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dee6:	f000 b879 	b.w	dfdc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>
    deea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    deee:	f7fc bf2f 	b.w	ad50 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    def2:	4620      	mov	r0, r4
    def4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    def8:	f7f9 bcc6 	b.w	7888 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x860>
    defc:	2001      	movs	r0, #1
    defe:	f7f3 fa01 	bl	1304 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    df02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    df06:	f7fe bd15 	b.w	c934 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
    df0a:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    df0e:	2804      	cmp	r0, #4
    df10:	d001      	beq.n	df16 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x460>
    df12:	21c0      	movs	r1, #192	; 0xc0
    df14:	e007      	b.n	df26 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x470>
    df16:	4620      	mov	r0, r4
    df18:	f7ff ff39 	bl	dd8e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2d8>
    df1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    df20:	f7fb bd94 	b.w	9a4c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    df24:	21c9      	movs	r1, #201	; 0xc9
    df26:	2030      	movs	r0, #48	; 0x30
    df28:	f7f5 fe34 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    df2c:	21cd      	movs	r1, #205	; 0xcd
    df2e:	e7fa      	b.n	df26 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x470>
    df30:	b510      	push	{r4, lr}
    df32:	f001 f8cb 	bl	f0cc <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    df36:	f64d 7141 	movw	r1, #57153	; 0xdf41
    df3a:	4408      	add	r0, r1
    df3c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    df40:	fbb0 f0f1 	udiv	r0, r0, r1
    df44:	f500 70ba 	add.w	r0, r0, #372	; 0x174
    df48:	bd10      	pop	{r4, pc}
    df4a:	01f4      	.short	0x01f4
    df4c:	009600fa 	.word	0x009600fa
    df50:	004b0064 	.word	0x004b0064
    df54:	001e0032 	.word	0x001e0032
    df58:	000a0014 	.word	0x000a0014
    df5c:	00020005 	.word	0x00020005
    df60:	0001      	.short	0x0001
    df62:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    df66:	f001 0307 	and.w	r3, r1, #7
    df6a:	7802      	ldrb	r2, [r0, #0]
    df6c:	2101      	movs	r1, #1
    df6e:	4099      	lsls	r1, r3
    df70:	438a      	bics	r2, r1
    df72:	7002      	strb	r2, [r0, #0]
    df74:	4770      	bx	lr

0000df76 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>:
    df76:	b510      	push	{r4, lr}
    df78:	4604      	mov	r4, r0
    df7a:	f8d0 0194 	ldr.w	r0, [r0, #404]	; 0x194
    df7e:	6861      	ldr	r1, [r4, #4]
    df80:	4288      	cmp	r0, r1
    df82:	d109      	bne.n	df98 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    df84:	f8b4 1198 	ldrh.w	r1, [r4, #408]	; 0x198
    df88:	8922      	ldrh	r2, [r4, #8]
    df8a:	4291      	cmp	r1, r2
    df8c:	d104      	bne.n	df98 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    df8e:	f8b4 119a 	ldrh.w	r1, [r4, #410]	; 0x19a
    df92:	8962      	ldrh	r2, [r4, #10]
    df94:	4291      	cmp	r1, r2
    df96:	d013      	beq.n	dfc0 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x4a>
    df98:	8821      	ldrh	r1, [r4, #0]
    df9a:	f8a4 11b4 	strh.w	r1, [r4, #436]	; 0x1b4
    df9e:	f7fe fd50 	bl	ca42 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    dfa2:	f8a4 01b6 	strh.w	r0, [r4, #438]	; 0x1b6
    dfa6:	f8b4 0198 	ldrh.w	r0, [r4, #408]	; 0x198
    dfaa:	f8a4 01b8 	strh.w	r0, [r4, #440]	; 0x1b8
    dfae:	f8b4 019a 	ldrh.w	r0, [r4, #410]	; 0x19a
    dfb2:	f8a4 01ba 	strh.w	r0, [r4, #442]	; 0x1ba
    dfb6:	2001      	movs	r0, #1
    dfb8:	f884 01b0 	strb.w	r0, [r4, #432]	; 0x1b0
    dfbc:	f7fb fd46 	bl	9a4c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    dfc0:	2102      	movs	r1, #2
    dfc2:	4620      	mov	r0, r4
    dfc4:	f7f7 fcf8 	bl	59b8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    dfc8:	2000      	movs	r0, #0
    dfca:	f804 0f76 	strb.w	r0, [r4, #118]!
    dfce:	2003      	movs	r0, #3
    dfd0:	70e0      	strb	r0, [r4, #3]
    dfd2:	bd10      	pop	{r4, pc}

0000dfd4 <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
    dfd4:	f7f6 b99e 	b.w	4314 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0000dfd8 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>:
    dfd8:	2000      	movs	r0, #0
    dfda:	4770      	bx	lr

0000dfdc <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>:
    dfdc:	f7f6 be6c 	b.w	4cb8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>

0000dfe0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>:
    dfe0:	2100      	movs	r1, #0
    dfe2:	f880 1075 	strb.w	r1, [r0, #117]	; 0x75
    dfe6:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
    dfea:	f880 1079 	strb.w	r1, [r0, #121]	; 0x79
    dfee:	f890 10fb 	ldrb.w	r1, [r0, #251]	; 0xfb
    dff2:	b109      	cbz	r1, dff8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x18>
    dff4:	2102      	movs	r1, #2
    dff6:	e000      	b.n	dffa <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a>
    dff8:	2103      	movs	r1, #3
    dffa:	f7f9 b815 	b.w	7028 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    dffe:	f890 007c 	ldrb.w	r0, [r0, #124]	; 0x7c
    e002:	28fe      	cmp	r0, #254	; 0xfe
    e004:	d001      	beq.n	e00a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2a>
    e006:	2001      	movs	r0, #1
    e008:	4770      	bx	lr
    e00a:	2000      	movs	r0, #0
    e00c:	4770      	bx	lr
    e00e:	b510      	push	{r4, lr}
    e010:	2801      	cmp	r0, #1
    e012:	d006      	beq.n	e022 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    e014:	2802      	cmp	r0, #2
    e016:	d004      	beq.n	e022 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    e018:	f240 2173 	movw	r1, #627	; 0x273
    e01c:	2006      	movs	r0, #6
    e01e:	f7f5 fdb9 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e022:	bd10      	pop	{r4, pc}
    e024:	2801      	cmp	r0, #1
    e026:	d002      	beq.n	e02e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x4e>
    e028:	2802      	cmp	r0, #2
    e02a:	d105      	bne.n	e038 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    e02c:	e002      	b.n	e034 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x54>
    e02e:	2901      	cmp	r1, #1
    e030:	d004      	beq.n	e03c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    e032:	e001      	b.n	e038 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    e034:	2902      	cmp	r1, #2
    e036:	d001      	beq.n	e03c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    e038:	2000      	movs	r0, #0
    e03a:	4770      	bx	lr
    e03c:	2001      	movs	r0, #1
    e03e:	4770      	bx	lr
    e040:	1a40      	subs	r0, r0, r1
    e042:	b200      	sxth	r0, r0
    e044:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    e048:	4288      	cmp	r0, r1
    e04a:	dc01      	bgt.n	e050 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x70>
    e04c:	2800      	cmp	r0, #0
    e04e:	dc01      	bgt.n	e054 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x74>
    e050:	2001      	movs	r0, #1
    e052:	4770      	bx	lr
    e054:	2000      	movs	r0, #0
    e056:	4770      	bx	lr
    e058:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    e05c:	f001 0107 	and.w	r1, r1, #7
    e060:	7800      	ldrb	r0, [r0, #0]
    e062:	2201      	movs	r2, #1
    e064:	408a      	lsls	r2, r1
    e066:	4010      	ands	r0, r2
    e068:	40c8      	lsrs	r0, r1
    e06a:	4770      	bx	lr
    e06c:	b118      	cbz	r0, e076 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x96>
    e06e:	2802      	cmp	r0, #2
    e070:	d001      	beq.n	e076 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x96>
    e072:	2001      	movs	r0, #1
    e074:	4770      	bx	lr
    e076:	2000      	movs	r0, #0
    e078:	4770      	bx	lr

0000e07a <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
    e07a:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    e07e:	7881      	ldrb	r1, [r0, #2]
    e080:	4604      	mov	r4, r0
    e082:	291a      	cmp	r1, #26
    e084:	d025      	beq.n	e0d2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x58>
    e086:	dc0e      	bgt.n	e0a6 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2c>
    e088:	2916      	cmp	r1, #22
    e08a:	d22e      	bcs.n	e0ea <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    e08c:	e8df f001 	tbb	[pc, r1]
    e090:	2d2d2d2d 	.word	0x2d2d2d2d
    e094:	2d2d212d 	.word	0x2d2d212d
    e098:	2d2d2d2d 	.word	0x2d2d2d2d
    e09c:	2d2d2d2d 	.word	0x2d2d2d2d
    e0a0:	212d2d2d 	.word	0x212d2d2d
    e0a4:	2121      	.short	0x2121
    e0a6:	292a      	cmp	r1, #42	; 0x2a
    e0a8:	d01f      	beq.n	e0ea <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    e0aa:	dc0b      	bgt.n	e0c4 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x4a>
    e0ac:	f1a1 011e 	sub.w	r1, r1, #30
    e0b0:	290c      	cmp	r1, #12
    e0b2:	d21a      	bcs.n	e0ea <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    e0b4:	e8df f001 	tbb	[pc, r1]
    e0b8:	19191919 	.word	0x19191919
    e0bc:	19191919 	.word	0x19191919
    e0c0:	0d191919 	.word	0x0d191919
    e0c4:	393a      	subs	r1, #58	; 0x3a
    e0c6:	2904      	cmp	r1, #4
    e0c8:	d20f      	bcs.n	e0ea <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    e0ca:	e8df f001 	tbb	[pc, r1]
    e0ce:	020e      	.short	0x020e
    e0d0:	020e      	.short	0x020e
    e0d2:	8820      	ldrh	r0, [r4, #0]
    e0d4:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
    e0d8:	d207      	bcs.n	e0ea <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    e0da:	2701      	movs	r7, #1
    e0dc:	4669      	mov	r1, sp
    e0de:	f7fe fc9f 	bl	ca20 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    e0e2:	b120      	cbz	r0, e0ee <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x74>
    e0e4:	2002      	movs	r0, #2
    e0e6:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    e0ea:	2012      	movs	r0, #18
    e0ec:	e7fb      	b.n	e0e6 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    e0ee:	9d01      	ldr	r5, [sp, #4]
    e0f0:	4668      	mov	r0, sp
    e0f2:	462e      	mov	r6, r5
    e0f4:	f505 75b8 	add.w	r5, r5, #368	; 0x170
    e0f8:	f206 1671 	addw	r6, r6, #369	; 0x171
    e0fc:	f000 fe66 	bl	edcc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x32e>
    e100:	b108      	cbz	r0, e106 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x8c>
    e102:	7828      	ldrb	r0, [r5, #0]
    e104:	b108      	cbz	r0, e10a <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x90>
    e106:	200c      	movs	r0, #12
    e108:	e7ed      	b.n	e0e6 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    e10a:	702f      	strb	r7, [r5, #0]
    e10c:	78a0      	ldrb	r0, [r4, #2]
    e10e:	7030      	strb	r0, [r6, #0]
    e110:	4668      	mov	r0, sp
    e112:	f7ff f83e 	bl	d192 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    e116:	2000      	movs	r0, #0
    e118:	e7e5      	b.n	e0e6 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>

0000e11a <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>:
    e11a:	b510      	push	{r4, lr}
    e11c:	4604      	mov	r4, r0
    e11e:	7800      	ldrb	r0, [r0, #0]
    e120:	b118      	cbz	r0, e12a <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    e122:	2801      	cmp	r0, #1
    e124:	d001      	beq.n	e12a <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    e126:	2012      	movs	r0, #18
    e128:	bd10      	pop	{r4, pc}
    e12a:	f000 fe03 	bl	ed34 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x296>
    e12e:	b120      	cbz	r0, e13a <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    e130:	f7f7 f9fc 	bl	552c <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    e134:	b108      	cbz	r0, e13a <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    e136:	200c      	movs	r0, #12
    e138:	bd10      	pop	{r4, pc}
    e13a:	7820      	ldrb	r0, [r4, #0]
    e13c:	f7ff ff96 	bl	e06c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    e140:	1de2      	adds	r2, r4, #7
    e142:	f104 0317 	add.w	r3, r4, #23
    e146:	1c61      	adds	r1, r4, #1
    e148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e14c:	f7f7 ba20 	b.w	5590 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>

0000e150 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    e150:	b510      	push	{r4, lr}
    e152:	4604      	mov	r4, r0
    e154:	f000 fecb 	bl	eeee <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x450>
    e158:	b108      	cbz	r0, e15e <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    e15a:	200c      	movs	r0, #12
    e15c:	bd10      	pop	{r4, pc}
    e15e:	7820      	ldrb	r0, [r4, #0]
    e160:	b118      	cbz	r0, e16a <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    e162:	2801      	cmp	r0, #1
    e164:	d001      	beq.n	e16a <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    e166:	2012      	movs	r0, #18
    e168:	bd10      	pop	{r4, pc}
    e16a:	f7ff ff7f 	bl	e06c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    e16e:	1c61      	adds	r1, r4, #1
    e170:	f7f7 fa86 	bl	5680 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
    e174:	b108      	cbz	r0, e17a <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    e176:	2000      	movs	r0, #0
    e178:	bd10      	pop	{r4, pc}
    e17a:	2007      	movs	r0, #7
    e17c:	bd10      	pop	{r4, pc}

0000e17e <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>:
    e17e:	b510      	push	{r4, lr}
    e180:	f000 fdd8 	bl	ed34 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x296>
    e184:	b120      	cbz	r0, e190 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    e186:	f7f7 f9d1 	bl	552c <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    e18a:	b108      	cbz	r0, e190 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    e18c:	200c      	movs	r0, #12
    e18e:	bd10      	pop	{r4, pc}
    e190:	f7f7 fa44 	bl	561c <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>
    e194:	2000      	movs	r0, #0
    e196:	bd10      	pop	{r4, pc}

0000e198 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    e198:	b510      	push	{r4, lr}
    e19a:	f000 fea8 	bl	eeee <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x450>
    e19e:	b108      	cbz	r0, e1a4 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    e1a0:	200c      	movs	r0, #12
    e1a2:	bd10      	pop	{r4, pc}
    e1a4:	f7f7 fa94 	bl	56d0 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
    e1a8:	2000      	movs	r0, #0
    e1aa:	bd10      	pop	{r4, pc}

0000e1ac <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    e1ac:	b510      	push	{r4, lr}
    e1ae:	460b      	mov	r3, r1
    e1b0:	2201      	movs	r2, #1
    e1b2:	f100 0110 	add.w	r1, r0, #16
    e1b6:	f7fe fc15 	bl	c9e4 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    e1ba:	2000      	movs	r0, #0
    e1bc:	bd10      	pop	{r4, pc}

0000e1be <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
    e1be:	b510      	push	{r4, lr}
    e1c0:	8800      	ldrh	r0, [r0, #0]
    e1c2:	2100      	movs	r1, #0
    e1c4:	f7fe faf3 	bl	c7ae <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e1c8:	b118      	cbz	r0, e1d2 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
    e1ca:	f890 1173 	ldrb.w	r1, [r0, #371]	; 0x173
    e1ce:	b111      	cbz	r1, e1d6 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
    e1d0:	e007      	b.n	e1e2 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
    e1d2:	2002      	movs	r0, #2
    e1d4:	bd10      	pop	{r4, pc}
    e1d6:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    e1da:	2914      	cmp	r1, #20
    e1dc:	d003      	beq.n	e1e6 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    e1de:	2915      	cmp	r1, #21
    e1e0:	d001      	beq.n	e1e6 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    e1e2:	200c      	movs	r0, #12
    e1e4:	bd10      	pop	{r4, pc}
    e1e6:	2102      	movs	r1, #2
    e1e8:	f880 1173 	strb.w	r1, [r0, #371]	; 0x173
    e1ec:	2000      	movs	r0, #0
    e1ee:	bd10      	pop	{r4, pc}

0000e1f0 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>:
    e1f0:	b538      	push	{r3, r4, r5, lr}
    e1f2:	4605      	mov	r5, r0
    e1f4:	8800      	ldrh	r0, [r0, #0]
    e1f6:	2100      	movs	r1, #0
    e1f8:	f7fe fad9 	bl	c7ae <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e1fc:	0004      	movs	r4, r0
    e1fe:	d003      	beq.n	e208 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x18>
    e200:	f894 0173 	ldrb.w	r0, [r4, #371]	; 0x173
    e204:	b110      	cbz	r0, e20c <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x1c>
    e206:	e010      	b.n	e22a <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3a>
    e208:	2002      	movs	r0, #2
    e20a:	bd38      	pop	{r3, r4, r5, pc}
    e20c:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
    e210:	2814      	cmp	r0, #20
    e212:	d001      	beq.n	e218 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x28>
    e214:	2815      	cmp	r0, #21
    e216:	d108      	bne.n	e22a <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3a>
    e218:	f894 01c4 	ldrb.w	r0, [r4, #452]	; 0x1c4
    e21c:	f88d 0000 	strb.w	r0, [sp]
    e220:	9800      	ldr	r0, [sp, #0]
    e222:	9000      	str	r0, [sp, #0]
    e224:	f89d 0000 	ldrb.w	r0, [sp]
    e228:	b108      	cbz	r0, e22e <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3e>
    e22a:	200c      	movs	r0, #12
    e22c:	bd38      	pop	{r3, r4, r5, pc}
    e22e:	2210      	movs	r2, #16
    e230:	1ca9      	adds	r1, r5, #2
    e232:	f504 70ba 	add.w	r0, r4, #372	; 0x174
    e236:	f7fd fac2 	bl	b7be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e23a:	2001      	movs	r0, #1
    e23c:	f884 0173 	strb.w	r0, [r4, #371]	; 0x173
    e240:	2000      	movs	r0, #0
    e242:	bd38      	pop	{r3, r4, r5, pc}

0000e244 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    e244:	b510      	push	{r4, lr}
    e246:	2108      	movs	r1, #8
    e248:	f7f5 fd58 	bl	3cfc <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    e24c:	2000      	movs	r0, #0
    e24e:	bd10      	pop	{r4, pc}

0000e250 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
    e250:	b510      	push	{r4, lr}
    e252:	4604      	mov	r4, r0
    e254:	f000 fdd1 	bl	edfa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x35c>
    e258:	f7ff f9f0 	bl	d63c <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    e25c:	7020      	strb	r0, [r4, #0]
    e25e:	2000      	movs	r0, #0
    e260:	bd10      	pop	{r4, pc}

0000e262 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
    e262:	b510      	push	{r4, lr}
    e264:	4604      	mov	r4, r0
    e266:	f000 fdab 	bl	edc0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x322>
    e26a:	b140      	cbz	r0, e27e <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A+0x1c>
    e26c:	20fb      	movs	r0, #251	; 0xfb
    e26e:	8020      	strh	r0, [r4, #0]
    e270:	f640 0148 	movw	r1, #2120	; 0x848
    e274:	8061      	strh	r1, [r4, #2]
    e276:	80a0      	strh	r0, [r4, #4]
    e278:	80e1      	strh	r1, [r4, #6]
    e27a:	2000      	movs	r0, #0
    e27c:	bd10      	pop	{r4, pc}
    e27e:	2001      	movs	r0, #1
    e280:	bd10      	pop	{r4, pc}

0000e282 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>:
    e282:	2108      	movs	r1, #8
    e284:	7001      	strb	r1, [r0, #0]
    e286:	2000      	movs	r0, #0
    e288:	4770      	bx	lr

0000e28a <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    e28a:	b510      	push	{r4, lr}
    e28c:	4604      	mov	r4, r0
    e28e:	20d8      	movs	r0, #216	; 0xd8
    e290:	7020      	strb	r0, [r4, #0]
    e292:	f000 fd76 	bl	ed82 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2e4>
    e296:	7060      	strb	r0, [r4, #1]
    e298:	2000      	movs	r0, #0
    e29a:	bd10      	pop	{r4, pc}

0000e29c <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    e29c:	2108      	movs	r1, #8
    e29e:	7001      	strb	r1, [r0, #0]
    e2a0:	2000      	movs	r0, #0
    e2a2:	4770      	bx	lr

0000e2a4 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>:
    e2a4:	b510      	push	{r4, lr}
    e2a6:	4604      	mov	r4, r0
    e2a8:	7800      	ldrb	r0, [r0, #0]
    e2aa:	b108      	cbz	r0, e2b0 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0xc>
    e2ac:	2801      	cmp	r0, #1
    e2ae:	d110      	bne.n	e2d2 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    e2b0:	f000 fd40 	bl	ed34 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x296>
    e2b4:	b120      	cbz	r0, e2c0 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    e2b6:	f7f7 f939 	bl	552c <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    e2ba:	b108      	cbz	r0, e2c0 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    e2bc:	200c      	movs	r0, #12
    e2be:	bd10      	pop	{r4, pc}
    e2c0:	7820      	ldrb	r0, [r4, #0]
    e2c2:	f7ff fed3 	bl	e06c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    e2c6:	1c61      	adds	r1, r4, #1
    e2c8:	f7fe fb72 	bl	c9b0 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>
    e2cc:	b108      	cbz	r0, e2d2 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    e2ce:	2000      	movs	r0, #0
    e2d0:	bd10      	pop	{r4, pc}
    e2d2:	2012      	movs	r0, #18
    e2d4:	bd10      	pop	{r4, pc}

0000e2d6 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    e2d6:	b510      	push	{r4, lr}
    e2d8:	4604      	mov	r4, r0
    e2da:	f000 fe08 	bl	eeee <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x450>
    e2de:	b108      	cbz	r0, e2e4 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    e2e0:	200c      	movs	r0, #12
    e2e2:	bd10      	pop	{r4, pc}
    e2e4:	7820      	ldrb	r0, [r4, #0]
    e2e6:	b108      	cbz	r0, e2ec <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    e2e8:	2801      	cmp	r0, #1
    e2ea:	d107      	bne.n	e2fc <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    e2ec:	f7ff febe 	bl	e06c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    e2f0:	1c61      	adds	r1, r4, #1
    e2f2:	f7fe fb6c 	bl	c9ce <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
    e2f6:	b108      	cbz	r0, e2fc <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    e2f8:	2000      	movs	r0, #0
    e2fa:	bd10      	pop	{r4, pc}
    e2fc:	2012      	movs	r0, #18
    e2fe:	bd10      	pop	{r4, pc}

0000e300 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>:
    e300:	b510      	push	{r4, lr}
    e302:	4604      	mov	r4, r0
    e304:	f000 fd16 	bl	ed34 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x296>
    e308:	b108      	cbz	r0, e30e <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0xe>
    e30a:	200c      	movs	r0, #12
    e30c:	bd10      	pop	{r4, pc}
    e30e:	7820      	ldrb	r0, [r4, #0]
    e310:	f000 0001 	and.w	r0, r0, #1
    e314:	f7f7 f904 	bl	5520 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>
    e318:	2000      	movs	r0, #0
    e31a:	bd10      	pop	{r4, pc}

0000e31c <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
    e31c:	b570      	push	{r4, r5, r6, lr}
    e31e:	b086      	sub	sp, #24
    e320:	4605      	mov	r5, r0
    e322:	f000 fd6a 	bl	edfa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x35c>
    e326:	4604      	mov	r4, r0
    e328:	4669      	mov	r1, sp
    e32a:	f7ff f99f 	bl	d66c <sym_RNI25VYXYFKWFPBZMEWKYU7T2AE36PDSHGXVMJI>
    e32e:	b118      	cbz	r0, e338 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I+0x1c>
    e330:	4669      	mov	r1, sp
    e332:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    e334:	f7fe fa81 	bl	c83a <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA>
    e338:	2200      	movs	r2, #0
    e33a:	a804      	add	r0, sp, #16
    e33c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    e33e:	f7f6 f88b 	bl	4458 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    e342:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    e346:	e9cd 0100 	strd	r0, r1, [sp]
    e34a:	b168      	cbz	r0, e368 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I+0x4c>
    e34c:	7829      	ldrb	r1, [r5, #0]
    e34e:	466a      	mov	r2, sp
    e350:	1c68      	adds	r0, r5, #1
    e352:	f000 fbf5 	bl	eb40 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xa2>
    e356:	0006      	movs	r6, r0
    e358:	d00c      	beq.n	e374 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I+0x58>
    e35a:	4669      	mov	r1, sp
    e35c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    e35e:	f7fe fa6c 	bl	c83a <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA>
    e362:	4630      	mov	r0, r6
    e364:	b006      	add	sp, #24
    e366:	bd70      	pop	{r4, r5, r6, pc}
    e368:	4669      	mov	r1, sp
    e36a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    e36c:	f7fe fa65 	bl	c83a <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA>
    e370:	2007      	movs	r0, #7
    e372:	e7f7      	b.n	e364 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I+0x48>
    e374:	4669      	mov	r1, sp
    e376:	4620      	mov	r0, r4
    e378:	f7ff f98f 	bl	d69a <sym_DZ4VHVOVANVDVX7ECCNFNRACUFPY2WIUPGGZ27Y>
    e37c:	9800      	ldr	r0, [sp, #0]
    e37e:	9003      	str	r0, [sp, #12]
    e380:	7828      	ldrb	r0, [r5, #0]
    e382:	f8ad 000a 	strh.w	r0, [sp, #10]
    e386:	2000      	movs	r0, #0
    e388:	f88d 0008 	strb.w	r0, [sp, #8]
    e38c:	a802      	add	r0, sp, #8
    e38e:	f000 fa35 	bl	e7fc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
    e392:	e7e7      	b.n	e364 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I+0x48>

0000e394 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
    e394:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    e396:	4605      	mov	r5, r0
    e398:	f000 fd2f 	bl	edfa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x35c>
    e39c:	4606      	mov	r6, r0
    e39e:	7828      	ldrb	r0, [r5, #0]
    e3a0:	2400      	movs	r4, #0
    e3a2:	b160      	cbz	r0, e3be <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    e3a4:	f88d 4000 	strb.w	r4, [sp]
    e3a8:	2001      	movs	r0, #1
    e3aa:	f10d 0101 	add.w	r1, sp, #1
    e3ae:	f7f6 fab3 	bl	4918 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    e3b2:	b120      	cbz	r0, e3be <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    e3b4:	4668      	mov	r0, sp
    e3b6:	f000 f894 	bl	e4e2 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>
    e3ba:	2800      	cmp	r0, #0
    e3bc:	d112      	bne.n	e3e4 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    e3be:	f88d 400c 	strb.w	r4, [sp, #12]
    e3c2:	4630      	mov	r0, r6
    e3c4:	f7ff f930 	bl	d628 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    e3c8:	b118      	cbz	r0, e3d2 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x3e>
    e3ca:	2080      	movs	r0, #128	; 0x80
    e3cc:	f8ad 000d 	strh.w	r0, [sp, #13]
    e3d0:	e001      	b.n	e3d6 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x42>
    e3d2:	f8ad 400d 	strh.w	r4, [sp, #13]
    e3d6:	f88d 400f 	strb.w	r4, [sp, #15]
    e3da:	7828      	ldrb	r0, [r5, #0]
    e3dc:	2801      	cmp	r0, #1
    e3de:	d003      	beq.n	e3e8 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x54>
    e3e0:	b138      	cbz	r0, e3f2 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x5e>
    e3e2:	2012      	movs	r0, #18
    e3e4:	b004      	add	sp, #16
    e3e6:	bd70      	pop	{r4, r5, r6, pc}
    e3e8:	a903      	add	r1, sp, #12
    e3ea:	4630      	mov	r0, r6
    e3ec:	f7fb fcd8 	bl	9da0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
    e3f0:	e7f8      	b.n	e3e4 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    e3f2:	4630      	mov	r0, r6
    e3f4:	f000 fd19 	bl	ee2a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x38c>
    e3f8:	e7f4      	b.n	e3e4 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>

0000e3fa <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
    e3fa:	b530      	push	{r4, r5, lr}
    e3fc:	b08b      	sub	sp, #44	; 0x2c
    e3fe:	4604      	mov	r4, r0
    e400:	f000 fcfb 	bl	edfa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x35c>
    e404:	4602      	mov	r2, r0
    e406:	8860      	ldrh	r0, [r4, #2]
    e408:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    e40c:	d902      	bls.n	e414 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1a>
    e40e:	2012      	movs	r0, #18
    e410:	b00b      	add	sp, #44	; 0x2c
    e412:	bd30      	pop	{r4, r5, pc}
    e414:	2500      	movs	r5, #0
    e416:	f88d 5004 	strb.w	r5, [sp, #4]
    e41a:	7921      	ldrb	r1, [r4, #4]
    e41c:	9500      	str	r5, [sp, #0]
    e41e:	f89d 0000 	ldrb.w	r0, [sp]
    e422:	2905      	cmp	r1, #5
    e424:	f040 0010 	orr.w	r0, r0, #16
    e428:	f88d 0000 	strb.w	r0, [sp]
    e42c:	d254      	bcs.n	e4d8 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xde>
    e42e:	e8df f001 	tbb	[pc, r1]
    e432:	0803      	.short	0x0803
    e434:	000b1105 	.word	0x000b1105
    e438:	f040 0001 	orr.w	r0, r0, #1
    e43c:	f040 0002 	orr.w	r0, r0, #2
    e440:	e006      	b.n	e450 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x56>
    e442:	f040 0009 	orr.w	r0, r0, #9
    e446:	e001      	b.n	e44c <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x52>
    e448:	f040 0001 	orr.w	r0, r0, #1
    e44c:	f040 0004 	orr.w	r0, r0, #4
    e450:	f88d 0000 	strb.w	r0, [sp]
    e454:	f8bd 0000 	ldrh.w	r0, [sp]
    e458:	9000      	str	r0, [sp, #0]
    e45a:	f8bd 0000 	ldrh.w	r0, [sp]
    e45e:	f8ad 0005 	strh.w	r0, [sp, #5]
    e462:	8821      	ldrh	r1, [r4, #0]
    e464:	f8dd 0006 	ldr.w	r0, [sp, #6]
    e468:	f361 201f 	bfi	r0, r1, #8, #24
    e46c:	f8cd 0006 	str.w	r0, [sp, #6]
    e470:	8861      	ldrh	r1, [r4, #2]
    e472:	f8dd 0009 	ldr.w	r0, [sp, #9]
    e476:	f361 201f 	bfi	r0, r1, #8, #24
    e47a:	f8cd 0009 	str.w	r0, [sp, #9]
    e47e:	7b60      	ldrb	r0, [r4, #13]
    e480:	f88d 000d 	strb.w	r0, [sp, #13]
    e484:	7960      	ldrb	r0, [r4, #5]
    e486:	f88d 000e 	strb.w	r0, [sp, #14]
    e48a:	79a0      	ldrb	r0, [r4, #6]
    e48c:	f88d 000f 	strb.w	r0, [sp, #15]
    e490:	f8d4 0007 	ldr.w	r0, [r4, #7]
    e494:	9004      	str	r0, [sp, #16]
    e496:	f8b4 000b 	ldrh.w	r0, [r4, #11]
    e49a:	f8ad 0014 	strh.w	r0, [sp, #20]
    e49e:	7ba0      	ldrb	r0, [r4, #14]
    e4a0:	f88d 0016 	strb.w	r0, [sp, #22]
    e4a4:	207f      	movs	r0, #127	; 0x7f
    e4a6:	f88d 0017 	strb.w	r0, [sp, #23]
    e4aa:	2001      	movs	r0, #1
    e4ac:	f88d 0018 	strb.w	r0, [sp, #24]
    e4b0:	f88d 5019 	strb.w	r5, [sp, #25]
    e4b4:	f88d 001a 	strb.w	r0, [sp, #26]
    e4b8:	f88d 501b 	strb.w	r5, [sp, #27]
    e4bc:	4610      	mov	r0, r2
    e4be:	f7ff f8cf 	bl	d660 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
    e4c2:	f88d 001c 	strb.w	r0, [sp, #28]
    e4c6:	f88d 501d 	strb.w	r5, [sp, #29]
    e4ca:	f88d 501e 	strb.w	r5, [sp, #30]
    e4ce:	a909      	add	r1, sp, #36	; 0x24
    e4d0:	a801      	add	r0, sp, #4
    e4d2:	f000 f8ff 	bl	e6d4 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
    e4d6:	e79b      	b.n	e410 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x16>
    e4d8:	f241 01a9 	movw	r1, #4265	; 0x10a9
    e4dc:	2039      	movs	r0, #57	; 0x39
    e4de:	f7f5 fb59 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e4e2 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>:
    e4e2:	b570      	push	{r4, r5, r6, lr}
    e4e4:	4604      	mov	r4, r0
    e4e6:	7800      	ldrb	r0, [r0, #0]
    e4e8:	2101      	movs	r1, #1
    e4ea:	f7fe f960 	bl	c7ae <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e4ee:	0005      	movs	r5, r0
    e4f0:	d007      	beq.n	e502 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x20>
    e4f2:	f7ff faaa 	bl	da4a <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    e4f6:	b160      	cbz	r0, e512 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    e4f8:	4628      	mov	r0, r5
    e4fa:	f7ff f89b 	bl	d634 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    e4fe:	b110      	cbz	r0, e506 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x24>
    e500:	e005      	b.n	e50e <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x2c>
    e502:	2042      	movs	r0, #66	; 0x42
    e504:	bd70      	pop	{r4, r5, r6, pc}
    e506:	4628      	mov	r0, r5
    e508:	f7ff f88a 	bl	d620 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    e50c:	b108      	cbz	r0, e512 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    e50e:	200c      	movs	r0, #12
    e510:	bd70      	pop	{r4, r5, r6, pc}
    e512:	1c61      	adds	r1, r4, #1
    e514:	4628      	mov	r0, r5
    e516:	f7ff f89b 	bl	d650 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>
    e51a:	2000      	movs	r0, #0
    e51c:	bd70      	pop	{r4, r5, r6, pc}

0000e51e <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
    e51e:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    e520:	460d      	mov	r5, r1
    e522:	4604      	mov	r4, r0
    e524:	f000 fc4c 	bl	edc0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x322>
    e528:	b130      	cbz	r0, e538 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
    e52a:	88a2      	ldrh	r2, [r4, #4]
    e52c:	f244 2090 	movw	r0, #17040	; 0x4290
    e530:	4282      	cmp	r2, r0
    e532:	d903      	bls.n	e53c <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1e>
    e534:	2012      	movs	r0, #18
    e536:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    e538:	2001      	movs	r0, #1
    e53a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    e53c:	f640 0048 	movw	r0, #2120	; 0x848
    e540:	4282      	cmp	r2, r0
    e542:	d300      	bcc.n	e546 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x28>
    e544:	4602      	mov	r2, r0
    e546:	8820      	ldrh	r0, [r4, #0]
    e548:	f8ad 0000 	strh.w	r0, [sp]
    e54c:	8860      	ldrh	r0, [r4, #2]
    e54e:	f8ad 0002 	strh.w	r0, [sp, #2]
    e552:	f8ad 2004 	strh.w	r2, [sp, #4]
    e556:	8860      	ldrh	r0, [r4, #2]
    e558:	f8ad 0006 	strh.w	r0, [sp, #6]
    e55c:	f8ad 2008 	strh.w	r2, [sp, #8]
    e560:	8820      	ldrh	r0, [r4, #0]
    e562:	8028      	strh	r0, [r5, #0]
    e564:	4668      	mov	r0, sp
    e566:	f7fb fce9 	bl	9f3c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    e56a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000e56c <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
    e56c:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    e56e:	4604      	mov	r4, r0
    e570:	f7fb fe34 	bl	a1dc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    e574:	f3c0 2000 	ubfx	r0, r0, #8, #1
    e578:	b1b0      	cbz	r0, e5a8 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3c>
    e57a:	f10d 0007 	add.w	r0, sp, #7
    e57e:	9000      	str	r0, [sp, #0]
    e580:	7922      	ldrb	r2, [r4, #4]
    e582:	78e1      	ldrb	r1, [r4, #3]
    e584:	78a0      	ldrb	r0, [r4, #2]
    e586:	f10d 0306 	add.w	r3, sp, #6
    e58a:	f000 fc74 	bl	ee76 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3d8>
    e58e:	2800      	cmp	r0, #0
    e590:	d109      	bne.n	e5a6 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3a>
    e592:	8820      	ldrh	r0, [r4, #0]
    e594:	f8ad 0004 	strh.w	r0, [sp, #4]
    e598:	f8b4 0005 	ldrh.w	r0, [r4, #5]
    e59c:	f8ad 0008 	strh.w	r0, [sp, #8]
    e5a0:	a801      	add	r0, sp, #4
    e5a2:	f000 f97c 	bl	e89e <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
    e5a6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    e5a8:	2001      	movs	r0, #1
    e5aa:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000e5ac <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>:
    e5ac:	b510      	push	{r4, lr}
    e5ae:	4604      	mov	r4, r0
    e5b0:	f000 fbc0 	bl	ed34 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x296>
    e5b4:	b120      	cbz	r0, e5c0 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    e5b6:	f7f6 ffb9 	bl	552c <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    e5ba:	b108      	cbz	r0, e5c0 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    e5bc:	200c      	movs	r0, #12
    e5be:	bd10      	pop	{r4, pc}
    e5c0:	7820      	ldrb	r0, [r4, #0]
    e5c2:	f7ff fd53 	bl	e06c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    e5c6:	79e2      	ldrb	r2, [r4, #7]
    e5c8:	1c61      	adds	r1, r4, #1
    e5ca:	f7f6 ff5d 	bl	5488 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>
    e5ce:	b108      	cbz	r0, e5d4 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x28>
    e5d0:	2000      	movs	r0, #0
    e5d2:	bd10      	pop	{r4, pc}
    e5d4:	2002      	movs	r0, #2
    e5d6:	bd10      	pop	{r4, pc}

0000e5d8 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    e5d8:	b510      	push	{r4, lr}
    e5da:	4604      	mov	r4, r0
    e5dc:	2001      	movs	r0, #1
    e5de:	f000 fa9d 	bl	eb1c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x7e>
    e5e2:	b128      	cbz	r0, e5f0 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    e5e4:	4621      	mov	r1, r4
    e5e6:	2001      	movs	r0, #1
    e5e8:	f7f6 f9ae 	bl	4948 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    e5ec:	2000      	movs	r0, #0
    e5ee:	bd10      	pop	{r4, pc}
    e5f0:	200c      	movs	r0, #12
    e5f2:	bd10      	pop	{r4, pc}

0000e5f4 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>:
    e5f4:	b510      	push	{r4, lr}
    e5f6:	8800      	ldrh	r0, [r0, #0]
    e5f8:	f7f7 f826 	bl	5648 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>
    e5fc:	b108      	cbz	r0, e602 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI+0xe>
    e5fe:	2000      	movs	r0, #0
    e600:	bd10      	pop	{r4, pc}
    e602:	2030      	movs	r0, #48	; 0x30
    e604:	bd10      	pop	{r4, pc}

0000e606 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
    e606:	b530      	push	{r4, r5, lr}
    e608:	b087      	sub	sp, #28
    e60a:	4605      	mov	r5, r0
    e60c:	f000 fbf5 	bl	edfa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x35c>
    e610:	4604      	mov	r4, r0
    e612:	4669      	mov	r1, sp
    e614:	f7ff f849 	bl	d6aa <sym_CDJCVCA2DPO4EZMIO3E74XFHRHPGT76HYWGJOCA>
    e618:	b118      	cbz	r0, e622 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI+0x1c>
    e61a:	4669      	mov	r1, sp
    e61c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    e61e:	f7fe f90c 	bl	c83a <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA>
    e622:	2200      	movs	r2, #0
    e624:	a805      	add	r0, sp, #20
    e626:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    e628:	f7f5 ff16 	bl	4458 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    e62c:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
    e630:	e9cd 0100 	strd	r0, r1, [sp]
    e634:	7829      	ldrb	r1, [r5, #0]
    e636:	466a      	mov	r2, sp
    e638:	1c68      	adds	r0, r5, #1
    e63a:	f000 fa81 	bl	eb40 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xa2>
    e63e:	0005      	movs	r5, r0
    e640:	d006      	beq.n	e650 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI+0x4a>
    e642:	4669      	mov	r1, sp
    e644:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    e646:	f7fe f8f8 	bl	c83a <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA>
    e64a:	4628      	mov	r0, r5
    e64c:	b007      	add	sp, #28
    e64e:	bd30      	pop	{r4, r5, pc}
    e650:	4669      	mov	r1, sp
    e652:	4620      	mov	r0, r4
    e654:	f7ff f840 	bl	d6d8 <sym_VD45NAZNLOGGVVD5JTOGXKZNINHWZNPETQGEFXA>
    e658:	2000      	movs	r0, #0
    e65a:	f88d 000c 	strb.w	r0, [sp, #12]
    e65e:	9800      	ldr	r0, [sp, #0]
    e660:	9004      	str	r0, [sp, #16]
    e662:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    e666:	f8ad 000e 	strh.w	r0, [sp, #14]
    e66a:	a803      	add	r0, sp, #12
    e66c:	f000 f8ef 	bl	e84e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
    e670:	e7ec      	b.n	e64c <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI+0x46>

0000e672 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
    e672:	b51c      	push	{r2, r3, r4, lr}
    e674:	4604      	mov	r4, r0
    e676:	f000 fba3 	bl	edc0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x322>
    e67a:	b178      	cbz	r0, e69c <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y+0x2a>
    e67c:	8820      	ldrh	r0, [r4, #0]
    e67e:	f8ad 0000 	strh.w	r0, [sp]
    e682:	8860      	ldrh	r0, [r4, #2]
    e684:	f8ad 0002 	strh.w	r0, [sp, #2]
    e688:	8820      	ldrh	r0, [r4, #0]
    e68a:	f8ad 0004 	strh.w	r0, [sp, #4]
    e68e:	8860      	ldrh	r0, [r4, #2]
    e690:	f8ad 0006 	strh.w	r0, [sp, #6]
    e694:	4668      	mov	r0, sp
    e696:	f7fb fcd5 	bl	a044 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2a4>
    e69a:	bd1c      	pop	{r2, r3, r4, pc}
    e69c:	2001      	movs	r0, #1
    e69e:	bd1c      	pop	{r2, r3, r4, pc}

0000e6a0 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    e6a0:	b510      	push	{r4, lr}
    e6a2:	f7f6 f975 	bl	4990 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
    e6a6:	2000      	movs	r0, #0
    e6a8:	bd10      	pop	{r4, pc}

0000e6aa <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
    e6aa:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    e6ac:	460c      	mov	r4, r1
    e6ae:	4605      	mov	r5, r0
    e6b0:	f000 fb86 	bl	edc0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x322>
    e6b4:	b160      	cbz	r0, e6d0 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x26>
    e6b6:	4669      	mov	r1, sp
    e6b8:	4628      	mov	r0, r5
    e6ba:	f7fe f9b1 	bl	ca20 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    e6be:	2800      	cmp	r0, #0
    e6c0:	d105      	bne.n	e6ce <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x24>
    e6c2:	2100      	movs	r1, #0
    e6c4:	4622      	mov	r2, r4
    e6c6:	9801      	ldr	r0, [sp, #4]
    e6c8:	f000 fafe 	bl	ecc8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x22a>
    e6cc:	2000      	movs	r0, #0
    e6ce:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    e6d0:	2001      	movs	r0, #1
    e6d2:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000e6d4 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
    e6d4:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    e6d8:	460f      	mov	r7, r1
    e6da:	4605      	mov	r5, r0
    e6dc:	7806      	ldrb	r6, [r0, #0]
    e6de:	f000 fa7f 	bl	ebe0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x142>
    e6e2:	2800      	cmp	r0, #0
    e6e4:	d10a      	bne.n	e6fc <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    e6e6:	4628      	mov	r0, r5
    e6e8:	f000 fa5e 	bl	eba8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x10a>
    e6ec:	2800      	cmp	r0, #0
    e6ee:	d105      	bne.n	e6fc <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    e6f0:	2001      	movs	r0, #1
    e6f2:	f7f5 fc55 	bl	3fa0 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    e6f6:	4286      	cmp	r6, r0
    e6f8:	d302      	bcc.n	e700 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x2c>
    e6fa:	2007      	movs	r0, #7
    e6fc:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    e700:	2101      	movs	r1, #1
    e702:	4630      	mov	r0, r6
    e704:	f7fe f853 	bl	c7ae <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e708:	0004      	movs	r4, r0
    e70a:	d004      	beq.n	e716 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x42>
    e70c:	f7ff f99d 	bl	da4a <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    e710:	b158      	cbz	r0, e72a <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x56>
    e712:	200c      	movs	r0, #12
    e714:	e7f2      	b.n	e6fc <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    e716:	2200      	movs	r2, #0
    e718:	2101      	movs	r1, #1
    e71a:	4630      	mov	r0, r6
    e71c:	f7fe f82b 	bl	c776 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    e720:	0004      	movs	r4, r0
    e722:	d010      	beq.n	e746 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x72>
    e724:	4631      	mov	r1, r6
    e726:	f7fe ff29 	bl	d57c <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    e72a:	4620      	mov	r0, r4
    e72c:	f7fe ff86 	bl	d63c <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    e730:	7038      	strb	r0, [r7, #0]
    e732:	74e8      	strb	r0, [r5, #19]
    e734:	4629      	mov	r1, r5
    e736:	4620      	mov	r0, r4
    e738:	f7f7 fd2a 	bl	6190 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
    e73c:	4606      	mov	r6, r0
    e73e:	7e68      	ldrb	r0, [r5, #25]
    e740:	b360      	cbz	r0, e79c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xc8>
    e742:	b12e      	cbz	r6, e750 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x7c>
    e744:	e02a      	b.n	e79c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xc8>
    e746:	f241 212b 	movw	r1, #4651	; 0x122b
    e74a:	2039      	movs	r0, #57	; 0x39
    e74c:	f7f5 fa22 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e750:	4669      	mov	r1, sp
    e752:	4620      	mov	r0, r4
    e754:	f7fe ff8a 	bl	d66c <sym_RNI25VYXYFKWFPBZMEWKYU7T2AE36PDSHGXVMJI>
    e758:	b118      	cbz	r0, e762 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x8e>
    e75a:	4669      	mov	r1, sp
    e75c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    e75e:	f7fe f86c 	bl	c83a <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA>
    e762:	4669      	mov	r1, sp
    e764:	4620      	mov	r0, r4
    e766:	f7fe ffa0 	bl	d6aa <sym_CDJCVCA2DPO4EZMIO3E74XFHRHPGT76HYWGJOCA>
    e76a:	b118      	cbz	r0, e774 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa0>
    e76c:	4669      	mov	r1, sp
    e76e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    e770:	f7fe f863 	bl	c83a <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA>
    e774:	2000      	movs	r0, #0
    e776:	f8ad 0004 	strh.w	r0, [sp, #4]
    e77a:	9000      	str	r0, [sp, #0]
    e77c:	f8ad 0006 	strh.w	r0, [sp, #6]
    e780:	4669      	mov	r1, sp
    e782:	4620      	mov	r0, r4
    e784:	f7fe ff89 	bl	d69a <sym_DZ4VHVOVANVDVX7ECCNFNRACUFPY2WIUPGGZ27Y>
    e788:	4669      	mov	r1, sp
    e78a:	4620      	mov	r0, r4
    e78c:	f7fe ffa4 	bl	d6d8 <sym_VD45NAZNLOGGVVD5JTOGXKZNINHWZNPETQGEFXA>
    e790:	4620      	mov	r0, r4
    e792:	f7fe ff79 	bl	d688 <sym_6SMKGRHQAIZHR6JTRBTFU3LNEOI457UCNN7L2SY>
    e796:	4620      	mov	r0, r4
    e798:	f7fe ff95 	bl	d6c6 <sym_57N4MHGOTN6SE7ESLAUPVT5Z7CNKRRVGNPONZCI>
    e79c:	4630      	mov	r0, r6
    e79e:	e7ad      	b.n	e6fc <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>

0000e7a0 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
    e7a0:	b510      	push	{r4, lr}
    e7a2:	4604      	mov	r4, r0
    e7a4:	2000      	movs	r0, #0
    e7a6:	f000 f9b9 	bl	eb1c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x7e>
    e7aa:	b128      	cbz	r0, e7b8 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
    e7ac:	4621      	mov	r1, r4
    e7ae:	2000      	movs	r0, #0
    e7b0:	f7f6 f8ca 	bl	4948 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    e7b4:	2000      	movs	r0, #0
    e7b6:	bd10      	pop	{r4, pc}
    e7b8:	200c      	movs	r0, #12
    e7ba:	bd10      	pop	{r4, pc}

0000e7bc <sym_PYH4UVSHNWZESRWJUJ3ZT676FMQZCLVGBPGE4SY>:
    e7bc:	b510      	push	{r4, lr}
    e7be:	4604      	mov	r4, r0
    e7c0:	f7ff f95d 	bl	da7e <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY>
    e7c4:	b120      	cbz	r0, e7d0 <sym_PYH4UVSHNWZESRWJUJ3ZT676FMQZCLVGBPGE4SY+0x14>
    e7c6:	7820      	ldrb	r0, [r4, #0]
    e7c8:	f7f8 fbee 	bl	6fa8 <sym_24SKLESBEZEAQ7XSDAQVJQD35IVFROKORCGBXPI>
    e7cc:	2000      	movs	r0, #0
    e7ce:	bd10      	pop	{r4, pc}
    e7d0:	200c      	movs	r0, #12
    e7d2:	bd10      	pop	{r4, pc}

0000e7d4 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
    e7d4:	b510      	push	{r4, lr}
    e7d6:	7800      	ldrb	r0, [r0, #0]
    e7d8:	f000 0001 	and.w	r0, r0, #1
    e7dc:	f7f8 fbea 	bl	6fb4 <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A>
    e7e0:	2000      	movs	r0, #0
    e7e2:	bd10      	pop	{r4, pc}

0000e7e4 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
    e7e4:	b510      	push	{r4, lr}
    e7e6:	4604      	mov	r4, r0
    e7e8:	f000 faea 	bl	edc0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x322>
    e7ec:	b120      	cbz	r0, e7f8 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I+0x14>
    e7ee:	4620      	mov	r0, r4
    e7f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e7f4:	f7fb bba2 	b.w	9f3c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    e7f8:	2001      	movs	r0, #1
    e7fa:	bd10      	pop	{r4, pc}

0000e7fc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
    e7fc:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    e7fe:	4605      	mov	r5, r0
    e800:	7800      	ldrb	r0, [r0, #0]
    e802:	2101      	movs	r1, #1
    e804:	f7fd ffd3 	bl	c7ae <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e808:	0006      	movs	r6, r0
    e80a:	d01e      	beq.n	e84a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x4e>
    e80c:	2201      	movs	r2, #1
    e80e:	8869      	ldrh	r1, [r5, #2]
    e810:	f000 f9ab 	bl	eb6a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xcc>
    e814:	2800      	cmp	r0, #0
    e816:	d117      	bne.n	e848 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x4c>
    e818:	4630      	mov	r0, r6
    e81a:	f7fe fece 	bl	d5ba <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
    e81e:	4604      	mov	r4, r0
    e820:	8868      	ldrh	r0, [r5, #2]
    e822:	42a0      	cmp	r0, r4
    e824:	d800      	bhi.n	e828 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x2c>
    e826:	4604      	mov	r4, r0
    e828:	4669      	mov	r1, sp
    e82a:	4630      	mov	r0, r6
    e82c:	f7fe ff30 	bl	d690 <sym_UVJC3XBQQLDGXNDNKXZFSW7F5OWZWJU7FTAZXEI>
    e830:	6868      	ldr	r0, [r5, #4]
    e832:	9000      	str	r0, [sp, #0]
    e834:	f8ad 4004 	strh.w	r4, [sp, #4]
    e838:	4669      	mov	r1, sp
    e83a:	4630      	mov	r0, r6
    e83c:	f7fe ff2d 	bl	d69a <sym_DZ4VHVOVANVDVX7ECCNFNRACUFPY2WIUPGGZ27Y>
    e840:	4630      	mov	r0, r6
    e842:	f7fe ff21 	bl	d688 <sym_6SMKGRHQAIZHR6JTRBTFU3LNEOI457UCNN7L2SY>
    e846:	2000      	movs	r0, #0
    e848:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    e84a:	2042      	movs	r0, #66	; 0x42
    e84c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000e84e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
    e84e:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    e850:	4604      	mov	r4, r0
    e852:	7800      	ldrb	r0, [r0, #0]
    e854:	2101      	movs	r1, #1
    e856:	f7fd ffaa 	bl	c7ae <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e85a:	0005      	movs	r5, r0
    e85c:	d00b      	beq.n	e876 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x28>
    e85e:	2201      	movs	r2, #1
    e860:	8861      	ldrh	r1, [r4, #2]
    e862:	f000 f982 	bl	eb6a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xcc>
    e866:	2800      	cmp	r0, #0
    e868:	d106      	bne.n	e878 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x2a>
    e86a:	8866      	ldrh	r6, [r4, #2]
    e86c:	4628      	mov	r0, r5
    e86e:	f7fe fee1 	bl	d634 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    e872:	b110      	cbz	r0, e87a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x2c>
    e874:	e002      	b.n	e87c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x2e>
    e876:	2042      	movs	r0, #66	; 0x42
    e878:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    e87a:	2600      	movs	r6, #0
    e87c:	4669      	mov	r1, sp
    e87e:	4628      	mov	r0, r5
    e880:	f7fe ff25 	bl	d6ce <sym_ECJZL6MVN4B4UZUQDXL2OTZMAL25BOLWE4F7TMI>
    e884:	6860      	ldr	r0, [r4, #4]
    e886:	9000      	str	r0, [sp, #0]
    e888:	f8ad 6004 	strh.w	r6, [sp, #4]
    e88c:	4669      	mov	r1, sp
    e88e:	4628      	mov	r0, r5
    e890:	f7fe ff22 	bl	d6d8 <sym_VD45NAZNLOGGVVD5JTOGXKZNINHWZNPETQGEFXA>
    e894:	4628      	mov	r0, r5
    e896:	f7fe ff16 	bl	d6c6 <sym_57N4MHGOTN6SE7ESLAUPVT5Z7CNKRRVGNPONZCI>
    e89a:	2000      	movs	r0, #0
    e89c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000e89e <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
    e89e:	b510      	push	{r4, lr}
    e8a0:	4604      	mov	r4, r0
    e8a2:	8880      	ldrh	r0, [r0, #4]
    e8a4:	b128      	cbz	r0, e8b2 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    e8a6:	2801      	cmp	r0, #1
    e8a8:	d003      	beq.n	e8b2 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    e8aa:	2802      	cmp	r0, #2
    e8ac:	d001      	beq.n	e8b2 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    e8ae:	2012      	movs	r0, #18
    e8b0:	bd10      	pop	{r4, pc}
    e8b2:	78e0      	ldrb	r0, [r4, #3]
    e8b4:	f000 f9e5 	bl	ec82 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e4>
    e8b8:	b148      	cbz	r0, e8ce <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    e8ba:	78a0      	ldrb	r0, [r4, #2]
    e8bc:	f000 f9e1 	bl	ec82 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e4>
    e8c0:	b128      	cbz	r0, e8ce <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    e8c2:	4620      	mov	r0, r4
    e8c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e8c8:	2101      	movs	r1, #1
    e8ca:	f000 b883 	b.w	e9d4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    e8ce:	2011      	movs	r0, #17
    e8d0:	bd10      	pop	{r4, pc}

0000e8d2 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
    e8d2:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    e8d4:	460c      	mov	r4, r1
    e8d6:	4605      	mov	r5, r0
    e8d8:	8800      	ldrh	r0, [r0, #0]
    e8da:	4669      	mov	r1, sp
    e8dc:	f7fe f8a0 	bl	ca20 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    e8e0:	2800      	cmp	r0, #0
    e8e2:	d106      	bne.n	e8f2 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
    e8e4:	9801      	ldr	r0, [sp, #4]
    e8e6:	8829      	ldrh	r1, [r5, #0]
    e8e8:	8021      	strh	r1, [r4, #0]
    e8ea:	f8b0 0098 	ldrh.w	r0, [r0, #152]	; 0x98
    e8ee:	8060      	strh	r0, [r4, #2]
    e8f0:	2000      	movs	r0, #0
    e8f2:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000e8f4 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
    e8f4:	b510      	push	{r4, lr}
    e8f6:	4604      	mov	r4, r0
    e8f8:	4601      	mov	r1, r0
    e8fa:	2000      	movs	r0, #0
    e8fc:	f7f6 f80c 	bl	4918 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    e900:	b910      	cbnz	r0, e908 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
    e902:	2000      	movs	r0, #0
    e904:	6020      	str	r0, [r4, #0]
    e906:	80a0      	strh	r0, [r4, #4]
    e908:	2000      	movs	r0, #0
    e90a:	bd10      	pop	{r4, pc}

0000e90c <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
    e90c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    e90e:	8800      	ldrh	r0, [r0, #0]
    e910:	4669      	mov	r1, sp
    e912:	f7fe f885 	bl	ca20 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    e916:	b958      	cbnz	r0, e930 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x24>
    e918:	4668      	mov	r0, sp
    e91a:	f000 fa57 	bl	edcc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x32e>
    e91e:	b138      	cbz	r0, e930 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x24>
    e920:	9c01      	ldr	r4, [sp, #4]
    e922:	f894 11ac 	ldrb.w	r1, [r4, #428]	; 0x1ac
    e926:	f504 70d6 	add.w	r0, r4, #428	; 0x1ac
    e92a:	3468      	adds	r4, #104	; 0x68
    e92c:	b929      	cbnz	r1, e93a <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2e>
    e92e:	e001      	b.n	e934 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
    e930:	2002      	movs	r0, #2
    e932:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    e934:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    e938:	b109      	cbz	r1, e93e <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x32>
    e93a:	203a      	movs	r0, #58	; 0x3a
    e93c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    e93e:	f894 1046 	ldrb.w	r1, [r4, #70]	; 0x46
    e942:	f04f 0501 	mov.w	r5, #1
    e946:	0789      	lsls	r1, r1, #30
    e948:	d103      	bne.n	e952 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x46>
    e94a:	7005      	strb	r5, [r0, #0]
    e94c:	4668      	mov	r0, sp
    e94e:	f7fe fc20 	bl	d192 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    e952:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
    e956:	2000      	movs	r0, #0
    e958:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000e95a <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
    e95a:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    e95c:	460c      	mov	r4, r1
    e95e:	4605      	mov	r5, r0
    e960:	8800      	ldrh	r0, [r0, #0]
    e962:	4669      	mov	r1, sp
    e964:	f7fe f85c 	bl	ca20 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    e968:	b108      	cbz	r0, e96e <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
    e96a:	2002      	movs	r0, #2
    e96c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    e96e:	78a8      	ldrb	r0, [r5, #2]
    e970:	b130      	cbz	r0, e980 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x26>
    e972:	f000 fa06 	bl	ed82 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2e4>
    e976:	70a0      	strb	r0, [r4, #2]
    e978:	8828      	ldrh	r0, [r5, #0]
    e97a:	8020      	strh	r0, [r4, #0]
    e97c:	2000      	movs	r0, #0
    e97e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    e980:	9801      	ldr	r0, [sp, #4]
    e982:	f890 0066 	ldrb.w	r0, [r0, #102]	; 0x66
    e986:	e7f6      	b.n	e976 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

0000e988 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
    e988:	b510      	push	{r4, lr}
    e98a:	f7fb fb95 	bl	a0b8 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    e98e:	2000      	movs	r0, #0
    e990:	bd10      	pop	{r4, pc}

0000e992 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
    e992:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    e996:	4604      	mov	r4, r0
    e998:	8840      	ldrh	r0, [r0, #2]
    e99a:	460d      	mov	r5, r1
    e99c:	b1b0      	cbz	r0, e9cc <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3a>
    e99e:	8820      	ldrh	r0, [r4, #0]
    e9a0:	4669      	mov	r1, sp
    e9a2:	f7fe f83d 	bl	ca20 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    e9a6:	2800      	cmp	r0, #0
    e9a8:	d10e      	bne.n	e9c8 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x36>
    e9aa:	8820      	ldrh	r0, [r4, #0]
    e9ac:	8028      	strh	r0, [r5, #0]
    e9ae:	9e01      	ldr	r6, [sp, #4]
    e9b0:	1d35      	adds	r5, r6, #4
    e9b2:	3668      	adds	r6, #104	; 0x68
    e9b4:	682f      	ldr	r7, [r5, #0]
    e9b6:	8862      	ldrh	r2, [r4, #2]
    e9b8:	4639      	mov	r1, r7
    e9ba:	4630      	mov	r0, r6
    e9bc:	f7fe f970 	bl	cca0 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
    e9c0:	6828      	ldr	r0, [r5, #0]
    e9c2:	42b8      	cmp	r0, r7
    e9c4:	d1f6      	bne.n	e9b4 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x22>
    e9c6:	2000      	movs	r0, #0
    e9c8:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    e9cc:	2012      	movs	r0, #18
    e9ce:	e7fb      	b.n	e9c8 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x36>

0000e9d0 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
    e9d0:	f7fb b932 	b.w	9c38 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

0000e9d4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
    e9d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e9d8:	b086      	sub	sp, #24
    e9da:	468a      	mov	sl, r1
    e9dc:	4606      	mov	r6, r0
    e9de:	8800      	ldrh	r0, [r0, #0]
    e9e0:	a901      	add	r1, sp, #4
    e9e2:	f7fe f81d 	bl	ca20 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    e9e6:	2800      	cmp	r0, #0
    e9e8:	d138      	bne.n	ea5c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>
    e9ea:	9802      	ldr	r0, [sp, #8]
    e9ec:	f04f 0800 	mov.w	r8, #0
    e9f0:	4601      	mov	r1, r0
    e9f2:	4689      	mov	r9, r1
    e9f4:	f890 11f4 	ldrb.w	r1, [r0, #500]	; 0x1f4
    e9f8:	f88d 1000 	strb.w	r1, [sp]
    e9fc:	9900      	ldr	r1, [sp, #0]
    e9fe:	9100      	str	r1, [sp, #0]
    ea00:	f89d 5000 	ldrb.w	r5, [sp]
    ea04:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    ea08:	3068      	adds	r0, #104	; 0x68
    ea0a:	2921      	cmp	r1, #33	; 0x21
    ea0c:	d100      	bne.n	ea10 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3c>
    ea0e:	b13d      	cbz	r5, ea20 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4c>
    ea10:	2400      	movs	r4, #0
    ea12:	304c      	adds	r0, #76	; 0x4c
    ea14:	2108      	movs	r1, #8
    ea16:	4607      	mov	r7, r0
    ea18:	f7ff fb1e 	bl	e058 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    ea1c:	b110      	cbz	r0, ea24 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x50>
    ea1e:	e007      	b.n	ea30 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
    ea20:	2401      	movs	r4, #1
    ea22:	e7f6      	b.n	ea12 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3e>
    ea24:	210b      	movs	r1, #11
    ea26:	4638      	mov	r0, r7
    ea28:	f7ff fb16 	bl	e058 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    ea2c:	b900      	cbnz	r0, ea30 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
    ea2e:	b1a4      	cbz	r4, ea5a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x86>
    ea30:	a804      	add	r0, sp, #16
    ea32:	9000      	str	r0, [sp, #0]
    ea34:	f89d 0004 	ldrb.w	r0, [sp, #4]
    ea38:	ab03      	add	r3, sp, #12
    ea3a:	4632      	mov	r2, r6
    ea3c:	4649      	mov	r1, r9
    ea3e:	f000 f980 	bl	ed42 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2a4>
    ea42:	0007      	movs	r7, r0
    ea44:	d10a      	bne.n	ea5c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>
    ea46:	f89d 0004 	ldrb.w	r0, [sp, #4]
    ea4a:	9c02      	ldr	r4, [sp, #8]
    ea4c:	b148      	cbz	r0, ea62 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
    ea4e:	f504 74d3 	add.w	r4, r4, #422	; 0x1a6
    ea52:	2001      	movs	r0, #1
    ea54:	7060      	strb	r0, [r4, #1]
    ea56:	b94d      	cbnz	r5, ea6c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x98>
    ea58:	e006      	b.n	ea68 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x94>
    ea5a:	201a      	movs	r0, #26
    ea5c:	b006      	add	sp, #24
    ea5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ea62:	f504 7495 	add.w	r4, r4, #298	; 0x12a
    ea66:	e7f4      	b.n	ea52 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x7e>
    ea68:	7820      	ldrb	r0, [r4, #0]
    ea6a:	b108      	cbz	r0, ea70 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9c>
    ea6c:	273a      	movs	r7, #58	; 0x3a
    ea6e:	e012      	b.n	ea96 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xc2>
    ea70:	f884 a000 	strb.w	sl, [r4]
    ea74:	f89d 000c 	ldrb.w	r0, [sp, #12]
    ea78:	70a0      	strb	r0, [r4, #2]
    ea7a:	f89d 1010 	ldrb.w	r1, [sp, #16]
    ea7e:	70e1      	strb	r1, [r4, #3]
    ea80:	f88d 0000 	strb.w	r0, [sp]
    ea84:	f88d 1001 	strb.w	r1, [sp, #1]
    ea88:	88b0      	ldrh	r0, [r6, #4]
    ea8a:	f8ad 0002 	strh.w	r0, [sp, #2]
    ea8e:	4669      	mov	r1, sp
    ea90:	4648      	mov	r0, r9
    ea92:	f7fe f884 	bl	cb9e <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    ea96:	f884 8001 	strb.w	r8, [r4, #1]
    ea9a:	4638      	mov	r0, r7
    ea9c:	e7de      	b.n	ea5c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>

0000ea9e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
    ea9e:	b510      	push	{r4, lr}
    eaa0:	2008      	movs	r0, #8
    eaa2:	f7fb fb91 	bl	a1c8 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    eaa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eaaa:	f7f9 b935 	b.w	7d18 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>
    eaae:	f44f 71a4 	mov.w	r1, #328	; 0x148
    eab2:	4288      	cmp	r0, r1
    eab4:	d303      	bcc.n	eabe <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20>
    eab6:	f640 0148 	movw	r1, #2120	; 0x848
    eaba:	4288      	cmp	r0, r1
    eabc:	d300      	bcc.n	eac0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x22>
    eabe:	4608      	mov	r0, r1
    eac0:	4770      	bx	lr
    eac2:	07c1      	lsls	r1, r0, #31
    eac4:	d001      	beq.n	eaca <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c>
    eac6:	2001      	movs	r0, #1
    eac8:	4770      	bx	lr
    eaca:	0780      	lsls	r0, r0, #30
    eacc:	d501      	bpl.n	ead2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x34>
    eace:	2002      	movs	r0, #2
    ead0:	4770      	bx	lr
    ead2:	2000      	movs	r0, #0
    ead4:	4770      	bx	lr
    ead6:	b510      	push	{r4, lr}
    ead8:	2801      	cmp	r0, #1
    eada:	d006      	beq.n	eaea <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4c>
    eadc:	2802      	cmp	r0, #2
    eade:	d004      	beq.n	eaea <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4c>
    eae0:	f240 2173 	movw	r1, #627	; 0x273
    eae4:	2006      	movs	r0, #6
    eae6:	f7f5 f855 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eaea:	bd10      	pop	{r4, pc}
    eaec:	b50e      	push	{r1, r2, r3, lr}
    eaee:	4669      	mov	r1, sp
    eaf0:	2001      	movs	r0, #1
    eaf2:	f7fd fe66 	bl	c7c2 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    eaf6:	b150      	cbz	r0, eb0e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x70>
    eaf8:	f240 1131 	movw	r1, #305	; 0x131
    eafc:	2039      	movs	r0, #57	; 0x39
    eafe:	f7f5 f849 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eb02:	9802      	ldr	r0, [sp, #8]
    eb04:	f7fe ffa1 	bl	da4a <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    eb08:	b108      	cbz	r0, eb0e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x70>
    eb0a:	2001      	movs	r0, #1
    eb0c:	bd0e      	pop	{r1, r2, r3, pc}
    eb0e:	4668      	mov	r0, sp
    eb10:	f7f5 fa92 	bl	4038 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    eb14:	2800      	cmp	r0, #0
    eb16:	d0f4      	beq.n	eb02 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x64>
    eb18:	2000      	movs	r0, #0
    eb1a:	bd0e      	pop	{r1, r2, r3, pc}
    eb1c:	b510      	push	{r4, lr}
    eb1e:	f7ff ffe5 	bl	eaec <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4e>
    eb22:	b158      	cbz	r0, eb3c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9e>
    eb24:	f000 f969 	bl	edfa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x35c>
    eb28:	4604      	mov	r4, r0
    eb2a:	f7fe fd83 	bl	d634 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    eb2e:	b918      	cbnz	r0, eb38 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9a>
    eb30:	4620      	mov	r0, r4
    eb32:	f7fe fd75 	bl	d620 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    eb36:	b108      	cbz	r0, eb3c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9e>
    eb38:	2000      	movs	r0, #0
    eb3a:	bd10      	pop	{r4, pc}
    eb3c:	2001      	movs	r0, #1
    eb3e:	bd10      	pop	{r4, pc}
    eb40:	b570      	push	{r4, r5, r6, lr}
    eb42:	460d      	mov	r5, r1
    eb44:	4614      	mov	r4, r2
    eb46:	4601      	mov	r1, r0
    eb48:	8890      	ldrh	r0, [r2, #4]
    eb4a:	88e3      	ldrh	r3, [r4, #6]
    eb4c:	1942      	adds	r2, r0, r5
    eb4e:	429a      	cmp	r2, r3
    eb50:	d901      	bls.n	eb56 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xb8>
    eb52:	2007      	movs	r0, #7
    eb54:	bd70      	pop	{r4, r5, r6, pc}
    eb56:	6822      	ldr	r2, [r4, #0]
    eb58:	4410      	add	r0, r2
    eb5a:	462a      	mov	r2, r5
    eb5c:	f7fc fe2f 	bl	b7be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    eb60:	88a0      	ldrh	r0, [r4, #4]
    eb62:	4428      	add	r0, r5
    eb64:	80a0      	strh	r0, [r4, #4]
    eb66:	2000      	movs	r0, #0
    eb68:	bd70      	pop	{r4, r5, r6, pc}
    eb6a:	b570      	push	{r4, r5, r6, lr}
    eb6c:	460c      	mov	r4, r1
    eb6e:	4605      	mov	r5, r0
    eb70:	b112      	cbz	r2, eb78 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xda>
    eb72:	291f      	cmp	r1, #31
    eb74:	d807      	bhi.n	eb86 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xe8>
    eb76:	e011      	b.n	eb9c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xfe>
    eb78:	2cff      	cmp	r4, #255	; 0xff
    eb7a:	d804      	bhi.n	eb86 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xe8>
    eb7c:	f7fe fd58 	bl	d630 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    eb80:	b118      	cbz	r0, eb8a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xec>
    eb82:	2c1f      	cmp	r4, #31
    eb84:	d901      	bls.n	eb8a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xec>
    eb86:	2012      	movs	r0, #18
    eb88:	bd70      	pop	{r4, r5, r6, pc}
    eb8a:	4628      	mov	r0, r5
    eb8c:	f7fe fd59 	bl	d642 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    eb90:	b130      	cbz	r0, eba0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x102>
    eb92:	4621      	mov	r1, r4
    eb94:	4628      	mov	r0, r5
    eb96:	f7fe fd1c 	bl	d5d2 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
    eb9a:	b118      	cbz	r0, eba4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x106>
    eb9c:	2000      	movs	r0, #0
    eb9e:	bd70      	pop	{r4, r5, r6, pc}
    eba0:	2042      	movs	r0, #66	; 0x42
    eba2:	bd70      	pop	{r4, r5, r6, pc}
    eba4:	2045      	movs	r0, #69	; 0x45
    eba6:	bd70      	pop	{r4, r5, r6, pc}
    eba8:	b510      	push	{r4, lr}
    ebaa:	4604      	mov	r4, r0
    ebac:	7840      	ldrb	r0, [r0, #1]
    ebae:	06c1      	lsls	r1, r0, #27
    ebb0:	d512      	bpl.n	ebd8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x13a>
    ebb2:	07c0      	lsls	r0, r0, #31
    ebb4:	d00b      	beq.n	ebce <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x130>
    ebb6:	f7fb fabd 	bl	a134 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
    ebba:	b168      	cbz	r0, ebd8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x13a>
    ebbc:	7860      	ldrb	r0, [r4, #1]
    ebbe:	06c1      	lsls	r1, r0, #27
    ebc0:	d405      	bmi.n	ebce <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x130>
    ebc2:	0700      	lsls	r0, r0, #28
    ebc4:	d503      	bpl.n	ebce <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x130>
    ebc6:	7d20      	ldrb	r0, [r4, #20]
    ebc8:	2802      	cmp	r0, #2
    ebca:	d105      	bne.n	ebd8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x13a>
    ebcc:	e006      	b.n	ebdc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x13e>
    ebce:	7d20      	ldrb	r0, [r4, #20]
    ebd0:	2802      	cmp	r0, #2
    ebd2:	d003      	beq.n	ebdc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x13e>
    ebd4:	7ea0      	ldrb	r0, [r4, #26]
    ebd6:	b108      	cbz	r0, ebdc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x13e>
    ebd8:	2011      	movs	r0, #17
    ebda:	bd10      	pop	{r4, pc}
    ebdc:	2000      	movs	r0, #0
    ebde:	bd10      	pop	{r4, pc}
    ebe0:	b538      	push	{r3, r4, r5, lr}
    ebe2:	4604      	mov	r4, r0
    ebe4:	7800      	ldrb	r0, [r0, #0]
    ebe6:	28ef      	cmp	r0, #239	; 0xef
    ebe8:	d847      	bhi.n	ec7a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1dc>
    ebea:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    ebee:	f8ad 0000 	strh.w	r0, [sp]
    ebf2:	9800      	ldr	r0, [sp, #0]
    ebf4:	f000 f956 	bl	eea4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x406>
    ebf8:	b3c0      	cbz	r0, ec6c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ce>
    ebfa:	7861      	ldrb	r1, [r4, #1]
    ebfc:	0708      	lsls	r0, r1, #28
    ebfe:	d40f      	bmi.n	ec20 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x182>
    ec00:	f8d4 2002 	ldr.w	r2, [r4, #2]
    ec04:	f8d4 0005 	ldr.w	r0, [r4, #5]
    ec08:	0a13      	lsrs	r3, r2, #8
    ec0a:	ebb3 2f10 	cmp.w	r3, r0, lsr #8
    ec0e:	d834      	bhi.n	ec7a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1dc>
    ec10:	2320      	movs	r3, #32
    ec12:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
    ec16:	d830      	bhi.n	ec7a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1dc>
    ec18:	025a      	lsls	r2, r3, #9
    ec1a:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
    ec1e:	d32c      	bcc.n	ec7a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1dc>
    ec20:	7a60      	ldrb	r0, [r4, #9]
    ec22:	b318      	cbz	r0, ec6c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ce>
    ec24:	2807      	cmp	r0, #7
    ec26:	d828      	bhi.n	ec7a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1dc>
    ec28:	7aa0      	ldrb	r0, [r4, #10]
    ec2a:	b128      	cbz	r0, ec38 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x19a>
    ec2c:	2801      	cmp	r0, #1
    ec2e:	d003      	beq.n	ec38 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x19a>
    ec30:	2802      	cmp	r0, #2
    ec32:	d001      	beq.n	ec38 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x19a>
    ec34:	2803      	cmp	r0, #3
    ec36:	d120      	bne.n	ec7a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1dc>
    ec38:	074a      	lsls	r2, r1, #29
    ec3a:	d403      	bmi.n	ec44 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1a6>
    ec3c:	2802      	cmp	r0, #2
    ec3e:	d001      	beq.n	ec44 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1a6>
    ec40:	2803      	cmp	r0, #3
    ec42:	d105      	bne.n	ec50 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1b2>
    ec44:	7ae0      	ldrb	r0, [r4, #11]
    ec46:	b108      	cbz	r0, ec4c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
    ec48:	2801      	cmp	r0, #1
    ec4a:	d116      	bne.n	ec7a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1dc>
    ec4c:	0748      	lsls	r0, r1, #29
    ec4e:	d407      	bmi.n	ec60 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c2>
    ec50:	7ca0      	ldrb	r0, [r4, #18]
    ec52:	b128      	cbz	r0, ec60 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c2>
    ec54:	2801      	cmp	r0, #1
    ec56:	d003      	beq.n	ec60 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c2>
    ec58:	2802      	cmp	r0, #2
    ec5a:	d001      	beq.n	ec60 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c2>
    ec5c:	2803      	cmp	r0, #3
    ec5e:	d10c      	bne.n	ec7a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1dc>
    ec60:	06c8      	lsls	r0, r1, #27
    ec62:	7d20      	ldrb	r0, [r4, #20]
    ec64:	d503      	bpl.n	ec6e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
    ec66:	2801      	cmp	r0, #1
    ec68:	d107      	bne.n	ec7a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1dc>
    ec6a:	e002      	b.n	ec72 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d4>
    ec6c:	e005      	b.n	ec7a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1dc>
    ec6e:	2802      	cmp	r0, #2
    ec70:	d003      	beq.n	ec7a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1dc>
    ec72:	7e20      	ldrb	r0, [r4, #24]
    ec74:	b118      	cbz	r0, ec7e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e0>
    ec76:	2801      	cmp	r0, #1
    ec78:	d001      	beq.n	ec7e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e0>
    ec7a:	2012      	movs	r0, #18
    ec7c:	bd38      	pop	{r3, r4, r5, pc}
    ec7e:	2000      	movs	r0, #0
    ec80:	bd38      	pop	{r3, r4, r5, pc}
    ec82:	b510      	push	{r4, lr}
    ec84:	0004      	movs	r4, r0
    ec86:	d005      	beq.n	ec94 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f6>
    ec88:	f7fb faae 	bl	a1e8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    ec8c:	4384      	bics	r4, r0
    ec8e:	d001      	beq.n	ec94 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f6>
    ec90:	2000      	movs	r0, #0
    ec92:	bd10      	pop	{r4, pc}
    ec94:	2001      	movs	r0, #1
    ec96:	bd10      	pop	{r4, pc}
    ec98:	28fb      	cmp	r0, #251	; 0xfb
    ec9a:	d803      	bhi.n	eca4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x206>
    ec9c:	f640 0048 	movw	r0, #2120	; 0x848
    eca0:	4281      	cmp	r1, r0
    eca2:	d901      	bls.n	eca8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20a>
    eca4:	2011      	movs	r0, #17
    eca6:	4770      	bx	lr
    eca8:	2000      	movs	r0, #0
    ecaa:	4770      	bx	lr
    ecac:	381b      	subs	r0, #27
    ecae:	28e1      	cmp	r0, #225	; 0xe1
    ecb0:	d206      	bcs.n	ecc0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x222>
    ecb2:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
    ecb6:	d303      	bcc.n	ecc0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x222>
    ecb8:	f244 2090 	movw	r0, #17040	; 0x4290
    ecbc:	4281      	cmp	r1, r0
    ecbe:	d901      	bls.n	ecc4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x226>
    ecc0:	2012      	movs	r0, #18
    ecc2:	4770      	bx	lr
    ecc4:	2000      	movs	r0, #0
    ecc6:	4770      	bx	lr
    ecc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    eccc:	4606      	mov	r6, r0
    ecce:	f8b0 704a 	ldrh.w	r7, [r0, #74]	; 0x4a
    ecd2:	f8b0 404c 	ldrh.w	r4, [r0, #76]	; 0x4c
    ecd6:	4615      	mov	r5, r2
    ecd8:	3024      	adds	r0, #36	; 0x24
    ecda:	f7f8 f971 	bl	6fc0 <sym_2XQD73Z3W4NFFHWTLZCIS7IQ3ACFNR3KKEBKCJQ>
    ecde:	4680      	mov	r8, r0
    ece0:	2102      	movs	r1, #2
    ece2:	f7fd ff2d 	bl	cb40 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    ece6:	4287      	cmp	r7, r0
    ece8:	d200      	bcs.n	ecec <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24e>
    ecea:	4638      	mov	r0, r7
    ecec:	4607      	mov	r7, r0
    ecee:	2102      	movs	r1, #2
    ecf0:	4640      	mov	r0, r8
    ecf2:	f7fd ff25 	bl	cb40 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    ecf6:	4284      	cmp	r4, r0
    ecf8:	d200      	bcs.n	ecfc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x25e>
    ecfa:	4620      	mov	r0, r4
    ecfc:	8831      	ldrh	r1, [r6, #0]
    ecfe:	8029      	strh	r1, [r5, #0]
    ed00:	2f1b      	cmp	r7, #27
    ed02:	d913      	bls.n	ed2c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x28e>
    ed04:	2ffb      	cmp	r7, #251	; 0xfb
    ed06:	d300      	bcc.n	ed0a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x26c>
    ed08:	27fb      	movs	r7, #251	; 0xfb
    ed0a:	806f      	strh	r7, [r5, #2]
    ed0c:	281b      	cmp	r0, #27
    ed0e:	d90f      	bls.n	ed30 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x292>
    ed10:	28fb      	cmp	r0, #251	; 0xfb
    ed12:	d300      	bcc.n	ed16 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x278>
    ed14:	20fb      	movs	r0, #251	; 0xfb
    ed16:	80e8      	strh	r0, [r5, #6]
    ed18:	4640      	mov	r0, r8
    ed1a:	f7ff fec8 	bl	eaae <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x10>
    ed1e:	80a8      	strh	r0, [r5, #4]
    ed20:	4640      	mov	r0, r8
    ed22:	f7ff fec4 	bl	eaae <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x10>
    ed26:	8128      	strh	r0, [r5, #8]
    ed28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ed2c:	271b      	movs	r7, #27
    ed2e:	e7ec      	b.n	ed0a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x26c>
    ed30:	201b      	movs	r0, #27
    ed32:	e7f0      	b.n	ed16 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x278>
    ed34:	b510      	push	{r4, lr}
    ed36:	f7ff fed9 	bl	eaec <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4e>
    ed3a:	2800      	cmp	r0, #0
    ed3c:	d000      	beq.n	ed40 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2a2>
    ed3e:	2001      	movs	r0, #1
    ed40:	bd10      	pop	{r4, pc}
    ed42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ed46:	7890      	ldrb	r0, [r2, #2]
    ed48:	9e06      	ldr	r6, [sp, #24]
    ed4a:	461d      	mov	r5, r3
    ed4c:	4614      	mov	r4, r2
    ed4e:	b908      	cbnz	r0, ed54 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2b6>
    ed50:	f7fb fa4a 	bl	a1e8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    ed54:	78e4      	ldrb	r4, [r4, #3]
    ed56:	4607      	mov	r7, r0
    ed58:	b914      	cbnz	r4, ed60 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c2>
    ed5a:	f7fb fa45 	bl	a1e8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    ed5e:	4604      	mov	r4, r0
    ed60:	b16f      	cbz	r7, ed7e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2e0>
    ed62:	b164      	cbz	r4, ed7e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2e0>
    ed64:	4638      	mov	r0, r7
    ed66:	f7ff feac 	bl	eac2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24>
    ed6a:	4620      	mov	r0, r4
    ed6c:	f7ff fea9 	bl	eac2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24>
    ed70:	b12f      	cbz	r7, ed7e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2e0>
    ed72:	b124      	cbz	r4, ed7e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2e0>
    ed74:	702f      	strb	r7, [r5, #0]
    ed76:	7034      	strb	r4, [r6, #0]
    ed78:	2000      	movs	r0, #0
    ed7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ed7e:	2009      	movs	r0, #9
    ed80:	e7fb      	b.n	ed7a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2dc>
    ed82:	b510      	push	{r4, lr}
    ed84:	f7fc fcbf 	bl	b706 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    ed88:	b928      	cbnz	r0, ed96 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f8>
    ed8a:	f7fc fcf2 	bl	b772 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    ed8e:	b910      	cbnz	r0, ed96 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f8>
    ed90:	f7fc fcf9 	bl	b786 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    ed94:	b108      	cbz	r0, ed9a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2fc>
    ed96:	2008      	movs	r0, #8
    ed98:	bd10      	pop	{r4, pc}
    ed9a:	f7fc fc89 	bl	b6b0 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    ed9e:	b940      	cbnz	r0, edb2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x314>
    eda0:	f7fc fc90 	bl	b6c4 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    eda4:	b928      	cbnz	r0, edb2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x314>
    eda6:	f7fc fca4 	bl	b6f2 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    edaa:	b910      	cbnz	r0, edb2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x314>
    edac:	f7fc fcb5 	bl	b71a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    edb0:	b108      	cbz	r0, edb6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x318>
    edb2:	2004      	movs	r0, #4
    edb4:	bd10      	pop	{r4, pc}
    edb6:	f240 5197 	movw	r1, #1431	; 0x597
    edba:	2039      	movs	r0, #57	; 0x39
    edbc:	f7f4 feea 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    edc0:	b510      	push	{r4, lr}
    edc2:	f7fb fa0b 	bl	a1dc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    edc6:	f3c0 1040 	ubfx	r0, r0, #5, #1
    edca:	bd10      	pop	{r4, pc}
    edcc:	6840      	ldr	r0, [r0, #4]
    edce:	f000 b800 	b.w	edd2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x334>
    edd2:	b508      	push	{r3, lr}
    edd4:	f890 112c 	ldrb.w	r1, [r0, #300]	; 0x12c
    edd8:	f890 008c 	ldrb.w	r0, [r0, #140]	; 0x8c
    eddc:	f88d 0000 	strb.w	r0, [sp]
    ede0:	9800      	ldr	r0, [sp, #0]
    ede2:	9000      	str	r0, [sp, #0]
    ede4:	f89d 0000 	ldrb.w	r0, [sp]
    ede8:	1e40      	subs	r0, r0, #1
    edea:	4208      	tst	r0, r1
    edec:	d003      	beq.n	edf6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x358>
    edee:	2904      	cmp	r1, #4
    edf0:	d001      	beq.n	edf6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x358>
    edf2:	2001      	movs	r0, #1
    edf4:	bd08      	pop	{r3, pc}
    edf6:	2000      	movs	r0, #0
    edf8:	bd08      	pop	{r3, pc}
    edfa:	b510      	push	{r4, lr}
    edfc:	2101      	movs	r1, #1
    edfe:	2000      	movs	r0, #0
    ee00:	f7fd fcd5 	bl	c7ae <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ee04:	0004      	movs	r4, r0
    ee06:	d109      	bne.n	ee1c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x37e>
    ee08:	2200      	movs	r2, #0
    ee0a:	2101      	movs	r1, #1
    ee0c:	4610      	mov	r0, r2
    ee0e:	f7fd fcb2 	bl	c776 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    ee12:	0004      	movs	r4, r0
    ee14:	d004      	beq.n	ee20 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x382>
    ee16:	2100      	movs	r1, #0
    ee18:	f7fe fbb0 	bl	d57c <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    ee1c:	4620      	mov	r0, r4
    ee1e:	bd10      	pop	{r4, pc}
    ee20:	f240 2126 	movw	r1, #550	; 0x226
    ee24:	2039      	movs	r0, #57	; 0x39
    ee26:	f7f4 feb5 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ee2a:	b570      	push	{r4, r5, r6, lr}
    ee2c:	4605      	mov	r5, r0
    ee2e:	f7fe fc08 	bl	d642 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    ee32:	b170      	cbz	r0, ee52 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3b4>
    ee34:	4628      	mov	r0, r5
    ee36:	f7fe fe08 	bl	da4a <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    ee3a:	2800      	cmp	r0, #0
    ee3c:	d008      	beq.n	ee50 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3b2>
    ee3e:	4628      	mov	r0, r5
    ee40:	f7fe fe00 	bl	da44 <sym_WI2RDLNIWKOV64CKFZ2EF2DRND265I3CYCBNK6A>
    ee44:	4604      	mov	r4, r0
    ee46:	4628      	mov	r0, r5
    ee48:	f7fe fdd6 	bl	d9f8 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI>
    ee4c:	b118      	cbz	r0, ee56 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3b8>
    ee4e:	200c      	movs	r0, #12
    ee50:	bd70      	pop	{r4, r5, r6, pc}
    ee52:	2042      	movs	r0, #66	; 0x42
    ee54:	bd70      	pop	{r4, r5, r6, pc}
    ee56:	b164      	cbz	r4, ee72 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3d4>
    ee58:	8820      	ldrh	r0, [r4, #0]
    ee5a:	f7fd fd21 	bl	c8a0 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    ee5e:	8820      	ldrh	r0, [r4, #0]
    ee60:	2100      	movs	r1, #0
    ee62:	f7f5 f939 	bl	40d8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    ee66:	b120      	cbz	r0, ee72 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3d4>
    ee68:	f241 417a 	movw	r1, #5242	; 0x147a
    ee6c:	2039      	movs	r0, #57	; 0x39
    ee6e:	f7f4 fe91 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ee72:	2000      	movs	r0, #0
    ee74:	bd70      	pop	{r4, r5, r6, pc}
    ee76:	b530      	push	{r4, r5, lr}
    ee78:	f340 0400 	sbfx	r4, r0, #0, #1
    ee7c:	f340 0040 	sbfx	r0, r0, #1, #1
    ee80:	1c40      	adds	r0, r0, #1
    ee82:	9d03      	ldr	r5, [sp, #12]
    ee84:	1c64      	adds	r4, r4, #1
    ee86:	d000      	beq.n	ee8a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3ec>
    ee88:	b119      	cbz	r1, ee92 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3f4>
    ee8a:	b100      	cbz	r0, ee8e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3f0>
    ee8c:	b10a      	cbz	r2, ee92 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3f4>
    ee8e:	b91c      	cbnz	r4, ee98 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3fa>
    ee90:	e001      	b.n	ee96 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3f8>
    ee92:	2011      	movs	r0, #17
    ee94:	bd30      	pop	{r4, r5, pc}
    ee96:	2100      	movs	r1, #0
    ee98:	7019      	strb	r1, [r3, #0]
    ee9a:	b900      	cbnz	r0, ee9e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x400>
    ee9c:	2200      	movs	r2, #0
    ee9e:	702a      	strb	r2, [r5, #0]
    eea0:	2000      	movs	r0, #0
    eea2:	bd30      	pop	{r4, r5, pc}
    eea4:	b2c0      	uxtb	r0, r0
    eea6:	06c1      	lsls	r1, r0, #27
    eea8:	d40c      	bmi.n	eec4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x426>
    eeaa:	0681      	lsls	r1, r0, #26
    eeac:	ea4f 71c0 	mov.w	r1, r0, lsl #31
    eeb0:	d503      	bpl.n	eeba <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x41c>
    eeb2:	b9d1      	cbnz	r1, eeea <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x44c>
    eeb4:	0781      	lsls	r1, r0, #30
    eeb6:	d418      	bmi.n	eeea <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x44c>
    eeb8:	e001      	b.n	eebe <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x420>
    eeba:	2900      	cmp	r1, #0
    eebc:	d1fa      	bne.n	eeb4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x416>
    eebe:	0700      	lsls	r0, r0, #28
    eec0:	d413      	bmi.n	eeea <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x44c>
    eec2:	e010      	b.n	eee6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x448>
    eec4:	0641      	lsls	r1, r0, #25
    eec6:	d410      	bmi.n	eeea <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x44c>
    eec8:	0681      	lsls	r1, r0, #26
    eeca:	d40e      	bmi.n	eeea <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x44c>
    eecc:	07c1      	lsls	r1, r0, #31
    eece:	ea4f 7180 	mov.w	r1, r0, lsl #30
    eed2:	d004      	beq.n	eede <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x440>
    eed4:	2900      	cmp	r1, #0
    eed6:	db02      	blt.n	eede <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x440>
    eed8:	0740      	lsls	r0, r0, #29
    eeda:	d404      	bmi.n	eee6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x448>
    eedc:	e005      	b.n	eeea <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x44c>
    eede:	0701      	lsls	r1, r0, #28
    eee0:	d403      	bmi.n	eeea <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x44c>
    eee2:	0740      	lsls	r0, r0, #29
    eee4:	d401      	bmi.n	eeea <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x44c>
    eee6:	2001      	movs	r0, #1
    eee8:	4770      	bx	lr
    eeea:	2000      	movs	r0, #0
    eeec:	4770      	bx	lr
    eeee:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    eef0:	4669      	mov	r1, sp
    eef2:	2001      	movs	r0, #1
    eef4:	f7fd fc65 	bl	c7c2 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    eef8:	b178      	cbz	r0, ef1a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x47c>
    eefa:	f240 114f 	movw	r1, #335	; 0x14f
    eefe:	2039      	movs	r0, #57	; 0x39
    ef00:	f7f4 fe48 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ef04:	9c02      	ldr	r4, [sp, #8]
    ef06:	4620      	mov	r0, r4
    ef08:	f7fe fd9f 	bl	da4a <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    ef0c:	b128      	cbz	r0, ef1a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x47c>
    ef0e:	4620      	mov	r0, r4
    ef10:	f7fe fbff 	bl	d712 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
    ef14:	b108      	cbz	r0, ef1a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x47c>
    ef16:	2001      	movs	r0, #1
    ef18:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    ef1a:	4668      	mov	r0, sp
    ef1c:	f7f5 f88c 	bl	4038 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    ef20:	2800      	cmp	r0, #0
    ef22:	d0ef      	beq.n	ef04 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x466>
    ef24:	2000      	movs	r0, #0
    ef26:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000ef28 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>:
    ef28:	6802      	ldr	r2, [r0, #0]
    ef2a:	b912      	cbnz	r2, ef32 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xa>
    ef2c:	6001      	str	r1, [r0, #0]
    ef2e:	4770      	bx	lr
    ef30:	4602      	mov	r2, r0
    ef32:	6850      	ldr	r0, [r2, #4]
    ef34:	b108      	cbz	r0, ef3a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x12>
    ef36:	428a      	cmp	r2, r1
    ef38:	d1fa      	bne.n	ef30 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x8>
    ef3a:	428a      	cmp	r2, r1
    ef3c:	d0f7      	beq.n	ef2e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x6>
    ef3e:	6051      	str	r1, [r2, #4]
    ef40:	4770      	bx	lr
    ef42:	b510      	push	{r4, lr}
    ef44:	f7fe fd84 	bl	da50 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA>
    ef48:	b108      	cbz	r0, ef4e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x26>
    ef4a:	21d8      	movs	r1, #216	; 0xd8
    ef4c:	e003      	b.n	ef56 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x2e>
    ef4e:	f7f7 f9ed 	bl	632c <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    ef52:	b118      	cbz	r0, ef5c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x34>
    ef54:	21dd      	movs	r1, #221	; 0xdd
    ef56:	2001      	movs	r0, #1
    ef58:	f7f4 fe1c 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ef5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ef60:	2001      	movs	r0, #1
    ef62:	f7f5 b801 	b.w	3f68 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    ef66:	b510      	push	{r4, lr}
    ef68:	4604      	mov	r4, r0
    ef6a:	e002      	b.n	ef72 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x4a>
    ef6c:	6820      	ldr	r0, [r4, #0]
    ef6e:	4780      	blx	r0
    ef70:	6864      	ldr	r4, [r4, #4]
    ef72:	2c00      	cmp	r4, #0
    ef74:	d1fa      	bne.n	ef6c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x44>
    ef76:	bd10      	pop	{r4, pc}
    ef78:	b510      	push	{r4, lr}
    ef7a:	2000      	movs	r0, #0
    ef7c:	f7f4 fff4 	bl	3f68 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    ef80:	f7f5 fa28 	bl	43d4 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
    ef84:	f7f5 fcaa 	bl	48dc <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
    ef88:	f7f5 fe88 	bl	4c9c <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    ef8c:	2800      	cmp	r0, #0
    ef8e:	d003      	beq.n	ef98 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x70>
    ef90:	21b5      	movs	r1, #181	; 0xb5
    ef92:	2001      	movs	r0, #1
    ef94:	f7f4 fdfe 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ef98:	bd10      	pop	{r4, pc}
    ef9a:	b510      	push	{r4, lr}
    ef9c:	f7ff ffd1 	bl	ef42 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x1a>
    efa0:	f7ff f81a 	bl	dfd8 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>
    efa4:	2800      	cmp	r0, #0
    efa6:	d003      	beq.n	efb0 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x88>
    efa8:	21f6      	movs	r1, #246	; 0xf6
    efaa:	2001      	movs	r0, #1
    efac:	f7f4 fdf2 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    efb0:	bd10      	pop	{r4, pc}

0000efb2 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
    efb2:	b510      	push	{r4, lr}
    efb4:	f7fb fc94 	bl	a8e0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
    efb8:	f000 f850 	bl	f05c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
    efbc:	f7fb f968 	bl	a290 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
    efc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    efc4:	f7fb ba5e 	b.w	a484 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

0000efc8 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
    efc8:	b510      	push	{r4, lr}
    efca:	24c8      	movs	r4, #200	; 0xc8
    efcc:	1e64      	subs	r4, r4, #1
    efce:	b2e4      	uxtb	r4, r4
    efd0:	f7fb f97c 	bl	a2cc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
    efd4:	2802      	cmp	r0, #2
    efd6:	d003      	beq.n	efe0 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
    efd8:	2801      	cmp	r0, #1
    efda:	d000      	beq.n	efde <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
    efdc:	2000      	movs	r0, #0
    efde:	bd10      	pop	{r4, pc}
    efe0:	2c00      	cmp	r4, #0
    efe2:	d1f3      	bne.n	efcc <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
    efe4:	218f      	movs	r1, #143	; 0x8f
    efe6:	203b      	movs	r0, #59	; 0x3b
    efe8:	f7f4 fdd4 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000efec <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>:
    efec:	b510      	push	{r4, lr}
    efee:	f7f4 fcb1 	bl	3954 <mpsl_fem_lna_configuration_clear>
    eff2:	2800      	cmp	r0, #0
    eff4:	d005      	beq.n	f002 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
    eff6:	1c40      	adds	r0, r0, #1
    eff8:	d003      	beq.n	f002 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
    effa:	2150      	movs	r1, #80	; 0x50
    effc:	2040      	movs	r0, #64	; 0x40
    effe:	f7f4 fdc9 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f002:	bd10      	pop	{r4, pc}

0000f004 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>:
    f004:	b510      	push	{r4, lr}
    f006:	f7f4 fcb1 	bl	396c <mpsl_fem_pa_configuration_clear>
    f00a:	2800      	cmp	r0, #0
    f00c:	d005      	beq.n	f01a <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
    f00e:	1c40      	adds	r0, r0, #1
    f010:	d003      	beq.n	f01a <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
    f012:	2149      	movs	r1, #73	; 0x49
    f014:	2040      	movs	r0, #64	; 0x40
    f016:	f7f4 fdbd 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f01a:	bd10      	pop	{r4, pc}

0000f01c <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>:
    f01c:	b510      	push	{r4, lr}
    f01e:	f7f4 fc93 	bl	3948 <mpsl_fem_disable>
    f022:	2800      	cmp	r0, #0
    f024:	d005      	beq.n	f032 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI+0x16>
    f026:	1c40      	adds	r0, r0, #1
    f028:	d003      	beq.n	f032 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI+0x16>
    f02a:	2157      	movs	r1, #87	; 0x57
    f02c:	2040      	movs	r0, #64	; 0x40
    f02e:	f7f4 fdb1 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f032:	bd10      	pop	{r4, pc}

0000f034 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>:
    f034:	b510      	push	{r4, lr}
    f036:	2100      	movs	r1, #0
    f038:	4608      	mov	r0, r1
    f03a:	f7f4 fc91 	bl	3960 <mpsl_fem_lna_configuration_set>
    f03e:	b108      	cbz	r0, f044 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA+0x10>
    f040:	2000      	movs	r0, #0
    f042:	bd10      	pop	{r4, pc}
    f044:	2001      	movs	r0, #1
    f046:	bd10      	pop	{r4, pc}

0000f048 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>:
    f048:	b508      	push	{r3, lr}
    f04a:	4668      	mov	r0, sp
    f04c:	f7f4 fc9a 	bl	3984 <mpsl_fem_pa_is_configured>
    f050:	f89d 0000 	ldrb.w	r0, [sp]
    f054:	2800      	cmp	r0, #0
    f056:	d000      	beq.n	f05a <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I+0x12>
    f058:	2001      	movs	r0, #1
    f05a:	bd08      	pop	{r3, pc}

0000f05c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
    f05c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    f060:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    f064:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
    f068:	f3bf 8f4f 	dsb	sy
    f06c:	f3bf 8f6f 	isb	sy
    f070:	f7fb ba8a 	b.w	a588 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
    f074:	2800      	cmp	r0, #0
    f076:	db09      	blt.n	f08c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
    f078:	f000 021f 	and.w	r2, r0, #31
    f07c:	2101      	movs	r1, #1
    f07e:	4091      	lsls	r1, r2
    f080:	0940      	lsrs	r0, r0, #5
    f082:	0080      	lsls	r0, r0, #2
    f084:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    f088:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    f08c:	4770      	bx	lr
    f08e:	2800      	cmp	r0, #0
    f090:	db0d      	blt.n	f0ae <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
    f092:	f000 021f 	and.w	r2, r0, #31
    f096:	2101      	movs	r1, #1
    f098:	4091      	lsls	r1, r2
    f09a:	0940      	lsrs	r0, r0, #5
    f09c:	0080      	lsls	r0, r0, #2
    f09e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    f0a2:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    f0a6:	f3bf 8f4f 	dsb	sy
    f0aa:	f3bf 8f6f 	isb	sy
    f0ae:	4770      	bx	lr

0000f0b0 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    f0b0:	b510      	push	{r4, lr}
    f0b2:	2801      	cmp	r0, #1
    f0b4:	d006      	beq.n	f0c4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x14>
    f0b6:	2802      	cmp	r0, #2
    f0b8:	d006      	beq.n	f0c8 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x18>
    f0ba:	f640 31c5 	movw	r1, #3013	; 0xbc5
    f0be:	203e      	movs	r0, #62	; 0x3e
    f0c0:	f7f4 fd68 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f0c4:	2028      	movs	r0, #40	; 0x28
    f0c6:	bd10      	pop	{r4, pc}
    f0c8:	2018      	movs	r0, #24
    f0ca:	bd10      	pop	{r4, pc}

0000f0cc <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    f0cc:	b510      	push	{r4, lr}
    f0ce:	2801      	cmp	r0, #1
    f0d0:	d006      	beq.n	f0e0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x14>
    f0d2:	2802      	cmp	r0, #2
    f0d4:	d007      	beq.n	f0e6 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x1a>
    f0d6:	f640 31d9 	movw	r1, #3033	; 0xbd9
    f0da:	203e      	movs	r0, #62	; 0x3e
    f0dc:	f7f4 fd5a 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f0e0:	f641 6014 	movw	r0, #7700	; 0x1e14
    f0e4:	bd10      	pop	{r4, pc}
    f0e6:	f241 1030 	movw	r0, #4400	; 0x1130
    f0ea:	bd10      	pop	{r4, pc}

0000f0ec <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>:
    f0ec:	f7fc b998 	b.w	b420 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4e8>
    f0f0:	b510      	push	{r4, lr}
    f0f2:	460a      	mov	r2, r1
    f0f4:	b130      	cbz	r0, f104 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x18>
    f0f6:	2801      	cmp	r0, #1
    f0f8:	d00b      	beq.n	f112 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x26>
    f0fa:	f240 614f 	movw	r1, #1615	; 0x64f
    f0fe:	203e      	movs	r0, #62	; 0x3e
    f100:	f7f4 fd48 	bl	3b94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f108:	f102 0128 	add.w	r1, r2, #40	; 0x28
    f10c:	4610      	mov	r0, r2
    f10e:	f7fb b931 	b.w	a374 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>
    f112:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f116:	f102 0129 	add.w	r1, r2, #41	; 0x29
    f11a:	4610      	mov	r0, r2
    f11c:	f7fb b914 	b.w	a348 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>

0000f120 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    f120:	b570      	push	{r4, r5, r6, lr}
    f122:	4605      	mov	r5, r0
    f124:	4614      	mov	r4, r2
    f126:	4608      	mov	r0, r1
    f128:	f7ff ffd0 	bl	f0cc <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f12c:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    f130:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    f134:	ebc0 05c1 	rsb	r5, r0, r1, lsl #3
    f138:	4620      	mov	r0, r4
    f13a:	f7ff ffc7 	bl	f0cc <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f13e:	4428      	add	r0, r5
    f140:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f144:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    f148:	fbb0 f5f1 	udiv	r5, r0, r1
    f14c:	4620      	mov	r0, r4
    f14e:	f7ff ffaf 	bl	f0b0 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    f152:	4428      	add	r0, r5
    f154:	1d40      	adds	r0, r0, #5
    f156:	bd70      	pop	{r4, r5, r6, pc}

0000f158 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    f158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f15c:	4607      	mov	r7, r0
    f15e:	461d      	mov	r5, r3
    f160:	460e      	mov	r6, r1
    f162:	4614      	mov	r4, r2
    f164:	4610      	mov	r0, r2
    f166:	f7ff ffb1 	bl	f0cc <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f16a:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    f16e:	ebc1 11c7 	rsb	r1, r1, r7, lsl #7
    f172:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    f176:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    f17a:	2e02      	cmp	r6, #2
    f17c:	d00e      	beq.n	f19c <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x44>
    f17e:	f240 52dc 	movw	r2, #1500	; 0x5dc
    f182:	4411      	add	r1, r2
    f184:	f601 31b7 	addw	r1, r1, #2999	; 0xbb7
    f188:	fbb1 f6f0 	udiv	r6, r1, r0
    f18c:	4620      	mov	r0, r4
    f18e:	f7ff ff8f 	bl	f0b0 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    f192:	4430      	add	r0, r6
    f194:	4428      	add	r0, r5
    f196:	1d40      	adds	r0, r0, #5
    f198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f19c:	4602      	mov	r2, r0
    f19e:	e7f0      	b.n	f182 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x2a>

0000f1a0 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
    f1a0:	b510      	push	{r4, lr}
    f1a2:	4604      	mov	r4, r0
    f1a4:	4608      	mov	r0, r1
    f1a6:	f7ff ff91 	bl	f0cc <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f1aa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f1ae:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    f1b2:	fbb0 f0f1 	udiv	r0, r0, r1
    f1b6:	1a20      	subs	r0, r4, r0
    f1b8:	1e80      	subs	r0, r0, #2
    f1ba:	bd10      	pop	{r4, pc}

0000f1bc <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
    f1bc:	b510      	push	{r4, lr}
    f1be:	4604      	mov	r4, r0
    f1c0:	4608      	mov	r0, r1
    f1c2:	f7ff ff83 	bl	f0cc <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f1c6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f1ca:	fbb0 f0f1 	udiv	r0, r0, r1
    f1ce:	1a20      	subs	r0, r4, r0
    f1d0:	bd10      	pop	{r4, pc}

0000f1d2 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    f1d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f1d6:	2902      	cmp	r1, #2
    f1d8:	d008      	beq.n	f1ec <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x1a>
    f1da:	f240 51dc 	movw	r1, #1500	; 0x5dc
    f1de:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    f1e2:	fbb1 f1f2 	udiv	r1, r1, r2
    f1e6:	4408      	add	r0, r1
    f1e8:	1e80      	subs	r0, r0, #2
    f1ea:	4770      	bx	lr
    f1ec:	4611      	mov	r1, r2
    f1ee:	e7f6      	b.n	f1de <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0xc>

0000f1f0 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    f1f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f1f4:	2902      	cmp	r1, #2
    f1f6:	d007      	beq.n	f208 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>
    f1f8:	f240 51dc 	movw	r1, #1500	; 0x5dc
    f1fc:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    f200:	fbb1 f1f2 	udiv	r1, r1, r2
    f204:	4408      	add	r0, r1
    f206:	4770      	bx	lr
    f208:	4611      	mov	r1, r2
    f20a:	e7f7      	b.n	f1fc <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0xc>
    f20c:	1702080c 	.word	0x1702080c
    f210:	0201010d 	.word	0x0201010d
    f214:	01010909 	.word	0x01010909
    f218:	18090206 	.word	0x18090206
    f21c:	01010318 	.word	0x01010318
    f220:	03030909 	.word	0x03030909
    f224:	00000005 	.word	0x00000005

0000f228 <disconnected>:
}

// What happens when the device is disconnected
static void disconnected(struct bt_conn *conn, uint8_t reason)
{
	printk("Disconnected (reason %u)\n", reason);
    f228:	4801      	ldr	r0, [pc, #4]	; (f230 <disconnected+0x8>)
    f22a:	f00a bd44 	b.w	19cb6 <printk>
    f22e:	bf00      	nop
    f230:	0001de44 	.word	0x0001de44

0000f234 <bt_ready>:
	.le_param_updated		= le_param_updated
};

// This will be called to initalize our bluetooth stack
static void bt_ready(int err)
{
    f234:	b530      	push	{r4, r5, lr}
	if (err) 
    f236:	4601      	mov	r1, r0
{
    f238:	b089      	sub	sp, #36	; 0x24
	if (err) 
    f23a:	b128      	cbz	r0, f248 <bt_ready+0x14>
	{
		printk("BLE init failed with error code %d\n", err);
    f23c:	4815      	ldr	r0, [pc, #84]	; (f294 <bt_ready+0x60>)
	}

	printk("Advertising successfully started\n");

	k_sem_give(&ble_init_ok);
}
    f23e:	b009      	add	sp, #36	; 0x24
    f240:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		printk("Failed to init lightbox (err:%d)\n", err);
    f244:	f00a bd37 	b.w	19cb6 <printk>
	bt_conn_cb_register(&conn_callbacks);
    f248:	4813      	ldr	r0, [pc, #76]	; (f298 <bt_ready+0x64>)
    f24a:	f005 faa3 	bl	14794 <bt_conn_cb_register>
	err = led_service_init();
    f24e:	f000 f943 	bl	f4d8 <led_service_init>
	if (err) 
    f252:	4601      	mov	r1, r0
    f254:	b108      	cbz	r0, f25a <bt_ready+0x26>
		printk("Failed to init lightbox (err:%d)\n", err);
    f256:	4811      	ldr	r0, [pc, #68]	; (f29c <bt_ready+0x68>)
    f258:	e7f1      	b.n	f23e <bt_ready+0xa>
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
    f25a:	4d11      	ldr	r5, [pc, #68]	; (f2a0 <bt_ready+0x6c>)
    f25c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    f25e:	ac03      	add	r4, sp, #12
    f260:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    f262:	682b      	ldr	r3, [r5, #0]
    f264:	6023      	str	r3, [r4, #0]
    f266:	2301      	movs	r3, #1
    f268:	490e      	ldr	r1, [pc, #56]	; (f2a4 <bt_ready+0x70>)
    f26a:	9300      	str	r3, [sp, #0]
    f26c:	2202      	movs	r2, #2
    f26e:	4b0e      	ldr	r3, [pc, #56]	; (f2a8 <bt_ready+0x74>)
    f270:	a803      	add	r0, sp, #12
    f272:	f004 fe47 	bl	13f04 <bt_le_adv_start>
	if (err) 
    f276:	4601      	mov	r1, r0
    f278:	b120      	cbz	r0, f284 <bt_ready+0x50>
		printk("Advertising failed to start (err %d)\n", err);
    f27a:	480c      	ldr	r0, [pc, #48]	; (f2ac <bt_ready+0x78>)
    f27c:	f00a fd1b 	bl	19cb6 <printk>
}
    f280:	b009      	add	sp, #36	; 0x24
    f282:	bd30      	pop	{r4, r5, pc}
	printk("Advertising successfully started\n");
    f284:	480a      	ldr	r0, [pc, #40]	; (f2b0 <bt_ready+0x7c>)
    f286:	f00a fd16 	bl	19cb6 <printk>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    f28a:	480a      	ldr	r0, [pc, #40]	; (f2b4 <bt_ready+0x80>)
    f28c:	f009 fce0 	bl	18c50 <z_impl_k_sem_give>
    f290:	e7f6      	b.n	f280 <bt_ready+0x4c>
    f292:	bf00      	nop
    f294:	0001de5e 	.word	0x0001de5e
    f298:	20000420 	.word	0x20000420
    f29c:	0001de82 	.word	0x0001de82
    f2a0:	0001d890 	.word	0x0001d890
    f2a4:	0001d938 	.word	0x0001d938
    f2a8:	0001d948 	.word	0x0001d948
    f2ac:	0001dea4 	.word	0x0001dea4
    f2b0:	0001deca 	.word	0x0001deca
    f2b4:	2000067c 	.word	0x2000067c

0000f2b8 <error>:


static void error(void)
{
    f2b8:	b510      	push	{r4, lr}
	while (true) {
		printk("Error!\n");
    f2ba:	4c05      	ldr	r4, [pc, #20]	; (f2d0 <error+0x18>)
    f2bc:	4620      	mov	r0, r4
    f2be:	f00a fcfa 	bl	19cb6 <printk>
	return z_impl_k_sleep(timeout);
    f2c2:	2100      	movs	r1, #0
    f2c4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    f2c8:	f00a f9a6 	bl	19618 <z_impl_k_sleep>
	while (true) {
    f2cc:	e7f6      	b.n	f2bc <error+0x4>
    f2ce:	bf00      	nop
    f2d0:	0001deec 	.word	0x0001deec

0000f2d4 <bt_addr_le_to_str.constprop.0.isra.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    f2d4:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    f2d6:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    f2d8:	b08a      	sub	sp, #40	; 0x28
    f2da:	4604      	mov	r4, r0
    f2dc:	460e      	mov	r6, r1
    f2de:	ad07      	add	r5, sp, #28
	switch (addr->type) {
    f2e0:	2b03      	cmp	r3, #3
    f2e2:	d820      	bhi.n	f326 <bt_addr_le_to_str.constprop.0.isra.0+0x52>
    f2e4:	e8df f003 	tbb	[pc, r3]
    f2e8:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    f2ec:	4911      	ldr	r1, [pc, #68]	; (f334 <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    f2ee:	4628      	mov	r0, r5
    f2f0:	f00b ff19 	bl	1b126 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    f2f4:	7863      	ldrb	r3, [r4, #1]
    f2f6:	9304      	str	r3, [sp, #16]
    f2f8:	78a3      	ldrb	r3, [r4, #2]
    f2fa:	9303      	str	r3, [sp, #12]
    f2fc:	78e3      	ldrb	r3, [r4, #3]
    f2fe:	9302      	str	r3, [sp, #8]
    f300:	7923      	ldrb	r3, [r4, #4]
    f302:	9301      	str	r3, [sp, #4]
    f304:	7963      	ldrb	r3, [r4, #5]
    f306:	9300      	str	r3, [sp, #0]
    f308:	4a0b      	ldr	r2, [pc, #44]	; (f338 <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
    f30a:	79a3      	ldrb	r3, [r4, #6]
    f30c:	9505      	str	r5, [sp, #20]
    f30e:	211e      	movs	r1, #30
    f310:	4630      	mov	r0, r6
    f312:	f00a fcdd 	bl	19cd0 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    f316:	b00a      	add	sp, #40	; 0x28
    f318:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    f31a:	4908      	ldr	r1, [pc, #32]	; (f33c <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
    f31c:	e7e7      	b.n	f2ee <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
    f31e:	4908      	ldr	r1, [pc, #32]	; (f340 <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
    f320:	e7e5      	b.n	f2ee <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
    f322:	4908      	ldr	r1, [pc, #32]	; (f344 <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
    f324:	e7e3      	b.n	f2ee <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    f326:	4a08      	ldr	r2, [pc, #32]	; (f348 <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
    f328:	210a      	movs	r1, #10
    f32a:	4628      	mov	r0, r5
    f32c:	f00a fcd0 	bl	19cd0 <snprintk>
		break;
    f330:	e7e0      	b.n	f2f4 <bt_addr_le_to_str.constprop.0.isra.0+0x20>
    f332:	bf00      	nop
    f334:	0001def4 	.word	0x0001def4
    f338:	0001df16 	.word	0x0001df16
    f33c:	0001defb 	.word	0x0001defb
    f340:	0001df02 	.word	0x0001df02
    f344:	0001df0c 	.word	0x0001df0c
    f348:	0001f58d 	.word	0x0001f58d

0000f34c <le_param_updated>:
{
    f34c:	b510      	push	{r4, lr}
    f34e:	b092      	sub	sp, #72	; 0x48
	if(bt_conn_get_info(conn, &info))
    f350:	a903      	add	r1, sp, #12
{
    f352:	4604      	mov	r4, r0
	if(bt_conn_get_info(conn, &info))
    f354:	f005 faa6 	bl	148a4 <bt_conn_get_info>
    f358:	b120      	cbz	r0, f364 <le_param_updated+0x18>
		printk("Could not parse connection info\n");
    f35a:	480b      	ldr	r0, [pc, #44]	; (f388 <le_param_updated+0x3c>)
    f35c:	f00a fcab 	bl	19cb6 <printk>
}
    f360:	b012      	add	sp, #72	; 0x48
    f362:	bd10      	pop	{r4, pc}
		bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    f364:	4620      	mov	r0, r4
    f366:	f00c fa5e 	bl	1b826 <bt_conn_get_dst>
    f36a:	a90a      	add	r1, sp, #40	; 0x28
    f36c:	f7ff ffb2 	bl	f2d4 <bt_addr_le_to_str.constprop.0.isra.0>
		printk("Connection parameters updated!	\n\
    f370:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    f374:	9300      	str	r3, [sp, #0]
    f376:	f8bd 2020 	ldrh.w	r2, [sp, #32]
    f37a:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
    f37e:	4803      	ldr	r0, [pc, #12]	; (f38c <le_param_updated+0x40>)
    f380:	a90a      	add	r1, sp, #40	; 0x28
    f382:	f00a fc98 	bl	19cb6 <printk>
}
    f386:	e7eb      	b.n	f360 <le_param_updated+0x14>
    f388:	0001df39 	.word	0x0001df39
    f38c:	0001df5a 	.word	0x0001df5a

0000f390 <connected>:
{
    f390:	b510      	push	{r4, lr}
	my_connection = conn;
    f392:	4b14      	ldr	r3, [pc, #80]	; (f3e4 <connected+0x54>)
{
    f394:	b092      	sub	sp, #72	; 0x48
    f396:	4604      	mov	r4, r0
	my_connection = conn;
    f398:	6018      	str	r0, [r3, #0]
	if (err) 
    f39a:	b129      	cbz	r1, f3a8 <connected+0x18>
		printk("Connection failed (err %u)\n", err);
    f39c:	4812      	ldr	r0, [pc, #72]	; (f3e8 <connected+0x58>)
}
    f39e:	b012      	add	sp, #72	; 0x48
    f3a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Connection failed (err %u)\n", err);
    f3a4:	f00a bc87 	b.w	19cb6 <printk>
	else if(bt_conn_get_info(conn, &info))
    f3a8:	a903      	add	r1, sp, #12
    f3aa:	f005 fa7b 	bl	148a4 <bt_conn_get_info>
    f3ae:	b120      	cbz	r0, f3ba <connected+0x2a>
		printk("Could not parse connection info\n");
    f3b0:	480e      	ldr	r0, [pc, #56]	; (f3ec <connected+0x5c>)
    f3b2:	f00a fc80 	bl	19cb6 <printk>
}
    f3b6:	b012      	add	sp, #72	; 0x48
    f3b8:	bd10      	pop	{r4, pc}
		bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    f3ba:	4620      	mov	r0, r4
    f3bc:	f00c fa33 	bl	1b826 <bt_conn_get_dst>
    f3c0:	a90a      	add	r1, sp, #40	; 0x28
    f3c2:	f7ff ff87 	bl	f2d4 <bt_addr_le_to_str.constprop.0.isra.0>
		printk("Connection established!		\n\
    f3c6:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    f3ca:	9301      	str	r3, [sp, #4]
    f3cc:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
    f3d0:	9300      	str	r3, [sp, #0]
    f3d2:	f89d 200d 	ldrb.w	r2, [sp, #13]
    f3d6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    f3da:	4805      	ldr	r0, [pc, #20]	; (f3f0 <connected+0x60>)
    f3dc:	a90a      	add	r1, sp, #40	; 0x28
    f3de:	f00a fc6a 	bl	19cb6 <printk>
    f3e2:	e7e8      	b.n	f3b6 <connected+0x26>
    f3e4:	200022d0 	.word	0x200022d0
    f3e8:	0001dffd 	.word	0x0001dffd
    f3ec:	0001df39 	.word	0x0001df39
    f3f0:	0001e019 	.word	0x0001e019

0000f3f4 <main>:
	}
}


void main(void)
{
    f3f4:	b508      	push	{r3, lr}
	int err = 0;
	int rc;

	printk("Starting Nordic Lightbox\n");
    f3f6:	480d      	ldr	r0, [pc, #52]	; (f42c <main+0x38>)
    f3f8:	f00a fc5d 	bl	19cb6 <printk>

	err = bt_enable(bt_ready);
    f3fc:	480c      	ldr	r0, [pc, #48]	; (f430 <main+0x3c>)
    f3fe:	f004 f887 	bl	13510 <bt_enable>

	if (err) 
    f402:	b120      	cbz	r0, f40e <main+0x1a>
	{
		printk("BLE initialization failed\n");
    f404:	480b      	ldr	r0, [pc, #44]	; (f434 <main+0x40>)
	if (!err) 
	{
		printk("Bluetooth initialized\n");
	} else 
	{
		printk("BLE initialization did not complete in time\n");
    f406:	f00a fc56 	bl	19cb6 <printk>
		error(); //Catch error
    f40a:	f7ff ff55 	bl	f2b8 <error>
	return z_impl_k_sem_take(sem, timeout);
    f40e:	480a      	ldr	r0, [pc, #40]	; (f438 <main+0x44>)
    f410:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    f414:	2300      	movs	r3, #0
    f416:	f009 fc41 	bl	18c9c <z_impl_k_sem_take>
	if (!err) 
    f41a:	b920      	cbnz	r0, f426 <main+0x32>
	}
    f41c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		printk("Bluetooth initialized\n");
    f420:	4806      	ldr	r0, [pc, #24]	; (f43c <main+0x48>)
    f422:	f00a bc48 	b.w	19cb6 <printk>
		printk("BLE initialization did not complete in time\n");
    f426:	4806      	ldr	r0, [pc, #24]	; (f440 <main+0x4c>)
    f428:	e7ed      	b.n	f406 <main+0x12>
    f42a:	bf00      	nop
    f42c:	0001e0bb 	.word	0x0001e0bb
    f430:	0000f235 	.word	0x0000f235
    f434:	0001e0d5 	.word	0x0001e0d5
    f438:	2000067c 	.word	0x2000067c
    f43c:	0001e0f0 	.word	0x0001e0f0
    f440:	0001e107 	.word	0x0001e107

0000f444 <on_cccd_changed>:

/* This function is called whenever the CCCD register has been changed by the client*/
static void on_cccd_changed(const struct bt_gatt_attr *attr, uint16_t value)
{
    ARG_UNUSED(attr);
    switch(value)
    f444:	2902      	cmp	r1, #2
    f446:	d902      	bls.n	f44e <on_cccd_changed+0xa>
        case 0: 
            // Stop sending stuff
            break;
        
        default: 
            printk("Error, CCCD has been set to an invalid value");     
    f448:	4801      	ldr	r0, [pc, #4]	; (f450 <on_cccd_changed+0xc>)
    f44a:	f00a bc34 	b.w	19cb6 <printk>
    }
}
    f44e:	4770      	bx	lr
    f450:	0001e13b 	.word	0x0001e13b

0000f454 <on_receive>:
{
    f454:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	printk("Received data, handle %d, conn %p, data: 0x", attr->handle, conn);
    f456:	8a09      	ldrh	r1, [r1, #16]
        printk("%02X", buffer[i]);
    f458:	4f18      	ldr	r7, [pc, #96]	; (f4bc <on_receive+0x68>)
{
    f45a:	4614      	mov	r4, r2
	printk("Received data, handle %d, conn %p, data: 0x", attr->handle, conn);
    f45c:	4602      	mov	r2, r0
    f45e:	4818      	ldr	r0, [pc, #96]	; (f4c0 <on_receive+0x6c>)
{
    f460:	461d      	mov	r5, r3
	printk("Received data, handle %d, conn %p, data: 0x", attr->handle, conn);
    f462:	f00a fc28 	bl	19cb6 <printk>
    for(uint8_t i = 0; i < len; i++){
    f466:	2200      	movs	r2, #0
    f468:	b2d3      	uxtb	r3, r2
    f46a:	42ab      	cmp	r3, r5
    f46c:	f102 0601 	add.w	r6, r2, #1
    f470:	d31d      	bcc.n	f4ae <on_receive+0x5a>
    printk("\n");
    f472:	4814      	ldr	r0, [pc, #80]	; (f4c4 <on_receive+0x70>)
    led_data[led_index] = color;
    f474:	4f14      	ldr	r7, [pc, #80]	; (f4c8 <on_receive+0x74>)
    printk("\n");
    f476:	f00a fc1e 	bl	19cb6 <printk>
    uint8_t led_index = buffer[0];
    f47a:	7821      	ldrb	r1, [r4, #0]
    color.b = buffer[3];
    f47c:	78e0      	ldrb	r0, [r4, #3]
    if(led_index == 255){
    f47e:	29ff      	cmp	r1, #255	; 0xff
        party_mode = true;
    f480:	bf04      	itt	eq
    f482:	4b12      	ldreq	r3, [pc, #72]	; (f4cc <on_receive+0x78>)
    f484:	2201      	moveq	r2, #1
    led_data[led_index] = color;
    f486:	eb01 0641 	add.w	r6, r1, r1, lsl #1
        party_mode = true;
    f48a:	bf08      	it	eq
    f48c:	701a      	strbeq	r2, [r3, #0]
    color.g = buffer[2];
    f48e:	78a3      	ldrb	r3, [r4, #2]
    color.r = buffer[1];
    f490:	7862      	ldrb	r2, [r4, #1]
    led_data[led_index] = color;
    f492:	55ba      	strb	r2, [r7, r6]
    f494:	19bc      	adds	r4, r7, r6
    f496:	7063      	strb	r3, [r4, #1]
    f498:	70a0      	strb	r0, [r4, #2]
    printk("led number %d was set with r: %d, g: %d, b: %d \n", led_index, color.r, color.g, color.b);
    f49a:	9000      	str	r0, [sp, #0]
    f49c:	480c      	ldr	r0, [pc, #48]	; (f4d0 <on_receive+0x7c>)
    f49e:	f00a fc0a 	bl	19cb6 <printk>
    fresh_data = true;
    f4a2:	4b0c      	ldr	r3, [pc, #48]	; (f4d4 <on_receive+0x80>)
    f4a4:	2201      	movs	r2, #1
}
    f4a6:	4628      	mov	r0, r5
    fresh_data = true;
    f4a8:	701a      	strb	r2, [r3, #0]
}
    f4aa:	b003      	add	sp, #12
    f4ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
        printk("%02X", buffer[i]);
    f4ae:	5ce1      	ldrb	r1, [r4, r3]
    f4b0:	4638      	mov	r0, r7
    f4b2:	f00a fc00 	bl	19cb6 <printk>
    f4b6:	4632      	mov	r2, r6
    f4b8:	e7d6      	b.n	f468 <on_receive+0x14>
    f4ba:	bf00      	nop
    f4bc:	0001e194 	.word	0x0001e194
    f4c0:	0001e168 	.word	0x0001e168
    f4c4:	0001dffb 	.word	0x0001dffb
    f4c8:	20002781 	.word	0x20002781
    f4cc:	200027cc 	.word	0x200027cc
    f4d0:	0001e199 	.word	0x0001e199
    f4d4:	20002780 	.word	0x20002780

0000f4d8 <led_service_init>:
{
    f4d8:	b508      	push	{r3, lr}
    memset(&data_rx, 0, MAX_TRANSMIT_SIZE);
    f4da:	22f0      	movs	r2, #240	; 0xf0
    f4dc:	2100      	movs	r1, #0
    f4de:	4805      	ldr	r0, [pc, #20]	; (f4f4 <led_service_init+0x1c>)
    f4e0:	f00b fe75 	bl	1b1ce <memset>
    memset(&led_data, 0x00, sizeof(led_data));
    f4e4:	224b      	movs	r2, #75	; 0x4b
    f4e6:	2100      	movs	r1, #0
    f4e8:	4803      	ldr	r0, [pc, #12]	; (f4f8 <led_service_init+0x20>)
    f4ea:	f00b fe70 	bl	1b1ce <memset>
}
    f4ee:	2000      	movs	r0, #0
    f4f0:	bd08      	pop	{r3, pc}
    f4f2:	bf00      	nop
    f4f4:	20002690 	.word	0x20002690
    f4f8:	20002781 	.word	0x20002781

0000f4fc <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    f4fc:	680b      	ldr	r3, [r1, #0]
    f4fe:	3301      	adds	r3, #1
    f500:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    f502:	4b01      	ldr	r3, [pc, #4]	; (f508 <char_out+0xc>)
    f504:	681b      	ldr	r3, [r3, #0]
    f506:	4718      	bx	r3
    f508:	20000454 	.word	0x20000454

0000f50c <__printk_hook_install>:
	_char_out = fn;
    f50c:	4b01      	ldr	r3, [pc, #4]	; (f514 <__printk_hook_install+0x8>)
    f50e:	6018      	str	r0, [r3, #0]
}
    f510:	4770      	bx	lr
    f512:	bf00      	nop
    f514:	20000454 	.word	0x20000454

0000f518 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    f518:	b507      	push	{r0, r1, r2, lr}
    f51a:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    f51c:	2100      	movs	r1, #0
{
    f51e:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    f520:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    f522:	4803      	ldr	r0, [pc, #12]	; (f530 <vprintk+0x18>)
    f524:	a901      	add	r1, sp, #4
    f526:	f000 f8f9 	bl	f71c <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    f52a:	b003      	add	sp, #12
    f52c:	f85d fb04 	ldr.w	pc, [sp], #4
    f530:	0000f4fd 	.word	0x0000f4fd

0000f534 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    f534:	b530      	push	{r4, r5, lr}
    f536:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    f538:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    f53c:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    f53e:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
    f540:	a901      	add	r1, sp, #4
    f542:	4805      	ldr	r0, [pc, #20]	; (f558 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    f544:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    f546:	f000 f8e9 	bl	f71c <cbvprintf>

	if (ctx.count < ctx.max) {
    f54a:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    f54e:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    f550:	bfb8      	it	lt
    f552:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    f554:	b005      	add	sp, #20
    f556:	bd30      	pop	{r4, r5, pc}
    f558:	00019c91 	.word	0x00019c91

0000f55c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    f55c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    f560:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    f564:	f019 0808 	ands.w	r8, r9, #8
{
    f568:	4604      	mov	r4, r0
    f56a:	4693      	mov	fp, r2
	if (processing) {
    f56c:	d00d      	beq.n	f58a <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    f56e:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    f570:	bf0c      	ite	eq
    f572:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    f576:	f049 0920 	orrne.w	r9, r9, #32
    f57a:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    f57e:	f38b 8811 	msr	BASEPRI, fp
    f582:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    f586:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    f58a:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    f58e:	2902      	cmp	r1, #2
    f590:	d107      	bne.n	f5a2 <process_event+0x46>
			evt = process_recheck(mgr);
    f592:	4620      	mov	r0, r4
    f594:	f00a fba9 	bl	19cea <process_recheck>
		if (evt == EVT_NOP) {
    f598:	2800      	cmp	r0, #0
    f59a:	d0f0      	beq.n	f57e <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    f59c:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    f59e:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
    f5a0:	d14e      	bne.n	f640 <process_event+0xe4>
			res = mgr->last_res;
    f5a2:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    f5a4:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    f5a6:	2f00      	cmp	r7, #0
    f5a8:	da15      	bge.n	f5d6 <process_event+0x7a>
		*clients = mgr->clients;
    f5aa:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    f5ac:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    f5b0:	e9c4 8800 	strd	r8, r8, [r4]
    f5b4:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    f5b8:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    f5ba:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    f5bc:	8b21      	ldrh	r1, [r4, #24]
    f5be:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    f5c2:	45ca      	cmp	sl, r9
    f5c4:	d002      	beq.n	f5cc <process_event+0x70>
		if (do_monitors
    f5c6:	68a3      	ldr	r3, [r4, #8]
    f5c8:	2b00      	cmp	r3, #0
    f5ca:	d15a      	bne.n	f682 <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
    f5cc:	b90d      	cbnz	r5, f5d2 <process_event+0x76>
		    || (transit != NULL)) {
    f5ce:	2e00      	cmp	r6, #0
    f5d0:	d071      	beq.n	f6b6 <process_event+0x15a>
    f5d2:	2300      	movs	r3, #0
    f5d4:	e056      	b.n	f684 <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    f5d6:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    f5da:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    f5dc:	2a01      	cmp	r2, #1
    f5de:	d81e      	bhi.n	f61e <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    f5e0:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    f5e4:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    f5e6:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    f5e8:	b289      	uxth	r1, r1
    f5ea:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    f5ee:	d10a      	bne.n	f606 <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    f5f0:	b13d      	cbz	r5, f602 <process_event+0xa6>
    f5f2:	8b63      	ldrh	r3, [r4, #26]
    f5f4:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    f5f6:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
    f5f8:	3301      	adds	r3, #1
    f5fa:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    f5fc:	2a00      	cmp	r2, #0
    f5fe:	d1fa      	bne.n	f5f6 <process_event+0x9a>
    f600:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    f602:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    f606:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    f608:	4620      	mov	r0, r4
    f60a:	f00a fb6e 	bl	19cea <process_recheck>
    f60e:	4606      	mov	r6, r0
    f610:	2800      	cmp	r0, #0
    f612:	d0d3      	beq.n	f5bc <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    f614:	8b23      	ldrh	r3, [r4, #24]
    f616:	f043 0320 	orr.w	r3, r3, #32
    f61a:	8323      	strh	r3, [r4, #24]
    f61c:	e7cd      	b.n	f5ba <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    f61e:	2b04      	cmp	r3, #4
    f620:	d10c      	bne.n	f63c <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    f622:	f021 0107 	bic.w	r1, r1, #7
    f626:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    f628:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    f62a:	4620      	mov	r0, r4
    f62c:	f00a fb5d 	bl	19cea <process_recheck>
    f630:	4605      	mov	r5, r0
    f632:	2800      	cmp	r0, #0
    f634:	d0c1      	beq.n	f5ba <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    f636:	f041 0120 	orr.w	r1, r1, #32
    f63a:	8321      	strh	r1, [r4, #24]
    f63c:	2500      	movs	r5, #0
    f63e:	e7bc      	b.n	f5ba <process_event+0x5e>
		} else if (evt == EVT_START) {
    f640:	2803      	cmp	r0, #3
    f642:	d109      	bne.n	f658 <process_event+0xfc>
			transit = mgr->transitions->start;
    f644:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    f646:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    f64a:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    f64c:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    f650:	8323      	strh	r3, [r4, #24]
}
    f652:	2500      	movs	r5, #0
		res = 0;
    f654:	462f      	mov	r7, r5
    f656:	e7b1      	b.n	f5bc <process_event+0x60>
		} else if (evt == EVT_STOP) {
    f658:	2804      	cmp	r0, #4
    f65a:	d106      	bne.n	f66a <process_event+0x10e>
			transit = mgr->transitions->stop;
    f65c:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    f65e:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    f662:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    f664:	f043 0304 	orr.w	r3, r3, #4
    f668:	e7f2      	b.n	f650 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
    f66a:	2805      	cmp	r0, #5
    f66c:	d106      	bne.n	f67c <process_event+0x120>
			transit = mgr->transitions->reset;
    f66e:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    f670:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    f674:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    f676:	f043 0305 	orr.w	r3, r3, #5
    f67a:	e7e9      	b.n	f650 <process_event+0xf4>
    f67c:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    f67e:	462e      	mov	r6, r5
    f680:	e7e8      	b.n	f654 <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
    f682:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    f684:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    f688:	8321      	strh	r1, [r4, #24]
    f68a:	f38b 8811 	msr	BASEPRI, fp
    f68e:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    f692:	b9fb      	cbnz	r3, f6d4 <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
    f694:	bb85      	cbnz	r5, f6f8 <process_event+0x19c>
			if (transit != NULL) {
    f696:	b116      	cbz	r6, f69e <process_event+0x142>
				transit(mgr, transition_complete);
    f698:	491f      	ldr	r1, [pc, #124]	; (f718 <process_event+0x1bc>)
    f69a:	4620      	mov	r0, r4
    f69c:	47b0      	blx	r6
	__asm__ volatile(
    f69e:	f04f 0340 	mov.w	r3, #64	; 0x40
    f6a2:	f3ef 8b11 	mrs	fp, BASEPRI
    f6a6:	f383 8811 	msr	BASEPRI, r3
    f6aa:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    f6ae:	8b23      	ldrh	r3, [r4, #24]
    f6b0:	f023 0308 	bic.w	r3, r3, #8
    f6b4:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    f6b6:	8b23      	ldrh	r3, [r4, #24]
    f6b8:	06da      	lsls	r2, r3, #27
    f6ba:	d525      	bpl.n	f708 <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    f6bc:	f023 0310 	bic.w	r3, r3, #16
    f6c0:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    f6c2:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    f6c4:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    f6c8:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    f6cc:	2900      	cmp	r1, #0
    f6ce:	f47f af5e 	bne.w	f58e <process_event+0x32>
out:
    f6d2:	e754      	b.n	f57e <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    f6d4:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    f6d6:	2900      	cmp	r1, #0
    f6d8:	d0dc      	beq.n	f694 <process_event+0x138>
	return node->next;
    f6da:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
    f6de:	f8d1 b004 	ldr.w	fp, [r1, #4]
    f6e2:	463b      	mov	r3, r7
    f6e4:	4652      	mov	r2, sl
    f6e6:	4620      	mov	r0, r4
    f6e8:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    f6ea:	f1b9 0f00 	cmp.w	r9, #0
    f6ee:	d0d1      	beq.n	f694 <process_event+0x138>
    f6f0:	4649      	mov	r1, r9
    f6f2:	f8d9 9000 	ldr.w	r9, [r9]
    f6f6:	e7f2      	b.n	f6de <process_event+0x182>
    f6f8:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    f6fa:	463b      	mov	r3, r7
    f6fc:	4652      	mov	r2, sl
    f6fe:	4620      	mov	r0, r4
    f700:	682d      	ldr	r5, [r5, #0]
    f702:	f00a fb0e 	bl	19d22 <notify_one>
    f706:	e7c5      	b.n	f694 <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    f708:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    f70c:	bf1e      	ittt	ne
    f70e:	f023 0320 	bicne.w	r3, r3, #32
    f712:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    f714:	2102      	movne	r1, #2
    f716:	e7d5      	b.n	f6c4 <process_event+0x168>
    f718:	00019d4f 	.word	0x00019d4f

0000f71c <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    f71c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f720:	b091      	sub	sp, #68	; 0x44
    f722:	468b      	mov	fp, r1
    f724:	9002      	str	r0, [sp, #8]
    f726:	4692      	mov	sl, r2
    f728:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    f72a:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    f72c:	f89a 0000 	ldrb.w	r0, [sl]
    f730:	b908      	cbnz	r0, f736 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    f732:	4628      	mov	r0, r5
    f734:	e35f      	b.n	fdf6 <__kernel_ram_size+0x5de>
		if (*fp != '%') {
    f736:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    f738:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
    f73c:	d007      	beq.n	f74e <cbvprintf+0x32>
			OUTC('%');
    f73e:	9b02      	ldr	r3, [sp, #8]
    f740:	4659      	mov	r1, fp
    f742:	4798      	blx	r3
    f744:	2800      	cmp	r0, #0
    f746:	f2c0 8356 	blt.w	fdf6 <__kernel_ram_size+0x5de>
    f74a:	3501      	adds	r5, #1
			break;
    f74c:	e212      	b.n	fb74 <__kernel_ram_size+0x35c>
		} state = {
    f74e:	2218      	movs	r2, #24
    f750:	2100      	movs	r1, #0
    f752:	a80a      	add	r0, sp, #40	; 0x28
    f754:	f00b fd3b 	bl	1b1ce <memset>
	if (*sp == '%') {
    f758:	f89a 3001 	ldrb.w	r3, [sl, #1]
    f75c:	2b25      	cmp	r3, #37	; 0x25
    f75e:	d078      	beq.n	f852 <__kernel_ram_size+0x3a>
    f760:	2200      	movs	r2, #0
    f762:	4610      	mov	r0, r2
    f764:	4696      	mov	lr, r2
    f766:	4694      	mov	ip, r2
    f768:	4616      	mov	r6, r2
    f76a:	4639      	mov	r1, r7
		switch (*sp) {
    f76c:	f817 3b01 	ldrb.w	r3, [r7], #1
    f770:	2b2b      	cmp	r3, #43	; 0x2b
    f772:	f000 809d 	beq.w	f8b0 <__kernel_ram_size+0x98>
    f776:	f200 8094 	bhi.w	f8a2 <__kernel_ram_size+0x8a>
    f77a:	2b20      	cmp	r3, #32
    f77c:	f000 809b 	beq.w	f8b6 <__kernel_ram_size+0x9e>
    f780:	2b23      	cmp	r3, #35	; 0x23
    f782:	f000 809b 	beq.w	f8bc <__kernel_ram_size+0xa4>
    f786:	b12e      	cbz	r6, f794 <cbvprintf+0x78>
    f788:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    f78c:	f046 0604 	orr.w	r6, r6, #4
    f790:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
    f794:	f1bc 0f00 	cmp.w	ip, #0
    f798:	d005      	beq.n	f7a6 <cbvprintf+0x8a>
    f79a:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    f79e:	f046 0608 	orr.w	r6, r6, #8
    f7a2:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
    f7a6:	f1be 0f00 	cmp.w	lr, #0
    f7aa:	d005      	beq.n	f7b8 <cbvprintf+0x9c>
    f7ac:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    f7b0:	f046 0610 	orr.w	r6, r6, #16
    f7b4:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
    f7b8:	b128      	cbz	r0, f7c6 <cbvprintf+0xaa>
    f7ba:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    f7be:	f040 0020 	orr.w	r0, r0, #32
    f7c2:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    f7c6:	b12a      	cbz	r2, f7d4 <cbvprintf+0xb8>
    f7c8:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    f7cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    f7d0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
    f7d4:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    f7d8:	f002 0044 	and.w	r0, r2, #68	; 0x44
    f7dc:	2844      	cmp	r0, #68	; 0x44
    f7de:	d103      	bne.n	f7e8 <cbvprintf+0xcc>
		conv->flag_zero = false;
    f7e0:	f36f 1286 	bfc	r2, #6, #1
    f7e4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
    f7e8:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    f7ec:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    f7ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    f7f2:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    f7f6:	d17b      	bne.n	f8f0 <__kernel_ram_size+0xd8>
		conv->width_star = true;
    f7f8:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    f7fc:	f042 0201 	orr.w	r2, r2, #1
			++sp;
    f800:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    f802:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
    f806:	781a      	ldrb	r2, [r3, #0]
    f808:	2a2e      	cmp	r2, #46	; 0x2e
    f80a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    f80e:	bf0c      	ite	eq
    f810:	2101      	moveq	r1, #1
    f812:	2100      	movne	r1, #0
    f814:	f361 0241 	bfi	r2, r1, #1, #1
    f818:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
    f81c:	d174      	bne.n	f908 <__kernel_ram_size+0xf0>
	if (*sp == '*') {
    f81e:	785a      	ldrb	r2, [r3, #1]
    f820:	2a2a      	cmp	r2, #42	; 0x2a
    f822:	d06a      	beq.n	f8fa <__kernel_ram_size+0xe2>
	++sp;
    f824:	3301      	adds	r3, #1
	size_t val = 0;
    f826:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    f828:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    f82a:	4618      	mov	r0, r3
    f82c:	f810 2b01 	ldrb.w	r2, [r0], #1
    f830:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    f834:	2f09      	cmp	r7, #9
    f836:	f240 808e 	bls.w	f956 <__kernel_ram_size+0x13e>
	conv->unsupported |= ((conv->prec_value < 0)
    f83a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
    f83e:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
    f840:	f3c2 0040 	ubfx	r0, r2, #1, #1
    f844:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    f848:	f361 0241 	bfi	r2, r1, #1, #1
    f84c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    f850:	e05a      	b.n	f908 <__kernel_ram_size+0xf0>
		conv->specifier = *sp++;
    f852:	f10a 0702 	add.w	r7, sl, #2
    f856:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
    f85a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    f85e:	07d9      	lsls	r1, r3, #31
    f860:	f140 8149 	bpl.w	faf6 <__kernel_ram_size+0x2de>
			width = va_arg(ap, int);
    f864:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    f868:	f1b9 0f00 	cmp.w	r9, #0
    f86c:	da07      	bge.n	f87e <__kernel_ram_size+0x66>
				conv->flag_dash = true;
    f86e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    f872:	f042 0204 	orr.w	r2, r2, #4
    f876:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
    f87a:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
    f87e:	075a      	lsls	r2, r3, #29
    f880:	f140 8142 	bpl.w	fb08 <__kernel_ram_size+0x2f0>
			int arg = va_arg(ap, int);
    f884:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    f888:	f1b8 0f00 	cmp.w	r8, #0
    f88c:	f280 8141 	bge.w	fb12 <__kernel_ram_size+0x2fa>
				conv->prec_present = false;
    f890:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    f894:	f36f 0341 	bfc	r3, #1, #1
    f898:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
    f89c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    f8a0:	e137      	b.n	fb12 <__kernel_ram_size+0x2fa>
		switch (*sp) {
    f8a2:	2b2d      	cmp	r3, #45	; 0x2d
    f8a4:	d00c      	beq.n	f8c0 <__kernel_ram_size+0xa8>
    f8a6:	2b30      	cmp	r3, #48	; 0x30
    f8a8:	f47f af6d 	bne.w	f786 <cbvprintf+0x6a>
			conv->flag_zero = true;
    f8ac:	2201      	movs	r2, #1
	} while (loop);
    f8ae:	e75c      	b.n	f76a <cbvprintf+0x4e>
			conv->flag_plus = true;
    f8b0:	f04f 0c01 	mov.w	ip, #1
    f8b4:	e759      	b.n	f76a <cbvprintf+0x4e>
			conv->flag_space = true;
    f8b6:	f04f 0e01 	mov.w	lr, #1
    f8ba:	e756      	b.n	f76a <cbvprintf+0x4e>
			conv->flag_hash = true;
    f8bc:	2001      	movs	r0, #1
    f8be:	e754      	b.n	f76a <cbvprintf+0x4e>
		switch (*sp) {
    f8c0:	2601      	movs	r6, #1
    f8c2:	e752      	b.n	f76a <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
    f8c4:	fb0c 0202 	mla	r2, ip, r2, r0
    f8c8:	3a30      	subs	r2, #48	; 0x30
    f8ca:	4633      	mov	r3, r6
    f8cc:	461e      	mov	r6, r3
    f8ce:	f816 0b01 	ldrb.w	r0, [r6], #1
    f8d2:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    f8d6:	2f09      	cmp	r7, #9
    f8d8:	d9f4      	bls.n	f8c4 <__kernel_ram_size+0xac>
	if (sp != wp) {
    f8da:	4299      	cmp	r1, r3
    f8dc:	d093      	beq.n	f806 <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    f8de:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
    f8e2:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
    f8e4:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    f8e6:	f362 0141 	bfi	r1, r2, #1, #1
    f8ea:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
    f8ee:	e78a      	b.n	f806 <cbvprintf+0xea>
    f8f0:	460b      	mov	r3, r1
	size_t val = 0;
    f8f2:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    f8f4:	f04f 0c0a 	mov.w	ip, #10
    f8f8:	e7e8      	b.n	f8cc <__kernel_ram_size+0xb4>
		conv->prec_star = true;
    f8fa:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    f8fe:	f042 0204 	orr.w	r2, r2, #4
    f902:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
    f906:	3302      	adds	r3, #2
	switch (*sp) {
    f908:	461f      	mov	r7, r3
    f90a:	f817 2b01 	ldrb.w	r2, [r7], #1
    f90e:	2a6c      	cmp	r2, #108	; 0x6c
    f910:	d041      	beq.n	f996 <__kernel_ram_size+0x17e>
    f912:	d825      	bhi.n	f960 <__kernel_ram_size+0x148>
    f914:	2a68      	cmp	r2, #104	; 0x68
    f916:	d02b      	beq.n	f970 <__kernel_ram_size+0x158>
    f918:	2a6a      	cmp	r2, #106	; 0x6a
    f91a:	d046      	beq.n	f9aa <__kernel_ram_size+0x192>
    f91c:	2a4c      	cmp	r2, #76	; 0x4c
    f91e:	d04c      	beq.n	f9ba <__kernel_ram_size+0x1a2>
    f920:	461f      	mov	r7, r3
	conv->specifier = *sp++;
    f922:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    f926:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	conv->specifier = *sp++;
    f92a:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
    f92e:	2a78      	cmp	r2, #120	; 0x78
    f930:	f200 80d9 	bhi.w	fae6 <__kernel_ram_size+0x2ce>
    f934:	2a57      	cmp	r2, #87	; 0x57
    f936:	d84d      	bhi.n	f9d4 <__kernel_ram_size+0x1bc>
    f938:	2a41      	cmp	r2, #65	; 0x41
    f93a:	d003      	beq.n	f944 <__kernel_ram_size+0x12c>
    f93c:	3a45      	subs	r2, #69	; 0x45
    f93e:	2a02      	cmp	r2, #2
    f940:	f200 80d1 	bhi.w	fae6 <__kernel_ram_size+0x2ce>
		conv->specifier_cat = SPECIFIER_FP;
    f944:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    f948:	2204      	movs	r2, #4
    f94a:	f362 0302 	bfi	r3, r2, #0, #3
    f94e:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
    f952:	2301      	movs	r3, #1
			break;
    f954:	e09e      	b.n	fa94 <__kernel_ram_size+0x27c>
		val = 10U * val + *sp++ - '0';
    f956:	fb06 2101 	mla	r1, r6, r1, r2
    f95a:	3930      	subs	r1, #48	; 0x30
    f95c:	4603      	mov	r3, r0
    f95e:	e764      	b.n	f82a <__kernel_ram_size+0x12>
	switch (*sp) {
    f960:	2a74      	cmp	r2, #116	; 0x74
    f962:	d026      	beq.n	f9b2 <__kernel_ram_size+0x19a>
    f964:	2a7a      	cmp	r2, #122	; 0x7a
    f966:	d1db      	bne.n	f920 <__kernel_ram_size+0x108>
		conv->length_mod = LENGTH_Z;
    f968:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    f96c:	2206      	movs	r2, #6
    f96e:	e00d      	b.n	f98c <__kernel_ram_size+0x174>
		if (*++sp == 'h') {
    f970:	785a      	ldrb	r2, [r3, #1]
    f972:	2a68      	cmp	r2, #104	; 0x68
    f974:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    f978:	d106      	bne.n	f988 <__kernel_ram_size+0x170>
			conv->length_mod = LENGTH_HH;
    f97a:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    f97c:	f361 02c6 	bfi	r2, r1, #3, #4
    f980:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
    f984:	1c9f      	adds	r7, r3, #2
    f986:	e7cc      	b.n	f922 <__kernel_ram_size+0x10a>
			conv->length_mod = LENGTH_H;
    f988:	4613      	mov	r3, r2
    f98a:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    f98c:	f362 03c6 	bfi	r3, r2, #3, #4
    f990:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
    f994:	e7c5      	b.n	f922 <__kernel_ram_size+0x10a>
		if (*++sp == 'l') {
    f996:	785a      	ldrb	r2, [r3, #1]
    f998:	2a6c      	cmp	r2, #108	; 0x6c
    f99a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    f99e:	d101      	bne.n	f9a4 <__kernel_ram_size+0x18c>
			conv->length_mod = LENGTH_LL;
    f9a0:	2104      	movs	r1, #4
    f9a2:	e7eb      	b.n	f97c <__kernel_ram_size+0x164>
			conv->length_mod = LENGTH_L;
    f9a4:	4613      	mov	r3, r2
    f9a6:	2203      	movs	r2, #3
    f9a8:	e7f0      	b.n	f98c <__kernel_ram_size+0x174>
		conv->length_mod = LENGTH_J;
    f9aa:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    f9ae:	2205      	movs	r2, #5
    f9b0:	e7ec      	b.n	f98c <__kernel_ram_size+0x174>
		conv->length_mod = LENGTH_T;
    f9b2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    f9b6:	2207      	movs	r2, #7
    f9b8:	e7e8      	b.n	f98c <__kernel_ram_size+0x174>
		conv->unsupported = true;
    f9ba:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    f9be:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    f9c2:	f023 0302 	bic.w	r3, r3, #2
    f9c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    f9ca:	f043 0302 	orr.w	r3, r3, #2
    f9ce:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
    f9d2:	e7a6      	b.n	f922 <__kernel_ram_size+0x10a>
	switch (conv->specifier) {
    f9d4:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    f9d8:	2920      	cmp	r1, #32
    f9da:	f200 8084 	bhi.w	fae6 <__kernel_ram_size+0x2ce>
    f9de:	a001      	add	r0, pc, #4	; (adr r0, f9e4 <__kernel_ram_size+0x1cc>)
    f9e0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    f9e4:	0000faa9 	.word	0x0000faa9
    f9e8:	0000fae7 	.word	0x0000fae7
    f9ec:	0000fae7 	.word	0x0000fae7
    f9f0:	0000fae7 	.word	0x0000fae7
    f9f4:	0000fae7 	.word	0x0000fae7
    f9f8:	0000fae7 	.word	0x0000fae7
    f9fc:	0000fae7 	.word	0x0000fae7
    fa00:	0000fae7 	.word	0x0000fae7
    fa04:	0000fae7 	.word	0x0000fae7
    fa08:	0000f945 	.word	0x0000f945
    fa0c:	0000fae7 	.word	0x0000fae7
    fa10:	0000faa9 	.word	0x0000faa9
    fa14:	0000fa69 	.word	0x0000fa69
    fa18:	0000f945 	.word	0x0000f945
    fa1c:	0000f945 	.word	0x0000f945
    fa20:	0000f945 	.word	0x0000f945
    fa24:	0000fae7 	.word	0x0000fae7
    fa28:	0000fa69 	.word	0x0000fa69
    fa2c:	0000fae7 	.word	0x0000fae7
    fa30:	0000fae7 	.word	0x0000fae7
    fa34:	0000fae7 	.word	0x0000fae7
    fa38:	0000fae7 	.word	0x0000fae7
    fa3c:	0000fab1 	.word	0x0000fab1
    fa40:	0000faa9 	.word	0x0000faa9
    fa44:	0000facd 	.word	0x0000facd
    fa48:	0000fae7 	.word	0x0000fae7
    fa4c:	0000fae7 	.word	0x0000fae7
    fa50:	0000facd 	.word	0x0000facd
    fa54:	0000fae7 	.word	0x0000fae7
    fa58:	0000faa9 	.word	0x0000faa9
    fa5c:	0000fae7 	.word	0x0000fae7
    fa60:	0000fae7 	.word	0x0000fae7
    fa64:	0000faa9 	.word	0x0000faa9
		conv->specifier_cat = SPECIFIER_SINT;
    fa68:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    fa6c:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    fa6e:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    fa72:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    fa76:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    fa78:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
    fa7c:	bf02      	ittt	eq
    fa7e:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
    fa82:	f041 0101 	orreq.w	r1, r1, #1
    fa86:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
    fa8a:	2a63      	cmp	r2, #99	; 0x63
    fa8c:	d131      	bne.n	faf2 <__kernel_ram_size+0x2da>
			unsupported = (conv->length_mod != LENGTH_NONE);
    fa8e:	3b00      	subs	r3, #0
    fa90:	bf18      	it	ne
    fa92:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    fa94:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    fa98:	f3c2 0140 	ubfx	r1, r2, #1, #1
    fa9c:	430b      	orrs	r3, r1
    fa9e:	f363 0241 	bfi	r2, r3, #1, #1
    faa2:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    faa6:	e6d8      	b.n	f85a <__kernel_ram_size+0x42>
		conv->specifier_cat = SPECIFIER_UINT;
    faa8:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    faac:	2002      	movs	r0, #2
    faae:	e7de      	b.n	fa6e <__kernel_ram_size+0x256>
		conv->specifier_cat = SPECIFIER_PTR;
    fab0:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    fab4:	f003 0378 	and.w	r3, r3, #120	; 0x78
    fab8:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    fabc:	2103      	movs	r1, #3
    fabe:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    fac2:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    fac4:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    fac8:	4143      	adcs	r3, r0
    faca:	e7e3      	b.n	fa94 <__kernel_ram_size+0x27c>
		conv->specifier_cat = SPECIFIER_PTR;
    facc:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    fad0:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    fad2:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    fad6:	f361 0202 	bfi	r2, r1, #0, #3
    fada:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    fade:	bf14      	ite	ne
    fae0:	2301      	movne	r3, #1
    fae2:	2300      	moveq	r3, #0
    fae4:	e7d6      	b.n	fa94 <__kernel_ram_size+0x27c>
		conv->invalid = true;
    fae6:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    faea:	f043 0301 	orr.w	r3, r3, #1
    faee:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
    faf2:	2300      	movs	r3, #0
    faf4:	e7ce      	b.n	fa94 <__kernel_ram_size+0x27c>
		} else if (conv->width_present) {
    faf6:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    fafa:	2a00      	cmp	r2, #0
			width = conv->width_value;
    fafc:	bfb4      	ite	lt
    fafe:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
    fb02:	f04f 39ff 	movge.w	r9, #4294967295	; 0xffffffff
    fb06:	e6ba      	b.n	f87e <__kernel_ram_size+0x66>
		} else if (conv->prec_present) {
    fb08:	079b      	lsls	r3, r3, #30
    fb0a:	f57f aec7 	bpl.w	f89c <__kernel_ram_size+0x84>
			precision = conv->prec_value;
    fb0e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
    fb12:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_value = 0;
    fb16:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    fb18:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    fb1c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
    fb20:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    fb24:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    fb26:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    fb2a:	d138      	bne.n	fb9e <__kernel_ram_size+0x386>
			switch (length_mod) {
    fb2c:	1ecb      	subs	r3, r1, #3
    fb2e:	2b04      	cmp	r3, #4
    fb30:	d822      	bhi.n	fb78 <__kernel_ram_size+0x360>
    fb32:	e8df f003 	tbb	[pc, r3]
    fb36:	0903      	.short	0x0903
    fb38:	2109      	.short	0x2109
    fb3a:	21          	.byte	0x21
    fb3b:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    fb3c:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    fb40:	17da      	asrs	r2, r3, #31
    fb42:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
    fb46:	e006      	b.n	fb56 <__kernel_ram_size+0x33e>
					(sint_value_type)va_arg(ap, intmax_t);
    fb48:	3407      	adds	r4, #7
    fb4a:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    fb4e:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    fb52:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
    fb56:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    fb5a:	f013 0603 	ands.w	r6, r3, #3
    fb5e:	d056      	beq.n	fc0e <__kernel_ram_size+0x3f6>
			OUTS(sp, fp);
    fb60:	9802      	ldr	r0, [sp, #8]
    fb62:	463b      	mov	r3, r7
    fb64:	4652      	mov	r2, sl
    fb66:	4659      	mov	r1, fp
    fb68:	f00a fc65 	bl	1a436 <outs>
    fb6c:	2800      	cmp	r0, #0
    fb6e:	f2c0 8142 	blt.w	fdf6 <__kernel_ram_size+0x5de>
    fb72:	4405      	add	r5, r0
			continue;
    fb74:	46ba      	mov	sl, r7
    fb76:	e5d9      	b.n	f72c <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    fb78:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    fb7c:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    fb7e:	ea4f 72e3 	mov.w	r2, r3, asr #31
    fb82:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    fb86:	d105      	bne.n	fb94 <__kernel_ram_size+0x37c>
				value->uint = (unsigned char)value->uint;
    fb88:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
    fb8c:	930a      	str	r3, [sp, #40]	; 0x28
    fb8e:	2300      	movs	r3, #0
    fb90:	930b      	str	r3, [sp, #44]	; 0x2c
    fb92:	e7e0      	b.n	fb56 <__kernel_ram_size+0x33e>
			} else if (length_mod == LENGTH_H) {
    fb94:	2902      	cmp	r1, #2
    fb96:	d1de      	bne.n	fb56 <__kernel_ram_size+0x33e>
				value->sint = (short)value->sint;
    fb98:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
    fb9c:	e7d0      	b.n	fb40 <__kernel_ram_size+0x328>
		} else if (specifier_cat == SPECIFIER_UINT) {
    fb9e:	2b02      	cmp	r3, #2
    fba0:	d123      	bne.n	fbea <__kernel_ram_size+0x3d2>
			switch (length_mod) {
    fba2:	1ecb      	subs	r3, r1, #3
    fba4:	2b04      	cmp	r3, #4
    fba6:	d813      	bhi.n	fbd0 <__kernel_ram_size+0x3b8>
    fba8:	e8df f003 	tbb	[pc, r3]
    fbac:	120a0a03 	.word	0x120a0a03
    fbb0:	12          	.byte	0x12
    fbb1:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    fbb2:	6822      	ldr	r2, [r4, #0]
    fbb4:	920a      	str	r2, [sp, #40]	; 0x28
    fbb6:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
    fbb8:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    fbba:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
    fbbc:	4604      	mov	r4, r0
    fbbe:	e7ca      	b.n	fb56 <__kernel_ram_size+0x33e>
					(uint_value_type)va_arg(ap,
    fbc0:	1de0      	adds	r0, r4, #7
    fbc2:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
    fbc6:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    fbca:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
    fbce:	e7f5      	b.n	fbbc <__kernel_ram_size+0x3a4>
					(uint_value_type)va_arg(ap, size_t);
    fbd0:	f854 3b04 	ldr.w	r3, [r4], #4
    fbd4:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    fbd6:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    fbd8:	f04f 0300 	mov.w	r3, #0
    fbdc:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
    fbde:	d0d3      	beq.n	fb88 <__kernel_ram_size+0x370>
			} else if (length_mod == LENGTH_H) {
    fbe0:	2902      	cmp	r1, #2
    fbe2:	d1b8      	bne.n	fb56 <__kernel_ram_size+0x33e>
				value->uint = (unsigned short)value->uint;
    fbe4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    fbe8:	e7d0      	b.n	fb8c <__kernel_ram_size+0x374>
		} else if (specifier_cat == SPECIFIER_FP) {
    fbea:	2b04      	cmp	r3, #4
    fbec:	d109      	bne.n	fc02 <__kernel_ram_size+0x3ea>
					(sint_value_type)va_arg(ap, long long);
    fbee:	1de3      	adds	r3, r4, #7
    fbf0:	f023 0307 	bic.w	r3, r3, #7
    fbf4:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    fbf8:	e9d3 2300 	ldrd	r2, r3, [r3]
    fbfc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    fc00:	e7a9      	b.n	fb56 <__kernel_ram_size+0x33e>
		} else if (specifier_cat == SPECIFIER_PTR) {
    fc02:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    fc04:	bf04      	itt	eq
    fc06:	f854 3b04 	ldreq.w	r3, [r4], #4
    fc0a:	930a      	streq	r3, [sp, #40]	; 0x28
    fc0c:	e7a3      	b.n	fb56 <__kernel_ram_size+0x33e>
		switch (conv->specifier) {
    fc0e:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    fc12:	2878      	cmp	r0, #120	; 0x78
    fc14:	d8ae      	bhi.n	fb74 <__kernel_ram_size+0x35c>
    fc16:	2862      	cmp	r0, #98	; 0x62
    fc18:	d822      	bhi.n	fc60 <__kernel_ram_size+0x448>
    fc1a:	2825      	cmp	r0, #37	; 0x25
    fc1c:	f43f ad8f 	beq.w	f73e <cbvprintf+0x22>
    fc20:	2858      	cmp	r0, #88	; 0x58
    fc22:	d1a7      	bne.n	fb74 <__kernel_ram_size+0x35c>
			bps = encode_uint(value->uint, conv, buf, bpe);
    fc24:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    fc28:	9300      	str	r3, [sp, #0]
    fc2a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    fc2e:	ab04      	add	r3, sp, #16
    fc30:	aa0c      	add	r2, sp, #48	; 0x30
    fc32:	f00a fbba 	bl	1a3aa <encode_uint>
    fc36:	4682      	mov	sl, r0
			if (precision >= 0) {
    fc38:	f1b8 0f00 	cmp.w	r8, #0
    fc3c:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    fc40:	db0c      	blt.n	fc5c <__kernel_ram_size+0x444>
				conv->flag_zero = false;
    fc42:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    fc46:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
    fc4a:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    fc4e:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    fc50:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    fc54:	d902      	bls.n	fc5c <__kernel_ram_size+0x444>
					conv->pad0_value = precision - (int)len;
    fc56:	eba8 0303 	sub.w	r3, r8, r3
    fc5a:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    fc5c:	4680      	mov	r8, r0
    fc5e:	e03d      	b.n	fcdc <__kernel_ram_size+0x4c4>
		switch (conv->specifier) {
    fc60:	3863      	subs	r0, #99	; 0x63
    fc62:	2815      	cmp	r0, #21
    fc64:	d886      	bhi.n	fb74 <__kernel_ram_size+0x35c>
    fc66:	a201      	add	r2, pc, #4	; (adr r2, fc6c <__kernel_ram_size+0x454>)
    fc68:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    fc6c:	0000fced 	.word	0x0000fced
    fc70:	0000fd51 	.word	0x0000fd51
    fc74:	0000fb75 	.word	0x0000fb75
    fc78:	0000fb75 	.word	0x0000fb75
    fc7c:	0000fb75 	.word	0x0000fb75
    fc80:	0000fb75 	.word	0x0000fb75
    fc84:	0000fd51 	.word	0x0000fd51
    fc88:	0000fb75 	.word	0x0000fb75
    fc8c:	0000fb75 	.word	0x0000fb75
    fc90:	0000fb75 	.word	0x0000fb75
    fc94:	0000fb75 	.word	0x0000fb75
    fc98:	0000fdab 	.word	0x0000fdab
    fc9c:	0000fd79 	.word	0x0000fd79
    fca0:	0000fd7d 	.word	0x0000fd7d
    fca4:	0000fb75 	.word	0x0000fb75
    fca8:	0000fb75 	.word	0x0000fb75
    fcac:	0000fcc5 	.word	0x0000fcc5
    fcb0:	0000fb75 	.word	0x0000fb75
    fcb4:	0000fd79 	.word	0x0000fd79
    fcb8:	0000fb75 	.word	0x0000fb75
    fcbc:	0000fb75 	.word	0x0000fb75
    fcc0:	0000fd79 	.word	0x0000fd79
			if (precision >= 0) {
    fcc4:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    fcc8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    fccc:	db0a      	blt.n	fce4 <__kernel_ram_size+0x4cc>
				len = strnlen(bps, precision);
    fcce:	4641      	mov	r1, r8
    fcd0:	4650      	mov	r0, sl
    fcd2:	f00b fa4b 	bl	1b16c <strnlen>
			bpe = bps + len;
    fcd6:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
    fcda:	2600      	movs	r6, #0
		if (bps == NULL) {
    fcdc:	f1ba 0f00 	cmp.w	sl, #0
    fce0:	d10c      	bne.n	fcfc <__kernel_ram_size+0x4e4>
    fce2:	e747      	b.n	fb74 <__kernel_ram_size+0x35c>
				len = strlen(bps);
    fce4:	4650      	mov	r0, sl
    fce6:	f00b fa3a 	bl	1b15e <strlen>
    fcea:	e7f4      	b.n	fcd6 <__kernel_ram_size+0x4be>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    fcec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fcee:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
    fcf2:	2600      	movs	r6, #0
			bps = buf;
    fcf4:	f10d 0a10 	add.w	sl, sp, #16
			bpe = buf + 1;
    fcf8:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
    fcfc:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    fd00:	b106      	cbz	r6, fd04 <__kernel_ram_size+0x4ec>
			nj_len += 1U;
    fd02:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    fd04:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    fd08:	06d0      	lsls	r0, r2, #27
    fd0a:	d568      	bpl.n	fdde <__kernel_ram_size+0x5c6>
			nj_len += 2U;
    fd0c:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    fd0e:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    fd10:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    fd12:	bf48      	it	mi
    fd14:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    fd16:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    fd18:	bf48      	it	mi
    fd1a:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    fd1c:	f1b9 0f00 	cmp.w	r9, #0
    fd20:	dd76      	ble.n	fe10 <__kernel_ram_size+0x5f8>
			if (!conv->flag_dash) {
    fd22:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    fd26:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    fd2a:	f3c2 0380 	ubfx	r3, r2, #2, #1
    fd2e:	9303      	str	r3, [sp, #12]
    fd30:	0753      	lsls	r3, r2, #29
    fd32:	d46d      	bmi.n	fe10 <__kernel_ram_size+0x5f8>
				if (conv->flag_zero) {
    fd34:	0650      	lsls	r0, r2, #25
    fd36:	d561      	bpl.n	fdfc <__kernel_ram_size+0x5e4>
					if (sign != 0) {
    fd38:	b146      	cbz	r6, fd4c <__kernel_ram_size+0x534>
						OUTC(sign);
    fd3a:	9b02      	ldr	r3, [sp, #8]
    fd3c:	4659      	mov	r1, fp
    fd3e:	4630      	mov	r0, r6
    fd40:	4798      	blx	r3
    fd42:	2800      	cmp	r0, #0
    fd44:	db57      	blt.n	fdf6 <__kernel_ram_size+0x5de>
						sign = 0;
    fd46:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    fd48:	3501      	adds	r5, #1
						sign = 0;
    fd4a:	461e      	mov	r6, r3
					pad = '0';
    fd4c:	2330      	movs	r3, #48	; 0x30
    fd4e:	e056      	b.n	fdfe <__kernel_ram_size+0x5e6>
			if (conv->flag_plus) {
    fd50:	071e      	lsls	r6, r3, #28
    fd52:	d40f      	bmi.n	fd74 <__kernel_ram_size+0x55c>
				sign = ' ';
    fd54:	f013 0610 	ands.w	r6, r3, #16
    fd58:	bf18      	it	ne
    fd5a:	2620      	movne	r6, #32
			sint = value->sint;
    fd5c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
    fd60:	2b00      	cmp	r3, #0
    fd62:	f6bf af5f 	bge.w	fc24 <__kernel_ram_size+0x40c>
				value->uint = (uint_value_type)-sint;
    fd66:	4252      	negs	r2, r2
    fd68:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    fd6c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
    fd70:	262d      	movs	r6, #45	; 0x2d
    fd72:	e757      	b.n	fc24 <__kernel_ram_size+0x40c>
				sign = '+';
    fd74:	262b      	movs	r6, #43	; 0x2b
    fd76:	e7f1      	b.n	fd5c <__kernel_ram_size+0x544>
		switch (conv->specifier) {
    fd78:	2600      	movs	r6, #0
    fd7a:	e753      	b.n	fc24 <__kernel_ram_size+0x40c>
			if (value->ptr != NULL) {
    fd7c:	980a      	ldr	r0, [sp, #40]	; 0x28
    fd7e:	b340      	cbz	r0, fdd2 <__kernel_ram_size+0x5ba>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    fd80:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    fd84:	9300      	str	r3, [sp, #0]
    fd86:	aa0c      	add	r2, sp, #48	; 0x30
    fd88:	ab04      	add	r3, sp, #16
    fd8a:	2100      	movs	r1, #0
    fd8c:	f00a fb0d 	bl	1a3aa <encode_uint>
				conv->altform_0c = true;
    fd90:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    fd94:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    fd98:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    fd9c:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    fda0:	4682      	mov	sl, r0
				conv->altform_0c = true;
    fda2:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
    fda6:	2600      	movs	r6, #0
				goto prec_int_pad0;
    fda8:	e746      	b.n	fc38 <__kernel_ram_size+0x420>
				store_count(conv, value->ptr, count);
    fdaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    fdac:	2907      	cmp	r1, #7
    fdae:	f63f aee1 	bhi.w	fb74 <__kernel_ram_size+0x35c>
    fdb2:	e8df f001 	tbb	[pc, r1]
    fdb6:	040c      	.short	0x040c
    fdb8:	08080c06 	.word	0x08080c06
    fdbc:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    fdbe:	701d      	strb	r5, [r3, #0]
		break;
    fdc0:	e6d8      	b.n	fb74 <__kernel_ram_size+0x35c>
		*(short *)dp = (short)count;
    fdc2:	801d      	strh	r5, [r3, #0]
		break;
    fdc4:	e6d6      	b.n	fb74 <__kernel_ram_size+0x35c>
		*(intmax_t *)dp = (intmax_t)count;
    fdc6:	17ea      	asrs	r2, r5, #31
    fdc8:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    fdcc:	e6d2      	b.n	fb74 <__kernel_ram_size+0x35c>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    fdce:	601d      	str	r5, [r3, #0]
		break;
    fdd0:	e6d0      	b.n	fb74 <__kernel_ram_size+0x35c>
			bps = "(nil)";
    fdd2:	f8df a0c8 	ldr.w	sl, [pc, #200]	; fe9c <__kernel_ram_size+0x684>
    fdd6:	4606      	mov	r6, r0
			bpe = bps + 5;
    fdd8:	f10a 0805 	add.w	r8, sl, #5
    fddc:	e78e      	b.n	fcfc <__kernel_ram_size+0x4e4>
		} else if (conv->altform_0) {
    fdde:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    fde0:	bf48      	it	mi
    fde2:	3301      	addmi	r3, #1
    fde4:	e793      	b.n	fd0e <__kernel_ram_size+0x4f6>
					OUTC(pad);
    fde6:	4618      	mov	r0, r3
    fde8:	9303      	str	r3, [sp, #12]
    fdea:	4659      	mov	r1, fp
    fdec:	9b02      	ldr	r3, [sp, #8]
    fdee:	4798      	blx	r3
    fdf0:	2800      	cmp	r0, #0
    fdf2:	9b03      	ldr	r3, [sp, #12]
    fdf4:	da04      	bge.n	fe00 <__kernel_ram_size+0x5e8>
#undef OUTS
#undef OUTC
}
    fdf6:	b011      	add	sp, #68	; 0x44
    fdf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    fdfc:	2320      	movs	r3, #32
    fdfe:	444d      	add	r5, r9
    fe00:	464a      	mov	r2, r9
				while (width-- > 0) {
    fe02:	2a00      	cmp	r2, #0
    fe04:	eba5 0109 	sub.w	r1, r5, r9
    fe08:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    fe0c:	dceb      	bgt.n	fde6 <__kernel_ram_size+0x5ce>
    fe0e:	460d      	mov	r5, r1
		if (sign != 0) {
    fe10:	b136      	cbz	r6, fe20 <__kernel_ram_size+0x608>
			OUTC(sign);
    fe12:	9b02      	ldr	r3, [sp, #8]
    fe14:	4659      	mov	r1, fp
    fe16:	4630      	mov	r0, r6
    fe18:	4798      	blx	r3
    fe1a:	2800      	cmp	r0, #0
    fe1c:	dbeb      	blt.n	fdf6 <__kernel_ram_size+0x5de>
    fe1e:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    fe20:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    fe24:	06d9      	lsls	r1, r3, #27
    fe26:	d401      	bmi.n	fe2c <__kernel_ram_size+0x614>
    fe28:	071a      	lsls	r2, r3, #28
    fe2a:	d506      	bpl.n	fe3a <__kernel_ram_size+0x622>
				OUTC('0');
    fe2c:	9b02      	ldr	r3, [sp, #8]
    fe2e:	4659      	mov	r1, fp
    fe30:	2030      	movs	r0, #48	; 0x30
    fe32:	4798      	blx	r3
    fe34:	2800      	cmp	r0, #0
    fe36:	dbde      	blt.n	fdf6 <__kernel_ram_size+0x5de>
    fe38:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    fe3a:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    fe3e:	06db      	lsls	r3, r3, #27
    fe40:	d507      	bpl.n	fe52 <__kernel_ram_size+0x63a>
				OUTC(conv->specifier);
    fe42:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    fe46:	9b02      	ldr	r3, [sp, #8]
    fe48:	4659      	mov	r1, fp
    fe4a:	4798      	blx	r3
    fe4c:	2800      	cmp	r0, #0
    fe4e:	dbd2      	blt.n	fdf6 <__kernel_ram_size+0x5de>
    fe50:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    fe52:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    fe54:	442e      	add	r6, r5
    fe56:	1b73      	subs	r3, r6, r5
    fe58:	2b00      	cmp	r3, #0
    fe5a:	dc16      	bgt.n	fe8a <__kernel_ram_size+0x672>
			OUTS(bps, bpe);
    fe5c:	9802      	ldr	r0, [sp, #8]
    fe5e:	4643      	mov	r3, r8
    fe60:	4652      	mov	r2, sl
    fe62:	4659      	mov	r1, fp
    fe64:	f00a fae7 	bl	1a436 <outs>
    fe68:	2800      	cmp	r0, #0
    fe6a:	dbc4      	blt.n	fdf6 <__kernel_ram_size+0x5de>
    fe6c:	4405      	add	r5, r0
		while (width > 0) {
    fe6e:	44a9      	add	r9, r5
    fe70:	eba9 0305 	sub.w	r3, r9, r5
    fe74:	2b00      	cmp	r3, #0
    fe76:	f77f ae7d 	ble.w	fb74 <__kernel_ram_size+0x35c>
			OUTC(' ');
    fe7a:	9b02      	ldr	r3, [sp, #8]
    fe7c:	4659      	mov	r1, fp
    fe7e:	2020      	movs	r0, #32
    fe80:	4798      	blx	r3
    fe82:	2800      	cmp	r0, #0
    fe84:	dbb7      	blt.n	fdf6 <__kernel_ram_size+0x5de>
    fe86:	3501      	adds	r5, #1
			--width;
    fe88:	e7f2      	b.n	fe70 <__kernel_ram_size+0x658>
				OUTC('0');
    fe8a:	9b02      	ldr	r3, [sp, #8]
    fe8c:	4659      	mov	r1, fp
    fe8e:	2030      	movs	r0, #48	; 0x30
    fe90:	4798      	blx	r3
    fe92:	2800      	cmp	r0, #0
    fe94:	dbaf      	blt.n	fdf6 <__kernel_ram_size+0x5de>
    fe96:	3501      	adds	r5, #1
    fe98:	e7dd      	b.n	fe56 <__kernel_ram_size+0x63e>
    fe9a:	bf00      	nop
    fe9c:	0001e1ca 	.word	0x0001e1ca

0000fea0 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    fea0:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    fea2:	4910      	ldr	r1, [pc, #64]	; (fee4 <enable_logger+0x44>)
    fea4:	4810      	ldr	r0, [pc, #64]	; (fee8 <enable_logger+0x48>)
{
    fea6:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    fea8:	2200      	movs	r2, #0
    feaa:	f00d f9a2 	bl	1d1f2 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    feae:	4d0f      	ldr	r5, [pc, #60]	; (feec <enable_logger+0x4c>)
    feb0:	490f      	ldr	r1, [pc, #60]	; (fef0 <enable_logger+0x50>)
    feb2:	2200      	movs	r2, #0
    feb4:	2300      	movs	r3, #0
    feb6:	e9cd 2306 	strd	r2, r3, [sp, #24]
    feba:	2400      	movs	r4, #0
    febc:	230e      	movs	r3, #14
    febe:	e9cd 3403 	strd	r3, r4, [sp, #12]
    fec2:	e9cd 4401 	strd	r4, r4, [sp, #4]
    fec6:	4b0b      	ldr	r3, [pc, #44]	; (fef4 <enable_logger+0x54>)
    fec8:	9400      	str	r4, [sp, #0]
    feca:	f44f 7240 	mov.w	r2, #768	; 0x300
    fece:	4628      	mov	r0, r5
    fed0:	f008 fd32 	bl	18938 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    fed4:	4908      	ldr	r1, [pc, #32]	; (fef8 <enable_logger+0x58>)
    fed6:	4628      	mov	r0, r5
    fed8:	f00c fe2e 	bl	1cb38 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    fedc:	4620      	mov	r0, r4
    fede:	b009      	add	sp, #36	; 0x24
    fee0:	bd30      	pop	{r4, r5, pc}
    fee2:	bf00      	nop
    fee4:	0000fefd 	.word	0x0000fefd
    fee8:	20001320 	.word	0x20001320
    feec:	20001358 	.word	0x20001358
    fef0:	20003420 	.word	0x20003420
    fef4:	00010281 	.word	0x00010281
    fef8:	0001e1d0 	.word	0x0001e1d0

0000fefc <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
    fefc:	4801      	ldr	r0, [pc, #4]	; (ff04 <log_process_thread_timer_expiry_fn+0x8>)
    fefe:	f008 bea7 	b.w	18c50 <z_impl_k_sem_give>
    ff02:	bf00      	nop
    ff04:	20000694 	.word	0x20000694

0000ff08 <log_core_init>:
{
    ff08:	b510      	push	{r4, lr}
	panic_mode = false;
    ff0a:	4b0b      	ldr	r3, [pc, #44]	; (ff38 <log_core_init+0x30>)
    ff0c:	2200      	movs	r2, #0
    ff0e:	701a      	strb	r2, [r3, #0]
		timestamp_func = default_get_timestamp;
    ff10:	4b0a      	ldr	r3, [pc, #40]	; (ff3c <log_core_init+0x34>)
    ff12:	4a0b      	ldr	r2, [pc, #44]	; (ff40 <log_core_init+0x38>)
    ff14:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    ff16:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    ff1a:	f000 fcc1 	bl	108a0 <log_output_timestamp_freq_set>
		log_msg_pool_init();
    ff1e:	f000 fa73 	bl	10408 <log_msg_pool_init>
		log_list_init(&list);
    ff22:	4808      	ldr	r0, [pc, #32]	; (ff44 <log_core_init+0x3c>)
    ff24:	f00a fa9e 	bl	1a464 <log_list_init>
}
    ff28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    ff2c:	4906      	ldr	r1, [pc, #24]	; (ff48 <log_core_init+0x40>)
    ff2e:	4807      	ldr	r0, [pc, #28]	; (ff4c <log_core_init+0x44>)
    ff30:	2308      	movs	r3, #8
    ff32:	2248      	movs	r2, #72	; 0x48
    ff34:	f00c bdb6 	b.w	1caa4 <k_mem_slab_init>
    ff38:	200027ce 	.word	0x200027ce
    ff3c:	20000458 	.word	0x20000458
    ff40:	0001a4a3 	.word	0x0001a4a3
    ff44:	200022e0 	.word	0x200022e0
    ff48:	200060c8 	.word	0x200060c8
    ff4c:	200022e8 	.word	0x200022e8

0000ff50 <get_msg>:
{
    ff50:	b510      	push	{r4, lr}
    ff52:	f04f 0340 	mov.w	r3, #64	; 0x40
    ff56:	f3ef 8411 	mrs	r4, BASEPRI
    ff5a:	f383 8811 	msr	BASEPRI, r3
    ff5e:	f3bf 8f6f 	isb	sy
	msg.msg = log_list_head_get(&list);
    ff62:	4804      	ldr	r0, [pc, #16]	; (ff74 <get_msg+0x24>)
    ff64:	f00a fa8e 	bl	1a484 <log_list_head_get>
	__asm__ volatile(
    ff68:	f384 8811 	msr	BASEPRI, r4
    ff6c:	f3bf 8f6f 	isb	sy
}
    ff70:	bd10      	pop	{r4, pc}
    ff72:	bf00      	nop
    ff74:	200022e0 	.word	0x200022e0

0000ff78 <z_log_dropped>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    ff78:	4b06      	ldr	r3, [pc, #24]	; (ff94 <z_log_dropped+0x1c>)
    ff7a:	f3bf 8f5b 	dmb	ish
    ff7e:	e853 2f00 	ldrex	r2, [r3]
    ff82:	3201      	adds	r2, #1
    ff84:	e843 2100 	strex	r1, r2, [r3]
    ff88:	2900      	cmp	r1, #0
    ff8a:	d1f8      	bne.n	ff7e <z_log_dropped+0x6>
    ff8c:	f3bf 8f5b 	dmb	ish
}
    ff90:	4770      	bx	lr
    ff92:	bf00      	nop
    ff94:	200022d8 	.word	0x200022d8

0000ff98 <z_log_dropped_read_and_clear>:
}
    ff98:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    ff9a:	4b06      	ldr	r3, [pc, #24]	; (ffb4 <z_log_dropped_read_and_clear+0x1c>)
    ff9c:	f3bf 8f5b 	dmb	ish
    ffa0:	4602      	mov	r2, r0
    ffa2:	e853 0f00 	ldrex	r0, [r3]
    ffa6:	e843 2100 	strex	r1, r2, [r3]
    ffaa:	2900      	cmp	r1, #0
    ffac:	d1f9      	bne.n	ffa2 <z_log_dropped_read_and_clear+0xa>
    ffae:	f3bf 8f5b 	dmb	ish
    ffb2:	4770      	bx	lr
    ffb4:	200022d8 	.word	0x200022d8

0000ffb8 <dropped_notify>:
{
    ffb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    ffba:	f7ff ffed 	bl	ff98 <z_log_dropped_read_and_clear>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    ffbe:	4c0a      	ldr	r4, [pc, #40]	; (ffe8 <dropped_notify+0x30>)
    ffc0:	4d0a      	ldr	r5, [pc, #40]	; (ffec <dropped_notify+0x34>)
    ffc2:	1b2d      	subs	r5, r5, r4
    ffc4:	4607      	mov	r7, r0
    ffc6:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    ffc8:	2600      	movs	r6, #0
    ffca:	42ae      	cmp	r6, r5
    ffcc:	db00      	blt.n	ffd0 <dropped_notify+0x18>
}
    ffce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    ffd0:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    ffd2:	795b      	ldrb	r3, [r3, #5]
    ffd4:	b12b      	cbz	r3, ffe2 <dropped_notify+0x2a>
	if (backend->api->dropped != NULL) {
    ffd6:	6823      	ldr	r3, [r4, #0]
    ffd8:	691b      	ldr	r3, [r3, #16]
    ffda:	b113      	cbz	r3, ffe2 <dropped_notify+0x2a>
		backend->api->dropped(backend, cnt);
    ffdc:	4639      	mov	r1, r7
    ffde:	4620      	mov	r0, r4
    ffe0:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    ffe2:	3601      	adds	r6, #1
    ffe4:	3410      	adds	r4, #16
    ffe6:	e7f0      	b.n	ffca <dropped_notify+0x12>
    ffe8:	0001d840 	.word	0x0001d840
    ffec:	0001d860 	.word	0x0001d860

0000fff0 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    fff0:	4a04      	ldr	r2, [pc, #16]	; (10004 <CONFIG_PM_SRAM_SIZE+0x4>)
    fff2:	4b05      	ldr	r3, [pc, #20]	; (10008 <CONFIG_PM_SRAM_SIZE+0x8>)
    fff4:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    fff6:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    fffa:	bf34      	ite	cc
    fffc:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
   10000:	2000      	movcs	r0, #0
}
   10002:	4770      	bx	lr
   10004:	0001d788 	.word	0x0001d788
   10008:	0001d840 	.word	0x0001d840

0001000c <log_backend_enable>:
	id += backend - log_backend_get(0);
   1000c:	4a09      	ldr	r2, [pc, #36]	; (10034 <log_backend_enable+0x28>)
	backend->cb->id = id;
   1000e:	6843      	ldr	r3, [r0, #4]
   10010:	1a80      	subs	r0, r0, r2
{
   10012:	b510      	push	{r4, lr}
	id += backend - log_backend_get(0);
   10014:	1100      	asrs	r0, r0, #4
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
   10016:	4c08      	ldr	r4, [pc, #32]	; (10038 <log_backend_enable+0x2c>)
	backend->cb->ctx = ctx;
   10018:	6019      	str	r1, [r3, #0]
	id += backend - log_backend_get(0);
   1001a:	3001      	adds	r0, #1
	backend->cb->active = true;
   1001c:	2201      	movs	r2, #1
	log_backend_id_set(backend, id);
   1001e:	7118      	strb	r0, [r3, #4]
   10020:	715a      	strb	r2, [r3, #5]
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
   10022:	7823      	ldrb	r3, [r4, #0]
   10024:	b913      	cbnz	r3, 1002c <log_backend_enable+0x20>
   10026:	4805      	ldr	r0, [pc, #20]	; (1003c <log_backend_enable+0x30>)
   10028:	f008 fe12 	bl	18c50 <z_impl_k_sem_give>
	backend_attached = true;
   1002c:	2301      	movs	r3, #1
   1002e:	7023      	strb	r3, [r4, #0]
}
   10030:	bd10      	pop	{r4, pc}
   10032:	bf00      	nop
   10034:	0001d840 	.word	0x0001d840
   10038:	200027cd 	.word	0x200027cd
   1003c:	20000694 	.word	0x20000694

00010040 <log_init>:
{
   10040:	b570      	push	{r4, r5, r6, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   10042:	4b12      	ldr	r3, [pc, #72]	; (1008c <log_init+0x4c>)
   10044:	f3bf 8f5b 	dmb	ish
   10048:	e853 5f00 	ldrex	r5, [r3]
   1004c:	1c6a      	adds	r2, r5, #1
   1004e:	e843 2100 	strex	r1, r2, [r3]
   10052:	2900      	cmp	r1, #0
   10054:	d1f8      	bne.n	10048 <log_init+0x8>
   10056:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
   1005a:	b92d      	cbnz	r5, 10068 <log_init+0x28>
	return __log_backends_end - __log_backends_start;
   1005c:	4c0c      	ldr	r4, [pc, #48]	; (10090 <log_init+0x50>)
   1005e:	4e0d      	ldr	r6, [pc, #52]	; (10094 <log_init+0x54>)
   10060:	1b36      	subs	r6, r6, r4
   10062:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
   10064:	42b5      	cmp	r5, r6
   10066:	db00      	blt.n	1006a <log_init+0x2a>
}
   10068:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
   1006a:	7b23      	ldrb	r3, [r4, #12]
   1006c:	b153      	cbz	r3, 10084 <log_init+0x44>
			if (backend->api->init != NULL) {
   1006e:	6823      	ldr	r3, [r4, #0]
   10070:	699b      	ldr	r3, [r3, #24]
   10072:	b10b      	cbz	r3, 10078 <log_init+0x38>
				backend->api->init(backend);
   10074:	4620      	mov	r0, r4
   10076:	4798      	blx	r3
			log_backend_enable(backend,
   10078:	6863      	ldr	r3, [r4, #4]
   1007a:	2204      	movs	r2, #4
   1007c:	6819      	ldr	r1, [r3, #0]
   1007e:	4620      	mov	r0, r4
   10080:	f7ff ffc4 	bl	1000c <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   10084:	3501      	adds	r5, #1
   10086:	3410      	adds	r4, #16
   10088:	e7ec      	b.n	10064 <log_init+0x24>
   1008a:	bf00      	nop
   1008c:	200022dc 	.word	0x200022dc
   10090:	0001d840 	.word	0x0001d840
   10094:	0001d860 	.word	0x0001d860

00010098 <z_log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
   10098:	4b16      	ldr	r3, [pc, #88]	; (100f4 <z_log_strdup+0x5c>)
   1009a:	4298      	cmp	r0, r3
{
   1009c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1009e:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   100a0:	d302      	bcc.n	100a8 <z_log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
   100a2:	4b15      	ldr	r3, [pc, #84]	; (100f8 <z_log_strdup+0x60>)
   100a4:	4298      	cmp	r0, r3
   100a6:	d320      	bcc.n	100ea <z_log_strdup+0x52>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
   100a8:	4814      	ldr	r0, [pc, #80]	; (100fc <z_log_strdup+0x64>)
   100aa:	2200      	movs	r2, #0
   100ac:	2300      	movs	r3, #0
   100ae:	a901      	add	r1, sp, #4
   100b0:	f008 fbe2 	bl	18878 <k_mem_slab_alloc>
	if (err != 0) {
   100b4:	4605      	mov	r5, r0
   100b6:	b9d8      	cbnz	r0, 100f0 <z_log_strdup+0x58>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   100b8:	2201      	movs	r2, #1
   100ba:	9b01      	ldr	r3, [sp, #4]
   100bc:	f3bf 8f5b 	dmb	ish
   100c0:	e853 1f00 	ldrex	r1, [r3]
   100c4:	e843 2000 	strex	r0, r2, [r3]
   100c8:	2800      	cmp	r0, #0
   100ca:	d1f9      	bne.n	100c0 <z_log_strdup+0x28>
   100cc:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
   100d0:	9801      	ldr	r0, [sp, #4]
   100d2:	4621      	mov	r1, r4
   100d4:	2241      	movs	r2, #65	; 0x41
   100d6:	3004      	adds	r0, #4
   100d8:	f00b f82f 	bl	1b13a <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
   100dc:	9c01      	ldr	r4, [sp, #4]
   100de:	237e      	movs	r3, #126	; 0x7e
   100e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	dup->buf[sizeof(dup->buf) - 1] = '\0';
   100e4:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
	return dup->buf;
   100e8:	3404      	adds	r4, #4
}
   100ea:	4620      	mov	r0, r4
   100ec:	b003      	add	sp, #12
   100ee:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
   100f0:	4c03      	ldr	r4, [pc, #12]	; (10100 <z_log_strdup+0x68>)
   100f2:	e7fa      	b.n	100ea <z_log_strdup+0x52>
   100f4:	0001d524 	.word	0x0001d524
   100f8:	0001fa20 	.word	0x0001fa20
   100fc:	200022e8 	.word	0x200022e8
   10100:	0001e1d8 	.word	0x0001e1d8

00010104 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
   10104:	b150      	cbz	r0, 1011c <log_is_strdup+0x18>
   10106:	4b06      	ldr	r3, [pc, #24]	; (10120 <log_is_strdup+0x1c>)
   10108:	4298      	cmp	r0, r3
   1010a:	d306      	bcc.n	1011a <log_is_strdup+0x16>
   1010c:	f503 7310 	add.w	r3, r3, #576	; 0x240
   10110:	4298      	cmp	r0, r3
   10112:	bf2c      	ite	cs
   10114:	2000      	movcs	r0, #0
   10116:	2001      	movcc	r0, #1
   10118:	4770      	bx	lr
   1011a:	2000      	movs	r0, #0
}
   1011c:	4770      	bx	lr
   1011e:	bf00      	nop
   10120:	200060c8 	.word	0x200060c8

00010124 <z_impl_log_process>:
{
   10124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
   10128:	4b47      	ldr	r3, [pc, #284]	; (10248 <z_impl_log_process+0x124>)
   1012a:	781b      	ldrb	r3, [r3, #0]
{
   1012c:	b085      	sub	sp, #20
   1012e:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
   10130:	b903      	cbnz	r3, 10134 <z_impl_log_process+0x10>
   10132:	b300      	cbz	r0, 10176 <z_impl_log_process+0x52>
	msg = get_msg();
   10134:	f7ff ff0c 	bl	ff50 <get_msg>
	if (msg.msg) {
   10138:	4605      	mov	r5, r0
   1013a:	b178      	cbz	r0, 1015c <z_impl_log_process+0x38>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1013c:	f3bf 8f5b 	dmb	ish
   10140:	4b42      	ldr	r3, [pc, #264]	; (1024c <z_impl_log_process+0x128>)
   10142:	e853 2f00 	ldrex	r2, [r3]
   10146:	3a01      	subs	r2, #1
   10148:	e843 2100 	strex	r1, r2, [r3]
   1014c:	2900      	cmp	r1, #0
   1014e:	d1f8      	bne.n	10142 <z_impl_log_process+0x1e>
   10150:	f3bf 8f5b 	dmb	ish
	if (!bypass) {
   10154:	b19c      	cbz	r4, 1017e <z_impl_log_process+0x5a>
			log_msg_put(msg.msg);
   10156:	4628      	mov	r0, r5
   10158:	f00a fab8 	bl	1a6cc <log_msg_put>
	if (!bypass && z_log_dropped_pending()) {
   1015c:	b92c      	cbnz	r4, 1016a <z_impl_log_process+0x46>
	return dropped_cnt > 0;
   1015e:	4b3c      	ldr	r3, [pc, #240]	; (10250 <z_impl_log_process+0x12c>)
	if (!bypass && z_log_dropped_pending()) {
   10160:	681b      	ldr	r3, [r3, #0]
   10162:	2b00      	cmp	r3, #0
   10164:	dd01      	ble.n	1016a <z_impl_log_process+0x46>
		dropped_notify();
   10166:	f7ff ff27 	bl	ffb8 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
   1016a:	483a      	ldr	r0, [pc, #232]	; (10254 <z_impl_log_process+0x130>)
   1016c:	f00a f988 	bl	1a480 <log_list_head_peek>
   10170:	1e04      	subs	r4, r0, #0
   10172:	bf18      	it	ne
   10174:	2401      	movne	r4, #1
}
   10176:	4620      	mov	r0, r4
   10178:	b005      	add	sp, #20
   1017a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
   1017e:	4b36      	ldr	r3, [pc, #216]	; (10258 <z_impl_log_process+0x134>)
		if (!IS_ENABLED(CONFIG_LOG2) &&
   10180:	781b      	ldrb	r3, [r3, #0]
   10182:	b9e3      	cbnz	r3, 101be <z_impl_log_process+0x9a>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   10184:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
   10186:	07db      	lsls	r3, r3, #31
   10188:	d419      	bmi.n	101be <z_impl_log_process+0x9a>
	msg_str = log_msg_str_get(msg);
   1018a:	f00a fab2 	bl	1a6f2 <log_msg_str_get>
   1018e:	4607      	mov	r7, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
   10190:	4628      	mov	r0, r5
   10192:	f00a fa79 	bl	1a688 <log_msg_nargs_get>
   10196:	4601      	mov	r1, r0
   10198:	4638      	mov	r0, r7
   1019a:	f00a f986 	bl	1a4aa <z_log_get_s_mask>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   1019e:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 1025c <z_impl_log_process+0x138>
   101a2:	4b2f      	ldr	r3, [pc, #188]	; (10260 <z_impl_log_process+0x13c>)
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
   101a4:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 10264 <z_impl_log_process+0x140>
   101a8:	eba3 0308 	sub.w	r3, r3, r8
   101ac:	08db      	lsrs	r3, r3, #3
   101ae:	9303      	str	r3, [sp, #12]
   101b0:	4b2d      	ldr	r3, [pc, #180]	; (10268 <z_impl_log_process+0x144>)
   101b2:	eba3 0308 	sub.w	r3, r3, r8
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
   101b6:	4606      	mov	r6, r0
   101b8:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
	while (mask) {
   101bc:	b936      	cbnz	r6, 101cc <z_impl_log_process+0xa8>
   101be:	4e2b      	ldr	r6, [pc, #172]	; (1026c <z_impl_log_process+0x148>)
   101c0:	4f2b      	ldr	r7, [pc, #172]	; (10270 <z_impl_log_process+0x14c>)
   101c2:	1bbf      	subs	r7, r7, r6
   101c4:	113f      	asrs	r7, r7, #4
   101c6:	f04f 0800 	mov.w	r8, #0
   101ca:	e03a      	b.n	10242 <z_impl_log_process+0x11e>
		idx = 31 - __builtin_clz(mask);
   101cc:	fab6 f186 	clz	r1, r6
   101d0:	f1c1 091f 	rsb	r9, r1, #31
		str = (const char *)log_msg_arg_get(msg, idx);
   101d4:	4649      	mov	r1, r9
   101d6:	4628      	mov	r0, r5
   101d8:	f00a fa59 	bl	1a68e <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
   101dc:	4b25      	ldr	r3, [pc, #148]	; (10274 <z_impl_log_process+0x150>)
   101de:	4298      	cmp	r0, r3
		str = (const char *)log_msg_arg_get(msg, idx);
   101e0:	4601      	mov	r1, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   101e2:	d302      	bcc.n	101ea <z_impl_log_process+0xc6>
		if (!is_rodata(str) && !log_is_strdup(str) &&
   101e4:	4a24      	ldr	r2, [pc, #144]	; (10278 <z_impl_log_process+0x154>)
   101e6:	4290      	cmp	r0, r2
   101e8:	d31a      	bcc.n	10220 <z_impl_log_process+0xfc>
   101ea:	4608      	mov	r0, r1
   101ec:	f7ff ff8a 	bl	10104 <log_is_strdup>
   101f0:	4602      	mov	r2, r0
   101f2:	b9a8      	cbnz	r0, 10220 <z_impl_log_process+0xfc>
   101f4:	4b21      	ldr	r3, [pc, #132]	; (1027c <z_impl_log_process+0x158>)
   101f6:	4299      	cmp	r1, r3
   101f8:	d012      	beq.n	10220 <z_impl_log_process+0xfc>
	return msg->hdr.ids.source_id;
   101fa:	896b      	ldrh	r3, [r5, #10]
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   101fc:	9903      	ldr	r1, [sp, #12]
   101fe:	f3c3 1389 	ubfx	r3, r3, #6, #10
   10202:	428b      	cmp	r3, r1
	return __log_const_start[source_id].name;
   10204:	bf38      	it	cc
   10206:	f858 2033 	ldrcc.w	r2, [r8, r3, lsl #3]
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
   1020a:	ea4f 138a 	mov.w	r3, sl, lsl #6
   1020e:	f043 0301 	orr.w	r3, r3, #1
   10212:	f8ad 3000 	strh.w	r3, [sp]
   10216:	4649      	mov	r1, r9
   10218:	463b      	mov	r3, r7
   1021a:	4658      	mov	r0, fp
   1021c:	f00a f99f 	bl	1a55e <log_3>
		mask &= ~BIT(idx);
   10220:	2301      	movs	r3, #1
   10222:	fa03 f109 	lsl.w	r1, r3, r9
   10226:	ea26 0601 	bic.w	r6, r6, r1
   1022a:	e7c7      	b.n	101bc <z_impl_log_process+0x98>
	return backend->cb->active;
   1022c:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
   1022e:	795b      	ldrb	r3, [r3, #5]
   10230:	b123      	cbz	r3, 1023c <z_impl_log_process+0x118>
	backend->api->put(backend, msg);
   10232:	6833      	ldr	r3, [r6, #0]
   10234:	4629      	mov	r1, r5
   10236:	685b      	ldr	r3, [r3, #4]
   10238:	4630      	mov	r0, r6
   1023a:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
   1023c:	f108 0801 	add.w	r8, r8, #1
   10240:	3610      	adds	r6, #16
   10242:	45b8      	cmp	r8, r7
   10244:	dbf2      	blt.n	1022c <z_impl_log_process+0x108>
   10246:	e786      	b.n	10156 <z_impl_log_process+0x32>
   10248:	200027cd 	.word	0x200027cd
   1024c:	200022d4 	.word	0x200022d4
   10250:	200022d8 	.word	0x200022d8
   10254:	200022e0 	.word	0x200022e0
   10258:	200027ce 	.word	0x200027ce
   1025c:	0001d788 	.word	0x0001d788
   10260:	0001d840 	.word	0x0001d840
   10264:	0001e1f2 	.word	0x0001e1f2
   10268:	0001d7e8 	.word	0x0001d7e8
   1026c:	0001d840 	.word	0x0001d840
   10270:	0001d860 	.word	0x0001d860
   10274:	0001d524 	.word	0x0001d524
   10278:	0001fa20 	.word	0x0001fa20
   1027c:	0001e1d8 	.word	0x0001e1d8

00010280 <log_process_thread_func>:
{
   10280:	b510      	push	{r4, lr}
	log_init();
   10282:	f7ff fedd 	bl	10040 <log_init>
	return z_impl_k_current_get();
   10286:	f009 f9e1 	bl	1964c <z_impl_k_current_get>
	proc_tid = process_tid;
   1028a:	4b0c      	ldr	r3, [pc, #48]	; (102bc <log_process_thread_func+0x3c>)
   1028c:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   1028e:	b130      	cbz	r0, 1029e <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   10290:	4b0b      	ldr	r3, [pc, #44]	; (102c0 <log_process_thread_func+0x40>)
	    process_tid &&
   10292:	681b      	ldr	r3, [r3, #0]
   10294:	2b09      	cmp	r3, #9
   10296:	dd02      	ble.n	1029e <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
   10298:	480a      	ldr	r0, [pc, #40]	; (102c4 <log_process_thread_func+0x44>)
   1029a:	f008 fcd9 	bl	18c50 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
   1029e:	4c09      	ldr	r4, [pc, #36]	; (102c4 <log_process_thread_func+0x44>)
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
   102a0:	2000      	movs	r0, #0
   102a2:	f7ff ff3f 	bl	10124 <z_impl_log_process>
		if (log_process(false) == false) {
   102a6:	2800      	cmp	r0, #0
   102a8:	d1fa      	bne.n	102a0 <log_process_thread_func+0x20>
   102aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   102ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   102b2:	4620      	mov	r0, r4
   102b4:	f008 fcf2 	bl	18c9c <z_impl_k_sem_take>
   102b8:	e7f2      	b.n	102a0 <log_process_thread_func+0x20>
   102ba:	bf00      	nop
   102bc:	20002304 	.word	0x20002304
   102c0:	200022d4 	.word	0x200022d4
   102c4:	20000694 	.word	0x20000694

000102c8 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
   102c8:	4b29      	ldr	r3, [pc, #164]	; (10370 <msg_finalize+0xa8>)
{
   102ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
	msg->hdr.timestamp = timestamp_func();
   102cc:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
   102ce:	8141      	strh	r1, [r0, #10]
{
   102d0:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   102d2:	4798      	blx	r3
   102d4:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   102d6:	f04f 0340 	mov.w	r3, #64	; 0x40
   102da:	f3ef 8511 	mrs	r5, BASEPRI
   102de:	f383 8811 	msr	BASEPRI, r3
   102e2:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   102e6:	4823      	ldr	r0, [pc, #140]	; (10374 <msg_finalize+0xac>)
   102e8:	4621      	mov	r1, r4
   102ea:	f00a f8bf 	bl	1a46c <log_list_add_tail>
	__asm__ volatile(
   102ee:	f385 8811 	msr	BASEPRI, r5
   102f2:	f3bf 8f6f 	isb	sy
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   102f6:	f3bf 8f5b 	dmb	ish
   102fa:	4b1f      	ldr	r3, [pc, #124]	; (10378 <msg_finalize+0xb0>)
   102fc:	e853 2f00 	ldrex	r2, [r3]
   10300:	3201      	adds	r2, #1
   10302:	e843 2100 	strex	r1, r2, [r3]
   10306:	2900      	cmp	r1, #0
   10308:	d1f8      	bne.n	102fc <msg_finalize+0x34>
   1030a:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
   1030e:	4a1b      	ldr	r2, [pc, #108]	; (1037c <msg_finalize+0xb4>)
   10310:	7812      	ldrb	r2, [r2, #0]
   10312:	b182      	cbz	r2, 10336 <msg_finalize+0x6e>
	__asm__ volatile(
   10314:	f04f 0340 	mov.w	r3, #64	; 0x40
   10318:	f3ef 8411 	mrs	r4, BASEPRI
   1031c:	f383 8811 	msr	BASEPRI, r3
   10320:	f3bf 8f6f 	isb	sy
   10324:	2000      	movs	r0, #0
   10326:	f7ff fefd 	bl	10124 <z_impl_log_process>
	__asm__ volatile(
   1032a:	f384 8811 	msr	BASEPRI, r4
   1032e:	f3bf 8f6f 	isb	sy
}
   10332:	b003      	add	sp, #12
   10334:	bd30      	pop	{r4, r5, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
   10336:	4a12      	ldr	r2, [pc, #72]	; (10380 <msg_finalize+0xb8>)
   10338:	681b      	ldr	r3, [r3, #0]
   1033a:	6812      	ldr	r2, [r2, #0]
   1033c:	2a00      	cmp	r2, #0
   1033e:	d0f8      	beq.n	10332 <msg_finalize+0x6a>
   10340:	2b01      	cmp	r3, #1
   10342:	d10a      	bne.n	1035a <msg_finalize+0x92>
	z_impl_k_timer_start(timer, duration, period);
   10344:	2200      	movs	r2, #0
   10346:	2300      	movs	r3, #0
   10348:	e9cd 2300 	strd	r2, r3, [sp]
   1034c:	480d      	ldr	r0, [pc, #52]	; (10384 <msg_finalize+0xbc>)
   1034e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   10352:	2300      	movs	r3, #0
   10354:	f009 fb72 	bl	19a3c <z_impl_k_timer_start>
   10358:	e7eb      	b.n	10332 <msg_finalize+0x6a>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
   1035a:	2b0a      	cmp	r3, #10
   1035c:	d1e9      	bne.n	10332 <msg_finalize+0x6a>
	z_impl_k_timer_stop(timer);
   1035e:	4809      	ldr	r0, [pc, #36]	; (10384 <msg_finalize+0xbc>)
   10360:	f00c ff53 	bl	1d20a <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   10364:	4808      	ldr	r0, [pc, #32]	; (10388 <msg_finalize+0xc0>)
}
   10366:	b003      	add	sp, #12
   10368:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1036c:	f008 bc70 	b.w	18c50 <z_impl_k_sem_give>
   10370:	20000458 	.word	0x20000458
   10374:	200022e0 	.word	0x200022e0
   10378:	200022d4 	.word	0x200022d4
   1037c:	200027ce 	.word	0x200027ce
   10380:	20002304 	.word	0x20002304
   10384:	20001320 	.word	0x20001320
   10388:	20000694 	.word	0x20000694

0001038c <z_impl_log_panic>:
{
   1038c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
   1038e:	4f0e      	ldr	r7, [pc, #56]	; (103c8 <z_impl_log_panic+0x3c>)
   10390:	783d      	ldrb	r5, [r7, #0]
   10392:	b975      	cbnz	r5, 103b2 <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
   10394:	4c0d      	ldr	r4, [pc, #52]	; (103cc <z_impl_log_panic+0x40>)
   10396:	4e0e      	ldr	r6, [pc, #56]	; (103d0 <z_impl_log_panic+0x44>)
	log_init();
   10398:	f7ff fe52 	bl	10040 <log_init>
   1039c:	1b36      	subs	r6, r6, r4
   1039e:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   103a0:	42b5      	cmp	r5, r6
   103a2:	db07      	blt.n	103b4 <z_impl_log_panic+0x28>
   103a4:	2000      	movs	r0, #0
   103a6:	f7ff febd 	bl	10124 <z_impl_log_process>
		while (log_process(false) == true) {
   103aa:	2800      	cmp	r0, #0
   103ac:	d1fa      	bne.n	103a4 <z_impl_log_panic+0x18>
	panic_mode = true;
   103ae:	2301      	movs	r3, #1
   103b0:	703b      	strb	r3, [r7, #0]
}
   103b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
   103b4:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   103b6:	795b      	ldrb	r3, [r3, #5]
   103b8:	b11b      	cbz	r3, 103c2 <z_impl_log_panic+0x36>
	backend->api->panic(backend);
   103ba:	6823      	ldr	r3, [r4, #0]
   103bc:	4620      	mov	r0, r4
   103be:	695b      	ldr	r3, [r3, #20]
   103c0:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   103c2:	3501      	adds	r5, #1
   103c4:	3410      	adds	r4, #16
   103c6:	e7eb      	b.n	103a0 <z_impl_log_panic+0x14>
   103c8:	200027ce 	.word	0x200027ce
   103cc:	0001d840 	.word	0x0001d840
   103d0:	0001d860 	.word	0x0001d860

000103d4 <log_free>:
{
   103d4:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
   103d6:	3804      	subs	r0, #4
   103d8:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   103da:	f3bf 8f5b 	dmb	ish
   103de:	e850 3f00 	ldrex	r3, [r0]
   103e2:	1e5a      	subs	r2, r3, #1
   103e4:	e840 2100 	strex	r1, r2, [r0]
   103e8:	2900      	cmp	r1, #0
   103ea:	d1f8      	bne.n	103de <log_free+0xa>
   103ec:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
   103f0:	2b01      	cmp	r3, #1
   103f2:	d103      	bne.n	103fc <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
   103f4:	4803      	ldr	r0, [pc, #12]	; (10404 <log_free+0x30>)
   103f6:	a901      	add	r1, sp, #4
   103f8:	f00c fb6f 	bl	1cada <k_mem_slab_free>
}
   103fc:	b003      	add	sp, #12
   103fe:	f85d fb04 	ldr.w	pc, [sp], #4
   10402:	bf00      	nop
   10404:	200022e8 	.word	0x200022e8

00010408 <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
   10408:	2320      	movs	r3, #32
   1040a:	4902      	ldr	r1, [pc, #8]	; (10414 <log_msg_pool_init+0xc>)
   1040c:	4802      	ldr	r0, [pc, #8]	; (10418 <log_msg_pool_init+0x10>)
   1040e:	461a      	mov	r2, r3
   10410:	f00c bb48 	b.w	1caa4 <k_mem_slab_init>
   10414:	20006308 	.word	0x20006308
   10418:	20002308 	.word	0x20002308

0001041c <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
   1041c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
   1041e:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			z_log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
   10420:	4d09      	ldr	r5, [pc, #36]	; (10448 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
   10422:	9301      	str	r3, [sp, #4]
   10424:	2001      	movs	r0, #1
   10426:	f7ff fe7d 	bl	10124 <z_impl_log_process>
   1042a:	4604      	mov	r4, r0
			z_log_dropped();
   1042c:	f7ff fda4 	bl	ff78 <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
   10430:	2200      	movs	r2, #0
   10432:	2300      	movs	r3, #0
   10434:	a901      	add	r1, sp, #4
   10436:	4628      	mov	r0, r5
   10438:	f008 fa1e 	bl	18878 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
   1043c:	b108      	cbz	r0, 10442 <log_msg_no_space_handle+0x26>
   1043e:	2c00      	cmp	r4, #0
   10440:	d1f0      	bne.n	10424 <log_msg_no_space_handle+0x8>
	} else {
		z_log_dropped();
	}
	return msg;

}
   10442:	9801      	ldr	r0, [sp, #4]
   10444:	b003      	add	sp, #12
   10446:	bd30      	pop	{r4, r5, pc}
   10448:	20002308 	.word	0x20002308

0001044c <log_msg_chunk_alloc>:
{
   1044c:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
   1044e:	2300      	movs	r3, #0
   10450:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   10452:	4807      	ldr	r0, [pc, #28]	; (10470 <log_msg_chunk_alloc+0x24>)
   10454:	2200      	movs	r2, #0
   10456:	2300      	movs	r3, #0
   10458:	a901      	add	r1, sp, #4
   1045a:	f008 fa0d 	bl	18878 <k_mem_slab_alloc>
	if (err != 0) {
   1045e:	b110      	cbz	r0, 10466 <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
   10460:	f7ff ffdc 	bl	1041c <log_msg_no_space_handle>
   10464:	9001      	str	r0, [sp, #4]
}
   10466:	9801      	ldr	r0, [sp, #4]
   10468:	b003      	add	sp, #12
   1046a:	f85d fb04 	ldr.w	pc, [sp], #4
   1046e:	bf00      	nop
   10470:	20002308 	.word	0x20002308

00010474 <msg_free>:
{
   10474:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   10476:	7a03      	ldrb	r3, [r0, #8]
   10478:	b085      	sub	sp, #20
	if (log_msg_is_std(msg) && nargs) {
   1047a:	07dc      	lsls	r4, r3, #31
{
   1047c:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
   1047e:	d41e      	bmi.n	104be <msg_free+0x4a>
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
   10480:	7a45      	ldrb	r5, [r0, #9]
	if (log_msg_is_std(msg) && nargs) {
   10482:	092d      	lsrs	r5, r5, #4
   10484:	d01b      	beq.n	104be <msg_free+0x4a>
		uint32_t smask = 0U;
   10486:	2400      	movs	r4, #0
		for (i = 0U; i < nargs; i++) {
   10488:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
   1048a:	9801      	ldr	r0, [sp, #4]
   1048c:	4631      	mov	r1, r6
   1048e:	f00a f8fe 	bl	1a68e <log_msg_arg_get>
   10492:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
   10494:	f7ff fe36 	bl	10104 <log_is_strdup>
   10498:	b170      	cbz	r0, 104b8 <msg_free+0x44>
				if (smask == 0U) {
   1049a:	b934      	cbnz	r4, 104aa <msg_free+0x36>
					smask = z_log_get_s_mask(
   1049c:	9b01      	ldr	r3, [sp, #4]
   1049e:	4629      	mov	r1, r5
   104a0:	6918      	ldr	r0, [r3, #16]
   104a2:	f00a f802 	bl	1a4aa <z_log_get_s_mask>
					if (smask == 0U) {
   104a6:	4604      	mov	r4, r0
   104a8:	b148      	cbz	r0, 104be <msg_free+0x4a>
				if (smask & BIT(i)) {
   104aa:	fa24 f306 	lsr.w	r3, r4, r6
   104ae:	07d9      	lsls	r1, r3, #31
   104b0:	d502      	bpl.n	104b8 <msg_free+0x44>
					log_free(buf);
   104b2:	4638      	mov	r0, r7
   104b4:	f7ff ff8e 	bl	103d4 <log_free>
		for (i = 0U; i < nargs; i++) {
   104b8:	3601      	adds	r6, #1
   104ba:	42ae      	cmp	r6, r5
   104bc:	d3e5      	bcc.n	1048a <msg_free+0x16>
	if (msg->hdr.params.generic.ext == 1) {
   104be:	9b01      	ldr	r3, [sp, #4]
   104c0:	7a1a      	ldrb	r2, [r3, #8]
   104c2:	0792      	lsls	r2, r2, #30
   104c4:	d504      	bpl.n	104d0 <msg_free+0x5c>
		cont_free(msg->payload.ext.next);
   104c6:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   104c8:	4c08      	ldr	r4, [pc, #32]	; (104ec <msg_free+0x78>)
   104ca:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
   104cc:	9b03      	ldr	r3, [sp, #12]
   104ce:	b92b      	cbnz	r3, 104dc <msg_free+0x68>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
   104d0:	4806      	ldr	r0, [pc, #24]	; (104ec <msg_free+0x78>)
   104d2:	a901      	add	r1, sp, #4
   104d4:	f00c fb01 	bl	1cada <k_mem_slab_free>
}
   104d8:	b005      	add	sp, #20
   104da:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
   104dc:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   104de:	a903      	add	r1, sp, #12
   104e0:	4620      	mov	r0, r4
   104e2:	f00c fafa 	bl	1cada <k_mem_slab_free>
		cont = next;
   104e6:	9503      	str	r5, [sp, #12]
   104e8:	e7f0      	b.n	104cc <msg_free+0x58>
   104ea:	bf00      	nop
   104ec:	20002308 	.word	0x20002308

000104f0 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   104f0:	b40e      	push	{r1, r2, r3}
   104f2:	b503      	push	{r0, r1, lr}
   104f4:	ab03      	add	r3, sp, #12
   104f6:	4601      	mov	r1, r0
   104f8:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
   104fc:	4804      	ldr	r0, [pc, #16]	; (10510 <print_formatted+0x20>)
	va_start(args, fmt);
   104fe:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
   10500:	f7ff f90c 	bl	f71c <cbvprintf>
	va_end(args);

	return length;
}
   10504:	b002      	add	sp, #8
   10506:	f85d eb04 	ldr.w	lr, [sp], #4
   1050a:	b003      	add	sp, #12
   1050c:	4770      	bx	lr
   1050e:	bf00      	nop
   10510:	0001ab53 	.word	0x0001ab53

00010514 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
   10514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10518:	461d      	mov	r5, r3
   1051a:	9b08      	ldr	r3, [sp, #32]
   1051c:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   1051e:	06da      	lsls	r2, r3, #27
{
   10520:	4604      	mov	r4, r0
   10522:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   10524:	d405      	bmi.n	10532 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   10526:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
   10528:	bf4c      	ite	mi
   1052a:	492a      	ldrmi	r1, [pc, #168]	; (105d4 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
   1052c:	492a      	ldrpl	r1, [pc, #168]	; (105d8 <hexdump_line_print+0xc4>)
   1052e:	f7ff ffdf 	bl	104f0 <print_formatted>
	newline_print(output, flags);

	for (int i = 0; i < prefix_offset; i++) {
		print_formatted(output, " ");
   10532:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 105dc <hexdump_line_print+0xc8>
{
   10536:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
   1053a:	45a8      	cmp	r8, r5
   1053c:	db2a      	blt.n	10594 <hexdump_line_print+0x80>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
   1053e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 105e0 <hexdump_line_print+0xcc>
			print_formatted(output, "%02x ", data[i]);
   10542:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 105e4 <hexdump_line_print+0xd0>
			print_formatted(output, " ");
   10546:	f8df a094 	ldr.w	sl, [pc, #148]	; 105dc <hexdump_line_print+0xc8>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1054a:	2500      	movs	r5, #0
		if (i < length) {
   1054c:	42bd      	cmp	r5, r7
   1054e:	d22f      	bcs.n	105b0 <hexdump_line_print+0x9c>
			print_formatted(output, "%02x ", data[i]);
   10550:	5d72      	ldrb	r2, [r6, r5]
   10552:	4649      	mov	r1, r9
   10554:	4620      	mov	r0, r4
   10556:	f7ff ffcb 	bl	104f0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1055a:	3501      	adds	r5, #1
   1055c:	2d10      	cmp	r5, #16
   1055e:	d120      	bne.n	105a2 <hexdump_line_print+0x8e>
		}
	}

	print_formatted(output, "|");
   10560:	4921      	ldr	r1, [pc, #132]	; (105e8 <hexdump_line_print+0xd4>)
			char c = (char)data[i];

			print_formatted(output, "%c",
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(output, " ");
   10562:	f8df 8078 	ldr.w	r8, [pc, #120]	; 105dc <hexdump_line_print+0xc8>
			print_formatted(output, "%c",
   10566:	f8df 9084 	ldr.w	r9, [pc, #132]	; 105ec <hexdump_line_print+0xd8>
	print_formatted(output, "|");
   1056a:	4620      	mov	r0, r4
   1056c:	f7ff ffc0 	bl	104f0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   10570:	2500      	movs	r5, #0
		if (i < length) {
   10572:	42af      	cmp	r7, r5
   10574:	d928      	bls.n	105c8 <hexdump_line_print+0xb4>
			char c = (char)data[i];
   10576:	5d72      	ldrb	r2, [r6, r5]
	return (int)((((unsigned)c) >= ' ') &&
   10578:	f1a2 0320 	sub.w	r3, r2, #32
   1057c:	2b5f      	cmp	r3, #95	; 0x5f
			print_formatted(output, "%c",
   1057e:	bf28      	it	cs
   10580:	222e      	movcs	r2, #46	; 0x2e
   10582:	4649      	mov	r1, r9
   10584:	4620      	mov	r0, r4
   10586:	f7ff ffb3 	bl	104f0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1058a:	3501      	adds	r5, #1
   1058c:	2d10      	cmp	r5, #16
   1058e:	d114      	bne.n	105ba <hexdump_line_print+0xa6>
		}
	}
}
   10590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
   10594:	4649      	mov	r1, r9
   10596:	4620      	mov	r0, r4
   10598:	f7ff ffaa 	bl	104f0 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   1059c:	f108 0801 	add.w	r8, r8, #1
   105a0:	e7cb      	b.n	1053a <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
   105a2:	076a      	lsls	r2, r5, #29
   105a4:	d1d2      	bne.n	1054c <hexdump_line_print+0x38>
			print_formatted(output, " ");
   105a6:	4651      	mov	r1, sl
   105a8:	4620      	mov	r0, r4
   105aa:	f7ff ffa1 	bl	104f0 <print_formatted>
   105ae:	e7cd      	b.n	1054c <hexdump_line_print+0x38>
			print_formatted(output, "   ");
   105b0:	4641      	mov	r1, r8
   105b2:	4620      	mov	r0, r4
   105b4:	f7ff ff9c 	bl	104f0 <print_formatted>
   105b8:	e7cf      	b.n	1055a <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
   105ba:	076b      	lsls	r3, r5, #29
   105bc:	d1d9      	bne.n	10572 <hexdump_line_print+0x5e>
			print_formatted(output, " ");
   105be:	4641      	mov	r1, r8
   105c0:	4620      	mov	r0, r4
   105c2:	f7ff ff95 	bl	104f0 <print_formatted>
   105c6:	e7d4      	b.n	10572 <hexdump_line_print+0x5e>
			print_formatted(output, " ");
   105c8:	4641      	mov	r1, r8
   105ca:	4620      	mov	r0, r4
   105cc:	f7ff ff90 	bl	104f0 <print_formatted>
   105d0:	e7db      	b.n	1058a <hexdump_line_print+0x76>
   105d2:	bf00      	nop
   105d4:	0001dffb 	.word	0x0001dffb
   105d8:	0001e235 	.word	0x0001e235
   105dc:	0001e240 	.word	0x0001e240
   105e0:	0001e23e 	.word	0x0001e23e
   105e4:	0001e238 	.word	0x0001e238
   105e8:	0001e242 	.word	0x0001e242
   105ec:	0001e244 	.word	0x0001e244

000105f0 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
   105f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   105f4:	b087      	sub	sp, #28
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
   105f6:	f011 0602 	ands.w	r6, r1, #2
{
   105fa:	9205      	str	r2, [sp, #20]
   105fc:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
   10600:	f9bd 9048 	ldrsh.w	r9, [sp, #72]	; 0x48
   10604:	4607      	mov	r7, r0
   10606:	461a      	mov	r2, r3
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   10608:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   1060c:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
   10610:	d006      	beq.n	10620 <prefix_print+0x30>
	if (!format) {
   10612:	f011 0f44 	tst.w	r1, #68	; 0x44
   10616:	d138      	bne.n	1068a <prefix_print+0x9a>
		length = print_formatted(output, "[%08lu] ", timestamp);
   10618:	4933      	ldr	r1, [pc, #204]	; (106e8 <prefix_print+0xf8>)
   1061a:	f7ff ff69 	bl	104f0 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
   1061e:	4606      	mov	r6, r0
	if (color) {
   10620:	f1ba 0f00 	cmp.w	sl, #0
   10624:	d00a      	beq.n	1063c <prefix_print+0x4c>
		const char *log_color = start && (colors[level] != NULL) ?
   10626:	4b31      	ldr	r3, [pc, #196]	; (106ec <prefix_print+0xfc>)
		print_formatted(output, "%s", log_color);
   10628:	4931      	ldr	r1, [pc, #196]	; (106f0 <prefix_print+0x100>)
		const char *log_color = start && (colors[level] != NULL) ?
   1062a:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
		print_formatted(output, "%s", log_color);
   1062e:	4b31      	ldr	r3, [pc, #196]	; (106f4 <prefix_print+0x104>)
   10630:	4638      	mov	r0, r7
   10632:	2a00      	cmp	r2, #0
   10634:	bf08      	it	eq
   10636:	461a      	moveq	r2, r3
   10638:	f7ff ff5a 	bl	104f0 <print_formatted>
	if (level_on) {
   1063c:	b13d      	cbz	r5, 1064e <prefix_print+0x5e>
		total += print_formatted(output, "<%s> ", severity[level]);
   1063e:	4b2e      	ldr	r3, [pc, #184]	; (106f8 <prefix_print+0x108>)
   10640:	492e      	ldr	r1, [pc, #184]	; (106fc <prefix_print+0x10c>)
   10642:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
   10646:	4638      	mov	r0, r7
   10648:	f7ff ff52 	bl	104f0 <print_formatted>
   1064c:	4605      	mov	r5, r0
	if (source_id >= 0) {
   1064e:	f1b9 0f00 	cmp.w	r9, #0
   10652:	db16      	blt.n	10682 <prefix_print+0x92>
		total += print_formatted(output,
   10654:	9b05      	ldr	r3, [sp, #20]
   10656:	2b00      	cmp	r3, #0
   10658:	d043      	beq.n	106e2 <prefix_print+0xf2>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
   1065a:	2301      	movs	r3, #1
   1065c:	fa03 f808 	lsl.w	r8, r3, r8
		total += print_formatted(output,
   10660:	4b27      	ldr	r3, [pc, #156]	; (10700 <prefix_print+0x110>)
   10662:	4c28      	ldr	r4, [pc, #160]	; (10704 <prefix_print+0x114>)
   10664:	f018 0f10 	tst.w	r8, #16
   10668:	bf18      	it	ne
   1066a:	461c      	movne	r4, r3
   1066c:	4649      	mov	r1, r9
   1066e:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
   10672:	f7ff fcbd 	bl	fff0 <log_source_name_get>
   10676:	4621      	mov	r1, r4
   10678:	4602      	mov	r2, r0
   1067a:	4638      	mov	r0, r7
   1067c:	f7ff ff38 	bl	104f0 <print_formatted>
   10680:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
   10682:	19a8      	adds	r0, r5, r6
   10684:	b007      	add	sp, #28
   10686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
   1068a:	4b1f      	ldr	r3, [pc, #124]	; (10708 <prefix_print+0x118>)
   1068c:	6819      	ldr	r1, [r3, #0]
   1068e:	b331      	cbz	r1, 106de <prefix_print+0xee>
		timestamp /= timestamp_div;
   10690:	4b1e      	ldr	r3, [pc, #120]	; (1070c <prefix_print+0x11c>)
   10692:	f44f 6661 	mov.w	r6, #3600	; 0xe10
   10696:	681b      	ldr	r3, [r3, #0]
   10698:	fbb2 f3f3 	udiv	r3, r2, r3
		ms = (remainder * 1000U) / freq;
   1069c:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
		total_seconds = timestamp / freq;
   106a0:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
   106a4:	fbb4 f2f6 	udiv	r2, r4, r6
   106a8:	fb06 4612 	mls	r6, r6, r2, r4
		remainder = timestamp % freq;
   106ac:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
   106b0:	fb0b f404 	mul.w	r4, fp, r4
		mins = seconds / 60U;
   106b4:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   106b8:	fbb4 fef1 	udiv	lr, r4, r1
		mins = seconds / 60U;
   106bc:	fbb6 f3fc 	udiv	r3, r6, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   106c0:	fb01 441e 	mls	r4, r1, lr, r4
			length = print_formatted(output,
   106c4:	fb0c 6613 	mls	r6, ip, r3, r6
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   106c8:	fb0b f404 	mul.w	r4, fp, r4
			length = print_formatted(output,
   106cc:	9600      	str	r6, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   106ce:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(output,
   106d2:	e9cd e101 	strd	lr, r1, [sp, #4]
   106d6:	490e      	ldr	r1, [pc, #56]	; (10710 <prefix_print+0x120>)
   106d8:	f7ff ff0a 	bl	104f0 <print_formatted>
   106dc:	e79f      	b.n	1061e <prefix_print+0x2e>
		length = 0;
   106de:	4608      	mov	r0, r1
   106e0:	e79d      	b.n	1061e <prefix_print+0x2e>
		total += print_formatted(output,
   106e2:	4c08      	ldr	r4, [pc, #32]	; (10704 <prefix_print+0x114>)
   106e4:	e7c2      	b.n	1066c <prefix_print+0x7c>
   106e6:	bf00      	nop
   106e8:	0001e255 	.word	0x0001e255
   106ec:	0001d9a0 	.word	0x0001d9a0
   106f0:	0001ed93 	.word	0x0001ed93
   106f4:	0001e247 	.word	0x0001e247
   106f8:	0001d9b4 	.word	0x0001d9b4
   106fc:	0001e27a 	.word	0x0001e27a
   10700:	0001e251 	.word	0x0001e251
   10704:	0001e24c 	.word	0x0001e24c
   10708:	20002324 	.word	0x20002324
   1070c:	20002328 	.word	0x20002328
   10710:	0001e25e 	.word	0x0001e25e

00010714 <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
   10714:	b538      	push	{r3, r4, r5, lr}
   10716:	460c      	mov	r4, r1
	if (color) {
   10718:	07e1      	lsls	r1, r4, #31
{
   1071a:	4605      	mov	r5, r0
	if (color) {
   1071c:	d503      	bpl.n	10726 <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
   1071e:	4a08      	ldr	r2, [pc, #32]	; (10740 <postfix_print+0x2c>)
   10720:	4908      	ldr	r1, [pc, #32]	; (10744 <postfix_print+0x30>)
   10722:	f7ff fee5 	bl	104f0 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   10726:	06e2      	lsls	r2, r4, #27
   10728:	d408      	bmi.n	1073c <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   1072a:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
   1072c:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
   1072e:	bf4c      	ite	mi
   10730:	4905      	ldrmi	r1, [pc, #20]	; (10748 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
   10732:	4906      	ldrpl	r1, [pc, #24]	; (1074c <postfix_print+0x38>)
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
   10734:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
   10738:	f7ff beda 	b.w	104f0 <print_formatted>
}
   1073c:	bd38      	pop	{r3, r4, r5, pc}
   1073e:	bf00      	nop
   10740:	0001e247 	.word	0x0001e247
   10744:	0001ed93 	.word	0x0001ed93
   10748:	0001dffb 	.word	0x0001dffb
   1074c:	0001e235 	.word	0x0001e235

00010750 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg,
			    uint32_t flags)
{
   10750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
   10754:	7a8b      	ldrb	r3, [r1, #10]
		log_output_msg_syst_process(output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(output, flags, std_msg, timestamp,
   10756:	f013 0807 	ands.w	r8, r3, #7
{
   1075a:	b08a      	sub	sp, #40	; 0x28
   1075c:	4605      	mov	r5, r0
   1075e:	460e      	mov	r6, r1
   10760:	4617      	mov	r7, r2
			0 : prefix_print(output, flags, std_msg, timestamp,
   10762:	d022      	beq.n	107aa <log_output_msg_process+0x5a>
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   10764:	7a0a      	ldrb	r2, [r1, #8]
	return msg->hdr.ids.source_id;
   10766:	8949      	ldrh	r1, [r1, #10]
   10768:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   1076c:	f3c1 1189 	ubfx	r1, r1, #6, #10
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   10770:	43d2      	mvns	r2, r2
   10772:	e9cd 8300 	strd	r8, r3, [sp]
   10776:	9102      	str	r1, [sp, #8]
   10778:	68f3      	ldr	r3, [r6, #12]
   1077a:	f002 0201 	and.w	r2, r2, #1
   1077e:	4639      	mov	r1, r7
   10780:	f7ff ff36 	bl	105f0 <prefix_print>
   10784:	4681      	mov	r9, r0
   10786:	7a34      	ldrb	r4, [r6, #8]
   10788:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
   1078a:	f014 0401 	ands.w	r4, r4, #1
   1078e:	d00e      	beq.n	107ae <log_output_msg_process+0x5e>
		std_print(msg, output);
   10790:	4629      	mov	r1, r5
   10792:	4630      	mov	r0, r6
   10794:	f00a f873 	bl	1a87e <std_print>
		raw_string_print(msg, output);
	} else {
		hexdump_print(msg, output, prefix_offset, flags);
	}

	if (!raw_string) {
   10798:	f1b8 0f00 	cmp.w	r8, #0
   1079c:	d02b      	beq.n	107f6 <log_output_msg_process+0xa6>
		postfix_print(output, flags, level);
   1079e:	4642      	mov	r2, r8
   107a0:	4639      	mov	r1, r7
   107a2:	4628      	mov	r0, r5
   107a4:	f7ff ffb6 	bl	10714 <postfix_print>
   107a8:	e025      	b.n	107f6 <log_output_msg_process+0xa6>
			0 : prefix_print(output, flags, std_msg, timestamp,
   107aa:	46c1      	mov	r9, r8
   107ac:	e7eb      	b.n	10786 <log_output_msg_process+0x36>
	} else if (raw_string) {
   107ae:	f1b8 0f00 	cmp.w	r8, #0
   107b2:	d126      	bne.n	10802 <log_output_msg_process+0xb2>
	size_t offset = 0;
   107b4:	4627      	mov	r7, r4
		length = output->size;
   107b6:	68eb      	ldr	r3, [r5, #12]
   107b8:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
   107ba:	aa06      	add	r2, sp, #24
   107bc:	463b      	mov	r3, r7
   107be:	68a9      	ldr	r1, [r5, #8]
   107c0:	4630      	mov	r0, r6
   107c2:	f00a f848 	bl	1a856 <log_msg_hexdump_data_get>
		output->control_block->offset = length;
   107c6:	9a06      	ldr	r2, [sp, #24]
   107c8:	686b      	ldr	r3, [r5, #4]
   107ca:	601a      	str	r2, [r3, #0]
		if (length != 0) {
   107cc:	b13a      	cbz	r2, 107de <log_output_msg_process+0x8e>
			eol = (output->buf[length - 1] == '\n');
   107ce:	68ab      	ldr	r3, [r5, #8]
   107d0:	4413      	add	r3, r2
   107d2:	f813 4c01 	ldrb.w	r4, [r3, #-1]
   107d6:	f1a4 030a 	sub.w	r3, r4, #10
   107da:	425c      	negs	r4, r3
   107dc:	415c      	adcs	r4, r3
		log_output_flush(output);
   107de:	4628      	mov	r0, r5
   107e0:	f00a f9aa 	bl	1ab38 <log_output_flush>
		offset += length;
   107e4:	9b06      	ldr	r3, [sp, #24]
   107e6:	441f      	add	r7, r3
	} while (length > 0);
   107e8:	2b00      	cmp	r3, #0
   107ea:	d1e4      	bne.n	107b6 <log_output_msg_process+0x66>
	if (eol) {
   107ec:	b11c      	cbz	r4, 107f6 <log_output_msg_process+0xa6>
		print_formatted(output, "\r");
   107ee:	4914      	ldr	r1, [pc, #80]	; (10840 <log_output_msg_process+0xf0>)
   107f0:	4628      	mov	r0, r5
   107f2:	f7ff fe7d 	bl	104f0 <print_formatted>
	}

	log_output_flush(output);
   107f6:	4628      	mov	r0, r5
}
   107f8:	b00a      	add	sp, #40	; 0x28
   107fa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(output);
   107fe:	f00a b99b 	b.w	1ab38 <log_output_flush>
	print_formatted(output, "%s", log_msg_str_get(msg));
   10802:	4630      	mov	r0, r6
   10804:	f009 ff75 	bl	1a6f2 <log_msg_str_get>
   10808:	490e      	ldr	r1, [pc, #56]	; (10844 <log_output_msg_process+0xf4>)
   1080a:	4602      	mov	r2, r0
   1080c:	4628      	mov	r0, r5
   1080e:	f7ff fe6f 	bl	104f0 <print_formatted>
		length = sizeof(buf);
   10812:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   10816:	aa05      	add	r2, sp, #20
   10818:	4623      	mov	r3, r4
   1081a:	a906      	add	r1, sp, #24
   1081c:	4630      	mov	r0, r6
		length = sizeof(buf);
   1081e:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   10822:	f00a f818 	bl	1a856 <log_msg_hexdump_data_get>
		if (length) {
   10826:	9a05      	ldr	r2, [sp, #20]
   10828:	2a00      	cmp	r2, #0
   1082a:	d0b8      	beq.n	1079e <log_output_msg_process+0x4e>
			hexdump_line_print(output, buf, length,
   1082c:	464b      	mov	r3, r9
   1082e:	9700      	str	r7, [sp, #0]
   10830:	a906      	add	r1, sp, #24
   10832:	4628      	mov	r0, r5
   10834:	f7ff fe6e 	bl	10514 <hexdump_line_print>
			offset += length;
   10838:	9b05      	ldr	r3, [sp, #20]
   1083a:	441c      	add	r4, r3
		length = sizeof(buf);
   1083c:	e7eb      	b.n	10816 <log_output_msg_process+0xc6>
   1083e:	bf00      	nop
   10840:	0001e280 	.word	0x0001e280
   10844:	0001ed93 	.word	0x0001ed93

00010848 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
   10848:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   1084a:	f242 730f 	movw	r3, #9999	; 0x270f
   1084e:	428b      	cmp	r3, r1
   10850:	bf28      	it	cs
   10852:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
   10854:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   10856:	4a0f      	ldr	r2, [pc, #60]	; (10894 <log_output_dropped_process+0x4c>)
{
   10858:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   1085a:	2105      	movs	r1, #5
   1085c:	4668      	mov	r0, sp
   1085e:	f009 fa37 	bl	19cd0 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   10862:	6863      	ldr	r3, [r4, #4]
   10864:	490c      	ldr	r1, [pc, #48]	; (10898 <log_output_dropped_process+0x50>)
   10866:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   10868:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   1086a:	220b      	movs	r2, #11
   1086c:	4628      	mov	r0, r5
   1086e:	f009 fff9 	bl	1a864 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
   10872:	6863      	ldr	r3, [r4, #4]
   10874:	4632      	mov	r2, r6
   10876:	4669      	mov	r1, sp
   10878:	4628      	mov	r0, r5
   1087a:	685b      	ldr	r3, [r3, #4]
   1087c:	f009 fff2 	bl	1a864 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   10880:	6863      	ldr	r3, [r4, #4]
   10882:	4906      	ldr	r1, [pc, #24]	; (1089c <log_output_dropped_process+0x54>)
   10884:	685b      	ldr	r3, [r3, #4]
   10886:	221b      	movs	r2, #27
   10888:	4628      	mov	r0, r5
   1088a:	f009 ffeb 	bl	1a864 <buffer_write>
		     output->control_block->ctx);
}
   1088e:	b002      	add	sp, #8
   10890:	bd70      	pop	{r4, r5, r6, pc}
   10892:	bf00      	nop
   10894:	0001f8dd 	.word	0x0001f8dd
   10898:	0001e2be 	.word	0x0001e2be
   1089c:	0001e2a2 	.word	0x0001e2a2

000108a0 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
   108a0:	4a08      	ldr	r2, [pc, #32]	; (108c4 <log_output_timestamp_freq_set+0x24>)
{
   108a2:	b510      	push	{r4, lr}
	timestamp_div = 1U;
   108a4:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   108a6:	4c08      	ldr	r4, [pc, #32]	; (108c8 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
   108a8:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   108aa:	2100      	movs	r1, #0
   108ac:	42a0      	cmp	r0, r4
   108ae:	d804      	bhi.n	108ba <log_output_timestamp_freq_set+0x1a>
   108b0:	b101      	cbz	r1, 108b4 <log_output_timestamp_freq_set+0x14>
   108b2:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   108b4:	4b05      	ldr	r3, [pc, #20]	; (108cc <log_output_timestamp_freq_set+0x2c>)
   108b6:	6018      	str	r0, [r3, #0]
}
   108b8:	bd10      	pop	{r4, pc}
		frequency /= 2U;
   108ba:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   108bc:	005b      	lsls	r3, r3, #1
   108be:	2101      	movs	r1, #1
   108c0:	e7f4      	b.n	108ac <log_output_timestamp_freq_set+0xc>
   108c2:	bf00      	nop
   108c4:	20002328 	.word	0x20002328
   108c8:	000f4240 	.word	0x000f4240
   108cc:	20002324 	.word	0x20002324

000108d0 <char_out>:
static const char LOG_HEX_SEP[10] = "##ZLOGV1##";

static const struct device *uart_dev;

static int char_out(uint8_t *data, size_t length, void *ctx)
{
   108d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* lower 8-bit */
		x = data[i] & 0x0FU;
		(void)hex2char(x, &c);
		uart_poll_out(uart_dev, c);
#else
		uart_poll_out(uart_dev, data[i]);
   108d2:	4f07      	ldr	r7, [pc, #28]	; (108f0 <char_out+0x20>)
{
   108d4:	460d      	mov	r5, r1
   108d6:	4604      	mov	r4, r0
   108d8:	1846      	adds	r6, r0, r1
	for (size_t i = 0; i < length; i++) {
   108da:	42b4      	cmp	r4, r6
   108dc:	d101      	bne.n	108e2 <char_out+0x12>
#endif
	}

	return length;
}
   108de:	4628      	mov	r0, r5
   108e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(uart_dev, data[i]);
   108e2:	6838      	ldr	r0, [r7, #0]
   108e4:	f814 1b01 	ldrb.w	r1, [r4], #1
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   108e8:	6883      	ldr	r3, [r0, #8]
   108ea:	685b      	ldr	r3, [r3, #4]
   108ec:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
   108ee:	e7f4      	b.n	108da <char_out+0xa>
   108f0:	20002340 	.word	0x20002340

000108f4 <panic>:
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   108f4:	4801      	ldr	r0, [pc, #4]	; (108fc <panic+0x8>)
   108f6:	f00a b91f 	b.w	1ab38 <log_output_flush>
   108fa:	bf00      	nop
   108fc:	0001d9e4 	.word	0x0001d9e4

00010900 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
   10900:	4801      	ldr	r0, [pc, #4]	; (10908 <dropped+0x8>)
   10902:	f7ff bfa1 	b.w	10848 <log_output_dropped_process>
   10906:	bf00      	nop
   10908:	0001d9e4 	.word	0x0001d9e4

0001090c <log_backend_uart_init>:
		log_output_msg2_process(&log_output_uart, &msg->log, flags);
	}
}

static void log_backend_uart_init(struct log_backend const *const backend)
{
   1090c:	b508      	push	{r3, lr}
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   1090e:	4803      	ldr	r0, [pc, #12]	; (1091c <log_backend_uart_init+0x10>)
   10910:	f007 fe48 	bl	185a4 <z_impl_device_get_binding>
	uart_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
   10914:	4b02      	ldr	r3, [pc, #8]	; (10920 <log_backend_uart_init+0x14>)
   10916:	6018      	str	r0, [r3, #0]
		 */
		for (int i = 0; i < sizeof(LOG_HEX_SEP); i++) {
			uart_poll_out(uart_dev, LOG_HEX_SEP[i]);
		}
	}
}
   10918:	bd08      	pop	{r3, pc}
   1091a:	bf00      	nop
   1091c:	0001e2ca 	.word	0x0001e2ca
   10920:	20002340 	.word	0x20002340

00010924 <put>:
{
   10924:	b510      	push	{r4, lr}
	log_msg_get(msg);
   10926:	4608      	mov	r0, r1
   10928:	460c      	mov	r4, r1
   1092a:	f009 fea0 	bl	1a66e <log_msg_get>
	log_output_msg_process(output, msg, flags);
   1092e:	4805      	ldr	r0, [pc, #20]	; (10944 <put+0x20>)
   10930:	4621      	mov	r1, r4
   10932:	220f      	movs	r2, #15
   10934:	f7ff ff0c 	bl	10750 <log_output_msg_process>
	log_msg_put(msg);
   10938:	4620      	mov	r0, r4
}
   1093a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1093e:	f009 bec5 	b.w	1a6cc <log_msg_put>
   10942:	bf00      	nop
   10944:	0001d9e4 	.word	0x0001d9e4

00010948 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
   10948:	4b01      	ldr	r3, [pc, #4]	; (10950 <log_backend_rtt_init+0x8>)
   1094a:	2201      	movs	r2, #1
   1094c:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
   1094e:	4770      	bx	lr
   10950:	200027e0 	.word	0x200027e0

00010954 <panic>:

static void panic(struct log_backend const *const backend)
{
	panic_mode = true;
   10954:	4b02      	ldr	r3, [pc, #8]	; (10960 <panic+0xc>)
	log_output_flush(output);
   10956:	4803      	ldr	r0, [pc, #12]	; (10964 <panic+0x10>)
   10958:	2201      	movs	r2, #1
   1095a:	701a      	strb	r2, [r3, #0]
   1095c:	f00a b8ec 	b.w	1ab38 <log_output_flush>
   10960:	200027e1 	.word	0x200027e1
   10964:	0001da10 	.word	0x0001da10

00010968 <dropped>:
	log_output_dropped_process(output, cnt);
   10968:	4801      	ldr	r0, [pc, #4]	; (10970 <dropped+0x8>)
   1096a:	f7ff bf6d 	b.w	10848 <log_output_dropped_process>
   1096e:	bf00      	nop
   10970:	0001da10 	.word	0x0001da10

00010974 <put>:
{
   10974:	b510      	push	{r4, lr}
	log_msg_get(msg);
   10976:	4608      	mov	r0, r1
   10978:	460c      	mov	r4, r1
   1097a:	f009 fe78 	bl	1a66e <log_msg_get>
	log_output_msg_process(output, msg, flags);
   1097e:	4805      	ldr	r0, [pc, #20]	; (10994 <put+0x20>)
   10980:	4621      	mov	r1, r4
   10982:	220f      	movs	r2, #15
   10984:	f7ff fee4 	bl	10750 <log_output_msg_process>
	log_msg_put(msg);
   10988:	4620      	mov	r0, r4
}
   1098a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1098e:	f009 be9d 	b.w	1a6cc <log_msg_put>
   10992:	bf00      	nop
   10994:	0001da10 	.word	0x0001da10

00010998 <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
   10998:	4b05      	ldr	r3, [pc, #20]	; (109b0 <on_failed_write.part.0+0x18>)
	} else if (is_sync_mode()) {
   1099a:	781b      	ldrb	r3, [r3, #0]
   1099c:	b11b      	cbz	r3, 109a6 <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
   1099e:	f241 3088 	movw	r0, #5000	; 0x1388
   109a2:	f00c bbf7 	b.w	1d194 <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
   109a6:	20a4      	movs	r0, #164	; 0xa4
   109a8:	2100      	movs	r1, #0
   109aa:	f008 be35 	b.w	19618 <z_impl_k_sleep>
   109ae:	bf00      	nop
   109b0:	200027e1 	.word	0x200027e1

000109b4 <data_out_block_mode>:
{
   109b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
   109b8:	f8df 908c 	ldr.w	r9, [pc, #140]	; 10a48 <data_out_block_mode+0x94>
	return z_impl_k_mutex_lock(mutex, timeout);
   109bc:	f8df a08c 	ldr.w	sl, [pc, #140]	; 10a4c <data_out_block_mode+0x98>
{
   109c0:	4680      	mov	r8, r0
   109c2:	460f      	mov	r7, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
   109c4:	2404      	movs	r4, #4
		if (!is_sync_mode()) {
   109c6:	f899 5000 	ldrb.w	r5, [r9]
   109ca:	b9cd      	cbnz	r5, 10a00 <data_out_block_mode+0x4c>
   109cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   109d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   109d4:	4650      	mov	r0, sl
   109d6:	f008 f84d 	bl	18a74 <z_impl_k_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   109da:	463a      	mov	r2, r7
   109dc:	4641      	mov	r1, r8
   109de:	4628      	mov	r0, r5
   109e0:	f007 fd6a 	bl	184b8 <SEGGER_RTT_WriteSkipNoLock>
   109e4:	4606      	mov	r6, r0
	return z_impl_k_mutex_unlock(mutex);
   109e6:	4650      	mov	r0, sl
   109e8:	f008 f8bc 	bl	18b64 <z_impl_k_mutex_unlock>
		if (ret) {
   109ec:	4d18      	ldr	r5, [pc, #96]	; (10a50 <data_out_block_mode+0x9c>)
   109ee:	b1fe      	cbz	r6, 10a30 <data_out_block_mode+0x7c>
	host_present = true;
   109f0:	2301      	movs	r3, #1
   109f2:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
   109f4:	f899 3000 	ldrb.w	r3, [r9]
   109f8:	b96b      	cbnz	r3, 10a16 <data_out_block_mode+0x62>
}
   109fa:	4638      	mov	r0, r7
   109fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   10a00:	463a      	mov	r2, r7
   10a02:	4641      	mov	r1, r8
   10a04:	2000      	movs	r0, #0
   10a06:	f007 fd57 	bl	184b8 <SEGGER_RTT_WriteSkipNoLock>
   10a0a:	4606      	mov	r6, r0
   10a0c:	e7ee      	b.n	109ec <data_out_block_mode+0x38>
	if (retry_cnt == 0) {
   10a0e:	b95c      	cbnz	r4, 10a28 <data_out_block_mode+0x74>
		host_present = false;
   10a10:	702c      	strb	r4, [r5, #0]
   10a12:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
   10a16:	2000      	movs	r0, #0
   10a18:	f007 fd9a 	bl	18550 <SEGGER_RTT_HasDataUp>
   10a1c:	2800      	cmp	r0, #0
   10a1e:	d0ec      	beq.n	109fa <data_out_block_mode+0x46>
   10a20:	782b      	ldrb	r3, [r5, #0]
   10a22:	2b00      	cmp	r3, #0
   10a24:	d1f3      	bne.n	10a0e <data_out_block_mode+0x5a>
   10a26:	e7e8      	b.n	109fa <data_out_block_mode+0x46>
			on_failed_write(retry_cnt--);
   10a28:	3c01      	subs	r4, #1
   10a2a:	f7ff ffb5 	bl	10998 <on_failed_write.part.0>
   10a2e:	e7f2      	b.n	10a16 <data_out_block_mode+0x62>
		} else if (host_present) {
   10a30:	782b      	ldrb	r3, [r5, #0]
   10a32:	b113      	cbz	r3, 10a3a <data_out_block_mode+0x86>
	if (retry_cnt == 0) {
   10a34:	3c01      	subs	r4, #1
   10a36:	d104      	bne.n	10a42 <data_out_block_mode+0x8e>
		host_present = false;
   10a38:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
   10a3a:	782b      	ldrb	r3, [r5, #0]
   10a3c:	2b00      	cmp	r3, #0
   10a3e:	d1c2      	bne.n	109c6 <data_out_block_mode+0x12>
   10a40:	e7db      	b.n	109fa <data_out_block_mode+0x46>
   10a42:	f7ff ffa9 	bl	10998 <on_failed_write.part.0>
   10a46:	e7f8      	b.n	10a3a <data_out_block_mode+0x86>
   10a48:	200027e1 	.word	0x200027e1
   10a4c:	20000668 	.word	0x20000668
   10a50:	200027e0 	.word	0x200027e0

00010a54 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   10a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10a56:	4605      	mov	r5, r0
	__asm__ volatile(
   10a58:	f04f 0340 	mov.w	r3, #64	; 0x40
   10a5c:	f3ef 8611 	mrs	r6, BASEPRI
   10a60:	f383 8811 	msr	BASEPRI, r3
   10a64:	f3bf 8f6f 	isb	sy
	return list->head;
   10a68:	4b09      	ldr	r3, [pc, #36]	; (10a90 <pm_state_notify+0x3c>)
   10a6a:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   10a6c:	b15c      	cbz	r4, 10a86 <pm_state_notify+0x32>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_state.state);
   10a6e:	4f09      	ldr	r7, [pc, #36]	; (10a94 <pm_state_notify+0x40>)
			callback = notifier->state_exit;
   10a70:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   10a74:	2d00      	cmp	r5, #0
   10a76:	bf08      	it	eq
   10a78:	4613      	moveq	r3, r2
		if (callback) {
   10a7a:	b10b      	cbz	r3, 10a80 <pm_state_notify+0x2c>
			callback(z_power_state.state);
   10a7c:	7838      	ldrb	r0, [r7, #0]
   10a7e:	4798      	blx	r3
	return node->next;
   10a80:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   10a82:	2c00      	cmp	r4, #0
   10a84:	d1f4      	bne.n	10a70 <pm_state_notify+0x1c>
	__asm__ volatile(
   10a86:	f386 8811 	msr	BASEPRI, r6
   10a8a:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   10a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10a90:	20002358 	.word	0x20002358
   10a94:	20002360 	.word	0x20002360

00010a98 <pm_system_resume>:

void pm_system_resume(void)
{
   10a98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
   10a9a:	4b0f      	ldr	r3, [pc, #60]	; (10ad8 <pm_system_resume+0x40>)
   10a9c:	681a      	ldr	r2, [r3, #0]
   10a9e:	b9ba      	cbnz	r2, 10ad0 <pm_system_resume+0x38>
		post_ops_done = 1;
   10aa0:	2201      	movs	r2, #1
   10aa2:	601a      	str	r2, [r3, #0]
		exit_pos_ops(z_power_state);
   10aa4:	4a0d      	ldr	r2, [pc, #52]	; (10adc <pm_system_resume+0x44>)
   10aa6:	ca07      	ldmia	r2, {r0, r1, r2}
   10aa8:	ab01      	add	r3, sp, #4
   10aaa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
   10aae:	4a0c      	ldr	r2, [pc, #48]	; (10ae0 <pm_system_resume+0x48>)
   10ab0:	b14a      	cbz	r2, 10ac6 <pm_system_resume+0x2e>
		pm_power_state_exit_post_ops(info);
   10ab2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   10ab6:	f00a fba9 	bl	1b20c <pm_power_state_exit_post_ops>
		pm_state_notify(false);
   10aba:	2000      	movs	r0, #0
	}
}
   10abc:	b005      	add	sp, #20
   10abe:	f85d eb04 	ldr.w	lr, [sp], #4
		pm_state_notify(false);
   10ac2:	f7ff bfc7 	b.w	10a54 <pm_state_notify>
   10ac6:	f382 8811 	msr	BASEPRI, r2
   10aca:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   10ace:	e7f4      	b.n	10aba <pm_system_resume+0x22>
}
   10ad0:	b005      	add	sp, #20
   10ad2:	f85d fb04 	ldr.w	pc, [sp], #4
   10ad6:	bf00      	nop
   10ad8:	2000045c 	.word	0x2000045c
   10adc:	20002360 	.word	0x20002360
   10ae0:	0001b20d 	.word	0x0001b20d

00010ae4 <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
   10ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
   10ae6:	b089      	sub	sp, #36	; 0x24
	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);
	z_power_state = pm_policy_next_state(ticks);
   10ae8:	466e      	mov	r6, sp
   10aea:	4601      	mov	r1, r0
{
   10aec:	4605      	mov	r5, r0
	z_power_state = pm_policy_next_state(ticks);
   10aee:	4630      	mov	r0, r6
   10af0:	f00a f84a 	bl	1ab88 <pm_policy_next_state>
   10af4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   10af8:	4c17      	ldr	r4, [pc, #92]	; (10b58 <pm_system_suspend+0x74>)
   10afa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
   10afe:	7820      	ldrb	r0, [r4, #0]
   10b00:	4627      	mov	r7, r4
   10b02:	b338      	cbz	r0, 10b54 <pm_system_suspend+0x70>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
		return z_power_state.state;
	}
	post_ops_done = 0;
   10b04:	4b15      	ldr	r3, [pc, #84]	; (10b5c <pm_system_suspend+0x78>)
   10b06:	2100      	movs	r1, #0
   10b08:	6019      	str	r1, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
   10b0a:	1c6b      	adds	r3, r5, #1
   10b0c:	d00d      	beq.n	10b2a <pm_system_suspend+0x46>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   10b0e:	4814      	ldr	r0, [pc, #80]	; (10b60 <pm_system_suspend+0x7c>)
   10b10:	4616      	mov	r6, r2
   10b12:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   10b16:	4a13      	ldr	r2, [pc, #76]	; (10b64 <pm_system_suspend+0x80>)
   10b18:	2300      	movs	r3, #0
   10b1a:	fbe6 010c 	umlal	r0, r1, r6, ip
   10b1e:	f7ef fadd 	bl	dc <__aeabi_uldivmod>

		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   10b22:	2101      	movs	r1, #1
   10b24:	1a28      	subs	r0, r5, r0
   10b26:	f00c fb17 	bl	1d158 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   10b2a:	f008 faf7 	bl	1911c <k_sched_lock>
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
   10b2e:	2001      	movs	r0, #1
   10b30:	f7ff ff90 	bl	10a54 <pm_state_notify>
	pm_state_set(z_power_state);
   10b34:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
   10b38:	ab05      	add	r3, sp, #20
   10b3a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
   10b3e:	4a0a      	ldr	r2, [pc, #40]	; (10b68 <pm_system_suspend+0x84>)
   10b40:	b11a      	cbz	r2, 10b4a <pm_system_suspend+0x66>
		pm_power_state_set(info);
   10b42:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   10b46:	f00a fb4e 	bl	1b1e6 <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
   10b4a:	f7ff ffa5 	bl	10a98 <pm_system_resume>
	k_sched_unlock();
   10b4e:	f008 fb9d 	bl	1928c <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
	return z_power_state.state;
   10b52:	7820      	ldrb	r0, [r4, #0]
}
   10b54:	b009      	add	sp, #36	; 0x24
   10b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10b58:	20002360 	.word	0x20002360
   10b5c:	2000045c 	.word	0x2000045c
   10b60:	000f423f 	.word	0x000f423f
   10b64:	000f4240 	.word	0x000f4240
   10b68:	0001b1e7 	.word	0x0001b1e7

00010b6c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   10b6c:	b510      	push	{r4, lr}
   10b6e:	4807      	ldr	r0, [pc, #28]	; (10b8c <uart_console_init+0x20>)
	__stdout_hook_install(console_out);
   10b70:	4c07      	ldr	r4, [pc, #28]	; (10b90 <uart_console_init+0x24>)
   10b72:	f007 fd17 	bl	185a4 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
   10b76:	4b07      	ldr	r3, [pc, #28]	; (10b94 <uart_console_init+0x28>)
   10b78:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
   10b7a:	4620      	mov	r0, r4
   10b7c:	f001 f840 	bl	11c00 <__stdout_hook_install>
	__printk_hook_install(console_out);
   10b80:	4620      	mov	r0, r4
   10b82:	f7fe fcc3 	bl	f50c <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
   10b86:	2000      	movs	r0, #0
   10b88:	bd10      	pop	{r4, pc}
   10b8a:	bf00      	nop
   10b8c:	0001e2ca 	.word	0x0001e2ca
   10b90:	00010b99 	.word	0x00010b99
   10b94:	2000236c 	.word	0x2000236c

00010b98 <console_out>:
	if ('\n' == c) {
   10b98:	280a      	cmp	r0, #10
{
   10b9a:	b538      	push	{r3, r4, r5, lr}
   10b9c:	4d07      	ldr	r5, [pc, #28]	; (10bbc <console_out+0x24>)
   10b9e:	4604      	mov	r4, r0
	if ('\n' == c) {
   10ba0:	d104      	bne.n	10bac <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
   10ba2:	6828      	ldr	r0, [r5, #0]
   10ba4:	6883      	ldr	r3, [r0, #8]
   10ba6:	210d      	movs	r1, #13
   10ba8:	685b      	ldr	r3, [r3, #4]
   10baa:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
   10bac:	6828      	ldr	r0, [r5, #0]
   10bae:	6883      	ldr	r3, [r0, #8]
   10bb0:	b2e1      	uxtb	r1, r4
   10bb2:	685b      	ldr	r3, [r3, #4]
   10bb4:	4798      	blx	r3
}
   10bb6:	4620      	mov	r0, r4
   10bb8:	bd38      	pop	{r3, r4, r5, pc}
   10bba:	bf00      	nop
   10bbc:	2000236c 	.word	0x2000236c

00010bc0 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   10bc0:	4b08      	ldr	r3, [pc, #32]	; (10be4 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   10bc2:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   10bc4:	1ac3      	subs	r3, r0, r3
{
   10bc6:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   10bc8:	4907      	ldr	r1, [pc, #28]	; (10be8 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   10bca:	109b      	asrs	r3, r3, #2
{
   10bcc:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   10bce:	4359      	muls	r1, r3
   10bd0:	4806      	ldr	r0, [pc, #24]	; (10bec <onoff_stop+0x2c>)
   10bd2:	2240      	movs	r2, #64	; 0x40
   10bd4:	f009 fff9 	bl	1abca <stop>
	notify(mgr, res);
   10bd8:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   10bda:	4601      	mov	r1, r0
	notify(mgr, res);
   10bdc:	4620      	mov	r0, r4
}
   10bde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   10be2:	4718      	bx	r3
   10be4:	20002384 	.word	0x20002384
   10be8:	b6db6db7 	.word	0xb6db6db7
   10bec:	0001d59c 	.word	0x0001d59c

00010bf0 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   10bf0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   10bf2:	4c0c      	ldr	r4, [pc, #48]	; (10c24 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   10bf4:	4a0c      	ldr	r2, [pc, #48]	; (10c28 <onoff_start+0x38>)
   10bf6:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   10bf8:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   10bfa:	9300      	str	r3, [sp, #0]
{
   10bfc:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   10bfe:	460b      	mov	r3, r1
   10c00:	490a      	ldr	r1, [pc, #40]	; (10c2c <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
   10c02:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   10c04:	4361      	muls	r1, r4
{
   10c06:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   10c08:	4809      	ldr	r0, [pc, #36]	; (10c30 <onoff_start+0x40>)
   10c0a:	f00a f80b 	bl	1ac24 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   10c0e:	1e01      	subs	r1, r0, #0
   10c10:	da05      	bge.n	10c1e <onoff_start+0x2e>
		notify(mgr, err);
   10c12:	4630      	mov	r0, r6
   10c14:	462b      	mov	r3, r5
	}
}
   10c16:	b002      	add	sp, #8
   10c18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   10c1c:	4718      	bx	r3
}
   10c1e:	b002      	add	sp, #8
   10c20:	bd70      	pop	{r4, r5, r6, pc}
   10c22:	bf00      	nop
   10c24:	20002384 	.word	0x20002384
   10c28:	0001ac93 	.word	0x0001ac93
   10c2c:	b6db6db7 	.word	0xb6db6db7
   10c30:	0001d59c 	.word	0x0001d59c

00010c34 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   10c34:	2200      	movs	r2, #0
{
   10c36:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   10c38:	2101      	movs	r1, #1
{
   10c3a:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   10c3c:	4610      	mov	r0, r2
   10c3e:	f000 fb33 	bl	112a8 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   10c42:	2000      	movs	r0, #0
   10c44:	f000 fafe 	bl	11244 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   10c48:	480f      	ldr	r0, [pc, #60]	; (10c88 <clk_init+0x54>)
   10c4a:	f007 fa0b 	bl	18064 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   10c4e:	4b0f      	ldr	r3, [pc, #60]	; (10c8c <clk_init+0x58>)
   10c50:	4298      	cmp	r0, r3
   10c52:	d115      	bne.n	10c80 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   10c54:	f00b fe9a 	bl	1c98c <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   10c58:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   10c5a:	490d      	ldr	r1, [pc, #52]	; (10c90 <clk_init+0x5c>)
   10c5c:	4630      	mov	r0, r6
   10c5e:	f009 f893 	bl	19d88 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   10c62:	2800      	cmp	r0, #0
   10c64:	db0b      	blt.n	10c7e <clk_init+0x4a>
	struct nrf_clock_control_data *data = dev->data;
   10c66:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   10c68:	4909      	ldr	r1, [pc, #36]	; (10c90 <clk_init+0x5c>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   10c6a:	2501      	movs	r5, #1
   10c6c:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
   10c6e:	f104 001c 	add.w	r0, r4, #28
   10c72:	f009 f889 	bl	19d88 <onoff_manager_init>
		if (err < 0) {
   10c76:	2800      	cmp	r0, #0
   10c78:	db01      	blt.n	10c7e <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   10c7a:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   10c7c:	2000      	movs	r0, #0
}
   10c7e:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   10c80:	f06f 0004 	mvn.w	r0, #4
   10c84:	e7fb      	b.n	10c7e <clk_init+0x4a>
   10c86:	bf00      	nop
   10c88:	00010cc9 	.word	0x00010cc9
   10c8c:	0bad0000 	.word	0x0bad0000
   10c90:	0001da4c 	.word	0x0001da4c

00010c94 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   10c94:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   10c96:	230c      	movs	r3, #12
   10c98:	4809      	ldr	r0, [pc, #36]	; (10cc0 <clkstarted_handle.constprop.0+0x2c>)
   10c9a:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   10c9c:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   10c9e:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   10ca0:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
   10ca4:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   10ca6:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   10ca8:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   10caa:	4418      	add	r0, r3
   10cac:	f009 ff7a 	bl	1aba4 <set_on_state>
	if (callback) {
   10cb0:	b12d      	cbz	r5, 10cbe <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   10cb2:	4632      	mov	r2, r6
   10cb4:	462b      	mov	r3, r5
   10cb6:	4803      	ldr	r0, [pc, #12]	; (10cc4 <clkstarted_handle.constprop.0+0x30>)
}
   10cb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   10cbc:	4718      	bx	r3
}
   10cbe:	bd70      	pop	{r4, r5, r6, pc}
   10cc0:	20002384 	.word	0x20002384
   10cc4:	0001d59c 	.word	0x0001d59c

00010cc8 <clock_event_handler>:
	switch (event) {
   10cc8:	b110      	cbz	r0, 10cd0 <clock_event_handler+0x8>
   10cca:	2801      	cmp	r0, #1
   10ccc:	d004      	beq.n	10cd8 <clock_event_handler+0x10>
   10cce:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   10cd0:	4b03      	ldr	r3, [pc, #12]	; (10ce0 <clock_event_handler+0x18>)
   10cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   10cd4:	075b      	lsls	r3, r3, #29
   10cd6:	d101      	bne.n	10cdc <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   10cd8:	f7ff bfdc 	b.w	10c94 <clkstarted_handle.constprop.0>
}
   10cdc:	4770      	bx	lr
   10cde:	bf00      	nop
   10ce0:	20002384 	.word	0x20002384

00010ce4 <generic_hfclk_start>:
{
   10ce4:	b508      	push	{r3, lr}
	__asm__ volatile(
   10ce6:	f04f 0340 	mov.w	r3, #64	; 0x40
   10cea:	f3ef 8111 	mrs	r1, BASEPRI
   10cee:	f383 8811 	msr	BASEPRI, r3
   10cf2:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   10cf6:	4a12      	ldr	r2, [pc, #72]	; (10d40 <generic_hfclk_start+0x5c>)
   10cf8:	6813      	ldr	r3, [r2, #0]
   10cfa:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   10cfe:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   10d02:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   10d04:	d00c      	beq.n	10d20 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   10d06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   10d0a:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   10d0e:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   10d12:	f013 0301 	ands.w	r3, r3, #1
   10d16:	d003      	beq.n	10d20 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   10d18:	480a      	ldr	r0, [pc, #40]	; (10d44 <generic_hfclk_start+0x60>)
   10d1a:	f009 ff43 	bl	1aba4 <set_on_state>
			already_started = true;
   10d1e:	2301      	movs	r3, #1
	__asm__ volatile(
   10d20:	f381 8811 	msr	BASEPRI, r1
   10d24:	f3bf 8f6f 	isb	sy
	if (already_started) {
   10d28:	b123      	cbz	r3, 10d34 <generic_hfclk_start+0x50>
}
   10d2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   10d2e:	2000      	movs	r0, #0
   10d30:	f7ff bfb0 	b.w	10c94 <clkstarted_handle.constprop.0>
}
   10d34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   10d38:	2001      	movs	r0, #1
   10d3a:	f007 b983 	b.w	18044 <nrfx_clock_start>
   10d3e:	bf00      	nop
   10d40:	200023d4 	.word	0x200023d4
   10d44:	200023c4 	.word	0x200023c4

00010d48 <api_blocking_start>:
{
   10d48:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   10d4a:	2200      	movs	r2, #0
   10d4c:	2301      	movs	r3, #1
   10d4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
   10d52:	ab04      	add	r3, sp, #16
   10d54:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   10d58:	4a09      	ldr	r2, [pc, #36]	; (10d80 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   10d5a:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   10d5e:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   10d60:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   10d64:	f009 ff8e 	bl	1ac84 <api_start>
	if (err < 0) {
   10d68:	2800      	cmp	r0, #0
   10d6a:	db05      	blt.n	10d78 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   10d6c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   10d70:	2300      	movs	r3, #0
   10d72:	4668      	mov	r0, sp
   10d74:	f007 ff92 	bl	18c9c <z_impl_k_sem_take>
}
   10d78:	b007      	add	sp, #28
   10d7a:	f85d fb04 	ldr.w	pc, [sp], #4
   10d7e:	bf00      	nop
   10d80:	0001acab 	.word	0x0001acab

00010d84 <lfclk_start>:
{
   10d84:	b510      	push	{r4, lr}
	if (!once) {
   10d86:	4c07      	ldr	r4, [pc, #28]	; (10da4 <lfclk_start+0x20>)
   10d88:	7823      	ldrb	r3, [r4, #0]
   10d8a:	b92b      	cbnz	r3, 10d98 <lfclk_start+0x14>
	z_impl_k_busy_wait(usec_to_wait);
   10d8c:	f44f 70a5 	mov.w	r0, #330	; 0x14a
   10d90:	f00c fa00 	bl	1d194 <z_impl_k_busy_wait>
		once = true;
   10d94:	2301      	movs	r3, #1
   10d96:	7023      	strb	r3, [r4, #0]
}
   10d98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   10d9c:	2000      	movs	r0, #0
   10d9e:	f007 b951 	b.w	18044 <nrfx_clock_start>
   10da2:	bf00      	nop
   10da4:	200027e2 	.word	0x200027e2

00010da8 <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   10da8:	4b09      	ldr	r3, [pc, #36]	; (10dd0 <generic_hfclk_stop+0x28>)
   10daa:	f3bf 8f5b 	dmb	ish
   10dae:	e853 2f00 	ldrex	r2, [r3]
   10db2:	f022 0102 	bic.w	r1, r2, #2
   10db6:	e843 1000 	strex	r0, r1, [r3]
   10dba:	2800      	cmp	r0, #0
   10dbc:	d1f7      	bne.n	10dae <generic_hfclk_stop+0x6>
   10dbe:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   10dc2:	07d3      	lsls	r3, r2, #31
   10dc4:	d402      	bmi.n	10dcc <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   10dc6:	2001      	movs	r0, #1
   10dc8:	f00b bddb 	b.w	1c982 <nrfx_clock_stop>
}
   10dcc:	4770      	bx	lr
   10dce:	bf00      	nop
   10dd0:	200023d4 	.word	0x200023d4

00010dd4 <z_nrf_clock_control_lf_on>:
{
   10dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   10dd8:	4939      	ldr	r1, [pc, #228]	; (10ec0 <z_nrf_clock_control_lf_on+0xec>)
   10dda:	f3bf 8f5b 	dmb	ish
   10dde:	4607      	mov	r7, r0
   10de0:	2201      	movs	r2, #1
   10de2:	e851 3f00 	ldrex	r3, [r1]
   10de6:	e841 2000 	strex	r0, r2, [r1]
   10dea:	2800      	cmp	r0, #0
   10dec:	d1f9      	bne.n	10de2 <z_nrf_clock_control_lf_on+0xe>
   10dee:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   10df2:	b933      	cbnz	r3, 10e02 <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   10df4:	4933      	ldr	r1, [pc, #204]	; (10ec4 <z_nrf_clock_control_lf_on+0xf0>)
		err = onoff_request(mgr, &cli);
   10df6:	4834      	ldr	r0, [pc, #208]	; (10ec8 <z_nrf_clock_control_lf_on+0xf4>)
   10df8:	604b      	str	r3, [r1, #4]
   10dfa:	60cb      	str	r3, [r1, #12]
   10dfc:	608a      	str	r2, [r1, #8]
   10dfe:	f008 ffd6 	bl	19dae <onoff_request>
	switch (start_mode) {
   10e02:	1e7b      	subs	r3, r7, #1
   10e04:	2b01      	cmp	r3, #1
   10e06:	d82f      	bhi.n	10e68 <z_nrf_clock_control_lf_on+0x94>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   10e08:	2f01      	cmp	r7, #1
   10e0a:	d107      	bne.n	10e1c <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   10e0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   10e10:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   10e14:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   10e18:	2b01      	cmp	r3, #1
   10e1a:	d025      	beq.n	10e68 <z_nrf_clock_control_lf_on+0x94>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   10e1c:	f00b fe86 	bl	1cb2c <k_is_in_isr>
   10e20:	4604      	mov	r4, r0
   10e22:	b918      	cbnz	r0, 10e2c <z_nrf_clock_control_lf_on+0x58>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
   10e24:	4b29      	ldr	r3, [pc, #164]	; (10ecc <z_nrf_clock_control_lf_on+0xf8>)
	int key = isr_mode ? irq_lock() : 0;
   10e26:	781b      	ldrb	r3, [r3, #0]
   10e28:	2b00      	cmp	r3, #0
   10e2a:	d141      	bne.n	10eb0 <z_nrf_clock_control_lf_on+0xdc>
	__asm__ volatile(
   10e2c:	f04f 0340 	mov.w	r3, #64	; 0x40
   10e30:	f3ef 8611 	mrs	r6, BASEPRI
   10e34:	f383 8811 	msr	BASEPRI, r3
   10e38:	f3bf 8f6f 	isb	sy
   10e3c:	2401      	movs	r4, #1
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   10e3e:	f8df 8090 	ldr.w	r8, [pc, #144]	; 10ed0 <z_nrf_clock_control_lf_on+0xfc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   10e42:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   10e46:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   10e4a:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
   10e4e:	03d2      	lsls	r2, r2, #15
   10e50:	d50c      	bpl.n	10e6c <z_nrf_clock_control_lf_on+0x98>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   10e52:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   10e56:	2b01      	cmp	r3, #1
   10e58:	d001      	beq.n	10e5e <z_nrf_clock_control_lf_on+0x8a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   10e5a:	2f01      	cmp	r7, #1
   10e5c:	d106      	bne.n	10e6c <z_nrf_clock_control_lf_on+0x98>
	if (isr_mode) {
   10e5e:	b30c      	cbz	r4, 10ea4 <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
   10e60:	f386 8811 	msr	BASEPRI, r6
   10e64:	f3bf 8f6f 	isb	sy
}
   10e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   10e6c:	b1ac      	cbz	r4, 10e9a <z_nrf_clock_control_lf_on+0xc6>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   10e6e:	4630      	mov	r0, r6
   10e70:	f000 fa9e 	bl	113b0 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   10e74:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   10e78:	2b00      	cmp	r3, #0
   10e7a:	d1e4      	bne.n	10e46 <z_nrf_clock_control_lf_on+0x72>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   10e7c:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   10e80:	2a00      	cmp	r2, #0
   10e82:	d0e0      	beq.n	10e46 <z_nrf_clock_control_lf_on+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   10e84:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   10e88:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   10e8c:	2301      	movs	r3, #1
   10e8e:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
   10e92:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   10e96:	60ab      	str	r3, [r5, #8]
}
   10e98:	e7d5      	b.n	10e46 <z_nrf_clock_control_lf_on+0x72>
	return z_impl_k_sleep(timeout);
   10e9a:	2100      	movs	r1, #0
   10e9c:	2021      	movs	r0, #33	; 0x21
   10e9e:	f008 fbbb 	bl	19618 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   10ea2:	e7e7      	b.n	10e74 <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENSET = mask;
   10ea4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   10ea8:	2202      	movs	r2, #2
   10eaa:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   10eae:	e7db      	b.n	10e68 <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENCLR = mask;
   10eb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   10eb4:	2202      	movs	r2, #2
   10eb6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   10eba:	4606      	mov	r6, r0
}
   10ebc:	e7bf      	b.n	10e3e <z_nrf_clock_control_lf_on+0x6a>
   10ebe:	bf00      	nop
   10ec0:	200023d8 	.word	0x200023d8
   10ec4:	20002374 	.word	0x20002374
   10ec8:	200023a0 	.word	0x200023a0
   10ecc:	20003408 	.word	0x20003408
   10ed0:	e000e100 	.word	0xe000e100

00010ed4 <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(int32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
   10ed4:	4a04      	ldr	r2, [pc, #16]	; (10ee8 <sys_clock_timeout_handler+0x14>)
   10ed6:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
   10ed8:	1ac8      	subs	r0, r1, r3
   10eda:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
   10ede:	4403      	add	r3, r0
   10ee0:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   10ee2:	f008 bd0d 	b.w	19900 <sys_clock_announce>
   10ee6:	bf00      	nop
   10ee8:	200023ec 	.word	0x200023ec

00010eec <set_absolute_alarm>:
{
   10eec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10ef0:	0086      	lsls	r6, r0, #2
   10ef2:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   10ef6:	f100 0450 	add.w	r4, r0, #80	; 0x50
   10efa:	f506 3688 	add.w	r6, r6, #69632	; 0x11000
   10efe:	00a4      	lsls	r4, r4, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_rtc_event_clear(NRF_RTC_Type * p_reg, nrf_rtc_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   10f00:	b2a4      	uxth	r4, r4
   10f02:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   10f06:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    return p_reg->CC[ch];
   10f0a:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   10f0e:	f8df 806c 	ldr.w	r8, [pc, #108]	; 10f7c <set_absolute_alarm+0x90>
	uint32_t cc_val = abs_val & COUNTER_MAX;
   10f12:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   10f16:	f504 3488 	add.w	r4, r4, #69632	; 0x11000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   10f1a:	4087      	lsls	r7, r0
     return p_reg->COUNTER;
   10f1c:	f8d8 9504 	ldr.w	r9, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   10f20:	eba3 0309 	sub.w	r3, r3, r9
   10f24:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   10f28:	f029 427f 	bic.w	r2, r9, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   10f2c:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
   10f2e:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
   10f32:	d102      	bne.n	10f3a <set_absolute_alarm+0x4e>
	z_impl_k_busy_wait(usec_to_wait);
   10f34:	2013      	movs	r0, #19
   10f36:	f00c f92d 	bl	1d194 <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   10f3a:	f109 0202 	add.w	r2, r9, #2
	return (a - b) & COUNTER_MAX;
   10f3e:	1aab      	subs	r3, r5, r2
   10f40:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
   10f44:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   10f48:	bf88      	it	hi
   10f4a:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   10f4c:	2300      	movs	r3, #0
   10f4e:	6023      	str	r3, [r4, #0]
   10f50:	6823      	ldr	r3, [r4, #0]
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   10f52:	f8c8 7344 	str.w	r7, [r8, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   10f56:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   10f5a:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
   10f5e:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   10f62:	4599      	cmp	r9, r3
   10f64:	d006      	beq.n	10f74 <set_absolute_alarm+0x88>
	return (a - b) & COUNTER_MAX;
   10f66:	1aeb      	subs	r3, r5, r3
   10f68:	3b02      	subs	r3, #2
   10f6a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   10f6e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   10f72:	d801      	bhi.n	10f78 <set_absolute_alarm+0x8c>
}
   10f74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		prev_cc = cc_val;
   10f78:	462b      	mov	r3, r5
   10f7a:	e7cf      	b.n	10f1c <set_absolute_alarm+0x30>
   10f7c:	40011000 	.word	0x40011000

00010f80 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
   10f80:	b570      	push	{r4, r5, r6, lr}
   10f82:	4d15      	ldr	r5, [pc, #84]	; (10fd8 <rtc_nrf_isr+0x58>)
    return p_reg->INTENSET & mask;
   10f84:	4c15      	ldr	r4, [pc, #84]	; (10fdc <rtc_nrf_isr+0x5c>)
	ARG_UNUSED(arg);

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   10f86:	2600      	movs	r6, #0
   10f88:	682b      	ldr	r3, [r5, #0]
   10f8a:	2000      	movs	r0, #0
   10f8c:	b106      	cbz	r6, 10f90 <rtc_nrf_isr+0x10>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
   10f8e:	bd70      	pop	{r4, r5, r6, pc}
   10f90:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
   10f94:	03d2      	lsls	r2, r2, #15
   10f96:	d5fa      	bpl.n	10f8e <rtc_nrf_isr+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   10f98:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
   10f9c:	2a00      	cmp	r2, #0
   10f9e:	d0f6      	beq.n	10f8e <rtc_nrf_isr+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   10fa0:	f8c4 6140 	str.w	r6, [r4, #320]	; 0x140
   10fa4:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   10fa8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   10fac:	f8c4 2348 	str.w	r2, [r4, #840]	; 0x348
    return p_reg->CC[ch];
   10fb0:	f8d4 1540 	ldr.w	r1, [r4, #1344]	; 0x540
     return p_reg->COUNTER;
   10fb4:	f8d4 6504 	ldr.w	r6, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   10fb8:	1a72      	subs	r2, r6, r1
   10fba:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
				cc_val = now;
   10fbe:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
   10fc2:	bf88      	it	hi
   10fc4:	4631      	movhi	r1, r6
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   10fc6:	2601      	movs	r6, #1
			if (handler) {
   10fc8:	b11b      	cbz	r3, 10fd2 <rtc_nrf_isr+0x52>
				handler(chan, cc_val,
   10fca:	686a      	ldr	r2, [r5, #4]
   10fcc:	6028      	str	r0, [r5, #0]
   10fce:	4798      	blx	r3
   10fd0:	e7da      	b.n	10f88 <rtc_nrf_isr+0x8>
   10fd2:	602b      	str	r3, [r5, #0]
}
   10fd4:	e7db      	b.n	10f8e <rtc_nrf_isr+0xe>
   10fd6:	bf00      	nop
   10fd8:	200023e0 	.word	0x200023e0
   10fdc:	40011000 	.word	0x40011000

00010fe0 <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
   10fe0:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
   10fe2:	4c0f      	ldr	r4, [pc, #60]	; (11020 <sys_clock_driver_init+0x40>)
   10fe4:	2500      	movs	r5, #0
    p_reg->INTENSET = mask;
   10fe6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
   10fea:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    p_reg->INTENSET = mask;
   10fee:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   10ff2:	4b0c      	ldr	r3, [pc, #48]	; (11024 <sys_clock_driver_init+0x44>)
   10ff4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   10ff8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   10ffc:	2101      	movs	r1, #1
   10ffe:	462a      	mov	r2, r5
   11000:	2011      	movs	r0, #17
   11002:	f000 f951 	bl	112a8 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   11006:	2011      	movs	r0, #17
   11008:	f000 f91c 	bl	11244 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1100c:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1100e:	4a06      	ldr	r2, [pc, #24]	; (11028 <sys_clock_driver_init+0x48>)
   11010:	60a3      	str	r3, [r4, #8]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
   11012:	2002      	movs	r0, #2
   11014:	6023      	str	r3, [r4, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
   11016:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
   11018:	f7ff fedc 	bl	10dd4 <z_nrf_clock_control_lf_on>

	return 0;
}
   1101c:	4628      	mov	r0, r5
   1101e:	bd38      	pop	{r3, r4, r5, pc}
   11020:	40011000 	.word	0x40011000
   11024:	e000e100 	.word	0xe000e100
   11028:	200023e8 	.word	0x200023e8

0001102c <sys_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1102c:	4a13      	ldr	r2, [pc, #76]	; (1107c <sys_clock_set_timeout+0x50>)
   1102e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   11032:	bf14      	ite	ne
   11034:	4603      	movne	r3, r0
   11036:	4613      	moveq	r3, r2
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   11038:	3b01      	subs	r3, #1
   1103a:	2b00      	cmp	r3, #0
   1103c:	dd1c      	ble.n	11078 <sys_clock_set_timeout+0x4c>
   1103e:	4293      	cmp	r3, r2
   11040:	bfa8      	it	ge
   11042:	4613      	movge	r3, r2
     return p_reg->COUNTER;
   11044:	4a0e      	ldr	r2, [pc, #56]	; (11080 <sys_clock_set_timeout+0x54>)
   11046:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
   1104a:	4a0e      	ldr	r2, [pc, #56]	; (11084 <sys_clock_set_timeout+0x58>)
   1104c:	6811      	ldr	r1, [r2, #0]
	return (a - b) & COUNTER_MAX;
   1104e:	1a40      	subs	r0, r0, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
   11050:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
   11054:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
		ticks = 0;
   11058:	bf18      	it	ne
   1105a:	2300      	movne	r3, #0
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   1105c:	3201      	adds	r2, #1
   1105e:	4413      	add	r3, r2
	cc_data[chan].callback = handler;
   11060:	4a09      	ldr	r2, [pc, #36]	; (11088 <sys_clock_set_timeout+0x5c>)
   11062:	480a      	ldr	r0, [pc, #40]	; (1108c <sys_clock_set_timeout+0x60>)
   11064:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
   11066:	2000      	movs	r0, #0
   11068:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
   1106a:	4a04      	ldr	r2, [pc, #16]	; (1107c <sys_clock_set_timeout+0x50>)
   1106c:	4293      	cmp	r3, r2
   1106e:	bf94      	ite	ls
   11070:	18c9      	addls	r1, r1, r3
   11072:	1889      	addhi	r1, r1, r2
   11074:	f7ff bf3a 	b.w	10eec <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   11078:	2300      	movs	r3, #0
   1107a:	e7e3      	b.n	11044 <sys_clock_set_timeout+0x18>
   1107c:	007fffff 	.word	0x007fffff
   11080:	40011000 	.word	0x40011000
   11084:	200023ec 	.word	0x200023ec
   11088:	200023e0 	.word	0x200023e0
   1108c:	00010ed5 	.word	0x00010ed5

00011090 <sys_clock_elapsed>:
   11090:	4b04      	ldr	r3, [pc, #16]	; (110a4 <sys_clock_elapsed+0x14>)
   11092:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
{
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return counter_sub(counter(), last_count) / CYC_PER_TICK;
   11096:	4b04      	ldr	r3, [pc, #16]	; (110a8 <sys_clock_elapsed+0x18>)
	return (a - b) & COUNTER_MAX;
   11098:	681b      	ldr	r3, [r3, #0]
   1109a:	1ac0      	subs	r0, r0, r3
}
   1109c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   110a0:	4770      	bx	lr
   110a2:	bf00      	nop
   110a4:	40011000 	.word	0x40011000
   110a8:	200023ec 	.word	0x200023ec

000110ac <sys_clock_cycle_get_32>:
	__asm__ volatile(
   110ac:	f04f 0340 	mov.w	r3, #64	; 0x40
   110b0:	f3ef 8211 	mrs	r2, BASEPRI
   110b4:	f383 8811 	msr	BASEPRI, r3
   110b8:	f3bf 8f6f 	isb	sy

uint32_t sys_clock_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
   110bc:	4906      	ldr	r1, [pc, #24]	; (110d8 <sys_clock_cycle_get_32+0x2c>)
   110be:	4b07      	ldr	r3, [pc, #28]	; (110dc <sys_clock_cycle_get_32+0x30>)
   110c0:	6808      	ldr	r0, [r1, #0]
   110c2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
   110c6:	f382 8811 	msr	BASEPRI, r2
   110ca:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
   110ce:	1a1b      	subs	r3, r3, r0
   110d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
   110d4:	4418      	add	r0, r3
   110d6:	4770      	bx	lr
   110d8:	200023ec 	.word	0x200023ec
   110dc:	40011000 	.word	0x40011000

000110e0 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
   110e0:	4904      	ldr	r1, [pc, #16]	; (110f4 <sub_bytes+0x14>)
   110e2:	1e43      	subs	r3, r0, #1
   110e4:	300f      	adds	r0, #15
   110e6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   110ea:	5c8a      	ldrb	r2, [r1, r2]
   110ec:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   110ee:	4283      	cmp	r3, r0
   110f0:	d1f9      	bne.n	110e6 <sub_bytes+0x6>
	}
}
   110f2:	4770      	bx	lr
   110f4:	0001e322 	.word	0x0001e322

000110f8 <tc_aes128_set_encrypt_key>:
{
   110f8:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   110fa:	4e26      	ldr	r6, [pc, #152]	; (11194 <tc_aes128_set_encrypt_key+0x9c>)
{
   110fc:	4607      	mov	r7, r0
   110fe:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   11100:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   11102:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   11104:	ad01      	add	r5, sp, #4
   11106:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   11108:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1110a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1110c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   11110:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
   11114:	4638      	mov	r0, r7
   11116:	2f00      	cmp	r7, #0
   11118:	d038      	beq.n	1118c <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
   1111a:	2c00      	cmp	r4, #0
   1111c:	d038      	beq.n	11190 <tc_aes128_set_encrypt_key+0x98>
   1111e:	1f38      	subs	r0, r7, #4
   11120:	4621      	mov	r1, r4
   11122:	4602      	mov	r2, r0
   11124:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   11126:	784b      	ldrb	r3, [r1, #1]
   11128:	780d      	ldrb	r5, [r1, #0]
   1112a:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   1112c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   11130:	78cd      	ldrb	r5, [r1, #3]
   11132:	432b      	orrs	r3, r5
   11134:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
   11136:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   11138:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   1113c:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   1113e:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   11142:	d1f0      	bne.n	11126 <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   11144:	4c14      	ldr	r4, [pc, #80]	; (11198 <tc_aes128_set_encrypt_key+0xa0>)
   11146:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   11148:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   1114a:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   1114c:	d116      	bne.n	1117c <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   1114e:	f3c3 4207 	ubfx	r2, r3, #16, #8
   11152:	5ca5      	ldrb	r5, [r4, r2]
   11154:	0e1a      	lsrs	r2, r3, #24
   11156:	5ca2      	ldrb	r2, [r4, r2]
   11158:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   1115c:	f3c3 2507 	ubfx	r5, r3, #8, #8
   11160:	b2db      	uxtb	r3, r3
   11162:	5d65      	ldrb	r5, [r4, r5]
   11164:	5ce3      	ldrb	r3, [r4, r3]
   11166:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   1116a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   1116e:	f021 0303 	bic.w	r3, r1, #3
   11172:	3330      	adds	r3, #48	; 0x30
   11174:	446b      	add	r3, sp
   11176:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   1117a:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
   1117c:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   11180:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   11182:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   11184:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   11186:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   11188:	d1de      	bne.n	11148 <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
   1118a:	2001      	movs	r0, #1
}
   1118c:	b00d      	add	sp, #52	; 0x34
   1118e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   11190:	4620      	mov	r0, r4
   11192:	e7fb      	b.n	1118c <tc_aes128_set_encrypt_key+0x94>
   11194:	0001d8a4 	.word	0x0001d8a4
   11198:	0001e322 	.word	0x0001e322

0001119c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   1119c:	4a09      	ldr	r2, [pc, #36]	; (111c4 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   1119e:	490a      	ldr	r1, [pc, #40]	; (111c8 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   111a0:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   111a2:	6809      	ldr	r1, [r1, #0]
   111a4:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   111a6:	4909      	ldr	r1, [pc, #36]	; (111cc <arch_swap+0x30>)
	_current->arch.basepri = key;
   111a8:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   111aa:	684b      	ldr	r3, [r1, #4]
   111ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   111b0:	604b      	str	r3, [r1, #4]
   111b2:	2300      	movs	r3, #0
   111b4:	f383 8811 	msr	BASEPRI, r3
   111b8:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   111bc:	6893      	ldr	r3, [r2, #8]
}
   111be:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   111c0:	4770      	bx	lr
   111c2:	bf00      	nop
   111c4:	20002638 	.word	0x20002638
   111c8:	0001de2c 	.word	0x0001de2c
   111cc:	e000ed00 	.word	0xe000ed00

000111d0 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   111d0:	4912      	ldr	r1, [pc, #72]	; (1121c <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   111d2:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   111d4:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   111d8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   111da:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   111de:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   111e2:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   111e4:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   111e8:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   111ec:	4f0c      	ldr	r7, [pc, #48]	; (11220 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   111ee:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   111f2:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
   111f4:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   111f6:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   111f8:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   111fa:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   111fc:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   111fe:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   11202:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   11204:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   11206:	f000 fc23 	bl	11a50 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   1120a:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   1120e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   11212:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   11216:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   1121a:	4770      	bx	lr
    ldr r1, =_kernel
   1121c:	20002638 	.word	0x20002638
    ldr v4, =_SCS_ICSR
   11220:	e000ed04 	.word	0xe000ed04

00011224 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
   11224:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   11228:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   1122a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   1122e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   11232:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   11234:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   11238:	2902      	cmp	r1, #2
    beq _oops
   1123a:	d0ff      	beq.n	1123c <_oops>

0001123c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   1123c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   1123e:	f009 ff67 	bl	1b110 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   11242:	bd01      	pop	{r0, pc}

00011244 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   11244:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   11246:	2b00      	cmp	r3, #0
   11248:	db08      	blt.n	1125c <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1124a:	2201      	movs	r2, #1
   1124c:	f000 001f 	and.w	r0, r0, #31
   11250:	fa02 f000 	lsl.w	r0, r2, r0
   11254:	095b      	lsrs	r3, r3, #5
   11256:	4a02      	ldr	r2, [pc, #8]	; (11260 <arch_irq_enable+0x1c>)
   11258:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   1125c:	4770      	bx	lr
   1125e:	bf00      	nop
   11260:	e000e100 	.word	0xe000e100

00011264 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   11264:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   11266:	2b00      	cmp	r3, #0
   11268:	db0d      	blt.n	11286 <arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1126a:	2201      	movs	r2, #1
   1126c:	095b      	lsrs	r3, r3, #5
   1126e:	f000 001f 	and.w	r0, r0, #31
   11272:	fa02 f000 	lsl.w	r0, r2, r0
   11276:	3320      	adds	r3, #32
   11278:	4a03      	ldr	r2, [pc, #12]	; (11288 <arch_irq_disable+0x24>)
   1127a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   1127e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11282:	f3bf 8f6f 	isb	sy
}
   11286:	4770      	bx	lr
   11288:	e000e100 	.word	0xe000e100

0001128c <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   1128c:	4b05      	ldr	r3, [pc, #20]	; (112a4 <arch_irq_is_enabled+0x18>)
   1128e:	0942      	lsrs	r2, r0, #5
   11290:	f000 001f 	and.w	r0, r0, #31
   11294:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   11298:	2301      	movs	r3, #1
   1129a:	fa03 f000 	lsl.w	r0, r3, r0
}
   1129e:	4010      	ands	r0, r2
   112a0:	4770      	bx	lr
   112a2:	bf00      	nop
   112a4:	e000e100 	.word	0xe000e100

000112a8 <z_arm_irq_priority_set>:
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   112a8:	07d3      	lsls	r3, r2, #31
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   112aa:	b242      	sxtb	r2, r0
		prio += _IRQ_PRIO_OFFSET;
   112ac:	bf54      	ite	pl
   112ae:	1c8b      	addpl	r3, r1, #2
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   112b0:	2300      	movmi	r3, #0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   112b2:	2a00      	cmp	r2, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   112b4:	bfac      	ite	ge
   112b6:	f102 4260 	addge.w	r2, r2, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   112ba:	4a07      	ldrlt	r2, [pc, #28]	; (112d8 <z_arm_irq_priority_set+0x30>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   112bc:	ea4f 1343 	mov.w	r3, r3, lsl #5
   112c0:	bfac      	ite	ge
   112c2:	f502 4261 	addge.w	r2, r2, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   112c6:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   112ca:	b2db      	uxtb	r3, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   112cc:	bfb4      	ite	lt
   112ce:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   112d0:	f882 3300 	strbge.w	r3, [r2, #768]	; 0x300
}
   112d4:	4770      	bx	lr
   112d6:	bf00      	nop
   112d8:	e000ed14 	.word	0xe000ed14

000112dc <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   112dc:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   112de:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   112e0:	4b04      	ldr	r3, [pc, #16]	; (112f4 <_arch_isr_direct_pm+0x18>)
   112e2:	6a18      	ldr	r0, [r3, #32]
   112e4:	b118      	cbz	r0, 112ee <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
   112e6:	2200      	movs	r2, #0
   112e8:	621a      	str	r2, [r3, #32]
		z_pm_save_idle_exit(idle_val);
   112ea:	f00b fc2c 	bl	1cb46 <z_pm_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   112ee:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   112f0:	bd08      	pop	{r3, pc}
   112f2:	bf00      	nop
   112f4:	20002638 	.word	0x20002638

000112f8 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   112f8:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   112fc:	9b00      	ldr	r3, [sp, #0]
   112fe:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   11302:	490a      	ldr	r1, [pc, #40]	; (1132c <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   11304:	9b01      	ldr	r3, [sp, #4]
   11306:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   1130a:	9b02      	ldr	r3, [sp, #8]
   1130c:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   11310:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   11314:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   11318:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   1131c:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   11320:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   11322:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   11324:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   11326:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   11328:	4770      	bx	lr
   1132a:	bf00      	nop
   1132c:	00019e41 	.word	0x00019e41

00011330 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   11330:	4a09      	ldr	r2, [pc, #36]	; (11358 <z_check_thread_stack_fail+0x28>)
{
   11332:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
   11334:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
   11336:	b170      	cbz	r0, 11356 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   11338:	f113 0f16 	cmn.w	r3, #22
   1133c:	6e80      	ldr	r0, [r0, #104]	; 0x68
   1133e:	d005      	beq.n	1134c <z_check_thread_stack_fail+0x1c>
   11340:	f1a0 0220 	sub.w	r2, r0, #32
   11344:	429a      	cmp	r2, r3
   11346:	d805      	bhi.n	11354 <z_check_thread_stack_fail+0x24>
   11348:	4283      	cmp	r3, r0
   1134a:	d203      	bcs.n	11354 <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
   1134c:	4281      	cmp	r1, r0
   1134e:	bf28      	it	cs
   11350:	2000      	movcs	r0, #0
   11352:	4770      	bx	lr
   11354:	2000      	movs	r0, #0
}
   11356:	4770      	bx	lr
   11358:	20002638 	.word	0x20002638

0001135c <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   1135c:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   1135e:	4b09      	ldr	r3, [pc, #36]	; (11384 <arch_switch_to_main_thread+0x28>)
   11360:	6098      	str	r0, [r3, #8]
{
   11362:	460d      	mov	r5, r1
   11364:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   11366:	f000 fb73 	bl	11a50 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   1136a:	4620      	mov	r0, r4
   1136c:	f385 8809 	msr	PSP, r5
   11370:	2100      	movs	r1, #0
   11372:	b663      	cpsie	if
   11374:	f381 8811 	msr	BASEPRI, r1
   11378:	f3bf 8f6f 	isb	sy
   1137c:	2200      	movs	r2, #0
   1137e:	2300      	movs	r3, #0
   11380:	f008 fd5e 	bl	19e40 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   11384:	20002638 	.word	0x20002638

00011388 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   11388:	4901      	ldr	r1, [pc, #4]	; (11390 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   1138a:	2210      	movs	r2, #16
	str	r2, [r1]
   1138c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   1138e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   11390:	e000ed10 	.word	0xe000ed10

00011394 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   11394:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   11396:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   11398:	f380 8811 	msr	BASEPRI, r0
	isb
   1139c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   113a0:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   113a4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   113a6:	b662      	cpsie	i
	isb
   113a8:	f3bf 8f6f 	isb	sy

	bx	lr
   113ac:	4770      	bx	lr
   113ae:	bf00      	nop

000113b0 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   113b0:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   113b2:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   113b4:	f381 8811 	msr	BASEPRI, r1

	wfe
   113b8:	bf20      	wfe

	msr	BASEPRI, r0
   113ba:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   113be:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   113c0:	4770      	bx	lr
   113c2:	bf00      	nop

000113c4 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   113c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   113c6:	4606      	mov	r6, r0

	if (esf != NULL) {
   113c8:	460c      	mov	r4, r1
   113ca:	b301      	cbz	r1, 1140e <z_arm_fatal_error+0x4a>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   113cc:	4b13      	ldr	r3, [pc, #76]	; (1141c <z_arm_fatal_error+0x58>)
   113ce:	4d14      	ldr	r5, [pc, #80]	; (11420 <z_arm_fatal_error+0x5c>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   113d0:	4814      	ldr	r0, [pc, #80]	; (11424 <z_arm_fatal_error+0x60>)
   113d2:	1aed      	subs	r5, r5, r3
   113d4:	08ed      	lsrs	r5, r5, #3
   113d6:	01ad      	lsls	r5, r5, #6
   113d8:	f045 0501 	orr.w	r5, r5, #1
   113dc:	f8ad 5000 	strh.w	r5, [sp]
   113e0:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
   113e4:	6809      	ldr	r1, [r1, #0]
   113e6:	f009 f8ba 	bl	1a55e <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   113ea:	f8ad 5000 	strh.w	r5, [sp]
   113ee:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   113f2:	68e1      	ldr	r1, [r4, #12]
   113f4:	480c      	ldr	r0, [pc, #48]	; (11428 <z_arm_fatal_error+0x64>)
   113f6:	f009 f8b2 	bl	1a55e <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   113fa:	69e1      	ldr	r1, [r4, #28]
   113fc:	480b      	ldr	r0, [pc, #44]	; (1142c <z_arm_fatal_error+0x68>)
   113fe:	462a      	mov	r2, r5
   11400:	f009 f880 	bl	1a504 <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   11404:	69a1      	ldr	r1, [r4, #24]
   11406:	480a      	ldr	r0, [pc, #40]	; (11430 <z_arm_fatal_error+0x6c>)
   11408:	462a      	mov	r2, r5
   1140a:	f009 f87b 	bl	1a504 <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   1140e:	4621      	mov	r1, r4
   11410:	4630      	mov	r0, r6
}
   11412:	b002      	add	sp, #8
   11414:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
   11418:	f007 b8ee 	b.w	185f8 <z_fatal_error>
   1141c:	0001d788 	.word	0x0001d788
   11420:	0001d808 	.word	0x0001d808
   11424:	0001e422 	.word	0x0001e422
   11428:	0001e451 	.word	0x0001e451
   1142c:	0001e480 	.word	0x0001e480
   11430:	0001e48f 	.word	0x0001e48f

00011434 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   11434:	bf30      	wfi
    b z_SysNmiOnReset
   11436:	f7ff bffd 	b.w	11434 <z_SysNmiOnReset>
   1143a:	bf00      	nop

0001143c <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   1143c:	4a0b      	ldr	r2, [pc, #44]	; (1146c <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   1143e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   11440:	4b0b      	ldr	r3, [pc, #44]	; (11470 <z_arm_prep_c+0x34>)
   11442:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   11446:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   11448:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1144c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   11450:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   11454:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   11458:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   1145c:	f007 f92a 	bl	186b4 <z_bss_zero>
	z_data_copy();
   11460:	f008 f96e 	bl	19740 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   11464:	f000 faca 	bl	119fc <z_arm_interrupt_init>
	z_cstart();
   11468:	f007 f948 	bl	186fc <z_cstart>
   1146c:	00000000 	.word	0x00000000
   11470:	e000ed00 	.word	0xe000ed00

00011474 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   11474:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   11476:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   11478:	4a0b      	ldr	r2, [pc, #44]	; (114a8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   1147a:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
   1147c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   1147e:	bf1e      	ittt	ne
	movne	r1, #0
   11480:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   11482:	6211      	strne	r1, [r2, #32]
		blne	z_pm_save_idle_exit
   11484:	f00b fb5f 	blne	1cb46 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   11488:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   1148a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   1148e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   11492:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   11496:	4905      	ldr	r1, [pc, #20]	; (114ac <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   11498:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   1149a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   1149c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   1149e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   114a2:	4903      	ldr	r1, [pc, #12]	; (114b0 <_isr_wrapper+0x3c>)
	bx r1
   114a4:	4708      	bx	r1
   114a6:	0000      	.short	0x0000
	ldr r2, =_kernel
   114a8:	20002638 	.word	0x20002638
	ldr r1, =_sw_isr_table
   114ac:	0001d614 	.word	0x0001d614
	ldr r1, =z_arm_int_exit
   114b0:	00011959 	.word	0x00011959

000114b4 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   114b4:	2000      	movs	r0, #0
    msr CONTROL, r0
   114b6:	f380 8814 	msr	CONTROL, r0
    isb
   114ba:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   114be:	f00c f82b 	bl	1d518 <z_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   114c2:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   114c4:	490d      	ldr	r1, [pc, #52]	; (114fc <__start+0x48>)
    str r0, [r1]
   114c6:	6008      	str	r0, [r1, #0]
    dsb
   114c8:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   114cc:	480c      	ldr	r0, [pc, #48]	; (11500 <__start+0x4c>)
    msr msp, r0
   114ce:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   114d2:	f000 fa61 	bl	11998 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   114d6:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   114d8:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   114dc:	4809      	ldr	r0, [pc, #36]	; (11504 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   114de:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
   114e2:	1840      	adds	r0, r0, r1
    msr PSP, r0
   114e4:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   114e8:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   114ec:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   114ee:	4308      	orrs	r0, r1
    msr CONTROL, r0
   114f0:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   114f4:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   114f8:	f7ff ffa0 	bl	1143c <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   114fc:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   11500:	20004dc0 	.word	0x20004dc0
    ldr r0, =z_interrupt_stacks
   11504:	20004f40 	.word	0x20004f40

00011508 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   11508:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   1150c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   11510:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   11512:	4672      	mov	r2, lr
	bl z_arm_fault
   11514:	f000 f94e 	bl	117b4 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   11518:	bd01      	pop	{r0, pc}
   1151a:	bf00      	nop

0001151c <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
   1151c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11520:	4b35      	ldr	r3, [pc, #212]	; (115f8 <mem_manage_fault+0xdc>)
   11522:	4c36      	ldr	r4, [pc, #216]	; (115fc <mem_manage_fault+0xe0>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   11524:	4d36      	ldr	r5, [pc, #216]	; (11600 <mem_manage_fault+0xe4>)
   11526:	1ae4      	subs	r4, r4, r3
   11528:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
   1152a:	01a4      	lsls	r4, r4, #6
   1152c:	f044 0901 	orr.w	r9, r4, #1
{
   11530:	4607      	mov	r7, r0
   11532:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   11534:	4833      	ldr	r0, [pc, #204]	; (11604 <mem_manage_fault+0xe8>)
   11536:	4649      	mov	r1, r9
{
   11538:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
   1153a:	f008 ffd6 	bl	1a4ea <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   1153e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   11540:	06db      	lsls	r3, r3, #27
   11542:	d503      	bpl.n	1154c <mem_manage_fault+0x30>
		PR_FAULT_INFO("  Stacking error (context area might be"
   11544:	4830      	ldr	r0, [pc, #192]	; (11608 <mem_manage_fault+0xec>)
   11546:	4649      	mov	r1, r9
   11548:	f008 ffcf 	bl	1a4ea <log_0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   1154c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1154e:	0718      	lsls	r0, r3, #28
   11550:	d504      	bpl.n	1155c <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Unstacking error");
   11552:	482e      	ldr	r0, [pc, #184]	; (1160c <mem_manage_fault+0xf0>)
   11554:	f044 0101 	orr.w	r1, r4, #1
   11558:	f008 ffc7 	bl	1a4ea <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   1155c:	4d28      	ldr	r5, [pc, #160]	; (11600 <mem_manage_fault+0xe4>)
   1155e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   11560:	0799      	lsls	r1, r3, #30
   11562:	d423      	bmi.n	115ac <mem_manage_fault+0x90>
	uint32_t mmfar = -EINVAL;
   11564:	f06f 0915 	mvn.w	r9, #21
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   11568:	4d25      	ldr	r5, [pc, #148]	; (11600 <mem_manage_fault+0xe4>)
   1156a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1156c:	07db      	lsls	r3, r3, #31
   1156e:	d504      	bpl.n	1157a <mem_manage_fault+0x5e>
		PR_FAULT_INFO("  Instruction Access Violation");
   11570:	4827      	ldr	r0, [pc, #156]	; (11610 <mem_manage_fault+0xf4>)
   11572:	f044 0101 	orr.w	r1, r4, #1
   11576:	f008 ffb8 	bl	1a4ea <log_0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   1157a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1157c:	0698      	lsls	r0, r3, #26
   1157e:	d504      	bpl.n	1158a <mem_manage_fault+0x6e>
		PR_FAULT_INFO(
   11580:	4824      	ldr	r0, [pc, #144]	; (11614 <mem_manage_fault+0xf8>)
   11582:	f044 0101 	orr.w	r1, r4, #1
   11586:	f008 ffb0 	bl	1a4ea <log_0>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   1158a:	4b1d      	ldr	r3, [pc, #116]	; (11600 <mem_manage_fault+0xe4>)
   1158c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1158e:	06d1      	lsls	r1, r2, #27
   11590:	d424      	bmi.n	115dc <mem_manage_fault+0xc0>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   11592:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   11594:	0792      	lsls	r2, r2, #30
   11596:	d421      	bmi.n	115dc <mem_manage_fault+0xc0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   11598:	2000      	movs	r0, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   1159a:	4a19      	ldr	r2, [pc, #100]	; (11600 <mem_manage_fault+0xe4>)
   1159c:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1159e:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   115a2:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   115a4:	2300      	movs	r3, #0
   115a6:	7033      	strb	r3, [r6, #0]

	return reason;
}
   115a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		PR_FAULT_INFO("  Data Access Violation");
   115ac:	f044 0a01 	orr.w	sl, r4, #1
   115b0:	4819      	ldr	r0, [pc, #100]	; (11618 <mem_manage_fault+0xfc>)
   115b2:	4651      	mov	r1, sl
   115b4:	f008 ff99 	bl	1a4ea <log_0>
		uint32_t temp = SCB->MMFAR;
   115b8:	f8d5 9034 	ldr.w	r9, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   115bc:	6aab      	ldr	r3, [r5, #40]	; 0x28
   115be:	061a      	lsls	r2, r3, #24
   115c0:	d5d0      	bpl.n	11564 <mem_manage_fault+0x48>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   115c2:	4816      	ldr	r0, [pc, #88]	; (1161c <mem_manage_fault+0x100>)
   115c4:	4652      	mov	r2, sl
   115c6:	4649      	mov	r1, r9
   115c8:	f008 ff9c 	bl	1a504 <log_1>
			if (from_hard_fault != 0) {
   115cc:	f1b8 0f00 	cmp.w	r8, #0
   115d0:	d0ca      	beq.n	11568 <mem_manage_fault+0x4c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   115d2:	6aab      	ldr	r3, [r5, #40]	; 0x28
   115d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   115d8:	62ab      	str	r3, [r5, #40]	; 0x28
   115da:	e7c5      	b.n	11568 <mem_manage_fault+0x4c>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   115dc:	685b      	ldr	r3, [r3, #4]
   115de:	051b      	lsls	r3, r3, #20
   115e0:	d5da      	bpl.n	11598 <mem_manage_fault+0x7c>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   115e2:	4639      	mov	r1, r7
   115e4:	4648      	mov	r0, r9
   115e6:	f7ff fea3 	bl	11330 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   115ea:	2800      	cmp	r0, #0
   115ec:	d0d4      	beq.n	11598 <mem_manage_fault+0x7c>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   115ee:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   115f2:	2002      	movs	r0, #2
   115f4:	e7d1      	b.n	1159a <mem_manage_fault+0x7e>
   115f6:	bf00      	nop
   115f8:	0001d788 	.word	0x0001d788
   115fc:	0001d808 	.word	0x0001d808
   11600:	e000ed00 	.word	0xe000ed00
   11604:	0001e4bd 	.word	0x0001e4bd
   11608:	0001e4d3 	.word	0x0001e4d3
   1160c:	0001e506 	.word	0x0001e506
   11610:	0001e547 	.word	0x0001e547
   11614:	0001e566 	.word	0x0001e566
   11618:	0001e519 	.word	0x0001e519
   1161c:	0001e531 	.word	0x0001e531

00011620 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   11620:	b570      	push	{r4, r5, r6, lr}
   11622:	4b23      	ldr	r3, [pc, #140]	; (116b0 <usage_fault.constprop.0+0x90>)
   11624:	4c23      	ldr	r4, [pc, #140]	; (116b4 <usage_fault.constprop.0+0x94>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   11626:	4d24      	ldr	r5, [pc, #144]	; (116b8 <usage_fault.constprop.0+0x98>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
   11628:	4824      	ldr	r0, [pc, #144]	; (116bc <usage_fault.constprop.0+0x9c>)
   1162a:	1ae4      	subs	r4, r4, r3
   1162c:	08e4      	lsrs	r4, r4, #3
   1162e:	01a4      	lsls	r4, r4, #6
   11630:	f044 0601 	orr.w	r6, r4, #1
   11634:	4631      	mov	r1, r6
   11636:	f008 ff58 	bl	1a4ea <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   1163a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1163c:	019b      	lsls	r3, r3, #6
   1163e:	d503      	bpl.n	11648 <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Division by zero");
   11640:	481f      	ldr	r0, [pc, #124]	; (116c0 <usage_fault.constprop.0+0xa0>)
   11642:	4631      	mov	r1, r6
   11644:	f008 ff51 	bl	1a4ea <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   11648:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1164a:	01dd      	lsls	r5, r3, #7
   1164c:	d504      	bpl.n	11658 <usage_fault.constprop.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
   1164e:	481d      	ldr	r0, [pc, #116]	; (116c4 <usage_fault.constprop.0+0xa4>)
   11650:	f044 0101 	orr.w	r1, r4, #1
   11654:	f008 ff49 	bl	1a4ea <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   11658:	4d17      	ldr	r5, [pc, #92]	; (116b8 <usage_fault.constprop.0+0x98>)
   1165a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1165c:	0318      	lsls	r0, r3, #12
   1165e:	d504      	bpl.n	1166a <usage_fault.constprop.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
   11660:	4819      	ldr	r0, [pc, #100]	; (116c8 <usage_fault.constprop.0+0xa8>)
   11662:	f044 0101 	orr.w	r1, r4, #1
   11666:	f008 ff40 	bl	1a4ea <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   1166a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1166c:	0359      	lsls	r1, r3, #13
   1166e:	d504      	bpl.n	1167a <usage_fault.constprop.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   11670:	4816      	ldr	r0, [pc, #88]	; (116cc <usage_fault.constprop.0+0xac>)
   11672:	f044 0101 	orr.w	r1, r4, #1
   11676:	f008 ff38 	bl	1a4ea <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   1167a:	4d0f      	ldr	r5, [pc, #60]	; (116b8 <usage_fault.constprop.0+0x98>)
   1167c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1167e:	039a      	lsls	r2, r3, #14
   11680:	d504      	bpl.n	1168c <usage_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   11682:	4813      	ldr	r0, [pc, #76]	; (116d0 <usage_fault.constprop.0+0xb0>)
   11684:	f044 0101 	orr.w	r1, r4, #1
   11688:	f008 ff2f 	bl	1a4ea <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   1168c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1168e:	03db      	lsls	r3, r3, #15
   11690:	d504      	bpl.n	1169c <usage_fault.constprop.0+0x7c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   11692:	4810      	ldr	r0, [pc, #64]	; (116d4 <usage_fault.constprop.0+0xb4>)
   11694:	f044 0101 	orr.w	r1, r4, #1
   11698:	f008 ff27 	bl	1a4ea <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   1169c:	4a06      	ldr	r2, [pc, #24]	; (116b8 <usage_fault.constprop.0+0x98>)
   1169e:	6a93      	ldr	r3, [r2, #40]	; 0x28
   116a0:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   116a4:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   116a8:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
   116aa:	2000      	movs	r0, #0
   116ac:	bd70      	pop	{r4, r5, r6, pc}
   116ae:	bf00      	nop
   116b0:	0001d788 	.word	0x0001d788
   116b4:	0001d808 	.word	0x0001d808
   116b8:	e000ed00 	.word	0xe000ed00
   116bc:	0001e595 	.word	0x0001e595
   116c0:	0001e5ad 	.word	0x0001e5ad
   116c4:	0001e5c0 	.word	0x0001e5c0
   116c8:	0001e5da 	.word	0x0001e5da
   116cc:	0001e5f8 	.word	0x0001e5f8
   116d0:	0001e61d 	.word	0x0001e61d
   116d4:	0001e637 	.word	0x0001e637

000116d8 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   116d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   116dc:	4b2a      	ldr	r3, [pc, #168]	; (11788 <bus_fault.constprop.0+0xb0>)
   116de:	4c2b      	ldr	r4, [pc, #172]	; (1178c <bus_fault.constprop.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   116e0:	4d2b      	ldr	r5, [pc, #172]	; (11790 <bus_fault.constprop.0+0xb8>)
   116e2:	1ae4      	subs	r4, r4, r3
   116e4:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
   116e6:	01a4      	lsls	r4, r4, #6
   116e8:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   116ec:	4607      	mov	r7, r0
   116ee:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   116f0:	4828      	ldr	r0, [pc, #160]	; (11794 <bus_fault.constprop.0+0xbc>)
   116f2:	4641      	mov	r1, r8
   116f4:	f008 fef9 	bl	1a4ea <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   116f8:	6aab      	ldr	r3, [r5, #40]	; 0x28
   116fa:	04d9      	lsls	r1, r3, #19
   116fc:	d503      	bpl.n	11706 <bus_fault.constprop.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
   116fe:	4826      	ldr	r0, [pc, #152]	; (11798 <bus_fault.constprop.0+0xc0>)
   11700:	4641      	mov	r1, r8
   11702:	f008 fef2 	bl	1a4ea <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   11706:	6aab      	ldr	r3, [r5, #40]	; 0x28
   11708:	051a      	lsls	r2, r3, #20
   1170a:	d504      	bpl.n	11716 <bus_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
   1170c:	4823      	ldr	r0, [pc, #140]	; (1179c <bus_fault.constprop.0+0xc4>)
   1170e:	f044 0101 	orr.w	r1, r4, #1
   11712:	f008 feea 	bl	1a4ea <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   11716:	4d1e      	ldr	r5, [pc, #120]	; (11790 <bus_fault.constprop.0+0xb8>)
   11718:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1171a:	059b      	lsls	r3, r3, #22
   1171c:	d512      	bpl.n	11744 <bus_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
   1171e:	f044 0801 	orr.w	r8, r4, #1
   11722:	481f      	ldr	r0, [pc, #124]	; (117a0 <bus_fault.constprop.0+0xc8>)
   11724:	4641      	mov	r1, r8
   11726:	f008 fee0 	bl	1a4ea <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
   1172a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   1172c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1172e:	0418      	lsls	r0, r3, #16
   11730:	d508      	bpl.n	11744 <bus_fault.constprop.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   11732:	481c      	ldr	r0, [pc, #112]	; (117a4 <bus_fault.constprop.0+0xcc>)
   11734:	4642      	mov	r2, r8
   11736:	f008 fee5 	bl	1a504 <log_1>
			if (from_hard_fault != 0) {
   1173a:	b11f      	cbz	r7, 11744 <bus_fault.constprop.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   1173c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1173e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   11742:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   11744:	4d12      	ldr	r5, [pc, #72]	; (11790 <bus_fault.constprop.0+0xb8>)
   11746:	6aab      	ldr	r3, [r5, #40]	; 0x28
   11748:	0559      	lsls	r1, r3, #21
   1174a:	d504      	bpl.n	11756 <bus_fault.constprop.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
   1174c:	4816      	ldr	r0, [pc, #88]	; (117a8 <bus_fault.constprop.0+0xd0>)
   1174e:	f044 0101 	orr.w	r1, r4, #1
   11752:	f008 feca 	bl	1a4ea <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   11756:	6aab      	ldr	r3, [r5, #40]	; 0x28
   11758:	05da      	lsls	r2, r3, #23
   1175a:	d50d      	bpl.n	11778 <bus_fault.constprop.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
   1175c:	4813      	ldr	r0, [pc, #76]	; (117ac <bus_fault.constprop.0+0xd4>)
   1175e:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   11762:	f008 fec2 	bl	1a4ea <log_0>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   11766:	4a0a      	ldr	r2, [pc, #40]	; (11790 <bus_fault.constprop.0+0xb8>)
   11768:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   1176a:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   1176c:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   11770:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   11772:	7030      	strb	r0, [r6, #0]
}
   11774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   11778:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1177a:	049b      	lsls	r3, r3, #18
   1177c:	d5f3      	bpl.n	11766 <bus_fault.constprop.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   1177e:	480c      	ldr	r0, [pc, #48]	; (117b0 <bus_fault.constprop.0+0xd8>)
   11780:	f044 0101 	orr.w	r1, r4, #1
   11784:	e7ed      	b.n	11762 <bus_fault.constprop.0+0x8a>
   11786:	bf00      	nop
   11788:	0001d788 	.word	0x0001d788
   1178c:	0001d808 	.word	0x0001d808
   11790:	e000ed00 	.word	0xe000ed00
   11794:	0001e662 	.word	0x0001e662
   11798:	0001e678 	.word	0x0001e678
   1179c:	0001e506 	.word	0x0001e506
   117a0:	0001e689 	.word	0x0001e689
   117a4:	0001e6a2 	.word	0x0001e6a2
   117a8:	0001e6b7 	.word	0x0001e6b7
   117ac:	0001e6d2 	.word	0x0001e6d2
   117b0:	0001e566 	.word	0x0001e566

000117b4 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   117b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   117b8:	4b58      	ldr	r3, [pc, #352]	; (1191c <z_arm_fault+0x168>)
   117ba:	685e      	ldr	r6, [r3, #4]
{
   117bc:	b08b      	sub	sp, #44	; 0x2c
   117be:	460f      	mov	r7, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   117c0:	f3c6 0408 	ubfx	r4, r6, #0, #9
   117c4:	2500      	movs	r5, #0
   117c6:	f385 8811 	msr	BASEPRI, r5
   117ca:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   117ce:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   117d2:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   117d6:	d10d      	bne.n	117f4 <z_arm_fault+0x40>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   117d8:	f002 030c 	and.w	r3, r2, #12
   117dc:	2b08      	cmp	r3, #8
   117de:	d10b      	bne.n	117f8 <z_arm_fault+0x44>
   117e0:	494f      	ldr	r1, [pc, #316]	; (11920 <z_arm_fault+0x16c>)
   117e2:	4b50      	ldr	r3, [pc, #320]	; (11924 <z_arm_fault+0x170>)
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   117e4:	4850      	ldr	r0, [pc, #320]	; (11928 <z_arm_fault+0x174>)
   117e6:	1ac9      	subs	r1, r1, r3
   117e8:	08c9      	lsrs	r1, r1, #3
   117ea:	0189      	lsls	r1, r1, #6
   117ec:	f041 0101 	orr.w	r1, r1, #1
   117f0:	f008 fe7b 	bl	1a4ea <log_0>
		return NULL;
   117f4:	462f      	mov	r7, r5
   117f6:	e003      	b.n	11800 <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   117f8:	0712      	lsls	r2, r2, #28
   117fa:	d401      	bmi.n	11800 <z_arm_fault+0x4c>
			ptr_esf = (z_arch_esf_t *)msp;
   117fc:	4607      	mov	r7, r0
			*nested_exc = true;
   117fe:	2501      	movs	r5, #1
	*recoverable = false;
   11800:	2300      	movs	r3, #0
   11802:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   11806:	1ee3      	subs	r3, r4, #3
   11808:	2b09      	cmp	r3, #9
   1180a:	d86e      	bhi.n	118ea <z_arm_fault+0x136>
   1180c:	e8df f003 	tbb	[pc, r3]
   11810:	40605c05 	.word	0x40605c05
   11814:	6d6d6d6d 	.word	0x6d6d6d6d
   11818:	646d      	.short	0x646d
   1181a:	4b42      	ldr	r3, [pc, #264]	; (11924 <z_arm_fault+0x170>)
   1181c:	4e40      	ldr	r6, [pc, #256]	; (11920 <z_arm_fault+0x16c>)
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1181e:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 1191c <z_arm_fault+0x168>
	PR_FAULT_INFO("***** HARD FAULT *****");
   11822:	4842      	ldr	r0, [pc, #264]	; (1192c <z_arm_fault+0x178>)
   11824:	1af6      	subs	r6, r6, r3
   11826:	08f6      	lsrs	r6, r6, #3
   11828:	01b6      	lsls	r6, r6, #6
   1182a:	f046 0601 	orr.w	r6, r6, #1
   1182e:	4631      	mov	r1, r6
   11830:	f008 fe5b 	bl	1a4ea <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   11834:	f8d8 402c 	ldr.w	r4, [r8, #44]	; 0x2c
	*recoverable = false;
   11838:	f04f 0900 	mov.w	r9, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1183c:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
   11840:	f88d 9007 	strb.w	r9, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   11844:	d005      	beq.n	11852 <z_arm_fault+0x9e>
		PR_EXC("  Bus fault on vector table read");
   11846:	483a      	ldr	r0, [pc, #232]	; (11930 <z_arm_fault+0x17c>)
   11848:	4631      	mov	r1, r6
	PR_FAULT_INFO(
   1184a:	f008 fe4e 	bl	1a4ea <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   1184e:	2400      	movs	r4, #0
}
   11850:	e021      	b.n	11896 <z_arm_fault+0xe2>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   11852:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
   11856:	005b      	lsls	r3, r3, #1
   11858:	d51d      	bpl.n	11896 <z_arm_fault+0xe2>
		PR_EXC("  Fault escalation (see below)");
   1185a:	4836      	ldr	r0, [pc, #216]	; (11934 <z_arm_fault+0x180>)
   1185c:	4631      	mov	r1, r6
   1185e:	f008 fe44 	bl	1a4ea <log_0>
		if (SCB_MMFSR != 0) {
   11862:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
   11866:	b133      	cbz	r3, 11876 <z_arm_fault+0xc2>
			reason = mem_manage_fault(esf, 1, recoverable);
   11868:	f10d 0207 	add.w	r2, sp, #7
   1186c:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   1186e:	4638      	mov	r0, r7
   11870:	f7ff fe54 	bl	1151c <mem_manage_fault>
   11874:	e00e      	b.n	11894 <z_arm_fault+0xe0>
		} else if (SCB_BFSR != 0) {
   11876:	f898 3029 	ldrb.w	r3, [r8, #41]	; 0x29
   1187a:	b12b      	cbz	r3, 11888 <z_arm_fault+0xd4>
			reason = bus_fault(esf, 1, recoverable);
   1187c:	f10d 0107 	add.w	r1, sp, #7
   11880:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   11882:	f7ff ff29 	bl	116d8 <bus_fault.constprop.0>
   11886:	e005      	b.n	11894 <z_arm_fault+0xe0>
		} else if (SCB_UFSR != 0) {
   11888:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   1188c:	b29b      	uxth	r3, r3
   1188e:	b113      	cbz	r3, 11896 <z_arm_fault+0xe2>
			reason = usage_fault(esf);
   11890:	f7ff fec6 	bl	11620 <usage_fault.constprop.0>
   11894:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   11896:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1189a:	b993      	cbnz	r3, 118c2 <z_arm_fault+0x10e>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   1189c:	2220      	movs	r2, #32
   1189e:	4639      	mov	r1, r7
   118a0:	a802      	add	r0, sp, #8
   118a2:	f009 fc89 	bl	1b1b8 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   118a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   118a8:	b39d      	cbz	r5, 11912 <z_arm_fault+0x15e>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   118aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
   118ae:	b922      	cbnz	r2, 118ba <z_arm_fault+0x106>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   118b0:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   118b4:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   118b8:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   118ba:	a902      	add	r1, sp, #8
   118bc:	4620      	mov	r0, r4
   118be:	f7ff fd81 	bl	113c4 <z_arm_fatal_error>
}
   118c2:	b00b      	add	sp, #44	; 0x2c
   118c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   118c8:	f10d 0207 	add.w	r2, sp, #7
   118cc:	2100      	movs	r1, #0
   118ce:	e7ce      	b.n	1186e <z_arm_fault+0xba>
		reason = bus_fault(esf, 0, recoverable);
   118d0:	f10d 0107 	add.w	r1, sp, #7
   118d4:	2000      	movs	r0, #0
   118d6:	e7d4      	b.n	11882 <z_arm_fault+0xce>
   118d8:	4911      	ldr	r1, [pc, #68]	; (11920 <z_arm_fault+0x16c>)
   118da:	4b12      	ldr	r3, [pc, #72]	; (11924 <z_arm_fault+0x170>)
	PR_FAULT_INFO(
   118dc:	4816      	ldr	r0, [pc, #88]	; (11938 <z_arm_fault+0x184>)
   118de:	1ac9      	subs	r1, r1, r3
   118e0:	08c9      	lsrs	r1, r1, #3
   118e2:	0189      	lsls	r1, r1, #6
   118e4:	f041 0101 	orr.w	r1, r1, #1
   118e8:	e7af      	b.n	1184a <z_arm_fault+0x96>
   118ea:	4a0e      	ldr	r2, [pc, #56]	; (11924 <z_arm_fault+0x170>)
   118ec:	4b0c      	ldr	r3, [pc, #48]	; (11920 <z_arm_fault+0x16c>)
	PR_FAULT_INFO("***** %s %d) *****",
   118ee:	4813      	ldr	r0, [pc, #76]	; (1193c <z_arm_fault+0x188>)
   118f0:	4913      	ldr	r1, [pc, #76]	; (11940 <z_arm_fault+0x18c>)
   118f2:	1a9b      	subs	r3, r3, r2
   118f4:	08db      	lsrs	r3, r3, #3
   118f6:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
   118fa:	ea4f 1383 	mov.w	r3, r3, lsl #6
   118fe:	bf18      	it	ne
   11900:	4601      	movne	r1, r0
   11902:	f043 0301 	orr.w	r3, r3, #1
   11906:	480f      	ldr	r0, [pc, #60]	; (11944 <z_arm_fault+0x190>)
   11908:	f1a4 0210 	sub.w	r2, r4, #16
   1190c:	f008 fe0e 	bl	1a52c <log_2>
   11910:	e79d      	b.n	1184e <z_arm_fault+0x9a>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   11912:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   11916:	f023 0301 	bic.w	r3, r3, #1
   1191a:	e7cd      	b.n	118b8 <z_arm_fault+0x104>
   1191c:	e000ed00 	.word	0xe000ed00
   11920:	0001d808 	.word	0x0001d808
   11924:	0001d788 	.word	0x0001d788
   11928:	0001e6ea 	.word	0x0001e6ea
   1192c:	0001e715 	.word	0x0001e715
   11930:	0001e72c 	.word	0x0001e72c
   11934:	0001e74d 	.word	0x0001e74d
   11938:	0001e76c 	.word	0x0001e76c
   1193c:	0001e7a5 	.word	0x0001e7a5
   11940:	0001e790 	.word	0x0001e790
   11944:	0001e7be 	.word	0x0001e7be

00011948 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   11948:	4a02      	ldr	r2, [pc, #8]	; (11954 <z_arm_fault_init+0xc>)
   1194a:	6953      	ldr	r3, [r2, #20]
   1194c:	f043 0310 	orr.w	r3, r3, #16
   11950:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   11952:	4770      	bx	lr
   11954:	e000ed00 	.word	0xe000ed00

00011958 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   11958:	4b04      	ldr	r3, [pc, #16]	; (1196c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   1195a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   1195c:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
   1195e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   11960:	d003      	beq.n	1196a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   11962:	4903      	ldr	r1, [pc, #12]	; (11970 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   11964:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   11968:	600a      	str	r2, [r1, #0]

0001196a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   1196a:	4770      	bx	lr
	ldr r3, =_kernel
   1196c:	20002638 	.word	0x20002638
	ldr r1, =_SCS_ICSR
   11970:	e000ed04 	.word	0xe000ed04

00011974 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   11974:	4907      	ldr	r1, [pc, #28]	; (11994 <z_arm_clear_arm_mpu_config+0x20>)
   11976:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
   1197a:	2300      	movs	r3, #0
	int num_regions =
   1197c:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
   11980:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
   11982:	4293      	cmp	r3, r2
   11984:	d100      	bne.n	11988 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   11986:	4770      	bx	lr
  MPU->RNR = rnr;
   11988:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
   1198c:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   11990:	3301      	adds	r3, #1
   11992:	e7f6      	b.n	11982 <z_arm_clear_arm_mpu_config+0xe>
   11994:	e000ed00 	.word	0xe000ed00

00011998 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
   11998:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   1199a:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   1199c:	2300      	movs	r3, #0
   1199e:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   119a2:	f7ff ffe7 	bl	11974 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   119a6:	4b14      	ldr	r3, [pc, #80]	; (119f8 <z_arm_init_arch_hw_at_boot+0x60>)
   119a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   119ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   119b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   119b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   119b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   119bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   119c0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   119c4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   119c8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   119cc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   119d0:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   119d4:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
   119d8:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
   119dc:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
   119e0:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
   119e4:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
   119e8:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
   119ec:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   119ee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   119f2:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   119f6:	bd08      	pop	{r3, pc}
   119f8:	e000e100 	.word	0xe000e100

000119fc <z_arm_interrupt_init>:
   119fc:	4804      	ldr	r0, [pc, #16]	; (11a10 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   119fe:	2300      	movs	r3, #0
   11a00:	2140      	movs	r1, #64	; 0x40
   11a02:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   11a04:	3301      	adds	r3, #1
   11a06:	2b27      	cmp	r3, #39	; 0x27
   11a08:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   11a0c:	d1f9      	bne.n	11a02 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   11a0e:	4770      	bx	lr
   11a10:	e000e100 	.word	0xe000e100

00011a14 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   11a14:	4b06      	ldr	r3, [pc, #24]	; (11a30 <z_impl_k_thread_abort+0x1c>)
   11a16:	689b      	ldr	r3, [r3, #8]
   11a18:	4283      	cmp	r3, r0
   11a1a:	d107      	bne.n	11a2c <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   11a1c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   11a20:	b123      	cbz	r3, 11a2c <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   11a22:	4a04      	ldr	r2, [pc, #16]	; (11a34 <z_impl_k_thread_abort+0x20>)
   11a24:	6853      	ldr	r3, [r2, #4]
   11a26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   11a2a:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
   11a2c:	f007 be24 	b.w	19678 <z_thread_abort>
   11a30:	20002638 	.word	0x20002638
   11a34:	e000ed00 	.word	0xe000ed00

00011a38 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   11a38:	4b02      	ldr	r3, [pc, #8]	; (11a44 <z_arm_configure_static_mpu_regions+0xc>)
   11a3a:	4a03      	ldr	r2, [pc, #12]	; (11a48 <z_arm_configure_static_mpu_regions+0x10>)
   11a3c:	4803      	ldr	r0, [pc, #12]	; (11a4c <z_arm_configure_static_mpu_regions+0x14>)
   11a3e:	2101      	movs	r1, #1
   11a40:	f000 b88c 	b.w	11b5c <arm_core_mpu_configure_static_mpu_regions>
   11a44:	20010000 	.word	0x20010000
   11a48:	20000000 	.word	0x20000000
   11a4c:	0001da58 	.word	0x0001da58

00011a50 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   11a50:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   11a52:	4b05      	ldr	r3, [pc, #20]	; (11a68 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
   11a54:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
   11a56:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   11a58:	4a04      	ldr	r2, [pc, #16]	; (11a6c <z_arm_configure_dynamic_mpu_regions+0x1c>)
   11a5a:	2120      	movs	r1, #32
   11a5c:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   11a60:	4618      	mov	r0, r3
   11a62:	2101      	movs	r1, #1
   11a64:	f000 b884 	b.w	11b70 <arm_core_mpu_configure_dynamic_mpu_regions>
   11a68:	200023f0 	.word	0x200023f0
   11a6c:	150b0000 	.word	0x150b0000

00011a70 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   11a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
   11a72:	4f2a      	ldr	r7, [pc, #168]	; (11b1c <mpu_configure_regions+0xac>)
   11a74:	460e      	mov	r6, r1
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   11a76:	2100      	movs	r1, #0
   11a78:	42b1      	cmp	r1, r6
   11a7a:	da14      	bge.n	11aa6 <mpu_configure_regions+0x36>
		if (regions[i].size == 0U) {
   11a7c:	6844      	ldr	r4, [r0, #4]
   11a7e:	2c00      	cmp	r4, #0
   11a80:	d048      	beq.n	11b14 <mpu_configure_regions+0xa4>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
   11a82:	b1c3      	cbz	r3, 11ab6 <mpu_configure_regions+0x46>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   11a84:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   11a88:	ea14 0f0c 	tst.w	r4, ip
   11a8c:	d00d      	beq.n	11aaa <mpu_configure_regions+0x3a>
   11a8e:	4a24      	ldr	r2, [pc, #144]	; (11b20 <mpu_configure_regions+0xb0>)
   11a90:	4b24      	ldr	r3, [pc, #144]	; (11b24 <mpu_configure_regions+0xb4>)
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
   11a92:	4825      	ldr	r0, [pc, #148]	; (11b28 <mpu_configure_regions+0xb8>)
   11a94:	1ad2      	subs	r2, r2, r3
   11a96:	08d2      	lsrs	r2, r2, #3
   11a98:	0192      	lsls	r2, r2, #6
   11a9a:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   11a9e:	f008 fd31 	bl	1a504 <log_1>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
   11aa2:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   11aa6:	4610      	mov	r0, r2
   11aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
   11aaa:	2c1f      	cmp	r4, #31
   11aac:	d9ef      	bls.n	11a8e <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
   11aae:	6805      	ldr	r5, [r0, #0]
		&&
   11ab0:	ea1c 0f05 	tst.w	ip, r5
   11ab4:	d1eb      	bne.n	11a8e <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   11ab6:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   11ab8:	b2d5      	uxtb	r5, r2
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   11aba:	f8d0 c008 	ldr.w	ip, [r0, #8]
	region_conf.base = new_region->start;
   11abe:	6802      	ldr	r2, [r0, #0]
	if (size <= 32U) {
   11ac0:	d916      	bls.n	11af0 <mpu_configure_regions+0x80>
	if (size > (1UL << 31)) {
   11ac2:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   11ac6:	d815      	bhi.n	11af4 <mpu_configure_regions+0x84>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   11ac8:	3c01      	subs	r4, #1
   11aca:	fab4 f484 	clz	r4, r4
   11ace:	f1c4 041f 	rsb	r4, r4, #31
   11ad2:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   11ad4:	2d07      	cmp	r5, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   11ad6:	ea4c 0404 	orr.w	r4, ip, r4
   11ada:	d90d      	bls.n	11af8 <mpu_configure_regions+0x88>
   11adc:	4a10      	ldr	r2, [pc, #64]	; (11b20 <mpu_configure_regions+0xb0>)
   11ade:	4b11      	ldr	r3, [pc, #68]	; (11b24 <mpu_configure_regions+0xb4>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   11ae0:	4812      	ldr	r0, [pc, #72]	; (11b2c <mpu_configure_regions+0xbc>)
   11ae2:	1ad2      	subs	r2, r2, r3
   11ae4:	08d2      	lsrs	r2, r2, #3
   11ae6:	0192      	lsls	r2, r2, #6
   11ae8:	f042 0201 	orr.w	r2, r2, #1
   11aec:	4629      	mov	r1, r5
   11aee:	e7d6      	b.n	11a9e <mpu_configure_regions+0x2e>
		return REGION_32B;
   11af0:	2408      	movs	r4, #8
   11af2:	e7ef      	b.n	11ad4 <mpu_configure_regions+0x64>
		return REGION_4G;
   11af4:	243e      	movs	r4, #62	; 0x3e
   11af6:	e7ed      	b.n	11ad4 <mpu_configure_regions+0x64>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   11af8:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
   11afc:	432a      	orrs	r2, r5
   11afe:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   11b02:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
   11b06:	f8c7 5098 	str.w	r5, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   11b0a:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   11b0e:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
		reg_index++;
   11b12:	1c6a      	adds	r2, r5, #1
	for (i = 0; i < regions_num; i++) {
   11b14:	3101      	adds	r1, #1
   11b16:	300c      	adds	r0, #12
   11b18:	e7ae      	b.n	11a78 <mpu_configure_regions+0x8>
   11b1a:	bf00      	nop
   11b1c:	e000ed00 	.word	0xe000ed00
   11b20:	0001d7f8 	.word	0x0001d7f8
   11b24:	0001d788 	.word	0x0001d788
   11b28:	0001e7d5 	.word	0x0001e7d5
   11b2c:	0001e7f8 	.word	0x0001e7f8

00011b30 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   11b30:	4b04      	ldr	r3, [pc, #16]	; (11b44 <arm_core_mpu_enable+0x14>)
   11b32:	2205      	movs	r2, #5
   11b34:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   11b38:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11b3c:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   11b40:	4770      	bx	lr
   11b42:	bf00      	nop
   11b44:	e000ed00 	.word	0xe000ed00

00011b48 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   11b48:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   11b4c:	4b02      	ldr	r3, [pc, #8]	; (11b58 <arm_core_mpu_disable+0x10>)
   11b4e:	2200      	movs	r2, #0
   11b50:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   11b54:	4770      	bx	lr
   11b56:	bf00      	nop
   11b58:	e000ed00 	.word	0xe000ed00

00011b5c <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   11b5c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   11b5e:	4c03      	ldr	r4, [pc, #12]	; (11b6c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   11b60:	2301      	movs	r3, #1
   11b62:	7822      	ldrb	r2, [r4, #0]
   11b64:	f7ff ff84 	bl	11a70 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   11b68:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   11b6a:	bd10      	pop	{r4, pc}
   11b6c:	200027e3 	.word	0x200027e3

00011b70 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
   11b70:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   11b72:	4a09      	ldr	r2, [pc, #36]	; (11b98 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
   11b74:	2300      	movs	r3, #0
   11b76:	7812      	ldrb	r2, [r2, #0]
   11b78:	f7ff ff7a 	bl	11a70 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   11b7c:	f110 0f16 	cmn.w	r0, #22
   11b80:	d003      	beq.n	11b8a <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
  MPU->RNR = rnr;
   11b82:	4b06      	ldr	r3, [pc, #24]	; (11b9c <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
   11b84:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   11b86:	2807      	cmp	r0, #7
   11b88:	dd00      	ble.n	11b8c <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
   11b8a:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
   11b8c:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
   11b90:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
   11b94:	3001      	adds	r0, #1
   11b96:	e7f6      	b.n	11b86 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
   11b98:	200027e3 	.word	0x200027e3
   11b9c:	e000ed00 	.word	0xe000ed00

00011ba0 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   11ba0:	4914      	ldr	r1, [pc, #80]	; (11bf4 <z_arm_mpu_init+0x54>)
   11ba2:	6808      	ldr	r0, [r1, #0]
   11ba4:	2808      	cmp	r0, #8
{
   11ba6:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   11ba8:	d821      	bhi.n	11bee <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   11baa:	f7ff ffcd 	bl	11b48 <arm_core_mpu_disable>
	MPU->RNR = index;
   11bae:	4c12      	ldr	r4, [pc, #72]	; (11bf8 <z_arm_mpu_init+0x58>)
   11bb0:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   11bb2:	2200      	movs	r2, #0
   11bb4:	4290      	cmp	r0, r2
   11bb6:	f101 010c 	add.w	r1, r1, #12
   11bba:	d105      	bne.n	11bc8 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   11bbc:	4b0f      	ldr	r3, [pc, #60]	; (11bfc <z_arm_mpu_init+0x5c>)
   11bbe:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
   11bc0:	f7ff ffb6 	bl	11b30 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   11bc4:	2000      	movs	r0, #0
}
   11bc6:	bd10      	pop	{r4, pc}
   11bc8:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   11bcc:	f851 3c0c 	ldr.w	r3, [r1, #-12]
   11bd0:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   11bd4:	4313      	orrs	r3, r2
   11bd6:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   11bda:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   11bde:	f851 3c04 	ldr.w	r3, [r1, #-4]
   11be2:	f043 0301 	orr.w	r3, r3, #1
   11be6:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   11bea:	3201      	adds	r2, #1
   11bec:	e7e2      	b.n	11bb4 <z_arm_mpu_init+0x14>
		return -1;
   11bee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11bf2:	e7e8      	b.n	11bc6 <z_arm_mpu_init+0x26>
   11bf4:	0001da64 	.word	0x0001da64
   11bf8:	e000ed00 	.word	0xe000ed00
   11bfc:	200027e3 	.word	0x200027e3

00011c00 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   11c00:	4b01      	ldr	r3, [pc, #4]	; (11c08 <__stdout_hook_install+0x8>)
   11c02:	6018      	str	r0, [r3, #0]
}
   11c04:	4770      	bx	lr
   11c06:	bf00      	nop
   11c08:	20000460 	.word	0x20000460

00011c0c <nordicsemi_nrf52_init>:
	__asm__ volatile(
   11c0c:	f04f 0340 	mov.w	r3, #64	; 0x40
   11c10:	f3ef 8211 	mrs	r2, BASEPRI
   11c14:	f383 8811 	msr	BASEPRI, r3
   11c18:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   11c1c:	4906      	ldr	r1, [pc, #24]	; (11c38 <nordicsemi_nrf52_init+0x2c>)
   11c1e:	2301      	movs	r3, #1
   11c20:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   11c24:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   11c28:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
   11c2c:	f382 8811 	msr	BASEPRI, r2
   11c30:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   11c34:	2000      	movs	r0, #0
   11c36:	4770      	bx	lr
   11c38:	4001e000 	.word	0x4001e000

00011c3c <sys_arch_reboot>:
    *p_gpregret = val;
   11c3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   11c40:	b2c0      	uxtb	r0, r0
   11c42:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   11c46:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   11c4a:	4905      	ldr	r1, [pc, #20]	; (11c60 <sys_arch_reboot+0x24>)
   11c4c:	4b05      	ldr	r3, [pc, #20]	; (11c64 <sys_arch_reboot+0x28>)
   11c4e:	68ca      	ldr	r2, [r1, #12]
   11c50:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   11c54:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   11c56:	60cb      	str	r3, [r1, #12]
   11c58:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   11c5c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   11c5e:	e7fd      	b.n	11c5c <sys_arch_reboot+0x20>
   11c60:	e000ed00 	.word	0xe000ed00
   11c64:	05fa0004 	.word	0x05fa0004

00011c68 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   11c68:	b120      	cbz	r0, 11c74 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   11c6a:	4b03      	ldr	r3, [pc, #12]	; (11c78 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   11c6c:	0180      	lsls	r0, r0, #6
   11c6e:	f043 0301 	orr.w	r3, r3, #1
   11c72:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   11c74:	4770      	bx	lr
   11c76:	bf00      	nop
   11c78:	0001d930 	.word	0x0001d930

00011c7c <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   11c7c:	4b0e      	ldr	r3, [pc, #56]	; (11cb8 <bt_hex_real+0x3c>)
   11c7e:	2940      	cmp	r1, #64	; 0x40
{
   11c80:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
   11c82:	bf28      	it	cs
   11c84:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
   11c86:	4c0d      	ldr	r4, [pc, #52]	; (11cbc <bt_hex_real+0x40>)
   11c88:	1846      	adds	r6, r0, r1
   11c8a:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
   11c8c:	42b0      	cmp	r0, r6
   11c8e:	f103 0302 	add.w	r3, r3, #2
   11c92:	d104      	bne.n	11c9e <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   11c94:	2300      	movs	r3, #0
   11c96:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   11c9a:	4807      	ldr	r0, [pc, #28]	; (11cb8 <bt_hex_real+0x3c>)
   11c9c:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
   11c9e:	7802      	ldrb	r2, [r0, #0]
   11ca0:	0912      	lsrs	r2, r2, #4
   11ca2:	5ca2      	ldrb	r2, [r4, r2]
   11ca4:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   11ca8:	f810 2b01 	ldrb.w	r2, [r0], #1
   11cac:	f002 020f 	and.w	r2, r2, #15
   11cb0:	5ca2      	ldrb	r2, [r4, r2]
   11cb2:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   11cb6:	e7e9      	b.n	11c8c <bt_hex_real+0x10>
   11cb8:	20002802 	.word	0x20002802
   11cbc:	0001e831 	.word	0x0001e831

00011cc0 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
   11cc0:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
   11cc2:	7803      	ldrb	r3, [r0, #0]
   11cc4:	b08b      	sub	sp, #44	; 0x2c
   11cc6:	4604      	mov	r4, r0
   11cc8:	ad07      	add	r5, sp, #28
   11cca:	2b03      	cmp	r3, #3
   11ccc:	d821      	bhi.n	11d12 <bt_addr_le_str_real+0x52>
   11cce:	e8df f003 	tbb	[pc, r3]
   11cd2:	1a02      	.short	0x1a02
   11cd4:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
   11cd6:	4912      	ldr	r1, [pc, #72]	; (11d20 <bt_addr_le_str_real+0x60>)
		strcpy(type, "random");
   11cd8:	4628      	mov	r0, r5
   11cda:	f009 fa24 	bl	1b126 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   11cde:	7863      	ldrb	r3, [r4, #1]
   11ce0:	9304      	str	r3, [sp, #16]
   11ce2:	78a3      	ldrb	r3, [r4, #2]
   11ce4:	9303      	str	r3, [sp, #12]
   11ce6:	78e3      	ldrb	r3, [r4, #3]
   11ce8:	9302      	str	r3, [sp, #8]
   11cea:	7923      	ldrb	r3, [r4, #4]
   11cec:	9301      	str	r3, [sp, #4]
   11cee:	7963      	ldrb	r3, [r4, #5]
   11cf0:	9300      	str	r3, [sp, #0]
   11cf2:	4a0c      	ldr	r2, [pc, #48]	; (11d24 <bt_addr_le_str_real+0x64>)
   11cf4:	79a3      	ldrb	r3, [r4, #6]
   11cf6:	9505      	str	r5, [sp, #20]
   11cf8:	211e      	movs	r1, #30
   11cfa:	480b      	ldr	r0, [pc, #44]	; (11d28 <bt_addr_le_str_real+0x68>)
   11cfc:	f007 ffe8 	bl	19cd0 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   11d00:	4809      	ldr	r0, [pc, #36]	; (11d28 <bt_addr_le_str_real+0x68>)
   11d02:	b00b      	add	sp, #44	; 0x2c
   11d04:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   11d06:	4909      	ldr	r1, [pc, #36]	; (11d2c <bt_addr_le_str_real+0x6c>)
   11d08:	e7e6      	b.n	11cd8 <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
   11d0a:	4909      	ldr	r1, [pc, #36]	; (11d30 <bt_addr_le_str_real+0x70>)
   11d0c:	e7e4      	b.n	11cd8 <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
   11d0e:	4909      	ldr	r1, [pc, #36]	; (11d34 <bt_addr_le_str_real+0x74>)
   11d10:	e7e2      	b.n	11cd8 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   11d12:	4a09      	ldr	r2, [pc, #36]	; (11d38 <bt_addr_le_str_real+0x78>)
   11d14:	210a      	movs	r1, #10
   11d16:	4628      	mov	r0, r5
   11d18:	f007 ffda 	bl	19cd0 <snprintk>
		break;
   11d1c:	e7df      	b.n	11cde <bt_addr_le_str_real+0x1e>
   11d1e:	bf00      	nop
   11d20:	0001def4 	.word	0x0001def4
   11d24:	0001df16 	.word	0x0001df16
   11d28:	200027e4 	.word	0x200027e4
   11d2c:	0001defb 	.word	0x0001defb
   11d30:	0001df02 	.word	0x0001df02
   11d34:	0001df0c 	.word	0x0001df0c
   11d38:	0001f58d 	.word	0x0001f58d

00011d3c <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   11d3c:	b430      	push	{r4, r5}
   11d3e:	4603      	mov	r3, r0
   11d40:	4608      	mov	r0, r1
	switch (src->type) {
   11d42:	781a      	ldrb	r2, [r3, #0]
   11d44:	2a01      	cmp	r2, #1
   11d46:	d013      	beq.n	11d70 <uuid_to_uuid128+0x34>
   11d48:	2a02      	cmp	r2, #2
   11d4a:	d026      	beq.n	11d9a <uuid_to_uuid128+0x5e>
   11d4c:	b972      	cbnz	r2, 11d6c <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   11d4e:	4a15      	ldr	r2, [pc, #84]	; (11da4 <uuid_to_uuid128+0x68>)
   11d50:	f102 0410 	add.w	r4, r2, #16
   11d54:	f852 5b04 	ldr.w	r5, [r2], #4
   11d58:	f841 5b04 	str.w	r5, [r1], #4
   11d5c:	42a2      	cmp	r2, r4
   11d5e:	d1f9      	bne.n	11d54 <uuid_to_uuid128+0x18>
		sys_put_le16(BT_UUID_16(src)->val,
   11d60:	885b      	ldrh	r3, [r3, #2]
		*dst = uuid128_base;
   11d62:	7812      	ldrb	r2, [r2, #0]
   11d64:	700a      	strb	r2, [r1, #0]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
   11d66:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
   11d68:	0a1b      	lsrs	r3, r3, #8
   11d6a:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   11d6c:	bc30      	pop	{r4, r5}
   11d6e:	4770      	bx	lr
		*dst = uuid128_base;
   11d70:	4a0c      	ldr	r2, [pc, #48]	; (11da4 <uuid_to_uuid128+0x68>)
   11d72:	f102 0410 	add.w	r4, r2, #16
   11d76:	f852 5b04 	ldr.w	r5, [r2], #4
   11d7a:	f841 5b04 	str.w	r5, [r1], #4
   11d7e:	42a2      	cmp	r2, r4
   11d80:	d1f9      	bne.n	11d76 <uuid_to_uuid128+0x3a>
		sys_put_le32(BT_UUID_32(src)->val,
   11d82:	685b      	ldr	r3, [r3, #4]
		*dst = uuid128_base;
   11d84:	7812      	ldrb	r2, [r2, #0]
   11d86:	700a      	strb	r2, [r1, #0]
   11d88:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
   11d8c:	7343      	strb	r3, [r0, #13]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
   11d8e:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   11d90:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
   11d92:	0a1b      	lsrs	r3, r3, #8
   11d94:	7382      	strb	r2, [r0, #14]
   11d96:	7403      	strb	r3, [r0, #16]
}
   11d98:	e7e8      	b.n	11d6c <uuid_to_uuid128+0x30>
}
   11d9a:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
   11d9c:	2211      	movs	r2, #17
   11d9e:	4619      	mov	r1, r3
   11da0:	f009 ba0a 	b.w	1b1b8 <memcpy>
   11da4:	0001e849 	.word	0x0001e849

00011da8 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   11da8:	b538      	push	{r3, r4, r5, lr}
   11daa:	4605      	mov	r5, r0
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf *net_buf_alloc(struct net_buf_pool *pool,
					    k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
   11dac:	4805      	ldr	r0, [pc, #20]	; (11dc4 <bt_buf_get_rx+0x1c>)
   11dae:	f00a fc57 	bl	1c660 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   11db2:	4604      	mov	r4, r0
   11db4:	b120      	cbz	r0, 11dc0 <bt_buf_get_rx+0x18>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
   11db6:	2100      	movs	r1, #0
   11db8:	3008      	adds	r0, #8
   11dba:	f00a fc70 	bl	1c69e <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   11dbe:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   11dc0:	4620      	mov	r0, r4
   11dc2:	bd38      	pop	{r3, r4, r5, pc}
   11dc4:	20000794 	.word	0x20000794

00011dc8 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   11dc8:	b570      	push	{r4, r5, r6, lr}
   11dca:	4602      	mov	r2, r0
   11dcc:	460b      	mov	r3, r1
	__asm__ volatile(
   11dce:	f04f 0140 	mov.w	r1, #64	; 0x40
   11dd2:	f3ef 8511 	mrs	r5, BASEPRI
   11dd6:	f381 8811 	msr	BASEPRI, r1
   11dda:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
   11dde:	480c      	ldr	r0, [pc, #48]	; (11e10 <bt_buf_get_cmd_complete+0x48>)
	bt_dev.sent_cmd = NULL;
   11de0:	2100      	movs	r1, #0
	buf = bt_dev.sent_cmd;
   11de2:	f8d0 4130 	ldr.w	r4, [r0, #304]	; 0x130
	bt_dev.sent_cmd = NULL;
   11de6:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
	__asm__ volatile(
   11dea:	f385 8811 	msr	BASEPRI, r5
   11dee:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
   11df2:	b924      	cbnz	r4, 11dfe <bt_buf_get_cmd_complete+0x36>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   11df4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   11df8:	2001      	movs	r0, #1
   11dfa:	f7ff bfd5 	b.w	11da8 <bt_buf_get_rx>
   11dfe:	2301      	movs	r3, #1
   11e00:	f104 0008 	add.w	r0, r4, #8
   11e04:	7523      	strb	r3, [r4, #20]
		buf->len = 0U;
   11e06:	81a1      	strh	r1, [r4, #12]
   11e08:	f00a fc49 	bl	1c69e <net_buf_simple_reserve>
}
   11e0c:	4620      	mov	r0, r4
   11e0e:	bd70      	pop	{r4, r5, r6, pc}
   11e10:	200002b8 	.word	0x200002b8

00011e14 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   11e14:	b570      	push	{r4, r5, r6, lr}
   11e16:	4604      	mov	r4, r0
	switch (evt) {
   11e18:	2c0f      	cmp	r4, #15
{
   11e1a:	460d      	mov	r5, r1
   11e1c:	4610      	mov	r0, r2
   11e1e:	4619      	mov	r1, r3
	switch (evt) {
   11e20:	d805      	bhi.n	11e2e <bt_buf_get_evt+0x1a>
   11e22:	2c0d      	cmp	r4, #13
   11e24:	d912      	bls.n	11e4c <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   11e26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   11e2a:	f7ff bfcd 	b.w	11dc8 <bt_buf_get_cmd_complete>
	switch (evt) {
   11e2e:	2c13      	cmp	r4, #19
   11e30:	d10c      	bne.n	11e4c <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
   11e32:	480b      	ldr	r0, [pc, #44]	; (11e60 <bt_buf_get_evt+0x4c>)
   11e34:	f00a fc14 	bl	1c660 <net_buf_alloc_fixed>
			if (buf) {
   11e38:	4604      	mov	r4, r0
   11e3a:	b128      	cbz	r0, 11e48 <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
   11e3c:	2100      	movs	r1, #0
   11e3e:	3008      	adds	r0, #8
   11e40:	f00a fc2d 	bl	1c69e <net_buf_simple_reserve>
   11e44:	2301      	movs	r3, #1
   11e46:	7523      	strb	r3, [r4, #20]
}
   11e48:	4620      	mov	r0, r4
   11e4a:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
   11e4c:	4602      	mov	r2, r0
   11e4e:	460b      	mov	r3, r1
		if (discardable) {
   11e50:	b10d      	cbz	r5, 11e56 <bt_buf_get_evt+0x42>
   11e52:	4804      	ldr	r0, [pc, #16]	; (11e64 <bt_buf_get_evt+0x50>)
   11e54:	e7ee      	b.n	11e34 <bt_buf_get_evt+0x20>
}
   11e56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   11e5a:	2001      	movs	r0, #1
   11e5c:	f7ff bfa4 	b.w	11da8 <bt_buf_get_rx>
   11e60:	200007bc 	.word	0x200007bc
   11e64:	2000071c 	.word	0x2000071c

00011e68 <ver_str>:
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
}

#if defined(CONFIG_BT_DEBUG)
static const char *ver_str(uint8_t ver)
{
   11e68:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
   11e6a:	4d0b      	ldr	r5, [pc, #44]	; (11e98 <ver_str+0x30>)
{
   11e6c:	4606      	mov	r6, r0
	const char * const str[] = {
   11e6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
   11e70:	b08e      	sub	sp, #56	; 0x38
	const char * const str[] = {
   11e72:	ac01      	add	r4, sp, #4
   11e74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   11e76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   11e78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   11e7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   11e7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0", "5.1", "5.2", "5.3"
	};

	if (ver < ARRAY_SIZE(str)) {
   11e7e:	2e0c      	cmp	r6, #12
	const char * const str[] = {
   11e80:	682b      	ldr	r3, [r5, #0]
   11e82:	6023      	str	r3, [r4, #0]
		return str[ver];
   11e84:	bf9b      	ittet	ls
   11e86:	ab0e      	addls	r3, sp, #56	; 0x38
   11e88:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	}

	return "unknown";
   11e8c:	4803      	ldrhi	r0, [pc, #12]	; (11e9c <ver_str+0x34>)
		return str[ver];
   11e8e:	f856 0c34 	ldrls.w	r0, [r6, #-52]
}
   11e92:	b00e      	add	sp, #56	; 0x38
   11e94:	bd70      	pop	{r4, r5, r6, pc}
   11e96:	bf00      	nop
   11e98:	0001d8d0 	.word	0x0001d8d0
   11e9c:	0001e950 	.word	0x0001e950

00011ea0 <hci_data_buf_overflow>:
   11ea0:	4905      	ldr	r1, [pc, #20]	; (11eb8 <hci_data_buf_overflow+0x18>)
   11ea2:	4a06      	ldr	r2, [pc, #24]	; (11ebc <hci_data_buf_overflow+0x1c>)
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
   11ea4:	6883      	ldr	r3, [r0, #8]
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   11ea6:	4806      	ldr	r0, [pc, #24]	; (11ec0 <hci_data_buf_overflow+0x20>)
   11ea8:	1a52      	subs	r2, r2, r1
   11eaa:	08d2      	lsrs	r2, r2, #3
   11eac:	0192      	lsls	r2, r2, #6
   11eae:	7819      	ldrb	r1, [r3, #0]
   11eb0:	f042 0202 	orr.w	r2, r2, #2
   11eb4:	f008 bb26 	b.w	1a504 <log_1>
   11eb8:	0001d788 	.word	0x0001d788
   11ebc:	0001d7b0 	.word	0x0001d7b0
   11ec0:	0001e958 	.word	0x0001e958

00011ec4 <hci_disconn_complete_prio>:
{
   11ec4:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   11ec6:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
   11ec8:	781a      	ldrb	r2, [r3, #0]
   11eca:	b972      	cbnz	r2, 11eea <hci_disconn_complete_prio+0x26>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   11ecc:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   11ed0:	4620      	mov	r0, r4
   11ed2:	f002 fb09 	bl	144e8 <bt_conn_lookup_handle>
	if (!conn) {
   11ed6:	4605      	mov	r5, r0
   11ed8:	b940      	cbnz	r0, 11eec <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   11eda:	4b08      	ldr	r3, [pc, #32]	; (11efc <hci_disconn_complete_prio+0x38>)
   11edc:	881a      	ldrh	r2, [r3, #0]
   11ede:	b922      	cbnz	r2, 11eea <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   11ee0:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   11ee4:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   11ee8:	8018      	strh	r0, [r3, #0]
}
   11eea:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   11eec:	2101      	movs	r1, #1
   11eee:	f002 fb03 	bl	144f8 <bt_conn_set_state>
	bt_conn_unref(conn);
   11ef2:	4628      	mov	r0, r5
}
   11ef4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   11ef8:	f009 bc2e 	b.w	1b758 <bt_conn_unref>
   11efc:	20002680 	.word	0x20002680

00011f00 <hci_disconn_complete>:
{
   11f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   11f02:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
   11f04:	7835      	ldrb	r5, [r6, #0]
   11f06:	b9f5      	cbnz	r5, 11f46 <hci_disconn_complete+0x46>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   11f08:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
   11f0c:	4638      	mov	r0, r7
   11f0e:	f002 faeb 	bl	144e8 <bt_conn_lookup_handle>
	if (!conn) {
   11f12:	4604      	mov	r4, r0
   11f14:	b960      	cbnz	r0, 11f30 <hci_disconn_complete+0x30>
   11f16:	4b0c      	ldr	r3, [pc, #48]	; (11f48 <hci_disconn_complete+0x48>)
   11f18:	4a0c      	ldr	r2, [pc, #48]	; (11f4c <hci_disconn_complete+0x4c>)
		BT_ERR("Unable to look up conn with handle %u", handle);
   11f1a:	480d      	ldr	r0, [pc, #52]	; (11f50 <hci_disconn_complete+0x50>)
   11f1c:	1ad2      	subs	r2, r2, r3
   11f1e:	08d2      	lsrs	r2, r2, #3
   11f20:	0192      	lsls	r2, r2, #6
   11f22:	4639      	mov	r1, r7
   11f24:	f042 0201 	orr.w	r2, r2, #1
}
   11f28:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
   11f2c:	f008 baea 	b.w	1a504 <log_1>
	conn->err = evt->reason;
   11f30:	78f3      	ldrb	r3, [r6, #3]
   11f32:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   11f34:	4629      	mov	r1, r5
   11f36:	f002 fadf 	bl	144f8 <bt_conn_set_state>
	conn->handle = 0U;
   11f3a:	8025      	strh	r5, [r4, #0]
		bt_conn_unref(conn);
   11f3c:	4620      	mov	r0, r4
}
   11f3e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   11f42:	f009 bc09 	b.w	1b758 <bt_conn_unref>
}
   11f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11f48:	0001d788 	.word	0x0001d788
   11f4c:	0001d7b0 	.word	0x0001d7b0
   11f50:	0001e980 	.word	0x0001e980

00011f54 <le_data_len_change>:
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   11f54:	6883      	ldr	r3, [r0, #8]
{
   11f56:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   11f58:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   11f5a:	4620      	mov	r0, r4
   11f5c:	f002 fac4 	bl	144e8 <bt_conn_lookup_handle>
	if (!conn) {
   11f60:	b960      	cbnz	r0, 11f7c <le_data_len_change+0x28>
   11f62:	4a08      	ldr	r2, [pc, #32]	; (11f84 <le_data_len_change+0x30>)
   11f64:	4b08      	ldr	r3, [pc, #32]	; (11f88 <le_data_len_change+0x34>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   11f66:	4809      	ldr	r0, [pc, #36]	; (11f8c <le_data_len_change+0x38>)
   11f68:	1ad2      	subs	r2, r2, r3
   11f6a:	08d2      	lsrs	r2, r2, #3
   11f6c:	0192      	lsls	r2, r2, #6
   11f6e:	4621      	mov	r1, r4
   11f70:	f042 0201 	orr.w	r2, r2, #1
}
   11f74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   11f78:	f008 bac4 	b.w	1a504 <log_1>
}
   11f7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   11f80:	f009 bbea 	b.w	1b758 <bt_conn_unref>
   11f84:	0001d7b0 	.word	0x0001d7b0
   11f88:	0001d788 	.word	0x0001d788
   11f8c:	0001e9a6 	.word	0x0001e9a6

00011f90 <hci_hardware_error>:
{
   11f90:	b508      	push	{r3, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   11f92:	2101      	movs	r1, #1
   11f94:	3008      	adds	r0, #8
   11f96:	f00a fbe0 	bl	1c75a <net_buf_simple_pull_mem>
   11f9a:	4b06      	ldr	r3, [pc, #24]	; (11fb4 <hci_hardware_error+0x24>)
   11f9c:	4a06      	ldr	r2, [pc, #24]	; (11fb8 <hci_hardware_error+0x28>)
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   11f9e:	7801      	ldrb	r1, [r0, #0]
   11fa0:	4806      	ldr	r0, [pc, #24]	; (11fbc <hci_hardware_error+0x2c>)
   11fa2:	1ad2      	subs	r2, r2, r3
   11fa4:	08d2      	lsrs	r2, r2, #3
   11fa6:	0192      	lsls	r2, r2, #6
}
   11fa8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   11fac:	f042 0201 	orr.w	r2, r2, #1
   11fb0:	f008 baa8 	b.w	1a504 <log_1>
   11fb4:	0001d788 	.word	0x0001d788
   11fb8:	0001d7b0 	.word	0x0001d7b0
   11fbc:	0001e9ca 	.word	0x0001e9ca

00011fc0 <hci_vendor_event>:
{
   11fc0:	b510      	push	{r4, lr}
   11fc2:	4a0a      	ldr	r2, [pc, #40]	; (11fec <hci_vendor_event+0x2c>)
   11fc4:	4c0a      	ldr	r4, [pc, #40]	; (11ff0 <hci_vendor_event+0x30>)
		BT_WARN("Unhandled vendor-specific event: %s",
   11fc6:	8981      	ldrh	r1, [r0, #12]
   11fc8:	6880      	ldr	r0, [r0, #8]
   11fca:	1aa4      	subs	r4, r4, r2
   11fcc:	f7ff fe56 	bl	11c7c <bt_hex_real>
{
	if (IS_ENABLED(CONFIG_LOG_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
   11fd0:	f7fe f862 	bl	10098 <z_log_strdup>
   11fd4:	08e4      	lsrs	r4, r4, #3
   11fd6:	01a4      	lsls	r4, r4, #6
   11fd8:	f044 0402 	orr.w	r4, r4, #2
   11fdc:	4601      	mov	r1, r0
   11fde:	4622      	mov	r2, r4
   11fe0:	4804      	ldr	r0, [pc, #16]	; (11ff4 <hci_vendor_event+0x34>)
}
   11fe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
   11fe6:	f008 ba8d 	b.w	1a504 <log_1>
   11fea:	bf00      	nop
   11fec:	0001d788 	.word	0x0001d788
   11ff0:	0001d7b0 	.word	0x0001d7b0
   11ff4:	0001e9ec 	.word	0x0001e9ec

00011ff8 <le_conn_update_complete>:
{
   11ff8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   11ffa:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   11ffc:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   12000:	4630      	mov	r0, r6
   12002:	f002 fa71 	bl	144e8 <bt_conn_lookup_handle>
	if (!conn) {
   12006:	4604      	mov	r4, r0
   12008:	b968      	cbnz	r0, 12026 <le_conn_update_complete+0x2e>
   1200a:	4b25      	ldr	r3, [pc, #148]	; (120a0 <le_conn_update_complete+0xa8>)
   1200c:	4a25      	ldr	r2, [pc, #148]	; (120a4 <le_conn_update_complete+0xac>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   1200e:	4826      	ldr	r0, [pc, #152]	; (120a8 <le_conn_update_complete+0xb0>)
   12010:	1ad2      	subs	r2, r2, r3
   12012:	08d2      	lsrs	r2, r2, #3
   12014:	0192      	lsls	r2, r2, #6
   12016:	f042 0201 	orr.w	r2, r2, #1
   1201a:	4631      	mov	r1, r6
}
   1201c:	b002      	add	sp, #8
   1201e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   12022:	f008 ba6f 	b.w	1a504 <log_1>
	if (!evt->status) {
   12026:	782b      	ldrb	r3, [r5, #0]
   12028:	b9cb      	cbnz	r3, 1205e <le_conn_update_complete+0x66>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   1202a:	792a      	ldrb	r2, [r5, #4]
   1202c:	78eb      	ldrb	r3, [r5, #3]
   1202e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   12032:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   12036:	79aa      	ldrb	r2, [r5, #6]
   12038:	796b      	ldrb	r3, [r5, #5]
   1203a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1203e:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   12042:	79eb      	ldrb	r3, [r5, #7]
   12044:	7a2a      	ldrb	r2, [r5, #8]
   12046:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1204a:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
   1204e:	f002 fb49 	bl	146e4 <notify_le_param_updated>
	bt_conn_unref(conn);
   12052:	4620      	mov	r0, r4
}
   12054:	b002      	add	sp, #8
   12056:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   1205a:	f009 bb7d 	b.w	1b758 <bt_conn_unref>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   1205e:	2b1a      	cmp	r3, #26
   12060:	d1f7      	bne.n	12052 <le_conn_update_complete+0x5a>
   12062:	78c3      	ldrb	r3, [r0, #3]
   12064:	2b01      	cmp	r3, #1
   12066:	d1f4      	bne.n	12052 <le_conn_update_complete+0x5a>
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   12068:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1206c:	3004      	adds	r0, #4
   1206e:	f009 f941 	bl	1b2f4 <atomic_or>
		   conn->role == BT_HCI_ROLE_SLAVE &&
   12072:	0543      	lsls	r3, r0, #21
   12074:	d4ed      	bmi.n	12052 <le_conn_update_complete+0x5a>
		param.interval_min = conn->le.interval_min;
   12076:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
   1207a:	f8ad 3000 	strh.w	r3, [sp]
		param.interval_max = conn->le.interval_max;
   1207e:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
   12082:	f8ad 3002 	strh.w	r3, [sp, #2]
		param.latency = conn->le.pending_latency;
   12086:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
   1208a:	f8ad 3004 	strh.w	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   1208e:	4669      	mov	r1, sp
		param.timeout = conn->le.pending_timeout;
   12090:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
   12094:	f8ad 3006 	strh.w	r3, [sp, #6]
		bt_l2cap_update_conn_param(conn, &param);
   12098:	4620      	mov	r0, r4
   1209a:	f002 ff11 	bl	14ec0 <bt_l2cap_update_conn_param>
   1209e:	e7d8      	b.n	12052 <le_conn_update_complete+0x5a>
   120a0:	0001d788 	.word	0x0001d788
   120a4:	0001d7b0 	.word	0x0001d7b0
   120a8:	0001e9a6 	.word	0x0001e9a6

000120ac <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   120ac:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   120ae:	4c0d      	ldr	r4, [pc, #52]	; (120e4 <find_pending_connect.part.0+0x38>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   120b0:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   120b2:	2205      	movs	r2, #5
   120b4:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   120b8:	f002 fbd2 	bl	14860 <bt_conn_lookup_state_le>
		if (!conn) {
   120bc:	b978      	cbnz	r0, 120de <find_pending_connect.part.0+0x32>
						       BT_ADDR_LE_NONE,
   120be:	4b0a      	ldr	r3, [pc, #40]	; (120e8 <find_pending_connect.part.0+0x3c>)
   120c0:	6b58      	ldr	r0, [r3, #52]	; 0x34
   120c2:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
   120c4:	9000      	str	r0, [sp, #0]
   120c6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   120ca:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   120ce:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
						       BT_ADDR_LE_NONE,
   120d2:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   120d6:	2204      	movs	r2, #4
   120d8:	4669      	mov	r1, sp
   120da:	f002 fbc1 	bl	14860 <bt_conn_lookup_state_le>
}
   120de:	b002      	add	sp, #8
   120e0:	bd10      	pop	{r4, pc}
   120e2:	bf00      	nop
   120e4:	200002b8 	.word	0x200002b8
   120e8:	0001d8d0 	.word	0x0001d8d0

000120ec <handle_event>:
{
   120ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
   120ee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   120f2:	4605      	mov	r5, r0
   120f4:	4608      	mov	r0, r1
		if (handler->event != event) {
   120f6:	7811      	ldrb	r1, [r2, #0]
   120f8:	42a9      	cmp	r1, r5
   120fa:	d01a      	beq.n	12132 <handle_event+0x46>
	for (i = 0; i < num_handlers; i++) {
   120fc:	3208      	adds	r2, #8
   120fe:	429a      	cmp	r2, r3
   12100:	d1f9      	bne.n	120f6 <handle_event+0xa>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
   12102:	8986      	ldrh	r6, [r0, #12]
   12104:	4b16      	ldr	r3, [pc, #88]	; (12160 <handle_event+0x74>)
   12106:	4c17      	ldr	r4, [pc, #92]	; (12164 <handle_event+0x78>)
   12108:	6880      	ldr	r0, [r0, #8]
   1210a:	4631      	mov	r1, r6
   1210c:	1ae4      	subs	r4, r4, r3
   1210e:	f7ff fdb5 	bl	11c7c <bt_hex_real>
   12112:	f7fd ffc1 	bl	10098 <z_log_strdup>
   12116:	08e4      	lsrs	r4, r4, #3
   12118:	01a4      	lsls	r4, r4, #6
   1211a:	f044 0402 	orr.w	r4, r4, #2
   1211e:	4603      	mov	r3, r0
   12120:	f8ad 4000 	strh.w	r4, [sp]
   12124:	4810      	ldr	r0, [pc, #64]	; (12168 <handle_event+0x7c>)
   12126:	4632      	mov	r2, r6
   12128:	4629      	mov	r1, r5
   1212a:	f008 fa18 	bl	1a55e <log_3>
}
   1212e:	b002      	add	sp, #8
   12130:	bd70      	pop	{r4, r5, r6, pc}
		if (buf->len < handler->min_len) {
   12132:	8981      	ldrh	r1, [r0, #12]
   12134:	7853      	ldrb	r3, [r2, #1]
   12136:	428b      	cmp	r3, r1
   12138:	d90d      	bls.n	12156 <handle_event+0x6a>
   1213a:	4a09      	ldr	r2, [pc, #36]	; (12160 <handle_event+0x74>)
   1213c:	4b09      	ldr	r3, [pc, #36]	; (12164 <handle_event+0x78>)
			BT_ERR("Too small (%u bytes) event 0x%02x",
   1213e:	480b      	ldr	r0, [pc, #44]	; (1216c <handle_event+0x80>)
   12140:	1a9b      	subs	r3, r3, r2
   12142:	08db      	lsrs	r3, r3, #3
   12144:	019b      	lsls	r3, r3, #6
   12146:	f043 0301 	orr.w	r3, r3, #1
   1214a:	462a      	mov	r2, r5
}
   1214c:	b002      	add	sp, #8
   1214e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
   12152:	f008 b9eb 	b.w	1a52c <log_2>
		handler->handler(buf);
   12156:	6853      	ldr	r3, [r2, #4]
}
   12158:	b002      	add	sp, #8
   1215a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		handler->handler(buf);
   1215e:	4718      	bx	r3
   12160:	0001d788 	.word	0x0001d788
   12164:	0001d7b0 	.word	0x0001d7b0
   12168:	0001ea32 	.word	0x0001ea32
   1216c:	0001ea10 	.word	0x0001ea10

00012170 <hci_rx_thread>:
	}
}

#if !defined(CONFIG_BT_RECV_IS_RX_THREAD)
static void hci_rx_thread(void)
{
   12170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12174:	4b47      	ldr	r3, [pc, #284]	; (12294 <hci_rx_thread+0x124>)
   12176:	4d48      	ldr	r5, [pc, #288]	; (12298 <hci_rx_thread+0x128>)

	BT_DBG("started");

	while (1) {
		BT_DBG("calling fifo_get_wait");
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   12178:	f8df 8120 	ldr.w	r8, [pc, #288]	; 1229c <hci_rx_thread+0x12c>
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   1217c:	f8df 9120 	ldr.w	r9, [pc, #288]	; 122a0 <hci_rx_thread+0x130>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   12180:	4f48      	ldr	r7, [pc, #288]	; (122a4 <hci_rx_thread+0x134>)
   12182:	1aed      	subs	r5, r5, r3
   12184:	08ed      	lsrs	r5, r5, #3
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   12186:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1218a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1218e:	4640      	mov	r0, r8
   12190:	f00a fa6b 	bl	1c66a <net_buf_get>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   12194:	7d01      	ldrb	r1, [r0, #20]

		BT_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf),
		       buf->len);

		switch (bt_buf_get_type(buf)) {
   12196:	2901      	cmp	r1, #1
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   12198:	4604      	mov	r4, r0
		switch (bt_buf_get_type(buf)) {
   1219a:	d046      	beq.n	1222a <hci_rx_thread+0xba>
   1219c:	2903      	cmp	r1, #3
   1219e:	d173      	bne.n	12288 <hci_rx_thread+0x118>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   121a0:	8983      	ldrh	r3, [r0, #12]
   121a2:	2b03      	cmp	r3, #3
   121a4:	d80c      	bhi.n	121c0 <hci_rx_thread+0x50>
   121a6:	4940      	ldr	r1, [pc, #256]	; (122a8 <hci_rx_thread+0x138>)
   121a8:	4840      	ldr	r0, [pc, #256]	; (122ac <hci_rx_thread+0x13c>)
   121aa:	f240 1377 	movw	r3, #375	; 0x177
   121ae:	463a      	mov	r2, r7
   121b0:	f007 fd81 	bl	19cb6 <printk>
   121b4:	4040      	eors	r0, r0
   121b6:	f380 8811 	msr	BASEPRI, r0
   121ba:	f04f 0003 	mov.w	r0, #3
   121be:	df02      	svc	2
   121c0:	2104      	movs	r1, #4
   121c2:	f104 0008 	add.w	r0, r4, #8
   121c6:	f00a fac8 	bl	1c75a <net_buf_simple_pull_mem>
	if (buf->len != len) {
   121ca:	89a1      	ldrh	r1, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
   121cc:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   121ce:	f8b0 a000 	ldrh.w	sl, [r0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   121d2:	23ff      	movs	r3, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
   121d4:	f3ca 000b 	ubfx	r0, sl, #0, #12
	if (buf->len != len) {
   121d8:	428a      	cmp	r2, r1
	acl(buf)->handle = bt_acl_handle(handle);
   121da:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   121dc:	7563      	strb	r3, [r4, #21]
	if (buf->len != len) {
   121de:	d009      	beq.n	121f4 <hci_rx_thread+0x84>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   121e0:	01ab      	lsls	r3, r5, #6
   121e2:	4833      	ldr	r0, [pc, #204]	; (122b0 <hci_rx_thread+0x140>)
   121e4:	f043 0301 	orr.w	r3, r3, #1
   121e8:	f008 f9a0 	bl	1a52c <log_2>
		case BT_BUF_EVT:
			hci_event(buf);
			break;
		default:
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
			net_buf_unref(buf);
   121ec:	4620      	mov	r0, r4
   121ee:	f004 fc8b 	bl	16b08 <net_buf_unref>
			break;
   121f2:	e017      	b.n	12224 <hci_rx_thread+0xb4>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   121f4:	f002 f978 	bl	144e8 <bt_conn_lookup_handle>
	if (!conn) {
   121f8:	4606      	mov	r6, r0
   121fa:	b938      	cbnz	r0, 1220c <hci_rx_thread+0x9c>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   121fc:	01aa      	lsls	r2, r5, #6
   121fe:	8ae1      	ldrh	r1, [r4, #22]
   12200:	482c      	ldr	r0, [pc, #176]	; (122b4 <hci_rx_thread+0x144>)
   12202:	f042 0201 	orr.w	r2, r2, #1
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   12206:	f008 f97d 	bl	1a504 <log_1>
   1220a:	e7ef      	b.n	121ec <hci_rx_thread+0x7c>
	acl(buf)->index = bt_conn_index(conn);
   1220c:	f002 fa5e 	bl	146cc <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   12210:	ea4f 321a 	mov.w	r2, sl, lsr #12
	acl(buf)->index = bt_conn_index(conn);
   12214:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   12216:	4621      	mov	r1, r4
   12218:	4630      	mov	r0, r6
   1221a:	f002 f83d 	bl	14298 <bt_conn_recv>
	bt_conn_unref(conn);
   1221e:	4630      	mov	r0, r6
   12220:	f009 fa9a 	bl	1b758 <bt_conn_unref>
	z_impl_k_yield();
   12224:	f007 f970 	bl	19508 <z_impl_k_yield>
	while (1) {
   12228:	e7ad      	b.n	12186 <hci_rx_thread+0x16>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   1222a:	8983      	ldrh	r3, [r0, #12]
   1222c:	2b01      	cmp	r3, #1
   1222e:	d80c      	bhi.n	1224a <hci_rx_thread+0xda>
   12230:	491d      	ldr	r1, [pc, #116]	; (122a8 <hci_rx_thread+0x138>)
   12232:	481e      	ldr	r0, [pc, #120]	; (122ac <hci_rx_thread+0x13c>)
   12234:	f640 1309 	movw	r3, #2313	; 0x909
   12238:	463a      	mov	r2, r7
   1223a:	f007 fd3c 	bl	19cb6 <printk>
   1223e:	4040      	eors	r0, r0
   12240:	f380 8811 	msr	BASEPRI, r0
   12244:	f04f 0003 	mov.w	r0, #3
   12248:	df02      	svc	2
   1224a:	2102      	movs	r1, #2
   1224c:	f104 0008 	add.w	r0, r4, #8
   12250:	f00a fa83 	bl	1c75a <net_buf_simple_pull_mem>
   12254:	4606      	mov	r6, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   12256:	7800      	ldrb	r0, [r0, #0]
   12258:	f009 f83a 	bl	1b2d0 <bt_hci_evt_get_flags>
   1225c:	0783      	lsls	r3, r0, #30
   1225e:	d40c      	bmi.n	1227a <hci_rx_thread+0x10a>
   12260:	4915      	ldr	r1, [pc, #84]	; (122b8 <hci_rx_thread+0x148>)
   12262:	4812      	ldr	r0, [pc, #72]	; (122ac <hci_rx_thread+0x13c>)
   12264:	f640 130d 	movw	r3, #2317	; 0x90d
   12268:	463a      	mov	r2, r7
   1226a:	f007 fd24 	bl	19cb6 <printk>
   1226e:	4040      	eors	r0, r0
   12270:	f380 8811 	msr	BASEPRI, r0
   12274:	f04f 0003 	mov.w	r0, #3
   12278:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   1227a:	7830      	ldrb	r0, [r6, #0]
   1227c:	2304      	movs	r3, #4
   1227e:	464a      	mov	r2, r9
   12280:	4621      	mov	r1, r4
   12282:	f7ff ff33 	bl	120ec <handle_event>
	net_buf_unref(buf);
   12286:	e7b1      	b.n	121ec <hci_rx_thread+0x7c>
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   12288:	01aa      	lsls	r2, r5, #6
   1228a:	480c      	ldr	r0, [pc, #48]	; (122bc <hci_rx_thread+0x14c>)
   1228c:	f042 0201 	orr.w	r2, r2, #1
   12290:	e7b9      	b.n	12206 <hci_rx_thread+0x96>
   12292:	bf00      	nop
   12294:	0001d788 	.word	0x0001d788
   12298:	0001d7b0 	.word	0x0001d7b0
   1229c:	200003ec 	.word	0x200003ec
   122a0:	0001db0c 	.word	0x0001db0c
   122a4:	0001ea54 	.word	0x0001ea54
   122a8:	0001ea88 	.word	0x0001ea88
   122ac:	0001eaa1 	.word	0x0001eaa1
   122b0:	0001eabe 	.word	0x0001eabe
   122b4:	0001eae2 	.word	0x0001eae2
   122b8:	0001eb04 	.word	0x0001eb04
   122bc:	0001eb32 	.word	0x0001eb32

000122c0 <hci_le_meta_event>:
{
   122c0:	b510      	push	{r4, lr}
   122c2:	2101      	movs	r1, #1
   122c4:	4604      	mov	r4, r0
   122c6:	3008      	adds	r0, #8
   122c8:	f00a fa47 	bl	1c75a <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   122cc:	4621      	mov	r1, r4
   122ce:	4a03      	ldr	r2, [pc, #12]	; (122dc <hci_le_meta_event+0x1c>)
   122d0:	7800      	ldrb	r0, [r0, #0]
}
   122d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   122d6:	2307      	movs	r3, #7
   122d8:	f7ff bf08 	b.w	120ec <handle_event>
   122dc:	0001dab4 	.word	0x0001dab4

000122e0 <hci_cmd_done>:
{
   122e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   122e4:	4607      	mov	r7, r0
   122e6:	b085      	sub	sp, #20
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   122e8:	7990      	ldrb	r0, [r2, #6]
   122ea:	4e41      	ldr	r6, [pc, #260]	; (123f0 <hci_cmd_done+0x110>)
{
   122ec:	4688      	mov	r8, r1
   122ee:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   122f0:	f004 fb4c 	bl	1698c <net_buf_pool_get>
   122f4:	4286      	cmp	r6, r0
   122f6:	d016      	beq.n	12326 <hci_cmd_done+0x46>
   122f8:	4b3e      	ldr	r3, [pc, #248]	; (123f4 <hci_cmd_done+0x114>)
   122fa:	4d3f      	ldr	r5, [pc, #252]	; (123f8 <hci_cmd_done+0x118>)
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
   122fc:	79a0      	ldrb	r0, [r4, #6]
   122fe:	9700      	str	r7, [sp, #0]
   12300:	1aed      	subs	r5, r5, r3
   12302:	08ed      	lsrs	r5, r5, #3
   12304:	9001      	str	r0, [sp, #4]
   12306:	f004 fb41 	bl	1698c <net_buf_pool_get>
   1230a:	01ad      	lsls	r5, r5, #6
   1230c:	f045 0502 	orr.w	r5, r5, #2
   12310:	e9cd 0602 	strd	r0, r6, [sp, #8]
   12314:	462b      	mov	r3, r5
   12316:	4839      	ldr	r0, [pc, #228]	; (123fc <hci_cmd_done+0x11c>)
   12318:	2204      	movs	r2, #4
   1231a:	4669      	mov	r1, sp
   1231c:	f008 f93b 	bl	1a596 <log_n>
}
   12320:	b005      	add	sp, #20
   12322:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
   12326:	4620      	mov	r0, r4
   12328:	f004 fb38 	bl	1699c <net_buf_id>
   1232c:	4d34      	ldr	r5, [pc, #208]	; (12400 <hci_cmd_done+0x120>)
   1232e:	f04f 090c 	mov.w	r9, #12
   12332:	fb09 5000 	mla	r0, r9, r0, r5
   12336:	8843      	ldrh	r3, [r0, #2]
   12338:	42bb      	cmp	r3, r7
   1233a:	d011      	beq.n	12360 <hci_cmd_done+0x80>
   1233c:	4b2d      	ldr	r3, [pc, #180]	; (123f4 <hci_cmd_done+0x114>)
   1233e:	4e2e      	ldr	r6, [pc, #184]	; (123f8 <hci_cmd_done+0x118>)
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
   12340:	4620      	mov	r0, r4
   12342:	1af6      	subs	r6, r6, r3
   12344:	f004 fb2a 	bl	1699c <net_buf_id>
   12348:	08f6      	lsrs	r6, r6, #3
   1234a:	fb09 5000 	mla	r0, r9, r0, r5
   1234e:	01b6      	lsls	r6, r6, #6
   12350:	f046 0602 	orr.w	r6, r6, #2
   12354:	8842      	ldrh	r2, [r0, #2]
   12356:	482b      	ldr	r0, [pc, #172]	; (12404 <hci_cmd_done+0x124>)
   12358:	4633      	mov	r3, r6
   1235a:	4639      	mov	r1, r7
   1235c:	f008 f8e6 	bl	1a52c <log_2>
	if (cmd(buf)->state && !status) {
   12360:	4620      	mov	r0, r4
   12362:	f004 fb1b 	bl	1699c <net_buf_id>
   12366:	260c      	movs	r6, #12
   12368:	fb06 5000 	mla	r0, r6, r0, r5
   1236c:	6843      	ldr	r3, [r0, #4]
   1236e:	b1ab      	cbz	r3, 1239c <hci_cmd_done+0xbc>
   12370:	f1b8 0f00 	cmp.w	r8, #0
   12374:	d112      	bne.n	1239c <hci_cmd_done+0xbc>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   12376:	4620      	mov	r0, r4
   12378:	f004 fb10 	bl	1699c <net_buf_id>
   1237c:	fb06 5000 	mla	r0, r6, r0, r5
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   12380:	2101      	movs	r1, #1
   12382:	6842      	ldr	r2, [r0, #4]
   12384:	e9d2 3000 	ldrd	r3, r0, [r2]

	if (val) {
   12388:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   1238a:	f000 061f 	and.w	r6, r0, #31
   1238e:	40b1      	lsls	r1, r6
	if (val) {
   12390:	0940      	lsrs	r0, r0, #5
   12392:	b1ea      	cbz	r2, 123d0 <hci_cmd_done+0xf0>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   12394:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   12398:	f008 ffac 	bl	1b2f4 <atomic_or>
	if (cmd(buf)->sync) {
   1239c:	4620      	mov	r0, r4
   1239e:	f004 fafd 	bl	1699c <net_buf_id>
   123a2:	260c      	movs	r6, #12
   123a4:	fb06 5000 	mla	r0, r6, r0, r5
   123a8:	6883      	ldr	r3, [r0, #8]
   123aa:	2b00      	cmp	r3, #0
   123ac:	d0b8      	beq.n	12320 <hci_cmd_done+0x40>
		cmd(buf)->status = status;
   123ae:	4620      	mov	r0, r4
   123b0:	f004 faf4 	bl	1699c <net_buf_id>
   123b4:	4370      	muls	r0, r6
   123b6:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   123ba:	4620      	mov	r0, r4
   123bc:	f004 faee 	bl	1699c <net_buf_id>
   123c0:	fb06 5500 	mla	r5, r6, r0, r5
   123c4:	68a8      	ldr	r0, [r5, #8]
}
   123c6:	b005      	add	sp, #20
   123c8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	z_impl_k_sem_give(sem);
   123cc:	f006 bc40 	b.w	18c50 <z_impl_k_sem_give>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   123d0:	43c9      	mvns	r1, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   123d2:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   123d6:	f3bf 8f5b 	dmb	ish
   123da:	e853 2f00 	ldrex	r2, [r3]
   123de:	400a      	ands	r2, r1
   123e0:	e843 2000 	strex	r0, r2, [r3]
   123e4:	2800      	cmp	r0, #0
   123e6:	d1f8      	bne.n	123da <hci_cmd_done+0xfa>
   123e8:	f3bf 8f5b 	dmb	ish
   123ec:	e7d6      	b.n	1239c <hci_cmd_done+0xbc>
   123ee:	bf00      	nop
   123f0:	2000076c 	.word	0x2000076c
   123f4:	0001d788 	.word	0x0001d788
   123f8:	0001d7b0 	.word	0x0001d7b0
   123fc:	0001eb46 	.word	0x0001eb46
   12400:	200023fc 	.word	0x200023fc
   12404:	0001eb7b 	.word	0x0001eb7b

00012408 <hci_cmd_status>:
{
   12408:	b538      	push	{r3, r4, r5, lr}
   1240a:	2104      	movs	r1, #4
   1240c:	4604      	mov	r4, r0
   1240e:	3008      	adds	r0, #8
   12410:	f00a f9a3 	bl	1c75a <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   12414:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   12416:	7801      	ldrb	r1, [r0, #0]
   12418:	8840      	ldrh	r0, [r0, #2]
   1241a:	4622      	mov	r2, r4
   1241c:	f7ff ff60 	bl	122e0 <hci_cmd_done>
	if (ncmd) {
   12420:	b125      	cbz	r5, 1242c <hci_cmd_status+0x24>
   12422:	4803      	ldr	r0, [pc, #12]	; (12430 <hci_cmd_status+0x28>)
}
   12424:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12428:	f006 bc12 	b.w	18c50 <z_impl_k_sem_give>
   1242c:	bd38      	pop	{r3, r4, r5, pc}
   1242e:	bf00      	nop
   12430:	200003d0 	.word	0x200003d0

00012434 <hci_cmd_complete>:
{
   12434:	b538      	push	{r3, r4, r5, lr}
   12436:	2103      	movs	r1, #3
   12438:	4604      	mov	r4, r0
   1243a:	3008      	adds	r0, #8
   1243c:	f00a f98d 	bl	1c75a <net_buf_simple_pull_mem>
	status = buf->data[0];
   12440:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
   12442:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   12444:	7819      	ldrb	r1, [r3, #0]
   12446:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   1244a:	4622      	mov	r2, r4
   1244c:	f7ff ff48 	bl	122e0 <hci_cmd_done>
	if (ncmd) {
   12450:	b125      	cbz	r5, 1245c <hci_cmd_complete+0x28>
   12452:	4803      	ldr	r0, [pc, #12]	; (12460 <hci_cmd_complete+0x2c>)
}
   12454:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12458:	f006 bbfa 	b.w	18c50 <z_impl_k_sem_give>
   1245c:	bd38      	pop	{r3, r4, r5, pc}
   1245e:	bf00      	nop
   12460:	200003d0 	.word	0x200003d0

00012464 <hci_num_completed_packets>:
{
   12464:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12468:	4d39      	ldr	r5, [pc, #228]	; (12550 <hci_num_completed_packets+0xec>)
   1246a:	4b3a      	ldr	r3, [pc, #232]	; (12554 <hci_num_completed_packets+0xf0>)
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   1246c:	f8d0 8008 	ldr.w	r8, [r0, #8]
				BT_ERR("packets count mismatch");
   12470:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 12558 <hci_num_completed_packets+0xf4>
   12474:	1aed      	subs	r5, r5, r3
	for (i = 0; i < evt->num_handles; i++) {
   12476:	2600      	movs	r6, #0
   12478:	08ed      	lsrs	r5, r5, #3
			tx->pending_no_cb = 0U;
   1247a:	46b1      	mov	r9, r6
	for (i = 0; i < evt->num_handles; i++) {
   1247c:	f898 3000 	ldrb.w	r3, [r8]
   12480:	429e      	cmp	r6, r3
   12482:	db01      	blt.n	12488 <hci_num_completed_packets+0x24>
}
   12484:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   12488:	eb08 0386 	add.w	r3, r8, r6, lsl #2
   1248c:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   12490:	f8b3 7003 	ldrh.w	r7, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   12494:	4658      	mov	r0, fp
   12496:	f002 f827 	bl	144e8 <bt_conn_lookup_handle>
		if (!conn) {
   1249a:	4604      	mov	r4, r0
   1249c:	b1d8      	cbz	r0, 124d6 <hci_num_completed_packets+0x72>
			k_work_submit(&conn->tx_complete_work);
   1249e:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
   124a2:	2f00      	cmp	r7, #0
   124a4:	d033      	beq.n	1250e <hci_num_completed_packets+0xaa>
	__asm__ volatile(
   124a6:	f04f 0340 	mov.w	r3, #64	; 0x40
   124aa:	f3ef 8211 	mrs	r2, BASEPRI
   124ae:	f383 8811 	msr	BASEPRI, r3
   124b2:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   124b6:	69e3      	ldr	r3, [r4, #28]
   124b8:	b1b3      	cbz	r3, 124e8 <hci_num_completed_packets+0x84>
				conn->pending_no_cb--;
   124ba:	3b01      	subs	r3, #1
   124bc:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   124be:	f382 8811 	msr	BASEPRI, r2
   124c2:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   124c6:	4620      	mov	r0, r4
   124c8:	f001 feae 	bl	14228 <bt_conn_get_pkts>
   124cc:	3f01      	subs	r7, #1
   124ce:	f006 fbbf 	bl	18c50 <z_impl_k_sem_give>
   124d2:	b2bf      	uxth	r7, r7
   124d4:	e7e5      	b.n	124a2 <hci_num_completed_packets+0x3e>
			BT_ERR("No connection for handle %u", handle);
   124d6:	01aa      	lsls	r2, r5, #6
   124d8:	4820      	ldr	r0, [pc, #128]	; (1255c <hci_num_completed_packets+0xf8>)
   124da:	f042 0201 	orr.w	r2, r2, #1
   124de:	4659      	mov	r1, fp
   124e0:	f008 f810 	bl	1a504 <log_1>
	for (i = 0; i < evt->num_handles; i++) {
   124e4:	3601      	adds	r6, #1
   124e6:	e7c9      	b.n	1247c <hci_num_completed_packets+0x18>
	return list->head;
   124e8:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   124ea:	b12b      	cbz	r3, 124f8 <hci_num_completed_packets+0x94>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   124ec:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   124ee:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   124f0:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   124f2:	428b      	cmp	r3, r1
	list->tail = node;
   124f4:	bf08      	it	eq
   124f6:	61a0      	streq	r0, [r4, #24]
   124f8:	f382 8811 	msr	BASEPRI, r2
   124fc:	f3bf 8f6f 	isb	sy
			if (!node) {
   12500:	b94b      	cbnz	r3, 12516 <hci_num_completed_packets+0xb2>
				BT_ERR("packets count mismatch");
   12502:	01a9      	lsls	r1, r5, #6
   12504:	f041 0101 	orr.w	r1, r1, #1
   12508:	4650      	mov	r0, sl
   1250a:	f007 ffee 	bl	1a4ea <log_0>
		bt_conn_unref(conn);
   1250e:	4620      	mov	r0, r4
   12510:	f009 f922 	bl	1b758 <bt_conn_unref>
   12514:	e7e6      	b.n	124e4 <hci_num_completed_packets+0x80>
	__asm__ volatile(
   12516:	f04f 0240 	mov.w	r2, #64	; 0x40
   1251a:	f3ef 8111 	mrs	r1, BASEPRI
   1251e:	f382 8811 	msr	BASEPRI, r2
   12522:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   12526:	68da      	ldr	r2, [r3, #12]
   12528:	61e2      	str	r2, [r4, #28]
	return list->tail;
   1252a:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
   1252c:	f8c3 900c 	str.w	r9, [r3, #12]
	parent->next = child;
   12530:	f8c3 9000 	str.w	r9, [r3]
Z_GENLIST_APPEND(slist, snode)
   12534:	b94a      	cbnz	r2, 1254a <hci_num_completed_packets+0xe6>
	list->head = node;
   12536:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   1253a:	f381 8811 	msr	BASEPRI, r1
   1253e:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   12542:	4658      	mov	r0, fp
   12544:	f006 fcf0 	bl	18f28 <k_work_submit>
   12548:	e7bd      	b.n	124c6 <hci_num_completed_packets+0x62>
	parent->next = child;
   1254a:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1254c:	6263      	str	r3, [r4, #36]	; 0x24
}
   1254e:	e7f4      	b.n	1253a <hci_num_completed_packets+0xd6>
   12550:	0001d7b0 	.word	0x0001d7b0
   12554:	0001d788 	.word	0x0001d788
   12558:	0001ebca 	.word	0x0001ebca
   1255c:	0001ebae 	.word	0x0001ebae

00012560 <bt_hci_cmd_state_set_init>:
{
   12560:	b510      	push	{r4, lr}
	state->bit = bit;
   12562:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   12566:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1256a:	720b      	strb	r3, [r1, #8]
{
   1256c:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   1256e:	f004 fa15 	bl	1699c <net_buf_id>
   12572:	4b03      	ldr	r3, [pc, #12]	; (12580 <bt_hci_cmd_state_set_init+0x20>)
   12574:	220c      	movs	r2, #12
   12576:	fb02 3300 	mla	r3, r2, r0, r3
   1257a:	605c      	str	r4, [r3, #4]
}
   1257c:	bd10      	pop	{r4, pc}
   1257e:	bf00      	nop
   12580:	200023fc 	.word	0x200023fc

00012584 <bt_hci_cmd_create>:
{
   12584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
   12588:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1258c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12590:	4606      	mov	r6, r0
   12592:	4817      	ldr	r0, [pc, #92]	; (125f0 <bt_hci_cmd_create+0x6c>)
	cmd(buf)->opcode = opcode;
   12594:	4d17      	ldr	r5, [pc, #92]	; (125f4 <bt_hci_cmd_create+0x70>)
{
   12596:	460f      	mov	r7, r1
   12598:	f00a f862 	bl	1c660 <net_buf_alloc_fixed>
   1259c:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   1259e:	f100 0a08 	add.w	sl, r0, #8
   125a2:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   125a4:	f04f 0800 	mov.w	r8, #0
   125a8:	4650      	mov	r0, sl
   125aa:	f00a f878 	bl	1c69e <net_buf_simple_reserve>
   125ae:	f884 8014 	strb.w	r8, [r4, #20]
	cmd(buf)->opcode = opcode;
   125b2:	4620      	mov	r0, r4
   125b4:	f004 f9f2 	bl	1699c <net_buf_id>
   125b8:	f04f 090c 	mov.w	r9, #12
   125bc:	fb09 5000 	mla	r0, r9, r0, r5
   125c0:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   125c2:	4620      	mov	r0, r4
   125c4:	f004 f9ea 	bl	1699c <net_buf_id>
   125c8:	fb09 5000 	mla	r0, r9, r0, r5
   125cc:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
   125d0:	4620      	mov	r0, r4
   125d2:	f004 f9e3 	bl	1699c <net_buf_id>
   125d6:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
   125da:	2103      	movs	r1, #3
   125dc:	f8c5 8004 	str.w	r8, [r5, #4]
   125e0:	4650      	mov	r0, sl
   125e2:	f00a f893 	bl	1c70c <net_buf_simple_add>
	hdr->param_len = param_len;
   125e6:	7087      	strb	r7, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
   125e8:	8006      	strh	r6, [r0, #0]
}
   125ea:	4620      	mov	r0, r4
   125ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   125f0:	2000076c 	.word	0x2000076c
   125f4:	200023fc 	.word	0x200023fc

000125f8 <bt_hci_cmd_send_sync>:
{
   125f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   125fc:	4607      	mov	r7, r0
   125fe:	b086      	sub	sp, #24
   12600:	4615      	mov	r5, r2
	if (!buf) {
   12602:	460c      	mov	r4, r1
   12604:	b921      	cbnz	r1, 12610 <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
   12606:	f7ff ffbd 	bl	12584 <bt_hci_cmd_create>
		if (!buf) {
   1260a:	4604      	mov	r4, r0
   1260c:	2800      	cmp	r0, #0
   1260e:	d057      	beq.n	126c0 <bt_hci_cmd_send_sync+0xc8>
	return z_impl_k_sem_init(sem, initial_count, limit);
   12610:	2201      	movs	r2, #1
   12612:	2100      	movs	r1, #0
   12614:	4668      	mov	r0, sp
   12616:	f00a fb72 	bl	1ccfe <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   1261a:	4620      	mov	r0, r4
   1261c:	f004 f9be 	bl	1699c <net_buf_id>
   12620:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 126c8 <bt_hci_cmd_send_sync+0xd0>
   12624:	230c      	movs	r3, #12
   12626:	fb03 8000 	mla	r0, r3, r0, r8
   1262a:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   1262e:	4620      	mov	r0, r4
   12630:	f00a f846 	bl	1c6c0 <net_buf_ref>
   12634:	4601      	mov	r1, r0
   12636:	4825      	ldr	r0, [pc, #148]	; (126cc <bt_hci_cmd_send_sync+0xd4>)
   12638:	f00a f835 	bl	1c6a6 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   1263c:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   12640:	2300      	movs	r3, #0
   12642:	4668      	mov	r0, sp
   12644:	f006 fb2a 	bl	18c9c <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   12648:	4606      	mov	r6, r0
   1264a:	b180      	cbz	r0, 1266e <bt_hci_cmd_send_sync+0x76>
   1264c:	4a20      	ldr	r2, [pc, #128]	; (126d0 <bt_hci_cmd_send_sync+0xd8>)
   1264e:	4921      	ldr	r1, [pc, #132]	; (126d4 <bt_hci_cmd_send_sync+0xdc>)
   12650:	4821      	ldr	r0, [pc, #132]	; (126d8 <bt_hci_cmd_send_sync+0xe0>)
   12652:	f240 1331 	movw	r3, #305	; 0x131
   12656:	f007 fb2e 	bl	19cb6 <printk>
   1265a:	4820      	ldr	r0, [pc, #128]	; (126dc <bt_hci_cmd_send_sync+0xe4>)
   1265c:	4631      	mov	r1, r6
   1265e:	f007 fb2a 	bl	19cb6 <printk>
   12662:	4040      	eors	r0, r0
   12664:	f380 8811 	msr	BASEPRI, r0
   12668:	f04f 0003 	mov.w	r0, #3
   1266c:	df02      	svc	2
	status = cmd(buf)->status;
   1266e:	4620      	mov	r0, r4
   12670:	f004 f994 	bl	1699c <net_buf_id>
   12674:	230c      	movs	r3, #12
   12676:	4358      	muls	r0, r3
   12678:	f818 6000 	ldrb.w	r6, [r8, r0]
	if (status) {
   1267c:	b1be      	cbz	r6, 126ae <bt_hci_cmd_send_sync+0xb6>
   1267e:	4a18      	ldr	r2, [pc, #96]	; (126e0 <bt_hci_cmd_send_sync+0xe8>)
   12680:	4b18      	ldr	r3, [pc, #96]	; (126e4 <bt_hci_cmd_send_sync+0xec>)
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
   12682:	4819      	ldr	r0, [pc, #100]	; (126e8 <bt_hci_cmd_send_sync+0xf0>)
   12684:	1a9b      	subs	r3, r3, r2
   12686:	08db      	lsrs	r3, r3, #3
   12688:	019b      	lsls	r3, r3, #6
   1268a:	f043 0302 	orr.w	r3, r3, #2
   1268e:	4632      	mov	r2, r6
   12690:	4639      	mov	r1, r7
   12692:	f007 ff4b 	bl	1a52c <log_2>
		net_buf_unref(buf);
   12696:	4620      	mov	r0, r4
   12698:	f004 fa36 	bl	16b08 <net_buf_unref>
			return -EIO;
   1269c:	2e09      	cmp	r6, #9
   1269e:	bf0c      	ite	eq
   126a0:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
   126a4:	f06f 0004 	mvnne.w	r0, #4
}
   126a8:	b006      	add	sp, #24
   126aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (rsp) {
   126ae:	b115      	cbz	r5, 126b6 <bt_hci_cmd_send_sync+0xbe>
		*rsp = buf;
   126b0:	602c      	str	r4, [r5, #0]
	return 0;
   126b2:	4630      	mov	r0, r6
   126b4:	e7f8      	b.n	126a8 <bt_hci_cmd_send_sync+0xb0>
		net_buf_unref(buf);
   126b6:	4620      	mov	r0, r4
   126b8:	f004 fa26 	bl	16b08 <net_buf_unref>
	return 0;
   126bc:	4628      	mov	r0, r5
   126be:	e7f3      	b.n	126a8 <bt_hci_cmd_send_sync+0xb0>
			return -ENOBUFS;
   126c0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   126c4:	e7f0      	b.n	126a8 <bt_hci_cmd_send_sync+0xb0>
   126c6:	bf00      	nop
   126c8:	200023fc 	.word	0x200023fc
   126cc:	20000404 	.word	0x20000404
   126d0:	0001ea54 	.word	0x0001ea54
   126d4:	0001ebe1 	.word	0x0001ebe1
   126d8:	0001eaa1 	.word	0x0001eaa1
   126dc:	0001ebea 	.word	0x0001ebea
   126e0:	0001d788 	.word	0x0001d788
   126e4:	0001d7b0 	.word	0x0001d7b0
   126e8:	0001ec0a 	.word	0x0001ec0a

000126ec <hci_le_read_max_data_len>:
{
   126ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
   126ee:	4606      	mov	r6, r0
   126f0:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   126f2:	aa01      	add	r2, sp, #4
   126f4:	2100      	movs	r1, #0
   126f6:	f242 002f 	movw	r0, #8239	; 0x202f
   126fa:	f7ff ff7d 	bl	125f8 <bt_hci_cmd_send_sync>
	if (err) {
   126fe:	4604      	mov	r4, r0
   12700:	b160      	cbz	r0, 1271c <hci_le_read_max_data_len+0x30>
   12702:	490c      	ldr	r1, [pc, #48]	; (12734 <hci_le_read_max_data_len+0x48>)
   12704:	4b0c      	ldr	r3, [pc, #48]	; (12738 <hci_le_read_max_data_len+0x4c>)
		BT_ERR("Failed to read DLE max data len");
   12706:	480d      	ldr	r0, [pc, #52]	; (1273c <hci_le_read_max_data_len+0x50>)
   12708:	1ac9      	subs	r1, r1, r3
   1270a:	08c9      	lsrs	r1, r1, #3
   1270c:	0189      	lsls	r1, r1, #6
   1270e:	f041 0101 	orr.w	r1, r1, #1
   12712:	f007 feea 	bl	1a4ea <log_0>
}
   12716:	4620      	mov	r0, r4
   12718:	b002      	add	sp, #8
   1271a:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   1271c:	9801      	ldr	r0, [sp, #4]
   1271e:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   12720:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   12724:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   12726:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   1272a:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   1272c:	f004 f9ec 	bl	16b08 <net_buf_unref>
	return 0;
   12730:	e7f1      	b.n	12716 <hci_le_read_max_data_len+0x2a>
   12732:	bf00      	nop
   12734:	0001d7b0 	.word	0x0001d7b0
   12738:	0001d788 	.word	0x0001d788
   1273c:	0001ec26 	.word	0x0001ec26

00012740 <bt_send>:
	return bt_dev.drv->send(buf);
   12740:	4b02      	ldr	r3, [pc, #8]	; (1274c <bt_send+0xc>)
   12742:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
   12746:	691b      	ldr	r3, [r3, #16]
   12748:	4718      	bx	r3
   1274a:	bf00      	nop
   1274c:	200002b8 	.word	0x200002b8

00012750 <bt_hci_cmd_send>:
{
   12750:	b538      	push	{r3, r4, r5, lr}
   12752:	4605      	mov	r5, r0
	if (!buf) {
   12754:	460c      	mov	r4, r1
   12756:	b919      	cbnz	r1, 12760 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
   12758:	f7ff ff14 	bl	12584 <bt_hci_cmd_create>
		if (!buf) {
   1275c:	4604      	mov	r4, r0
   1275e:	b1f0      	cbz	r0, 1279e <bt_hci_cmd_send+0x4e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   12760:	f640 4335 	movw	r3, #3125	; 0xc35
   12764:	429d      	cmp	r5, r3
   12766:	d114      	bne.n	12792 <bt_hci_cmd_send+0x42>
		err = bt_send(buf);
   12768:	4620      	mov	r0, r4
   1276a:	f7ff ffe9 	bl	12740 <bt_send>
		if (err) {
   1276e:	4605      	mov	r5, r0
   12770:	b168      	cbz	r0, 1278e <bt_hci_cmd_send+0x3e>
   12772:	4b0c      	ldr	r3, [pc, #48]	; (127a4 <bt_hci_cmd_send+0x54>)
   12774:	4a0c      	ldr	r2, [pc, #48]	; (127a8 <bt_hci_cmd_send+0x58>)
   12776:	1ad2      	subs	r2, r2, r3
   12778:	08d2      	lsrs	r2, r2, #3
			BT_ERR("Unable to send to driver (err %d)", err);
   1277a:	0192      	lsls	r2, r2, #6
   1277c:	4601      	mov	r1, r0
   1277e:	f042 0201 	orr.w	r2, r2, #1
   12782:	480a      	ldr	r0, [pc, #40]	; (127ac <bt_hci_cmd_send+0x5c>)
   12784:	f007 febe 	bl	1a504 <log_1>
			net_buf_unref(buf);
   12788:	4620      	mov	r0, r4
   1278a:	f004 f9bd 	bl	16b08 <net_buf_unref>
}
   1278e:	4628      	mov	r0, r5
   12790:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   12792:	4807      	ldr	r0, [pc, #28]	; (127b0 <bt_hci_cmd_send+0x60>)
   12794:	4621      	mov	r1, r4
   12796:	f009 ff86 	bl	1c6a6 <net_buf_put>
	return 0;
   1279a:	2500      	movs	r5, #0
   1279c:	e7f7      	b.n	1278e <bt_hci_cmd_send+0x3e>
			return -ENOBUFS;
   1279e:	f06f 0568 	mvn.w	r5, #104	; 0x68
   127a2:	e7f4      	b.n	1278e <bt_hci_cmd_send+0x3e>
   127a4:	0001d788 	.word	0x0001d788
   127a8:	0001d7b0 	.word	0x0001d7b0
   127ac:	0001ec46 	.word	0x0001ec46
   127b0:	20000404 	.word	0x20000404

000127b4 <conn_auto_initiate>:
{
   127b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   127b6:	7a83      	ldrb	r3, [r0, #10]
   127b8:	2b07      	cmp	r3, #7
{
   127ba:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   127bc:	d16e      	bne.n	1289c <conn_auto_initiate+0xe8>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   127be:	f3bf 8f5b 	dmb	ish
   127c2:	6843      	ldr	r3, [r0, #4]
   127c4:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   127c8:	049b      	lsls	r3, r3, #18
   127ca:	f100 0604 	add.w	r6, r0, #4
   127ce:	d41b      	bmi.n	12808 <conn_auto_initiate+0x54>
   127d0:	78c3      	ldrb	r3, [r0, #3]
   127d2:	b123      	cbz	r3, 127de <conn_auto_initiate+0x2a>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
   127d4:	4b32      	ldr	r3, [pc, #200]	; (128a0 <conn_auto_initiate+0xec>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
   127d6:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   127da:	071d      	lsls	r5, r3, #28
   127dc:	d514      	bpl.n	12808 <conn_auto_initiate+0x54>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   127de:	2102      	movs	r1, #2
   127e0:	f242 0016 	movw	r0, #8214	; 0x2016
   127e4:	f7ff fece 	bl	12584 <bt_hci_cmd_create>
	if (!buf) {
   127e8:	4605      	mov	r5, r0
   127ea:	b168      	cbz	r0, 12808 <conn_auto_initiate+0x54>
   127ec:	2102      	movs	r1, #2
   127ee:	3008      	adds	r0, #8
   127f0:	f009 ff8c 	bl	1c70c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   127f4:	8823      	ldrh	r3, [r4, #0]
   127f6:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   127f8:	4629      	mov	r1, r5
   127fa:	f242 0016 	movw	r0, #8214	; 0x2016
}
   127fe:	b004      	add	sp, #16
   12800:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   12804:	f7ff bfa4 	b.w	12750 <bt_hci_cmd_send>
   12808:	f3bf 8f5b 	dmb	ish
   1280c:	6863      	ldr	r3, [r4, #4]
   1280e:	4d24      	ldr	r5, [pc, #144]	; (128a0 <conn_auto_initiate+0xec>)
   12810:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   12814:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   12818:	f3c3 3100 	ubfx	r1, r3, #12, #1
   1281c:	d11c      	bne.n	12858 <conn_auto_initiate+0xa4>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
   1281e:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
   12822:	07d8      	lsls	r0, r3, #31
   12824:	d518      	bpl.n	12858 <conn_auto_initiate+0xa4>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   12826:	2302      	movs	r3, #2
   12828:	9100      	str	r1, [sp, #0]
   1282a:	461a      	mov	r2, r3
   1282c:	4620      	mov	r0, r4
   1282e:	f008 fdc9 	bl	1b3c4 <bt_le_set_phy>
		if (!err) {
   12832:	4601      	mov	r1, r0
   12834:	b930      	cbnz	r0, 12844 <conn_auto_initiate+0x90>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   12836:	2180      	movs	r1, #128	; 0x80
   12838:	4630      	mov	r0, r6
}
   1283a:	b004      	add	sp, #16
   1283c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12840:	f008 bd58 	b.w	1b2f4 <atomic_or>
   12844:	4a17      	ldr	r2, [pc, #92]	; (128a4 <conn_auto_initiate+0xf0>)
   12846:	4b18      	ldr	r3, [pc, #96]	; (128a8 <conn_auto_initiate+0xf4>)
		BT_ERR("Failed to set LE PHY (%d)", err);
   12848:	4818      	ldr	r0, [pc, #96]	; (128ac <conn_auto_initiate+0xf8>)
   1284a:	1ad2      	subs	r2, r2, r3
   1284c:	08d2      	lsrs	r2, r2, #3
   1284e:	0192      	lsls	r2, r2, #6
   12850:	f042 0201 	orr.w	r2, r2, #1
   12854:	f007 fe56 	bl	1a504 <log_1>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   12858:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   1285c:	069a      	lsls	r2, r3, #26
   1285e:	d51d      	bpl.n	1289c <conn_auto_initiate+0xe8>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   12860:	f8d5 3164 	ldr.w	r3, [r5, #356]	; 0x164
   12864:	689b      	ldr	r3, [r3, #8]
   12866:	079b      	lsls	r3, r3, #30
   12868:	d518      	bpl.n	1289c <conn_auto_initiate+0xe8>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   1286a:	f10d 010e 	add.w	r1, sp, #14
   1286e:	a803      	add	r0, sp, #12
   12870:	f7ff ff3c 	bl	126ec <hci_le_read_max_data_len>
			if (!err) {
   12874:	b990      	cbnz	r0, 1289c <conn_auto_initiate+0xe8>
				err = bt_le_set_data_len(conn,
   12876:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   1287a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   1287e:	4620      	mov	r0, r4
   12880:	f008 fd83 	bl	1b38a <bt_le_set_data_len>
				if (err) {
   12884:	4601      	mov	r1, r0
   12886:	b148      	cbz	r0, 1289c <conn_auto_initiate+0xe8>
   12888:	4a06      	ldr	r2, [pc, #24]	; (128a4 <conn_auto_initiate+0xf0>)
   1288a:	4b07      	ldr	r3, [pc, #28]	; (128a8 <conn_auto_initiate+0xf4>)
					BT_ERR("Failed to set data len (%d)", err);
   1288c:	4808      	ldr	r0, [pc, #32]	; (128b0 <conn_auto_initiate+0xfc>)
   1288e:	1ad2      	subs	r2, r2, r3
   12890:	08d2      	lsrs	r2, r2, #3
   12892:	0192      	lsls	r2, r2, #6
   12894:	f042 0201 	orr.w	r2, r2, #1
   12898:	f007 fe34 	bl	1a504 <log_1>
}
   1289c:	b004      	add	sp, #16
   1289e:	bd70      	pop	{r4, r5, r6, pc}
   128a0:	200002b8 	.word	0x200002b8
   128a4:	0001d7b0 	.word	0x0001d7b0
   128a8:	0001d788 	.word	0x0001d788
   128ac:	0001ec68 	.word	0x0001ec68
   128b0:	0001ec82 	.word	0x0001ec82

000128b4 <bt_hci_le_enh_conn_complete>:
{
   128b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   128b8:	f8b0 9001 	ldrh.w	r9, [r0, #1]
		if (disconnected_handles[i] == handle) {
   128bc:	4a7f      	ldr	r2, [pc, #508]	; (12abc <bt_hci_le_enh_conn_complete+0x208>)
	if (evt->status) {
   128be:	7804      	ldrb	r4, [r0, #0]
		if (disconnected_handles[i] == handle) {
   128c0:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
   128c2:	ea6f 5309 	mvn.w	r3, r9, lsl #20
   128c6:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
   128ca:	b29b      	uxth	r3, r3
   128cc:	4299      	cmp	r1, r3
   128ce:	f04f 0800 	mov.w	r8, #0
			disconnected_handles[i] = 0;
   128d2:	bf08      	it	eq
   128d4:	f8a2 8000 	strheq.w	r8, [r2]
{
   128d8:	b085      	sub	sp, #20
   128da:	4605      	mov	r5, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   128dc:	fa1f f789 	uxth.w	r7, r9
			return true;
   128e0:	bf08      	it	eq
   128e2:	f04f 0801 	moveq.w	r8, #1
	if (evt->status) {
   128e6:	2c00      	cmp	r4, #0
   128e8:	d03a      	beq.n	12960 <bt_hci_le_enh_conn_complete+0xac>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   128ea:	2c3c      	cmp	r4, #60	; 0x3c
   128ec:	d12a      	bne.n	12944 <bt_hci_le_enh_conn_complete+0x90>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   128ee:	f001 f9d3 	bl	13c98 <bt_le_adv_lookup_legacy>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   128f2:	f3bf 8f5b 	dmb	ish
   128f6:	3010      	adds	r0, #16
   128f8:	e850 3f00 	ldrex	r3, [r0]
   128fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   12900:	e840 3200 	strex	r2, r3, [r0]
   12904:	2a00      	cmp	r2, #0
   12906:	d1f7      	bne.n	128f8 <bt_hci_le_enh_conn_complete+0x44>
   12908:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
   1290c:	2000      	movs	r0, #0
   1290e:	f7ff fbcd 	bl	120ac <find_pending_connect.part.0>
		if (!conn) {
   12912:	4605      	mov	r5, r0
   12914:	b960      	cbnz	r0, 12930 <bt_hci_le_enh_conn_complete+0x7c>
   12916:	4b6a      	ldr	r3, [pc, #424]	; (12ac0 <bt_hci_le_enh_conn_complete+0x20c>)
   12918:	496a      	ldr	r1, [pc, #424]	; (12ac4 <bt_hci_le_enh_conn_complete+0x210>)
			BT_ERR("No pending slave connection");
   1291a:	486b      	ldr	r0, [pc, #428]	; (12ac8 <bt_hci_le_enh_conn_complete+0x214>)
   1291c:	1ac9      	subs	r1, r1, r3
   1291e:	08c9      	lsrs	r1, r1, #3
   12920:	0189      	lsls	r1, r1, #6
   12922:	f041 0101 	orr.w	r1, r1, #1
}
   12926:	b005      	add	sp, #20
   12928:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			BT_ERR("No pending slave connection");
   1292c:	f007 bddd 	b.w	1a4ea <log_0>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   12930:	7244      	strb	r4, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   12932:	2100      	movs	r1, #0
   12934:	f001 fde0 	bl	144f8 <bt_conn_set_state>
		bt_conn_unref(conn);
   12938:	4628      	mov	r0, r5
}
   1293a:	b005      	add	sp, #20
   1293c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		bt_conn_unref(conn);
   12940:	f008 bf0a 	b.w	1b758 <bt_conn_unref>
   12944:	4b5e      	ldr	r3, [pc, #376]	; (12ac0 <bt_hci_le_enh_conn_complete+0x20c>)
   12946:	4a5f      	ldr	r2, [pc, #380]	; (12ac4 <bt_hci_le_enh_conn_complete+0x210>)
		BT_WARN("Unexpected status 0x%02x", evt->status);
   12948:	4860      	ldr	r0, [pc, #384]	; (12acc <bt_hci_le_enh_conn_complete+0x218>)
   1294a:	1ad2      	subs	r2, r2, r3
   1294c:	08d2      	lsrs	r2, r2, #3
   1294e:	0192      	lsls	r2, r2, #6
   12950:	f042 0202 	orr.w	r2, r2, #2
   12954:	4621      	mov	r1, r4
}
   12956:	b005      	add	sp, #20
   12958:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		BT_WARN("Unexpected status 0x%02x", evt->status);
   1295c:	f007 bdd2 	b.w	1a504 <log_1>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   12960:	7903      	ldrb	r3, [r0, #4]
   12962:	3b02      	subs	r3, #2
   12964:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   12966:	f100 0604 	add.w	r6, r0, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   1296a:	d845      	bhi.n	129f8 <bt_hci_le_enh_conn_complete+0x144>
	memcpy(dst, src, sizeof(*dst));
   1296c:	2207      	movs	r2, #7
   1296e:	4631      	mov	r1, r6
   12970:	a802      	add	r0, sp, #8
   12972:	f008 fc21 	bl	1b1b8 <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   12976:	f89d 3008 	ldrb.w	r3, [sp, #8]
	memcpy(dst, src, sizeof(*dst));
   1297a:	2206      	movs	r2, #6
   1297c:	3b02      	subs	r3, #2
   1297e:	f105 0111 	add.w	r1, r5, #17
   12982:	f10d 0001 	add.w	r0, sp, #1
   12986:	f88d 3008 	strb.w	r3, [sp, #8]
   1298a:	f008 fc15 	bl	1b1b8 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   1298e:	2301      	movs	r3, #1
   12990:	f88d 3000 	strb.w	r3, [sp]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
   12994:	78eb      	ldrb	r3, [r5, #3]
   12996:	2b01      	cmp	r3, #1
   12998:	d116      	bne.n	129c8 <bt_hci_le_enh_conn_complete+0x114>
   1299a:	a802      	add	r0, sp, #8
   1299c:	f7ff fb86 	bl	120ac <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   129a0:	78eb      	ldrb	r3, [r5, #3]
   129a2:	2b01      	cmp	r3, #1
   129a4:	4604      	mov	r4, r0
   129a6:	d10e      	bne.n	129c6 <bt_hci_le_enh_conn_complete+0x112>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   129a8:	f001 f976 	bl	13c98 <bt_le_adv_lookup_legacy>
   129ac:	f3bf 8f5b 	dmb	ish
   129b0:	3010      	adds	r0, #16
   129b2:	e850 3f00 	ldrex	r3, [r0]
   129b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   129ba:	e840 3200 	strex	r2, r3, [r0]
   129be:	2a00      	cmp	r2, #0
   129c0:	d1f7      	bne.n	129b2 <bt_hci_le_enh_conn_complete+0xfe>
   129c2:	f3bf 8f5b 	dmb	ish
	if (!conn) {
   129c6:	bb64      	cbnz	r4, 12a22 <bt_hci_le_enh_conn_complete+0x16e>
   129c8:	4a3d      	ldr	r2, [pc, #244]	; (12ac0 <bt_hci_le_enh_conn_complete+0x20c>)
   129ca:	4c3e      	ldr	r4, [pc, #248]	; (12ac4 <bt_hci_le_enh_conn_complete+0x210>)
		BT_ERR("No pending conn for peer %s",
   129cc:	4630      	mov	r0, r6
   129ce:	1aa4      	subs	r4, r4, r2
   129d0:	f7ff f976 	bl	11cc0 <bt_addr_le_str_real>
   129d4:	f7fd fb60 	bl	10098 <z_log_strdup>
   129d8:	08e4      	lsrs	r4, r4, #3
   129da:	01a4      	lsls	r4, r4, #6
   129dc:	f044 0401 	orr.w	r4, r4, #1
   129e0:	4601      	mov	r1, r0
   129e2:	4622      	mov	r2, r4
   129e4:	483a      	ldr	r0, [pc, #232]	; (12ad0 <bt_hci_le_enh_conn_complete+0x21c>)
   129e6:	f007 fd8d 	bl	1a504 <log_1>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   129ea:	211f      	movs	r1, #31
   129ec:	4638      	mov	r0, r7
   129ee:	f008 fc90 	bl	1b312 <bt_hci_disconnect>
}
   129f2:	b005      	add	sp, #20
   129f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		uint8_t id = evt->role == BT_HCI_ROLE_SLAVE ? bt_dev.adv_conn_id :
   129f8:	78c3      	ldrb	r3, [r0, #3]
   129fa:	2b01      	cmp	r3, #1
   129fc:	bf04      	itt	eq
   129fe:	4b35      	ldreq	r3, [pc, #212]	; (12ad4 <bt_hci_le_enh_conn_complete+0x220>)
   12a00:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
   12a04:	4631      	mov	r1, r6
   12a06:	4620      	mov	r0, r4
   12a08:	f008 fd44 	bl	1b494 <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
   12a0c:	2207      	movs	r2, #7
   12a0e:	4601      	mov	r1, r0
   12a10:	a802      	add	r0, sp, #8
   12a12:	f008 fbd1 	bl	1b1b8 <memcpy>
   12a16:	2207      	movs	r2, #7
   12a18:	4631      	mov	r1, r6
   12a1a:	4668      	mov	r0, sp
   12a1c:	f008 fbcc 	bl	1b1b8 <memcpy>
}
   12a20:	e7b8      	b.n	12994 <bt_hci_le_enh_conn_complete+0xe0>
	conn->handle = handle;
   12a22:	4620      	mov	r0, r4
	memcpy(dst, src, sizeof(*dst));
   12a24:	2207      	movs	r2, #7
   12a26:	f820 9b88 	strh.w	r9, [r0], #136
   12a2a:	a902      	add	r1, sp, #8
   12a2c:	f008 fbc4 	bl	1b1b8 <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   12a30:	7e2a      	ldrb	r2, [r5, #24]
   12a32:	7deb      	ldrb	r3, [r5, #23]
   12a34:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   12a38:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   12a3c:	7eaa      	ldrb	r2, [r5, #26]
   12a3e:	7e6b      	ldrb	r3, [r5, #25]
   12a40:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   12a44:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   12a48:	7f2a      	ldrb	r2, [r5, #28]
   12a4a:	7eeb      	ldrb	r3, [r5, #27]
   12a4c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   12a50:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
   12a54:	78eb      	ldrb	r3, [r5, #3]
   12a56:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
   12a58:	2200      	movs	r2, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   12a5a:	2b01      	cmp	r3, #1
	conn->err = 0U;
   12a5c:	7262      	strb	r2, [r4, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   12a5e:	d117      	bne.n	12a90 <bt_hci_le_enh_conn_complete+0x1dc>
   12a60:	2207      	movs	r2, #7
   12a62:	4669      	mov	r1, sp
   12a64:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   12a68:	f008 fba6 	bl	1b1b8 <memcpy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   12a6c:	f001 f914 	bl	13c98 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   12a70:	7a21      	ldrb	r1, [r4, #8]
   12a72:	4d18      	ldr	r5, [pc, #96]	; (12ad4 <bt_hci_le_enh_conn_complete+0x220>)
   12a74:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   12a78:	2207      	movs	r2, #7
   12a7a:	4429      	add	r1, r5
   12a7c:	f104 0096 	add.w	r0, r4, #150	; 0x96
   12a80:	f008 fb9a 	bl	1b1b8 <memcpy>
		if (BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
   12a84:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
   12a88:	065b      	lsls	r3, r3, #25
   12a8a:	d501      	bpl.n	12a90 <bt_hci_le_enh_conn_complete+0x1dc>
			bt_le_adv_resume();
   12a8c:	f001 fad2 	bl	14034 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   12a90:	2107      	movs	r1, #7
   12a92:	4620      	mov	r0, r4
   12a94:	f001 fd30 	bl	144f8 <bt_conn_set_state>
	if (is_disconnected) {
   12a98:	f1b8 0f00 	cmp.w	r8, #0
   12a9c:	d003      	beq.n	12aa6 <bt_hci_le_enh_conn_complete+0x1f2>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   12a9e:	2101      	movs	r1, #1
   12aa0:	4620      	mov	r0, r4
   12aa2:	f001 fd29 	bl	144f8 <bt_conn_set_state>
	bt_conn_connected(conn);
   12aa6:	4620      	mov	r0, r4
   12aa8:	f008 fe92 	bl	1b7d0 <bt_conn_connected>
	conn_auto_initiate(conn);
   12aac:	4620      	mov	r0, r4
   12aae:	f7ff fe81 	bl	127b4 <conn_auto_initiate>
	bt_conn_unref(conn);
   12ab2:	4620      	mov	r0, r4
   12ab4:	f008 fe50 	bl	1b758 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   12ab8:	e79b      	b.n	129f2 <bt_hci_le_enh_conn_complete+0x13e>
   12aba:	bf00      	nop
   12abc:	20002680 	.word	0x20002680
   12ac0:	0001d788 	.word	0x0001d788
   12ac4:	0001d7b0 	.word	0x0001d7b0
   12ac8:	0001ec9e 	.word	0x0001ec9e
   12acc:	0001ecba 	.word	0x0001ecba
   12ad0:	0001ecd3 	.word	0x0001ecd3
   12ad4:	200002b8 	.word	0x200002b8

00012ad8 <le_phy_update_complete>:
{
   12ad8:	b538      	push	{r3, r4, r5, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   12ada:	6883      	ldr	r3, [r0, #8]
   12adc:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   12ae0:	4628      	mov	r0, r5
   12ae2:	f001 fd01 	bl	144e8 <bt_conn_lookup_handle>
	if (!conn) {
   12ae6:	4604      	mov	r4, r0
   12ae8:	b960      	cbnz	r0, 12b04 <le_phy_update_complete+0x2c>
   12aea:	4b14      	ldr	r3, [pc, #80]	; (12b3c <le_phy_update_complete+0x64>)
   12aec:	4a14      	ldr	r2, [pc, #80]	; (12b40 <le_phy_update_complete+0x68>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   12aee:	4815      	ldr	r0, [pc, #84]	; (12b44 <le_phy_update_complete+0x6c>)
   12af0:	1ad2      	subs	r2, r2, r3
   12af2:	08d2      	lsrs	r2, r2, #3
   12af4:	0192      	lsls	r2, r2, #6
   12af6:	4629      	mov	r1, r5
   12af8:	f042 0201 	orr.w	r2, r2, #1
}
   12afc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   12b00:	f007 bd00 	b.w	1a504 <log_1>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
   12b04:	3004      	adds	r0, #4
   12b06:	f3bf 8f5b 	dmb	ish
   12b0a:	e850 3f00 	ldrex	r3, [r0]
   12b0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
   12b12:	e840 2100 	strex	r1, r2, [r0]
   12b16:	2900      	cmp	r1, #0
   12b18:	d1f7      	bne.n	12b0a <le_phy_update_complete+0x32>
   12b1a:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   12b1e:	061b      	lsls	r3, r3, #24
   12b20:	d506      	bpl.n	12b30 <le_phy_update_complete+0x58>
   12b22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   12b26:	f008 fbe5 	bl	1b2f4 <atomic_or>
		conn_auto_initiate(conn);
   12b2a:	4620      	mov	r0, r4
   12b2c:	f7ff fe42 	bl	127b4 <conn_auto_initiate>
	bt_conn_unref(conn);
   12b30:	4620      	mov	r0, r4
}
   12b32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   12b36:	f008 be0f 	b.w	1b758 <bt_conn_unref>
   12b3a:	bf00      	nop
   12b3c:	0001d788 	.word	0x0001d788
   12b40:	0001d7b0 	.word	0x0001d7b0
   12b44:	0001e9a6 	.word	0x0001e9a6

00012b48 <le_remote_feat_complete>:
{
   12b48:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   12b4a:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   12b4c:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   12b50:	4630      	mov	r0, r6
   12b52:	f001 fcc9 	bl	144e8 <bt_conn_lookup_handle>
	if (!conn) {
   12b56:	4604      	mov	r4, r0
   12b58:	b960      	cbnz	r0, 12b74 <le_remote_feat_complete+0x2c>
   12b5a:	4a10      	ldr	r2, [pc, #64]	; (12b9c <le_remote_feat_complete+0x54>)
   12b5c:	4b10      	ldr	r3, [pc, #64]	; (12ba0 <le_remote_feat_complete+0x58>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   12b5e:	4811      	ldr	r0, [pc, #68]	; (12ba4 <le_remote_feat_complete+0x5c>)
   12b60:	1ad2      	subs	r2, r2, r3
   12b62:	08d2      	lsrs	r2, r2, #3
   12b64:	0192      	lsls	r2, r2, #6
   12b66:	4631      	mov	r1, r6
   12b68:	f042 0201 	orr.w	r2, r2, #1
}
   12b6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   12b70:	f007 bcc8 	b.w	1a504 <log_1>
	if (!evt->status) {
   12b74:	782b      	ldrb	r3, [r5, #0]
   12b76:	b923      	cbnz	r3, 12b82 <le_remote_feat_complete+0x3a>
		memcpy(conn->le.features, evt->features,
   12b78:	2208      	movs	r2, #8
   12b7a:	1ce9      	adds	r1, r5, #3
   12b7c:	30ac      	adds	r0, #172	; 0xac
   12b7e:	f008 fb1b 	bl	1b1b8 <memcpy>
   12b82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   12b86:	1d20      	adds	r0, r4, #4
   12b88:	f008 fbb4 	bl	1b2f4 <atomic_or>
	conn_auto_initiate(conn);
   12b8c:	4620      	mov	r0, r4
   12b8e:	f7ff fe11 	bl	127b4 <conn_auto_initiate>
	bt_conn_unref(conn);
   12b92:	4620      	mov	r0, r4
}
   12b94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   12b98:	f008 bdde 	b.w	1b758 <bt_conn_unref>
   12b9c:	0001d7b0 	.word	0x0001d7b0
   12ba0:	0001d788 	.word	0x0001d788
   12ba4:	0001e9a6 	.word	0x0001e9a6

00012ba8 <le_conn_param_neg_reply>:
{
   12ba8:	b570      	push	{r4, r5, r6, lr}
   12baa:	4606      	mov	r6, r0
   12bac:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   12bae:	f242 0021 	movw	r0, #8225	; 0x2021
   12bb2:	2103      	movs	r1, #3
   12bb4:	f7ff fce6 	bl	12584 <bt_hci_cmd_create>
	if (!buf) {
   12bb8:	4604      	mov	r4, r0
   12bba:	b958      	cbnz	r0, 12bd4 <le_conn_param_neg_reply+0x2c>
   12bbc:	490c      	ldr	r1, [pc, #48]	; (12bf0 <le_conn_param_neg_reply+0x48>)
   12bbe:	4b0d      	ldr	r3, [pc, #52]	; (12bf4 <le_conn_param_neg_reply+0x4c>)
		BT_ERR("Unable to allocate buffer");
   12bc0:	480d      	ldr	r0, [pc, #52]	; (12bf8 <le_conn_param_neg_reply+0x50>)
   12bc2:	1ac9      	subs	r1, r1, r3
   12bc4:	08c9      	lsrs	r1, r1, #3
   12bc6:	0189      	lsls	r1, r1, #6
}
   12bc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
   12bcc:	f041 0101 	orr.w	r1, r1, #1
   12bd0:	f007 bc8b 	b.w	1a4ea <log_0>
   12bd4:	2103      	movs	r1, #3
   12bd6:	3008      	adds	r0, #8
   12bd8:	f009 fd98 	bl	1c70c <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   12bdc:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   12bde:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   12be0:	4621      	mov	r1, r4
   12be2:	f242 0021 	movw	r0, #8225	; 0x2021
}
   12be6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   12bea:	f7ff bdb1 	b.w	12750 <bt_hci_cmd_send>
   12bee:	bf00      	nop
   12bf0:	0001d7b0 	.word	0x0001d7b0
   12bf4:	0001d788 	.word	0x0001d788
   12bf8:	0001ecef 	.word	0x0001ecef

00012bfc <le_conn_param_req>:
{
   12bfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   12bfe:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   12c00:	78d9      	ldrb	r1, [r3, #3]
   12c02:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   12c04:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   12c06:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   12c0a:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   12c0e:	7959      	ldrb	r1, [r3, #5]
   12c10:	791a      	ldrb	r2, [r3, #4]
   12c12:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   12c16:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   12c1a:	799a      	ldrb	r2, [r3, #6]
   12c1c:	79d9      	ldrb	r1, [r3, #7]
   12c1e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   12c22:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   12c26:	7a1a      	ldrb	r2, [r3, #8]
   12c28:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   12c2a:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   12c2c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   12c30:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   12c32:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   12c36:	f001 fc57 	bl	144e8 <bt_conn_lookup_handle>
	if (!conn) {
   12c3a:	4606      	mov	r6, r0
   12c3c:	b980      	cbnz	r0, 12c60 <le_conn_param_req+0x64>
   12c3e:	4b20      	ldr	r3, [pc, #128]	; (12cc0 <le_conn_param_req+0xc4>)
   12c40:	4a20      	ldr	r2, [pc, #128]	; (12cc4 <le_conn_param_req+0xc8>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   12c42:	4821      	ldr	r0, [pc, #132]	; (12cc8 <le_conn_param_req+0xcc>)
   12c44:	1ad2      	subs	r2, r2, r3
   12c46:	08d2      	lsrs	r2, r2, #3
   12c48:	0192      	lsls	r2, r2, #6
   12c4a:	4621      	mov	r1, r4
   12c4c:	f042 0201 	orr.w	r2, r2, #1
   12c50:	f007 fc58 	bl	1a504 <log_1>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   12c54:	2102      	movs	r1, #2
   12c56:	4620      	mov	r0, r4
   12c58:	f7ff ffa6 	bl	12ba8 <le_conn_param_neg_reply>
}
   12c5c:	b003      	add	sp, #12
   12c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   12c60:	4669      	mov	r1, sp
   12c62:	f001 fd77 	bl	14754 <le_param_req>
   12c66:	b938      	cbnz	r0, 12c78 <le_conn_param_req+0x7c>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   12c68:	211e      	movs	r1, #30
   12c6a:	4620      	mov	r0, r4
   12c6c:	f7ff ff9c 	bl	12ba8 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   12c70:	4630      	mov	r0, r6
   12c72:	f008 fd71 	bl	1b758 <bt_conn_unref>
   12c76:	e7f1      	b.n	12c5c <le_conn_param_req+0x60>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   12c78:	210e      	movs	r1, #14
   12c7a:	f242 0020 	movw	r0, #8224	; 0x2020
   12c7e:	f7ff fc81 	bl	12584 <bt_hci_cmd_create>
	if (!buf) {
   12c82:	4605      	mov	r5, r0
   12c84:	2800      	cmp	r0, #0
   12c86:	d0f3      	beq.n	12c70 <le_conn_param_req+0x74>
   12c88:	210e      	movs	r1, #14
   12c8a:	3008      	adds	r0, #8
   12c8c:	f009 fd3e 	bl	1c70c <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
   12c90:	220e      	movs	r2, #14
   12c92:	4604      	mov	r4, r0
   12c94:	2100      	movs	r1, #0
   12c96:	f008 fa9a 	bl	1b1ce <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   12c9a:	f8bd 3000 	ldrh.w	r3, [sp]
   12c9e:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   12ca0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   12ca4:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   12ca6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   12caa:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   12cac:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
   12cb0:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   12cb2:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   12cb4:	4629      	mov	r1, r5
   12cb6:	f242 0020 	movw	r0, #8224	; 0x2020
   12cba:	f7ff fd49 	bl	12750 <bt_hci_cmd_send>
   12cbe:	e7d7      	b.n	12c70 <le_conn_param_req+0x74>
   12cc0:	0001d788 	.word	0x0001d788
   12cc4:	0001d7b0 	.word	0x0001d7b0
   12cc8:	0001e9a6 	.word	0x0001e9a6

00012ccc <hci_tx_thread>:
{
   12ccc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12cd0:	4d51      	ldr	r5, [pc, #324]	; (12e18 <hci_tx_thread+0x14c>)
   12cd2:	4b52      	ldr	r3, [pc, #328]	; (12e1c <hci_tx_thread+0x150>)
		events[0].state = K_POLL_STATE_NOT_READY;
   12cd4:	f8df 9148 	ldr.w	r9, [pc, #328]	; 12e20 <hci_tx_thread+0x154>
		BT_ASSERT(err == 0);
   12cd8:	f8df a148 	ldr.w	sl, [pc, #328]	; 12e24 <hci_tx_thread+0x158>
   12cdc:	1aed      	subs	r5, r5, r3
   12cde:	08ed      	lsrs	r5, r5, #3
		events[0].state = K_POLL_STATE_NOT_READY;
   12ce0:	f8d9 300c 	ldr.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   12ce4:	4850      	ldr	r0, [pc, #320]	; (12e28 <hci_tx_thread+0x15c>)
		events[0].state = K_POLL_STATE_NOT_READY;
   12ce6:	f36f 3352 	bfc	r3, #13, #6
   12cea:	f8c9 300c 	str.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   12cee:	f001 fbbd 	bl	1446c <bt_conn_prepare_events>
   12cf2:	1c47      	adds	r7, r0, #1
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   12cf4:	484a      	ldr	r0, [pc, #296]	; (12e20 <hci_tx_thread+0x154>)
   12cf6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12cfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12cfe:	4639      	mov	r1, r7
   12d00:	f006 feec 	bl	19adc <z_impl_k_poll>
		BT_ASSERT(err == 0);
   12d04:	b160      	cbz	r0, 12d20 <hci_tx_thread+0x54>
   12d06:	4949      	ldr	r1, [pc, #292]	; (12e2c <hci_tx_thread+0x160>)
   12d08:	4849      	ldr	r0, [pc, #292]	; (12e30 <hci_tx_thread+0x164>)
   12d0a:	f640 137f 	movw	r3, #2431	; 0x97f
   12d0e:	4652      	mov	r2, sl
   12d10:	f006 ffd1 	bl	19cb6 <printk>
   12d14:	4040      	eors	r0, r0
   12d16:	f380 8811 	msr	BASEPRI, r0
   12d1a:	f04f 0003 	mov.w	r0, #3
   12d1e:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   12d20:	4e44      	ldr	r6, [pc, #272]	; (12e34 <hci_tx_thread+0x168>)
{
   12d22:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 12e20 <hci_tx_thread+0x154>
   12d26:	f506 7b8c 	add.w	fp, r6, #280	; 0x118
	for (; count; ev++, count--) {
   12d2a:	b917      	cbnz	r7, 12d32 <hci_tx_thread+0x66>
	z_impl_k_yield();
   12d2c:	f006 fbec 	bl	19508 <z_impl_k_yield>
	while (1) {
   12d30:	e7d6      	b.n	12ce0 <hci_tx_thread+0x14>
		switch (ev->state) {
   12d32:	f8d8 100c 	ldr.w	r1, [r8, #12]
   12d36:	f3c1 3145 	ubfx	r1, r1, #13, #6
   12d3a:	2901      	cmp	r1, #1
   12d3c:	d959      	bls.n	12df2 <hci_tx_thread+0x126>
   12d3e:	2904      	cmp	r1, #4
   12d40:	d163      	bne.n	12e0a <hci_tx_thread+0x13e>
			if (ev->tag == BT_EVENT_CMD_TX) {
   12d42:	f898 300c 	ldrb.w	r3, [r8, #12]
   12d46:	2b00      	cmp	r3, #0
   12d48:	d157      	bne.n	12dfa <hci_tx_thread+0x12e>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   12d4a:	483b      	ldr	r0, [pc, #236]	; (12e38 <hci_tx_thread+0x16c>)
   12d4c:	2200      	movs	r2, #0
   12d4e:	2300      	movs	r3, #0
   12d50:	f009 fc8b 	bl	1c66a <net_buf_get>
	BT_ASSERT(buf);
   12d54:	4604      	mov	r4, r0
   12d56:	b960      	cbnz	r0, 12d72 <hci_tx_thread+0xa6>
   12d58:	4938      	ldr	r1, [pc, #224]	; (12e3c <hci_tx_thread+0x170>)
   12d5a:	4835      	ldr	r0, [pc, #212]	; (12e30 <hci_tx_thread+0x164>)
   12d5c:	f640 131c 	movw	r3, #2332	; 0x91c
   12d60:	4652      	mov	r2, sl
   12d62:	f006 ffa8 	bl	19cb6 <printk>
   12d66:	4040      	eors	r0, r0
   12d68:	f380 8811 	msr	BASEPRI, r0
   12d6c:	f04f 0003 	mov.w	r0, #3
   12d70:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   12d72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12d76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12d7a:	4658      	mov	r0, fp
   12d7c:	f005 ff8e 	bl	18c9c <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   12d80:	f8d6 3130 	ldr.w	r3, [r6, #304]	; 0x130
   12d84:	b163      	cbz	r3, 12da0 <hci_tx_thread+0xd4>
		BT_ERR("Uncleared pending sent_cmd");
   12d86:	01a9      	lsls	r1, r5, #6
   12d88:	482d      	ldr	r0, [pc, #180]	; (12e40 <hci_tx_thread+0x174>)
   12d8a:	f041 0101 	orr.w	r1, r1, #1
   12d8e:	f007 fbac 	bl	1a4ea <log_0>
		net_buf_unref(bt_dev.sent_cmd);
   12d92:	f8d6 0130 	ldr.w	r0, [r6, #304]	; 0x130
   12d96:	f003 feb7 	bl	16b08 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   12d9a:	2300      	movs	r3, #0
   12d9c:	f8c6 3130 	str.w	r3, [r6, #304]	; 0x130
	bt_dev.sent_cmd = net_buf_ref(buf);
   12da0:	4620      	mov	r0, r4
   12da2:	f009 fc8d 	bl	1c6c0 <net_buf_ref>
   12da6:	f8c6 0130 	str.w	r0, [r6, #304]	; 0x130
	err = bt_send(buf);
   12daa:	4620      	mov	r0, r4
   12dac:	f7ff fcc8 	bl	12740 <bt_send>
	if (err) {
   12db0:	4601      	mov	r1, r0
   12db2:	b1f0      	cbz	r0, 12df2 <hci_tx_thread+0x126>
		BT_ERR("Unable to send to driver (err %d)", err);
   12db4:	01aa      	lsls	r2, r5, #6
   12db6:	4823      	ldr	r0, [pc, #140]	; (12e44 <hci_tx_thread+0x178>)
   12db8:	f042 0201 	orr.w	r2, r2, #1
   12dbc:	f007 fba2 	bl	1a504 <log_1>
	z_impl_k_sem_give(sem);
   12dc0:	4821      	ldr	r0, [pc, #132]	; (12e48 <hci_tx_thread+0x17c>)
   12dc2:	f005 ff45 	bl	18c50 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   12dc6:	4620      	mov	r0, r4
   12dc8:	f003 fde8 	bl	1699c <net_buf_id>
   12dcc:	4b1f      	ldr	r3, [pc, #124]	; (12e4c <hci_tx_thread+0x180>)
   12dce:	220c      	movs	r2, #12
   12dd0:	fb02 3000 	mla	r0, r2, r0, r3
   12dd4:	211f      	movs	r1, #31
   12dd6:	8840      	ldrh	r0, [r0, #2]
   12dd8:	4622      	mov	r2, r4
   12dda:	f7ff fa81 	bl	122e0 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
   12dde:	f8d6 0130 	ldr.w	r0, [r6, #304]	; 0x130
   12de2:	f003 fe91 	bl	16b08 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   12de6:	2300      	movs	r3, #0
		net_buf_unref(buf);
   12de8:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
   12dea:	f8c6 3130 	str.w	r3, [r6, #304]	; 0x130
		net_buf_unref(buf);
   12dee:	f003 fe8b 	bl	16b08 <net_buf_unref>
	for (; count; ev++, count--) {
   12df2:	f108 0814 	add.w	r8, r8, #20
   12df6:	3f01      	subs	r7, #1
   12df8:	e797      	b.n	12d2a <hci_tx_thread+0x5e>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   12dfa:	2b01      	cmp	r3, #1
   12dfc:	d1f9      	bne.n	12df2 <hci_tx_thread+0x126>
					conn = CONTAINER_OF(ev->fifo,
   12dfe:	f8d8 0010 	ldr.w	r0, [r8, #16]
					bt_conn_process_tx(conn);
   12e02:	3838      	subs	r0, #56	; 0x38
   12e04:	f001 fe66 	bl	14ad4 <bt_conn_process_tx>
   12e08:	e7f3      	b.n	12df2 <hci_tx_thread+0x126>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
   12e0a:	01aa      	lsls	r2, r5, #6
   12e0c:	4810      	ldr	r0, [pc, #64]	; (12e50 <hci_tx_thread+0x184>)
   12e0e:	f042 0202 	orr.w	r2, r2, #2
   12e12:	f007 fb77 	bl	1a504 <log_1>
   12e16:	e7ec      	b.n	12df2 <hci_tx_thread+0x126>
   12e18:	0001d7b0 	.word	0x0001d7b0
   12e1c:	0001d788 	.word	0x0001d788
   12e20:	20000464 	.word	0x20000464
   12e24:	0001ea54 	.word	0x0001ea54
   12e28:	20000478 	.word	0x20000478
   12e2c:	0001ebe1 	.word	0x0001ebe1
   12e30:	0001eaa1 	.word	0x0001eaa1
   12e34:	200002b8 	.word	0x200002b8
   12e38:	20000404 	.word	0x20000404
   12e3c:	0001e85d 	.word	0x0001e85d
   12e40:	0001ed09 	.word	0x0001ed09
   12e44:	0001ec46 	.word	0x0001ec46
   12e48:	200003d0 	.word	0x200003d0
   12e4c:	200023fc 	.word	0x200023fc
   12e50:	0001ed24 	.word	0x0001ed24

00012e54 <hci_event_prio>:
{
   12e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12e58:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   12e5a:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   12e5e:	4630      	mov	r0, r6
   12e60:	f009 fc8b 	bl	1c77a <net_buf_simple_headroom>
	state->len = buf->len;
   12e64:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   12e68:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   12e6c:	4605      	mov	r5, r0
   12e6e:	d80c      	bhi.n	12e8a <hci_event_prio+0x36>
   12e70:	4a1c      	ldr	r2, [pc, #112]	; (12ee4 <hci_event_prio+0x90>)
   12e72:	491d      	ldr	r1, [pc, #116]	; (12ee8 <hci_event_prio+0x94>)
   12e74:	481d      	ldr	r0, [pc, #116]	; (12eec <hci_event_prio+0x98>)
   12e76:	f640 530c 	movw	r3, #3340	; 0xd0c
   12e7a:	f006 ff1c 	bl	19cb6 <printk>
   12e7e:	4040      	eors	r0, r0
   12e80:	f380 8811 	msr	BASEPRI, r0
   12e84:	f04f 0003 	mov.w	r0, #3
   12e88:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   12e8a:	4630      	mov	r0, r6
   12e8c:	2102      	movs	r1, #2
   12e8e:	f009 fc64 	bl	1c75a <net_buf_simple_pull_mem>
   12e92:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   12e94:	7800      	ldrb	r0, [r0, #0]
   12e96:	f008 fa1b 	bl	1b2d0 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   12e9a:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   12e9c:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   12e9e:	d40c      	bmi.n	12eba <hci_event_prio+0x66>
   12ea0:	4a10      	ldr	r2, [pc, #64]	; (12ee4 <hci_event_prio+0x90>)
   12ea2:	4913      	ldr	r1, [pc, #76]	; (12ef0 <hci_event_prio+0x9c>)
   12ea4:	4811      	ldr	r0, [pc, #68]	; (12eec <hci_event_prio+0x98>)
   12ea6:	f44f 6351 	mov.w	r3, #3344	; 0xd10
   12eaa:	f006 ff04 	bl	19cb6 <printk>
   12eae:	4040      	eors	r0, r0
   12eb0:	f380 8811 	msr	BASEPRI, r0
   12eb4:	f04f 0003 	mov.w	r0, #3
   12eb8:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   12eba:	2305      	movs	r3, #5
   12ebc:	4a0d      	ldr	r2, [pc, #52]	; (12ef4 <hci_event_prio+0xa0>)
   12ebe:	7838      	ldrb	r0, [r7, #0]
   12ec0:	4621      	mov	r1, r4
   12ec2:	f7ff f913 	bl	120ec <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   12ec6:	07b3      	lsls	r3, r6, #30
   12ec8:	d507      	bpl.n	12eda <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   12eca:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   12ecc:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   12ed0:	fa10 f585 	uxtah	r5, r0, r5
   12ed4:	60a5      	str	r5, [r4, #8]
}
   12ed6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   12eda:	4620      	mov	r0, r4
}
   12edc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   12ee0:	f003 be12 	b.w	16b08 <net_buf_unref>
   12ee4:	0001ea54 	.word	0x0001ea54
   12ee8:	0001ea88 	.word	0x0001ea88
   12eec:	0001eaa1 	.word	0x0001eaa1
   12ef0:	0001ed45 	.word	0x0001ed45
   12ef4:	0001db3c 	.word	0x0001db3c

00012ef8 <bt_recv>:
{
   12ef8:	b538      	push	{r3, r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   12efa:	7d01      	ldrb	r1, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   12efc:	2901      	cmp	r1, #1
{
   12efe:	4605      	mov	r5, r0
	switch (bt_buf_get_type(buf)) {
   12f00:	d007      	beq.n	12f12 <bt_recv+0x1a>
   12f02:	2903      	cmp	r1, #3
   12f04:	d113      	bne.n	12f2e <bt_recv+0x36>
			net_buf_put(&bt_dev.rx_queue, buf);
   12f06:	4812      	ldr	r0, [pc, #72]	; (12f50 <bt_recv+0x58>)
   12f08:	4629      	mov	r1, r5
   12f0a:	f009 fbcc 	bl	1c6a6 <net_buf_put>
		return 0;
   12f0e:	2000      	movs	r0, #0
   12f10:	e00c      	b.n	12f2c <bt_recv+0x34>
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   12f12:	6883      	ldr	r3, [r0, #8]
   12f14:	7818      	ldrb	r0, [r3, #0]
   12f16:	f008 f9db 	bl	1b2d0 <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   12f1a:	07c3      	lsls	r3, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   12f1c:	4604      	mov	r4, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   12f1e:	d502      	bpl.n	12f26 <bt_recv+0x2e>
			hci_event_prio(buf);
   12f20:	4628      	mov	r0, r5
   12f22:	f7ff ff97 	bl	12e54 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   12f26:	f014 0002 	ands.w	r0, r4, #2
   12f2a:	d1ec      	bne.n	12f06 <bt_recv+0xe>
}
   12f2c:	bd38      	pop	{r3, r4, r5, pc}
   12f2e:	4b09      	ldr	r3, [pc, #36]	; (12f54 <bt_recv+0x5c>)
   12f30:	4a09      	ldr	r2, [pc, #36]	; (12f58 <bt_recv+0x60>)
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   12f32:	480a      	ldr	r0, [pc, #40]	; (12f5c <bt_recv+0x64>)
   12f34:	1ad2      	subs	r2, r2, r3
   12f36:	08d2      	lsrs	r2, r2, #3
   12f38:	0192      	lsls	r2, r2, #6
   12f3a:	f042 0201 	orr.w	r2, r2, #1
   12f3e:	f007 fae1 	bl	1a504 <log_1>
		net_buf_unref(buf);
   12f42:	4628      	mov	r0, r5
   12f44:	f003 fde0 	bl	16b08 <net_buf_unref>
		return -EINVAL;
   12f48:	f06f 0015 	mvn.w	r0, #21
   12f4c:	e7ee      	b.n	12f2c <bt_recv+0x34>
   12f4e:	bf00      	nop
   12f50:	200003ec 	.word	0x200003ec
   12f54:	0001d788 	.word	0x0001d788
   12f58:	0001d7b0 	.word	0x0001d7b0
   12f5c:	0001ed5e 	.word	0x0001ed5e

00012f60 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   12f60:	4a08      	ldr	r2, [pc, #32]	; (12f84 <bt_hci_driver_register+0x24>)
{
   12f62:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   12f64:	f8d2 0164 	ldr.w	r0, [r2, #356]	; 0x164
   12f68:	b930      	cbnz	r0, 12f78 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   12f6a:	68d9      	ldr	r1, [r3, #12]
   12f6c:	b139      	cbz	r1, 12f7e <bt_hci_driver_register+0x1e>
   12f6e:	6919      	ldr	r1, [r3, #16]
   12f70:	b129      	cbz	r1, 12f7e <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   12f72:	f8c2 3164 	str.w	r3, [r2, #356]	; 0x164
	return 0;
   12f76:	4770      	bx	lr
		return -EALREADY;
   12f78:	f06f 0077 	mvn.w	r0, #119	; 0x77
   12f7c:	4770      	bx	lr
		return -EINVAL;
   12f7e:	f06f 0015 	mvn.w	r0, #21
}
   12f82:	4770      	bx	lr
   12f84:	200002b8 	.word	0x200002b8

00012f88 <bt_finalize_init>:
{
   12f88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12f8c:	4d2d      	ldr	r5, [pc, #180]	; (13044 <bt_finalize_init+0xbc>)
   12f8e:	4c2e      	ldr	r4, [pc, #184]	; (13048 <bt_finalize_init+0xc0>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   12f90:	4e2e      	ldr	r6, [pc, #184]	; (1304c <bt_finalize_init+0xc4>)
		BT_INFO("Identity[%d]: %s",
   12f92:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 13050 <bt_finalize_init+0xc8>
{
   12f96:	b087      	sub	sp, #28
   12f98:	2102      	movs	r1, #2
   12f9a:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
   12f9e:	f008 f9a9 	bl	1b2f4 <atomic_or>
   12fa2:	4b2c      	ldr	r3, [pc, #176]	; (13054 <bt_finalize_init+0xcc>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   12fa4:	492c      	ldr	r1, [pc, #176]	; (13058 <bt_finalize_init+0xd0>)
   12fa6:	1ae4      	subs	r4, r4, r3
   12fa8:	79eb      	ldrb	r3, [r5, #7]
   12faa:	4628      	mov	r0, r5
   12fac:	2b01      	cmp	r3, #1
   12fae:	bf88      	it	hi
   12fb0:	460e      	movhi	r6, r1
   12fb2:	f7fe fe85 	bl	11cc0 <bt_addr_le_str_real>
   12fb6:	f7fd f86f 	bl	10098 <z_log_strdup>
   12fba:	08e4      	lsrs	r4, r4, #3
   12fbc:	01a4      	lsls	r4, r4, #6
   12fbe:	f044 0803 	orr.w	r8, r4, #3
   12fc2:	4602      	mov	r2, r0
   12fc4:	4631      	mov	r1, r6
   12fc6:	4825      	ldr	r0, [pc, #148]	; (1305c <bt_finalize_init+0xd4>)
   12fc8:	4643      	mov	r3, r8
   12fca:	f007 faaf 	bl	1a52c <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
   12fce:	462f      	mov	r7, r5
   12fd0:	2601      	movs	r6, #1
   12fd2:	79eb      	ldrb	r3, [r5, #7]
   12fd4:	429e      	cmp	r6, r3
   12fd6:	f107 0707 	add.w	r7, r7, #7
   12fda:	db25      	blt.n	13028 <bt_finalize_init+0xa0>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
   12fdc:	f895 6068 	ldrb.w	r6, [r5, #104]	; 0x68
   12fe0:	4630      	mov	r0, r6
   12fe2:	f7fe ff41 	bl	11e68 <ver_str>
   12fe6:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
   12fea:	9304      	str	r3, [sp, #16]
   12fec:	f044 0403 	orr.w	r4, r4, #3
   12ff0:	f8b5 306e 	ldrh.w	r3, [r5, #110]	; 0x6e
   12ff4:	9305      	str	r3, [sp, #20]
   12ff6:	e9cd 0602 	strd	r0, r6, [sp, #8]
   12ffa:	4623      	mov	r3, r4
   12ffc:	a902      	add	r1, sp, #8
   12ffe:	2204      	movs	r2, #4
   13000:	4817      	ldr	r0, [pc, #92]	; (13060 <bt_finalize_init+0xd8>)
   13002:	f007 fac8 	bl	1a596 <log_n>
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
   13006:	f895 6069 	ldrb.w	r6, [r5, #105]	; 0x69
   1300a:	4630      	mov	r0, r6
   1300c:	f7fe ff2c 	bl	11e68 <ver_str>
   13010:	f8b5 306c 	ldrh.w	r3, [r5, #108]	; 0x6c
   13014:	f8ad 4000 	strh.w	r4, [sp]
   13018:	4601      	mov	r1, r0
   1301a:	4632      	mov	r2, r6
   1301c:	4811      	ldr	r0, [pc, #68]	; (13064 <bt_finalize_init+0xdc>)
   1301e:	f007 fa9e 	bl	1a55e <log_3>
}
   13022:	b007      	add	sp, #28
   13024:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		BT_INFO("Identity[%d]: %s",
   13028:	4638      	mov	r0, r7
   1302a:	f7fe fe49 	bl	11cc0 <bt_addr_le_str_real>
   1302e:	f7fd f833 	bl	10098 <z_log_strdup>
   13032:	4631      	mov	r1, r6
   13034:	4602      	mov	r2, r0
   13036:	4643      	mov	r3, r8
   13038:	4648      	mov	r0, r9
   1303a:	f007 fa77 	bl	1a52c <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
   1303e:	3601      	adds	r6, #1
   13040:	e7c7      	b.n	12fd2 <bt_finalize_init+0x4a>
   13042:	bf00      	nop
   13044:	200002b8 	.word	0x200002b8
   13048:	0001d7b0 	.word	0x0001d7b0
   1304c:	0001dffc 	.word	0x0001dffc
   13050:	0001ed85 	.word	0x0001ed85
   13054:	0001d788 	.word	0x0001d788
   13058:	0001ed72 	.word	0x0001ed72
   1305c:	0001ed76 	.word	0x0001ed76
   13060:	0001ed96 	.word	0x0001ed96
   13064:	0001edd4 	.word	0x0001edd4

00013068 <bt_init>:
{
   13068:	b570      	push	{r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   1306a:	4d43      	ldr	r5, [pc, #268]	; (13178 <bt_init+0x110>)
   1306c:	f8d5 3164 	ldr.w	r3, [r5, #356]	; 0x164
   13070:	6899      	ldr	r1, [r3, #8]
   13072:	f011 0101 	ands.w	r1, r1, #1
{
   13076:	b088      	sub	sp, #32
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   13078:	d121      	bne.n	130be <bt_init+0x56>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   1307a:	aa03      	add	r2, sp, #12
   1307c:	f640 4003 	movw	r0, #3075	; 0xc03
   13080:	f7ff faba 	bl	125f8 <bt_hci_cmd_send_sync>
		if (err) {
   13084:	4604      	mov	r4, r0
   13086:	2800      	cmp	r0, #0
   13088:	d173      	bne.n	13172 <bt_init+0x10a>
	uint8_t status = buf->data[0];
   1308a:	9b03      	ldr	r3, [sp, #12]
   1308c:	689b      	ldr	r3, [r3, #8]
	if (status) {
   1308e:	781b      	ldrb	r3, [r3, #0]
   13090:	b993      	cbnz	r3, 130b8 <bt_init+0x50>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   13092:	f3bf 8f5b 	dmb	ish
   13096:	462b      	mov	r3, r5
   13098:	f853 2fcc 	ldr.w	r2, [r3, #204]!
   1309c:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
   130a0:	f002 0205 	and.w	r2, r2, #5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   130a4:	f3bf 8f5b 	dmb	ish
   130a8:	e853 1f00 	ldrex	r1, [r3]
   130ac:	e843 2000 	strex	r0, r2, [r3]
   130b0:	2800      	cmp	r0, #0
   130b2:	d1f9      	bne.n	130a8 <bt_init+0x40>
   130b4:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   130b8:	9803      	ldr	r0, [sp, #12]
   130ba:	f003 fd25 	bl	16b08 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   130be:	aa03      	add	r2, sp, #12
   130c0:	2100      	movs	r1, #0
   130c2:	f241 0003 	movw	r0, #4099	; 0x1003
   130c6:	f7ff fa97 	bl	125f8 <bt_hci_cmd_send_sync>
	if (err) {
   130ca:	4604      	mov	r4, r0
   130cc:	2800      	cmp	r0, #0
   130ce:	d150      	bne.n	13172 <bt_init+0x10a>
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   130d0:	9b03      	ldr	r3, [sp, #12]
   130d2:	482a      	ldr	r0, [pc, #168]	; (1317c <bt_init+0x114>)
   130d4:	6899      	ldr	r1, [r3, #8]
   130d6:	2208      	movs	r2, #8
   130d8:	3101      	adds	r1, #1
   130da:	f008 f86d 	bl	1b1b8 <memcpy>
	net_buf_unref(rsp);
   130de:	9803      	ldr	r0, [sp, #12]
   130e0:	f003 fd12 	bl	16b08 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   130e4:	4621      	mov	r1, r4
   130e6:	aa03      	add	r2, sp, #12
   130e8:	f241 0001 	movw	r0, #4097	; 0x1001
   130ec:	f7ff fa84 	bl	125f8 <bt_hci_cmd_send_sync>
	if (err) {
   130f0:	4604      	mov	r4, r0
   130f2:	2800      	cmp	r0, #0
   130f4:	d13d      	bne.n	13172 <bt_init+0x10a>
	read_local_ver_complete(rsp);
   130f6:	9803      	ldr	r0, [sp, #12]
   130f8:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
   130fa:	785a      	ldrb	r2, [r3, #1]
   130fc:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   13100:	78d9      	ldrb	r1, [r3, #3]
   13102:	789a      	ldrb	r2, [r3, #2]
   13104:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   13108:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   1310c:	791a      	ldrb	r2, [r3, #4]
   1310e:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   13112:	7a19      	ldrb	r1, [r3, #8]
   13114:	79da      	ldrb	r2, [r3, #7]
   13116:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1311a:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   1311e:	795a      	ldrb	r2, [r3, #5]
   13120:	799b      	ldrb	r3, [r3, #6]
   13122:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   13126:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
   1312a:	f003 fced 	bl	16b08 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   1312e:	4621      	mov	r1, r4
   13130:	aa03      	add	r2, sp, #12
   13132:	f241 0002 	movw	r0, #4098	; 0x1002
   13136:	f7ff fa5f 	bl	125f8 <bt_hci_cmd_send_sync>
	if (err) {
   1313a:	4604      	mov	r4, r0
   1313c:	b9c8      	cbnz	r0, 13172 <bt_init+0x10a>
	memcpy(bt_dev.supported_commands, rp->commands,
   1313e:	9b03      	ldr	r3, [sp, #12]
   13140:	480f      	ldr	r0, [pc, #60]	; (13180 <bt_init+0x118>)
   13142:	6899      	ldr	r1, [r3, #8]
   13144:	2240      	movs	r2, #64	; 0x40
   13146:	3101      	adds	r1, #1
   13148:	f008 f836 	bl	1b1b8 <memcpy>
	net_buf_unref(rsp);
   1314c:	9803      	ldr	r0, [sp, #12]
   1314e:	f003 fcdb 	bl	16b08 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   13152:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   13156:	065e      	lsls	r6, r3, #25
   13158:	d41a      	bmi.n	13190 <bt_init+0x128>
   1315a:	4b0a      	ldr	r3, [pc, #40]	; (13184 <bt_init+0x11c>)
   1315c:	490a      	ldr	r1, [pc, #40]	; (13188 <bt_init+0x120>)
		BT_ERR("Non-LE capable controller detected!");
   1315e:	480b      	ldr	r0, [pc, #44]	; (1318c <bt_init+0x124>)
   13160:	1ac9      	subs	r1, r1, r3
   13162:	08c9      	lsrs	r1, r1, #3
   13164:	0189      	lsls	r1, r1, #6
   13166:	f041 0101 	orr.w	r1, r1, #1
   1316a:	f007 f9be 	bl	1a4ea <log_0>
		return -ENODEV;
   1316e:	f06f 0412 	mvn.w	r4, #18
}
   13172:	4620      	mov	r0, r4
   13174:	b008      	add	sp, #32
   13176:	bd70      	pop	{r4, r5, r6, pc}
   13178:	200002b8 	.word	0x200002b8
   1317c:	20000328 	.word	0x20000328
   13180:	20000330 	.word	0x20000330
   13184:	0001d788 	.word	0x0001d788
   13188:	0001d7b0 	.word	0x0001d7b0
   1318c:	0001edfb 	.word	0x0001edfb
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   13190:	4621      	mov	r1, r4
   13192:	aa03      	add	r2, sp, #12
   13194:	f242 0003 	movw	r0, #8195	; 0x2003
   13198:	f7ff fa2e 	bl	125f8 <bt_hci_cmd_send_sync>
	if (err) {
   1319c:	4604      	mov	r4, r0
   1319e:	2800      	cmp	r0, #0
   131a0:	d1e7      	bne.n	13172 <bt_init+0x10a>
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   131a2:	9b03      	ldr	r3, [sp, #12]
   131a4:	48be      	ldr	r0, [pc, #760]	; (134a0 <bt_init+0x438>)
   131a6:	6899      	ldr	r1, [r3, #8]
   131a8:	2208      	movs	r2, #8
   131aa:	3101      	adds	r1, #1
   131ac:	f008 f804 	bl	1b1b8 <memcpy>
	net_buf_unref(rsp);
   131b0:	9803      	ldr	r0, [sp, #12]
   131b2:	f003 fca9 	bl	16b08 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   131b6:	4621      	mov	r1, r4
   131b8:	aa03      	add	r2, sp, #12
   131ba:	f242 0002 	movw	r0, #8194	; 0x2002
   131be:	f7ff fa1b 	bl	125f8 <bt_hci_cmd_send_sync>
		if (err) {
   131c2:	4604      	mov	r4, r0
   131c4:	2800      	cmp	r0, #0
   131c6:	d1d4      	bne.n	13172 <bt_init+0x10a>
		le_read_buffer_size_complete(rsp);
   131c8:	9b03      	ldr	r3, [sp, #12]
   131ca:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   131cc:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   131d0:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
   131d4:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
   131d6:	b121      	cbz	r1, 131e2 <bt_init+0x17a>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   131d8:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
   131da:	48b2      	ldr	r0, [pc, #712]	; (134a4 <bt_init+0x43c>)
   131dc:	4611      	mov	r1, r2
   131de:	f009 fd8e 	bl	1ccfe <z_impl_k_sem_init>
		net_buf_unref(rsp);
   131e2:	9803      	ldr	r0, [sp, #12]
   131e4:	f003 fc90 	bl	16b08 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   131e8:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
   131ec:	f016 0620 	ands.w	r6, r6, #32
   131f0:	f000 80d8 	beq.w	133a4 <bt_init+0x33c>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   131f4:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
   131f8:	071c      	lsls	r4, r3, #28
   131fa:	d512      	bpl.n	13222 <bt_init+0x1ba>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   131fc:	aa03      	add	r2, sp, #12
   131fe:	2100      	movs	r1, #0
   13200:	f242 001c 	movw	r0, #8220	; 0x201c
   13204:	f7ff f9f8 	bl	125f8 <bt_hci_cmd_send_sync>
		if (err) {
   13208:	4604      	mov	r4, r0
   1320a:	2800      	cmp	r0, #0
   1320c:	d1b1      	bne.n	13172 <bt_init+0x10a>
		le_read_supp_states_complete(rsp);
   1320e:	9803      	ldr	r0, [sp, #12]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   13210:	6883      	ldr	r3, [r0, #8]
   13212:	f8d3 2001 	ldr.w	r2, [r3, #1]
   13216:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   1321a:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
   1321e:	f003 fc73 	bl	16b08 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   13222:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   13226:	0698      	lsls	r0, r3, #26
   13228:	d524      	bpl.n	13274 <bt_init+0x20c>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   1322a:	a902      	add	r1, sp, #8
   1322c:	f10d 0006 	add.w	r0, sp, #6
   13230:	f7ff fa5c 	bl	126ec <hci_le_read_max_data_len>
		if (err) {
   13234:	4604      	mov	r4, r0
   13236:	2800      	cmp	r0, #0
   13238:	d19b      	bne.n	13172 <bt_init+0x10a>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   1323a:	2104      	movs	r1, #4
   1323c:	f242 0024 	movw	r0, #8228	; 0x2024
   13240:	f7ff f9a0 	bl	12584 <bt_hci_cmd_create>
		if (!buf) {
   13244:	4606      	mov	r6, r0
   13246:	2800      	cmp	r0, #0
   13248:	f000 80b3 	beq.w	133b2 <bt_init+0x34a>
	return net_buf_simple_add(&buf->b, len);
   1324c:	2104      	movs	r1, #4
   1324e:	3008      	adds	r0, #8
   13250:	f009 fa5c 	bl	1c70c <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   13254:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   13258:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   1325a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1325e:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   13260:	4622      	mov	r2, r4
   13262:	4631      	mov	r1, r6
   13264:	f242 0024 	movw	r0, #8228	; 0x2024
   13268:	f7ff f9c6 	bl	125f8 <bt_hci_cmd_send_sync>
		if (err) {
   1326c:	4604      	mov	r4, r0
   1326e:	2800      	cmp	r0, #0
   13270:	f47f af7f 	bne.w	13172 <bt_init+0x10a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   13274:	2108      	movs	r1, #8
   13276:	f242 0001 	movw	r0, #8193	; 0x2001
   1327a:	f7ff f983 	bl	12584 <bt_hci_cmd_create>
	if (!buf) {
   1327e:	4604      	mov	r4, r0
   13280:	2800      	cmp	r0, #0
   13282:	f000 8096 	beq.w	133b2 <bt_init+0x34a>
   13286:	2108      	movs	r1, #8
   13288:	4408      	add	r0, r1
   1328a:	f009 fa3f 	bl	1c70c <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   1328e:	f895 20d0 	ldrb.w	r2, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   13292:	f012 0f02 	tst.w	r2, #2
   13296:	bf14      	ite	ne
   13298:	232f      	movne	r3, #47	; 0x2f
   1329a:	230f      	moveq	r3, #15
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   1329c:	0691      	lsls	r1, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   1329e:	f895 20d1 	ldrb.w	r2, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   132a2:	bf48      	it	mi
   132a4:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   132a8:	f012 0f09 	tst.w	r2, #9
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   132ac:	bf18      	it	ne
   132ae:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
	dst[0] = val;
   132b2:	2200      	movs	r2, #0
   132b4:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   132b6:	f3c3 2307 	ubfx	r3, r3, #8, #8
   132ba:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   132bc:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   132be:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
   132c0:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   132c2:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   132c4:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   132c6:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   132c8:	4621      	mov	r1, r4
   132ca:	f242 0001 	movw	r0, #8193	; 0x2001
   132ce:	f7ff f993 	bl	125f8 <bt_hci_cmd_send_sync>
	if (err) {
   132d2:	4604      	mov	r4, r0
   132d4:	2800      	cmp	r0, #0
   132d6:	f47f af4c 	bne.w	13172 <bt_init+0x10a>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   132da:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   132de:	069a      	lsls	r2, r3, #26
   132e0:	d41e      	bmi.n	13320 <bt_init+0x2b8>
	if (bt_dev.le.acl_mtu) {
   132e2:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
   132e6:	b9d9      	cbnz	r1, 13320 <bt_init+0x2b8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   132e8:	aa03      	add	r2, sp, #12
   132ea:	f241 0005 	movw	r0, #4101	; 0x1005
   132ee:	f7ff f983 	bl	125f8 <bt_hci_cmd_send_sync>
	if (err) {
   132f2:	4604      	mov	r4, r0
   132f4:	2800      	cmp	r0, #0
   132f6:	f47f af3c 	bne.w	13172 <bt_init+0x10a>
	if (bt_dev.le.acl_mtu) {
   132fa:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
   132fe:	b963      	cbnz	r3, 1331a <bt_init+0x2b2>
   13300:	9b03      	ldr	r3, [sp, #12]
   13302:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   13304:	785a      	ldrb	r2, [r3, #1]
   13306:	7899      	ldrb	r1, [r3, #2]
   13308:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1330c:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   13310:	889a      	ldrh	r2, [r3, #4]
   13312:	4864      	ldr	r0, [pc, #400]	; (134a4 <bt_init+0x43c>)
   13314:	4611      	mov	r1, r2
   13316:	f009 fcf2 	bl	1ccfe <z_impl_k_sem_init>
	net_buf_unref(rsp);
   1331a:	9803      	ldr	r0, [sp, #12]
   1331c:	f003 fbf4 	bl	16b08 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   13320:	2108      	movs	r1, #8
   13322:	f640 4001 	movw	r0, #3073	; 0xc01
   13326:	f7ff f92d 	bl	12584 <bt_hci_cmd_create>
	if (!buf) {
   1332a:	4604      	mov	r4, r0
   1332c:	2800      	cmp	r0, #0
   1332e:	d040      	beq.n	133b2 <bt_init+0x34a>
   13330:	2108      	movs	r1, #8
   13332:	4408      	add	r0, r1
   13334:	f009 f9ea 	bl	1c70c <net_buf_simple_add>
	dst[0] = val;
   13338:	2310      	movs	r3, #16
   1333a:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   1333c:	2388      	movs	r3, #136	; 0x88
   1333e:	7043      	strb	r3, [r0, #1]
   13340:	2302      	movs	r3, #2
	dst[0] = val;
   13342:	2200      	movs	r2, #0
	dst[1] = val >> 8;
   13344:	70c3      	strb	r3, [r0, #3]
   13346:	2320      	movs	r3, #32
	dst[0] = val;
   13348:	7082      	strb	r2, [r0, #2]
   1334a:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   1334c:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   1334e:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   13350:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   13352:	4621      	mov	r1, r4
   13354:	f640 4001 	movw	r0, #3073	; 0xc01
   13358:	f7ff f94e 	bl	125f8 <bt_hci_cmd_send_sync>
	if (err) {
   1335c:	4604      	mov	r4, r0
   1335e:	2800      	cmp	r0, #0
   13360:	f47f af07 	bne.w	13172 <bt_init+0x10a>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   13364:	4601      	mov	r1, r0
   13366:	aa02      	add	r2, sp, #8
   13368:	f64f 4001 	movw	r0, #64513	; 0xfc01
   1336c:	f7ff f944 	bl	125f8 <bt_hci_cmd_send_sync>
   13370:	4c4d      	ldr	r4, [pc, #308]	; (134a8 <bt_init+0x440>)
   13372:	4b4e      	ldr	r3, [pc, #312]	; (134ac <bt_init+0x444>)
   13374:	1ae4      	subs	r4, r4, r3
   13376:	08e4      	lsrs	r4, r4, #3
   13378:	01a4      	lsls	r4, r4, #6
	if (err) {
   1337a:	b378      	cbz	r0, 133dc <bt_init+0x374>
		BT_WARN("Vendor HCI extensions not available");
   1337c:	484c      	ldr	r0, [pc, #304]	; (134b0 <bt_init+0x448>)
   1337e:	f044 0102 	orr.w	r1, r4, #2
			BT_WARN("Failed to read supported vendor features");
   13382:	f007 f8b2 	bl	1a4ea <log_0>
	err = bt_id_init();
   13386:	f000 fb59 	bl	13a3c <bt_id_init>
	if (err) {
   1338a:	4604      	mov	r4, r0
   1338c:	2800      	cmp	r0, #0
   1338e:	f47f aef0 	bne.w	13172 <bt_init+0x10a>
		err = bt_conn_init();
   13392:	f001 fc05 	bl	14ba0 <bt_conn_init>
		if (err) {
   13396:	4604      	mov	r4, r0
   13398:	2800      	cmp	r0, #0
   1339a:	f47f aeea 	bne.w	13172 <bt_init+0x10a>
	bt_finalize_init();
   1339e:	f7ff fdf3 	bl	12f88 <bt_finalize_init>
	return 0;
   133a2:	e6e6      	b.n	13172 <bt_init+0x10a>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   133a4:	2102      	movs	r1, #2
   133a6:	f640 406d 	movw	r0, #3181	; 0xc6d
   133aa:	f7ff f8eb 	bl	12584 <bt_hci_cmd_create>
		if (!buf) {
   133ae:	4604      	mov	r4, r0
   133b0:	b910      	cbnz	r0, 133b8 <bt_init+0x350>
		return -ENOBUFS;
   133b2:	f06f 0468 	mvn.w	r4, #104	; 0x68
   133b6:	e6dc      	b.n	13172 <bt_init+0x10a>
   133b8:	2102      	movs	r1, #2
   133ba:	3008      	adds	r0, #8
   133bc:	f009 f9a6 	bl	1c70c <net_buf_simple_add>
		cp_le->le = 0x01;
   133c0:	2301      	movs	r3, #1
   133c2:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   133c4:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   133c6:	4621      	mov	r1, r4
   133c8:	4632      	mov	r2, r6
   133ca:	f640 406d 	movw	r0, #3181	; 0xc6d
   133ce:	f7ff f913 	bl	125f8 <bt_hci_cmd_send_sync>
		if (err) {
   133d2:	4604      	mov	r4, r0
   133d4:	2800      	cmp	r0, #0
   133d6:	f43f af0d 	beq.w	131f4 <bt_init+0x18c>
   133da:	e6ca      	b.n	13172 <bt_init+0x10a>
	rp.info = (void *)rsp->data;
   133dc:	9b02      	ldr	r3, [sp, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
   133de:	4835      	ldr	r0, [pc, #212]	; (134b4 <bt_init+0x44c>)
	rp.info = (void *)rsp->data;
   133e0:	689e      	ldr	r6, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
   133e2:	f8b6 2001 	ldrh.w	r2, [r6, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
   133e6:	2a03      	cmp	r2, #3
		return plat_str[platform];
   133e8:	bf96      	itet	ls
   133ea:	4933      	ldrls	r1, [pc, #204]	; (134b8 <bt_init+0x450>)
	return "unknown";
   133ec:	4933      	ldrhi	r1, [pc, #204]	; (134bc <bt_init+0x454>)
		return plat_str[platform];
   133ee:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
   133f2:	f044 0303 	orr.w	r3, r4, #3
   133f6:	f007 f899 	bl	1a52c <log_2>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   133fa:	f8b6 1001 	ldrh.w	r1, [r6, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
   133fe:	f8b6 2003 	ldrh.w	r2, [r6, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   13402:	2902      	cmp	r1, #2
	BT_INFO("HW Variant: %s (0x%04x)",
   13404:	f044 0303 	orr.w	r3, r4, #3
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   13408:	d12e      	bne.n	13468 <bt_init+0x400>
	if (variant < ARRAY_SIZE(nordic_str)) {
   1340a:	2a03      	cmp	r2, #3
   1340c:	d82c      	bhi.n	13468 <bt_init+0x400>
		return nordic_str[variant];
   1340e:	492c      	ldr	r1, [pc, #176]	; (134c0 <bt_init+0x458>)
   13410:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
   13414:	482b      	ldr	r0, [pc, #172]	; (134c4 <bt_init+0x45c>)
   13416:	f007 f889 	bl	1a52c <log_2>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
   1341a:	7972      	ldrb	r2, [r6, #5]
   1341c:	482a      	ldr	r0, [pc, #168]	; (134c8 <bt_init+0x460>)
	if (variant < ARRAY_SIZE(var_str)) {
   1341e:	2a03      	cmp	r2, #3
		return var_str[variant];
   13420:	bf96      	itet	ls
   13422:	492a      	ldrls	r1, [pc, #168]	; (134cc <bt_init+0x464>)
	return "unknown";
   13424:	4925      	ldrhi	r1, [pc, #148]	; (134bc <bt_init+0x454>)
		return var_str[variant];
   13426:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
   1342a:	e9cd 1203 	strd	r1, r2, [sp, #12]
   1342e:	79b2      	ldrb	r2, [r6, #6]
   13430:	9205      	str	r2, [sp, #20]
   13432:	f8b6 2007 	ldrh.w	r2, [r6, #7]
   13436:	9206      	str	r2, [sp, #24]
   13438:	f8d6 2009 	ldr.w	r2, [r6, #9]
   1343c:	9207      	str	r2, [sp, #28]
   1343e:	f044 0303 	orr.w	r3, r4, #3
   13442:	2205      	movs	r2, #5
   13444:	a903      	add	r1, sp, #12
   13446:	f007 f8a6 	bl	1a596 <log_n>
	net_buf_unref(rsp);
   1344a:	9802      	ldr	r0, [sp, #8]
   1344c:	f003 fb5c 	bl	16b08 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   13450:	aa02      	add	r2, sp, #8
   13452:	2100      	movs	r1, #0
   13454:	f64f 4002 	movw	r0, #64514	; 0xfc02
   13458:	f7ff f8ce 	bl	125f8 <bt_hci_cmd_send_sync>
	if (err) {
   1345c:	4606      	mov	r6, r0
   1345e:	b128      	cbz	r0, 1346c <bt_init+0x404>
		BT_WARN("Failed to read supported vendor commands");
   13460:	481b      	ldr	r0, [pc, #108]	; (134d0 <bt_init+0x468>)
   13462:	f044 0102 	orr.w	r1, r4, #2
   13466:	e78c      	b.n	13382 <bt_init+0x31a>
		return "unknown";
   13468:	4914      	ldr	r1, [pc, #80]	; (134bc <bt_init+0x454>)
   1346a:	e7d3      	b.n	13414 <bt_init+0x3ac>
	rp.cmds = (void *)rsp->data;
   1346c:	9b02      	ldr	r3, [sp, #8]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   1346e:	4819      	ldr	r0, [pc, #100]	; (134d4 <bt_init+0x46c>)
   13470:	6899      	ldr	r1, [r3, #8]
   13472:	2202      	movs	r2, #2
   13474:	3101      	adds	r1, #1
   13476:	f007 fe9f 	bl	1b1b8 <memcpy>
	net_buf_unref(rsp);
   1347a:	9802      	ldr	r0, [sp, #8]
   1347c:	f003 fb44 	bl	16b08 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   13480:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
   13484:	075b      	lsls	r3, r3, #29
   13486:	f57f af7e 	bpl.w	13386 <bt_init+0x31e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   1348a:	aa02      	add	r2, sp, #8
   1348c:	4631      	mov	r1, r6
   1348e:	f64f 4003 	movw	r0, #64515	; 0xfc03
   13492:	f7ff f8b1 	bl	125f8 <bt_hci_cmd_send_sync>
		if (err) {
   13496:	b308      	cbz	r0, 134dc <bt_init+0x474>
			BT_WARN("Failed to read supported vendor features");
   13498:	480f      	ldr	r0, [pc, #60]	; (134d8 <bt_init+0x470>)
   1349a:	f044 0102 	orr.w	r1, r4, #2
   1349e:	e770      	b.n	13382 <bt_init+0x31a>
   134a0:	20000388 	.word	0x20000388
   134a4:	200003b8 	.word	0x200003b8
   134a8:	0001d7b0 	.word	0x0001d7b0
   134ac:	0001d788 	.word	0x0001d788
   134b0:	0001ee1f 	.word	0x0001ee1f
   134b4:	0001ee43 	.word	0x0001ee43
   134b8:	0001db2c 	.word	0x0001db2c
   134bc:	0001e950 	.word	0x0001e950
   134c0:	0001dafc 	.word	0x0001dafc
   134c4:	0001ee5c 	.word	0x0001ee5c
   134c8:	0001ee74 	.word	0x0001ee74
   134cc:	0001db64 	.word	0x0001db64
   134d0:	0001eea1 	.word	0x0001eea1
   134d4:	20000371 	.word	0x20000371
   134d8:	0001eeca 	.word	0x0001eeca
		rp.feat = (void *)rsp->data;
   134dc:	9b02      	ldr	r3, [sp, #8]
		memcpy(bt_dev.vs_features, rp.feat->features,
   134de:	4805      	ldr	r0, [pc, #20]	; (134f4 <bt_init+0x48c>)
   134e0:	6899      	ldr	r1, [r3, #8]
   134e2:	2201      	movs	r2, #1
   134e4:	4411      	add	r1, r2
   134e6:	f007 fe67 	bl	1b1b8 <memcpy>
		net_buf_unref(rsp);
   134ea:	9802      	ldr	r0, [sp, #8]
   134ec:	f003 fb0c 	bl	16b08 <net_buf_unref>
   134f0:	e749      	b.n	13386 <bt_init+0x31e>
   134f2:	bf00      	nop
   134f4:	20000370 	.word	0x20000370

000134f8 <init_work>:
{
   134f8:	b510      	push	{r4, lr}
	err = bt_init();
   134fa:	f7ff fdb5 	bl	13068 <bt_init>
	if (ready_cb) {
   134fe:	4b03      	ldr	r3, [pc, #12]	; (1350c <init_work+0x14>)
   13500:	681b      	ldr	r3, [r3, #0]
   13502:	b113      	cbz	r3, 1350a <init_work+0x12>
}
   13504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   13508:	4718      	bx	r3
}
   1350a:	bd10      	pop	{r4, pc}
   1350c:	20002414 	.word	0x20002414

00013510 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
   13510:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
	int err;

	if (!bt_dev.drv) {
   13514:	4d35      	ldr	r5, [pc, #212]	; (135ec <bt_enable+0xdc>)
   13516:	f8d5 3164 	ldr.w	r3, [r5, #356]	; 0x164
{
   1351a:	b088      	sub	sp, #32
   1351c:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   1351e:	b97b      	cbnz	r3, 13540 <bt_enable+0x30>
   13520:	4b33      	ldr	r3, [pc, #204]	; (135f0 <bt_enable+0xe0>)
   13522:	4934      	ldr	r1, [pc, #208]	; (135f4 <bt_enable+0xe4>)
		BT_ERR("No HCI driver registered");
   13524:	4834      	ldr	r0, [pc, #208]	; (135f8 <bt_enable+0xe8>)
   13526:	1ac9      	subs	r1, r1, r3
   13528:	08c9      	lsrs	r1, r1, #3
   1352a:	0189      	lsls	r1, r1, #6
   1352c:	f041 0101 	orr.w	r1, r1, #1
   13530:	f006 ffdb 	bl	1a4ea <log_0>
		return -ENODEV;
   13534:	f06f 0412 	mvn.w	r4, #18
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   13538:	4620      	mov	r0, r4
   1353a:	b008      	add	sp, #32
   1353c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   13540:	2101      	movs	r1, #1
   13542:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
   13546:	f007 fed5 	bl	1b2f4 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   1354a:	ea10 0401 	ands.w	r4, r0, r1
   1354e:	d14a      	bne.n	135e6 <bt_enable+0xd6>
	ready_cb = cb;
   13550:	4b2a      	ldr	r3, [pc, #168]	; (135fc <bt_enable+0xec>)
   13552:	f04f 0800 	mov.w	r8, #0
   13556:	601e      	str	r6, [r3, #0]
	k_thread_create(&tx_thread_data, tx_thread_stack,
   13558:	f04f 0900 	mov.w	r9, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1355c:	f06f 0308 	mvn.w	r3, #8
   13560:	e9cd 4302 	strd	r4, r3, [sp, #8]
   13564:	e9cd 8906 	strd	r8, r9, [sp, #24]
   13568:	e9cd 4400 	strd	r4, r4, [sp]
   1356c:	4b24      	ldr	r3, [pc, #144]	; (13600 <bt_enable+0xf0>)
   1356e:	4925      	ldr	r1, [pc, #148]	; (13604 <bt_enable+0xf4>)
   13570:	9404      	str	r4, [sp, #16]
   13572:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   13576:	4824      	ldr	r0, [pc, #144]	; (13608 <bt_enable+0xf8>)
   13578:	f005 f9de 	bl	18938 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1357c:	4923      	ldr	r1, [pc, #140]	; (1360c <bt_enable+0xfc>)
   1357e:	4822      	ldr	r0, [pc, #136]	; (13608 <bt_enable+0xf8>)
   13580:	f009 fada 	bl	1cb38 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   13584:	f06f 0307 	mvn.w	r3, #7
   13588:	e9cd 4302 	strd	r4, r3, [sp, #8]
   1358c:	e9cd 8906 	strd	r8, r9, [sp, #24]
   13590:	e9cd 4400 	strd	r4, r4, [sp]
   13594:	4b1e      	ldr	r3, [pc, #120]	; (13610 <bt_enable+0x100>)
   13596:	491f      	ldr	r1, [pc, #124]	; (13614 <bt_enable+0x104>)
   13598:	9404      	str	r4, [sp, #16]
   1359a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1359e:	481e      	ldr	r0, [pc, #120]	; (13618 <bt_enable+0x108>)
   135a0:	f005 f9ca 	bl	18938 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   135a4:	491d      	ldr	r1, [pc, #116]	; (1361c <bt_enable+0x10c>)
   135a6:	481c      	ldr	r0, [pc, #112]	; (13618 <bt_enable+0x108>)
   135a8:	f009 fac6 	bl	1cb38 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   135ac:	f8d5 3164 	ldr.w	r3, [r5, #356]	; 0x164
   135b0:	68db      	ldr	r3, [r3, #12]
   135b2:	4798      	blx	r3
	if (err) {
   135b4:	4604      	mov	r4, r0
   135b6:	b158      	cbz	r0, 135d0 <bt_enable+0xc0>
   135b8:	4b0d      	ldr	r3, [pc, #52]	; (135f0 <bt_enable+0xe0>)
   135ba:	4a0e      	ldr	r2, [pc, #56]	; (135f4 <bt_enable+0xe4>)
   135bc:	1ad2      	subs	r2, r2, r3
   135be:	08d2      	lsrs	r2, r2, #3
		BT_ERR("HCI driver open failed (%d)", err);
   135c0:	0192      	lsls	r2, r2, #6
   135c2:	4601      	mov	r1, r0
   135c4:	f042 0201 	orr.w	r2, r2, #1
   135c8:	4815      	ldr	r0, [pc, #84]	; (13620 <bt_enable+0x110>)
   135ca:	f006 ff9b 	bl	1a504 <log_1>
		return err;
   135ce:	e7b3      	b.n	13538 <bt_enable+0x28>
	if (!cb) {
   135d0:	b926      	cbnz	r6, 135dc <bt_enable+0xcc>
}
   135d2:	b008      	add	sp, #32
   135d4:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
		return bt_init();
   135d8:	f7ff bd46 	b.w	13068 <bt_init>
	k_work_submit(&bt_dev.init);
   135dc:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   135e0:	f005 fca2 	bl	18f28 <k_work_submit>
	return 0;
   135e4:	e7a8      	b.n	13538 <bt_enable+0x28>
		return -EALREADY;
   135e6:	f06f 0477 	mvn.w	r4, #119	; 0x77
   135ea:	e7a5      	b.n	13538 <bt_enable+0x28>
   135ec:	200002b8 	.word	0x200002b8
   135f0:	0001d788 	.word	0x0001d788
   135f4:	0001d7b0 	.word	0x0001d7b0
   135f8:	0001eef3 	.word	0x0001eef3
   135fc:	20002414 	.word	0x20002414
   13600:	00012ccd 	.word	0x00012ccd
   13604:	20003b60 	.word	0x20003b60
   13608:	20001458 	.word	0x20001458
   1360c:	0001ef0c 	.word	0x0001ef0c
   13610:	00012171 	.word	0x00012171
   13614:	20003740 	.word	0x20003740
   13618:	200013d8 	.word	0x200013d8
   1361c:	0001ef12 	.word	0x0001ef12
   13620:	0001ef18 	.word	0x0001ef18

00013624 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   13624:	4800      	ldr	r0, [pc, #0]	; (13628 <bt_get_name+0x4>)
   13626:	4770      	bx	lr
   13628:	0001e134 	.word	0x0001e134

0001362c <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   1362c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   1362e:	4f0b      	ldr	r7, [pc, #44]	; (1365c <id_find+0x30>)
{
   13630:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   13632:	2500      	movs	r5, #0
   13634:	79fb      	ldrb	r3, [r7, #7]
   13636:	b2ec      	uxtb	r4, r5
   13638:	42a3      	cmp	r3, r4
   1363a:	d802      	bhi.n	13642 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   1363c:	f06f 0401 	mvn.w	r4, #1
   13640:	e009      	b.n	13656 <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   13642:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
   13646:	2207      	movs	r2, #7
   13648:	4439      	add	r1, r7
   1364a:	4630      	mov	r0, r6
   1364c:	f007 fda3 	bl	1b196 <memcmp>
   13650:	3501      	adds	r5, #1
   13652:	2800      	cmp	r0, #0
   13654:	d1ee      	bne.n	13634 <id_find+0x8>
}
   13656:	4620      	mov	r0, r4
   13658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1365a:	bf00      	nop
   1365c:	200002b8 	.word	0x200002b8

00013660 <set_random_address>:
{
   13660:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   13662:	4914      	ldr	r1, [pc, #80]	; (136b4 <set_random_address+0x54>)
   13664:	2206      	movs	r2, #6
   13666:	4605      	mov	r5, r0
   13668:	f007 fd95 	bl	1b196 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   1366c:	4604      	mov	r4, r0
   1366e:	b1e0      	cbz	r0, 136aa <set_random_address+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   13670:	2106      	movs	r1, #6
   13672:	f242 0005 	movw	r0, #8197	; 0x2005
   13676:	f7fe ff85 	bl	12584 <bt_hci_cmd_create>
	if (!buf) {
   1367a:	4604      	mov	r4, r0
   1367c:	b1b8      	cbz	r0, 136ae <set_random_address+0x4e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1367e:	2206      	movs	r2, #6
   13680:	4629      	mov	r1, r5
   13682:	3008      	adds	r0, #8
   13684:	f009 f848 	bl	1c718 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   13688:	4621      	mov	r1, r4
   1368a:	2200      	movs	r2, #0
   1368c:	f242 0005 	movw	r0, #8197	; 0x2005
   13690:	f7fe ffb2 	bl	125f8 <bt_hci_cmd_send_sync>
	if (err) {
   13694:	4604      	mov	r4, r0
   13696:	b940      	cbnz	r0, 136aa <set_random_address+0x4a>
	memcpy(dst, src, sizeof(*dst));
   13698:	2206      	movs	r2, #6
   1369a:	4806      	ldr	r0, [pc, #24]	; (136b4 <set_random_address+0x54>)
   1369c:	4629      	mov	r1, r5
   1369e:	f007 fd8b 	bl	1b1b8 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   136a2:	4b05      	ldr	r3, [pc, #20]	; (136b8 <set_random_address+0x58>)
   136a4:	2201      	movs	r2, #1
   136a6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
   136aa:	4620      	mov	r0, r4
   136ac:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   136ae:	f06f 0468 	mvn.w	r4, #104	; 0x68
   136b2:	e7fa      	b.n	136aa <set_random_address+0x4a>
   136b4:	20000319 	.word	0x20000319
   136b8:	200002b8 	.word	0x200002b8

000136bc <id_create.constprop.0>:

static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   136bc:	b530      	push	{r4, r5, lr}
		do {
			bt_addr_le_create_static(&new_addr);
			/* Make sure we didn't generate a duplicate */
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   136be:	4c15      	ldr	r4, [pc, #84]	; (13714 <id_create.constprop.0+0x58>)
   136c0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   136c4:	b085      	sub	sp, #20
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   136c6:	4404      	add	r4, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   136c8:	460d      	mov	r5, r1
   136ca:	b181      	cbz	r1, 136ee <id_create.constprop.0+0x32>
   136cc:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   136ce:	2207      	movs	r2, #7
   136d0:	4669      	mov	r1, sp
   136d2:	4628      	mov	r0, r5
   136d4:	9300      	str	r3, [sp, #0]
   136d6:	f8cd 3003 	str.w	r3, [sp, #3]
   136da:	f007 fd5c 	bl	1b196 <memcmp>
   136de:	b130      	cbz	r0, 136ee <id_create.constprop.0+0x32>
	memcpy(dst, src, sizeof(*dst));
   136e0:	2207      	movs	r2, #7
   136e2:	4629      	mov	r1, r5
   136e4:	4620      	mov	r0, r4
   136e6:	f007 fd67 	bl	1b1b8 <memcpy>
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}
}
   136ea:	b005      	add	sp, #20
   136ec:	bd30      	pop	{r4, r5, pc}
			bt_addr_le_create_static(&new_addr);
   136ee:	a802      	add	r0, sp, #8
   136f0:	f007 fde0 	bl	1b2b4 <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
   136f4:	a802      	add	r0, sp, #8
   136f6:	f7ff ff99 	bl	1362c <id_find>
   136fa:	2800      	cmp	r0, #0
   136fc:	daf7      	bge.n	136ee <id_create.constprop.0+0x32>
   136fe:	2207      	movs	r2, #7
   13700:	a902      	add	r1, sp, #8
   13702:	4620      	mov	r0, r4
   13704:	f007 fd58 	bl	1b1b8 <memcpy>
		if (addr) {
   13708:	2d00      	cmp	r5, #0
   1370a:	d0ee      	beq.n	136ea <id_create.constprop.0+0x2e>
   1370c:	2207      	movs	r2, #7
   1370e:	4621      	mov	r1, r4
   13710:	4628      	mov	r0, r5
   13712:	e7e8      	b.n	136e6 <id_create.constprop.0+0x2a>
   13714:	200002b8 	.word	0x200002b8

00013718 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   13718:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1371a:	460c      	mov	r4, r1
	int new_id;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   1371c:	4605      	mov	r5, r0
   1371e:	b918      	cbnz	r0, 13728 <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   13720:	b34c      	cbz	r4, 13776 <bt_id_create+0x5e>
		return -EINVAL;
   13722:	f06f 0415 	mvn.w	r4, #21
   13726:	e023      	b.n	13770 <bt_id_create+0x58>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   13728:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   1372a:	2207      	movs	r2, #7
   1372c:	4669      	mov	r1, sp
   1372e:	9300      	str	r3, [sp, #0]
   13730:	f8cd 3003 	str.w	r3, [sp, #3]
   13734:	f007 fd2f 	bl	1b196 <memcmp>
   13738:	2800      	cmp	r0, #0
   1373a:	d0f1      	beq.n	13720 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   1373c:	782b      	ldrb	r3, [r5, #0]
   1373e:	2b01      	cmp	r3, #1
   13740:	d104      	bne.n	1374c <bt_id_create+0x34>
   13742:	79ab      	ldrb	r3, [r5, #6]
   13744:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   13748:	2bc0      	cmp	r3, #192	; 0xc0
   1374a:	d00a      	beq.n	13762 <bt_id_create+0x4a>
   1374c:	4b1b      	ldr	r3, [pc, #108]	; (137bc <bt_id_create+0xa4>)
   1374e:	491c      	ldr	r1, [pc, #112]	; (137c0 <bt_id_create+0xa8>)
			BT_ERR("Only static random identity address supported");
   13750:	481c      	ldr	r0, [pc, #112]	; (137c4 <bt_id_create+0xac>)
   13752:	1ac9      	subs	r1, r1, r3
   13754:	08c9      	lsrs	r1, r1, #3
   13756:	0189      	lsls	r1, r1, #6
   13758:	f041 0101 	orr.w	r1, r1, #1
   1375c:	f006 fec5 	bl	1a4ea <log_0>
			return -EINVAL;
   13760:	e7df      	b.n	13722 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   13762:	4628      	mov	r0, r5
   13764:	f7ff ff62 	bl	1362c <id_find>
   13768:	2800      	cmp	r0, #0
   1376a:	dbd9      	blt.n	13720 <bt_id_create+0x8>
			return -EALREADY;
   1376c:	f06f 0477 	mvn.w	r4, #119	; 0x77

	new_id = bt_dev.id_count++;
	id_create(new_id, addr, irk);

	return new_id;
}
   13770:	4620      	mov	r0, r4
   13772:	b002      	add	sp, #8
   13774:	bd70      	pop	{r4, r5, r6, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   13776:	4e14      	ldr	r6, [pc, #80]	; (137c8 <bt_id_create+0xb0>)
   13778:	79f3      	ldrb	r3, [r6, #7]
   1377a:	2b01      	cmp	r3, #1
   1377c:	d01b      	beq.n	137b6 <bt_id_create+0x9e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1377e:	f3bf 8f5b 	dmb	ish
   13782:	f8d6 30cc 	ldr.w	r3, [r6, #204]	; 0xcc
   13786:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   1378a:	07db      	lsls	r3, r3, #31
   1378c:	d40b      	bmi.n	137a6 <bt_id_create+0x8e>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   1378e:	2d00      	cmp	r5, #0
   13790:	d0c7      	beq.n	13722 <bt_id_create+0xa>
   13792:	2207      	movs	r2, #7
   13794:	4669      	mov	r1, sp
   13796:	4628      	mov	r0, r5
   13798:	9400      	str	r4, [sp, #0]
   1379a:	f8cd 4003 	str.w	r4, [sp, #3]
   1379e:	f007 fcfa 	bl	1b196 <memcmp>
   137a2:	2800      	cmp	r0, #0
   137a4:	d0bd      	beq.n	13722 <bt_id_create+0xa>
	new_id = bt_dev.id_count++;
   137a6:	79f4      	ldrb	r4, [r6, #7]
	id_create(new_id, addr, irk);
   137a8:	4629      	mov	r1, r5
	new_id = bt_dev.id_count++;
   137aa:	1c63      	adds	r3, r4, #1
	id_create(new_id, addr, irk);
   137ac:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
   137ae:	71f3      	strb	r3, [r6, #7]
	id_create(new_id, addr, irk);
   137b0:	f7ff ff84 	bl	136bc <id_create.constprop.0>
	return new_id;
   137b4:	e7dc      	b.n	13770 <bt_id_create+0x58>
		return -ENOMEM;
   137b6:	f06f 040b 	mvn.w	r4, #11
   137ba:	e7d9      	b.n	13770 <bt_id_create+0x58>
   137bc:	0001d788 	.word	0x0001d788
   137c0:	0001d7b8 	.word	0x0001d7b8
   137c4:	0001ef34 	.word	0x0001ef34
   137c8:	200002b8 	.word	0x200002b8

000137cc <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   137cc:	b570      	push	{r4, r5, r6, lr}
   137ce:	b086      	sub	sp, #24
   137d0:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   137d2:	aa01      	add	r2, sp, #4
   137d4:	2100      	movs	r1, #0
   137d6:	f241 0009 	movw	r0, #4105	; 0x1009
   137da:	f7fe ff0d 	bl	125f8 <bt_hci_cmd_send_sync>
	if (err) {
   137de:	4604      	mov	r4, r0
   137e0:	b160      	cbz	r0, 137fc <bt_id_read_public_addr+0x30>
   137e2:	491e      	ldr	r1, [pc, #120]	; (1385c <bt_id_read_public_addr+0x90>)
   137e4:	4b1e      	ldr	r3, [pc, #120]	; (13860 <bt_id_read_public_addr+0x94>)
		BT_WARN("Failed to read public address");
   137e6:	481f      	ldr	r0, [pc, #124]	; (13864 <bt_id_read_public_addr+0x98>)
   137e8:	1ac9      	subs	r1, r1, r3
   137ea:	08c9      	lsrs	r1, r1, #3
   137ec:	0189      	lsls	r1, r1, #6
   137ee:	f041 0102 	orr.w	r1, r1, #2
   137f2:	f006 fe7a 	bl	1a4ea <log_0>

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
		return 0U;
   137f6:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   137f8:	b006      	add	sp, #24
   137fa:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   137fc:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   137fe:	9002      	str	r0, [sp, #8]
   13800:	689d      	ldr	r5, [r3, #8]
   13802:	f8ad 000c 	strh.w	r0, [sp, #12]
   13806:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
   13808:	2206      	movs	r2, #6
   1380a:	a902      	add	r1, sp, #8
   1380c:	4628      	mov	r0, r5
   1380e:	f007 fcc2 	bl	1b196 <memcmp>
   13812:	b918      	cbnz	r0, 1381c <bt_id_read_public_addr+0x50>
		net_buf_unref(rsp);
   13814:	9801      	ldr	r0, [sp, #4]
   13816:	f003 f977 	bl	16b08 <net_buf_unref>
   1381a:	e7ec      	b.n	137f6 <bt_id_read_public_addr+0x2a>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   1381c:	23ff      	movs	r3, #255	; 0xff
   1381e:	2206      	movs	r2, #6
   13820:	a904      	add	r1, sp, #16
   13822:	4628      	mov	r0, r5
   13824:	f88d 3010 	strb.w	r3, [sp, #16]
   13828:	f88d 3011 	strb.w	r3, [sp, #17]
   1382c:	f88d 3012 	strb.w	r3, [sp, #18]
   13830:	f88d 3013 	strb.w	r3, [sp, #19]
   13834:	f88d 3014 	strb.w	r3, [sp, #20]
   13838:	f88d 3015 	strb.w	r3, [sp, #21]
   1383c:	f007 fcab 	bl	1b196 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   13840:	2800      	cmp	r0, #0
   13842:	d0e7      	beq.n	13814 <bt_id_read_public_addr+0x48>
	memcpy(dst, src, sizeof(*dst));
   13844:	2206      	movs	r2, #6
   13846:	4629      	mov	r1, r5
   13848:	1c70      	adds	r0, r6, #1
   1384a:	f007 fcb5 	bl	1b1b8 <memcpy>
	net_buf_unref(rsp);
   1384e:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   13850:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
   13852:	f003 f959 	bl	16b08 <net_buf_unref>
	return 1U;
   13856:	2001      	movs	r0, #1
   13858:	e7ce      	b.n	137f8 <bt_id_read_public_addr+0x2c>
   1385a:	bf00      	nop
   1385c:	0001d7b8 	.word	0x0001d7b8
   13860:	0001d788 	.word	0x0001d788
   13864:	0001ef62 	.word	0x0001ef62

00013868 <bt_setup_public_id_addr>:

void bt_setup_public_id_addr(void)
{
   13868:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   1386a:	4668      	mov	r0, sp
   1386c:	f7ff ffae 	bl	137cc <bt_id_read_public_addr>
   13870:	4b04      	ldr	r3, [pc, #16]	; (13884 <bt_setup_public_id_addr+0x1c>)
   13872:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   13874:	b118      	cbz	r0, 1387e <bt_setup_public_id_addr+0x16>
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	id_create(BT_ID_DEFAULT, &addr, irk);
   13876:	4669      	mov	r1, sp
   13878:	2000      	movs	r0, #0
   1387a:	f7ff ff1f 	bl	136bc <id_create.constprop.0>
}
   1387e:	b003      	add	sp, #12
   13880:	f85d fb04 	ldr.w	pc, [sp], #4
   13884:	200002b8 	.word	0x200002b8

00013888 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   13888:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   1388c:	4b25      	ldr	r3, [pc, #148]	; (13924 <bt_read_static_addr+0x9c>)
   1388e:	f893 40ba 	ldrb.w	r4, [r3, #186]	; 0xba
   13892:	f014 0401 	ands.w	r4, r4, #1
{
   13896:	4607      	mov	r7, r0
   13898:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   1389a:	d10a      	bne.n	138b2 <bt_read_static_addr+0x2a>
   1389c:	4922      	ldr	r1, [pc, #136]	; (13928 <bt_read_static_addr+0xa0>)
   1389e:	4b23      	ldr	r3, [pc, #140]	; (1392c <bt_read_static_addr+0xa4>)
		BT_WARN("Read Static Addresses command not available");
   138a0:	4823      	ldr	r0, [pc, #140]	; (13930 <bt_read_static_addr+0xa8>)
   138a2:	1ac9      	subs	r1, r1, r3
   138a4:	08c9      	lsrs	r1, r1, #3
   138a6:	0189      	lsls	r1, r1, #6
   138a8:	f041 0102 	orr.w	r1, r1, #2
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
	}

	net_buf_unref(rsp);
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
   138ac:	f006 fe1d 	bl	1a4ea <log_0>
   138b0:	e012      	b.n	138d8 <bt_read_static_addr+0x50>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   138b2:	aa01      	add	r2, sp, #4
   138b4:	2100      	movs	r1, #0
   138b6:	f64f 4009 	movw	r0, #64521	; 0xfc09
   138ba:	f7fe fe9d 	bl	125f8 <bt_hci_cmd_send_sync>
	if (err) {
   138be:	4605      	mov	r5, r0
   138c0:	b170      	cbz	r0, 138e0 <bt_read_static_addr+0x58>
   138c2:	4b1a      	ldr	r3, [pc, #104]	; (1392c <bt_read_static_addr+0xa4>)
   138c4:	4918      	ldr	r1, [pc, #96]	; (13928 <bt_read_static_addr+0xa0>)
		BT_WARN("Failed to read static addresses");
   138c6:	481b      	ldr	r0, [pc, #108]	; (13934 <bt_read_static_addr+0xac>)
   138c8:	1ac9      	subs	r1, r1, r3
   138ca:	08c9      	lsrs	r1, r1, #3
   138cc:	0189      	lsls	r1, r1, #6
   138ce:	f041 0102 	orr.w	r1, r1, #2
   138d2:	f006 fe0a 	bl	1a4ea <log_0>
		return 0;
   138d6:	2400      	movs	r4, #0
	}

	return cnt;
}
   138d8:	4620      	mov	r0, r4
   138da:	b002      	add	sp, #8
   138dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rp = (void *)rsp->data;
   138e0:	9b01      	ldr	r3, [sp, #4]
   138e2:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   138e4:	785c      	ldrb	r4, [r3, #1]
   138e6:	42b4      	cmp	r4, r6
   138e8:	bf28      	it	cs
   138ea:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   138ec:	f04f 0816 	mov.w	r8, #22
   138f0:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
   138f2:	42a5      	cmp	r5, r4
   138f4:	db0d      	blt.n	13912 <bt_read_static_addr+0x8a>
	net_buf_unref(rsp);
   138f6:	9801      	ldr	r0, [sp, #4]
   138f8:	f003 f906 	bl	16b08 <net_buf_unref>
	if (!cnt) {
   138fc:	2c00      	cmp	r4, #0
   138fe:	d1eb      	bne.n	138d8 <bt_read_static_addr+0x50>
   13900:	4909      	ldr	r1, [pc, #36]	; (13928 <bt_read_static_addr+0xa0>)
   13902:	4b0a      	ldr	r3, [pc, #40]	; (1392c <bt_read_static_addr+0xa4>)
		BT_WARN("No static addresses stored in controller");
   13904:	480c      	ldr	r0, [pc, #48]	; (13938 <bt_read_static_addr+0xb0>)
   13906:	1ac9      	subs	r1, r1, r3
   13908:	08c9      	lsrs	r1, r1, #3
   1390a:	0189      	lsls	r1, r1, #6
   1390c:	f041 0102 	orr.w	r1, r1, #2
   13910:	e7cc      	b.n	138ac <bt_read_static_addr+0x24>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   13912:	fb08 7005 	mla	r0, r8, r5, r7
   13916:	2216      	movs	r2, #22
   13918:	4631      	mov	r1, r6
   1391a:	f007 fc4d 	bl	1b1b8 <memcpy>
	for (i = 0; i < cnt; i++) {
   1391e:	3501      	adds	r5, #1
   13920:	e7e7      	b.n	138f2 <bt_read_static_addr+0x6a>
   13922:	bf00      	nop
   13924:	200002b8 	.word	0x200002b8
   13928:	0001d7b8 	.word	0x0001d7b8
   1392c:	0001d788 	.word	0x0001d788
   13930:	0001ef80 	.word	0x0001ef80
   13934:	0001efac 	.word	0x0001efac
   13938:	0001efcc 	.word	0x0001efcc

0001393c <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   1393c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   1393e:	4d15      	ldr	r5, [pc, #84]	; (13994 <bt_setup_random_id_addr+0x58>)
   13940:	79ec      	ldrb	r4, [r5, #7]
{
   13942:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
   13944:	b9f4      	cbnz	r4, 13984 <bt_setup_random_id_addr+0x48>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   13946:	2101      	movs	r1, #1
   13948:	a802      	add	r0, sp, #8
   1394a:	f7ff ff9d 	bl	13888 <bt_read_static_addr>
   1394e:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
   13950:	b1c0      	cbz	r0, 13984 <bt_setup_random_id_addr+0x48>
					atomic_set_bit(bt_dev.flags,
						       BT_DEV_STORE_ID);
				}
#endif /* CONFIG_BT_PRIVACY */

				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   13952:	2716      	movs	r7, #22
   13954:	b2e6      	uxtb	r6, r4
   13956:	ab02      	add	r3, sp, #8
   13958:	2206      	movs	r2, #6
   1395a:	fb07 3106 	mla	r1, r7, r6, r3
   1395e:	f10d 0001 	add.w	r0, sp, #1
   13962:	f007 fc29 	bl	1b1b8 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   13966:	2301      	movs	r3, #1

				id_create(i, &addr, irk);
   13968:	4669      	mov	r1, sp
   1396a:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
   1396c:	f88d 3000 	strb.w	r3, [sp]
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   13970:	3401      	adds	r4, #1
				id_create(i, &addr, irk);
   13972:	f7ff fea3 	bl	136bc <id_create.constprop.0>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   13976:	79ea      	ldrb	r2, [r5, #7]
   13978:	b2e3      	uxtb	r3, r4
   1397a:	429a      	cmp	r2, r3
   1397c:	d8ea      	bhi.n	13954 <bt_setup_random_id_addr+0x18>
	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
}
   1397e:	2000      	movs	r0, #0
   13980:	b009      	add	sp, #36	; 0x24
   13982:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_id_create(NULL, NULL);
   13984:	2100      	movs	r1, #0
   13986:	4608      	mov	r0, r1
}
   13988:	b009      	add	sp, #36	; 0x24
   1398a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
   1398e:	f7ff bec3 	b.w	13718 <bt_id_create>
   13992:	bf00      	nop
   13994:	200002b8 	.word	0x200002b8

00013998 <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   13998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int err = 0;

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   1399c:	f011 0401 	ands.w	r4, r1, #1
	id_addr = &bt_dev.id_addr[adv->id];
   139a0:	7805      	ldrb	r5, [r0, #0]
{
   139a2:	460e      	mov	r6, r1
   139a4:	4690      	mov	r8, r2
   139a6:	461f      	mov	r7, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   139a8:	d026      	beq.n	139f8 <bt_id_set_adv_own_addr+0x60>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   139aa:	4c23      	ldr	r4, [pc, #140]	; (13a38 <bt_id_set_adv_own_addr+0xa0>)
   139ac:	b12a      	cbz	r2, 139ba <bt_id_set_adv_own_addr+0x22>
   139ae:	0688      	lsls	r0, r1, #26
   139b0:	d503      	bpl.n	139ba <bt_id_set_adv_own_addr+0x22>
   139b2:	f894 30d0 	ldrb.w	r3, [r4, #208]	; 0xd0
   139b6:	0659      	lsls	r1, r3, #25
   139b8:	d53a      	bpl.n	13a30 <bt_id_set_adv_own_addr+0x98>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   139ba:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
   139be:	ea4f 09c5 	mov.w	r9, r5, lsl #3
   139c2:	5ce3      	ldrb	r3, [r4, r3]
   139c4:	2b01      	cmp	r3, #1
   139c6:	d008      	beq.n	139da <bt_id_set_adv_own_addr+0x42>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   139c8:	eba9 0505 	sub.w	r5, r9, r5
   139cc:	5d63      	ldrb	r3, [r4, r5]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   139ce:	f1b8 0f00 	cmp.w	r8, #0
   139d2:	d10c      	bne.n	139ee <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   139d4:	703b      	strb	r3, [r7, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   139d6:	2000      	movs	r0, #0
   139d8:	e007      	b.n	139ea <bt_id_set_adv_own_addr+0x52>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   139da:	2007      	movs	r0, #7
   139dc:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
   139e0:	4420      	add	r0, r4
   139e2:	f7ff fe3d 	bl	13660 <set_random_address>
				if (err) {
   139e6:	2800      	cmp	r0, #0
   139e8:	d0ee      	beq.n	139c8 <bt_id_set_adv_own_addr+0x30>
}
   139ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   139ee:	06b2      	lsls	r2, r6, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   139f0:	bf48      	it	mi
   139f2:	f043 0302 	orrmi.w	r3, r3, #2
   139f6:	e7ed      	b.n	139d4 <bt_id_set_adv_own_addr+0x3c>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   139f8:	074b      	lsls	r3, r1, #29
   139fa:	d515      	bpl.n	13a28 <bt_id_set_adv_own_addr+0x90>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   139fc:	f8df 8038 	ldr.w	r8, [pc, #56]	; 13a38 <bt_id_set_adv_own_addr+0xa0>
   13a00:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
   13a04:	00ee      	lsls	r6, r5, #3
   13a06:	f818 3003 	ldrb.w	r3, [r8, r3]
   13a0a:	2b01      	cmp	r3, #1
   13a0c:	d10a      	bne.n	13a24 <bt_id_set_adv_own_addr+0x8c>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   13a0e:	2007      	movs	r0, #7
   13a10:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
   13a14:	4440      	add	r0, r8
   13a16:	f7ff fe23 	bl	13660 <set_random_address>
			*own_addr_type = id_addr->type;
   13a1a:	1b75      	subs	r5, r6, r5
   13a1c:	f818 3005 	ldrb.w	r3, [r8, r5]
			*own_addr_type = BT_ADDR_LE_RANDOM;
   13a20:	703b      	strb	r3, [r7, #0]
		if (err) {
   13a22:	e7e2      	b.n	139ea <bt_id_set_adv_own_addr+0x52>
	int err = 0;
   13a24:	4620      	mov	r0, r4
   13a26:	e7f8      	b.n	13a1a <bt_id_set_adv_own_addr+0x82>
			err = bt_id_set_adv_private_addr(adv);
   13a28:	f007 fd36 	bl	1b498 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   13a2c:	2301      	movs	r3, #1
   13a2e:	e7f7      	b.n	13a20 <bt_id_set_adv_own_addr+0x88>
			return -ENOTSUP;
   13a30:	f06f 0085 	mvn.w	r0, #133	; 0x85
   13a34:	e7d9      	b.n	139ea <bt_id_set_adv_own_addr+0x52>
   13a36:	bf00      	nop
   13a38:	200002b8 	.word	0x200002b8

00013a3c <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   13a3c:	b538      	push	{r3, r4, r5, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   13a3e:	4d14      	ldr	r5, [pc, #80]	; (13a90 <bt_id_init+0x54>)
   13a40:	79eb      	ldrb	r3, [r5, #7]
   13a42:	b113      	cbz	r3, 13a4a <bt_id_init+0xe>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   13a44:	2400      	movs	r4, #0
}
   13a46:	4620      	mov	r0, r4
   13a48:	bd38      	pop	{r3, r4, r5, pc}
		bt_setup_public_id_addr();
   13a4a:	f7ff ff0d 	bl	13868 <bt_setup_public_id_addr>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   13a4e:	79eb      	ldrb	r3, [r5, #7]
   13a50:	2b00      	cmp	r3, #0
   13a52:	d1f7      	bne.n	13a44 <bt_id_init+0x8>
		err = bt_setup_random_id_addr();
   13a54:	f7ff ff72 	bl	1393c <bt_setup_random_id_addr>
		if (err) {
   13a58:	4604      	mov	r4, r0
   13a5a:	b150      	cbz	r0, 13a72 <bt_id_init+0x36>
   13a5c:	490d      	ldr	r1, [pc, #52]	; (13a94 <bt_id_init+0x58>)
   13a5e:	4b0e      	ldr	r3, [pc, #56]	; (13a98 <bt_id_init+0x5c>)
			BT_ERR("Unable to set identity address");
   13a60:	480e      	ldr	r0, [pc, #56]	; (13a9c <bt_id_init+0x60>)
   13a62:	1ac9      	subs	r1, r1, r3
   13a64:	08c9      	lsrs	r1, r1, #3
   13a66:	0189      	lsls	r1, r1, #6
   13a68:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Unable to set random address");
   13a6c:	f006 fd3d 	bl	1a4ea <log_0>
			return err;
   13a70:	e7e9      	b.n	13a46 <bt_id_init+0xa>
		err = set_random_address(&bt_dev.id_addr[0].a);
   13a72:	1c68      	adds	r0, r5, #1
   13a74:	f7ff fdf4 	bl	13660 <set_random_address>
		if (err) {
   13a78:	4604      	mov	r4, r0
   13a7a:	2800      	cmp	r0, #0
   13a7c:	d0e3      	beq.n	13a46 <bt_id_init+0xa>
   13a7e:	4905      	ldr	r1, [pc, #20]	; (13a94 <bt_id_init+0x58>)
   13a80:	4b05      	ldr	r3, [pc, #20]	; (13a98 <bt_id_init+0x5c>)
			BT_ERR("Unable to set random address");
   13a82:	4807      	ldr	r0, [pc, #28]	; (13aa0 <bt_id_init+0x64>)
   13a84:	1ac9      	subs	r1, r1, r3
   13a86:	08c9      	lsrs	r1, r1, #3
   13a88:	0189      	lsls	r1, r1, #6
   13a8a:	f041 0101 	orr.w	r1, r1, #1
   13a8e:	e7ed      	b.n	13a6c <bt_id_init+0x30>
   13a90:	200002b8 	.word	0x200002b8
   13a94:	0001d7b8 	.word	0x0001d7b8
   13a98:	0001d788 	.word	0x0001d788
   13a9c:	0001eff5 	.word	0x0001eff5
   13aa0:	0001f014 	.word	0x0001f014

00013aa4 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   13aa4:	6843      	ldr	r3, [r0, #4]
{
   13aa6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   13aa8:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   13aaa:	0558      	lsls	r0, r3, #21
   13aac:	d502      	bpl.n	13ab4 <valid_adv_param+0x10>
		return false;
   13aae:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
   13ab0:	b003      	add	sp, #12
   13ab2:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   13ab4:	6922      	ldr	r2, [r4, #16]
   13ab6:	b10a      	cbz	r2, 13abc <valid_adv_param+0x18>
   13ab8:	07d9      	lsls	r1, r3, #31
   13aba:	d5f8      	bpl.n	13aae <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   13abc:	4d1a      	ldr	r5, [pc, #104]	; (13b28 <valid_adv_param+0x84>)
   13abe:	7820      	ldrb	r0, [r4, #0]
   13ac0:	79eb      	ldrb	r3, [r5, #7]
   13ac2:	4283      	cmp	r3, r0
   13ac4:	d9f3      	bls.n	13aae <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   13ac6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   13aca:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   13acc:	2207      	movs	r2, #7
   13ace:	4669      	mov	r1, sp
   13ad0:	4428      	add	r0, r5
   13ad2:	9300      	str	r3, [sp, #0]
   13ad4:	f8cd 3003 	str.w	r3, [sp, #3]
   13ad8:	f007 fb5d 	bl	1b196 <memcmp>
	if (param->id >= bt_dev.id_count ||
   13adc:	2800      	cmp	r0, #0
   13ade:	d0e6      	beq.n	13aae <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   13ae0:	6860      	ldr	r0, [r4, #4]
   13ae2:	07c2      	lsls	r2, r0, #31
   13ae4:	d406      	bmi.n	13af4 <valid_adv_param+0x50>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   13ae6:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
   13aea:	2b08      	cmp	r3, #8
   13aec:	d802      	bhi.n	13af4 <valid_adv_param+0x50>
   13aee:	68a3      	ldr	r3, [r4, #8]
   13af0:	2b9f      	cmp	r3, #159	; 0x9f
   13af2:	d9dc      	bls.n	13aae <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   13af4:	f010 0f30 	tst.w	r0, #48	; 0x30
   13af8:	d002      	beq.n	13b00 <valid_adv_param+0x5c>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   13afa:	6923      	ldr	r3, [r4, #16]
   13afc:	2b00      	cmp	r3, #0
   13afe:	d0d6      	beq.n	13aae <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   13b00:	06c3      	lsls	r3, r0, #27
   13b02:	d401      	bmi.n	13b08 <valid_adv_param+0x64>
   13b04:	6923      	ldr	r3, [r4, #16]
   13b06:	b943      	cbnz	r3, 13b1a <valid_adv_param+0x76>
		if (param->interval_min > param->interval_max ||
   13b08:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   13b0c:	429a      	cmp	r2, r3
   13b0e:	d8ce      	bhi.n	13aae <valid_adv_param+0xa>
   13b10:	2a1f      	cmp	r2, #31
   13b12:	d9cc      	bls.n	13aae <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   13b14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   13b18:	d8c9      	bhi.n	13aae <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   13b1a:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   13b1e:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   13b22:	bf18      	it	ne
   13b24:	2001      	movne	r0, #1
   13b26:	e7c3      	b.n	13ab0 <valid_adv_param+0xc>
   13b28:	200002b8 	.word	0x200002b8

00013b2c <hci_set_ad>:
	*data_len = set_data_len;
	return 0;
}

static int hci_set_ad(uint16_t hci_op, const struct bt_ad *ad, size_t ad_len)
{
   13b2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b30:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   13b32:	2120      	movs	r1, #32
{
   13b34:	4682      	mov	sl, r0
   13b36:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   13b38:	f7fe fd24 	bl	12584 <bt_hci_cmd_create>
	if (!buf) {
   13b3c:	4606      	mov	r6, r0
   13b3e:	2800      	cmp	r0, #0
   13b40:	d05c      	beq.n	13bfc <hci_set_ad+0xd0>
	return net_buf_simple_add(&buf->b, len);
   13b42:	2120      	movs	r1, #32
   13b44:	3008      	adds	r0, #8
   13b46:	f008 fde1 	bl	1c70c <net_buf_simple_add>
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
	(void)memset(set_data, 0, sizeof(*set_data));
   13b4a:	2220      	movs	r2, #32
   13b4c:	2100      	movs	r1, #0
   13b4e:	4681      	mov	r9, r0
   13b50:	f007 fb3d 	bl	1b1ce <memset>

	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   13b54:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
   13b58:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   13b5c:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
   13b5e:	2500      	movs	r5, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   13b60:	f8d4 8000 	ldr.w	r8, [r4]
   13b64:	2300      	movs	r3, #0
   13b66:	6862      	ldr	r2, [r4, #4]
   13b68:	4293      	cmp	r3, r2
   13b6a:	d30d      	bcc.n	13b88 <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
   13b6c:	9b00      	ldr	r3, [sp, #0]
   13b6e:	3408      	adds	r4, #8
   13b70:	429c      	cmp	r4, r3
   13b72:	d1f5      	bne.n	13b60 <hci_set_ad+0x34>
	if (err) {
		net_buf_unref(buf);
		return err;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   13b74:	2200      	movs	r2, #0
   13b76:	4631      	mov	r1, r6
   13b78:	4650      	mov	r0, sl
	*data_len = set_data_len;
   13b7a:	f889 5000 	strb.w	r5, [r9]
}
   13b7e:	b003      	add	sp, #12
   13b80:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   13b84:	f7fe bd38 	b.w	125f8 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   13b88:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   13b8c:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   13b90:	1ca8      	adds	r0, r5, #2
   13b92:	1881      	adds	r1, r0, r2
   13b94:	291f      	cmp	r1, #31
   13b96:	d91a      	bls.n	13bce <hci_set_ad+0xa2>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   13b98:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   13b9c:	f1c5 021d 	rsb	r2, r5, #29
				if (!(type == BT_DATA_NAME_COMPLETE &&
   13ba0:	d101      	bne.n	13ba6 <hci_set_ad+0x7a>
   13ba2:	2a00      	cmp	r2, #0
   13ba4:	dc11      	bgt.n	13bca <hci_set_ad+0x9e>
   13ba6:	4b17      	ldr	r3, [pc, #92]	; (13c04 <hci_set_ad+0xd8>)
   13ba8:	4917      	ldr	r1, [pc, #92]	; (13c08 <hci_set_ad+0xdc>)
					BT_ERR("Too big advertising data");
   13baa:	4818      	ldr	r0, [pc, #96]	; (13c0c <hci_set_ad+0xe0>)
   13bac:	1ac9      	subs	r1, r1, r3
   13bae:	08c9      	lsrs	r1, r1, #3
   13bb0:	0189      	lsls	r1, r1, #6
   13bb2:	f041 0101 	orr.w	r1, r1, #1
   13bb6:	f006 fc98 	bl	1a4ea <log_0>
		net_buf_unref(buf);
   13bba:	4630      	mov	r0, r6
   13bbc:	f002 ffa4 	bl	16b08 <net_buf_unref>
					return -EINVAL;
   13bc0:	f06f 0015 	mvn.w	r0, #21
}
   13bc4:	b003      	add	sp, #12
   13bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
   13bca:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   13bce:	b2d7      	uxtb	r7, r2
   13bd0:	1c79      	adds	r1, r7, #1
   13bd2:	f80b 1005 	strb.w	r1, [fp, r5]
   13bd6:	1c69      	adds	r1, r5, #1
			set_data[set_data_len++] = type;
   13bd8:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
   13bda:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
   13bde:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   13be2:	f8d8 1004 	ldr.w	r1, [r8, #4]
   13be6:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   13be8:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
   13bea:	f007 fae5 	bl	1b1b8 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   13bee:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   13bf0:	443d      	add	r5, r7
   13bf2:	b2ed      	uxtb	r5, r5
		for (size_t j = 0; j < ad[i].len; j++) {
   13bf4:	3301      	adds	r3, #1
   13bf6:	f108 0808 	add.w	r8, r8, #8
   13bfa:	e7b4      	b.n	13b66 <hci_set_ad+0x3a>
		return -ENOBUFS;
   13bfc:	f06f 0068 	mvn.w	r0, #104	; 0x68
   13c00:	e7e0      	b.n	13bc4 <hci_set_ad+0x98>
   13c02:	bf00      	nop
   13c04:	0001d788 	.word	0x0001d788
   13c08:	0001d788 	.word	0x0001d788
   13c0c:	0001f037 	.word	0x0001f037

00013c10 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   13c10:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   13c12:	4606      	mov	r6, r0
   13c14:	4b1e      	ldr	r3, [pc, #120]	; (13c90 <le_adv_start_add_conn+0x80>)
   13c16:	f816 2b09 	ldrb.w	r2, [r6], #9
   13c1a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
   13c1e:	b085      	sub	sp, #20

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   13c20:	2300      	movs	r3, #0
{
   13c22:	4605      	mov	r5, r0
   13c24:	2207      	movs	r2, #7
   13c26:	460f      	mov	r7, r1
   13c28:	4630      	mov	r0, r6
   13c2a:	4669      	mov	r1, sp
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   13c2c:	9300      	str	r3, [sp, #0]
   13c2e:	f8cd 3003 	str.w	r3, [sp, #3]
   13c32:	f007 fab0 	bl	1b196 <memcmp>
   13c36:	782a      	ldrb	r2, [r5, #0]
   13c38:	4604      	mov	r4, r0
   13c3a:	b9a8      	cbnz	r0, 13c68 <le_adv_start_add_conn+0x58>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   13c3c:	4b15      	ldr	r3, [pc, #84]	; (13c94 <le_adv_start_add_conn+0x84>)
   13c3e:	6818      	ldr	r0, [r3, #0]
   13c40:	8899      	ldrh	r1, [r3, #4]
   13c42:	9002      	str	r0, [sp, #8]
   13c44:	799b      	ldrb	r3, [r3, #6]
   13c46:	f8ad 100c 	strh.w	r1, [sp, #12]
   13c4a:	4610      	mov	r0, r2
   13c4c:	a902      	add	r1, sp, #8
   13c4e:	f88d 300e 	strb.w	r3, [sp, #14]
   13c52:	f000 fda7 	bl	147a4 <bt_conn_add_le>
		if (!conn) {
   13c56:	4605      	mov	r5, r0
   13c58:	b1b8      	cbz	r0, 13c8a <le_adv_start_add_conn+0x7a>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
   13c5a:	2104      	movs	r1, #4
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
	if (!conn) {
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
   13c5c:	f000 fc4c 	bl	144f8 <bt_conn_set_state>
	*out_conn = conn;
   13c60:	603d      	str	r5, [r7, #0]
	return 0;
}
   13c62:	4620      	mov	r0, r4
   13c64:	b005      	add	sp, #20
   13c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   13c68:	4631      	mov	r1, r6
   13c6a:	4610      	mov	r0, r2
   13c6c:	f000 fdd2 	bl	14814 <bt_conn_exists_le>
   13c70:	4604      	mov	r4, r0
   13c72:	b938      	cbnz	r0, 13c84 <le_adv_start_add_conn+0x74>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   13c74:	7828      	ldrb	r0, [r5, #0]
   13c76:	4631      	mov	r1, r6
   13c78:	f000 fd94 	bl	147a4 <bt_conn_add_le>
	if (!conn) {
   13c7c:	4605      	mov	r5, r0
   13c7e:	b120      	cbz	r0, 13c8a <le_adv_start_add_conn+0x7a>
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
   13c80:	2105      	movs	r1, #5
   13c82:	e7eb      	b.n	13c5c <le_adv_start_add_conn+0x4c>
		return -EINVAL;
   13c84:	f06f 0415 	mvn.w	r4, #21
   13c88:	e7eb      	b.n	13c62 <le_adv_start_add_conn+0x52>
		return -ENOMEM;
   13c8a:	f06f 040b 	mvn.w	r4, #11
   13c8e:	e7e8      	b.n	13c62 <le_adv_start_add_conn+0x52>
   13c90:	200002b8 	.word	0x200002b8
   13c94:	0001d920 	.word	0x0001d920

00013c98 <bt_le_adv_lookup_legacy>:
}
   13c98:	4800      	ldr	r0, [pc, #0]	; (13c9c <bt_le_adv_lookup_legacy+0x4>)
   13c9a:	4770      	bx	lr
   13c9c:	200002d0 	.word	0x200002d0

00013ca0 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   13ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable;
   13ca4:	690e      	ldr	r6, [r1, #16]
{
   13ca6:	b08f      	sub	sp, #60	; 0x3c
   13ca8:	469a      	mov	sl, r3
	struct bt_conn *conn = NULL;
   13caa:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable;
   13cac:	ebb6 0b03 	subs.w	fp, r6, r3
{
   13cb0:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   13cb2:	488f      	ldr	r0, [pc, #572]	; (13ef0 <bt_le_adv_start_legacy+0x250>)
	struct bt_conn *conn = NULL;
   13cb4:	9307      	str	r3, [sp, #28]
	bool dir_adv = (param->peer != NULL), scannable;
   13cb6:	bf18      	it	ne
   13cb8:	f04f 0b01 	movne.w	fp, #1
   13cbc:	f007 fc0f 	bl	1b4de <atomic_get>
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   13cc0:	0787      	lsls	r7, r0, #30
{
   13cc2:	460c      	mov	r4, r1
   13cc4:	4691      	mov	r9, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   13cc6:	f140 8108 	bpl.w	13eda <bt_le_adv_start_legacy+0x23a>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   13cca:	4608      	mov	r0, r1
   13ccc:	f7ff feea 	bl	13aa4 <valid_adv_param>
   13cd0:	b928      	cbnz	r0, 13cde <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
   13cd2:	f06f 0b15 	mvn.w	fp, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   13cd6:	4658      	mov	r0, fp
   13cd8:	b00f      	add	sp, #60	; 0x3c
   13cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
   13cde:	4620      	mov	r0, r4
   13ce0:	f007 fbec 	bl	1b4bc <bt_id_adv_random_addr_check>
   13ce4:	4680      	mov	r8, r0
   13ce6:	2800      	cmp	r0, #0
   13ce8:	d0f3      	beq.n	13cd2 <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   13cea:	f105 0710 	add.w	r7, r5, #16
   13cee:	4638      	mov	r0, r7
   13cf0:	f007 fbf5 	bl	1b4de <atomic_get>
   13cf4:	f3c0 1180 	ubfx	r1, r0, #6, #1
   13cf8:	0640      	lsls	r0, r0, #25
   13cfa:	f100 80f1 	bmi.w	13ee0 <bt_le_adv_start_legacy+0x240>
	(void)memset(&set_param, 0, sizeof(set_param));
   13cfe:	220f      	movs	r2, #15
   13d00:	a80a      	add	r0, sp, #40	; 0x28
   13d02:	9105      	str	r1, [sp, #20]
   13d04:	f007 fa63 	bl	1b1ce <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   13d08:	68a3      	ldr	r3, [r4, #8]
   13d0a:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	set_param.channel_map  = get_adv_channel_map(param->options);
   13d0e:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   13d10:	68e3      	ldr	r3, [r4, #12]
   13d12:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	set_param.channel_map  = get_adv_channel_map(param->options);
   13d16:	f007 fbd3 	bl	1b4c0 <get_adv_channel_map>
	if (adv->id != param->id) {
   13d1a:	782a      	ldrb	r2, [r5, #0]
   13d1c:	7823      	ldrb	r3, [r4, #0]
	set_param.filter_policy = get_filter_policy(param->options);
   13d1e:	9905      	ldr	r1, [sp, #20]
	set_param.channel_map  = get_adv_channel_map(param->options);
   13d20:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
	if (adv->id != param->id) {
   13d24:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
   13d26:	f88d 1036 	strb.w	r1, [sp, #54]	; 0x36
	if (adv->id != param->id) {
   13d2a:	d004      	beq.n	13d36 <bt_le_adv_start_legacy+0x96>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13d2c:	4870      	ldr	r0, [pc, #448]	; (13ef0 <bt_le_adv_start_legacy+0x250>)
   13d2e:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   13d32:	f007 fbda 	bl	1b4ea <atomic_and>
	bt_dev.adv_conn_id = adv->id;
   13d36:	4a6f      	ldr	r2, [pc, #444]	; (13ef4 <bt_le_adv_start_legacy+0x254>)
	adv->id = param->id;
   13d38:	7823      	ldrb	r3, [r4, #0]
   13d3a:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
   13d3c:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   13d40:	6861      	ldr	r1, [r4, #4]
   13d42:	465a      	mov	r2, fp
   13d44:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
   13d48:	4628      	mov	r0, r5
   13d4a:	f7ff fe25 	bl	13998 <bt_id_set_adv_own_addr>
	if (err) {
   13d4e:	4683      	mov	fp, r0
   13d50:	2800      	cmp	r0, #0
   13d52:	d1c0      	bne.n	13cd6 <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   13d54:	f105 0009 	add.w	r0, r5, #9
	if (dir_adv) {
   13d58:	2e00      	cmp	r6, #0
   13d5a:	d04d      	beq.n	13df8 <bt_le_adv_start_legacy+0x158>
	memcpy(dst, src, sizeof(*dst));
   13d5c:	6921      	ldr	r1, [r4, #16]
   13d5e:	2207      	movs	r2, #7
   13d60:	f007 fa2a 	bl	1b1b8 <memcpy>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   13d64:	6860      	ldr	r0, [r4, #4]
   13d66:	07c1      	lsls	r1, r0, #31
   13d68:	d54f      	bpl.n	13e0a <bt_le_adv_start_legacy+0x16a>
		if (dir_adv) {
   13d6a:	2e00      	cmp	r6, #0
   13d6c:	d04a      	beq.n	13e04 <bt_le_adv_start_legacy+0x164>
				set_param.type = BT_HCI_ADV_DIRECT_IND;
   13d6e:	f010 0f10 	tst.w	r0, #16
   13d72:	bf14      	ite	ne
   13d74:	2304      	movne	r3, #4
   13d76:	2301      	moveq	r3, #1
   13d78:	6921      	ldr	r1, [r4, #16]
   13d7a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   13d7e:	2207      	movs	r2, #7
   13d80:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   13d84:	f007 fa18 	bl	1b1b8 <memcpy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   13d88:	210f      	movs	r1, #15
   13d8a:	f242 0006 	movw	r0, #8198	; 0x2006
   13d8e:	f7fe fbf9 	bl	12584 <bt_hci_cmd_create>
	if (!buf) {
   13d92:	4683      	mov	fp, r0
   13d94:	2800      	cmp	r0, #0
   13d96:	f000 80a6 	beq.w	13ee6 <bt_le_adv_start_legacy+0x246>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   13d9a:	220f      	movs	r2, #15
   13d9c:	a90a      	add	r1, sp, #40	; 0x28
   13d9e:	3008      	adds	r0, #8
   13da0:	f008 fcba 	bl	1c718 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   13da4:	2200      	movs	r2, #0
   13da6:	4659      	mov	r1, fp
   13da8:	f242 0006 	movw	r0, #8198	; 0x2006
   13dac:	f7fe fc24 	bl	125f8 <bt_hci_cmd_send_sync>
	if (err) {
   13db0:	2800      	cmp	r0, #0
   13db2:	f040 809b 	bne.w	13eec <bt_le_adv_start_legacy+0x24c>
	if (!dir_adv) {
   13db6:	2e00      	cmp	r6, #0
   13db8:	d033      	beq.n	13e22 <bt_le_adv_start_legacy+0x182>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   13dba:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   13dbc:	07da      	lsls	r2, r3, #31
   13dbe:	d444      	bmi.n	13e4a <bt_le_adv_start_legacy+0x1aa>
	return bt_le_adv_set_enable_legacy(adv, enable);
   13dc0:	2101      	movs	r1, #1
   13dc2:	4628      	mov	r0, r5
   13dc4:	f007 fc38 	bl	1b638 <bt_le_adv_set_enable_legacy>
	if (err) {
   13dc8:	4683      	mov	fp, r0
   13dca:	2800      	cmp	r0, #0
   13dcc:	d07e      	beq.n	13ecc <bt_le_adv_start_legacy+0x22c>
   13dce:	4b4a      	ldr	r3, [pc, #296]	; (13ef8 <bt_le_adv_start_legacy+0x258>)
   13dd0:	494a      	ldr	r1, [pc, #296]	; (13efc <bt_le_adv_start_legacy+0x25c>)
		BT_ERR("Failed to start advertiser");
   13dd2:	484b      	ldr	r0, [pc, #300]	; (13f00 <bt_le_adv_start_legacy+0x260>)
   13dd4:	1ac9      	subs	r1, r1, r3
   13dd6:	08c9      	lsrs	r1, r1, #3
   13dd8:	0189      	lsls	r1, r1, #6
   13dda:	f041 0101 	orr.w	r1, r1, #1
   13dde:	f006 fb84 	bl	1a4ea <log_0>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   13de2:	9807      	ldr	r0, [sp, #28]
   13de4:	2800      	cmp	r0, #0
   13de6:	f43f af76 	beq.w	13cd6 <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   13dea:	2100      	movs	r1, #0
   13dec:	f000 fb84 	bl	144f8 <bt_conn_set_state>
			bt_conn_unref(conn);
   13df0:	9807      	ldr	r0, [sp, #28]
   13df2:	f007 fcb1 	bl	1b758 <bt_conn_unref>
   13df6:	e76e      	b.n	13cd6 <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   13df8:	9608      	str	r6, [sp, #32]
   13dfa:	2207      	movs	r2, #7
   13dfc:	f8cd 6023 	str.w	r6, [sp, #35]	; 0x23
   13e00:	a908      	add	r1, sp, #32
   13e02:	e7ad      	b.n	13d60 <bt_le_adv_start_legacy+0xc0>
			set_param.type = BT_HCI_ADV_IND;
   13e04:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
   13e08:	e7be      	b.n	13d88 <bt_le_adv_start_legacy+0xe8>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
   13e0a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13e0c:	b933      	cbnz	r3, 13e1c <bt_le_adv_start_legacy+0x17c>
   13e0e:	f3c0 08c0 	ubfx	r8, r0, #3, #1
		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
   13e12:	f1c8 0303 	rsb	r3, r8, #3
   13e16:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   13e1a:	e7b5      	b.n	13d88 <bt_le_adv_start_legacy+0xe8>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
   13e1c:	f04f 0801 	mov.w	r8, #1
   13e20:	e7f7      	b.n	13e12 <bt_le_adv_start_legacy+0x172>
				    param->options & BT_LE_ADV_OPT_USE_NAME,
   13e22:	6863      	ldr	r3, [r4, #4]
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   13e24:	f3c3 4280 	ubfx	r2, r3, #18, #1
   13e28:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   13e2c:	e9cd 8301 	strd	r8, r3, [sp, #4]
   13e30:	9b19      	ldr	r3, [sp, #100]	; 0x64
   13e32:	9203      	str	r2, [sp, #12]
   13e34:	9300      	str	r3, [sp, #0]
   13e36:	4652      	mov	r2, sl
   13e38:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13e3a:	4649      	mov	r1, r9
   13e3c:	4628      	mov	r0, r5
   13e3e:	f007 fb7a 	bl	1b536 <le_adv_update.constprop.0>
		if (err) {
   13e42:	4683      	mov	fp, r0
   13e44:	2800      	cmp	r0, #0
   13e46:	d0b8      	beq.n	13dba <bt_le_adv_start_legacy+0x11a>
   13e48:	e745      	b.n	13cd6 <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
   13e4a:	a907      	add	r1, sp, #28
   13e4c:	4628      	mov	r0, r5
   13e4e:	f7ff fedf 	bl	13c10 <le_adv_start_add_conn>
		if (err) {
   13e52:	4683      	mov	fp, r0
   13e54:	2800      	cmp	r0, #0
   13e56:	d0b3      	beq.n	13dc0 <bt_le_adv_start_legacy+0x120>
			if (err == -ENOMEM && !dir_adv &&
   13e58:	f110 0f0c 	cmn.w	r0, #12
   13e5c:	f47f af3b 	bne.w	13cd6 <bt_le_adv_start_legacy+0x36>
   13e60:	2e00      	cmp	r6, #0
   13e62:	f47f af38 	bne.w	13cd6 <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   13e66:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
   13e68:	079b      	lsls	r3, r3, #30
   13e6a:	f53f af34 	bmi.w	13cd6 <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   13e6e:	6860      	ldr	r0, [r4, #4]
   13e70:	f080 0002 	eor.w	r0, r0, #2
   13e74:	f3c0 0b40 	ubfx	fp, r0, #1, #1
   13e78:	f00b 0201 	and.w	r2, fp, #1
   13e7c:	210c      	movs	r1, #12
   13e7e:	4638      	mov	r0, r7
   13e80:	f007 fb42 	bl	1b508 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME,
   13e84:	6862      	ldr	r2, [r4, #4]
   13e86:	2107      	movs	r1, #7
   13e88:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   13e8c:	4638      	mov	r0, r7
   13e8e:	f007 fb3b 	bl	1b508 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_FORCE_NAME_IN_AD,
   13e92:	6862      	ldr	r2, [r4, #4]
   13e94:	2112      	movs	r1, #18
   13e96:	f3c2 4280 	ubfx	r2, r2, #18, #1
   13e9a:	4638      	mov	r0, r7
   13e9c:	f007 fb34 	bl	1b508 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   13ea0:	6862      	ldr	r2, [r4, #4]
   13ea2:	2108      	movs	r1, #8
   13ea4:	f002 0201 	and.w	r2, r2, #1
   13ea8:	4638      	mov	r0, r7
   13eaa:	f007 fb2d 	bl	1b508 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   13eae:	4642      	mov	r2, r8
   13eb0:	2109      	movs	r1, #9
   13eb2:	4638      	mov	r0, r7
   13eb4:	f007 fb28 	bl	1b508 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   13eb8:	6862      	ldr	r2, [r4, #4]
   13eba:	210b      	movs	r1, #11
   13ebc:	f3c2 0280 	ubfx	r2, r2, #2, #1
   13ec0:	4638      	mov	r0, r7
   13ec2:	f007 fb21 	bl	1b508 <atomic_set_bit_to>
	return 0;
   13ec6:	f04f 0b00 	mov.w	fp, #0
   13eca:	e704      	b.n	13cd6 <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   13ecc:	9807      	ldr	r0, [sp, #28]
   13ece:	b108      	cbz	r0, 13ed4 <bt_le_adv_start_legacy+0x234>
		bt_conn_unref(conn);
   13ed0:	f007 fc42 	bl	1b758 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   13ed4:	2e00      	cmp	r6, #0
   13ed6:	d1cf      	bne.n	13e78 <bt_le_adv_start_legacy+0x1d8>
   13ed8:	e7c9      	b.n	13e6e <bt_le_adv_start_legacy+0x1ce>
		return -EAGAIN;
   13eda:	f06f 0b0a 	mvn.w	fp, #10
   13ede:	e6fa      	b.n	13cd6 <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
   13ee0:	f06f 0b77 	mvn.w	fp, #119	; 0x77
   13ee4:	e6f7      	b.n	13cd6 <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
   13ee6:	f06f 0b68 	mvn.w	fp, #104	; 0x68
   13eea:	e6f4      	b.n	13cd6 <bt_le_adv_start_legacy+0x36>
   13eec:	4683      	mov	fp, r0
   13eee:	e6f2      	b.n	13cd6 <bt_le_adv_start_legacy+0x36>
   13ef0:	20000384 	.word	0x20000384
   13ef4:	200002b8 	.word	0x200002b8
   13ef8:	0001d788 	.word	0x0001d788
   13efc:	0001d788 	.word	0x0001d788
   13f00:	0001f050 	.word	0x0001f050

00013f04 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   13f04:	b573      	push	{r0, r1, r4, r5, r6, lr}
   13f06:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   13f08:	9a06      	ldr	r2, [sp, #24]
{
   13f0a:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   13f0c:	e9cd 3200 	strd	r3, r2, [sp]
   13f10:	462b      	mov	r3, r5
   13f12:	460a      	mov	r2, r1
   13f14:	4601      	mov	r1, r0
   13f16:	4811      	ldr	r0, [pc, #68]	; (13f5c <bt_le_adv_start+0x58>)
   13f18:	f7ff fec2 	bl	13ca0 <bt_le_adv_start_legacy>
   13f1c:	4621      	mov	r1, r4
   13f1e:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
   13f20:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
   13f22:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
   13f26:	429d      	cmp	r5, r3
   13f28:	d102      	bne.n	13f30 <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   13f2a:	4630      	mov	r0, r6
   13f2c:	b002      	add	sp, #8
   13f2e:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
   13f30:	880a      	ldrh	r2, [r1, #0]
   13f32:	4282      	cmp	r2, r0
   13f34:	d104      	bne.n	13f40 <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
   13f36:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   13f38:	b112      	cbz	r2, 13f40 <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   13f3a:	7812      	ldrb	r2, [r2, #0]
   13f3c:	07d2      	lsls	r2, r2, #31
   13f3e:	d402      	bmi.n	13f46 <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
   13f40:	3301      	adds	r3, #1
   13f42:	3108      	adds	r1, #8
   13f44:	e7ef      	b.n	13f26 <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   13f46:	4906      	ldr	r1, [pc, #24]	; (13f60 <bt_le_adv_start+0x5c>)
   13f48:	4806      	ldr	r0, [pc, #24]	; (13f64 <bt_le_adv_start+0x60>)
   13f4a:	f008 ff7e 	bl	1ce4a <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   13f4e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   13f52:	2300      	movs	r3, #0
   13f54:	4803      	ldr	r0, [pc, #12]	; (13f64 <bt_le_adv_start+0x60>)
   13f56:	f005 f883 	bl	19060 <k_work_reschedule>
   13f5a:	e7e6      	b.n	13f2a <bt_le_adv_start+0x26>
   13f5c:	200002d0 	.word	0x200002d0
   13f60:	00014009 	.word	0x00014009
   13f64:	200002e8 	.word	0x200002e8

00013f68 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   13f68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
	int err;

	(void)bt_le_lim_adv_cancel_timeout(adv);
   13f6a:	4822      	ldr	r0, [pc, #136]	; (13ff4 <bt_le_adv_stop+0x8c>)
   13f6c:	f007 fb89 	bl	1b682 <bt_le_lim_adv_cancel_timeout>
   13f70:	4821      	ldr	r0, [pc, #132]	; (13ff8 <bt_le_adv_stop+0x90>)
   13f72:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   13f76:	f007 fab8 	bl	1b4ea <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   13f7a:	481f      	ldr	r0, [pc, #124]	; (13ff8 <bt_le_adv_stop+0x90>)
   13f7c:	f007 faaf 	bl	1b4de <atomic_get>
   13f80:	4603      	mov	r3, r0
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   13f82:	065a      	lsls	r2, r3, #25
   13f84:	f3c0 1080 	ubfx	r0, r0, #6, #1
   13f88:	d531      	bpl.n	13fee <bt_le_adv_stop+0x86>
   13f8a:	481b      	ldr	r0, [pc, #108]	; (13ff8 <bt_le_adv_stop+0x90>)
   13f8c:	f007 faa7 	bl	1b4de <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   13f90:	05c3      	lsls	r3, r0, #23
   13f92:	d521      	bpl.n	13fd8 <bt_le_adv_stop+0x70>
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   13f94:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   13f96:	4819      	ldr	r0, [pc, #100]	; (13ffc <bt_le_adv_stop+0x94>)
   13f98:	9300      	str	r3, [sp, #0]
   13f9a:	2207      	movs	r2, #7
   13f9c:	4669      	mov	r1, sp
   13f9e:	f8cd 3003 	str.w	r3, [sp, #3]
   13fa2:	f007 f8f8 	bl	1b196 <memcmp>
   13fa6:	4b16      	ldr	r3, [pc, #88]	; (14000 <bt_le_adv_stop+0x98>)
   13fa8:	b9e8      	cbnz	r0, 13fe6 <bt_le_adv_stop+0x7e>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   13faa:	4a16      	ldr	r2, [pc, #88]	; (14004 <bt_le_adv_stop+0x9c>)
   13fac:	8891      	ldrh	r1, [r2, #4]
   13fae:	6810      	ldr	r0, [r2, #0]
   13fb0:	7992      	ldrb	r2, [r2, #6]
   13fb2:	f8ad 100c 	strh.w	r1, [sp, #12]
   13fb6:	f88d 200e 	strb.w	r2, [sp, #14]
   13fba:	9002      	str	r0, [sp, #8]
   13fbc:	2204      	movs	r2, #4
   13fbe:	a902      	add	r1, sp, #8
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   13fc0:	7e18      	ldrb	r0, [r3, #24]
   13fc2:	f000 fc4d 	bl	14860 <bt_conn_lookup_state_le>
   13fc6:	4604      	mov	r4, r0
	if (conn) {
   13fc8:	b130      	cbz	r0, 13fd8 <bt_le_adv_stop+0x70>
		conn->err = status;
   13fca:	2100      	movs	r1, #0
   13fcc:	7241      	strb	r1, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   13fce:	f000 fa93 	bl	144f8 <bt_conn_set_state>
		bt_conn_unref(conn);
   13fd2:	4620      	mov	r0, r4
   13fd4:	f007 fbc0 	bl	1b758 <bt_conn_unref>
		err = bt_le_adv_set_enable_ext(adv, false, NULL);
		if (err) {
			return err;
		}
	} else {
		err = bt_le_adv_set_enable_legacy(adv, false);
   13fd8:	4806      	ldr	r0, [pc, #24]	; (13ff4 <bt_le_adv_stop+0x8c>)
   13fda:	2100      	movs	r1, #0
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   13fdc:	b004      	add	sp, #16
   13fde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = bt_le_adv_set_enable_legacy(adv, false);
   13fe2:	f007 bb29 	b.w	1b638 <bt_le_adv_set_enable_legacy>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   13fe6:	2205      	movs	r2, #5
   13fe8:	f103 0121 	add.w	r1, r3, #33	; 0x21
   13fec:	e7e8      	b.n	13fc0 <bt_le_adv_stop+0x58>
}
   13fee:	b004      	add	sp, #16
   13ff0:	bd10      	pop	{r4, pc}
   13ff2:	bf00      	nop
   13ff4:	200002d0 	.word	0x200002d0
   13ff8:	200002e0 	.word	0x200002e0
   13ffc:	200002d9 	.word	0x200002d9
   14000:	200002b8 	.word	0x200002b8
   14004:	0001d920 	.word	0x0001d920

00014008 <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
   14008:	b508      	push	{r3, lr}
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   1400a:	f7ff ffad 	bl	13f68 <bt_le_adv_stop>
   1400e:	4b06      	ldr	r3, [pc, #24]	; (14028 <adv_timeout+0x20>)
   14010:	4a06      	ldr	r2, [pc, #24]	; (1402c <adv_timeout+0x24>)
   14012:	1ad2      	subs	r2, r2, r3
   14014:	08d2      	lsrs	r2, r2, #3
#endif
	BT_WARN("Failed to stop advertising: %d", err);
   14016:	0192      	lsls	r2, r2, #6
	err = bt_le_adv_stop();
   14018:	4601      	mov	r1, r0
}
   1401a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_WARN("Failed to stop advertising: %d", err);
   1401e:	4804      	ldr	r0, [pc, #16]	; (14030 <adv_timeout+0x28>)
   14020:	f042 0202 	orr.w	r2, r2, #2
   14024:	f006 ba6e 	b.w	1a504 <log_1>
   14028:	0001d788 	.word	0x0001d788
   1402c:	0001d788 	.word	0x0001d788
   14030:	0001f06b 	.word	0x0001f06b

00014034 <bt_le_adv_resume>:
{
   14034:	b537      	push	{r0, r1, r2, r4, r5, lr}
   14036:	481e      	ldr	r0, [pc, #120]	; (140b0 <bt_le_adv_resume+0x7c>)
   14038:	4c1d      	ldr	r4, [pc, #116]	; (140b0 <bt_le_adv_resume+0x7c>)
   1403a:	f007 fa50 	bl	1b4de <atomic_get>
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   1403e:	f410 5f80 	tst.w	r0, #4096	; 0x1000
   14042:	d032      	beq.n	140aa <bt_le_adv_resume+0x76>
   14044:	4620      	mov	r0, r4
   14046:	f007 fa4a 	bl	1b4de <atomic_get>
   1404a:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1404c:	f3c0 1580 	ubfx	r5, r0, #6, #1
   14050:	d42b      	bmi.n	140aa <bt_le_adv_resume+0x76>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   14052:	4620      	mov	r0, r4
   14054:	f007 fa43 	bl	1b4de <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   14058:	05c3      	lsls	r3, r0, #23
   1405a:	d526      	bpl.n	140aa <bt_le_adv_resume+0x76>
	err = le_adv_start_add_conn(adv, &conn);
   1405c:	a901      	add	r1, sp, #4
   1405e:	f1a4 0010 	sub.w	r0, r4, #16
   14062:	f7ff fdd5 	bl	13c10 <le_adv_start_add_conn>
	if (err) {
   14066:	bb00      	cbnz	r0, 140aa <bt_le_adv_resume+0x76>
	return bt_le_adv_set_enable_legacy(adv, enable);
   14068:	2101      	movs	r1, #1
   1406a:	f1a4 0010 	sub.w	r0, r4, #16
   1406e:	f007 fae3 	bl	1b638 <bt_le_adv_set_enable_legacy>
	if (err) {
   14072:	b150      	cbz	r0, 1408a <bt_le_adv_resume+0x56>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   14074:	4629      	mov	r1, r5
   14076:	9801      	ldr	r0, [sp, #4]
   14078:	f000 fa3e 	bl	144f8 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1407c:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   14080:	4620      	mov	r0, r4
   14082:	f007 fa32 	bl	1b4ea <atomic_and>
	return (old & mask) != 0;
   14086:	f3c0 3500 	ubfx	r5, r0, #12, #1
	bt_conn_unref(conn);
   1408a:	9801      	ldr	r0, [sp, #4]
   1408c:	f007 fb64 	bl	1b758 <bt_conn_unref>
	if (persist_paused) {
   14090:	b15d      	cbz	r5, 140aa <bt_le_adv_resume+0x76>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14092:	f3bf 8f5b 	dmb	ish
   14096:	e854 3f00 	ldrex	r3, [r4]
   1409a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   1409e:	e844 3200 	strex	r2, r3, [r4]
   140a2:	2a00      	cmp	r2, #0
   140a4:	d1f7      	bne.n	14096 <bt_le_adv_resume+0x62>
   140a6:	f3bf 8f5b 	dmb	ish
}
   140aa:	b003      	add	sp, #12
   140ac:	bd30      	pop	{r4, r5, pc}
   140ae:	bf00      	nop
   140b0:	200002e0 	.word	0x200002e0

000140b4 <tx_free>:
	}
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
   140b4:	2300      	movs	r3, #0
	tx->user_data = NULL;
   140b6:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
   140ba:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
   140bc:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   140be:	4801      	ldr	r0, [pc, #4]	; (140c4 <tx_free+0x10>)
   140c0:	f008 bdcc 	b.w	1cc5c <k_queue_append>
   140c4:	200006dc 	.word	0x200006dc

000140c8 <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
   140c8:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   140ca:	4b09      	ldr	r3, [pc, #36]	; (140f0 <notify_connected+0x28>)
   140cc:	681d      	ldr	r5, [r3, #0]
{
   140ce:	4604      	mov	r4, r0
		if (cb->connected) {
			cb->connected(conn, conn->err);
   140d0:	7a61      	ldrb	r1, [r4, #9]
	for (cb = callback_list; cb; cb = cb->_next) {
   140d2:	b92d      	cbnz	r5, 140e0 <notify_connected+0x18>
		}
	}

	if (!conn->err) {
   140d4:	b951      	cbnz	r1, 140ec <notify_connected+0x24>
		bt_gatt_connected(conn);
   140d6:	4620      	mov	r0, r4
	}
}
   140d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
   140dc:	f002 bbae 	b.w	1683c <bt_gatt_connected>
		if (cb->connected) {
   140e0:	682b      	ldr	r3, [r5, #0]
   140e2:	b10b      	cbz	r3, 140e8 <notify_connected+0x20>
			cb->connected(conn, conn->err);
   140e4:	4620      	mov	r0, r4
   140e6:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   140e8:	692d      	ldr	r5, [r5, #16]
   140ea:	e7f1      	b.n	140d0 <notify_connected+0x8>
}
   140ec:	bd38      	pop	{r3, r4, r5, pc}
   140ee:	bf00      	nop
   140f0:	20002418 	.word	0x20002418

000140f4 <send_frag>:
{
   140f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   140f8:	694d      	ldr	r5, [r1, #20]
{
   140fa:	4604      	mov	r4, r0
   140fc:	460e      	mov	r6, r1
   140fe:	4691      	mov	r9, r2
   14100:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
   14102:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14106:	4844      	ldr	r0, [pc, #272]	; (14218 <send_frag+0x124>)
   14108:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1410c:	f004 fdc6 	bl	18c9c <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   14110:	7aa3      	ldrb	r3, [r4, #10]
   14112:	2b07      	cmp	r3, #7
   14114:	d151      	bne.n	141ba <send_frag+0xc6>
	__asm__ volatile(
   14116:	f04f 0340 	mov.w	r3, #64	; 0x40
   1411a:	f3ef 8211 	mrs	r2, BASEPRI
   1411e:	f383 8811 	msr	BASEPRI, r3
   14122:	f3bf 8f6f 	isb	sy
	if (tx) {
   14126:	69a3      	ldr	r3, [r4, #24]
   14128:	2d00      	cmp	r5, #0
   1412a:	d058      	beq.n	141de <send_frag+0xea>
	parent->next = child;
   1412c:	2100      	movs	r1, #0
   1412e:	6029      	str	r1, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
   14130:	2b00      	cmp	r3, #0
   14132:	d151      	bne.n	141d8 <send_frag+0xe4>
	list->head = node;
   14134:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   14138:	f382 8811 	msr	BASEPRI, r2
   1413c:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   14140:	2104      	movs	r1, #4
   14142:	f106 0008 	add.w	r0, r6, #8
   14146:	f008 faf8 	bl	1c73a <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   1414a:	8823      	ldrh	r3, [r4, #0]
   1414c:	f009 09fd 	and.w	r9, r9, #253	; 0xfd
   14150:	ea43 3909 	orr.w	r9, r3, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   14154:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   14156:	f8a0 9000 	strh.w	r9, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1415a:	3b04      	subs	r3, #4
   1415c:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1415e:	2302      	movs	r3, #2
   14160:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
   14162:	4630      	mov	r0, r6
   14164:	f7fe faec 	bl	12740 <bt_send>
	if (err) {
   14168:	4601      	mov	r1, r0
   1416a:	2800      	cmp	r0, #0
   1416c:	d051      	beq.n	14212 <send_frag+0x11e>
   1416e:	4b2b      	ldr	r3, [pc, #172]	; (1421c <send_frag+0x128>)
   14170:	4a2b      	ldr	r2, [pc, #172]	; (14220 <send_frag+0x12c>)
		BT_ERR("Unable to send to driver (err %d)", err);
   14172:	482c      	ldr	r0, [pc, #176]	; (14224 <send_frag+0x130>)
   14174:	1ad2      	subs	r2, r2, r3
   14176:	08d2      	lsrs	r2, r2, #3
   14178:	0192      	lsls	r2, r2, #6
   1417a:	f042 0201 	orr.w	r2, r2, #1
   1417e:	f006 f9c1 	bl	1a504 <log_1>
	__asm__ volatile(
   14182:	f04f 0340 	mov.w	r3, #64	; 0x40
   14186:	f3ef 8011 	mrs	r0, BASEPRI
   1418a:	f383 8811 	msr	BASEPRI, r3
   1418e:	f3bf 8f6f 	isb	sy
		if (tx) {
   14192:	2d00      	cmp	r5, #0
   14194:	d037      	beq.n	14206 <send_frag+0x112>
	return list->head;
   14196:	6963      	ldr	r3, [r4, #20]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   14198:	2200      	movs	r2, #0
   1419a:	b153      	cbz	r3, 141b2 <send_frag+0xbe>
   1419c:	429d      	cmp	r5, r3
   1419e:	d12f      	bne.n	14200 <send_frag+0x10c>
	return node->next;
   141a0:	682b      	ldr	r3, [r5, #0]
	return list->tail;
   141a2:	69a1      	ldr	r1, [r4, #24]
Z_GENLIST_REMOVE(slist, snode)
   141a4:	bb3a      	cbnz	r2, 141f6 <send_frag+0x102>
   141a6:	42a9      	cmp	r1, r5
	list->head = node;
   141a8:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   141aa:	d100      	bne.n	141ae <send_frag+0xba>
	list->tail = node;
   141ac:	61a3      	str	r3, [r4, #24]
	parent->next = child;
   141ae:	2300      	movs	r3, #0
   141b0:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   141b2:	f380 8811 	msr	BASEPRI, r0
   141b6:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   141ba:	4817      	ldr	r0, [pc, #92]	; (14218 <send_frag+0x124>)
   141bc:	f004 fd48 	bl	18c50 <z_impl_k_sem_give>
	if (tx) {
   141c0:	b115      	cbz	r5, 141c8 <send_frag+0xd4>
		tx_free(tx);
   141c2:	4628      	mov	r0, r5
   141c4:	f7ff ff76 	bl	140b4 <tx_free>
	if (always_consume) {
   141c8:	b11f      	cbz	r7, 141d2 <send_frag+0xde>
		net_buf_unref(buf);
   141ca:	4630      	mov	r0, r6
   141cc:	f002 fc9c 	bl	16b08 <net_buf_unref>
	return false;
   141d0:	2700      	movs	r7, #0
}
   141d2:	4638      	mov	r0, r7
   141d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   141d8:	601d      	str	r5, [r3, #0]
	list->tail = node;
   141da:	61a5      	str	r5, [r4, #24]
}
   141dc:	e7ac      	b.n	14138 <send_frag+0x44>
		if (tail_tx) {
   141de:	b133      	cbz	r3, 141ee <send_frag+0xfa>
			pending_no_cb = &tail_tx->pending_no_cb;
   141e0:	f103 080c 	add.w	r8, r3, #12
   141e4:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   141e6:	3301      	adds	r3, #1
   141e8:	f8c8 3000 	str.w	r3, [r8]
   141ec:	e7a4      	b.n	14138 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   141ee:	69e3      	ldr	r3, [r4, #28]
   141f0:	f104 081c 	add.w	r8, r4, #28
   141f4:	e7f7      	b.n	141e6 <send_frag+0xf2>
Z_GENLIST_REMOVE(slist, snode)
   141f6:	42a9      	cmp	r1, r5
	parent->next = child;
   141f8:	6013      	str	r3, [r2, #0]
	list->tail = node;
   141fa:	bf08      	it	eq
   141fc:	61a2      	streq	r2, [r4, #24]
}
   141fe:	e7d6      	b.n	141ae <send_frag+0xba>
	return node->next;
   14200:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   14202:	681b      	ldr	r3, [r3, #0]
   14204:	e7c9      	b.n	1419a <send_frag+0xa6>
			(*pending_no_cb)--;
   14206:	f8d8 3000 	ldr.w	r3, [r8]
   1420a:	3b01      	subs	r3, #1
   1420c:	f8c8 3000 	str.w	r3, [r8]
   14210:	e7cf      	b.n	141b2 <send_frag+0xbe>
	return true;
   14212:	2701      	movs	r7, #1
   14214:	e7dd      	b.n	141d2 <send_frag+0xde>
   14216:	bf00      	nop
   14218:	200003b8 	.word	0x200003b8
   1421c:	0001d788 	.word	0x0001d788
   14220:	0001d7a0 	.word	0x0001d7a0
   14224:	0001ec46 	.word	0x0001ec46

00014228 <bt_conn_get_pkts>:
}
   14228:	4800      	ldr	r0, [pc, #0]	; (1422c <bt_conn_get_pkts+0x4>)
   1422a:	4770      	bx	lr
   1422c:	200003b8 	.word	0x200003b8

00014230 <bt_conn_new>:
{
   14230:	b538      	push	{r3, r4, r5, lr}
   14232:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   14234:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   14236:	2501      	movs	r5, #1
   14238:	428b      	cmp	r3, r1
   1423a:	d102      	bne.n	14242 <bt_conn_new+0x12>
		return NULL;
   1423c:	2400      	movs	r4, #0
}
   1423e:	4620      	mov	r0, r4
   14240:	bd38      	pop	{r3, r4, r5, pc}
   14242:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
   14246:	f3bf 8f5b 	dmb	ish
   1424a:	e852 0f00 	ldrex	r0, [r2]
   1424e:	2800      	cmp	r0, #0
   14250:	d104      	bne.n	1425c <bt_conn_new+0x2c>
   14252:	e842 5c00 	strex	ip, r5, [r2]
   14256:	f1bc 0f00 	cmp.w	ip, #0
   1425a:	d1f6      	bne.n	1424a <bt_conn_new+0x1a>
   1425c:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   14260:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   14264:	d002      	beq.n	1426c <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
   14266:	3301      	adds	r3, #1
   14268:	4604      	mov	r4, r0
   1426a:	e7e5      	b.n	14238 <bt_conn_new+0x8>
	if (!conn) {
   1426c:	2c00      	cmp	r4, #0
   1426e:	d0e6      	beq.n	1423e <bt_conn_new+0xe>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   14270:	22b8      	movs	r2, #184	; 0xb8
   14272:	2100      	movs	r1, #0
   14274:	4620      	mov	r0, r4
   14276:	f006 ffaa 	bl	1b1ce <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   1427a:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1427e:	4904      	ldr	r1, [pc, #16]	; (14290 <bt_conn_new+0x60>)
   14280:	f008 fde3 	bl	1ce4a <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   14284:	4903      	ldr	r1, [pc, #12]	; (14294 <bt_conn_new+0x64>)
   14286:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1428a:	f008 fdb8 	bl	1cdfe <k_work_init>
	return conn;
   1428e:	e7d6      	b.n	1423e <bt_conn_new+0xe>
   14290:	0001495d 	.word	0x0001495d
   14294:	0001b6cf 	.word	0x0001b6cf

00014298 <bt_conn_recv>:
{
   14298:	b570      	push	{r4, r5, r6, lr}
   1429a:	4616      	mov	r6, r2
   1429c:	4604      	mov	r4, r0
   1429e:	460d      	mov	r5, r1
	tx_notify(conn);
   142a0:	f007 f9f2 	bl	1b688 <tx_notify>
	switch (flags) {
   142a4:	2e01      	cmp	r6, #1
   142a6:	d02b      	beq.n	14300 <bt_conn_recv+0x68>
   142a8:	2e02      	cmp	r6, #2
   142aa:	d158      	bne.n	1435e <bt_conn_recv+0xc6>
		if (conn->rx) {
   142ac:	6923      	ldr	r3, [r4, #16]
   142ae:	b163      	cbz	r3, 142ca <bt_conn_recv+0x32>
   142b0:	4b35      	ldr	r3, [pc, #212]	; (14388 <bt_conn_recv+0xf0>)
   142b2:	4936      	ldr	r1, [pc, #216]	; (1438c <bt_conn_recv+0xf4>)
			BT_ERR("Unexpected first L2CAP frame");
   142b4:	4836      	ldr	r0, [pc, #216]	; (14390 <bt_conn_recv+0xf8>)
   142b6:	1ac9      	subs	r1, r1, r3
   142b8:	08c9      	lsrs	r1, r1, #3
   142ba:	0189      	lsls	r1, r1, #6
   142bc:	f041 0101 	orr.w	r1, r1, #1
   142c0:	f006 f913 	bl	1a4ea <log_0>
			bt_conn_reset_rx_state(conn);
   142c4:	4620      	mov	r0, r4
   142c6:	f007 fa05 	bl	1b6d4 <bt_conn_reset_rx_state>
		conn->rx = buf;
   142ca:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   142cc:	6923      	ldr	r3, [r4, #16]
   142ce:	8999      	ldrh	r1, [r3, #12]
   142d0:	2901      	cmp	r1, #1
   142d2:	d958      	bls.n	14386 <bt_conn_recv+0xee>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   142d4:	689a      	ldr	r2, [r3, #8]
   142d6:	8812      	ldrh	r2, [r2, #0]
   142d8:	3204      	adds	r2, #4
   142da:	b292      	uxth	r2, r2
	if (conn->rx->len < acl_total_len) {
   142dc:	4291      	cmp	r1, r2
   142de:	d352      	bcc.n	14386 <bt_conn_recv+0xee>
	if (conn->rx->len > acl_total_len) {
   142e0:	d949      	bls.n	14376 <bt_conn_recv+0xde>
   142e2:	4829      	ldr	r0, [pc, #164]	; (14388 <bt_conn_recv+0xf0>)
   142e4:	4b29      	ldr	r3, [pc, #164]	; (1438c <bt_conn_recv+0xf4>)
   142e6:	1a1b      	subs	r3, r3, r0
   142e8:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL len mismatch (%u > %u)",
   142ea:	019b      	lsls	r3, r3, #6
   142ec:	4829      	ldr	r0, [pc, #164]	; (14394 <bt_conn_recv+0xfc>)
   142ee:	f043 0301 	orr.w	r3, r3, #1
   142f2:	f006 f91b 	bl	1a52c <log_2>
		bt_conn_reset_rx_state(conn);
   142f6:	4620      	mov	r0, r4
}
   142f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   142fc:	f007 b9ea 	b.w	1b6d4 <bt_conn_reset_rx_state>
		if (!conn->rx) {
   14300:	6920      	ldr	r0, [r4, #16]
   14302:	b968      	cbnz	r0, 14320 <bt_conn_recv+0x88>
   14304:	4921      	ldr	r1, [pc, #132]	; (1438c <bt_conn_recv+0xf4>)
   14306:	4b20      	ldr	r3, [pc, #128]	; (14388 <bt_conn_recv+0xf0>)
			BT_ERR("Unexpected L2CAP continuation");
   14308:	4823      	ldr	r0, [pc, #140]	; (14398 <bt_conn_recv+0x100>)
   1430a:	1ac9      	subs	r1, r1, r3
   1430c:	08c9      	lsrs	r1, r1, #3
   1430e:	0189      	lsls	r1, r1, #6
   14310:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Not enough buffer space for L2CAP data");
   14314:	f006 f8e9 	bl	1a4ea <log_0>
			bt_conn_reset_rx_state(conn);
   14318:	4620      	mov	r0, r4
   1431a:	f007 f9db 	bl	1b6d4 <bt_conn_reset_rx_state>
   1431e:	e001      	b.n	14324 <bt_conn_recv+0x8c>
		if (!buf->len) {
   14320:	89ae      	ldrh	r6, [r5, #12]
   14322:	b926      	cbnz	r6, 1432e <bt_conn_recv+0x96>
			net_buf_unref(buf);
   14324:	4628      	mov	r0, r5
}
   14326:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   1432a:	f002 bbed 	b.w	16b08 <net_buf_unref>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   1432e:	3008      	adds	r0, #8
   14330:	f008 fa27 	bl	1c782 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   14334:	4286      	cmp	r6, r0
   14336:	d908      	bls.n	1434a <bt_conn_recv+0xb2>
   14338:	4914      	ldr	r1, [pc, #80]	; (1438c <bt_conn_recv+0xf4>)
   1433a:	4b13      	ldr	r3, [pc, #76]	; (14388 <bt_conn_recv+0xf0>)
			BT_ERR("Not enough buffer space for L2CAP data");
   1433c:	4817      	ldr	r0, [pc, #92]	; (1439c <bt_conn_recv+0x104>)
   1433e:	1ac9      	subs	r1, r1, r3
   14340:	08c9      	lsrs	r1, r1, #3
   14342:	0189      	lsls	r1, r1, #6
   14344:	f041 0101 	orr.w	r1, r1, #1
   14348:	e7e4      	b.n	14314 <bt_conn_recv+0x7c>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1434a:	6920      	ldr	r0, [r4, #16]
   1434c:	89aa      	ldrh	r2, [r5, #12]
   1434e:	68a9      	ldr	r1, [r5, #8]
   14350:	3008      	adds	r0, #8
   14352:	f008 f9e1 	bl	1c718 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   14356:	4628      	mov	r0, r5
   14358:	f002 fbd6 	bl	16b08 <net_buf_unref>
		break;
   1435c:	e7b6      	b.n	142cc <bt_conn_recv+0x34>
   1435e:	4a0a      	ldr	r2, [pc, #40]	; (14388 <bt_conn_recv+0xf0>)
   14360:	4b0a      	ldr	r3, [pc, #40]	; (1438c <bt_conn_recv+0xf4>)
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   14362:	480f      	ldr	r0, [pc, #60]	; (143a0 <bt_conn_recv+0x108>)
   14364:	1a9b      	subs	r3, r3, r2
   14366:	08db      	lsrs	r3, r3, #3
   14368:	019b      	lsls	r3, r3, #6
   1436a:	f043 0201 	orr.w	r2, r3, #1
   1436e:	4631      	mov	r1, r6
   14370:	f006 f8c8 	bl	1a504 <log_1>
		bt_conn_reset_rx_state(conn);
   14374:	e7d0      	b.n	14318 <bt_conn_recv+0x80>
	conn->rx = NULL;
   14376:	2200      	movs	r2, #0
   14378:	6122      	str	r2, [r4, #16]
	bt_l2cap_recv(conn, buf);
   1437a:	4620      	mov	r0, r4
   1437c:	4619      	mov	r1, r3
}
   1437e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
   14382:	f000 bd65 	b.w	14e50 <bt_l2cap_recv>
}
   14386:	bd70      	pop	{r4, r5, r6, pc}
   14388:	0001d788 	.word	0x0001d788
   1438c:	0001d7a0 	.word	0x0001d7a0
   14390:	0001f091 	.word	0x0001f091
   14394:	0001f111 	.word	0x0001f111
   14398:	0001f0ae 	.word	0x0001f0ae
   1439c:	0001f0cc 	.word	0x0001f0cc
   143a0:	0001f0f3 	.word	0x0001f0f3

000143a4 <bt_conn_send_cb>:
{
   143a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   143a8:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
   143aa:	7a83      	ldrb	r3, [r0, #10]
   143ac:	2b07      	cmp	r3, #7
{
   143ae:	4605      	mov	r5, r0
   143b0:	460e      	mov	r6, r1
   143b2:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   143b4:	d00c      	beq.n	143d0 <bt_conn_send_cb+0x2c>
   143b6:	4926      	ldr	r1, [pc, #152]	; (14450 <bt_conn_send_cb+0xac>)
   143b8:	4b26      	ldr	r3, [pc, #152]	; (14454 <bt_conn_send_cb+0xb0>)
		BT_ERR("not connected!");
   143ba:	4827      	ldr	r0, [pc, #156]	; (14458 <bt_conn_send_cb+0xb4>)
   143bc:	1ac9      	subs	r1, r1, r3
   143be:	08c9      	lsrs	r1, r1, #3
   143c0:	0189      	lsls	r1, r1, #6
   143c2:	f041 0101 	orr.w	r1, r1, #1
   143c6:	f006 f890 	bl	1a4ea <log_0>
			return -ENOTCONN;
   143ca:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   143ce:	e01d      	b.n	1440c <bt_conn_send_cb+0x68>
	if (cb) {
   143d0:	2a00      	cmp	r2, #0
   143d2:	d03a      	beq.n	1444a <bt_conn_send_cb+0xa6>
	return z_impl_k_current_get();
   143d4:	f005 f93a 	bl	1964c <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   143d8:	4b20      	ldr	r3, [pc, #128]	; (1445c <bt_conn_send_cb+0xb8>)
   143da:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   143dc:	4820      	ldr	r0, [pc, #128]	; (14460 <bt_conn_send_cb+0xbc>)
   143de:	bf07      	ittee	eq
   143e0:	2200      	moveq	r2, #0
   143e2:	2300      	moveq	r3, #0
   143e4:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
   143e8:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
   143ec:	f004 fbfc 	bl	18be8 <z_impl_k_queue_get>
   143f0:	4604      	mov	r4, r0
		if (!tx) {
   143f2:	b968      	cbnz	r0, 14410 <bt_conn_send_cb+0x6c>
   143f4:	4b17      	ldr	r3, [pc, #92]	; (14454 <bt_conn_send_cb+0xb0>)
   143f6:	4916      	ldr	r1, [pc, #88]	; (14450 <bt_conn_send_cb+0xac>)
			BT_ERR("Unable to allocate TX context");
   143f8:	481a      	ldr	r0, [pc, #104]	; (14464 <bt_conn_send_cb+0xc0>)
   143fa:	1ac9      	subs	r1, r1, r3
   143fc:	08c9      	lsrs	r1, r1, #3
   143fe:	0189      	lsls	r1, r1, #6
   14400:	f041 0101 	orr.w	r1, r1, #1
   14404:	f006 f871 	bl	1a4ea <log_0>
			return -ENOBUFS;
   14408:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   1440c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   14410:	7aab      	ldrb	r3, [r5, #10]
   14412:	2b07      	cmp	r3, #7
   14414:	d00d      	beq.n	14432 <bt_conn_send_cb+0x8e>
   14416:	4b0f      	ldr	r3, [pc, #60]	; (14454 <bt_conn_send_cb+0xb0>)
   14418:	490d      	ldr	r1, [pc, #52]	; (14450 <bt_conn_send_cb+0xac>)
			BT_WARN("Disconnected while allocating context");
   1441a:	4813      	ldr	r0, [pc, #76]	; (14468 <bt_conn_send_cb+0xc4>)
   1441c:	1ac9      	subs	r1, r1, r3
   1441e:	08c9      	lsrs	r1, r1, #3
   14420:	0189      	lsls	r1, r1, #6
   14422:	f041 0102 	orr.w	r1, r1, #2
   14426:	f006 f860 	bl	1a4ea <log_0>
			tx_free(tx);
   1442a:	4620      	mov	r0, r4
   1442c:	f7ff fe42 	bl	140b4 <tx_free>
   14430:	e7cb      	b.n	143ca <bt_conn_send_cb+0x26>
		tx->pending_no_cb = 0U;
   14432:	2300      	movs	r3, #0
		tx->user_data = user_data;
   14434:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
   14438:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   1443a:	6170      	str	r0, [r6, #20]
	net_buf_put(&conn->tx_queue, buf);
   1443c:	f105 0038 	add.w	r0, r5, #56	; 0x38
   14440:	4631      	mov	r1, r6
   14442:	f008 f930 	bl	1c6a6 <net_buf_put>
	return 0;
   14446:	2000      	movs	r0, #0
   14448:	e7e0      	b.n	1440c <bt_conn_send_cb+0x68>
		tx_data(buf)->tx = NULL;
   1444a:	614a      	str	r2, [r1, #20]
   1444c:	e7f6      	b.n	1443c <bt_conn_send_cb+0x98>
   1444e:	bf00      	nop
   14450:	0001d7a0 	.word	0x0001d7a0
   14454:	0001d788 	.word	0x0001d788
   14458:	0001f12c 	.word	0x0001f12c
   1445c:	20001a28 	.word	0x20001a28
   14460:	200006dc 	.word	0x200006dc
   14464:	0001f13b 	.word	0x0001f13b
   14468:	0001f159 	.word	0x0001f159

0001446c <bt_conn_prepare_events>:
	conn_change.signaled = 0U;
   1446c:	4b1b      	ldr	r3, [pc, #108]	; (144dc <bt_conn_prepare_events+0x70>)
{
   1446e:	b510      	push	{r4, lr}
	conn_change.signaled = 0U;
   14470:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   14472:	2101      	movs	r1, #1
	conn_change.signaled = 0U;
   14474:	609a      	str	r2, [r3, #8]
{
   14476:	4604      	mov	r4, r0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   14478:	f009 f816 	bl	1d4a8 <k_poll_event_init>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1447c:	f3bf 8f5b 	dmb	ish
   14480:	4b17      	ldr	r3, [pc, #92]	; (144e0 <bt_conn_prepare_events+0x74>)
   14482:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
   14486:	f3bf 8f5b 	dmb	ish
		if (!conn_prepare_events(conn, &events[ev_count])) {
   1448a:	f104 0014 	add.w	r0, r4, #20
	if (!atomic_get(&conn->ref)) {
   1448e:	b90a      	cbnz	r2, 14494 <bt_conn_prepare_events+0x28>
		conn_cleanup(conn);
   14490:	2001      	movs	r0, #1
}
   14492:	bd10      	pop	{r4, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   14494:	7a9a      	ldrb	r2, [r3, #10]
   14496:	b99a      	cbnz	r2, 144c0 <bt_conn_prepare_events+0x54>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14498:	f3bf 8f5b 	dmb	ish
   1449c:	1d1a      	adds	r2, r3, #4
   1449e:	e852 1f00 	ldrex	r1, [r2]
   144a2:	f021 0c40 	bic.w	ip, r1, #64	; 0x40
   144a6:	e842 ce00 	strex	lr, ip, [r2]
   144aa:	f1be 0f00 	cmp.w	lr, #0
   144ae:	d1f6      	bne.n	1449e <bt_conn_prepare_events+0x32>
   144b0:	f3bf 8f5b 	dmb	ish
   144b4:	064a      	lsls	r2, r1, #25
   144b6:	d503      	bpl.n	144c0 <bt_conn_prepare_events+0x54>
		conn_cleanup(conn);
   144b8:	4618      	mov	r0, r3
   144ba:	f007 f914 	bl	1b6e6 <conn_cleanup>
   144be:	e7e7      	b.n	14490 <bt_conn_prepare_events+0x24>
	if (conn->state != BT_CONN_CONNECTED) {
   144c0:	7a9b      	ldrb	r3, [r3, #10]
   144c2:	2b07      	cmp	r3, #7
   144c4:	d1e4      	bne.n	14490 <bt_conn_prepare_events+0x24>
	k_poll_event_init(&events[0],
   144c6:	4b07      	ldr	r3, [pc, #28]	; (144e4 <bt_conn_prepare_events+0x78>)
   144c8:	2200      	movs	r2, #0
   144ca:	2104      	movs	r1, #4
   144cc:	f008 ffec 	bl	1d4a8 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   144d0:	2301      	movs	r3, #1
   144d2:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
   144d6:	2002      	movs	r0, #2
	return ev_count;
   144d8:	e7db      	b.n	14492 <bt_conn_prepare_events+0x26>
   144da:	bf00      	nop
   144dc:	200004a0 	.word	0x200004a0
   144e0:	200014d8 	.word	0x200014d8
   144e4:	20001510 	.word	0x20001510

000144e8 <bt_conn_lookup_handle>:
{
   144e8:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   144ea:	2101      	movs	r1, #1
   144ec:	4801      	ldr	r0, [pc, #4]	; (144f4 <bt_conn_lookup_handle+0xc>)
   144ee:	f007 b94d 	b.w	1b78c <conn_lookup_handle>
   144f2:	bf00      	nop
   144f4:	200014d8 	.word	0x200014d8

000144f8 <bt_conn_set_state>:
{
   144f8:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
   144fa:	7a86      	ldrb	r6, [r0, #10]
   144fc:	428e      	cmp	r6, r1
{
   144fe:	4604      	mov	r4, r0
   14500:	460d      	mov	r5, r1
	if (conn->state == state) {
   14502:	d112      	bne.n	1452a <bt_conn_set_state+0x32>
   14504:	4b68      	ldr	r3, [pc, #416]	; (146a8 <bt_conn_set_state+0x1b0>)
   14506:	4a69      	ldr	r2, [pc, #420]	; (146ac <bt_conn_set_state+0x1b4>)
		BT_WARN("no transition %s", state2str(state));
   14508:	4869      	ldr	r0, [pc, #420]	; (146b0 <bt_conn_set_state+0x1b8>)
   1450a:	2e08      	cmp	r6, #8
   1450c:	eba2 0203 	sub.w	r2, r2, r3
   14510:	bf96      	itet	ls
   14512:	4b68      	ldrls	r3, [pc, #416]	; (146b4 <bt_conn_set_state+0x1bc>)
   14514:	4968      	ldrhi	r1, [pc, #416]	; (146b8 <bt_conn_set_state+0x1c0>)
   14516:	f853 1026 	ldrls.w	r1, [r3, r6, lsl #2]
   1451a:	08d2      	lsrs	r2, r2, #3
   1451c:	0192      	lsls	r2, r2, #6
   1451e:	f042 0202 	orr.w	r2, r2, #2
}
   14522:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no valid (%u) state was set", state);
   14526:	f005 bfed 	b.w	1a504 <log_1>
	conn->state = state;
   1452a:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
   1452c:	b926      	cbnz	r6, 14538 <bt_conn_set_state+0x40>
		if (conn->type != BT_CONN_TYPE_ISO) {
   1452e:	7883      	ldrb	r3, [r0, #2]
   14530:	2b08      	cmp	r3, #8
   14532:	d001      	beq.n	14538 <bt_conn_set_state+0x40>
			bt_conn_ref(conn);
   14534:	f007 f8f5 	bl	1b722 <bt_conn_ref>
	switch (conn->state) {
   14538:	7aa3      	ldrb	r3, [r4, #10]
   1453a:	2b08      	cmp	r3, #8
   1453c:	f200 80a9 	bhi.w	14692 <bt_conn_set_state+0x19a>
   14540:	e8df f003 	tbb	[pc, r3]
   14544:	b1b10538 	.word	0xb1b10538
   14548:	1cb1b1b1 	.word	0x1cb1b1b1
   1454c:	b1          	.byte	0xb1
   1454d:	00          	.byte	0x00
	z_impl_k_sem_give(sem);
   1454e:	4d5b      	ldr	r5, [pc, #364]	; (146bc <bt_conn_set_state+0x1c4>)
		tx->pending_no_cb = 0U;
   14550:	2600      	movs	r6, #0
	__asm__ volatile(
   14552:	f04f 0340 	mov.w	r3, #64	; 0x40
   14556:	f3ef 8211 	mrs	r2, BASEPRI
   1455a:	f383 8811 	msr	BASEPRI, r3
   1455e:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   14562:	69e3      	ldr	r3, [r4, #28]
   14564:	2b00      	cmp	r3, #0
   14566:	d075      	beq.n	14654 <bt_conn_set_state+0x15c>
			conn->pending_no_cb--;
   14568:	3b01      	subs	r3, #1
   1456a:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   1456c:	f382 8811 	msr	BASEPRI, r2
   14570:	f3bf 8f6f 	isb	sy
   14574:	4628      	mov	r0, r5
   14576:	f004 fb6b 	bl	18c50 <z_impl_k_sem_give>
}
   1457a:	e7ea      	b.n	14552 <bt_conn_set_state+0x5a>
		if (conn->type == BT_CONN_TYPE_SCO) {
   1457c:	78a3      	ldrb	r3, [r4, #2]
   1457e:	2b04      	cmp	r3, #4
   14580:	f000 8091 	beq.w	146a6 <bt_conn_set_state+0x1ae>
	z_impl_k_queue_init(queue);
   14584:	f104 0038 	add.w	r0, r4, #56	; 0x38
   14588:	f008 fb5c 	bl	1cc44 <z_impl_k_queue_init>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   1458c:	484c      	ldr	r0, [pc, #304]	; (146c0 <bt_conn_set_state+0x1c8>)
   1458e:	2100      	movs	r1, #0
   14590:	f005 fb00 	bl	19b94 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   14594:	2300      	movs	r3, #0
	list->tail = NULL;
   14596:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1459a:	78e3      	ldrb	r3, [r4, #3]
   1459c:	2b01      	cmp	r3, #1
   1459e:	f040 8082 	bne.w	146a6 <bt_conn_set_state+0x1ae>
			k_work_schedule(&conn->deferred_work,
   145a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
   145a6:	f44f 3220 	mov.w	r2, #163840	; 0x28000
}
   145aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
   145ae:	2300      	movs	r3, #0
   145b0:	f004 bd22 	b.w	18ff8 <k_work_schedule>
		if (conn->type == BT_CONN_TYPE_ISO) {
   145b4:	78a3      	ldrb	r3, [r4, #2]
   145b6:	2b08      	cmp	r3, #8
   145b8:	d075      	beq.n	146a6 <bt_conn_set_state+0x1ae>
		if (conn->type == BT_CONN_TYPE_SCO) {
   145ba:	2b04      	cmp	r3, #4
   145bc:	d104      	bne.n	145c8 <bt_conn_set_state+0xd0>
			bt_conn_unref(conn);
   145be:	4620      	mov	r0, r4
}
   145c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   145c4:	f007 b8c8 	b.w	1b758 <bt_conn_unref>
		switch (old_state) {
   145c8:	2e08      	cmp	r6, #8
   145ca:	d86c      	bhi.n	146a6 <bt_conn_set_state+0x1ae>
   145cc:	a301      	add	r3, pc, #4	; (adr r3, 145d4 <bt_conn_set_state+0xdc>)
   145ce:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   145d2:	bf00      	nop
   145d4:	00014641 	.word	0x00014641
   145d8:	000145f9 	.word	0x000145f9
   145dc:	00014633 	.word	0x00014633
   145e0:	000145bf 	.word	0x000145bf
   145e4:	000145bf 	.word	0x000145bf
   145e8:	00014633 	.word	0x00014633
   145ec:	00014633 	.word	0x00014633
   145f0:	00014641 	.word	0x00014641
   145f4:	00014641 	.word	0x00014641
			tx_notify(conn);
   145f8:	4620      	mov	r0, r4
   145fa:	f007 f845 	bl	1b688 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
   145fe:	78a3      	ldrb	r3, [r4, #2]
   14600:	2b01      	cmp	r3, #1
   14602:	d103      	bne.n	1460c <bt_conn_set_state+0x114>
				k_work_cancel_delayable(&conn->deferred_work);
   14604:	f104 0058 	add.w	r0, r4, #88	; 0x58
   14608:	f008 fc2b 	bl	1ce62 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1460c:	f3bf 8f5b 	dmb	ish
   14610:	3404      	adds	r4, #4
   14612:	e854 3f00 	ldrex	r3, [r4]
   14616:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1461a:	e844 3200 	strex	r2, r3, [r4]
   1461e:	2a00      	cmp	r2, #0
   14620:	d1f7      	bne.n	14612 <bt_conn_set_state+0x11a>
   14622:	f3bf 8f5b 	dmb	ish
   14626:	4826      	ldr	r0, [pc, #152]	; (146c0 <bt_conn_set_state+0x1c8>)
}
   14628:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1462c:	2100      	movs	r1, #0
   1462e:	f005 bab1 	b.w	19b94 <z_impl_k_poll_signal_raise>
			if (conn->err) {
   14632:	7a63      	ldrb	r3, [r4, #9]
   14634:	2b00      	cmp	r3, #0
   14636:	d0c2      	beq.n	145be <bt_conn_set_state+0xc6>
				notify_connected(conn);
   14638:	4620      	mov	r0, r4
   1463a:	f7ff fd45 	bl	140c8 <notify_connected>
   1463e:	e7be      	b.n	145be <bt_conn_set_state+0xc6>
   14640:	4a1a      	ldr	r2, [pc, #104]	; (146ac <bt_conn_set_state+0x1b4>)
   14642:	4b19      	ldr	r3, [pc, #100]	; (146a8 <bt_conn_set_state+0x1b0>)
			BT_WARN("Invalid (%u) old state", state);
   14644:	481f      	ldr	r0, [pc, #124]	; (146c4 <bt_conn_set_state+0x1cc>)
   14646:	1ad2      	subs	r2, r2, r3
   14648:	08d2      	lsrs	r2, r2, #3
   1464a:	0192      	lsls	r2, r2, #6
   1464c:	f042 0202 	orr.w	r2, r2, #2
   14650:	4629      	mov	r1, r5
   14652:	e766      	b.n	14522 <bt_conn_set_state+0x2a>
	return list->head;
   14654:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   14656:	b128      	cbz	r0, 14664 <bt_conn_set_state+0x16c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   14658:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   1465a:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   1465c:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1465e:	4288      	cmp	r0, r1
	list->tail = node;
   14660:	bf08      	it	eq
   14662:	61a3      	streq	r3, [r4, #24]
   14664:	f382 8811 	msr	BASEPRI, r2
   14668:	f3bf 8f6f 	isb	sy
		if (!node) {
   1466c:	b1d8      	cbz	r0, 146a6 <bt_conn_set_state+0x1ae>
	__asm__ volatile(
   1466e:	f04f 0240 	mov.w	r2, #64	; 0x40
   14672:	f3ef 8311 	mrs	r3, BASEPRI
   14676:	f382 8811 	msr	BASEPRI, r2
   1467a:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   1467e:	68c2      	ldr	r2, [r0, #12]
   14680:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   14682:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
   14684:	f383 8811 	msr	BASEPRI, r3
   14688:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   1468c:	f7ff fd12 	bl	140b4 <tx_free>
   14690:	e770      	b.n	14574 <bt_conn_set_state+0x7c>
   14692:	4a06      	ldr	r2, [pc, #24]	; (146ac <bt_conn_set_state+0x1b4>)
   14694:	4b04      	ldr	r3, [pc, #16]	; (146a8 <bt_conn_set_state+0x1b0>)
		BT_WARN("no valid (%u) state was set", state);
   14696:	480c      	ldr	r0, [pc, #48]	; (146c8 <bt_conn_set_state+0x1d0>)
   14698:	1ad2      	subs	r2, r2, r3
   1469a:	08d2      	lsrs	r2, r2, #3
   1469c:	0192      	lsls	r2, r2, #6
   1469e:	f042 0202 	orr.w	r2, r2, #2
   146a2:	4629      	mov	r1, r5
   146a4:	e73d      	b.n	14522 <bt_conn_set_state+0x2a>
}
   146a6:	bd70      	pop	{r4, r5, r6, pc}
   146a8:	0001d788 	.word	0x0001d788
   146ac:	0001d7a0 	.word	0x0001d7a0
   146b0:	0001f189 	.word	0x0001f189
   146b4:	0001db74 	.word	0x0001db74
   146b8:	0001f17f 	.word	0x0001f17f
   146bc:	200003b8 	.word	0x200003b8
   146c0:	200004a0 	.word	0x200004a0
   146c4:	0001f19a 	.word	0x0001f19a
   146c8:	0001f1b1 	.word	0x0001f1b1

000146cc <bt_conn_index>:
		index = conn - acl_conns;
   146cc:	4b03      	ldr	r3, [pc, #12]	; (146dc <bt_conn_index+0x10>)
   146ce:	1ac0      	subs	r0, r0, r3
   146d0:	4b03      	ldr	r3, [pc, #12]	; (146e0 <bt_conn_index+0x14>)
   146d2:	1180      	asrs	r0, r0, #6
   146d4:	4358      	muls	r0, r3
}
   146d6:	b2c0      	uxtb	r0, r0
   146d8:	4770      	bx	lr
   146da:	bf00      	nop
   146dc:	200014d8 	.word	0x200014d8
   146e0:	aaaaaaab 	.word	0xaaaaaaab

000146e4 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   146e4:	b570      	push	{r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   146e6:	f3bf 8f5b 	dmb	ish
   146ea:	6842      	ldr	r2, [r0, #4]
   146ec:	f3bf 8f5b 	dmb	ish
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send slave conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   146f0:	0592      	lsls	r2, r2, #22
{
   146f2:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   146f4:	f100 0304 	add.w	r3, r0, #4
   146f8:	d519      	bpl.n	1472e <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
   146fa:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   146fe:	f8b0 10a0 	ldrh.w	r1, [r0, #160]	; 0xa0
   14702:	4291      	cmp	r1, r2
   14704:	d813      	bhi.n	1472e <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
   14706:	f8b0 10a2 	ldrh.w	r1, [r0, #162]	; 0xa2
   1470a:	4291      	cmp	r1, r2
   1470c:	d30f      	bcc.n	1472e <notify_le_param_updated+0x4a>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   1470e:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
   14712:	4291      	cmp	r1, r2
   14714:	d10b      	bne.n	1472e <notify_le_param_updated+0x4a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14716:	f3bf 8f5b 	dmb	ish
   1471a:	e853 2f00 	ldrex	r2, [r3]
   1471e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   14722:	e843 2100 	strex	r1, r2, [r3]
   14726:	2900      	cmp	r1, #0
   14728:	d1f7      	bne.n	1471a <notify_le_param_updated+0x36>
   1472a:	f3bf 8f5b 	dmb	ish
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   1472e:	4b08      	ldr	r3, [pc, #32]	; (14750 <notify_le_param_updated+0x6c>)
   14730:	681d      	ldr	r5, [r3, #0]
   14732:	b905      	cbnz	r5, 14736 <notify_le_param_updated+0x52>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   14734:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
   14736:	68ee      	ldr	r6, [r5, #12]
   14738:	b13e      	cbz	r6, 1474a <notify_le_param_updated+0x66>
			cb->le_param_updated(conn, conn->le.interval,
   1473a:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   1473e:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   14742:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   14746:	4620      	mov	r0, r4
   14748:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   1474a:	692d      	ldr	r5, [r5, #16]
   1474c:	e7f1      	b.n	14732 <notify_le_param_updated+0x4e>
   1474e:	bf00      	nop
   14750:	20002418 	.word	0x20002418

00014754 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   14754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14756:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   14758:	4608      	mov	r0, r1
{
   1475a:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   1475c:	f006 fdf4 	bl	1b348 <bt_le_conn_params_valid>
   14760:	4604      	mov	r4, r0
   14762:	b910      	cbnz	r0, 1476a <le_param_req+0x16>
		return false;
   14764:	2400      	movs	r4, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   14766:	4620      	mov	r0, r4
   14768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   1476a:	4b09      	ldr	r3, [pc, #36]	; (14790 <le_param_req+0x3c>)
   1476c:	681e      	ldr	r6, [r3, #0]
   1476e:	2e00      	cmp	r6, #0
   14770:	d0f9      	beq.n	14766 <le_param_req+0x12>
		if (!cb->le_param_req) {
   14772:	68b3      	ldr	r3, [r6, #8]
   14774:	b90b      	cbnz	r3, 1477a <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
   14776:	6936      	ldr	r6, [r6, #16]
   14778:	e7f9      	b.n	1476e <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
   1477a:	4629      	mov	r1, r5
   1477c:	4638      	mov	r0, r7
   1477e:	4798      	blx	r3
   14780:	2800      	cmp	r0, #0
   14782:	d0ef      	beq.n	14764 <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
   14784:	4628      	mov	r0, r5
   14786:	f006 fddf 	bl	1b348 <bt_le_conn_params_valid>
   1478a:	2800      	cmp	r0, #0
   1478c:	d1f3      	bne.n	14776 <le_param_req+0x22>
   1478e:	e7e9      	b.n	14764 <le_param_req+0x10>
   14790:	20002418 	.word	0x20002418

00014794 <bt_conn_cb_register>:
}
#endif /* CONFIG_BT_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
   14794:	4b02      	ldr	r3, [pc, #8]	; (147a0 <bt_conn_cb_register+0xc>)
   14796:	681a      	ldr	r2, [r3, #0]
   14798:	6102      	str	r2, [r0, #16]
	callback_list = cb;
   1479a:	6018      	str	r0, [r3, #0]
}
   1479c:	4770      	bx	lr
   1479e:	bf00      	nop
   147a0:	20002418 	.word	0x20002418

000147a4 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   147a4:	b570      	push	{r4, r5, r6, lr}
   147a6:	4606      	mov	r6, r0
   147a8:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   147aa:	4809      	ldr	r0, [pc, #36]	; (147d0 <bt_conn_add_le+0x2c>)
   147ac:	2101      	movs	r1, #1
   147ae:	f7ff fd3f 	bl	14230 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   147b2:	4604      	mov	r4, r0
   147b4:	b150      	cbz	r0, 147cc <bt_conn_add_le+0x28>
		return NULL;
	}

	conn->id = id;
   147b6:	7206      	strb	r6, [r0, #8]
	memcpy(dst, src, sizeof(*dst));
   147b8:	2207      	movs	r2, #7
   147ba:	4629      	mov	r1, r5
   147bc:	3088      	adds	r0, #136	; 0x88
   147be:	f006 fcfb 	bl	1b1b8 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   147c2:	2301      	movs	r3, #1
   147c4:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   147c6:	4b03      	ldr	r3, [pc, #12]	; (147d4 <bt_conn_add_le+0x30>)
   147c8:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   147cc:	4620      	mov	r0, r4
   147ce:	bd70      	pop	{r4, r5, r6, pc}
   147d0:	200014d8 	.word	0x200014d8
   147d4:	00280018 	.word	0x00280018

000147d8 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   147d8:	b570      	push	{r4, r5, r6, lr}
   147da:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   147dc:	480c      	ldr	r0, [pc, #48]	; (14810 <bt_conn_lookup_addr_le+0x38>)
{
   147de:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   147e0:	f006 ff9f 	bl	1b722 <bt_conn_ref>

		if (!conn) {
   147e4:	4604      	mov	r4, r0
   147e6:	b128      	cbz	r0, 147f4 <bt_conn_lookup_addr_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   147e8:	7883      	ldrb	r3, [r0, #2]
   147ea:	2b01      	cmp	r3, #1
   147ec:	d004      	beq.n	147f8 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
   147ee:	f006 ffb3 	bl	1b758 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   147f2:	2400      	movs	r4, #0
}
   147f4:	4620      	mov	r0, r4
   147f6:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   147f8:	4629      	mov	r1, r5
   147fa:	4632      	mov	r2, r6
   147fc:	f006 fff3 	bl	1b7e6 <bt_conn_is_peer_addr_le>
   14800:	4605      	mov	r5, r0
   14802:	2800      	cmp	r0, #0
   14804:	d1f6      	bne.n	147f4 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   14806:	4620      	mov	r0, r4
   14808:	f006 ffa6 	bl	1b758 <bt_conn_unref>
	return NULL;
   1480c:	462c      	mov	r4, r5
			continue;
   1480e:	e7f1      	b.n	147f4 <bt_conn_lookup_addr_le+0x1c>
   14810:	200014d8 	.word	0x200014d8

00014814 <bt_conn_exists_le>:
{
   14814:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   14816:	f7ff ffdf 	bl	147d8 <bt_conn_lookup_addr_le>
	if (conn) {
   1481a:	4604      	mov	r4, r0
   1481c:	b1a0      	cbz	r0, 14848 <bt_conn_exists_le+0x34>
   1481e:	4b0b      	ldr	r3, [pc, #44]	; (1484c <bt_conn_exists_le+0x38>)
   14820:	4a0b      	ldr	r2, [pc, #44]	; (14850 <bt_conn_exists_le+0x3c>)
   14822:	1ad2      	subs	r2, r2, r3
		BT_WARN("Found valid connection in %s state",
   14824:	7a83      	ldrb	r3, [r0, #10]
   14826:	480b      	ldr	r0, [pc, #44]	; (14854 <bt_conn_exists_le+0x40>)
   14828:	2b08      	cmp	r3, #8
   1482a:	bf96      	itet	ls
   1482c:	490a      	ldrls	r1, [pc, #40]	; (14858 <bt_conn_exists_le+0x44>)
   1482e:	490b      	ldrhi	r1, [pc, #44]	; (1485c <bt_conn_exists_le+0x48>)
   14830:	f851 1023 	ldrls.w	r1, [r1, r3, lsl #2]
   14834:	08d2      	lsrs	r2, r2, #3
   14836:	0192      	lsls	r2, r2, #6
   14838:	f042 0202 	orr.w	r2, r2, #2
   1483c:	f005 fe62 	bl	1a504 <log_1>
		bt_conn_unref(conn);
   14840:	4620      	mov	r0, r4
   14842:	f006 ff89 	bl	1b758 <bt_conn_unref>
		return true;
   14846:	2001      	movs	r0, #1
}
   14848:	bd10      	pop	{r4, pc}
   1484a:	bf00      	nop
   1484c:	0001d788 	.word	0x0001d788
   14850:	0001d7a0 	.word	0x0001d7a0
   14854:	0001f1cd 	.word	0x0001f1cd
   14858:	0001db74 	.word	0x0001db74
   1485c:	0001f17f 	.word	0x0001f17f

00014860 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   14860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14862:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   14864:	480e      	ldr	r0, [pc, #56]	; (148a0 <bt_conn_lookup_state_le+0x40>)
{
   14866:	460e      	mov	r6, r1
   14868:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1486a:	f006 ff5a 	bl	1b722 <bt_conn_ref>

		if (!conn) {
   1486e:	4604      	mov	r4, r0
   14870:	b1a0      	cbz	r0, 1489c <bt_conn_lookup_state_le+0x3c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   14872:	7883      	ldrb	r3, [r0, #2]
   14874:	2b01      	cmp	r3, #1
   14876:	d003      	beq.n	14880 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   14878:	f006 ff6e 	bl	1b758 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   1487c:	2400      	movs	r4, #0
			continue;
   1487e:	e00d      	b.n	1489c <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   14880:	b136      	cbz	r6, 14890 <bt_conn_lookup_state_le+0x30>
   14882:	4632      	mov	r2, r6
   14884:	4629      	mov	r1, r5
   14886:	f006 ffae 	bl	1b7e6 <bt_conn_is_peer_addr_le>
   1488a:	b908      	cbnz	r0, 14890 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   1488c:	4620      	mov	r0, r4
   1488e:	e7f3      	b.n	14878 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   14890:	7aa3      	ldrb	r3, [r4, #10]
   14892:	42bb      	cmp	r3, r7
   14894:	d1fa      	bne.n	1488c <bt_conn_lookup_state_le+0x2c>
   14896:	7a23      	ldrb	r3, [r4, #8]
   14898:	42ab      	cmp	r3, r5
   1489a:	d1f7      	bne.n	1488c <bt_conn_lookup_state_le+0x2c>
}
   1489c:	4620      	mov	r0, r4
   1489e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   148a0:	200014d8 	.word	0x200014d8

000148a4 <bt_conn_get_info>:
{
	return &conn->le.dst;
}

int bt_conn_get_info(const struct bt_conn *conn, struct bt_conn_info *info)
{
   148a4:	b510      	push	{r4, lr}
	info->type = conn->type;
   148a6:	7882      	ldrb	r2, [r0, #2]
   148a8:	700a      	strb	r2, [r1, #0]
	info->role = conn->role;
   148aa:	78c4      	ldrb	r4, [r0, #3]
   148ac:	704c      	strb	r4, [r1, #1]
	info->id = conn->id;
   148ae:	7a03      	ldrb	r3, [r0, #8]
   148b0:	708b      	strb	r3, [r1, #2]

	switch (conn->type) {
   148b2:	2a01      	cmp	r2, #1
   148b4:	d11c      	bne.n	148f0 <bt_conn_get_info+0x4c>
	case BT_CONN_TYPE_LE:
		info->le.dst = &conn->le.dst;
   148b6:	f100 0288 	add.w	r2, r0, #136	; 0x88
   148ba:	608a      	str	r2, [r1, #8]
		info->le.src = &bt_dev.id_addr[conn->id];
   148bc:	4a0e      	ldr	r2, [pc, #56]	; (148f8 <bt_conn_get_info+0x54>)
   148be:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   148c2:	4413      	add	r3, r2
   148c4:	604b      	str	r3, [r1, #4]
		if (conn->role == BT_HCI_ROLE_MASTER) {
			info->le.local = &conn->le.init_addr;
			info->le.remote = &conn->le.resp_addr;
   148c6:	f100 0296 	add.w	r2, r0, #150	; 0x96
			info->le.local = &conn->le.init_addr;
   148ca:	f100 038f 	add.w	r3, r0, #143	; 0x8f
		if (conn->role == BT_HCI_ROLE_MASTER) {
   148ce:	b964      	cbnz	r4, 148ea <bt_conn_get_info+0x46>
			info->le.remote = &conn->le.resp_addr;
   148d0:	e9c1 3203 	strd	r3, r2, [r1, #12]
		} else {
			info->le.local = &conn->le.resp_addr;
			info->le.remote = &conn->le.init_addr;
		}
		info->le.interval = conn->le.interval;
   148d4:	f8b0 309e 	ldrh.w	r3, [r0, #158]	; 0x9e
   148d8:	828b      	strh	r3, [r1, #20]
		info->le.latency = conn->le.latency;
   148da:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
   148de:	82cb      	strh	r3, [r1, #22]
		info->le.timeout = conn->le.timeout;
   148e0:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
   148e4:	830b      	strh	r3, [r1, #24]
		info->le.phy = &conn->le.phy;
#endif
#if defined(CONFIG_BT_USER_DATA_LEN_UPDATE)
		info->le.data_len = &conn->le.data_len;
#endif
		return 0;
   148e6:	2000      	movs	r0, #0
		return 0;
#endif
	}

	return -EINVAL;
}
   148e8:	bd10      	pop	{r4, pc}
			info->le.remote = &conn->le.init_addr;
   148ea:	e9c1 2303 	strd	r2, r3, [r1, #12]
   148ee:	e7f1      	b.n	148d4 <bt_conn_get_info+0x30>
	return -EINVAL;
   148f0:	f06f 0015 	mvn.w	r0, #21
   148f4:	e7f8      	b.n	148e8 <bt_conn_get_info+0x44>
   148f6:	bf00      	nop
   148f8:	200002b8 	.word	0x200002b8

000148fc <send_conn_le_param_update>:
{
   148fc:	b538      	push	{r3, r4, r5, lr}
   148fe:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   14900:	4608      	mov	r0, r1
{
   14902:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   14904:	f006 fd20 	bl	1b348 <bt_le_conn_params_valid>
   14908:	b318      	cbz	r0, 14952 <send_conn_le_param_update+0x56>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   1490a:	4b13      	ldr	r3, [pc, #76]	; (14958 <send_conn_le_param_update+0x5c>)
   1490c:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   14910:	0799      	lsls	r1, r3, #30
   14912:	d407      	bmi.n	14924 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
   14914:	78e3      	ldrb	r3, [r4, #3]
   14916:	b183      	cbz	r3, 1493a <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
   14918:	4629      	mov	r1, r5
   1491a:	4620      	mov	r0, r4
}
   1491c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   14920:	f000 bace 	b.w	14ec0 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   14924:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
   14928:	079a      	lsls	r2, r3, #30
   1492a:	d5f3      	bpl.n	14914 <send_conn_le_param_update+0x18>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1492c:	f3bf 8f5b 	dmb	ish
   14930:	6863      	ldr	r3, [r4, #4]
   14932:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   14936:	055b      	lsls	r3, r3, #21
   14938:	d4ec      	bmi.n	14914 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   1493a:	4629      	mov	r1, r5
   1493c:	4620      	mov	r0, r4
   1493e:	f006 ff74 	bl	1b82a <bt_conn_le_conn_update>
		if (rc == 0) {
   14942:	b928      	cbnz	r0, 14950 <send_conn_le_param_update+0x54>
			conn->le.pending_latency = param->latency;
   14944:	88ab      	ldrh	r3, [r5, #4]
   14946:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   1494a:	88eb      	ldrh	r3, [r5, #6]
   1494c:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   14950:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   14952:	f06f 0015 	mvn.w	r0, #21
   14956:	e7fb      	b.n	14950 <send_conn_le_param_update+0x54>
   14958:	200002b8 	.word	0x200002b8

0001495c <deferred_work>:
{
   1495c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   1495e:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
{
   14962:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
   14964:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   14968:	b99b      	cbnz	r3, 14992 <deferred_work+0x36>
		bt_l2cap_disconnected(conn);
   1496a:	4630      	mov	r0, r6
   1496c:	f006 ffbf 	bl	1b8ee <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   14970:	4b26      	ldr	r3, [pc, #152]	; (14a0c <deferred_work+0xb0>)
   14972:	681d      	ldr	r5, [r3, #0]
   14974:	b92d      	cbnz	r5, 14982 <deferred_work+0x26>
		bt_conn_unref(conn);
   14976:	4630      	mov	r0, r6
}
   14978:	b002      	add	sp, #8
   1497a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_unref(conn);
   1497e:	f006 beeb 	b.w	1b758 <bt_conn_unref>
		if (cb->disconnected) {
   14982:	686b      	ldr	r3, [r5, #4]
   14984:	b11b      	cbz	r3, 1498e <deferred_work+0x32>
			cb->disconnected(conn, conn->err);
   14986:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
   1498a:	4630      	mov	r0, r6
   1498c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1498e:	692d      	ldr	r5, [r5, #16]
   14990:	e7f0      	b.n	14974 <deferred_work+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
   14992:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   14996:	2b01      	cmp	r3, #1
   14998:	d12f      	bne.n	149fa <deferred_work+0x9e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1499a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(conn->flags,
   1499e:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
   149a2:	e855 3f00 	ldrex	r3, [r5]
   149a6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
   149aa:	e845 2100 	strex	r1, r2, [r5]
   149ae:	2900      	cmp	r1, #0
   149b0:	d1f7      	bne.n	149a2 <deferred_work+0x46>
   149b2:	f3bf 8f5b 	dmb	ish
   149b6:	059b      	lsls	r3, r3, #22
   149b8:	d521      	bpl.n	149fe <deferred_work+0xa2>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   149ba:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   149be:	f8ad 3000 	strh.w	r3, [sp]
   149c2:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
   149c6:	f8ad 3002 	strh.w	r3, [sp, #2]
   149ca:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
   149ce:	f8ad 3004 	strh.w	r3, [sp, #4]
   149d2:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
   149d6:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
   149da:	4669      	mov	r1, sp
   149dc:	4630      	mov	r0, r6
   149de:	f7ff ff8d 	bl	148fc <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   149e2:	f3bf 8f5b 	dmb	ish
   149e6:	e855 3f00 	ldrex	r3, [r5]
   149ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   149ee:	e845 3200 	strex	r2, r3, [r5]
   149f2:	2a00      	cmp	r2, #0
   149f4:	d1f7      	bne.n	149e6 <deferred_work+0x8a>
   149f6:	f3bf 8f5b 	dmb	ish
}
   149fa:	b002      	add	sp, #8
   149fc:	bd70      	pop	{r4, r5, r6, pc}
		param = BT_LE_CONN_PARAM(
   149fe:	4a04      	ldr	r2, [pc, #16]	; (14a10 <deferred_work+0xb4>)
   14a00:	6810      	ldr	r0, [r2, #0]
   14a02:	6851      	ldr	r1, [r2, #4]
   14a04:	466b      	mov	r3, sp
   14a06:	c303      	stmia	r3!, {r0, r1}
   14a08:	e7e7      	b.n	149da <deferred_work+0x7e>
   14a0a:	bf00      	nop
   14a0c:	20002418 	.word	0x20002418
   14a10:	0001d918 	.word	0x0001d918

00014a14 <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
   14a14:	b538      	push	{r3, r4, r5, lr}
   14a16:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
   14a18:	490c      	ldr	r1, [pc, #48]	; (14a4c <bt_conn_create_pdu_timeout+0x38>)
   14a1a:	2800      	cmp	r0, #0
   14a1c:	bf08      	it	eq
   14a1e:	4608      	moveq	r0, r1
   14a20:	f007 fe1e 	bl	1c660 <net_buf_alloc_fixed>
#else
		buf = net_buf_alloc(pool, timeout);
#endif
	}

	if (!buf) {
   14a24:	4604      	mov	r4, r0
   14a26:	b958      	cbnz	r0, 14a40 <bt_conn_create_pdu_timeout+0x2c>
   14a28:	4909      	ldr	r1, [pc, #36]	; (14a50 <bt_conn_create_pdu_timeout+0x3c>)
   14a2a:	4b0a      	ldr	r3, [pc, #40]	; (14a54 <bt_conn_create_pdu_timeout+0x40>)
		BT_WARN("Unable to allocate buffer within timeout");
   14a2c:	480a      	ldr	r0, [pc, #40]	; (14a58 <bt_conn_create_pdu_timeout+0x44>)
   14a2e:	1ac9      	subs	r1, r1, r3
   14a30:	08c9      	lsrs	r1, r1, #3
   14a32:	0189      	lsls	r1, r1, #6
   14a34:	f041 0102 	orr.w	r1, r1, #2
   14a38:	f005 fd57 	bl	1a4ea <log_0>

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);

	return buf;
}
   14a3c:	4620      	mov	r0, r4
   14a3e:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_simple_reserve(&buf->b, reserve);
   14a40:	1d29      	adds	r1, r5, #4
   14a42:	3008      	adds	r0, #8
   14a44:	f007 fe2b 	bl	1c69e <net_buf_simple_reserve>
	return buf;
   14a48:	e7f8      	b.n	14a3c <bt_conn_create_pdu_timeout+0x28>
   14a4a:	bf00      	nop
   14a4c:	200006f4 	.word	0x200006f4
   14a50:	0001d7a0 	.word	0x0001d7a0
   14a54:	0001d788 	.word	0x0001d788
   14a58:	0001f1f0 	.word	0x0001f1f0

00014a5c <bt_conn_create_frag_timeout>:
{
   14a5c:	4601      	mov	r1, r0
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   14a5e:	4801      	ldr	r0, [pc, #4]	; (14a64 <bt_conn_create_frag_timeout+0x8>)
   14a60:	f7ff bfd8 	b.w	14a14 <bt_conn_create_pdu_timeout>
   14a64:	20000744 	.word	0x20000744

00014a68 <create_frag>:
{
   14a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14a6c:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   14a6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14a72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14a76:	2000      	movs	r0, #0
{
   14a78:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   14a7a:	f7ff ffef 	bl	14a5c <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   14a7e:	7ab3      	ldrb	r3, [r6, #10]
   14a80:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   14a82:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   14a84:	f04f 0600 	mov.w	r6, #0
   14a88:	d005      	beq.n	14a96 <create_frag+0x2e>
		net_buf_unref(frag);
   14a8a:	f002 f83d 	bl	16b08 <net_buf_unref>
		return NULL;
   14a8e:	4635      	mov	r5, r6
}
   14a90:	4628      	mov	r0, r5
   14a92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   14a96:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
   14a98:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   14a9c:	4e0c      	ldr	r6, [pc, #48]	; (14ad0 <create_frag+0x68>)
   14a9e:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   14aa0:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
   14aa4:	f007 fe6d 	bl	1c782 <net_buf_simple_tailroom>
   14aa8:	4580      	cmp	r8, r0
   14aaa:	d20c      	bcs.n	14ac6 <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
   14aac:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   14ab0:	f854 1f08 	ldr.w	r1, [r4, #8]!
   14ab4:	4632      	mov	r2, r6
   14ab6:	4638      	mov	r0, r7
   14ab8:	f007 fe2e 	bl	1c718 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   14abc:	4631      	mov	r1, r6
   14abe:	4620      	mov	r0, r4
   14ac0:	f007 fe43 	bl	1c74a <net_buf_simple_pull>
   14ac4:	e7e4      	b.n	14a90 <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
   14ac6:	4638      	mov	r0, r7
   14ac8:	f007 fe5b 	bl	1c782 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   14acc:	b286      	uxth	r6, r0
   14ace:	e7ef      	b.n	14ab0 <create_frag+0x48>
   14ad0:	200002b8 	.word	0x200002b8

00014ad4 <bt_conn_process_tx>:
{
   14ad4:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   14ad6:	7a83      	ldrb	r3, [r0, #10]
{
   14ad8:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   14ada:	b993      	cbnz	r3, 14b02 <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14adc:	f3bf 8f5b 	dmb	ish
   14ae0:	1d03      	adds	r3, r0, #4
   14ae2:	e853 2f00 	ldrex	r2, [r3]
   14ae6:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   14aea:	e843 1500 	strex	r5, r1, [r3]
   14aee:	2d00      	cmp	r5, #0
   14af0:	d1f7      	bne.n	14ae2 <bt_conn_process_tx+0xe>
   14af2:	f3bf 8f5b 	dmb	ish
   14af6:	0653      	lsls	r3, r2, #25
   14af8:	d503      	bpl.n	14b02 <bt_conn_process_tx+0x2e>
}
   14afa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
   14afe:	f006 bdf2 	b.w	1b6e6 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   14b02:	2200      	movs	r2, #0
   14b04:	2300      	movs	r3, #0
   14b06:	f104 0038 	add.w	r0, r4, #56	; 0x38
   14b0a:	f007 fdae 	bl	1c66a <net_buf_get>
	BT_ASSERT(buf);
   14b0e:	4605      	mov	r5, r0
   14b10:	b960      	cbnz	r0, 14b2c <bt_conn_process_tx+0x58>
   14b12:	4a1f      	ldr	r2, [pc, #124]	; (14b90 <bt_conn_process_tx+0xbc>)
   14b14:	491f      	ldr	r1, [pc, #124]	; (14b94 <bt_conn_process_tx+0xc0>)
   14b16:	4820      	ldr	r0, [pc, #128]	; (14b98 <bt_conn_process_tx+0xc4>)
   14b18:	f240 23c6 	movw	r3, #710	; 0x2c6
   14b1c:	f005 f8cb 	bl	19cb6 <printk>
   14b20:	4040      	eors	r0, r0
   14b22:	f380 8811 	msr	BASEPRI, r0
   14b26:	f04f 0003 	mov.w	r0, #3
   14b2a:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   14b2c:	4e1b      	ldr	r6, [pc, #108]	; (14b9c <bt_conn_process_tx+0xc8>)
	if (buf->len <= conn_mtu(conn)) {
   14b2e:	89aa      	ldrh	r2, [r5, #12]
   14b30:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   14b34:	429a      	cmp	r2, r3
   14b36:	d807      	bhi.n	14b48 <bt_conn_process_tx+0x74>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   14b38:	2300      	movs	r3, #0
   14b3a:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   14b3c:	4629      	mov	r1, r5
   14b3e:	4620      	mov	r0, r4
   14b40:	f7ff fad8 	bl	140f4 <send_frag>
	if (!send_buf(conn, buf)) {
   14b44:	b130      	cbz	r0, 14b54 <bt_conn_process_tx+0x80>
}
   14b46:	bd70      	pop	{r4, r5, r6, pc}
	frag = create_frag(conn, buf);
   14b48:	4629      	mov	r1, r5
   14b4a:	4620      	mov	r0, r4
   14b4c:	f7ff ff8c 	bl	14a68 <create_frag>
	if (!frag) {
   14b50:	4601      	mov	r1, r0
   14b52:	b920      	cbnz	r0, 14b5e <bt_conn_process_tx+0x8a>
		net_buf_unref(buf);
   14b54:	4628      	mov	r0, r5
}
   14b56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
   14b5a:	f001 bfd5 	b.w	16b08 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   14b5e:	2301      	movs	r3, #1
   14b60:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   14b62:	4620      	mov	r0, r4
   14b64:	f7ff fac6 	bl	140f4 <send_frag>
   14b68:	2800      	cmp	r0, #0
   14b6a:	d0f3      	beq.n	14b54 <bt_conn_process_tx+0x80>
	while (buf->len > conn_mtu(conn)) {
   14b6c:	89aa      	ldrh	r2, [r5, #12]
   14b6e:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   14b72:	429a      	cmp	r2, r3
   14b74:	d802      	bhi.n	14b7c <bt_conn_process_tx+0xa8>
	return send_frag(conn, buf, FRAG_END, false);
   14b76:	2300      	movs	r3, #0
   14b78:	2203      	movs	r2, #3
   14b7a:	e7df      	b.n	14b3c <bt_conn_process_tx+0x68>
		frag = create_frag(conn, buf);
   14b7c:	4629      	mov	r1, r5
   14b7e:	4620      	mov	r0, r4
   14b80:	f7ff ff72 	bl	14a68 <create_frag>
		if (!frag) {
   14b84:	4601      	mov	r1, r0
   14b86:	2800      	cmp	r0, #0
   14b88:	d0e4      	beq.n	14b54 <bt_conn_process_tx+0x80>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   14b8a:	2301      	movs	r3, #1
   14b8c:	461a      	mov	r2, r3
   14b8e:	e7e8      	b.n	14b62 <bt_conn_process_tx+0x8e>
   14b90:	0001f219 	.word	0x0001f219
   14b94:	0001e85d 	.word	0x0001e85d
   14b98:	0001eaa1 	.word	0x0001eaa1
   14b9c:	200002b8 	.word	0x200002b8

00014ba0 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   14ba0:	b570      	push	{r4, r5, r6, lr}
   14ba2:	4d0b      	ldr	r5, [pc, #44]	; (14bd0 <bt_conn_init+0x30>)
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   14ba4:	4e0b      	ldr	r6, [pc, #44]	; (14bd4 <bt_conn_init+0x34>)
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
   14ba6:	2400      	movs	r4, #0
		k_fifo_put(&free_tx, &conn_tx[i]);
   14ba8:	4629      	mov	r1, r5
   14baa:	4630      	mov	r0, r6
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
   14bac:	3401      	adds	r4, #1
		k_fifo_put(&free_tx, &conn_tx[i]);
   14bae:	f008 f855 	bl	1cc5c <k_queue_append>
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
   14bb2:	2c05      	cmp	r4, #5
   14bb4:	f105 0510 	add.w	r5, r5, #16
   14bb8:	d1f6      	bne.n	14ba8 <bt_conn_init+0x8>
	}

	bt_att_init();
   14bba:	f007 fa55 	bl	1c068 <bt_att_init>

	err = bt_smp_init();
   14bbe:	f007 fd4c 	bl	1c65a <bt_smp_init>
	if (err) {
   14bc2:	4604      	mov	r4, r0
   14bc4:	b908      	cbnz	r0, 14bca <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
   14bc6:	f006 fee4 	bl	1b992 <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   14bca:	4620      	mov	r0, r4
   14bcc:	bd70      	pop	{r4, r5, r6, pc}
   14bce:	bf00      	nop
   14bd0:	2000241c 	.word	0x2000241c
   14bd4:	200006dc 	.word	0x200006dc

00014bd8 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   14bd8:	4a0b      	ldr	r2, [pc, #44]	; (14c08 <l2cap_accept+0x30>)
{
   14bda:	b508      	push	{r3, lr}
   14bdc:	4603      	mov	r3, r0
		if (l2cap->chan.chan.conn) {
   14bde:	6810      	ldr	r0, [r2, #0]
   14be0:	b918      	cbnz	r0, 14bea <l2cap_accept+0x12>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
   14be2:	4b0a      	ldr	r3, [pc, #40]	; (14c0c <l2cap_accept+0x34>)
   14be4:	6053      	str	r3, [r2, #4]
		*chan = &l2cap->chan.chan;
   14be6:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
   14be8:	bd08      	pop	{r3, pc}
   14bea:	4909      	ldr	r1, [pc, #36]	; (14c10 <l2cap_accept+0x38>)
   14bec:	4a09      	ldr	r2, [pc, #36]	; (14c14 <l2cap_accept+0x3c>)
	BT_ERR("No available L2CAP context for conn %p", conn);
   14bee:	480a      	ldr	r0, [pc, #40]	; (14c18 <l2cap_accept+0x40>)
   14bf0:	1a52      	subs	r2, r2, r1
   14bf2:	08d2      	lsrs	r2, r2, #3
   14bf4:	0192      	lsls	r2, r2, #6
   14bf6:	f042 0201 	orr.w	r2, r2, #1
   14bfa:	4619      	mov	r1, r3
   14bfc:	f005 fc82 	bl	1a504 <log_1>
	return -ENOMEM;
   14c00:	f06f 000b 	mvn.w	r0, #11
   14c04:	e7f0      	b.n	14be8 <l2cap_accept+0x10>
   14c06:	bf00      	nop
   14c08:	20001598 	.word	0x20001598
   14c0c:	0001dbb8 	.word	0x0001dbb8
   14c10:	0001d788 	.word	0x0001d788
   14c14:	0001d7c0 	.word	0x0001d7c0
   14c18:	0001f2a6 	.word	0x0001f2a6

00014c1c <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   14c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14c1e:	4605      	mov	r5, r0
   14c20:	460f      	mov	r7, r1
   14c22:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   14c24:	2300      	movs	r3, #0
   14c26:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   14c2a:	2104      	movs	r1, #4
   14c2c:	2000      	movs	r0, #0
   14c2e:	f7ff fef1 	bl	14a14 <bt_conn_create_pdu_timeout>
	if (!buf) {
   14c32:	4604      	mov	r4, r0
   14c34:	b960      	cbnz	r0, 14c50 <l2cap_create_le_sig_pdu.constprop.0+0x34>
   14c36:	4a0a      	ldr	r2, [pc, #40]	; (14c60 <l2cap_create_le_sig_pdu.constprop.0+0x44>)
   14c38:	4b0a      	ldr	r3, [pc, #40]	; (14c64 <l2cap_create_le_sig_pdu.constprop.0+0x48>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
   14c3a:	480b      	ldr	r0, [pc, #44]	; (14c68 <l2cap_create_le_sig_pdu.constprop.0+0x4c>)
   14c3c:	1ad2      	subs	r2, r2, r3
   14c3e:	08d2      	lsrs	r2, r2, #3
   14c40:	0192      	lsls	r2, r2, #6
   14c42:	f042 0201 	orr.w	r2, r2, #1
   14c46:	4629      	mov	r1, r5
   14c48:	f005 fc5c 	bl	1a504 <log_1>
}
   14c4c:	4620      	mov	r0, r4
   14c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   14c50:	2104      	movs	r1, #4
   14c52:	3008      	adds	r0, #8
   14c54:	f007 fd5a 	bl	1c70c <net_buf_simple_add>
	hdr->code = code;
   14c58:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   14c5a:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   14c5c:	8046      	strh	r6, [r0, #2]
	return buf;
   14c5e:	e7f5      	b.n	14c4c <l2cap_create_le_sig_pdu.constprop.0+0x30>
   14c60:	0001d7c0 	.word	0x0001d7c0
   14c64:	0001d788 	.word	0x0001d788
   14c68:	0001f2cd 	.word	0x0001f2cd

00014c6c <l2cap_rtx_timeout>:
{
   14c6c:	b538      	push	{r3, r4, r5, lr}
   14c6e:	4a0b      	ldr	r2, [pc, #44]	; (14c9c <l2cap_rtx_timeout+0x30>)
   14c70:	4b0b      	ldr	r3, [pc, #44]	; (14ca0 <l2cap_rtx_timeout+0x34>)
	struct bt_conn *conn = chan->chan.conn;
   14c72:	4604      	mov	r4, r0
   14c74:	1ad2      	subs	r2, r2, r3
   14c76:	f854 5d10 	ldr.w	r5, [r4, #-16]!
	BT_ERR("chan %p timeout", chan);
   14c7a:	480a      	ldr	r0, [pc, #40]	; (14ca4 <l2cap_rtx_timeout+0x38>)
   14c7c:	08d2      	lsrs	r2, r2, #3
   14c7e:	0192      	lsls	r2, r2, #6
   14c80:	4621      	mov	r1, r4
   14c82:	f042 0201 	orr.w	r2, r2, #1
   14c86:	f005 fc3d 	bl	1a504 <log_1>
	bt_l2cap_chan_remove(conn, &chan->chan);
   14c8a:	4628      	mov	r0, r5
   14c8c:	4621      	mov	r1, r4
   14c8e:	f006 fdf8 	bl	1b882 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
   14c92:	4620      	mov	r0, r4
}
   14c94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
   14c98:	f006 be14 	b.w	1b8c4 <bt_l2cap_chan_del>
   14c9c:	0001d7c0 	.word	0x0001d7c0
   14ca0:	0001d788 	.word	0x0001d788
   14ca4:	0001f2f5 	.word	0x0001f2f5

00014ca8 <bt_l2cap_connected>:
{
   14ca8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   14cac:	4e29      	ldr	r6, [pc, #164]	; (14d54 <bt_l2cap_connected+0xac>)
   14cae:	4f2a      	ldr	r7, [pc, #168]	; (14d58 <bt_l2cap_connected+0xb0>)
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   14cb0:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 14d5c <bt_l2cap_connected+0xb4>
{
   14cb4:	4604      	mov	r4, r0
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   14cb6:	42be      	cmp	r6, r7
   14cb8:	d302      	bcc.n	14cc0 <bt_l2cap_connected+0x18>
}
   14cba:	b003      	add	sp, #12
   14cbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
   14cc0:	6873      	ldr	r3, [r6, #4]
   14cc2:	a901      	add	r1, sp, #4
   14cc4:	4620      	mov	r0, r4
   14cc6:	4798      	blx	r3
   14cc8:	2800      	cmp	r0, #0
   14cca:	db3d      	blt.n	14d48 <bt_l2cap_connected+0xa0>
		ch = BT_L2CAP_LE_CHAN(chan);
   14ccc:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
   14cce:	8833      	ldrh	r3, [r6, #0]
   14cd0:	f8a5 3070 	strh.w	r3, [r5, #112]	; 0x70
		ch->tx.cid = fchan->cid;
   14cd4:	f8a5 307c 	strh.w	r3, [r5, #124]	; 0x7c
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   14cd8:	4641      	mov	r1, r8
   14cda:	f105 0010 	add.w	r0, r5, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   14cde:	f8d6 9008 	ldr.w	r9, [r6, #8]
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   14ce2:	f008 f8b2 	bl	1ce4a <k_work_init_delayable>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   14ce6:	f3bf 8f5b 	dmb	ish
   14cea:	f105 0368 	add.w	r3, r5, #104	; 0x68
   14cee:	2200      	movs	r2, #0
   14cf0:	e853 1f00 	ldrex	r1, [r3]
   14cf4:	e843 2000 	strex	r0, r2, [r3]
   14cf8:	2800      	cmp	r0, #0
   14cfa:	d1f9      	bne.n	14cf0 <bt_l2cap_connected+0x48>
   14cfc:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   14d00:	60aa      	str	r2, [r5, #8]
	return list->tail;
   14d02:	6d62      	ldr	r2, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
   14d04:	f105 0308 	add.w	r3, r5, #8
Z_GENLIST_APPEND(slist, snode)
   14d08:	bb02      	cbnz	r2, 14d4c <bt_l2cap_connected+0xa4>
	list->head = node;
   14d0a:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (chan->ops->connected) {
   14d0e:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
   14d10:	602c      	str	r4, [r5, #0]
		if (chan->ops->connected) {
   14d12:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
   14d14:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
   14d18:	681b      	ldr	r3, [r3, #0]
   14d1a:	b103      	cbz	r3, 14d1e <bt_l2cap_connected+0x76>
			chan->ops->connected(chan);
   14d1c:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14d1e:	9b01      	ldr	r3, [sp, #4]
   14d20:	f3bf 8f5b 	dmb	ish
   14d24:	3368      	adds	r3, #104	; 0x68
   14d26:	e853 2f00 	ldrex	r2, [r3]
   14d2a:	f042 0201 	orr.w	r2, r2, #1
   14d2e:	e843 2100 	strex	r1, r2, [r3]
   14d32:	2900      	cmp	r1, #0
   14d34:	d1f7      	bne.n	14d26 <bt_l2cap_connected+0x7e>
   14d36:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   14d3a:	9801      	ldr	r0, [sp, #4]
   14d3c:	6843      	ldr	r3, [r0, #4]
   14d3e:	699b      	ldr	r3, [r3, #24]
   14d40:	b113      	cbz	r3, 14d48 <bt_l2cap_connected+0xa0>
			chan->ops->status(chan, chan->status);
   14d42:	f100 0168 	add.w	r1, r0, #104	; 0x68
   14d46:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   14d48:	360c      	adds	r6, #12
   14d4a:	e7b4      	b.n	14cb6 <bt_l2cap_connected+0xe>
	parent->next = child;
   14d4c:	6013      	str	r3, [r2, #0]
	list->tail = node;
   14d4e:	6563      	str	r3, [r4, #84]	; 0x54
}
   14d50:	e7dd      	b.n	14d0e <bt_l2cap_connected+0x66>
   14d52:	bf00      	nop
   14d54:	0001d74c 	.word	0x0001d74c
   14d58:	0001d770 	.word	0x0001d770
   14d5c:	00014c6d 	.word	0x00014c6d

00014d60 <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
   14d60:	898b      	ldrh	r3, [r1, #12]
   14d62:	2b03      	cmp	r3, #3
{
   14d64:	b573      	push	{r0, r1, r4, r5, r6, lr}
   14d66:	4606      	mov	r6, r0
   14d68:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   14d6a:	d80a      	bhi.n	14d82 <l2cap_recv+0x22>
   14d6c:	4931      	ldr	r1, [pc, #196]	; (14e34 <l2cap_recv+0xd4>)
   14d6e:	4b32      	ldr	r3, [pc, #200]	; (14e38 <l2cap_recv+0xd8>)
		BT_ERR("Too small L2CAP signaling PDU");
   14d70:	4832      	ldr	r0, [pc, #200]	; (14e3c <l2cap_recv+0xdc>)
   14d72:	1ac9      	subs	r1, r1, r3
   14d74:	08c9      	lsrs	r1, r1, #3
   14d76:	0189      	lsls	r1, r1, #6
   14d78:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Invalid ident value in L2CAP PDU");
   14d7c:	f005 fbb5 	bl	1a4ea <log_0>
		return 0;
   14d80:	e013      	b.n	14daa <l2cap_recv+0x4a>
	return net_buf_simple_pull_mem(&buf->b, len);
   14d82:	2104      	movs	r1, #4
   14d84:	f105 0008 	add.w	r0, r5, #8
   14d88:	f007 fce7 	bl	1c75a <net_buf_simple_pull_mem>
	if (buf->len != len) {
   14d8c:	89a9      	ldrh	r1, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
   14d8e:	8842      	ldrh	r2, [r0, #2]
	if (buf->len != len) {
   14d90:	428a      	cmp	r2, r1
   14d92:	4604      	mov	r4, r0
   14d94:	d00c      	beq.n	14db0 <l2cap_recv+0x50>
   14d96:	4828      	ldr	r0, [pc, #160]	; (14e38 <l2cap_recv+0xd8>)
   14d98:	4b26      	ldr	r3, [pc, #152]	; (14e34 <l2cap_recv+0xd4>)
   14d9a:	1a1b      	subs	r3, r3, r0
   14d9c:	08db      	lsrs	r3, r3, #3
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   14d9e:	019b      	lsls	r3, r3, #6
   14da0:	4827      	ldr	r0, [pc, #156]	; (14e40 <l2cap_recv+0xe0>)
   14da2:	f043 0301 	orr.w	r3, r3, #1
   14da6:	f005 fbc1 	bl	1a52c <log_2>
}
   14daa:	2000      	movs	r0, #0
   14dac:	b002      	add	sp, #8
   14dae:	bd70      	pop	{r4, r5, r6, pc}
	if (!hdr->ident) {
   14db0:	7843      	ldrb	r3, [r0, #1]
   14db2:	b943      	cbnz	r3, 14dc6 <l2cap_recv+0x66>
   14db4:	491f      	ldr	r1, [pc, #124]	; (14e34 <l2cap_recv+0xd4>)
   14db6:	4b20      	ldr	r3, [pc, #128]	; (14e38 <l2cap_recv+0xd8>)
		BT_ERR("Invalid ident value in L2CAP PDU");
   14db8:	4822      	ldr	r0, [pc, #136]	; (14e44 <l2cap_recv+0xe4>)
   14dba:	1ac9      	subs	r1, r1, r3
   14dbc:	08c9      	lsrs	r1, r1, #3
   14dbe:	0189      	lsls	r1, r1, #6
   14dc0:	f041 0101 	orr.w	r1, r1, #1
   14dc4:	e7da      	b.n	14d7c <l2cap_recv+0x1c>
	switch (hdr->code) {
   14dc6:	7801      	ldrb	r1, [r0, #0]
   14dc8:	2901      	cmp	r1, #1
   14dca:	d0ee      	beq.n	14daa <l2cap_recv+0x4a>
   14dcc:	2913      	cmp	r1, #19
   14dce:	d10a      	bne.n	14de6 <l2cap_recv+0x86>
	if (buf->len < sizeof(*rsp)) {
   14dd0:	2a01      	cmp	r2, #1
   14dd2:	d8ea      	bhi.n	14daa <l2cap_recv+0x4a>
   14dd4:	4917      	ldr	r1, [pc, #92]	; (14e34 <l2cap_recv+0xd4>)
   14dd6:	4b18      	ldr	r3, [pc, #96]	; (14e38 <l2cap_recv+0xd8>)
		BT_ERR("Too small LE conn param rsp");
   14dd8:	481b      	ldr	r0, [pc, #108]	; (14e48 <l2cap_recv+0xe8>)
   14dda:	1ac9      	subs	r1, r1, r3
   14ddc:	08c9      	lsrs	r1, r1, #3
   14dde:	0189      	lsls	r1, r1, #6
   14de0:	f041 0101 	orr.w	r1, r1, #1
   14de4:	e7ca      	b.n	14d7c <l2cap_recv+0x1c>
   14de6:	4b14      	ldr	r3, [pc, #80]	; (14e38 <l2cap_recv+0xd8>)
   14de8:	4a12      	ldr	r2, [pc, #72]	; (14e34 <l2cap_recv+0xd4>)
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
   14dea:	4818      	ldr	r0, [pc, #96]	; (14e4c <l2cap_recv+0xec>)
   14dec:	1ad2      	subs	r2, r2, r3
   14dee:	08d2      	lsrs	r2, r2, #3
   14df0:	0192      	lsls	r2, r2, #6
   14df2:	f042 0202 	orr.w	r2, r2, #2
   14df6:	f005 fb85 	bl	1a504 <log_1>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   14dfa:	7861      	ldrb	r1, [r4, #1]
		l2cap_send_reject(chan->conn, hdr->ident,
   14dfc:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   14dfe:	2202      	movs	r2, #2
   14e00:	2001      	movs	r0, #1
   14e02:	f7ff ff0b 	bl	14c1c <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   14e06:	4604      	mov	r4, r0
   14e08:	2800      	cmp	r0, #0
   14e0a:	d0ce      	beq.n	14daa <l2cap_recv+0x4a>
	return net_buf_simple_add(&buf->b, len);
   14e0c:	2102      	movs	r1, #2
   14e0e:	3008      	adds	r0, #8
   14e10:	f007 fc7c 	bl	1c70c <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   14e14:	2300      	movs	r3, #0
   14e16:	7003      	strb	r3, [r0, #0]
   14e18:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   14e1a:	4622      	mov	r2, r4
   14e1c:	9300      	str	r3, [sp, #0]
   14e1e:	2105      	movs	r1, #5
   14e20:	4628      	mov	r0, r5
   14e22:	f006 fd7d 	bl	1b920 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   14e26:	2800      	cmp	r0, #0
   14e28:	d0bf      	beq.n	14daa <l2cap_recv+0x4a>
		net_buf_unref(buf);
   14e2a:	4620      	mov	r0, r4
   14e2c:	f001 fe6c 	bl	16b08 <net_buf_unref>
   14e30:	e7bb      	b.n	14daa <l2cap_recv+0x4a>
   14e32:	bf00      	nop
   14e34:	0001d7c0 	.word	0x0001d7c0
   14e38:	0001d788 	.word	0x0001d788
   14e3c:	0001f305 	.word	0x0001f305
   14e40:	0001f323 	.word	0x0001f323
   14e44:	0001f344 	.word	0x0001f344
   14e48:	0001f365 	.word	0x0001f365
   14e4c:	0001f381 	.word	0x0001f381

00014e50 <bt_l2cap_recv>:
{
   14e50:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   14e52:	898b      	ldrh	r3, [r1, #12]
   14e54:	2b03      	cmp	r3, #3
{
   14e56:	4605      	mov	r5, r0
   14e58:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   14e5a:	d80e      	bhi.n	14e7a <bt_l2cap_recv+0x2a>
   14e5c:	4914      	ldr	r1, [pc, #80]	; (14eb0 <bt_l2cap_recv+0x60>)
   14e5e:	4b15      	ldr	r3, [pc, #84]	; (14eb4 <bt_l2cap_recv+0x64>)
		BT_ERR("Too small L2CAP PDU received");
   14e60:	4815      	ldr	r0, [pc, #84]	; (14eb8 <bt_l2cap_recv+0x68>)
   14e62:	1ac9      	subs	r1, r1, r3
   14e64:	08c9      	lsrs	r1, r1, #3
   14e66:	0189      	lsls	r1, r1, #6
   14e68:	f041 0101 	orr.w	r1, r1, #1
   14e6c:	f005 fb3d 	bl	1a4ea <log_0>
	net_buf_unref(buf);
   14e70:	4620      	mov	r0, r4
}
   14e72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   14e76:	f001 be47 	b.w	16b08 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   14e7a:	2104      	movs	r1, #4
   14e7c:	f104 0008 	add.w	r0, r4, #8
   14e80:	f007 fc6b 	bl	1c75a <net_buf_simple_pull_mem>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   14e84:	8841      	ldrh	r1, [r0, #2]
   14e86:	4628      	mov	r0, r5
   14e88:	f006 fd73 	bl	1b972 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   14e8c:	b950      	cbnz	r0, 14ea4 <bt_l2cap_recv+0x54>
   14e8e:	4b09      	ldr	r3, [pc, #36]	; (14eb4 <bt_l2cap_recv+0x64>)
   14e90:	4a07      	ldr	r2, [pc, #28]	; (14eb0 <bt_l2cap_recv+0x60>)
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
   14e92:	480a      	ldr	r0, [pc, #40]	; (14ebc <bt_l2cap_recv+0x6c>)
   14e94:	1ad2      	subs	r2, r2, r3
   14e96:	08d2      	lsrs	r2, r2, #3
   14e98:	0192      	lsls	r2, r2, #6
   14e9a:	f042 0202 	orr.w	r2, r2, #2
   14e9e:	f005 fb31 	bl	1a504 <log_1>
		net_buf_unref(buf);
   14ea2:	e7e5      	b.n	14e70 <bt_l2cap_recv+0x20>
	chan->ops->recv(chan, buf);
   14ea4:	6843      	ldr	r3, [r0, #4]
   14ea6:	4621      	mov	r1, r4
   14ea8:	691b      	ldr	r3, [r3, #16]
   14eaa:	4798      	blx	r3
   14eac:	e7e0      	b.n	14e70 <bt_l2cap_recv+0x20>
   14eae:	bf00      	nop
   14eb0:	0001d7c0 	.word	0x0001d7c0
   14eb4:	0001d788 	.word	0x0001d788
   14eb8:	0001f39f 	.word	0x0001f39f
   14ebc:	0001f3bc 	.word	0x0001f3bc

00014ec0 <bt_l2cap_update_conn_param>:
{
   14ec0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   14ec2:	460d      	mov	r5, r1
	ident++;
   14ec4:	4916      	ldr	r1, [pc, #88]	; (14f20 <bt_l2cap_update_conn_param+0x60>)
   14ec6:	780b      	ldrb	r3, [r1, #0]
   14ec8:	3301      	adds	r3, #1
	if (!ident) {
   14eca:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		ident++;
   14ece:	bf08      	it	eq
   14ed0:	2301      	moveq	r3, #1
   14ed2:	700b      	strb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   14ed4:	7809      	ldrb	r1, [r1, #0]
{
   14ed6:	4606      	mov	r6, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   14ed8:	2208      	movs	r2, #8
   14eda:	2012      	movs	r0, #18
   14edc:	f7ff fe9e 	bl	14c1c <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   14ee0:	4604      	mov	r4, r0
   14ee2:	b1d0      	cbz	r0, 14f1a <bt_l2cap_update_conn_param+0x5a>
	return net_buf_simple_add(&buf->b, len);
   14ee4:	2108      	movs	r1, #8
   14ee6:	4408      	add	r0, r1
   14ee8:	f007 fc10 	bl	1c70c <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   14eec:	882b      	ldrh	r3, [r5, #0]
   14eee:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   14ef0:	886b      	ldrh	r3, [r5, #2]
   14ef2:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   14ef4:	88ab      	ldrh	r3, [r5, #4]
   14ef6:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   14ef8:	88eb      	ldrh	r3, [r5, #6]
   14efa:	80c3      	strh	r3, [r0, #6]
   14efc:	2300      	movs	r3, #0
   14efe:	9300      	str	r3, [sp, #0]
   14f00:	4622      	mov	r2, r4
   14f02:	2105      	movs	r1, #5
   14f04:	4630      	mov	r0, r6
   14f06:	f006 fd0b 	bl	1b920 <bt_l2cap_send_cb>
	if (err) {
   14f0a:	4605      	mov	r5, r0
   14f0c:	b110      	cbz	r0, 14f14 <bt_l2cap_update_conn_param+0x54>
		net_buf_unref(buf);
   14f0e:	4620      	mov	r0, r4
   14f10:	f001 fdfa 	bl	16b08 <net_buf_unref>
}
   14f14:	4628      	mov	r0, r5
   14f16:	b002      	add	sp, #8
   14f18:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   14f1a:	f06f 050b 	mvn.w	r5, #11
   14f1e:	e7f9      	b.n	14f14 <bt_l2cap_update_conn_param+0x54>
   14f20:	20002883 	.word	0x20002883

00014f24 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   14f24:	4b02      	ldr	r3, [pc, #8]	; (14f30 <att_cfm_sent+0xc>)
   14f26:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   14f2a:	f006 bd45 	b.w	1b9b8 <att_sent>
   14f2e:	bf00      	nop
   14f30:	0001bdc5 	.word	0x0001bdc5

00014f34 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   14f34:	4b02      	ldr	r3, [pc, #8]	; (14f40 <att_rsp_sent+0xc>)
   14f36:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   14f3a:	f006 bd3d 	b.w	1b9b8 <att_sent>
   14f3e:	bf00      	nop
   14f40:	0001bda9 	.word	0x0001bda9

00014f44 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   14f44:	4b02      	ldr	r3, [pc, #8]	; (14f50 <att_req_sent+0xc>)
   14f46:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   14f4a:	f006 bd35 	b.w	1b9b8 <att_sent>
   14f4e:	bf00      	nop
   14f50:	0001bb87 	.word	0x0001bb87

00014f54 <att_get>:

	return 0;
}

static struct bt_att *att_get(struct bt_conn *conn)
{
   14f54:	b510      	push	{r4, lr}
	struct bt_l2cap_chan *chan;
	struct bt_att_chan *att_chan;

	if (conn->state != BT_CONN_CONNECTED) {
   14f56:	7a83      	ldrb	r3, [r0, #10]
   14f58:	2b07      	cmp	r3, #7
   14f5a:	d00b      	beq.n	14f74 <att_get+0x20>
   14f5c:	4918      	ldr	r1, [pc, #96]	; (14fc0 <att_get+0x6c>)
   14f5e:	4b19      	ldr	r3, [pc, #100]	; (14fc4 <att_get+0x70>)
		BT_WARN("Not connected");
   14f60:	4819      	ldr	r0, [pc, #100]	; (14fc8 <att_get+0x74>)
   14f62:	1ac9      	subs	r1, r1, r3
   14f64:	08c9      	lsrs	r1, r1, #3
   14f66:	0189      	lsls	r1, r1, #6
   14f68:	f041 0102 	orr.w	r1, r1, #2
		return NULL;
	}

	att_chan = ATT_CHAN(chan);
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
		BT_WARN("ATT channel flagged as disconnected");
   14f6c:	f005 fabd 	bl	1a4ea <log_0>
		return NULL;
   14f70:	2400      	movs	r4, #0
   14f72:	e00e      	b.n	14f92 <att_get+0x3e>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   14f74:	2104      	movs	r1, #4
   14f76:	f006 fcfc 	bl	1b972 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   14f7a:	4604      	mov	r4, r0
   14f7c:	b958      	cbnz	r0, 14f96 <att_get+0x42>
   14f7e:	4910      	ldr	r1, [pc, #64]	; (14fc0 <att_get+0x6c>)
   14f80:	4b10      	ldr	r3, [pc, #64]	; (14fc4 <att_get+0x70>)
		BT_ERR("Unable to find ATT channel");
   14f82:	4812      	ldr	r0, [pc, #72]	; (14fcc <att_get+0x78>)
   14f84:	1ac9      	subs	r1, r1, r3
   14f86:	08c9      	lsrs	r1, r1, #3
   14f88:	0189      	lsls	r1, r1, #6
   14f8a:	f041 0101 	orr.w	r1, r1, #1
   14f8e:	f005 faac 	bl	1a4ea <log_0>
	}

	return att_chan->att;
}
   14f92:	4620      	mov	r0, r4
   14f94:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14f96:	f3bf 8f5b 	dmb	ish
   14f9a:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
   14f9e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   14fa2:	075b      	lsls	r3, r3, #29
   14fa4:	d508      	bpl.n	14fb8 <att_get+0x64>
   14fa6:	4906      	ldr	r1, [pc, #24]	; (14fc0 <att_get+0x6c>)
   14fa8:	4b06      	ldr	r3, [pc, #24]	; (14fc4 <att_get+0x70>)
		BT_WARN("ATT channel flagged as disconnected");
   14faa:	4809      	ldr	r0, [pc, #36]	; (14fd0 <att_get+0x7c>)
   14fac:	1ac9      	subs	r1, r1, r3
   14fae:	08c9      	lsrs	r1, r1, #3
   14fb0:	0189      	lsls	r1, r1, #6
   14fb2:	f041 0102 	orr.w	r1, r1, #2
   14fb6:	e7d9      	b.n	14f6c <att_get+0x18>
	return att_chan->att;
   14fb8:	f850 4c08 	ldr.w	r4, [r0, #-8]
   14fbc:	e7e9      	b.n	14f92 <att_get+0x3e>
   14fbe:	bf00      	nop
   14fc0:	0001d790 	.word	0x0001d790
   14fc4:	0001d788 	.word	0x0001d788
   14fc8:	0001f3f8 	.word	0x0001f3f8
   14fcc:	0001f406 	.word	0x0001f406
   14fd0:	0001f421 	.word	0x0001f421

00014fd4 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   14fd4:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   14fd6:	3808      	subs	r0, #8
   14fd8:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   14fda:	a901      	add	r1, sp, #4
   14fdc:	4802      	ldr	r0, [pc, #8]	; (14fe8 <bt_att_released+0x14>)
   14fde:	f007 fd7c 	bl	1cada <k_mem_slab_free>
}
   14fe2:	b003      	add	sp, #12
   14fe4:	f85d fb04 	ldr.w	pc, [sp], #4
   14fe8:	20000608 	.word	0x20000608

00014fec <find_type_cb>:
{
   14fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
   14ff0:	f8d2 9000 	ldr.w	r9, [r2]
{
   14ff4:	b091      	sub	sp, #68	; 0x44
   14ff6:	4607      	mov	r7, r0
   14ff8:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   14ffa:	2500      	movs	r5, #0
   14ffc:	f642 0301 	movw	r3, #10241	; 0x2801
   15000:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   15002:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   15006:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   1500a:	a90b      	add	r1, sp, #44	; 0x2c
{
   1500c:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1500e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   15012:	f006 f906 	bl	1b222 <bt_uuid_cmp>
   15016:	2800      	cmp	r0, #0
   15018:	d066      	beq.n	150e8 <find_type_cb+0xfc>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   1501a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1501e:	6838      	ldr	r0, [r7, #0]
   15020:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   15024:	a90b      	add	r1, sp, #44	; 0x2c
   15026:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1502a:	f006 f8fa 	bl	1b222 <bt_uuid_cmp>
   1502e:	b138      	cbz	r0, 15040 <find_type_cb+0x54>
		if (data->group &&
   15030:	68a3      	ldr	r3, [r4, #8]
   15032:	b11b      	cbz	r3, 1503c <find_type_cb+0x50>
   15034:	885a      	ldrh	r2, [r3, #2]
   15036:	42b2      	cmp	r2, r6
   15038:	d200      	bcs.n	1503c <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1503a:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   1503c:	2001      	movs	r0, #1
   1503e:	e009      	b.n	15054 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   15040:	6861      	ldr	r1, [r4, #4]
   15042:	4608      	mov	r0, r1
   15044:	f006 fcb0 	bl	1b9a8 <net_buf_frags_len>
   15048:	f8b9 3086 	ldrh.w	r3, [r9, #134]	; 0x86
   1504c:	1a1b      	subs	r3, r3, r0
   1504e:	2b03      	cmp	r3, #3
   15050:	d803      	bhi.n	1505a <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   15052:	2000      	movs	r0, #0
}
   15054:	b011      	add	sp, #68	; 0x44
   15056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   1505a:	4608      	mov	r0, r1
   1505c:	f007 fb34 	bl	1c6c8 <net_buf_frag_last>
   15060:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   15062:	6860      	ldr	r0, [r4, #4]
   15064:	f006 fca0 	bl	1b9a8 <net_buf_frags_len>
   15068:	f8b9 a086 	ldrh.w	sl, [r9, #134]	; 0x86
	return net_buf_simple_tailroom(&buf->b);
   1506c:	f105 0b08 	add.w	fp, r5, #8
   15070:	ebaa 0a00 	sub.w	sl, sl, r0
   15074:	4658      	mov	r0, fp
   15076:	f007 fb84 	bl	1c782 <net_buf_simple_tailroom>
   1507a:	4582      	cmp	sl, r0
   1507c:	d237      	bcs.n	150ee <find_type_cb+0x102>
   1507e:	6860      	ldr	r0, [r4, #4]
   15080:	f006 fc92 	bl	1b9a8 <net_buf_frags_len>
   15084:	f8b9 3086 	ldrh.w	r3, [r9, #134]	; 0x86
   15088:	1a18      	subs	r0, r3, r0
	if (!len) {
   1508a:	b970      	cbnz	r0, 150aa <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   1508c:	6863      	ldr	r3, [r4, #4]
   1508e:	7998      	ldrb	r0, [r3, #6]
   15090:	f001 fc7c 	bl	1698c <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   15094:	2200      	movs	r2, #0
   15096:	2300      	movs	r3, #0
   15098:	f007 fae2 	bl	1c660 <net_buf_alloc_fixed>
		if (!frag) {
   1509c:	4605      	mov	r5, r0
   1509e:	2800      	cmp	r0, #0
   150a0:	d0d7      	beq.n	15052 <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   150a2:	4601      	mov	r1, r0
   150a4:	6860      	ldr	r0, [r4, #4]
   150a6:	f007 fb20 	bl	1c6ea <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   150aa:	2300      	movs	r3, #0
   150ac:	9300      	str	r3, [sp, #0]
   150ae:	f8d7 9004 	ldr.w	r9, [r7, #4]
   150b2:	4639      	mov	r1, r7
   150b4:	2310      	movs	r3, #16
   150b6:	aa02      	add	r2, sp, #8
   150b8:	4640      	mov	r0, r8
   150ba:	47c8      	blx	r9
	if (read < 0) {
   150bc:	1e07      	subs	r7, r0, #0
   150be:	db13      	blt.n	150e8 <find_type_cb+0xfc>
	if (read != data->value_len) {
   150c0:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   150c2:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   150c4:	42ba      	cmp	r2, r7
   150c6:	d037      	beq.n	15138 <find_type_cb+0x14c>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   150c8:	4601      	mov	r1, r0
   150ca:	a80b      	add	r0, sp, #44	; 0x2c
   150cc:	f006 f8d7 	bl	1b27e <bt_uuid_create>
   150d0:	b988      	cbnz	r0, 150f6 <find_type_cb+0x10a>
   150d2:	4a1b      	ldr	r2, [pc, #108]	; (15140 <find_type_cb+0x154>)
   150d4:	4b1b      	ldr	r3, [pc, #108]	; (15144 <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %u", data->value_len);
   150d6:	7c21      	ldrb	r1, [r4, #16]
   150d8:	481b      	ldr	r0, [pc, #108]	; (15148 <find_type_cb+0x15c>)
   150da:	1ad2      	subs	r2, r2, r3
   150dc:	08d2      	lsrs	r2, r2, #3
   150de:	0192      	lsls	r2, r2, #6
   150e0:	f042 0202 	orr.w	r2, r2, #2
			BT_WARN("Unable to create UUID: size %d", read);
   150e4:	f005 fa0e 	bl	1a504 <log_1>
	data->group = NULL;
   150e8:	2300      	movs	r3, #0
   150ea:	60a3      	str	r3, [r4, #8]
   150ec:	e7a6      	b.n	1503c <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   150ee:	4658      	mov	r0, fp
   150f0:	f007 fb47 	bl	1c782 <net_buf_simple_tailroom>
   150f4:	e7c9      	b.n	1508a <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   150f6:	b2fa      	uxtb	r2, r7
   150f8:	a902      	add	r1, sp, #8
   150fa:	a806      	add	r0, sp, #24
   150fc:	f006 f8bf 	bl	1b27e <bt_uuid_create>
   15100:	b948      	cbnz	r0, 15116 <find_type_cb+0x12a>
   15102:	4a0f      	ldr	r2, [pc, #60]	; (15140 <find_type_cb+0x154>)
   15104:	4b0f      	ldr	r3, [pc, #60]	; (15144 <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %d", read);
   15106:	4811      	ldr	r0, [pc, #68]	; (1514c <find_type_cb+0x160>)
   15108:	1ad2      	subs	r2, r2, r3
   1510a:	08d2      	lsrs	r2, r2, #3
   1510c:	0192      	lsls	r2, r2, #6
   1510e:	f042 0202 	orr.w	r2, r2, #2
   15112:	4639      	mov	r1, r7
   15114:	e7e6      	b.n	150e4 <find_type_cb+0xf8>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   15116:	a906      	add	r1, sp, #24
   15118:	a80b      	add	r0, sp, #44	; 0x2c
   1511a:	f006 f882 	bl	1b222 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   1511e:	2800      	cmp	r0, #0
   15120:	d1e2      	bne.n	150e8 <find_type_cb+0xfc>
	data->err = 0x00;
   15122:	2300      	movs	r3, #0
   15124:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   15126:	2104      	movs	r1, #4
   15128:	f105 0008 	add.w	r0, r5, #8
   1512c:	f007 faee 	bl	1c70c <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   15130:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   15132:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   15134:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   15136:	e781      	b.n	1503c <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
   15138:	a902      	add	r1, sp, #8
   1513a:	f006 f82c 	bl	1b196 <memcmp>
   1513e:	e7ee      	b.n	1511e <find_type_cb+0x132>
   15140:	0001d790 	.word	0x0001d790
   15144:	0001d788 	.word	0x0001d788
   15148:	0001f445 	.word	0x0001f445
   1514c:	0001f464 	.word	0x0001f464

00015150 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   15150:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   15152:	2300      	movs	r3, #0
{
   15154:	4606      	mov	r6, r0
   15156:	460f      	mov	r7, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   15158:	4828      	ldr	r0, [pc, #160]	; (151fc <bt_att_accept+0xac>)
   1515a:	2200      	movs	r2, #0
   1515c:	4669      	mov	r1, sp
   1515e:	f003 fb8b 	bl	18878 <k_mem_slab_alloc>
   15162:	4604      	mov	r4, r0
   15164:	b178      	cbz	r0, 15186 <bt_att_accept+0x36>
   15166:	4a26      	ldr	r2, [pc, #152]	; (15200 <bt_att_accept+0xb0>)
   15168:	4b26      	ldr	r3, [pc, #152]	; (15204 <bt_att_accept+0xb4>)
		BT_ERR("No available ATT context for conn %p", conn);
   1516a:	4827      	ldr	r0, [pc, #156]	; (15208 <bt_att_accept+0xb8>)
   1516c:	1ad2      	subs	r2, r2, r3
   1516e:	08d2      	lsrs	r2, r2, #3
   15170:	0192      	lsls	r2, r2, #6
   15172:	f042 0201 	orr.w	r2, r2, #1
   15176:	4631      	mov	r1, r6
		BT_ERR("No available ATT channel for conn %p", att->conn);
   15178:	f005 f9c4 	bl	1a504 <log_1>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
   1517c:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   15180:	4620      	mov	r0, r4
   15182:	b003      	add	sp, #12
   15184:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
   15186:	4601      	mov	r1, r0
   15188:	222c      	movs	r2, #44	; 0x2c
   1518a:	9800      	ldr	r0, [sp, #0]
   1518c:	f006 f81f 	bl	1b1ce <memset>
	att->conn = conn;
   15190:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   15192:	481e      	ldr	r0, [pc, #120]	; (1520c <bt_att_accept+0xbc>)
	list->tail = NULL;
   15194:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
   15196:	e9c5 6400 	strd	r6, r4, [r5]
	list->tail = NULL;
   1519a:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
   1519e:	2200      	movs	r2, #0
   151a0:	2300      	movs	r3, #0
   151a2:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   151a4:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   151a6:	f003 fb67 	bl	18878 <k_mem_slab_alloc>
   151aa:	4604      	mov	r4, r0
   151ac:	b148      	cbz	r0, 151c2 <bt_att_accept+0x72>
   151ae:	4a14      	ldr	r2, [pc, #80]	; (15200 <bt_att_accept+0xb0>)
   151b0:	4b14      	ldr	r3, [pc, #80]	; (15204 <bt_att_accept+0xb4>)
		BT_ERR("No available ATT channel for conn %p", att->conn);
   151b2:	6829      	ldr	r1, [r5, #0]
   151b4:	4816      	ldr	r0, [pc, #88]	; (15210 <bt_att_accept+0xc0>)
   151b6:	1ad2      	subs	r2, r2, r3
   151b8:	08d2      	lsrs	r2, r2, #3
   151ba:	0192      	lsls	r2, r2, #6
   151bc:	f042 0201 	orr.w	r2, r2, #1
   151c0:	e7da      	b.n	15178 <bt_att_accept+0x28>
	(void)memset(chan, 0, sizeof(*chan));
   151c2:	4601      	mov	r1, r0
   151c4:	f44f 72a4 	mov.w	r2, #328	; 0x148
   151c8:	9801      	ldr	r0, [sp, #4]
   151ca:	f006 f800 	bl	1b1ce <memset>
	chan->chan.chan.ops = &ops;
   151ce:	9801      	ldr	r0, [sp, #4]
   151d0:	4b10      	ldr	r3, [pc, #64]	; (15214 <bt_att_accept+0xc4>)
   151d2:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
   151d4:	30f8      	adds	r0, #248	; 0xf8
   151d6:	f007 fd35 	bl	1cc44 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   151da:	9b01      	ldr	r3, [sp, #4]
   151dc:	f3bf 8f5b 	dmb	ish
   151e0:	33f0      	adds	r3, #240	; 0xf0
   151e2:	e853 2f00 	ldrex	r2, [r3]
   151e6:	e843 4100 	strex	r1, r4, [r3]
   151ea:	2900      	cmp	r1, #0
   151ec:	d1f9      	bne.n	151e2 <bt_att_accept+0x92>
   151ee:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   151f2:	9b01      	ldr	r3, [sp, #4]
   151f4:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
   151f8:	603b      	str	r3, [r7, #0]
	return 0;
   151fa:	e7c1      	b.n	15180 <bt_att_accept+0x30>
   151fc:	200005ec 	.word	0x200005ec
   15200:	0001d790 	.word	0x0001d790
   15204:	0001d788 	.word	0x0001d788
   15208:	0001f483 	.word	0x0001f483
   1520c:	20000608 	.word	0x20000608
   15210:	0001f4a8 	.word	0x0001f4a8
   15214:	200004b0 	.word	0x200004b0

00015218 <read_group_cb>:
{
   15218:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1521c:	4605      	mov	r5, r0
   1521e:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   15220:	f04f 0800 	mov.w	r8, #0
   15224:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   15228:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   1522a:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1522c:	f88d 8008 	strb.w	r8, [sp, #8]
   15230:	a902      	add	r1, sp, #8
{
   15232:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   15234:	f8ad 300a 	strh.w	r3, [sp, #10]
   15238:	f005 fff3 	bl	1b222 <bt_uuid_cmp>
   1523c:	b1a0      	cbz	r0, 15268 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1523e:	f642 0301 	movw	r3, #10241	; 0x2801
   15242:	6828      	ldr	r0, [r5, #0]
   15244:	f88d 800c 	strb.w	r8, [sp, #12]
   15248:	a903      	add	r1, sp, #12
   1524a:	f8ad 300e 	strh.w	r3, [sp, #14]
   1524e:	f005 ffe8 	bl	1b222 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   15252:	b148      	cbz	r0, 15268 <read_group_cb+0x50>
		if (data->group &&
   15254:	6923      	ldr	r3, [r4, #16]
   15256:	b11b      	cbz	r3, 15260 <read_group_cb+0x48>
   15258:	885a      	ldrh	r2, [r3, #2]
   1525a:	42b2      	cmp	r2, r6
   1525c:	d200      	bcs.n	15260 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1525e:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   15260:	2001      	movs	r0, #1
}
   15262:	b004      	add	sp, #16
   15264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   15268:	6861      	ldr	r1, [r4, #4]
   1526a:	6828      	ldr	r0, [r5, #0]
   1526c:	f005 ffd9 	bl	1b222 <bt_uuid_cmp>
   15270:	b110      	cbz	r0, 15278 <read_group_cb+0x60>
		data->group = NULL;
   15272:	2300      	movs	r3, #0
   15274:	6123      	str	r3, [r4, #16]
   15276:	e7f3      	b.n	15260 <read_group_cb+0x48>
	if (data->rsp->len &&
   15278:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   1527a:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   1527c:	781a      	ldrb	r2, [r3, #0]
   1527e:	b13a      	cbz	r2, 15290 <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   15280:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
   15284:	8981      	ldrh	r1, [r0, #12]
   15286:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   15288:	4293      	cmp	r3, r2
   1528a:	da01      	bge.n	15290 <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
   1528c:	2000      	movs	r0, #0
   1528e:	e7e8      	b.n	15262 <read_group_cb+0x4a>
   15290:	2104      	movs	r1, #4
   15292:	3008      	adds	r0, #8
   15294:	f007 fa3a 	bl	1c70c <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   15298:	4b09      	ldr	r3, [pc, #36]	; (152c0 <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   1529a:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1529c:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1529e:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   152a0:	8046      	strh	r6, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   152a2:	4629      	mov	r1, r5
   152a4:	9300      	str	r3, [sp, #0]
   152a6:	9401      	str	r4, [sp, #4]
   152a8:	2300      	movs	r3, #0
   152aa:	4638      	mov	r0, r7
   152ac:	f006 fca4 	bl	1bbf8 <att_chan_read>
	if (read < 0) {
   152b0:	2800      	cmp	r0, #0
   152b2:	dbeb      	blt.n	1528c <read_group_cb+0x74>
	if (!data->group) {
   152b4:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   152b6:	3800      	subs	r0, #0
   152b8:	bf18      	it	ne
   152ba:	2001      	movne	r0, #1
   152bc:	e7d1      	b.n	15262 <read_group_cb+0x4a>
   152be:	bf00      	nop
   152c0:	0001bb67 	.word	0x0001bb67

000152c4 <chan_send>:
{
   152c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   152c8:	688b      	ldr	r3, [r1, #8]
   152ca:	781b      	ldrb	r3, [r3, #0]
   152cc:	2bd2      	cmp	r3, #210	; 0xd2
{
   152ce:	4606      	mov	r6, r0
   152d0:	460c      	mov	r4, r1
   152d2:	4617      	mov	r7, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   152d4:	d116      	bne.n	15304 <chan_send+0x40>
		err = bt_smp_sign(chan->att->conn, buf);
   152d6:	6803      	ldr	r3, [r0, #0]
   152d8:	6818      	ldr	r0, [r3, #0]
   152da:	f007 f9bb 	bl	1c654 <bt_smp_sign>
		if (err) {
   152de:	4605      	mov	r5, r0
   152e0:	b180      	cbz	r0, 15304 <chan_send+0x40>
   152e2:	4b24      	ldr	r3, [pc, #144]	; (15374 <chan_send+0xb0>)
   152e4:	4924      	ldr	r1, [pc, #144]	; (15378 <chan_send+0xb4>)
			BT_ERR("Error signing data");
   152e6:	4825      	ldr	r0, [pc, #148]	; (1537c <chan_send+0xb8>)
   152e8:	1ac9      	subs	r1, r1, r3
   152ea:	08c9      	lsrs	r1, r1, #3
   152ec:	0189      	lsls	r1, r1, #6
   152ee:	f041 0101 	orr.w	r1, r1, #1
   152f2:	f005 f8fa 	bl	1a4ea <log_0>
			net_buf_unref(buf);
   152f6:	4620      	mov	r0, r4
   152f8:	f001 fc06 	bl	16b08 <net_buf_unref>
}
   152fc:	4628      	mov	r0, r5
   152fe:	b003      	add	sp, #12
   15300:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   15304:	f104 0008 	add.w	r0, r4, #8
   15308:	f007 fa37 	bl	1c77a <net_buf_simple_headroom>
	state->len = buf->len;
   1530c:	f8b4 900c 	ldrh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   15310:	4680      	mov	r8, r0
	chan->sent = cb ? cb : chan_cb(buf);
   15312:	b957      	cbnz	r7, 1532a <chan_send+0x66>
	switch (att_op_get_type(buf->data[0])) {
   15314:	68a3      	ldr	r3, [r4, #8]
   15316:	7818      	ldrb	r0, [r3, #0]
   15318:	f006 fb66 	bl	1b9e8 <att_op_get_type>
   1531c:	1e43      	subs	r3, r0, #1
   1531e:	b2db      	uxtb	r3, r3
   15320:	2b04      	cmp	r3, #4
   15322:	bf9c      	itt	ls
   15324:	4a16      	ldrls	r2, [pc, #88]	; (15380 <chan_send+0xbc>)
   15326:	f852 7023 	ldrls.w	r7, [r2, r3, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1532a:	6833      	ldr	r3, [r6, #0]
	chan->sent = cb ? cb : chan_cb(buf);
   1532c:	f8c6 7140 	str.w	r7, [r6, #320]	; 0x140
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   15330:	6818      	ldr	r0, [r3, #0]
	if (cb == chan_rsp_sent) {
   15332:	4b14      	ldr	r3, [pc, #80]	; (15384 <chan_send+0xc0>)
   15334:	429f      	cmp	r7, r3
   15336:	d018      	beq.n	1536a <chan_send+0xa6>
	} else if (cb == chan_cfm_sent) {
   15338:	4b13      	ldr	r3, [pc, #76]	; (15388 <chan_send+0xc4>)
   1533a:	429f      	cmp	r7, r3
   1533c:	d017      	beq.n	1536e <chan_send+0xaa>
		return att_sent;
   1533e:	4913      	ldr	r1, [pc, #76]	; (1538c <chan_send+0xc8>)
   15340:	4b13      	ldr	r3, [pc, #76]	; (15390 <chan_send+0xcc>)
   15342:	4a14      	ldr	r2, [pc, #80]	; (15394 <chan_send+0xd0>)
   15344:	428f      	cmp	r7, r1
   15346:	bf18      	it	ne
   15348:	4613      	movne	r3, r2
			       &chan->chan.chan);
   1534a:	3608      	adds	r6, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1534c:	9600      	str	r6, [sp, #0]
   1534e:	4622      	mov	r2, r4
   15350:	2104      	movs	r1, #4
   15352:	f006 fae5 	bl	1b920 <bt_l2cap_send_cb>
	if (err) {
   15356:	4605      	mov	r5, r0
   15358:	2800      	cmp	r0, #0
   1535a:	d0cf      	beq.n	152fc <chan_send+0x38>
	buf->data = buf->__buf + state->offset;
   1535c:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   1535e:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
   15362:	fa10 f088 	uxtah	r0, r0, r8
   15366:	60a0      	str	r0, [r4, #8]
}
   15368:	e7c8      	b.n	152fc <chan_send+0x38>
		return att_rsp_sent;
   1536a:	4b0b      	ldr	r3, [pc, #44]	; (15398 <chan_send+0xd4>)
   1536c:	e7ed      	b.n	1534a <chan_send+0x86>
		return att_cfm_sent;
   1536e:	4b0b      	ldr	r3, [pc, #44]	; (1539c <chan_send+0xd8>)
   15370:	e7eb      	b.n	1534a <chan_send+0x86>
   15372:	bf00      	nop
   15374:	0001d788 	.word	0x0001d788
   15378:	0001d790 	.word	0x0001d790
   1537c:	0001f4cd 	.word	0x0001f4cd
   15380:	0001dbd8 	.word	0x0001dbd8
   15384:	0001bda9 	.word	0x0001bda9
   15388:	0001bdc5 	.word	0x0001bdc5
   1538c:	0001bb87 	.word	0x0001bb87
   15390:	00014f45 	.word	0x00014f45
   15394:	0001b9b9 	.word	0x0001b9b9
   15398:	00014f35 	.word	0x00014f35
   1539c:	00014f25 	.word	0x00014f25

000153a0 <bt_att_chan_send_rsp.constprop.0>:
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
   153a0:	b538      	push	{r3, r4, r5, lr}
	return chan_send(chan, buf, cb);
   153a2:	4a07      	ldr	r2, [pc, #28]	; (153c0 <bt_att_chan_send_rsp.constprop.0+0x20>)
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
   153a4:	4604      	mov	r4, r0
   153a6:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
   153a8:	f7ff ff8c 	bl	152c4 <chan_send>
	if (err) {
   153ac:	b130      	cbz	r0, 153bc <bt_att_chan_send_rsp.constprop.0+0x1c>
		net_buf_put(&chan->tx_queue, buf);
   153ae:	4629      	mov	r1, r5
   153b0:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
}
   153b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   153b8:	f007 b975 	b.w	1c6a6 <net_buf_put>
}
   153bc:	bd38      	pop	{r3, r4, r5, pc}
   153be:	bf00      	nop
   153c0:	0001bda9 	.word	0x0001bda9

000153c4 <read_type_cb>:
{
   153c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   153c8:	f8d2 8000 	ldr.w	r8, [r2]
{
   153cc:	4606      	mov	r6, r0
   153ce:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   153d0:	6800      	ldr	r0, [r0, #0]
   153d2:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   153d4:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
   153d8:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   153da:	f005 ff22 	bl	1b222 <bt_uuid_cmp>
   153de:	4607      	mov	r7, r0
   153e0:	2800      	cmp	r0, #0
   153e2:	d13e      	bne.n	15462 <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   153e4:	4628      	mov	r0, r5
   153e6:	2215      	movs	r2, #21
   153e8:	4631      	mov	r1, r6
   153ea:	f007 f8b8 	bl	1c55e <bt_gatt_check_perm>
   153ee:	4605      	mov	r5, r0
   153f0:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   153f2:	b148      	cbz	r0, 15408 <read_type_cb+0x44>
		if (data->rsp->len) {
   153f4:	68e3      	ldr	r3, [r4, #12]
   153f6:	781b      	ldrb	r3, [r3, #0]
   153f8:	b923      	cbnz	r3, 15404 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
   153fa:	2500      	movs	r5, #0
}
   153fc:	4628      	mov	r0, r5
   153fe:	b003      	add	sp, #12
   15400:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
   15404:	7527      	strb	r7, [r4, #20]
   15406:	e7f8      	b.n	153fa <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   15408:	68a0      	ldr	r0, [r4, #8]
   1540a:	f007 f95d 	bl	1c6c8 <net_buf_frag_last>
	return net_buf_simple_add(&buf->b, len);
   1540e:	2102      	movs	r1, #2
   15410:	3008      	adds	r0, #8
   15412:	f007 f97b 	bl	1c70c <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   15416:	4b14      	ldr	r3, [pc, #80]	; (15468 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   15418:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1541a:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
   1541c:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   15420:	4631      	mov	r1, r6
   15422:	9300      	str	r3, [sp, #0]
   15424:	9401      	str	r4, [sp, #4]
   15426:	462b      	mov	r3, r5
   15428:	4640      	mov	r0, r8
   1542a:	f006 fbe5 	bl	1bbf8 <att_chan_read>
	if (read < 0) {
   1542e:	2800      	cmp	r0, #0
   15430:	da07      	bge.n	15442 <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   15432:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   15436:	bf26      	itte	cs
   15438:	4240      	negcs	r0, r0
   1543a:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   1543c:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   1543e:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   15440:	e7dc      	b.n	153fc <read_type_cb+0x38>
	if (!data->item) {
   15442:	6923      	ldr	r3, [r4, #16]
   15444:	2b00      	cmp	r3, #0
   15446:	d0d8      	beq.n	153fa <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   15448:	68a0      	ldr	r0, [r4, #8]
   1544a:	f006 faad 	bl	1b9a8 <net_buf_frags_len>
   1544e:	f8b8 5086 	ldrh.w	r5, [r8, #134]	; 0x86
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   15452:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   15454:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   15456:	7818      	ldrb	r0, [r3, #0]
   15458:	4285      	cmp	r5, r0
   1545a:	bf94      	ite	ls
   1545c:	2500      	movls	r5, #0
   1545e:	2501      	movhi	r5, #1
   15460:	e7cc      	b.n	153fc <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   15462:	2501      	movs	r5, #1
   15464:	e7ca      	b.n	153fc <read_type_cb+0x38>
   15466:	bf00      	nop
   15468:	0001b9c5 	.word	0x0001b9c5

0001546c <bt_att_connected>:
{
   1546c:	b570      	push	{r4, r5, r6, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   1546e:	4606      	mov	r6, r0
{
   15470:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   15472:	2104      	movs	r1, #4
   15474:	f856 0908 	ldr.w	r0, [r6], #-8
   15478:	f006 fa6b 	bl	1b952 <bt_l2cap_le_lookup_tx_cid>
	struct bt_att *att = att_chan->att;
   1547c:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (sys_slist_is_empty(&att->chans)) {
   15480:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   15482:	b91b      	cbnz	r3, 1548c <bt_att_connected+0x20>
   15484:	f105 000c 	add.w	r0, r5, #12
   15488:	f007 fbdc 	bl	1cc44 <z_impl_k_queue_init>
	parent->next = child;
   1548c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   1548e:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
Z_GENLIST_PREPEND(slist, snode)
   15492:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   15494:	f504 739e 	add.w	r3, r4, #316	; 0x13c
	list->head = node;
   15498:	626b      	str	r3, [r5, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
   1549a:	b902      	cbnz	r2, 1549e <bt_att_connected+0x32>
	list->tail = node;
   1549c:	62ab      	str	r3, [r5, #40]	; 0x28
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1549e:	f3bf 8f5b 	dmb	ish
   154a2:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
   154a6:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   154aa:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   154ac:	bf58      	it	pl
   154ae:	2317      	movpl	r3, #23
	att_chan_mtu_updated(att_chan);
   154b0:	4630      	mov	r0, r6
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   154b2:	bf5c      	itt	pl
   154b4:	f8a4 307e 	strhpl.w	r3, [r4, #126]	; 0x7e
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   154b8:	f8a4 3072 	strhpl.w	r3, [r4, #114]	; 0x72
	att_chan_mtu_updated(att_chan);
   154bc:	f006 fb18 	bl	1baf0 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   154c0:	f504 7084 	add.w	r0, r4, #264	; 0x108
   154c4:	4902      	ldr	r1, [pc, #8]	; (154d0 <bt_att_connected+0x64>)
}
   154c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   154ca:	f007 bcbe 	b.w	1ce4a <k_work_init_delayable>
   154ce:	bf00      	nop
   154d0:	00015dad 	.word	0x00015dad

000154d4 <bt_att_chan_create_pdu>:
{
   154d4:	b538      	push	{r3, r4, r5, lr}
   154d6:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   154d8:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
   154dc:	3201      	adds	r2, #1
   154de:	428a      	cmp	r2, r1
   154e0:	d90c      	bls.n	154fc <bt_att_chan_create_pdu+0x28>
   154e2:	481a      	ldr	r0, [pc, #104]	; (1554c <bt_att_chan_create_pdu+0x78>)
   154e4:	4b1a      	ldr	r3, [pc, #104]	; (15550 <bt_att_chan_create_pdu+0x7c>)
   154e6:	1a1b      	subs	r3, r3, r0
   154e8:	08db      	lsrs	r3, r3, #3
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   154ea:	019b      	lsls	r3, r3, #6
   154ec:	4819      	ldr	r0, [pc, #100]	; (15554 <bt_att_chan_create_pdu+0x80>)
   154ee:	f043 0302 	orr.w	r3, r3, #2
   154f2:	f005 f81b 	bl	1a52c <log_2>
		return NULL;
   154f6:	2400      	movs	r4, #0
}
   154f8:	4620      	mov	r0, r4
   154fa:	bd38      	pop	{r3, r4, r5, pc}
	switch (att_op_get_type(op)) {
   154fc:	4628      	mov	r0, r5
   154fe:	f006 fa73 	bl	1b9e8 <att_op_get_type>
   15502:	2802      	cmp	r0, #2
   15504:	d001      	beq.n	1550a <bt_att_chan_create_pdu+0x36>
   15506:	2804      	cmp	r0, #4
   15508:	d114      	bne.n	15534 <bt_att_chan_create_pdu+0x60>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   1550a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1550e:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   15510:	2100      	movs	r1, #0
   15512:	4608      	mov	r0, r1
   15514:	f006 fa01 	bl	1b91a <bt_l2cap_create_pdu_timeout>
   15518:	4604      	mov	r4, r0
	if (!buf) {
   1551a:	b980      	cbnz	r0, 1553e <bt_att_chan_create_pdu+0x6a>
   1551c:	4b0b      	ldr	r3, [pc, #44]	; (1554c <bt_att_chan_create_pdu+0x78>)
   1551e:	4a0c      	ldr	r2, [pc, #48]	; (15550 <bt_att_chan_create_pdu+0x7c>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   15520:	480d      	ldr	r0, [pc, #52]	; (15558 <bt_att_chan_create_pdu+0x84>)
   15522:	1ad2      	subs	r2, r2, r3
   15524:	08d2      	lsrs	r2, r2, #3
   15526:	0192      	lsls	r2, r2, #6
   15528:	f042 0201 	orr.w	r2, r2, #1
   1552c:	4629      	mov	r1, r5
   1552e:	f004 ffe9 	bl	1a504 <log_1>
		return NULL;
   15532:	e7e1      	b.n	154f8 <bt_att_chan_create_pdu+0x24>
		buf = bt_l2cap_create_pdu(NULL, 0);
   15534:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15538:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1553c:	e7e8      	b.n	15510 <bt_att_chan_create_pdu+0x3c>
   1553e:	2101      	movs	r1, #1
   15540:	3008      	adds	r0, #8
   15542:	f007 f8e3 	bl	1c70c <net_buf_simple_add>
	hdr->code = op;
   15546:	7005      	strb	r5, [r0, #0]
	return buf;
   15548:	e7d6      	b.n	154f8 <bt_att_chan_create_pdu+0x24>
   1554a:	bf00      	nop
   1554c:	0001d788 	.word	0x0001d788
   15550:	0001d790 	.word	0x0001d790
   15554:	0001f4e0 	.word	0x0001f4e0
   15558:	0001f2cd 	.word	0x0001f2cd

0001555c <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
   1555c:	898b      	ldrh	r3, [r1, #12]
{
   1555e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15562:	4604      	mov	r4, r0
   15564:	4688      	mov	r8, r1
	if (buf->len < sizeof(*hdr)) {
   15566:	b963      	cbnz	r3, 15582 <bt_att_recv+0x26>
   15568:	494c      	ldr	r1, [pc, #304]	; (1569c <bt_att_recv+0x140>)
   1556a:	4b4d      	ldr	r3, [pc, #308]	; (156a0 <bt_att_recv+0x144>)
		BT_ERR("Too small ATT PDU received");
   1556c:	484d      	ldr	r0, [pc, #308]	; (156a4 <bt_att_recv+0x148>)
   1556e:	1ac9      	subs	r1, r1, r3
   15570:	08c9      	lsrs	r1, r1, #3
   15572:	0189      	lsls	r1, r1, #6
   15574:	f041 0101 	orr.w	r1, r1, #1
			BT_WARN("Ignoring unexpected indication");
   15578:	f004 ffb7 	bl	1a4ea <log_0>
}
   1557c:	2000      	movs	r0, #0
   1557e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   15582:	2101      	movs	r1, #1
   15584:	f108 0008 	add.w	r0, r8, #8
   15588:	f007 f8e7 	bl	1c75a <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   1558c:	f854 3c08 	ldr.w	r3, [r4, #-8]
   15590:	4605      	mov	r5, r0
   15592:	2b00      	cmp	r3, #0
   15594:	d0f2      	beq.n	1557c <bt_att_recv+0x20>
		if (hdr->code == handlers[i].op) {
   15596:	7801      	ldrb	r1, [r0, #0]
   15598:	4a43      	ldr	r2, [pc, #268]	; (156a8 <bt_att_recv+0x14c>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   1559a:	f1a4 0608 	sub.w	r6, r4, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1559e:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   155a0:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
   155a4:	4288      	cmp	r0, r1
   155a6:	d11e      	bne.n	155e6 <bt_att_recv+0x8a>
		if (handler->type == ATT_REQUEST &&
   155a8:	00d8      	lsls	r0, r3, #3
   155aa:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   155ae:	789f      	ldrb	r7, [r3, #2]
   155b0:	2f01      	cmp	r7, #1
   155b2:	d133      	bne.n	1561c <bt_att_recv+0xc0>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   155b4:	f3bf 8f5b 	dmb	ish
   155b8:	34e8      	adds	r4, #232	; 0xe8
   155ba:	e854 3f00 	ldrex	r3, [r4]
   155be:	f043 0101 	orr.w	r1, r3, #1
   155c2:	e844 1c00 	strex	ip, r1, [r4]
   155c6:	f1bc 0f00 	cmp.w	ip, #0
   155ca:	d1f6      	bne.n	155ba <bt_att_recv+0x5e>
   155cc:	f3bf 8f5b 	dmb	ish
   155d0:	07d9      	lsls	r1, r3, #31
   155d2:	d53e      	bpl.n	15652 <bt_att_recv+0xf6>
   155d4:	4931      	ldr	r1, [pc, #196]	; (1569c <bt_att_recv+0x140>)
   155d6:	4b32      	ldr	r3, [pc, #200]	; (156a0 <bt_att_recv+0x144>)
			BT_WARN("Ignoring unexpected request");
   155d8:	4834      	ldr	r0, [pc, #208]	; (156ac <bt_att_recv+0x150>)
   155da:	1ac9      	subs	r1, r1, r3
   155dc:	08c9      	lsrs	r1, r1, #3
   155de:	0189      	lsls	r1, r1, #6
   155e0:	f041 0102 	orr.w	r1, r1, #2
   155e4:	e7c8      	b.n	15578 <bt_att_recv+0x1c>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   155e6:	3301      	adds	r3, #1
   155e8:	2b0d      	cmp	r3, #13
   155ea:	d1d9      	bne.n	155a0 <bt_att_recv+0x44>
   155ec:	4b2c      	ldr	r3, [pc, #176]	; (156a0 <bt_att_recv+0x144>)
   155ee:	4a2b      	ldr	r2, [pc, #172]	; (1569c <bt_att_recv+0x140>)
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
   155f0:	482f      	ldr	r0, [pc, #188]	; (156b0 <bt_att_recv+0x154>)
   155f2:	1ad2      	subs	r2, r2, r3
   155f4:	08d2      	lsrs	r2, r2, #3
   155f6:	0192      	lsls	r2, r2, #6
   155f8:	f042 0202 	orr.w	r2, r2, #2
   155fc:	f004 ff82 	bl	1a504 <log_1>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
   15600:	7829      	ldrb	r1, [r5, #0]
   15602:	4608      	mov	r0, r1
   15604:	f006 f9f0 	bl	1b9e8 <att_op_get_type>
   15608:	2800      	cmp	r0, #0
   1560a:	d0b7      	beq.n	1557c <bt_att_recv+0x20>
	if (!req) {
   1560c:	2900      	cmp	r1, #0
   1560e:	d0b5      	beq.n	1557c <bt_att_recv+0x20>
   15610:	2306      	movs	r3, #6
   15612:	2200      	movs	r2, #0
   15614:	4630      	mov	r0, r6
   15616:	f006 fc9a 	bl	1bf4e <send_err_rsp.part.0>
   1561a:	e7af      	b.n	1557c <bt_att_recv+0x20>
		} else if (handler->type == ATT_INDICATION &&
   1561c:	2f05      	cmp	r7, #5
   1561e:	d118      	bne.n	15652 <bt_att_recv+0xf6>
   15620:	f3bf 8f5b 	dmb	ish
   15624:	34e8      	adds	r4, #232	; 0xe8
   15626:	e854 3f00 	ldrex	r3, [r4]
   1562a:	f043 0102 	orr.w	r1, r3, #2
   1562e:	e844 1c00 	strex	ip, r1, [r4]
   15632:	f1bc 0f00 	cmp.w	ip, #0
   15636:	d1f6      	bne.n	15626 <bt_att_recv+0xca>
   15638:	f3bf 8f5b 	dmb	ish
   1563c:	079b      	lsls	r3, r3, #30
   1563e:	d508      	bpl.n	15652 <bt_att_recv+0xf6>
   15640:	4916      	ldr	r1, [pc, #88]	; (1569c <bt_att_recv+0x140>)
   15642:	4b17      	ldr	r3, [pc, #92]	; (156a0 <bt_att_recv+0x144>)
			BT_WARN("Ignoring unexpected indication");
   15644:	481b      	ldr	r0, [pc, #108]	; (156b4 <bt_att_recv+0x158>)
   15646:	1ac9      	subs	r1, r1, r3
   15648:	08c9      	lsrs	r1, r1, #3
   1564a:	0189      	lsls	r1, r1, #6
   1564c:	f041 0102 	orr.w	r1, r1, #2
   15650:	e792      	b.n	15578 <bt_att_recv+0x1c>
	if (buf->len < handler->expect_len) {
   15652:	1813      	adds	r3, r2, r0
   15654:	f8b8 100c 	ldrh.w	r1, [r8, #12]
   15658:	785a      	ldrb	r2, [r3, #1]
   1565a:	428a      	cmp	r2, r1
   1565c:	d90e      	bls.n	1567c <bt_att_recv+0x120>
   1565e:	4a10      	ldr	r2, [pc, #64]	; (156a0 <bt_att_recv+0x144>)
   15660:	4b0e      	ldr	r3, [pc, #56]	; (1569c <bt_att_recv+0x140>)
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   15662:	4815      	ldr	r0, [pc, #84]	; (156b8 <bt_att_recv+0x15c>)
   15664:	1a9b      	subs	r3, r3, r2
   15666:	08db      	lsrs	r3, r3, #3
   15668:	019b      	lsls	r3, r3, #6
   1566a:	782a      	ldrb	r2, [r5, #0]
   1566c:	f043 0301 	orr.w	r3, r3, #1
   15670:	f004 ff5c 	bl	1a52c <log_2>
	if (handler->type == ATT_REQUEST && err) {
   15674:	2f01      	cmp	r7, #1
   15676:	d181      	bne.n	1557c <bt_att_recv+0x20>
		err = BT_ATT_ERR_INVALID_PDU;
   15678:	2304      	movs	r3, #4
   1567a:	e00a      	b.n	15692 <bt_att_recv+0x136>
		err = handler->func(att_chan, buf);
   1567c:	685b      	ldr	r3, [r3, #4]
   1567e:	4641      	mov	r1, r8
   15680:	4630      	mov	r0, r6
   15682:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   15684:	2f01      	cmp	r7, #1
		err = handler->func(att_chan, buf);
   15686:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   15688:	f47f af78 	bne.w	1557c <bt_att_recv+0x20>
   1568c:	2800      	cmp	r0, #0
   1568e:	f43f af75 	beq.w	1557c <bt_att_recv+0x20>
		send_err_rsp(att_chan, hdr->code, 0, err);
   15692:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
   15694:	2900      	cmp	r1, #0
   15696:	f43f af71 	beq.w	1557c <bt_att_recv+0x20>
   1569a:	e7ba      	b.n	15612 <bt_att_recv+0xb6>
   1569c:	0001d790 	.word	0x0001d790
   156a0:	0001d788 	.word	0x0001d788
   156a4:	0001f505 	.word	0x0001f505
   156a8:	0001dbec 	.word	0x0001dbec
   156ac:	0001f520 	.word	0x0001f520
   156b0:	0001f57a 	.word	0x0001f57a
   156b4:	0001f53c 	.word	0x0001f53c
   156b8:	0001f55b 	.word	0x0001f55b

000156bc <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   156bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   156c0:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   156c2:	6803      	ldr	r3, [r0, #0]
   156c4:	460e      	mov	r6, r1
   156c6:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   156c8:	b087      	sub	sp, #28
   156ca:	4605      	mov	r5, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   156cc:	bf18      	it	ne
   156ce:	2101      	movne	r1, #1
   156d0:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   156d2:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   156d4:	f006 ff66 	bl	1c5a4 <bt_gatt_change_aware>
   156d8:	2800      	cmp	r0, #0
   156da:	d04a      	beq.n	15772 <att_write_rsp.constprop.0+0xb6>
	if (!handle) {
   156dc:	2f00      	cmp	r7, #0
   156de:	d04a      	beq.n	15776 <att_write_rsp.constprop.0+0xba>
	(void)memset(&data, 0, sizeof(data));
   156e0:	2218      	movs	r2, #24
   156e2:	2100      	movs	r1, #0
   156e4:	4668      	mov	r0, sp
   156e6:	f005 fd72 	bl	1b1ce <memset>
	if (rsp) {
   156ea:	f1b8 0f00 	cmp.w	r8, #0
   156ee:	d122      	bne.n	15736 <att_write_rsp.constprop.0+0x7a>
	data.conn = chan->att->conn;
   156f0:	682b      	ldr	r3, [r5, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   156f2:	4a22      	ldr	r2, [pc, #136]	; (1577c <att_write_rsp.constprop.0+0xc0>)
	data.conn = chan->att->conn;
   156f4:	681b      	ldr	r3, [r3, #0]
   156f6:	9300      	str	r3, [sp, #0]
	data.value = value;
   156f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   156fa:	9303      	str	r3, [sp, #12]
	data.len = len;
   156fc:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
   15700:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   15704:	2301      	movs	r3, #1
   15706:	f88d 3014 	strb.w	r3, [sp, #20]
	data.offset = offset;
   1570a:	f04f 0900 	mov.w	r9, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1570e:	466b      	mov	r3, sp
   15710:	4639      	mov	r1, r7
   15712:	4638      	mov	r0, r7
	data.req = req;
   15714:	f88d 6008 	strb.w	r6, [sp, #8]
	data.offset = offset;
   15718:	f8ad 9012 	strh.w	r9, [sp, #18]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1571c:	f006 f991 	bl	1ba42 <bt_gatt_foreach_attr>
	if (data.err) {
   15720:	f89d 4014 	ldrb.w	r4, [sp, #20]
   15724:	b1f4      	cbz	r4, 15764 <att_write_rsp.constprop.0+0xa8>
		if (rsp) {
   15726:	f1b8 0f00 	cmp.w	r8, #0
   1572a:	d10e      	bne.n	1574a <att_write_rsp.constprop.0+0x8e>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   1572c:	2400      	movs	r4, #0
}
   1572e:	4620      	mov	r0, r4
   15730:	b007      	add	sp, #28
   15732:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   15736:	2200      	movs	r2, #0
   15738:	4641      	mov	r1, r8
   1573a:	4628      	mov	r0, r5
   1573c:	f7ff feca 	bl	154d4 <bt_att_chan_create_pdu>
   15740:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   15742:	2800      	cmp	r0, #0
   15744:	d1d4      	bne.n	156f0 <att_write_rsp.constprop.0+0x34>
			return BT_ATT_ERR_UNLIKELY;
   15746:	240e      	movs	r4, #14
   15748:	e7f1      	b.n	1572e <att_write_rsp.constprop.0+0x72>
			net_buf_unref(data.buf);
   1574a:	9801      	ldr	r0, [sp, #4]
   1574c:	f001 f9dc 	bl	16b08 <net_buf_unref>
	if (!req) {
   15750:	2e00      	cmp	r6, #0
   15752:	d0eb      	beq.n	1572c <att_write_rsp.constprop.0+0x70>
   15754:	f89d 3014 	ldrb.w	r3, [sp, #20]
   15758:	463a      	mov	r2, r7
   1575a:	4631      	mov	r1, r6
   1575c:	4628      	mov	r0, r5
   1575e:	f006 fbf6 	bl	1bf4e <send_err_rsp.part.0>
   15762:	e7e3      	b.n	1572c <att_write_rsp.constprop.0+0x70>
	if (data.buf) {
   15764:	9901      	ldr	r1, [sp, #4]
   15766:	2900      	cmp	r1, #0
   15768:	d0e0      	beq.n	1572c <att_write_rsp.constprop.0+0x70>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1576a:	4628      	mov	r0, r5
   1576c:	f7ff fe18 	bl	153a0 <bt_att_chan_send_rsp.constprop.0>
   15770:	e7dd      	b.n	1572e <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   15772:	2412      	movs	r4, #18
   15774:	e7db      	b.n	1572e <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_INVALID_HANDLE;
   15776:	2401      	movs	r4, #1
   15778:	e7d9      	b.n	1572e <att_write_rsp.constprop.0+0x72>
   1577a:	bf00      	nop
   1577c:	0001bb9d 	.word	0x0001bb9d

00015780 <bt_att_create_pdu>:
{
   15780:	b570      	push	{r4, r5, r6, lr}
   15782:	460e      	mov	r6, r1
   15784:	4615      	mov	r5, r2
	att = att_get(conn);
   15786:	f7ff fbe5 	bl	14f54 <att_get>
	if (!att) {
   1578a:	b1c0      	cbz	r0, 157be <bt_att_create_pdu+0x3e>
	return list->head;
   1578c:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1578e:	1c69      	adds	r1, r5, #1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   15790:	b15b      	cbz	r3, 157aa <bt_att_create_pdu+0x2a>
   15792:	f5b3 70a2 	subs.w	r0, r3, #324	; 0x144
   15796:	d008      	beq.n	157aa <bt_att_create_pdu+0x2a>
	return node->next;
   15798:	681b      	ldr	r3, [r3, #0]
   1579a:	b10b      	cbz	r3, 157a0 <bt_att_create_pdu+0x20>
   1579c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   157a0:	f8b0 2086 	ldrh.w	r2, [r0, #134]	; 0x86
   157a4:	4291      	cmp	r1, r2
   157a6:	d90c      	bls.n	157c2 <bt_att_create_pdu+0x42>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   157a8:	b98b      	cbnz	r3, 157ce <bt_att_create_pdu+0x4e>
   157aa:	4a0e      	ldr	r2, [pc, #56]	; (157e4 <bt_att_create_pdu+0x64>)
   157ac:	4b0e      	ldr	r3, [pc, #56]	; (157e8 <bt_att_create_pdu+0x68>)
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   157ae:	480f      	ldr	r0, [pc, #60]	; (157ec <bt_att_create_pdu+0x6c>)
   157b0:	1ad2      	subs	r2, r2, r3
   157b2:	08d2      	lsrs	r2, r2, #3
   157b4:	0192      	lsls	r2, r2, #6
   157b6:	f042 0202 	orr.w	r2, r2, #2
   157ba:	f004 fea3 	bl	1a504 <log_1>
}
   157be:	2000      	movs	r0, #0
   157c0:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   157c2:	462a      	mov	r2, r5
   157c4:	4631      	mov	r1, r6
}
   157c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   157ca:	f7ff be83 	b.w	154d4 <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
   157ce:	f513 74a2 	adds.w	r4, r3, #324	; 0x144
   157d2:	d004      	beq.n	157de <bt_att_create_pdu+0x5e>
	return node->next;
   157d4:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   157d8:	b10c      	cbz	r4, 157de <bt_att_create_pdu+0x5e>
   157da:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
{
   157de:	4618      	mov	r0, r3
   157e0:	4623      	mov	r3, r4
   157e2:	e7dd      	b.n	157a0 <bt_att_create_pdu+0x20>
   157e4:	0001d790 	.word	0x0001d790
   157e8:	0001d788 	.word	0x0001d788
   157ec:	0001f594 	.word	0x0001f594

000157f0 <att_read_group_req>:
{
   157f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   157f4:	898c      	ldrh	r4, [r1, #12]
   157f6:	3c04      	subs	r4, #4
   157f8:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   157fa:	2c02      	cmp	r4, #2
{
   157fc:	4605      	mov	r5, r0
   157fe:	b08c      	sub	sp, #48	; 0x30
   15800:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   15802:	d001      	beq.n	15808 <att_read_group_req+0x18>
   15804:	2c10      	cmp	r4, #16
   15806:	d16e      	bne.n	158e6 <att_read_group_req+0xf6>
   15808:	2104      	movs	r1, #4
   1580a:	3008      	adds	r0, #8
   1580c:	f006 ffa5 	bl	1c75a <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   15810:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   15814:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   15816:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   15818:	1d01      	adds	r1, r0, #4
   1581a:	4622      	mov	r2, r4
   1581c:	4640      	mov	r0, r8
   1581e:	f005 fd2e 	bl	1b27e <bt_uuid_create>
   15822:	2800      	cmp	r0, #0
   15824:	d061      	beq.n	158ea <att_read_group_req+0xfa>
	if (!start || !end) {
   15826:	2e00      	cmp	r6, #0
   15828:	d03a      	beq.n	158a0 <att_read_group_req+0xb0>
   1582a:	2400      	movs	r4, #0
   1582c:	2f00      	cmp	r7, #0
   1582e:	d036      	beq.n	1589e <att_read_group_req+0xae>
	if (start > end) {
   15830:	42b7      	cmp	r7, r6
   15832:	d335      	bcc.n	158a0 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   15834:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   15838:	a901      	add	r1, sp, #4
   1583a:	4640      	mov	r0, r8
   1583c:	f88d 4004 	strb.w	r4, [sp, #4]
   15840:	f8ad 3006 	strh.w	r3, [sp, #6]
   15844:	f005 fced 	bl	1b222 <bt_uuid_cmp>
   15848:	2800      	cmp	r0, #0
   1584a:	d134      	bne.n	158b6 <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
   1584c:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   1584e:	2214      	movs	r2, #20
   15850:	2100      	movs	r1, #0
   15852:	a807      	add	r0, sp, #28
   15854:	f005 fcbb 	bl	1b1ce <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   15858:	2201      	movs	r2, #1
   1585a:	2111      	movs	r1, #17
   1585c:	4620      	mov	r0, r4
   1585e:	f7ff ff8f 	bl	15780 <bt_att_create_pdu>
   15862:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   15864:	2800      	cmp	r0, #0
   15866:	d040      	beq.n	158ea <att_read_group_req+0xfa>
	return net_buf_simple_add(&buf->b, len);
   15868:	2101      	movs	r1, #1
   1586a:	3008      	adds	r0, #8
	data.uuid = uuid;
   1586c:	e9cd 5807 	strd	r5, r8, [sp, #28]
   15870:	f006 ff4c 	bl	1c70c <net_buf_simple_add>
	data.rsp->len = 0U;
   15874:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   15878:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1587a:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
   1587c:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   15880:	4a1b      	ldr	r2, [pc, #108]	; (158f0 <att_read_group_req+0x100>)
	data.group = NULL;
   15882:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   15886:	4639      	mov	r1, r7
   15888:	4630      	mov	r0, r6
   1588a:	f006 f8da 	bl	1ba42 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   1588e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15890:	781c      	ldrb	r4, [r3, #0]
   15892:	bb1c      	cbnz	r4, 158dc <att_read_group_req+0xec>
		net_buf_unref(data.buf);
   15894:	9809      	ldr	r0, [sp, #36]	; 0x24
   15896:	f001 f937 	bl	16b08 <net_buf_unref>
	if (!req) {
   1589a:	230a      	movs	r3, #10
   1589c:	e018      	b.n	158d0 <att_read_group_req+0xe0>
			*err = 0U;
   1589e:	463e      	mov	r6, r7
	if (!req) {
   158a0:	2301      	movs	r3, #1
   158a2:	4632      	mov	r2, r6
   158a4:	2110      	movs	r1, #16
   158a6:	4628      	mov	r0, r5
   158a8:	f006 fb51 	bl	1bf4e <send_err_rsp.part.0>
		return 0;
   158ac:	2400      	movs	r4, #0
}
   158ae:	4620      	mov	r0, r4
   158b0:	b00c      	add	sp, #48	; 0x30
   158b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   158b6:	f642 0301 	movw	r3, #10241	; 0x2801
   158ba:	a907      	add	r1, sp, #28
   158bc:	4640      	mov	r0, r8
   158be:	f88d 401c 	strb.w	r4, [sp, #28]
   158c2:	f8ad 301e 	strh.w	r3, [sp, #30]
   158c6:	f005 fcac 	bl	1b222 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   158ca:	2800      	cmp	r0, #0
   158cc:	d0be      	beq.n	1584c <att_read_group_req+0x5c>
	if (!req) {
   158ce:	2310      	movs	r3, #16
   158d0:	4632      	mov	r2, r6
   158d2:	2110      	movs	r1, #16
   158d4:	4628      	mov	r0, r5
   158d6:	f006 fb3a 	bl	1bf4e <send_err_rsp.part.0>
		return 0;
   158da:	e7e8      	b.n	158ae <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   158dc:	9909      	ldr	r1, [sp, #36]	; 0x24
   158de:	4628      	mov	r0, r5
   158e0:	f7ff fd5e 	bl	153a0 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   158e4:	e7e2      	b.n	158ac <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
   158e6:	2404      	movs	r4, #4
   158e8:	e7e1      	b.n	158ae <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
   158ea:	240e      	movs	r4, #14
   158ec:	e7df      	b.n	158ae <att_read_group_req+0xbe>
   158ee:	bf00      	nop
   158f0:	00015219 	.word	0x00015219

000158f4 <att_read_mult_req>:
{
   158f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   158f8:	6886      	ldr	r6, [r0, #8]
{
   158fa:	b085      	sub	sp, #20
   158fc:	4604      	mov	r4, r0
   158fe:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   15900:	4630      	mov	r0, r6
   15902:	2101      	movs	r1, #1
   15904:	f006 fe4e 	bl	1c5a4 <bt_gatt_change_aware>
   15908:	b3b8      	cbz	r0, 1597a <att_read_mult_req+0x86>
	(void)memset(&data, 0, sizeof(data));
   1590a:	2210      	movs	r2, #16
   1590c:	2100      	movs	r1, #0
   1590e:	4668      	mov	r0, sp
   15910:	f005 fc5d 	bl	1b1ce <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   15914:	2200      	movs	r2, #0
   15916:	210f      	movs	r1, #15
   15918:	4630      	mov	r0, r6
   1591a:	f7ff ff31 	bl	15780 <bt_att_create_pdu>
   1591e:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   15920:	b368      	cbz	r0, 1597e <att_read_mult_req+0x8a>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   15922:	f8df 9060 	ldr.w	r9, [pc, #96]	; 15984 <att_read_mult_req+0x90>
	data.chan = chan;
   15926:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   15928:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1592c:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   15930:	89ab      	ldrh	r3, [r5, #12]
   15932:	2b01      	cmp	r3, #1
   15934:	d804      	bhi.n	15940 <att_read_mult_req+0x4c>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   15936:	9902      	ldr	r1, [sp, #8]
   15938:	4620      	mov	r0, r4
   1593a:	f7ff fd31 	bl	153a0 <bt_att_chan_send_rsp.constprop.0>
   1593e:	e018      	b.n	15972 <att_read_mult_req+0x7e>
   15940:	4638      	mov	r0, r7
   15942:	f006 ff12 	bl	1c76a <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   15946:	466b      	mov	r3, sp
   15948:	464a      	mov	r2, r9
   1594a:	4601      	mov	r1, r0
   1594c:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1594e:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   15952:	f006 f876 	bl	1ba42 <bt_gatt_foreach_attr>
		if (data.err) {
   15956:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1595a:	2b00      	cmp	r3, #0
   1595c:	d0e8      	beq.n	15930 <att_read_mult_req+0x3c>
			net_buf_unref(data.buf);
   1595e:	9802      	ldr	r0, [sp, #8]
   15960:	f001 f8d2 	bl	16b08 <net_buf_unref>
	if (!req) {
   15964:	f89d 300c 	ldrb.w	r3, [sp, #12]
   15968:	4632      	mov	r2, r6
   1596a:	210e      	movs	r1, #14
   1596c:	4620      	mov	r0, r4
   1596e:	f006 faee 	bl	1bf4e <send_err_rsp.part.0>
	return 0;
   15972:	2000      	movs	r0, #0
}
   15974:	b005      	add	sp, #20
   15976:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1597a:	2012      	movs	r0, #18
   1597c:	e7fa      	b.n	15974 <att_read_mult_req+0x80>
		return BT_ATT_ERR_UNLIKELY;
   1597e:	200e      	movs	r0, #14
   15980:	e7f8      	b.n	15974 <att_read_mult_req+0x80>
   15982:	bf00      	nop
   15984:	0001bde1 	.word	0x0001bde1

00015988 <att_read_rsp>:
{
   15988:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1598c:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
   15990:	4605      	mov	r5, r0
   15992:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
   15994:	4640      	mov	r0, r8
   15996:	2101      	movs	r1, #1
{
   15998:	4614      	mov	r4, r2
   1599a:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
   1599c:	f006 fe02 	bl	1c5a4 <bt_gatt_change_aware>
   159a0:	b388      	cbz	r0, 15a06 <att_read_rsp+0x7e>
	if (!handle) {
   159a2:	b396      	cbz	r6, 15a0a <att_read_rsp+0x82>
	(void)memset(&data, 0, sizeof(data));
   159a4:	2210      	movs	r2, #16
   159a6:	2100      	movs	r1, #0
   159a8:	4668      	mov	r0, sp
   159aa:	f005 fc10 	bl	1b1ce <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   159ae:	2200      	movs	r2, #0
   159b0:	4621      	mov	r1, r4
   159b2:	4640      	mov	r0, r8
   159b4:	f7ff fee4 	bl	15780 <bt_att_create_pdu>
   159b8:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   159ba:	b340      	cbz	r0, 15a0e <att_read_rsp+0x86>
	data.offset = offset;
   159bc:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   159c0:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   159c4:	2301      	movs	r3, #1
   159c6:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   159ca:	4a12      	ldr	r2, [pc, #72]	; (15a14 <att_read_rsp+0x8c>)
	data.chan = chan;
   159cc:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   159ce:	466b      	mov	r3, sp
   159d0:	4631      	mov	r1, r6
   159d2:	4630      	mov	r0, r6
   159d4:	f006 f835 	bl	1ba42 <bt_gatt_foreach_attr>
	if (data.err) {
   159d8:	f89d 400c 	ldrb.w	r4, [sp, #12]
   159dc:	b174      	cbz	r4, 159fc <att_read_rsp+0x74>
		net_buf_unref(data.buf);
   159de:	9802      	ldr	r0, [sp, #8]
   159e0:	f001 f892 	bl	16b08 <net_buf_unref>
	if (!req) {
   159e4:	f89d 300c 	ldrb.w	r3, [sp, #12]
   159e8:	4632      	mov	r2, r6
   159ea:	4639      	mov	r1, r7
   159ec:	4628      	mov	r0, r5
   159ee:	f006 faae 	bl	1bf4e <send_err_rsp.part.0>
		return 0;
   159f2:	2400      	movs	r4, #0
}
   159f4:	4620      	mov	r0, r4
   159f6:	b004      	add	sp, #16
   159f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   159fc:	9902      	ldr	r1, [sp, #8]
   159fe:	4628      	mov	r0, r5
   15a00:	f7ff fcce 	bl	153a0 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   15a04:	e7f6      	b.n	159f4 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   15a06:	2412      	movs	r4, #18
   15a08:	e7f4      	b.n	159f4 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
   15a0a:	2401      	movs	r4, #1
   15a0c:	e7f2      	b.n	159f4 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   15a0e:	240e      	movs	r4, #14
   15a10:	e7f0      	b.n	159f4 <att_read_rsp+0x6c>
   15a12:	bf00      	nop
   15a14:	0001bde1 	.word	0x0001bde1

00015a18 <att_read_type_req>:
{
   15a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   15a1c:	898c      	ldrh	r4, [r1, #12]
   15a1e:	3c04      	subs	r4, #4
   15a20:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   15a22:	2c02      	cmp	r4, #2
{
   15a24:	4605      	mov	r5, r0
   15a26:	b08c      	sub	sp, #48	; 0x30
   15a28:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   15a2a:	d001      	beq.n	15a30 <att_read_type_req+0x18>
   15a2c:	2c10      	cmp	r4, #16
   15a2e:	d14f      	bne.n	15ad0 <att_read_type_req+0xb8>
	return net_buf_simple_pull_mem(&buf->b, len);
   15a30:	2104      	movs	r1, #4
   15a32:	3008      	adds	r0, #8
   15a34:	f006 fe91 	bl	1c75a <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   15a38:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   15a3c:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   15a3e:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   15a40:	1d01      	adds	r1, r0, #4
   15a42:	4622      	mov	r2, r4
   15a44:	4640      	mov	r0, r8
   15a46:	f005 fc1a 	bl	1b27e <bt_uuid_create>
   15a4a:	b188      	cbz	r0, 15a70 <att_read_type_req+0x58>
	if (!start || !end) {
   15a4c:	b19e      	cbz	r6, 15a76 <att_read_type_req+0x5e>
   15a4e:	b18f      	cbz	r7, 15a74 <att_read_type_req+0x5c>
	if (start > end) {
   15a50:	42be      	cmp	r6, r7
   15a52:	d810      	bhi.n	15a76 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   15a54:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   15a56:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   15a58:	2100      	movs	r1, #0
   15a5a:	eb0d 0002 	add.w	r0, sp, r2
   15a5e:	f005 fbb6 	bl	1b1ce <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   15a62:	2201      	movs	r2, #1
   15a64:	2109      	movs	r1, #9
   15a66:	4620      	mov	r0, r4
   15a68:	f7ff fe8a 	bl	15780 <bt_att_create_pdu>
   15a6c:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   15a6e:	b968      	cbnz	r0, 15a8c <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
   15a70:	240e      	movs	r4, #14
   15a72:	e007      	b.n	15a84 <att_read_type_req+0x6c>
			*err = 0U;
   15a74:	463e      	mov	r6, r7
	if (!req) {
   15a76:	2301      	movs	r3, #1
   15a78:	4632      	mov	r2, r6
   15a7a:	2108      	movs	r1, #8
   15a7c:	4628      	mov	r0, r5
   15a7e:	f006 fa66 	bl	1bf4e <send_err_rsp.part.0>
		return 0;
   15a82:	2400      	movs	r4, #0
}
   15a84:	4620      	mov	r0, r4
   15a86:	b00c      	add	sp, #48	; 0x30
   15a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   15a8c:	2101      	movs	r1, #1
   15a8e:	3008      	adds	r0, #8
	data.uuid = uuid;
   15a90:	e9cd 5806 	strd	r5, r8, [sp, #24]
   15a94:	f006 fe3a 	bl	1c70c <net_buf_simple_add>
	data.rsp->len = 0U;
   15a98:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   15a9c:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   15a9e:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   15aa0:	4a0c      	ldr	r2, [pc, #48]	; (15ad4 <att_read_type_req+0xbc>)
	data.rsp->len = 0U;
   15aa2:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   15aa6:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   15aa8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   15aac:	4630      	mov	r0, r6
   15aae:	ab06      	add	r3, sp, #24
   15ab0:	f005 ffc7 	bl	1ba42 <bt_gatt_foreach_attr>
	if (data.err) {
   15ab4:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   15ab8:	b12c      	cbz	r4, 15ac6 <att_read_type_req+0xae>
		net_buf_unref(data.buf);
   15aba:	9808      	ldr	r0, [sp, #32]
   15abc:	f001 f824 	bl	16b08 <net_buf_unref>
	if (!req) {
   15ac0:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   15ac4:	e7d8      	b.n	15a78 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   15ac6:	9908      	ldr	r1, [sp, #32]
   15ac8:	4628      	mov	r0, r5
   15aca:	f7ff fc69 	bl	153a0 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   15ace:	e7d9      	b.n	15a84 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
   15ad0:	2404      	movs	r4, #4
   15ad2:	e7d7      	b.n	15a84 <att_read_type_req+0x6c>
   15ad4:	000153c5 	.word	0x000153c5

00015ad8 <att_find_type_req>:
{
   15ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15adc:	4688      	mov	r8, r1
   15ade:	b086      	sub	sp, #24
   15ae0:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   15ae2:	2106      	movs	r1, #6
   15ae4:	f108 0008 	add.w	r0, r8, #8
   15ae8:	f006 fe37 	bl	1c75a <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   15aec:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
   15aee:	b317      	cbz	r7, 15b36 <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
   15af0:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
   15af4:	f1b9 0f00 	cmp.w	r9, #0
   15af8:	d01c      	beq.n	15b34 <att_find_type_req+0x5c>
	if (start > end) {
   15afa:	45b9      	cmp	r9, r7
   15afc:	d31b      	bcc.n	15b36 <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
   15afe:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   15b00:	f8ad 3002 	strh.w	r3, [sp, #2]
   15b04:	2400      	movs	r4, #0
   15b06:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   15b0a:	a901      	add	r1, sp, #4
   15b0c:	4668      	mov	r0, sp
	value = buf->data;
   15b0e:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   15b12:	f88d 4000 	strb.w	r4, [sp]
   15b16:	f88d 4004 	strb.w	r4, [sp, #4]
   15b1a:	f8ad 3006 	strh.w	r3, [sp, #6]
   15b1e:	f005 fb80 	bl	1b222 <bt_uuid_cmp>
   15b22:	4606      	mov	r6, r0
   15b24:	b190      	cbz	r0, 15b4c <att_find_type_req+0x74>
	if (!req) {
   15b26:	230a      	movs	r3, #10
   15b28:	463a      	mov	r2, r7
   15b2a:	2106      	movs	r1, #6
   15b2c:	4628      	mov	r0, r5
   15b2e:	f006 fa0e 	bl	1bf4e <send_err_rsp.part.0>
		return 0;
   15b32:	e007      	b.n	15b44 <att_find_type_req+0x6c>
			*err = 0U;
   15b34:	464f      	mov	r7, r9
	if (!req) {
   15b36:	2301      	movs	r3, #1
   15b38:	463a      	mov	r2, r7
   15b3a:	2106      	movs	r1, #6
   15b3c:	4628      	mov	r0, r5
   15b3e:	f006 fa06 	bl	1bf4e <send_err_rsp.part.0>
		return 0;
   15b42:	2400      	movs	r4, #0
}
   15b44:	4620      	mov	r0, r4
   15b46:	b006      	add	sp, #24
   15b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   15b4c:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
   15b50:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   15b54:	4601      	mov	r1, r0
   15b56:	2214      	movs	r2, #20
   15b58:	a801      	add	r0, sp, #4
   15b5a:	f005 fb38 	bl	1b1ce <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   15b5e:	4632      	mov	r2, r6
   15b60:	2107      	movs	r1, #7
   15b62:	4640      	mov	r0, r8
   15b64:	f7ff fe0c 	bl	15780 <bt_att_create_pdu>
   15b68:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   15b6a:	b1d8      	cbz	r0, 15ba4 <att_find_type_req+0xcc>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   15b6c:	230a      	movs	r3, #10
   15b6e:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   15b72:	4a0d      	ldr	r2, [pc, #52]	; (15ba8 <att_find_type_req+0xd0>)
	data.value_len = value_len;
   15b74:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   15b78:	ab01      	add	r3, sp, #4
   15b7a:	4649      	mov	r1, r9
   15b7c:	4638      	mov	r0, r7
	data.value = value;
   15b7e:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
   15b82:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   15b84:	f005 ff5d 	bl	1ba42 <bt_gatt_foreach_attr>
	if (data.err) {
   15b88:	f89d 4015 	ldrb.w	r4, [sp, #21]
   15b8c:	b12c      	cbz	r4, 15b9a <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
   15b8e:	9802      	ldr	r0, [sp, #8]
   15b90:	f000 ffba 	bl	16b08 <net_buf_unref>
	if (!req) {
   15b94:	f89d 3015 	ldrb.w	r3, [sp, #21]
   15b98:	e7ce      	b.n	15b38 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   15b9a:	9902      	ldr	r1, [sp, #8]
   15b9c:	4628      	mov	r0, r5
   15b9e:	f7ff fbff 	bl	153a0 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   15ba2:	e7cf      	b.n	15b44 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   15ba4:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   15ba6:	e7cd      	b.n	15b44 <att_find_type_req+0x6c>
   15ba8:	00014fed 	.word	0x00014fed

00015bac <att_find_info_req>:
{
   15bac:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   15bae:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   15bb0:	881e      	ldrh	r6, [r3, #0]
{
   15bb2:	b085      	sub	sp, #20
   15bb4:	4605      	mov	r5, r0
	if (!start || !end) {
   15bb6:	b19e      	cbz	r6, 15be0 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
   15bb8:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
   15bba:	b184      	cbz	r4, 15bde <att_find_info_req+0x32>
	if (start > end) {
   15bbc:	42a6      	cmp	r6, r4
   15bbe:	d80f      	bhi.n	15be0 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   15bc0:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   15bc2:	2210      	movs	r2, #16
   15bc4:	2100      	movs	r1, #0
   15bc6:	4668      	mov	r0, sp
   15bc8:	f005 fb01 	bl	1b1ce <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   15bcc:	2200      	movs	r2, #0
   15bce:	2105      	movs	r1, #5
   15bd0:	4638      	mov	r0, r7
   15bd2:	f7ff fdd5 	bl	15780 <bt_att_create_pdu>
   15bd6:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   15bd8:	b958      	cbnz	r0, 15bf2 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   15bda:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   15bdc:	e007      	b.n	15bee <att_find_info_req+0x42>
			*err = 0U;
   15bde:	4626      	mov	r6, r4
	if (!req) {
   15be0:	2301      	movs	r3, #1
   15be2:	4632      	mov	r2, r6
   15be4:	2104      	movs	r1, #4
   15be6:	4628      	mov	r0, r5
   15be8:	f006 f9b1 	bl	1bf4e <send_err_rsp.part.0>
	return 0;
   15bec:	2000      	movs	r0, #0
}
   15bee:	b005      	add	sp, #20
   15bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   15bf2:	4621      	mov	r1, r4
   15bf4:	4a08      	ldr	r2, [pc, #32]	; (15c18 <att_find_info_req+0x6c>)
	data.chan = chan;
   15bf6:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   15bf8:	466b      	mov	r3, sp
   15bfa:	4630      	mov	r0, r6
   15bfc:	f005 ff21 	bl	1ba42 <bt_gatt_foreach_attr>
	if (!data.rsp) {
   15c00:	9c02      	ldr	r4, [sp, #8]
   15c02:	b924      	cbnz	r4, 15c0e <att_find_info_req+0x62>
		net_buf_unref(data.buf);
   15c04:	9801      	ldr	r0, [sp, #4]
   15c06:	f000 ff7f 	bl	16b08 <net_buf_unref>
	if (!req) {
   15c0a:	230a      	movs	r3, #10
   15c0c:	e7e9      	b.n	15be2 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   15c0e:	9901      	ldr	r1, [sp, #4]
   15c10:	4628      	mov	r0, r5
   15c12:	f7ff fbc5 	bl	153a0 <bt_att_chan_send_rsp.constprop.0>
   15c16:	e7e9      	b.n	15bec <att_find_info_req+0x40>
   15c18:	0001ba59 	.word	0x0001ba59

00015c1c <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   15c1c:	b513      	push	{r0, r1, r4, lr}
   15c1e:	4602      	mov	r2, r0
   15c20:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   15c22:	4808      	ldr	r0, [pc, #32]	; (15c44 <bt_att_req_alloc+0x28>)
   15c24:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
   15c26:	2400      	movs	r4, #0
   15c28:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   15c2a:	f002 fe25 	bl	18878 <k_mem_slab_alloc>
   15c2e:	4601      	mov	r1, r0
   15c30:	b930      	cbnz	r0, 15c40 <bt_att_req_alloc+0x24>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   15c32:	9801      	ldr	r0, [sp, #4]
   15c34:	2210      	movs	r2, #16
   15c36:	f005 faca 	bl	1b1ce <memset>

	return req;
   15c3a:	9801      	ldr	r0, [sp, #4]
}
   15c3c:	b002      	add	sp, #8
   15c3e:	bd10      	pop	{r4, pc}
		return NULL;
   15c40:	4620      	mov	r0, r4
   15c42:	e7fb      	b.n	15c3c <bt_att_req_alloc+0x20>
   15c44:	20000624 	.word	0x20000624

00015c48 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   15c48:	b507      	push	{r0, r1, r2, lr}
   15c4a:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
   15c4c:	6880      	ldr	r0, [r0, #8]
   15c4e:	b120      	cbz	r0, 15c5a <bt_att_req_free+0x12>
		net_buf_unref(req->buf);
   15c50:	f000 ff5a 	bl	16b08 <net_buf_unref>
		req->buf = NULL;
   15c54:	9b01      	ldr	r3, [sp, #4]
   15c56:	2200      	movs	r2, #0
   15c58:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   15c5a:	4803      	ldr	r0, [pc, #12]	; (15c68 <bt_att_req_free+0x20>)
   15c5c:	a901      	add	r1, sp, #4
   15c5e:	f006 ff3c 	bl	1cada <k_mem_slab_free>
}
   15c62:	b003      	add	sp, #12
   15c64:	f85d fb04 	ldr.w	pc, [sp], #4
   15c68:	20000624 	.word	0x20000624

00015c6c <att_handle_rsp>:
{
   15c6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c70:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
   15c72:	f500 7088 	add.w	r0, r0, #272	; 0x110
{
   15c76:	460f      	mov	r7, r1
   15c78:	4690      	mov	r8, r2
   15c7a:	461e      	mov	r6, r3
	k_work_cancel_delayable(&chan->timeout_work);
   15c7c:	f007 f8f1 	bl	1ce62 <k_work_cancel_delayable>
	if (!chan->req) {
   15c80:	f8d4 50f4 	ldr.w	r5, [r4, #244]	; 0xf4
   15c84:	b9e5      	cbnz	r5, 15cc0 <att_handle_rsp+0x54>
   15c86:	4919      	ldr	r1, [pc, #100]	; (15cec <att_handle_rsp+0x80>)
   15c88:	4819      	ldr	r0, [pc, #100]	; (15cf0 <att_handle_rsp+0x84>)
   15c8a:	1a40      	subs	r0, r0, r1
   15c8c:	08c0      	lsrs	r0, r0, #3
		BT_WARN("No pending ATT request");
   15c8e:	0180      	lsls	r0, r0, #6
   15c90:	f040 0102 	orr.w	r1, r0, #2
   15c94:	4817      	ldr	r0, [pc, #92]	; (15cf4 <att_handle_rsp+0x88>)
   15c96:	f004 fc28 	bl	1a4ea <log_0>
	bt_att_func_t func = NULL;
   15c9a:	46aa      	mov	sl, r5
	att_req_send_process(chan->att);
   15c9c:	6820      	ldr	r0, [r4, #0]
   15c9e:	f006 f906 	bl	1beae <att_req_send_process>
	if (func) {
   15ca2:	f1ba 0f00 	cmp.w	sl, #0
   15ca6:	d007      	beq.n	15cb8 <att_handle_rsp+0x4c>
		func(chan->att->conn, err, pdu, len, params);
   15ca8:	6820      	ldr	r0, [r4, #0]
   15caa:	f8cd 9000 	str.w	r9, [sp]
   15cae:	6800      	ldr	r0, [r0, #0]
   15cb0:	4643      	mov	r3, r8
   15cb2:	463a      	mov	r2, r7
   15cb4:	4631      	mov	r1, r6
   15cb6:	47d0      	blx	sl
}
   15cb8:	2000      	movs	r0, #0
   15cba:	b003      	add	sp, #12
   15cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (chan->req == &cancel) {
   15cc0:	4b0d      	ldr	r3, [pc, #52]	; (15cf8 <att_handle_rsp+0x8c>)
   15cc2:	429d      	cmp	r5, r3
   15cc4:	f04f 0b00 	mov.w	fp, #0
   15cc8:	d103      	bne.n	15cd2 <att_handle_rsp+0x66>
		chan->req = NULL;
   15cca:	f8c4 b0f4 	str.w	fp, [r4, #244]	; 0xf4
	bt_att_func_t func = NULL;
   15cce:	46da      	mov	sl, fp
		goto process;
   15cd0:	e7e4      	b.n	15c9c <att_handle_rsp+0x30>
	func = chan->req->func;
   15cd2:	f8d5 a004 	ldr.w	sl, [r5, #4]
	chan->req->func = NULL;
   15cd6:	f8c5 b004 	str.w	fp, [r5, #4]
	bt_att_req_free(chan->req);
   15cda:	4628      	mov	r0, r5
	params = chan->req->user_data;
   15cdc:	f8d5 900c 	ldr.w	r9, [r5, #12]
	bt_att_req_free(chan->req);
   15ce0:	f7ff ffb2 	bl	15c48 <bt_att_req_free>
	chan->req = NULL;
   15ce4:	f8c4 b0f4 	str.w	fp, [r4, #244]	; 0xf4
   15ce8:	e7d8      	b.n	15c9c <att_handle_rsp+0x30>
   15cea:	bf00      	nop
   15cec:	0001d788 	.word	0x0001d788
   15cf0:	0001d790 	.word	0x0001d790
   15cf4:	0001f5af 	.word	0x0001f5af
   15cf8:	2000246c 	.word	0x2000246c

00015cfc <bt_att_disconnected>:
{
   15cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
   15cfe:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
   15d02:	b085      	sub	sp, #20
   15d04:	4604      	mov	r4, r0
	if (!att_chan->att) {
   15d06:	2d00      	cmp	r5, #0
   15d08:	d04b      	beq.n	15da2 <bt_att_disconnected+0xa6>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   15d0a:	f500 719e 	add.w	r1, r0, #316	; 0x13c
   15d0e:	f105 0024 	add.w	r0, r5, #36	; 0x24
   15d12:	f006 f82f 	bl	1bd74 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   15d16:	f1a4 0608 	sub.w	r6, r4, #8
   15d1a:	f104 07f0 	add.w	r7, r4, #240	; 0xf0
   15d1e:	2200      	movs	r2, #0
   15d20:	2300      	movs	r3, #0
   15d22:	4638      	mov	r0, r7
   15d24:	f006 fca1 	bl	1c66a <net_buf_get>
   15d28:	4602      	mov	r2, r0
   15d2a:	bb10      	cbnz	r0, 15d72 <bt_att_disconnected+0x76>
	if (chan->req) {
   15d2c:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   15d30:	b123      	cbz	r3, 15d3c <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   15d32:	4601      	mov	r1, r0
   15d34:	230e      	movs	r3, #14
   15d36:	4630      	mov	r0, r6
   15d38:	f7ff ff98 	bl	15c6c <att_handle_rsp>
	chan->att = NULL;
   15d3c:	2300      	movs	r3, #0
   15d3e:	f844 3c08 	str.w	r3, [r4, #-8]
	if (!sys_slist_is_empty(&att->chans)) {
   15d42:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   15d44:	bb6b      	cbnz	r3, 15da2 <bt_att_disconnected+0xa6>
	att_reset(att);
   15d46:	9503      	str	r5, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   15d48:	9803      	ldr	r0, [sp, #12]
   15d4a:	2200      	movs	r2, #0
   15d4c:	2300      	movs	r3, #0
   15d4e:	300c      	adds	r0, #12
   15d50:	f006 fc8b 	bl	1c66a <net_buf_get>
   15d54:	b980      	cbnz	r0, 15d78 <bt_att_disconnected+0x7c>
	att->conn = NULL;
   15d56:	9a03      	ldr	r2, [sp, #12]
	return list->head;
   15d58:	6855      	ldr	r5, [r2, #4]
   15d5a:	6010      	str	r0, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   15d5c:	b97d      	cbnz	r5, 15d7e <bt_att_disconnected+0x82>
	k_mem_slab_free(&att_slab, (void **)&att);
   15d5e:	4812      	ldr	r0, [pc, #72]	; (15da8 <bt_att_disconnected+0xac>)
   15d60:	a903      	add	r1, sp, #12
   15d62:	f006 feba 	bl	1cada <k_mem_slab_free>
	bt_gatt_disconnected(ch->chan.conn);
   15d66:	6820      	ldr	r0, [r4, #0]
}
   15d68:	b005      	add	sp, #20
   15d6a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_gatt_disconnected(ch->chan.conn);
   15d6e:	f000 bdbd 	b.w	168ec <bt_gatt_disconnected>
		net_buf_unref(buf);
   15d72:	f000 fec9 	bl	16b08 <net_buf_unref>
   15d76:	e7d2      	b.n	15d1e <bt_att_disconnected+0x22>
		net_buf_unref(buf);
   15d78:	f000 fec6 	bl	16b08 <net_buf_unref>
   15d7c:	e7e4      	b.n	15d48 <bt_att_disconnected+0x4c>
	return node->next;
   15d7e:	682e      	ldr	r6, [r5, #0]
		if (req->func) {
   15d80:	686f      	ldr	r7, [r5, #4]
   15d82:	b137      	cbz	r7, 15d92 <bt_att_disconnected+0x96>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
   15d84:	68eb      	ldr	r3, [r5, #12]
   15d86:	9300      	str	r3, [sp, #0]
   15d88:	2300      	movs	r3, #0
   15d8a:	461a      	mov	r2, r3
   15d8c:	210e      	movs	r1, #14
   15d8e:	4618      	mov	r0, r3
   15d90:	47b8      	blx	r7
		bt_att_req_free(req);
   15d92:	4628      	mov	r0, r5
   15d94:	f7ff ff58 	bl	15c48 <bt_att_req_free>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   15d98:	2e00      	cmp	r6, #0
   15d9a:	d0e0      	beq.n	15d5e <bt_att_disconnected+0x62>
   15d9c:	4635      	mov	r5, r6
   15d9e:	6836      	ldr	r6, [r6, #0]
   15da0:	e7ee      	b.n	15d80 <bt_att_disconnected+0x84>
}
   15da2:	b005      	add	sp, #20
   15da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15da6:	bf00      	nop
   15da8:	200005ec 	.word	0x200005ec

00015dac <att_timeout>:
   15dac:	4b08      	ldr	r3, [pc, #32]	; (15dd0 <att_timeout+0x24>)
   15dae:	4909      	ldr	r1, [pc, #36]	; (15dd4 <att_timeout+0x28>)
{
   15db0:	b510      	push	{r4, lr}
   15db2:	1ac9      	subs	r1, r1, r3
   15db4:	08c9      	lsrs	r1, r1, #3
	BT_ERR("ATT Timeout");
   15db6:	0189      	lsls	r1, r1, #6
{
   15db8:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
   15dba:	f041 0101 	orr.w	r1, r1, #1
   15dbe:	4806      	ldr	r0, [pc, #24]	; (15dd8 <att_timeout+0x2c>)
   15dc0:	f004 fb93 	bl	1a4ea <log_0>
	bt_att_disconnected(&chan->chan.chan);
   15dc4:	f5a4 7084 	sub.w	r0, r4, #264	; 0x108
}
   15dc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   15dcc:	f7ff bf96 	b.w	15cfc <bt_att_disconnected>
   15dd0:	0001d788 	.word	0x0001d788
   15dd4:	0001d790 	.word	0x0001d790
   15dd8:	0001f5c6 	.word	0x0001f5c6

00015ddc <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   15ddc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   15dde:	4d0d      	ldr	r5, [pc, #52]	; (15e14 <find_cf_cfg+0x38>)
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
   15de0:	4604      	mov	r4, r0
   15de2:	b968      	cbnz	r0, 15e00 <find_cf_cfg+0x24>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   15de4:	9000      	str	r0, [sp, #0]
	return memcmp(a, b, sizeof(*a));
   15de6:	2207      	movs	r2, #7
   15de8:	f8cd 0003 	str.w	r0, [sp, #3]
   15dec:	4669      	mov	r1, sp
   15dee:	1c68      	adds	r0, r5, #1
   15df0:	f005 f9d1 	bl	1b196 <memcmp>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   15df4:	2800      	cmp	r0, #0
   15df6:	bf08      	it	eq
   15df8:	462c      	moveq	r4, r5
			return cfg;
		}
	}

	return NULL;
}
   15dfa:	4620      	mov	r0, r4
   15dfc:	b003      	add	sp, #12
   15dfe:	bd30      	pop	{r4, r5, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   15e00:	462a      	mov	r2, r5
   15e02:	f812 1b01 	ldrb.w	r1, [r2], #1
   15e06:	f005 fcee 	bl	1b7e6 <bt_conn_is_peer_addr_le>
	return NULL;
   15e0a:	2800      	cmp	r0, #0
   15e0c:	bf14      	ite	ne
   15e0e:	462c      	movne	r4, r5
   15e10:	2400      	moveq	r4, #0
   15e12:	e7f2      	b.n	15dfa <find_cf_cfg+0x1e>
   15e14:	20002484 	.word	0x20002484

00015e18 <cf_write>:
	return true;
}

static ssize_t cf_write(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			const void *buf, uint16_t len, uint16_t offset, uint8_t flags)
{
   15e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15e1c:	4698      	mov	r8, r3
   15e1e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	struct gatt_cf_cfg *cfg;
	const uint8_t *value = buf;

	if (offset > sizeof(cfg->data)) {
   15e22:	2b01      	cmp	r3, #1
{
   15e24:	4606      	mov	r6, r0
   15e26:	4617      	mov	r7, r2
	if (offset > sizeof(cfg->data)) {
   15e28:	d83d      	bhi.n	15ea6 <cf_write+0x8e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (offset + len > sizeof(cfg->data)) {
   15e2a:	4443      	add	r3, r8
   15e2c:	2b01      	cmp	r3, #1
   15e2e:	4645      	mov	r5, r8
   15e30:	dc3c      	bgt.n	15eac <cf_write+0x94>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	cfg = find_cf_cfg(conn);
   15e32:	f7ff ffd3 	bl	15ddc <find_cf_cfg>
	if (!cfg) {
   15e36:	4604      	mov	r4, r0
   15e38:	b918      	cbnz	r0, 15e42 <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
   15e3a:	f7ff ffcf 	bl	15ddc <find_cf_cfg>
	}

	if (!cfg) {
   15e3e:	4604      	mov	r4, r0
   15e40:	b180      	cbz	r0, 15e64 <cf_write+0x4c>
{
   15e42:	2100      	movs	r1, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   15e44:	f1b8 0f00 	cmp.w	r8, #0
   15e48:	d11b      	bne.n	15e82 <cf_write+0x6a>

	if (!cf_set_value(cfg, value, len)) {
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
	}

	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   15e4a:	f106 0188 	add.w	r1, r6, #136	; 0x88
   15e4e:	1c60      	adds	r0, r4, #1
   15e50:	f006 f9e8 	bl	1c224 <bt_addr_le_copy>
	cfg->id = conn->id;
   15e54:	4620      	mov	r0, r4
   15e56:	7a33      	ldrb	r3, [r6, #8]
   15e58:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   15e5c:	2100      	movs	r1, #0
   15e5e:	f006 fa01 	bl	1c264 <atomic_set_bit>

	return len;
   15e62:	e00b      	b.n	15e7c <cf_write+0x64>
   15e64:	4b14      	ldr	r3, [pc, #80]	; (15eb8 <cf_write+0xa0>)
   15e66:	4915      	ldr	r1, [pc, #84]	; (15ebc <cf_write+0xa4>)
		BT_WARN("No space to store Client Supported Features");
   15e68:	4815      	ldr	r0, [pc, #84]	; (15ec0 <cf_write+0xa8>)
   15e6a:	1ac9      	subs	r1, r1, r3
   15e6c:	08c9      	lsrs	r1, r1, #3
   15e6e:	0189      	lsls	r1, r1, #6
   15e70:	f041 0102 	orr.w	r1, r1, #2
   15e74:	f004 fb39 	bl	1a4ea <log_0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   15e78:	f06f 0510 	mvn.w	r5, #16
}
   15e7c:	4628      	mov	r0, r5
   15e7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   15e82:	7a20      	ldrb	r0, [r4, #8]
   15e84:	fa20 f301 	lsr.w	r3, r0, r1
   15e88:	07da      	lsls	r2, r3, #31
   15e8a:	d503      	bpl.n	15e94 <cf_write+0x7c>
		    !(value[i / 8] & BIT(i % 8))) {
   15e8c:	783b      	ldrb	r3, [r7, #0]
   15e8e:	40cb      	lsrs	r3, r1
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   15e90:	07db      	lsls	r3, r3, #31
   15e92:	d50e      	bpl.n	15eb2 <cf_write+0x9a>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   15e94:	3101      	adds	r1, #1
   15e96:	2903      	cmp	r1, #3
   15e98:	d1d4      	bne.n	15e44 <cf_write+0x2c>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   15e9a:	783b      	ldrb	r3, [r7, #0]
   15e9c:	f003 0307 	and.w	r3, r3, #7
   15ea0:	4318      	orrs	r0, r3
   15ea2:	7220      	strb	r0, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   15ea4:	e7d1      	b.n	15e4a <cf_write+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   15ea6:	f06f 0506 	mvn.w	r5, #6
   15eaa:	e7e7      	b.n	15e7c <cf_write+0x64>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   15eac:	f06f 050c 	mvn.w	r5, #12
   15eb0:	e7e4      	b.n	15e7c <cf_write+0x64>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   15eb2:	f06f 0512 	mvn.w	r5, #18
   15eb6:	e7e1      	b.n	15e7c <cf_write+0x64>
   15eb8:	0001d788 	.word	0x0001d788
   15ebc:	0001d7a8 	.word	0x0001d7a8
   15ec0:	0001f5d9 	.word	0x0001f5d9

00015ec4 <bt_gatt_attr_write_ccc>:
}

ssize_t bt_gatt_attr_write_ccc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, const void *buf,
			       uint16_t len, uint16_t offset, uint8_t flags)
{
   15ec4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   15ec8:	461f      	mov	r7, r3
   15eca:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	struct _bt_gatt_ccc *ccc = attr->user_data;
   15ece:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
   15ed2:	4606      	mov	r6, r0
   15ed4:	4688      	mov	r8, r1
	struct bt_gatt_ccc_cfg *cfg;
	bool value_changed;
	uint16_t value;

	if (offset) {
   15ed6:	2b00      	cmp	r3, #0
   15ed8:	d14e      	bne.n	15f78 <bt_gatt_attr_write_ccc+0xb4>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (!len || len > sizeof(uint16_t)) {
   15eda:	1e7b      	subs	r3, r7, #1
   15edc:	2b01      	cmp	r3, #1
   15ede:	d84e      	bhi.n	15f7e <bt_gatt_attr_write_ccc+0xba>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	if (len < sizeof(uint16_t)) {
		value = *(uint8_t *)buf;
   15ee0:	7815      	ldrb	r5, [r2, #0]
	if (len < sizeof(uint16_t)) {
   15ee2:	2f01      	cmp	r7, #1
	} else {
		value = sys_get_le16(buf);
	}

	cfg = find_ccc_cfg(conn, ccc);
   15ee4:	4649      	mov	r1, r9
   15ee6:	bf14      	ite	ne
   15ee8:	8815      	ldrhne	r5, [r2, #0]
		value = *(uint8_t *)buf;
   15eea:	b2ad      	uxtheq	r5, r5
	cfg = find_ccc_cfg(conn, ccc);
   15eec:	f006 fa7f 	bl	1c3ee <find_ccc_cfg>
	if (!cfg) {
   15ef0:	4604      	mov	r4, r0
   15ef2:	b9e8      	cbnz	r0, 15f30 <bt_gatt_attr_write_ccc+0x6c>
		/* If there's no existing entry, but the new value is zero,
		 * we don't need to do anything, since a disabled CCC is
		 * behavioraly the same as no written CCC.
		 */
		if (!value) {
   15ef4:	b91d      	cbnz	r5, 15efe <bt_gatt_attr_write_ccc+0x3a>
			return len;
   15ef6:	4638      	mov	r0, r7
	if (!value) {
		clear_ccc_cfg(cfg);
	}

	return len;
}
   15ef8:	b003      	add	sp, #12
   15efa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   15efe:	4649      	mov	r1, r9
   15f00:	f006 fa75 	bl	1c3ee <find_ccc_cfg>
		if (!cfg) {
   15f04:	4604      	mov	r4, r0
   15f06:	b960      	cbnz	r0, 15f22 <bt_gatt_attr_write_ccc+0x5e>
   15f08:	4b1e      	ldr	r3, [pc, #120]	; (15f84 <bt_gatt_attr_write_ccc+0xc0>)
   15f0a:	491f      	ldr	r1, [pc, #124]	; (15f88 <bt_gatt_attr_write_ccc+0xc4>)
			BT_WARN("No space to store CCC cfg");
   15f0c:	481f      	ldr	r0, [pc, #124]	; (15f8c <bt_gatt_attr_write_ccc+0xc8>)
   15f0e:	1ac9      	subs	r1, r1, r3
   15f10:	08c9      	lsrs	r1, r1, #3
   15f12:	0189      	lsls	r1, r1, #6
   15f14:	f041 0102 	orr.w	r1, r1, #2
   15f18:	f004 fae7 	bl	1a4ea <log_0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   15f1c:	f06f 0010 	mvn.w	r0, #16
   15f20:	e7ea      	b.n	15ef8 <bt_gatt_attr_write_ccc+0x34>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   15f22:	f106 0188 	add.w	r1, r6, #136	; 0x88
   15f26:	3001      	adds	r0, #1
   15f28:	f006 f97c 	bl	1c224 <bt_addr_le_copy>
		cfg->id = conn->id;
   15f2c:	7a33      	ldrb	r3, [r6, #8]
   15f2e:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   15f30:	f8d9 3010 	ldr.w	r3, [r9, #16]
   15f34:	b9a3      	cbnz	r3, 15f60 <bt_gatt_attr_write_ccc+0x9c>
	if (cfg->value != ccc->value) {
   15f36:	f8b9 300a 	ldrh.w	r3, [r9, #10]
	cfg->value = value;
   15f3a:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   15f3c:	42ab      	cmp	r3, r5
   15f3e:	d003      	beq.n	15f48 <bt_gatt_attr_write_ccc+0x84>
		gatt_ccc_changed(attr, ccc);
   15f40:	4649      	mov	r1, r9
   15f42:	4640      	mov	r0, r8
   15f44:	f006 f8f7 	bl	1c136 <gatt_ccc_changed>
	if (!value) {
   15f48:	2d00      	cmp	r5, #0
   15f4a:	d1d4      	bne.n	15ef6 <bt_gatt_attr_write_ccc+0x32>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   15f4c:	4669      	mov	r1, sp
   15f4e:	1c60      	adds	r0, r4, #1
   15f50:	9500      	str	r5, [sp, #0]
   15f52:	f8cd 5003 	str.w	r5, [sp, #3]
   15f56:	f006 f965 	bl	1c224 <bt_addr_le_copy>
	cfg->id = 0U;
   15f5a:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   15f5c:	8125      	strh	r5, [r4, #8]
}
   15f5e:	e7ca      	b.n	15ef6 <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   15f60:	462a      	mov	r2, r5
   15f62:	4641      	mov	r1, r8
   15f64:	4630      	mov	r0, r6
   15f66:	4798      	blx	r3
		if (write < 0) {
   15f68:	2800      	cmp	r0, #0
   15f6a:	dbc5      	blt.n	15ef8 <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
   15f6c:	3801      	subs	r0, #1
   15f6e:	2801      	cmp	r0, #1
   15f70:	d9e1      	bls.n	15f36 <bt_gatt_attr_write_ccc+0x72>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   15f72:	f06f 000d 	mvn.w	r0, #13
   15f76:	e7bf      	b.n	15ef8 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   15f78:	f06f 0006 	mvn.w	r0, #6
   15f7c:	e7bc      	b.n	15ef8 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   15f7e:	f06f 000c 	mvn.w	r0, #12
   15f82:	e7b9      	b.n	15ef8 <bt_gatt_attr_write_ccc+0x34>
   15f84:	0001d788 	.word	0x0001d788
   15f88:	0001d7a8 	.word	0x0001d7a8
   15f8c:	0001f605 	.word	0x0001f605

00015f90 <find_sc_cfg>:
{
   15f90:	b510      	push	{r4, lr}
		if (id == sc_cfg[i].id &&
   15f92:	4c06      	ldr	r4, [pc, #24]	; (15fac <find_sc_cfg+0x1c>)
   15f94:	7823      	ldrb	r3, [r4, #0]
   15f96:	4283      	cmp	r3, r0
   15f98:	d104      	bne.n	15fa4 <find_sc_cfg+0x14>
   15f9a:	2207      	movs	r2, #7
   15f9c:	1c60      	adds	r0, r4, #1
   15f9e:	f005 f8fa 	bl	1b196 <memcmp>
   15fa2:	b108      	cbz	r0, 15fa8 <find_sc_cfg+0x18>
	return NULL;
   15fa4:	2000      	movs	r0, #0
}
   15fa6:	bd10      	pop	{r4, pc}
			return &sc_cfg[i];
   15fa8:	4620      	mov	r0, r4
   15faa:	e7fc      	b.n	15fa6 <find_sc_cfg+0x16>
   15fac:	20002684 	.word	0x20002684

00015fb0 <sc_save>:
{
   15fb0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   15fb4:	4680      	mov	r8, r0
   15fb6:	460f      	mov	r7, r1
   15fb8:	4616      	mov	r6, r2
   15fba:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   15fbc:	f7ff ffe8 	bl	15f90 <find_sc_cfg>
	if (!cfg) {
   15fc0:	4604      	mov	r4, r0
   15fc2:	b9c8      	cbnz	r0, 15ff8 <sc_save+0x48>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   15fc4:	4669      	mov	r1, sp
   15fc6:	9000      	str	r0, [sp, #0]
   15fc8:	f8cd 0003 	str.w	r0, [sp, #3]
   15fcc:	f7ff ffe0 	bl	15f90 <find_sc_cfg>
		if (!cfg) {
   15fd0:	4604      	mov	r4, r0
   15fd2:	b960      	cbnz	r0, 15fee <sc_save+0x3e>
   15fd4:	490f      	ldr	r1, [pc, #60]	; (16014 <sc_save+0x64>)
   15fd6:	4b10      	ldr	r3, [pc, #64]	; (16018 <sc_save+0x68>)
			BT_ERR("unable to save SC: no cfg left");
   15fd8:	4810      	ldr	r0, [pc, #64]	; (1601c <sc_save+0x6c>)
   15fda:	1ac9      	subs	r1, r1, r3
   15fdc:	08c9      	lsrs	r1, r1, #3
   15fde:	0189      	lsls	r1, r1, #6
   15fe0:	f041 0101 	orr.w	r1, r1, #1
   15fe4:	f004 fa81 	bl	1a4ea <log_0>
}
   15fe8:	b002      	add	sp, #8
   15fea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
   15fee:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   15ff2:	4639      	mov	r1, r7
   15ff4:	f006 f916 	bl	1c224 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   15ff8:	8922      	ldrh	r2, [r4, #8]
   15ffa:	8963      	ldrh	r3, [r4, #10]
   15ffc:	b91a      	cbnz	r2, 16006 <sc_save+0x56>
   15ffe:	b923      	cbnz	r3, 1600a <sc_save+0x5a>
		cfg->data.start = start;
   16000:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   16002:	8165      	strh	r5, [r4, #10]
   16004:	e7f0      	b.n	15fe8 <sc_save+0x38>
	if (new_start >= *start && new_end <= *end) {
   16006:	4296      	cmp	r6, r2
   16008:	d302      	bcc.n	16010 <sc_save+0x60>
   1600a:	429d      	cmp	r5, r3
   1600c:	d9ec      	bls.n	15fe8 <sc_save+0x38>
   1600e:	e7f8      	b.n	16002 <sc_save+0x52>
		*start = new_start;
   16010:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   16012:	e7fa      	b.n	1600a <sc_save+0x5a>
   16014:	0001d7a8 	.word	0x0001d7a8
   16018:	0001d788 	.word	0x0001d788
   1601c:	0001f61f 	.word	0x0001f61f

00016020 <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
   16020:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   16024:	4b23      	ldr	r3, [pc, #140]	; (160b4 <disconnected_cb+0x94>)
{
   16026:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   16028:	6882      	ldr	r2, [r0, #8]
   1602a:	429a      	cmp	r2, r3
{
   1602c:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1602e:	d102      	bne.n	16036 <disconnected_cb+0x16>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
   16030:	68c4      	ldr	r4, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
   16032:	8963      	ldrh	r3, [r4, #10]
   16034:	bb03      	cbnz	r3, 16078 <disconnected_cb+0x58>

		BT_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
   16036:	2001      	movs	r0, #1
   16038:	b002      	add	sp, #8
   1603a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1603e:	f105 0888 	add.w	r8, r5, #136	; 0x88
   16042:	7a28      	ldrb	r0, [r5, #8]
   16044:	4641      	mov	r1, r8
   16046:	f005 fa23 	bl	1b490 <bt_addr_le_is_bonded>
   1604a:	b980      	cbnz	r0, 1606e <disconnected_cb+0x4e>
				if (ccc == &sc_ccc) {
   1604c:	4b1a      	ldr	r3, [pc, #104]	; (160b8 <disconnected_cb+0x98>)
   1604e:	429c      	cmp	r4, r3
   16050:	d102      	bne.n	16058 <disconnected_cb+0x38>
					sc_clear(conn);
   16052:	4628      	mov	r0, r5
   16054:	f006 fa05 	bl	1c462 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   16058:	2500      	movs	r5, #0
   1605a:	4669      	mov	r1, sp
   1605c:	4630      	mov	r0, r6
   1605e:	9500      	str	r5, [sp, #0]
   16060:	f8cd 5003 	str.w	r5, [sp, #3]
   16064:	f006 f8de 	bl	1c224 <bt_addr_le_copy>
	cfg->id = 0U;
   16068:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   1606a:	8125      	strh	r5, [r4, #8]
	if (!value_used) {
   1606c:	e019      	b.n	160a2 <disconnected_cb+0x82>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1606e:	4641      	mov	r1, r8
   16070:	4630      	mov	r0, r6
   16072:	f006 f8d7 	bl	1c224 <bt_addr_le_copy>
	if (!value_used) {
   16076:	e014      	b.n	160a2 <disconnected_cb+0x82>
		if (!cfg->value) {
   16078:	8923      	ldrh	r3, [r4, #8]
   1607a:	b193      	cbz	r3, 160a2 <disconnected_cb+0x82>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1607c:	4626      	mov	r6, r4
   1607e:	4628      	mov	r0, r5
   16080:	f816 1b01 	ldrb.w	r1, [r6], #1
   16084:	4632      	mov	r2, r6
   16086:	f005 fbae 	bl	1b7e6 <bt_conn_is_peer_addr_le>
   1608a:	2800      	cmp	r0, #0
   1608c:	d1d7      	bne.n	1603e <disconnected_cb+0x1e>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1608e:	7820      	ldrb	r0, [r4, #0]
   16090:	4631      	mov	r1, r6
   16092:	f7fe fba1 	bl	147d8 <bt_conn_lookup_addr_le>
			if (tmp) {
   16096:	b120      	cbz	r0, 160a2 <disconnected_cb+0x82>
				if (tmp->state == BT_CONN_CONNECTED) {
   16098:	7a85      	ldrb	r5, [r0, #10]
				bt_conn_unref(tmp);
   1609a:	f005 fb5d 	bl	1b758 <bt_conn_unref>
	if (!value_used) {
   1609e:	2d07      	cmp	r5, #7
   160a0:	d0c9      	beq.n	16036 <disconnected_cb+0x16>
		if (ccc->cfg_changed) {
   160a2:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   160a4:	2100      	movs	r1, #0
   160a6:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   160a8:	2b00      	cmp	r3, #0
   160aa:	d0c4      	beq.n	16036 <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   160ac:	4638      	mov	r0, r7
   160ae:	4798      	blx	r3
   160b0:	e7c1      	b.n	16036 <disconnected_cb+0x16>
   160b2:	bf00      	nop
   160b4:	00015ec5 	.word	0x00015ec5
   160b8:	20000500 	.word	0x20000500

000160bc <sc_indicate_rsp>:
{
   160bc:	b510      	push	{r4, lr}
   160be:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   160c0:	4814      	ldr	r0, [pc, #80]	; (16114 <sc_indicate_rsp+0x58>)
   160c2:	f3bf 8f5b 	dmb	ish
   160c6:	f100 0350 	add.w	r3, r0, #80	; 0x50
   160ca:	e853 2f00 	ldrex	r2, [r3]
   160ce:	f022 0202 	bic.w	r2, r2, #2
   160d2:	e843 2100 	strex	r1, r2, [r3]
   160d6:	2900      	cmp	r1, #0
   160d8:	d1f7      	bne.n	160ca <sc_indicate_rsp+0xe>
   160da:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   160de:	f3bf 8f5b 	dmb	ish
   160e2:	6d03      	ldr	r3, [r0, #80]	; 0x50
   160e4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   160e8:	07da      	lsls	r2, r3, #31
   160ea:	d504      	bpl.n	160f6 <sc_indicate_rsp+0x3a>
	k_work_reschedule(&gatt_sc.work, timeout);
   160ec:	2200      	movs	r2, #0
   160ee:	2300      	movs	r3, #0
   160f0:	3020      	adds	r0, #32
   160f2:	f002 ffb5 	bl	19060 <k_work_reschedule>
	cfg = find_cf_cfg(conn);
   160f6:	4620      	mov	r0, r4
   160f8:	f7ff fe70 	bl	15ddc <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   160fc:	b140      	cbz	r0, 16110 <sc_indicate_rsp+0x54>
   160fe:	7a03      	ldrb	r3, [r0, #8]
   16100:	07db      	lsls	r3, r3, #31
   16102:	d505      	bpl.n	16110 <sc_indicate_rsp+0x54>
}
   16104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   16108:	2100      	movs	r1, #0
   1610a:	300c      	adds	r0, #12
   1610c:	f006 b8aa 	b.w	1c264 <atomic_set_bit>
}
   16110:	bd10      	pop	{r4, pc}
   16112:	bf00      	nop
   16114:	200016e8 	.word	0x200016e8

00016118 <bt_gatt_init>:
{
   16118:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1611a:	4b20      	ldr	r3, [pc, #128]	; (1619c <bt_gatt_init+0x84>)
   1611c:	f3bf 8f5b 	dmb	ish
   16120:	2201      	movs	r2, #1
   16122:	e853 1f00 	ldrex	r1, [r3]
   16126:	2900      	cmp	r1, #0
   16128:	d103      	bne.n	16132 <bt_gatt_init+0x1a>
   1612a:	e843 2000 	strex	r0, r2, [r3]
   1612e:	2800      	cmp	r0, #0
   16130:	d1f7      	bne.n	16122 <bt_gatt_init+0xa>
   16132:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   16136:	d130      	bne.n	1619a <bt_gatt_init+0x82>
   16138:	f3bf 8f5b 	dmb	ish
   1613c:	4b18      	ldr	r3, [pc, #96]	; (161a0 <bt_gatt_init+0x88>)
   1613e:	e853 1f00 	ldrex	r1, [r3]
   16142:	2900      	cmp	r1, #0
   16144:	d103      	bne.n	1614e <bt_gatt_init+0x36>
   16146:	e843 2000 	strex	r0, r2, [r3]
   1614a:	2800      	cmp	r0, #0
   1614c:	d1f7      	bne.n	1613e <bt_gatt_init+0x26>
   1614e:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   16152:	d108      	bne.n	16166 <bt_gatt_init+0x4e>
   16154:	4913      	ldr	r1, [pc, #76]	; (161a4 <bt_gatt_init+0x8c>)
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   16156:	4a14      	ldr	r2, [pc, #80]	; (161a8 <bt_gatt_init+0x90>)
   16158:	880b      	ldrh	r3, [r1, #0]
   1615a:	4c14      	ldr	r4, [pc, #80]	; (161ac <bt_gatt_init+0x94>)
	if (!atomic_cas(&service_init, 0, 1)) {
   1615c:	2000      	movs	r0, #0
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1615e:	42a2      	cmp	r2, r4
   16160:	d315      	bcc.n	1618e <bt_gatt_init+0x76>
   16162:	b100      	cbz	r0, 16166 <bt_gatt_init+0x4e>
   16164:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
   16166:	4b12      	ldr	r3, [pc, #72]	; (161b0 <bt_gatt_init+0x98>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   16168:	4912      	ldr	r1, [pc, #72]	; (161b4 <bt_gatt_init+0x9c>)
   1616a:	4813      	ldr	r0, [pc, #76]	; (161b8 <bt_gatt_init+0xa0>)
   1616c:	2200      	movs	r2, #0
	list->tail = NULL;
   1616e:	e9c3 2200 	strd	r2, r2, [r3]
   16172:	f006 fe6a 	bl	1ce4a <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   16176:	4810      	ldr	r0, [pc, #64]	; (161b8 <bt_gatt_init+0xa0>)
   16178:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1617c:	2300      	movs	r3, #0
   1617e:	f002 ff3b 	bl	18ff8 <k_work_schedule>
}
   16182:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
   16186:	490d      	ldr	r1, [pc, #52]	; (161bc <bt_gatt_init+0xa4>)
   16188:	480d      	ldr	r0, [pc, #52]	; (161c0 <bt_gatt_init+0xa8>)
   1618a:	f006 be5e 	b.w	1ce4a <k_work_init_delayable>
		last_static_handle += svc->attr_count;
   1618e:	6850      	ldr	r0, [r2, #4]
   16190:	4403      	add	r3, r0
   16192:	b29b      	uxth	r3, r3
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   16194:	3208      	adds	r2, #8
   16196:	2001      	movs	r0, #1
   16198:	e7e1      	b.n	1615e <bt_gatt_init+0x46>
}
   1619a:	bd10      	pop	{r4, pc}
   1619c:	20002494 	.word	0x20002494
   161a0:	200024b0 	.word	0x200024b0
   161a4:	20002682 	.word	0x20002682
   161a8:	0001d770 	.word	0x0001d770
   161ac:	0001d788 	.word	0x0001d788
   161b0:	2000247c 	.word	0x2000247c
   161b4:	0001c55b 	.word	0x0001c55b
   161b8:	20001690 	.word	0x20001690
   161bc:	00016541 	.word	0x00016541
   161c0:	20001708 	.word	0x20001708

000161c4 <bt_gatt_attr_get_handle>:
{
   161c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   161c8:	4603      	mov	r3, r0
   161ca:	b148      	cbz	r0, 161e0 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
   161cc:	8a00      	ldrh	r0, [r0, #16]
   161ce:	b938      	cbnz	r0, 161e0 <bt_gatt_attr_get_handle+0x1c>
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   161d0:	4912      	ldr	r1, [pc, #72]	; (1621c <bt_gatt_attr_get_handle+0x58>)
   161d2:	f8df e04c 	ldr.w	lr, [pc, #76]	; 16220 <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
   161d6:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   161d8:	f04f 0c14 	mov.w	ip, #20
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   161dc:	4571      	cmp	r1, lr
   161de:	d301      	bcc.n	161e4 <bt_gatt_attr_get_handle+0x20>
}
   161e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   161e4:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   161e8:	42bb      	cmp	r3, r7
   161ea:	d304      	bcc.n	161f6 <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   161ec:	fb0c 7206 	mla	r2, ip, r6, r7
   161f0:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   161f2:	4293      	cmp	r3, r2
   161f4:	d90e      	bls.n	16214 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
   161f6:	19a2      	adds	r2, r4, r6
   161f8:	b292      	uxth	r2, r2
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   161fa:	3108      	adds	r1, #8
   161fc:	4614      	mov	r4, r2
   161fe:	e7ed      	b.n	161dc <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   16200:	fb0c 7805 	mla	r8, ip, r5, r7
   16204:	4543      	cmp	r3, r8
   16206:	d007      	beq.n	16218 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   16208:	3501      	adds	r5, #1
   1620a:	1962      	adds	r2, r4, r5
   1620c:	42b5      	cmp	r5, r6
   1620e:	b292      	uxth	r2, r2
   16210:	d1f6      	bne.n	16200 <bt_gatt_attr_get_handle+0x3c>
   16212:	e7f2      	b.n	161fa <bt_gatt_attr_get_handle+0x36>
   16214:	2500      	movs	r5, #0
   16216:	e7f8      	b.n	1620a <bt_gatt_attr_get_handle+0x46>
   16218:	4610      	mov	r0, r2
   1621a:	e7e1      	b.n	161e0 <bt_gatt_attr_get_handle+0x1c>
   1621c:	0001d770 	.word	0x0001d770
   16220:	0001d788 	.word	0x0001d788

00016224 <bt_gatt_foreach_attr_type>:
{
   16224:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16228:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   1622c:	9100      	str	r1, [sp, #0]
   1622e:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   16230:	f64f 73ff 	movw	r3, #65535	; 0xffff
   16234:	2d00      	cmp	r5, #0
   16236:	bf08      	it	eq
   16238:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   1623a:	4b24      	ldr	r3, [pc, #144]	; (162cc <bt_gatt_foreach_attr_type+0xa8>)
   1623c:	881b      	ldrh	r3, [r3, #0]
   1623e:	4283      	cmp	r3, r0
{
   16240:	4607      	mov	r7, r0
   16242:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   16244:	d23c      	bcs.n	162c0 <bt_gatt_foreach_attr_type+0x9c>
}
   16246:	b003      	add	sp, #12
   16248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   1624c:	6873      	ldr	r3, [r6, #4]
   1624e:	4423      	add	r3, r4
   16250:	42bb      	cmp	r3, r7
   16252:	d232      	bcs.n	162ba <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
   16254:	b29c      	uxth	r4, r3
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   16256:	3608      	adds	r6, #8
   16258:	4b1d      	ldr	r3, [pc, #116]	; (162d0 <bt_gatt_foreach_attr_type+0xac>)
   1625a:	429e      	cmp	r6, r3
   1625c:	d3f6      	bcc.n	1624c <bt_gatt_foreach_attr_type+0x28>
   1625e:	e7f2      	b.n	16246 <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   16260:	5889      	ldr	r1, [r1, r2]
   16262:	9301      	str	r3, [sp, #4]
   16264:	4640      	mov	r0, r8
   16266:	f004 ffdc 	bl	1b222 <bt_uuid_cmp>
   1626a:	9b01      	ldr	r3, [sp, #4]
   1626c:	b190      	cbz	r0, 16294 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1626e:	3401      	adds	r4, #1
   16270:	f10a 0a01 	add.w	sl, sl, #1
   16274:	b2a4      	uxth	r4, r4
   16276:	6873      	ldr	r3, [r6, #4]
   16278:	4553      	cmp	r3, sl
   1627a:	d9ec      	bls.n	16256 <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   1627c:	9b00      	ldr	r3, [sp, #0]
   1627e:	429c      	cmp	r4, r3
   16280:	d8e1      	bhi.n	16246 <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   16282:	42bc      	cmp	r4, r7
   16284:	d3f3      	bcc.n	1626e <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   16286:	6831      	ldr	r1, [r6, #0]
   16288:	fb0b f20a 	mul.w	r2, fp, sl
   1628c:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1628e:	f1b8 0f00 	cmp.w	r8, #0
   16292:	d1e5      	bne.n	16260 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
   16294:	f1b9 0f00 	cmp.w	r9, #0
   16298:	d10b      	bne.n	162b2 <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
   1629a:	3d01      	subs	r5, #1
   1629c:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   1629e:	4618      	mov	r0, r3
   162a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   162a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   162a4:	4621      	mov	r1, r4
   162a6:	4798      	blx	r3
	if (!*num_matches) {
   162a8:	2d00      	cmp	r5, #0
   162aa:	d0cc      	beq.n	16246 <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   162ac:	2800      	cmp	r0, #0
   162ae:	d1de      	bne.n	1626e <bt_gatt_foreach_attr_type+0x4a>
   162b0:	e7c9      	b.n	16246 <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   162b2:	68da      	ldr	r2, [r3, #12]
   162b4:	4591      	cmp	r9, r2
   162b6:	d1da      	bne.n	1626e <bt_gatt_foreach_attr_type+0x4a>
   162b8:	e7ef      	b.n	1629a <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   162ba:	f04f 0a00 	mov.w	sl, #0
   162be:	e7da      	b.n	16276 <bt_gatt_foreach_attr_type+0x52>
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   162c0:	4e04      	ldr	r6, [pc, #16]	; (162d4 <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
   162c2:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   162c4:	f04f 0b14 	mov.w	fp, #20
   162c8:	e7c6      	b.n	16258 <bt_gatt_foreach_attr_type+0x34>
   162ca:	bf00      	nop
   162cc:	20002682 	.word	0x20002682
   162d0:	0001d788 	.word	0x0001d788
   162d4:	0001d770 	.word	0x0001d770

000162d8 <db_hash_gen.constprop.0>:
static void db_hash_gen(bool store)
   162d8:	b510      	push	{r4, lr}
   162da:	b0c8      	sub	sp, #288	; 0x120
	uint8_t key[16] = {};
   162dc:	2400      	movs	r4, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   162de:	aa1c      	add	r2, sp, #112	; 0x70
   162e0:	4669      	mov	r1, sp
   162e2:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   162e4:	e9cd 4400 	strd	r4, r4, [sp]
   162e8:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   162ec:	f004 fe41 	bl	1af72 <tc_cmac_setup>
   162f0:	b958      	cbnz	r0, 1630a <db_hash_gen.constprop.0+0x32>
   162f2:	491d      	ldr	r1, [pc, #116]	; (16368 <db_hash_gen.constprop.0+0x90>)
   162f4:	4b1d      	ldr	r3, [pc, #116]	; (1636c <db_hash_gen.constprop.0+0x94>)
		BT_ERR("Unable to setup AES CMAC");
   162f6:	481e      	ldr	r0, [pc, #120]	; (16370 <db_hash_gen.constprop.0+0x98>)
   162f8:	1ac9      	subs	r1, r1, r3
   162fa:	08c9      	lsrs	r1, r1, #3
   162fc:	0189      	lsls	r1, r1, #6
   162fe:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Unable to calculate hash");
   16302:	f004 f8f2 	bl	1a4ea <log_0>
}
   16306:	b048      	add	sp, #288	; 0x120
   16308:	bd10      	pop	{r4, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   1630a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1630e:	2001      	movs	r0, #1
   16310:	4a18      	ldr	r2, [pc, #96]	; (16374 <db_hash_gen.constprop.0+0x9c>)
   16312:	ab04      	add	r3, sp, #16
   16314:	f006 f916 	bl	1c544 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   16318:	4817      	ldr	r0, [pc, #92]	; (16378 <db_hash_gen.constprop.0+0xa0>)
   1631a:	a904      	add	r1, sp, #16
   1631c:	f004 febf 	bl	1b09e <tc_cmac_final>
   16320:	b940      	cbnz	r0, 16334 <db_hash_gen.constprop.0+0x5c>
   16322:	4911      	ldr	r1, [pc, #68]	; (16368 <db_hash_gen.constprop.0+0x90>)
   16324:	4b11      	ldr	r3, [pc, #68]	; (1636c <db_hash_gen.constprop.0+0x94>)
		BT_ERR("Unable to calculate hash");
   16326:	4815      	ldr	r0, [pc, #84]	; (1637c <db_hash_gen.constprop.0+0xa4>)
   16328:	1ac9      	subs	r1, r1, r3
   1632a:	08c9      	lsrs	r1, r1, #3
   1632c:	0189      	lsls	r1, r1, #6
   1632e:	f041 0101 	orr.w	r1, r1, #1
   16332:	e7e6      	b.n	16302 <db_hash_gen.constprop.0+0x2a>
   16334:	4b10      	ldr	r3, [pc, #64]	; (16378 <db_hash_gen.constprop.0+0xa0>)
   16336:	f103 020f 	add.w	r2, r3, #15
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
   1633a:	3401      	adds	r4, #1
		uint8_t tmp = ((uint8_t *)buf)[i];
   1633c:	7819      	ldrb	r1, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1633e:	7810      	ldrb	r0, [r2, #0]
   16340:	f803 0b01 	strb.w	r0, [r3], #1
	for (i = 0; i < (length/2); i++) {
   16344:	2c08      	cmp	r4, #8
		((uint8_t *)buf)[length - 1 - i] = tmp;
   16346:	f802 1901 	strb.w	r1, [r2], #-1
	for (i = 0; i < (length/2); i++) {
   1634a:	d1f6      	bne.n	1633a <db_hash_gen.constprop.0+0x62>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1634c:	f3bf 8f5b 	dmb	ish
   16350:	4b0b      	ldr	r3, [pc, #44]	; (16380 <db_hash_gen.constprop.0+0xa8>)
   16352:	e853 2f00 	ldrex	r2, [r3]
   16356:	f042 0204 	orr.w	r2, r2, #4
   1635a:	e843 2100 	strex	r1, r2, [r3]
   1635e:	2900      	cmp	r1, #0
   16360:	d1f7      	bne.n	16352 <db_hash_gen.constprop.0+0x7a>
   16362:	f3bf 8f5b 	dmb	ish
   16366:	e7ce      	b.n	16306 <db_hash_gen.constprop.0+0x2e>
   16368:	0001d7a8 	.word	0x0001d7a8
   1636c:	0001d788 	.word	0x0001d788
   16370:	0001f63e 	.word	0x0001f63e
   16374:	0001c179 	.word	0x0001c179
   16378:	20001680 	.word	0x20001680
   1637c:	0001f657 	.word	0x0001f657
   16380:	20001738 	.word	0x20001738

00016384 <gatt_indicate>:
{
   16384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16388:	4615      	mov	r5, r2
   1638a:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr,
   1638c:	2214      	movs	r2, #20
   1638e:	6869      	ldr	r1, [r5, #4]
{
   16390:	4680      	mov	r8, r0
	if (bt_gatt_check_perm(conn, params->attr,
   16392:	f006 f8e4 	bl	1c55e <bt_gatt_check_perm>
   16396:	b170      	cbz	r0, 163b6 <gatt_indicate+0x32>
   16398:	4b28      	ldr	r3, [pc, #160]	; (1643c <gatt_indicate+0xb8>)
   1639a:	4929      	ldr	r1, [pc, #164]	; (16440 <gatt_indicate+0xbc>)
		BT_WARN("Link is not encrypted");
   1639c:	4829      	ldr	r0, [pc, #164]	; (16444 <gatt_indicate+0xc0>)
   1639e:	1ac9      	subs	r1, r1, r3
   163a0:	08c9      	lsrs	r1, r1, #3
   163a2:	0189      	lsls	r1, r1, #6
   163a4:	f041 0102 	orr.w	r1, r1, #2
   163a8:	f004 f89f 	bl	1a4ea <log_0>
		return -EPERM;
   163ac:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
}
   163b0:	4628      	mov	r0, r5
   163b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   163b6:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   163ba:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   163bc:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   163be:	f7ff fc2d 	bl	15c1c <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   163c2:	3602      	adds	r6, #2
	if (!req) {
   163c4:	4604      	mov	r4, r0
   163c6:	b910      	cbnz	r0, 163ce <gatt_indicate+0x4a>
		return -ENOMEM;
   163c8:	f06f 050b 	mvn.w	r5, #11
   163cc:	e7f0      	b.n	163b0 <gatt_indicate+0x2c>
	req->func = func;
   163ce:	4b1e      	ldr	r3, [pc, #120]	; (16448 <gatt_indicate+0xc4>)
   163d0:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   163d2:	60c5      	str	r5, [r0, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   163d4:	4632      	mov	r2, r6
   163d6:	211d      	movs	r1, #29
   163d8:	4640      	mov	r0, r8
   163da:	f7ff f9d1 	bl	15780 <bt_att_create_pdu>
	if (!buf) {
   163de:	4606      	mov	r6, r0
   163e0:	b968      	cbnz	r0, 163fe <gatt_indicate+0x7a>
   163e2:	4b16      	ldr	r3, [pc, #88]	; (1643c <gatt_indicate+0xb8>)
   163e4:	4916      	ldr	r1, [pc, #88]	; (16440 <gatt_indicate+0xbc>)
		BT_WARN("No buffer available to send indication");
   163e6:	4819      	ldr	r0, [pc, #100]	; (1644c <gatt_indicate+0xc8>)
   163e8:	1ac9      	subs	r1, r1, r3
   163ea:	08c9      	lsrs	r1, r1, #3
   163ec:	0189      	lsls	r1, r1, #6
   163ee:	f041 0102 	orr.w	r1, r1, #2
   163f2:	f004 f87a 	bl	1a4ea <log_0>
		bt_att_req_free(req);
   163f6:	4620      	mov	r0, r4
   163f8:	f7ff fc26 	bl	15c48 <bt_att_req_free>
   163fc:	e7e4      	b.n	163c8 <gatt_indicate+0x44>
	return net_buf_simple_add(&buf->b, len);
   163fe:	f100 0a08 	add.w	sl, r0, #8
   16402:	2102      	movs	r1, #2
   16404:	4650      	mov	r0, sl
   16406:	f006 f981 	bl	1c70c <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   1640a:	4607      	mov	r7, r0
   1640c:	8aa9      	ldrh	r1, [r5, #20]
   1640e:	f827 9b02 	strh.w	r9, [r7], #2
   16412:	4650      	mov	r0, sl
   16414:	f006 f97a 	bl	1c70c <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   16418:	8aaa      	ldrh	r2, [r5, #20]
   1641a:	6929      	ldr	r1, [r5, #16]
   1641c:	4638      	mov	r0, r7
   1641e:	f004 fecb 	bl	1b1b8 <memcpy>
	req->buf = buf;
   16422:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
   16424:	4621      	mov	r1, r4
   16426:	4640      	mov	r0, r8
   16428:	f005 fe70 	bl	1c10c <bt_att_req_send>
	if (err) {
   1642c:	4605      	mov	r5, r0
   1642e:	2800      	cmp	r0, #0
   16430:	d0be      	beq.n	163b0 <gatt_indicate+0x2c>
		bt_att_req_free(req);
   16432:	4620      	mov	r0, r4
   16434:	f7ff fc08 	bl	15c48 <bt_att_req_free>
   16438:	e7ba      	b.n	163b0 <gatt_indicate+0x2c>
   1643a:	bf00      	nop
   1643c:	0001d788 	.word	0x0001d788
   16440:	0001d7a8 	.word	0x0001d7a8
   16444:	0001f670 	.word	0x0001f670
   16448:	0001c14b 	.word	0x0001c14b
   1644c:	0001f686 	.word	0x0001f686

00016450 <bt_gatt_indicate>:
{
   16450:	b530      	push	{r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16452:	4b38      	ldr	r3, [pc, #224]	; (16534 <bt_gatt_indicate+0xe4>)
   16454:	f3bf 8f5b 	dmb	ish
   16458:	681b      	ldr	r3, [r3, #0]
   1645a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1645e:	079a      	lsls	r2, r3, #30
{
   16460:	b08b      	sub	sp, #44	; 0x2c
   16462:	4604      	mov	r4, r0
   16464:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   16466:	d55f      	bpl.n	16528 <bt_gatt_indicate+0xd8>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   16468:	b110      	cbz	r0, 16470 <bt_gatt_indicate+0x20>
   1646a:	7a83      	ldrb	r3, [r0, #10]
   1646c:	2b07      	cmp	r3, #7
   1646e:	d15e      	bne.n	1652e <bt_gatt_indicate+0xde>
	data.attr = params->attr;
   16470:	6868      	ldr	r0, [r5, #4]
   16472:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   16474:	f7ff fea6 	bl	161c4 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   16478:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1647a:	f8ad 0018 	strh.w	r0, [sp, #24]
   1647e:	4603      	mov	r3, r0
	if (params->uuid) {
   16480:	b162      	cbz	r2, 1649c <bt_gatt_indicate+0x4c>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   16482:	a905      	add	r1, sp, #20
   16484:	9102      	str	r1, [sp, #8]
   16486:	492c      	ldr	r1, [pc, #176]	; (16538 <bt_gatt_indicate+0xe8>)
   16488:	9101      	str	r1, [sp, #4]
   1648a:	2101      	movs	r1, #1
	found->attr = NULL;
   1648c:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1648e:	9100      	str	r1, [sp, #0]
   16490:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   16494:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   16496:	f7ff fec5 	bl	16224 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1649a:	9b05      	ldr	r3, [sp, #20]
   1649c:	b1bb      	cbz	r3, 164ce <bt_gatt_indicate+0x7e>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1649e:	9b05      	ldr	r3, [sp, #20]
   164a0:	6818      	ldr	r0, [r3, #0]
   164a2:	2300      	movs	r3, #0
   164a4:	f88d 3010 	strb.w	r3, [sp, #16]
   164a8:	a904      	add	r1, sp, #16
   164aa:	f642 0303 	movw	r3, #10243	; 0x2803
   164ae:	f8ad 3012 	strh.w	r3, [sp, #18]
   164b2:	f004 feb6 	bl	1b222 <bt_uuid_cmp>
   164b6:	b170      	cbz	r0, 164d6 <bt_gatt_indicate+0x86>
		return gatt_indicate(conn, data.handle, params);
   164b8:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   164bc:	b1c4      	cbz	r4, 164f0 <bt_gatt_indicate+0xa0>
		params->_ref = 1;
   164be:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   164c0:	4601      	mov	r1, r0
		params->_ref = 1;
   164c2:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
   164c4:	462a      	mov	r2, r5
   164c6:	4620      	mov	r0, r4
   164c8:	f7ff ff5c 	bl	16384 <gatt_indicate>
   164cc:	e001      	b.n	164d2 <bt_gatt_indicate+0x82>
			return -ENOENT;
   164ce:	f06f 0001 	mvn.w	r0, #1
}
   164d2:	b00b      	add	sp, #44	; 0x2c
   164d4:	bd30      	pop	{r4, r5, pc}
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   164d6:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   164d8:	68c3      	ldr	r3, [r0, #12]
   164da:	799b      	ldrb	r3, [r3, #6]
   164dc:	069b      	lsls	r3, r3, #26
   164de:	d402      	bmi.n	164e6 <bt_gatt_indicate+0x96>
			return -EINVAL;
   164e0:	f06f 0015 	mvn.w	r0, #21
   164e4:	e7f5      	b.n	164d2 <bt_gatt_indicate+0x82>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   164e6:	f005 ffdf 	bl	1c4a8 <bt_gatt_attr_value_handle>
   164ea:	f8ad 0018 	strh.w	r0, [sp, #24]
   164ee:	e7e3      	b.n	164b8 <bt_gatt_indicate+0x68>
	data.err = -ENOTCONN;
   164f0:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   164f4:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   164f6:	2302      	movs	r3, #2
   164f8:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   164fc:	f642 1302 	movw	r3, #10498	; 0x2902
   16500:	f8ad 3012 	strh.w	r3, [sp, #18]
   16504:	ab05      	add	r3, sp, #20
   16506:	9302      	str	r3, [sp, #8]
   16508:	4b0c      	ldr	r3, [pc, #48]	; (1653c <bt_gatt_indicate+0xec>)
   1650a:	9301      	str	r3, [sp, #4]
   1650c:	2301      	movs	r3, #1
   1650e:	9300      	str	r3, [sp, #0]
	params->_ref = 0;
   16510:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   16512:	4623      	mov	r3, r4
   16514:	aa04      	add	r2, sp, #16
   16516:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   1651a:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1651c:	f88d 4010 	strb.w	r4, [sp, #16]
   16520:	f7ff fe80 	bl	16224 <bt_gatt_foreach_attr_type>
	return data.err;
   16524:	9807      	ldr	r0, [sp, #28]
   16526:	e7d4      	b.n	164d2 <bt_gatt_indicate+0x82>
		return -EAGAIN;
   16528:	f06f 000a 	mvn.w	r0, #10
   1652c:	e7d1      	b.n	164d2 <bt_gatt_indicate+0x82>
		return -ENOTCONN;
   1652e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   16532:	e7ce      	b.n	164d2 <bt_gatt_indicate+0x82>
   16534:	20000384 	.word	0x20000384
   16538:	0001c171 	.word	0x0001c171
   1653c:	00016651 	.word	0x00016651

00016540 <sc_process>:
{
   16540:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
   16542:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   16546:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
   1654a:	f830 2c06 	ldrh.w	r2, [r0, #-6]
   1654e:	f8ad 2006 	strh.w	r2, [sp, #6]
{
   16552:	4603      	mov	r3, r0
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   16554:	f1a0 0120 	sub.w	r1, r0, #32
   16558:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1655c:	f3bf 8f5b 	dmb	ish
   16560:	e854 2f00 	ldrex	r2, [r4]
   16564:	f022 0201 	bic.w	r2, r2, #1
   16568:	e844 2000 	strex	r0, r2, [r4]
   1656c:	2800      	cmp	r0, #0
   1656e:	d1f7      	bne.n	16560 <sc_process+0x20>
   16570:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
   16574:	4a0c      	ldr	r2, [pc, #48]	; (165a8 <sc_process+0x68>)
   16576:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
   1657a:	4a0c      	ldr	r2, [pc, #48]	; (165ac <sc_process+0x6c>)
   1657c:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
   16580:	aa01      	add	r2, sp, #4
	sc->start = 0U;
   16582:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   16584:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
   16588:	2204      	movs	r2, #4
	sc->start = 0U;
   1658a:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->end = 0U;
   1658e:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.len = sizeof(sc_range);
   16592:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   16596:	f7ff ff5b 	bl	16450 <bt_gatt_indicate>
   1659a:	b918      	cbnz	r0, 165a4 <sc_process+0x64>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
   1659c:	2101      	movs	r1, #1
   1659e:	4620      	mov	r0, r4
   165a0:	f005 fe60 	bl	1c264 <atomic_set_bit>
}
   165a4:	b002      	add	sp, #8
   165a6:	bd10      	pop	{r4, pc}
   165a8:	0001dc7c 	.word	0x0001dc7c
   165ac:	000160bd 	.word	0x000160bd

000165b0 <gatt_notify>:
{
   165b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   165b4:	4614      	mov	r4, r2
   165b6:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr,
   165b8:	2214      	movs	r2, #20
   165ba:	6861      	ldr	r1, [r4, #4]
{
   165bc:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr,
   165be:	f005 ffce 	bl	1c55e <bt_gatt_check_perm>
   165c2:	b168      	cbz	r0, 165e0 <gatt_notify+0x30>
   165c4:	4b1e      	ldr	r3, [pc, #120]	; (16640 <gatt_notify+0x90>)
   165c6:	491f      	ldr	r1, [pc, #124]	; (16644 <gatt_notify+0x94>)
		BT_WARN("Link is not encrypted");
   165c8:	481f      	ldr	r0, [pc, #124]	; (16648 <gatt_notify+0x98>)
   165ca:	1ac9      	subs	r1, r1, r3
   165cc:	08c9      	lsrs	r1, r1, #3
   165ce:	0189      	lsls	r1, r1, #6
   165d0:	f041 0102 	orr.w	r1, r1, #2
   165d4:	f003 ff89 	bl	1a4ea <log_0>
		return -EPERM;
   165d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   165dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				sizeof(*nfy) + params->len);
   165e0:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   165e2:	211b      	movs	r1, #27
   165e4:	3202      	adds	r2, #2
   165e6:	4638      	mov	r0, r7
   165e8:	f7ff f8ca 	bl	15780 <bt_att_create_pdu>
	if (!buf) {
   165ec:	4605      	mov	r5, r0
   165ee:	b960      	cbnz	r0, 1660a <gatt_notify+0x5a>
   165f0:	4b13      	ldr	r3, [pc, #76]	; (16640 <gatt_notify+0x90>)
   165f2:	4914      	ldr	r1, [pc, #80]	; (16644 <gatt_notify+0x94>)
		BT_WARN("No buffer available to send notification");
   165f4:	4815      	ldr	r0, [pc, #84]	; (1664c <gatt_notify+0x9c>)
   165f6:	1ac9      	subs	r1, r1, r3
   165f8:	08c9      	lsrs	r1, r1, #3
   165fa:	0189      	lsls	r1, r1, #6
   165fc:	f041 0102 	orr.w	r1, r1, #2
   16600:	f003 ff73 	bl	1a4ea <log_0>
		return -ENOMEM;
   16604:	f06f 000b 	mvn.w	r0, #11
   16608:	e7e8      	b.n	165dc <gatt_notify+0x2c>
   1660a:	f100 0908 	add.w	r9, r0, #8
   1660e:	2102      	movs	r1, #2
   16610:	4648      	mov	r0, r9
   16612:	f006 f87b 	bl	1c70c <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   16616:	4606      	mov	r6, r0
   16618:	89a1      	ldrh	r1, [r4, #12]
   1661a:	f826 8b02 	strh.w	r8, [r6], #2
   1661e:	4648      	mov	r0, r9
   16620:	f006 f874 	bl	1c70c <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   16624:	89a2      	ldrh	r2, [r4, #12]
   16626:	68a1      	ldr	r1, [r4, #8]
   16628:	4630      	mov	r0, r6
   1662a:	f004 fdc5 	bl	1b1b8 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   1662e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   16632:	4629      	mov	r1, r5
   16634:	4638      	mov	r0, r7
}
   16636:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   1663a:	f005 bd1c 	b.w	1c076 <bt_att_send>
   1663e:	bf00      	nop
   16640:	0001d788 	.word	0x0001d788
   16644:	0001d7a8 	.word	0x0001d7a8
   16648:	0001f670 	.word	0x0001f670
   1664c:	0001f6ad 	.word	0x0001f6ad

00016650 <notify_cb>:
{
   16650:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   16652:	4b37      	ldr	r3, [pc, #220]	; (16730 <notify_cb+0xe0>)
{
   16654:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   16656:	6882      	ldr	r2, [r0, #8]
   16658:	429a      	cmp	r2, r3
{
   1665a:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1665c:	d12e      	bne.n	166bc <notify_cb+0x6c>
	ccc = attr->user_data;
   1665e:	68c7      	ldr	r7, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   16660:	4b34      	ldr	r3, [pc, #208]	; (16734 <notify_cb+0xe4>)
   16662:	429f      	cmp	r7, r3
   16664:	d11a      	bne.n	1669c <notify_cb+0x4c>
   16666:	4d34      	ldr	r5, [pc, #208]	; (16738 <notify_cb+0xe8>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   16668:	2300      	movs	r3, #0
   1666a:	2207      	movs	r2, #7
   1666c:	4669      	mov	r1, sp
   1666e:	1c68      	adds	r0, r5, #1
   16670:	9300      	str	r3, [sp, #0]
   16672:	f8cd 3003 	str.w	r3, [sp, #3]
   16676:	f004 fd8e 	bl	1b196 <memcmp>
   1667a:	b178      	cbz	r0, 1669c <notify_cb+0x4c>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   1667c:	4629      	mov	r1, r5
   1667e:	2207      	movs	r2, #7
   16680:	f811 0b01 	ldrb.w	r0, [r1], #1
   16684:	f7fe f8ec 	bl	14860 <bt_conn_lookup_state_le>
			if (!conn) {
   16688:	b9e0      	cbnz	r0, 166c4 <notify_cb+0x74>
				sc = (struct sc_data *)data->ind_params->data;
   1668a:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
   1668c:	4629      	mov	r1, r5
				sc = (struct sc_data *)data->ind_params->data;
   1668e:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   16690:	f811 0b01 	ldrb.w	r0, [r1], #1
   16694:	8853      	ldrh	r3, [r2, #2]
   16696:	8812      	ldrh	r2, [r2, #0]
   16698:	f7ff fc8a 	bl	15fb0 <sc_save>
		if (cfg->value != data->type) {
   1669c:	893a      	ldrh	r2, [r7, #8]
   1669e:	89a3      	ldrh	r3, [r4, #12]
   166a0:	429a      	cmp	r2, r3
   166a2:	d10b      	bne.n	166bc <notify_cb+0x6c>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   166a4:	4639      	mov	r1, r7
   166a6:	f811 0b01 	ldrb.w	r0, [r1], #1
   166aa:	f7fe f895 	bl	147d8 <bt_conn_lookup_addr_le>
		if (!conn) {
   166ae:	4605      	mov	r5, r0
   166b0:	b120      	cbz	r0, 166bc <notify_cb+0x6c>
		if (conn->state != BT_CONN_CONNECTED) {
   166b2:	7a83      	ldrb	r3, [r0, #10]
   166b4:	2b07      	cmp	r3, #7
   166b6:	d008      	beq.n	166ca <notify_cb+0x7a>
			bt_conn_unref(conn);
   166b8:	f005 f84e 	bl	1b758 <bt_conn_unref>
	return BT_GATT_ITER_CONTINUE;
   166bc:	2701      	movs	r7, #1
}
   166be:	4638      	mov	r0, r7
   166c0:	b003      	add	sp, #12
   166c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bt_conn_unref(conn);
   166c4:	f005 f848 	bl	1b758 <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   166c8:	e7e8      	b.n	1669c <notify_cb+0x4c>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   166ca:	697b      	ldr	r3, [r7, #20]
   166cc:	b123      	cbz	r3, 166d8 <notify_cb+0x88>
   166ce:	4631      	mov	r1, r6
   166d0:	4798      	blx	r3
   166d2:	b908      	cbnz	r0, 166d8 <notify_cb+0x88>
			bt_conn_unref(conn);
   166d4:	4628      	mov	r0, r5
   166d6:	e7ef      	b.n	166b8 <notify_cb+0x68>
		if (bt_gatt_check_perm(conn, attr,
   166d8:	2214      	movs	r2, #20
   166da:	4631      	mov	r1, r6
   166dc:	4628      	mov	r0, r5
   166de:	f005 ff3e 	bl	1c55e <bt_gatt_check_perm>
   166e2:	4607      	mov	r7, r0
   166e4:	b150      	cbz	r0, 166fc <notify_cb+0xac>
   166e6:	4b15      	ldr	r3, [pc, #84]	; (1673c <notify_cb+0xec>)
   166e8:	4915      	ldr	r1, [pc, #84]	; (16740 <notify_cb+0xf0>)
			BT_WARN("Link is not encrypted");
   166ea:	4816      	ldr	r0, [pc, #88]	; (16744 <notify_cb+0xf4>)
   166ec:	1ac9      	subs	r1, r1, r3
   166ee:	08c9      	lsrs	r1, r1, #3
   166f0:	0189      	lsls	r1, r1, #6
   166f2:	f041 0102 	orr.w	r1, r1, #2
   166f6:	f003 fef8 	bl	1a4ea <log_0>
			continue;
   166fa:	e7df      	b.n	166bc <notify_cb+0x6c>
		if (data->type == BT_GATT_CCC_INDICATE) {
   166fc:	89a3      	ldrh	r3, [r4, #12]
			err = gatt_indicate(conn, data->handle,
   166fe:	88a1      	ldrh	r1, [r4, #4]
   16700:	6922      	ldr	r2, [r4, #16]
		if (data->type == BT_GATT_CCC_INDICATE) {
   16702:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
   16704:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
   16706:	d10f      	bne.n	16728 <notify_cb+0xd8>
			err = gatt_indicate(conn, data->handle,
   16708:	f7ff fe3c 	bl	16384 <gatt_indicate>
			if (err == 0) {
   1670c:	4606      	mov	r6, r0
   1670e:	b918      	cbnz	r0, 16718 <notify_cb+0xc8>
				data->ind_params->_ref++;
   16710:	6922      	ldr	r2, [r4, #16]
   16712:	7d93      	ldrb	r3, [r2, #22]
   16714:	3301      	adds	r3, #1
   16716:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   16718:	4628      	mov	r0, r5
   1671a:	f005 f81d 	bl	1b758 <bt_conn_unref>
		if (err < 0) {
   1671e:	2e00      	cmp	r6, #0
   16720:	dbcd      	blt.n	166be <notify_cb+0x6e>
		data->err = 0;
   16722:	2300      	movs	r3, #0
   16724:	60a3      	str	r3, [r4, #8]
   16726:	e7c9      	b.n	166bc <notify_cb+0x6c>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   16728:	f7ff ff42 	bl	165b0 <gatt_notify>
   1672c:	4606      	mov	r6, r0
   1672e:	e7f3      	b.n	16718 <notify_cb+0xc8>
   16730:	00015ec5 	.word	0x00015ec5
   16734:	20000500 	.word	0x20000500
   16738:	20002684 	.word	0x20002684
   1673c:	0001d788 	.word	0x0001d788
   16740:	0001d7a8 	.word	0x0001d7a8
   16744:	0001f670 	.word	0x0001f670

00016748 <update_ccc>:
{
   16748:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1674a:	4b33      	ldr	r3, [pc, #204]	; (16818 <update_ccc+0xd0>)
	struct bt_conn *conn = data->conn;
   1674c:	6815      	ldr	r5, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   1674e:	6882      	ldr	r2, [r0, #8]
   16750:	429a      	cmp	r2, r3
{
   16752:	4604      	mov	r4, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   16754:	d11b      	bne.n	1678e <update_ccc+0x46>
	ccc = attr->user_data;
   16756:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value ||
   16758:	8933      	ldrh	r3, [r6, #8]
   1675a:	b1c3      	cbz	r3, 1678e <update_ccc+0x46>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1675c:	4632      	mov	r2, r6
   1675e:	4628      	mov	r0, r5
   16760:	f812 1b01 	ldrb.w	r1, [r2], #1
   16764:	f005 f83f 	bl	1b7e6 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   16768:	b188      	cbz	r0, 1678e <update_ccc+0x46>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   1676a:	222a      	movs	r2, #42	; 0x2a
   1676c:	4621      	mov	r1, r4
   1676e:	4628      	mov	r0, r5
   16770:	f005 fef5 	bl	1c55e <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   16774:	2803      	cmp	r0, #3
   16776:	d10d      	bne.n	16794 <update_ccc+0x4c>
   16778:	4a28      	ldr	r2, [pc, #160]	; (1681c <update_ccc+0xd4>)
   1677a:	4b29      	ldr	r3, [pc, #164]	; (16820 <update_ccc+0xd8>)
				BT_WARN("CCC %p not writable", attr);
   1677c:	4829      	ldr	r0, [pc, #164]	; (16824 <update_ccc+0xdc>)
   1677e:	1ad2      	subs	r2, r2, r3
   16780:	08d2      	lsrs	r2, r2, #3
   16782:	0192      	lsls	r2, r2, #6
   16784:	f042 0202 	orr.w	r2, r2, #2
   16788:	4621      	mov	r1, r4
   1678a:	f003 febb 	bl	1a504 <log_1>
}
   1678e:	2001      	movs	r0, #1
   16790:	b002      	add	sp, #8
   16792:	bd70      	pop	{r4, r5, r6, pc}
		gatt_ccc_changed(attr, ccc);
   16794:	4631      	mov	r1, r6
   16796:	4620      	mov	r0, r4
   16798:	f005 fccd 	bl	1c136 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   1679c:	4b22      	ldr	r3, [pc, #136]	; (16828 <update_ccc+0xe0>)
   1679e:	429e      	cmp	r6, r3
   167a0:	d1f5      	bne.n	1678e <update_ccc+0x46>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   167a2:	7a28      	ldrb	r0, [r5, #8]
   167a4:	f105 0188 	add.w	r1, r5, #136	; 0x88
   167a8:	f7ff fbf2 	bl	15f90 <find_sc_cfg>
	if (!cfg) {
   167ac:	4604      	mov	r4, r0
   167ae:	2800      	cmp	r0, #0
   167b0:	d0ed      	beq.n	1678e <update_ccc+0x46>
	if (!(cfg->data.start || cfg->data.end)) {
   167b2:	8902      	ldrh	r2, [r0, #8]
   167b4:	8943      	ldrh	r3, [r0, #10]
   167b6:	ea53 0102 	orrs.w	r1, r3, r2
   167ba:	d0e8      	beq.n	1678e <update_ccc+0x46>
	index = bt_conn_index(conn);
   167bc:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   167be:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   167c2:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   167c6:	f7fd ff81 	bl	146cc <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   167ca:	4918      	ldr	r1, [pc, #96]	; (1682c <update_ccc+0xe4>)
   167cc:	4a18      	ldr	r2, [pc, #96]	; (16830 <update_ccc+0xe8>)
   167ce:	2318      	movs	r3, #24
   167d0:	fb03 1300 	mla	r3, r3, r0, r1
   167d4:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   167d6:	4a17      	ldr	r2, [pc, #92]	; (16834 <update_ccc+0xec>)
   167d8:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   167da:	aa01      	add	r2, sp, #4
   167dc:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   167de:	2204      	movs	r2, #4
   167e0:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   167e2:	b203      	sxth	r3, r0
   167e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   167e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   167ec:	4628      	mov	r0, r5
   167ee:	f7ff fe2f 	bl	16450 <bt_gatt_indicate>
   167f2:	b148      	cbz	r0, 16808 <update_ccc+0xc0>
   167f4:	4909      	ldr	r1, [pc, #36]	; (1681c <update_ccc+0xd4>)
   167f6:	4b0a      	ldr	r3, [pc, #40]	; (16820 <update_ccc+0xd8>)
		BT_ERR("SC restore indication failed");
   167f8:	480f      	ldr	r0, [pc, #60]	; (16838 <update_ccc+0xf0>)
   167fa:	1ac9      	subs	r1, r1, r3
   167fc:	08c9      	lsrs	r1, r1, #3
   167fe:	0189      	lsls	r1, r1, #6
   16800:	f041 0101 	orr.w	r1, r1, #1
   16804:	f003 fe71 	bl	1a4ea <log_0>
	memset(&cfg->data, 0, sizeof(cfg->data));
   16808:	2204      	movs	r2, #4
   1680a:	2100      	movs	r1, #0
   1680c:	f104 0008 	add.w	r0, r4, #8
   16810:	f004 fcdd 	bl	1b1ce <memset>
	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
   16814:	e7bb      	b.n	1678e <update_ccc+0x46>
   16816:	bf00      	nop
   16818:	00015ec5 	.word	0x00015ec5
   1681c:	0001d7a8 	.word	0x0001d7a8
   16820:	0001d788 	.word	0x0001d788
   16824:	0001f6d6 	.word	0x0001f6d6
   16828:	20000500 	.word	0x20000500
   1682c:	20002498 	.word	0x20002498
   16830:	0001dc7c 	.word	0x0001dc7c
   16834:	0001c281 	.word	0x0001c281
   16838:	0001f6ea 	.word	0x0001f6ea

0001683c <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   1683c:	b507      	push	{r0, r1, r2, lr}
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1683e:	4a06      	ldr	r2, [pc, #24]	; (16858 <bt_gatt_connected+0x1c>)
	data.conn = conn;
   16840:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   16842:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   16844:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   16846:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   1684a:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1684e:	f005 fe79 	bl	1c544 <bt_gatt_foreach_attr>
	}

#if defined(CONFIG_BT_GATT_CLIENT)
	add_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */
}
   16852:	b003      	add	sp, #12
   16854:	f85d fb04 	ldr.w	pc, [sp], #4
   16858:	00016749 	.word	0x00016749

0001685c <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   1685c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
   1685e:	4b09      	ldr	r3, [pc, #36]	; (16884 <bt_gatt_att_max_mtu_changed+0x28>)
   16860:	681c      	ldr	r4, [r3, #0]
   16862:	4605      	mov	r5, r0
   16864:	460e      	mov	r6, r1
   16866:	4617      	mov	r7, r2
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   16868:	b10c      	cbz	r4, 1686e <bt_gatt_att_max_mtu_changed+0x12>
   1686a:	3c04      	subs	r4, #4
   1686c:	b904      	cbnz	r4, 16870 <bt_gatt_att_max_mtu_changed+0x14>
		if (cb->att_mtu_updated) {
			cb->att_mtu_updated(conn, tx, rx);
		}
	}
}
   1686e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->att_mtu_updated) {
   16870:	6823      	ldr	r3, [r4, #0]
   16872:	b11b      	cbz	r3, 1687c <bt_gatt_att_max_mtu_changed+0x20>
			cb->att_mtu_updated(conn, tx, rx);
   16874:	463a      	mov	r2, r7
   16876:	4631      	mov	r1, r6
   16878:	4628      	mov	r0, r5
   1687a:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   1687c:	1d23      	adds	r3, r4, #4
   1687e:	d0f6      	beq.n	1686e <bt_gatt_att_max_mtu_changed+0x12>
	return node->next;
   16880:	6864      	ldr	r4, [r4, #4]
   16882:	e7f1      	b.n	16868 <bt_gatt_att_max_mtu_changed+0xc>
   16884:	2000247c 	.word	0x2000247c

00016888 <db_hash_read>:
{
   16888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1688a:	4915      	ldr	r1, [pc, #84]	; (168e0 <db_hash_read+0x58>)
{
   1688c:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   16890:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   16892:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   16896:	461f      	mov	r7, r3
   16898:	4615      	mov	r5, r2
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1689a:	f006 faf6 	bl	1ce8a <k_work_cancel_delayable_sync>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1689e:	f3bf 8f5b 	dmb	ish
   168a2:	4b10      	ldr	r3, [pc, #64]	; (168e4 <db_hash_read+0x5c>)
   168a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   168a6:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   168aa:	075b      	lsls	r3, r3, #29
   168ac:	d401      	bmi.n	168b2 <db_hash_read+0x2a>
		db_hash_gen(true);
   168ae:	f7ff fd13 	bl	162d8 <db_hash_gen.constprop.0>
	bt_gatt_change_aware(conn, true);
   168b2:	2101      	movs	r1, #1
   168b4:	4620      	mov	r0, r4
   168b6:	f005 fe75 	bl	1c5a4 <bt_gatt_change_aware>
	if (offset > value_len) {
   168ba:	2e10      	cmp	r6, #16
   168bc:	d80c      	bhi.n	168d8 <db_hash_read+0x50>
	len = MIN(buf_len, value_len - offset);
   168be:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
   168c2:	4909      	ldr	r1, [pc, #36]	; (168e8 <db_hash_read+0x60>)
	len = MIN(buf_len, value_len - offset);
   168c4:	42bc      	cmp	r4, r7
   168c6:	bfa8      	it	ge
   168c8:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   168ca:	4622      	mov	r2, r4
   168cc:	4431      	add	r1, r6
   168ce:	4628      	mov	r0, r5
   168d0:	f004 fc72 	bl	1b1b8 <memcpy>
}
   168d4:	4620      	mov	r0, r4
   168d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   168d8:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   168dc:	e7fa      	b.n	168d4 <db_hash_read+0x4c>
   168de:	bf00      	nop
   168e0:	200016c0 	.word	0x200016c0
   168e4:	200016e8 	.word	0x200016e8
   168e8:	20001680 	.word	0x20001680

000168ec <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   168ec:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   168ee:	4603      	mov	r3, r0
   168f0:	4a14      	ldr	r2, [pc, #80]	; (16944 <bt_gatt_disconnected+0x58>)
{
   168f2:	4605      	mov	r5, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   168f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   168f8:	2001      	movs	r0, #1
   168fa:	f005 fe23 	bl	1c544 <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   168fe:	4628      	mov	r0, r5
   16900:	f7ff fa6c 	bl	15ddc <find_cf_cfg>
	if (!cfg) {
   16904:	4604      	mov	r4, r0
   16906:	b1e0      	cbz	r0, 16942 <bt_gatt_disconnected+0x56>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   16908:	f105 0688 	add.w	r6, r5, #136	; 0x88
   1690c:	7a28      	ldrb	r0, [r5, #8]
   1690e:	4631      	mov	r1, r6
   16910:	f004 fdbe 	bl	1b490 <bt_addr_le_is_bonded>
   16914:	b920      	cbnz	r0, 16920 <bt_gatt_disconnected+0x34>
		clear_cf_cfg(cfg);
   16916:	4620      	mov	r0, r4
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   16918:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		clear_cf_cfg(cfg);
   1691c:	f005 bc85 	b.w	1c22a <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   16920:	1c60      	adds	r0, r4, #1
   16922:	4631      	mov	r1, r6
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16924:	340c      	adds	r4, #12
   16926:	f005 fc7d 	bl	1c224 <bt_addr_le_copy>
   1692a:	f3bf 8f5b 	dmb	ish
   1692e:	e854 3f00 	ldrex	r3, [r4]
   16932:	f023 0302 	bic.w	r3, r3, #2
   16936:	e844 3200 	strex	r2, r3, [r4]
   1693a:	2a00      	cmp	r2, #0
   1693c:	d1f7      	bne.n	1692e <bt_gatt_disconnected+0x42>
   1693e:	f3bf 8f5b 	dmb	ish
}
   16942:	bd70      	pop	{r4, r5, r6, pc}
   16944:	00016021 	.word	0x00016021

00016948 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
   16948:	4a0b      	ldr	r2, [pc, #44]	; (16978 <bt_smp_accept+0x30>)
{
   1694a:	b508      	push	{r3, lr}
   1694c:	4603      	mov	r3, r0
		if (smp->chan.conn) {
   1694e:	6810      	ldr	r0, [r2, #0]
   16950:	b918      	cbnz	r0, 1695a <bt_smp_accept+0x12>
			continue;
		}

		smp->chan.ops = &ops;
   16952:	4b0a      	ldr	r3, [pc, #40]	; (1697c <bt_smp_accept+0x34>)
   16954:	6053      	str	r3, [r2, #4]

		*chan = &smp->chan;
   16956:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
   16958:	bd08      	pop	{r3, pc}
   1695a:	4909      	ldr	r1, [pc, #36]	; (16980 <bt_smp_accept+0x38>)
   1695c:	4a09      	ldr	r2, [pc, #36]	; (16984 <bt_smp_accept+0x3c>)
	BT_ERR("No available SMP context for conn %p", conn);
   1695e:	480a      	ldr	r0, [pc, #40]	; (16988 <bt_smp_accept+0x40>)
   16960:	1a52      	subs	r2, r2, r1
   16962:	08d2      	lsrs	r2, r2, #3
   16964:	0192      	lsls	r2, r2, #6
   16966:	f042 0201 	orr.w	r2, r2, #1
   1696a:	4619      	mov	r1, r3
   1696c:	f003 fdca 	bl	1a504 <log_1>
	return -ENOMEM;
   16970:	f06f 000b 	mvn.w	r0, #11
   16974:	e7f0      	b.n	16958 <bt_smp_accept+0x10>
   16976:	bf00      	nop
   16978:	20001740 	.word	0x20001740
   1697c:	0001dd80 	.word	0x0001dd80
   16980:	0001d788 	.word	0x0001d788
   16984:	0001d7d0 	.word	0x0001d7d0
   16988:	0001f716 	.word	0x0001f716

0001698c <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1698c:	4b02      	ldr	r3, [pc, #8]	; (16998 <net_buf_pool_get+0xc>)
   1698e:	2228      	movs	r2, #40	; 0x28
   16990:	fb02 3000 	mla	r0, r2, r0, r3
   16994:	4770      	bx	lr
   16996:	bf00      	nop
   16998:	200006f4 	.word	0x200006f4

0001699c <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1699c:	7982      	ldrb	r2, [r0, #6]

	return buf - pool->__bufs;
   1699e:	4b05      	ldr	r3, [pc, #20]	; (169b4 <net_buf_id+0x18>)
   169a0:	2128      	movs	r1, #40	; 0x28
   169a2:	fb01 3302 	mla	r3, r1, r2, r3
   169a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   169a8:	1ac0      	subs	r0, r0, r3
}
   169aa:	4b03      	ldr	r3, [pc, #12]	; (169b8 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   169ac:	10c0      	asrs	r0, r0, #3
}
   169ae:	4358      	muls	r0, r3
   169b0:	4770      	bx	lr
   169b2:	bf00      	nop
   169b4:	200006f4 	.word	0x200006f4
   169b8:	aaaaaaab 	.word	0xaaaaaaab

000169bc <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   169bc:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   169be:	4b0a      	ldr	r3, [pc, #40]	; (169e8 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   169c0:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   169c2:	2428      	movs	r4, #40	; 0x28
   169c4:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   169c8:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   169ca:	6a1b      	ldr	r3, [r3, #32]
   169cc:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   169ce:	6823      	ldr	r3, [r4, #0]
   169d0:	429a      	cmp	r2, r3
   169d2:	bf94      	ite	ls
   169d4:	600a      	strls	r2, [r1, #0]
   169d6:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   169d8:	f7ff ffe0 	bl	1699c <net_buf_id>
   169dc:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   169e0:	fb02 3000 	mla	r0, r2, r0, r3
   169e4:	bd10      	pop	{r4, pc}
   169e6:	bf00      	nop
   169e8:	200006f4 	.word	0x200006f4

000169ec <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   169ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   169f0:	4605      	mov	r5, r0
   169f2:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   169f4:	4610      	mov	r0, r2
   169f6:	4619      	mov	r1, r3
{
   169f8:	4691      	mov	r9, r2
   169fa:	4698      	mov	r8, r3
   169fc:	4617      	mov	r7, r2
   169fe:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   16a00:	f006 fbcc 	bl	1d19c <sys_clock_timeout_end_calc>
   16a04:	4682      	mov	sl, r0
   16a06:	468b      	mov	fp, r1
	__asm__ volatile(
   16a08:	f04f 0340 	mov.w	r3, #64	; 0x40
   16a0c:	f3ef 8111 	mrs	r1, BASEPRI
   16a10:	f383 8811 	msr	BASEPRI, r3
   16a14:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   16a18:	8b6b      	ldrh	r3, [r5, #26]
   16a1a:	2b00      	cmp	r3, #0
   16a1c:	d055      	beq.n	16aca <net_buf_alloc_len+0xde>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   16a1e:	8b2a      	ldrh	r2, [r5, #24]
   16a20:	429a      	cmp	r2, r3
   16a22:	d93e      	bls.n	16aa2 <net_buf_alloc_len+0xb6>
   16a24:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   16a26:	2200      	movs	r2, #0
   16a28:	2300      	movs	r3, #0
   16a2a:	4628      	mov	r0, r5
   16a2c:	f002 f8dc 	bl	18be8 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   16a30:	9900      	ldr	r1, [sp, #0]
   16a32:	4604      	mov	r4, r0
   16a34:	2800      	cmp	r0, #0
   16a36:	d034      	beq.n	16aa2 <net_buf_alloc_len+0xb6>
	__asm__ volatile(
   16a38:	f381 8811 	msr	BASEPRI, r1
   16a3c:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   16a40:	9b01      	ldr	r3, [sp, #4]
   16a42:	2b00      	cmp	r3, #0
   16a44:	d051      	beq.n	16aea <net_buf_alloc_len+0xfe>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   16a46:	ea58 0309 	orrs.w	r3, r8, r9
   16a4a:	d00f      	beq.n	16a6c <net_buf_alloc_len+0x80>
   16a4c:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   16a50:	bf08      	it	eq
   16a52:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
   16a56:	d009      	beq.n	16a6c <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   16a58:	f002 ffae 	bl	199b8 <sys_clock_tick_get>
   16a5c:	ebba 0700 	subs.w	r7, sl, r0
   16a60:	eb6b 0601 	sbc.w	r6, fp, r1
   16a64:	2e00      	cmp	r6, #0
   16a66:	bfbc      	itt	lt
   16a68:	2700      	movlt	r7, #0
   16a6a:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   16a6c:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   16a6e:	f8df 8090 	ldr.w	r8, [pc, #144]	; 16b00 <net_buf_alloc_len+0x114>
   16a72:	2228      	movs	r2, #40	; 0x28
   16a74:	fb02 8303 	mla	r3, r2, r3, r8
   16a78:	a901      	add	r1, sp, #4
   16a7a:	6a1b      	ldr	r3, [r3, #32]
   16a7c:	681b      	ldr	r3, [r3, #0]
   16a7e:	463a      	mov	r2, r7
   16a80:	681d      	ldr	r5, [r3, #0]
   16a82:	4620      	mov	r0, r4
   16a84:	4633      	mov	r3, r6
   16a86:	47a8      	blx	r5
   16a88:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   16a8a:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   16a8c:	bb70      	cbnz	r0, 16aec <net_buf_alloc_len+0x100>
	k_lifo_put(&pool->free, buf);
   16a8e:	79a0      	ldrb	r0, [r4, #6]
   16a90:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16a94:	4621      	mov	r1, r4
   16a96:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
   16a9a:	f006 f8ea 	bl	1cc72 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   16a9e:	462c      	mov	r4, r5
}
   16aa0:	e01f      	b.n	16ae2 <net_buf_alloc_len+0xf6>
		uninit_count = pool->uninit_count--;
   16aa2:	8b6b      	ldrh	r3, [r5, #26]
   16aa4:	1e5a      	subs	r2, r3, #1
   16aa6:	836a      	strh	r2, [r5, #26]
   16aa8:	f381 8811 	msr	BASEPRI, r1
   16aac:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   16ab0:	8b2c      	ldrh	r4, [r5, #24]
   16ab2:	1ae3      	subs	r3, r4, r3
   16ab4:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   16ab6:	2018      	movs	r0, #24
   16ab8:	fb00 4403 	mla	r4, r0, r3, r4
	return pool - _net_buf_pool_list;
   16abc:	4810      	ldr	r0, [pc, #64]	; (16b00 <net_buf_alloc_len+0x114>)
   16abe:	4b11      	ldr	r3, [pc, #68]	; (16b04 <net_buf_alloc_len+0x118>)
   16ac0:	1a2d      	subs	r5, r5, r0
   16ac2:	10ed      	asrs	r5, r5, #3
   16ac4:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   16ac6:	71a5      	strb	r5, [r4, #6]
		goto success;
   16ac8:	e7ba      	b.n	16a40 <net_buf_alloc_len+0x54>
   16aca:	f381 8811 	msr	BASEPRI, r1
   16ace:	f3bf 8f6f 	isb	sy
   16ad2:	464a      	mov	r2, r9
   16ad4:	4643      	mov	r3, r8
   16ad6:	4628      	mov	r0, r5
   16ad8:	f002 f886 	bl	18be8 <z_impl_k_queue_get>
	if (!buf) {
   16adc:	4604      	mov	r4, r0
   16ade:	2800      	cmp	r0, #0
   16ae0:	d1ae      	bne.n	16a40 <net_buf_alloc_len+0x54>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   16ae2:	4620      	mov	r0, r4
   16ae4:	b003      	add	sp, #12
   16ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   16aea:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   16aec:	2300      	movs	r3, #0
	buf->ref   = 1U;
   16aee:	2201      	movs	r2, #1
	buf->frags = NULL;
   16af0:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   16af2:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   16af4:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   16af6:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   16af8:	6923      	ldr	r3, [r4, #16]
   16afa:	81e2      	strh	r2, [r4, #14]
   16afc:	60a3      	str	r3, [r4, #8]
	return buf;
   16afe:	e7f0      	b.n	16ae2 <net_buf_alloc_len+0xf6>
   16b00:	200006f4 	.word	0x200006f4
   16b04:	cccccccd 	.word	0xcccccccd

00016b08 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   16b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16b0c:	4d17      	ldr	r5, [pc, #92]	; (16b6c <net_buf_unref+0x64>)
   16b0e:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   16b10:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   16b12:	2728      	movs	r7, #40	; 0x28
	while (buf) {
   16b14:	b90c      	cbnz	r4, 16b1a <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   16b16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   16b1a:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   16b1c:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   16b20:	3b01      	subs	r3, #1
   16b22:	b2db      	uxtb	r3, r3
   16b24:	7123      	strb	r3, [r4, #4]
   16b26:	2b00      	cmp	r3, #0
   16b28:	d1f5      	bne.n	16b16 <net_buf_unref+0xe>
		if (buf->__buf) {
   16b2a:	6921      	ldr	r1, [r4, #16]
   16b2c:	b159      	cbz	r1, 16b46 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   16b2e:	7963      	ldrb	r3, [r4, #5]
   16b30:	079b      	lsls	r3, r3, #30
   16b32:	d407      	bmi.n	16b44 <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   16b34:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   16b36:	fb07 5303 	mla	r3, r7, r3, r5
   16b3a:	4620      	mov	r0, r4
   16b3c:	6a1b      	ldr	r3, [r3, #32]
   16b3e:	681b      	ldr	r3, [r3, #0]
   16b40:	689b      	ldr	r3, [r3, #8]
   16b42:	4798      	blx	r3
			buf->__buf = NULL;
   16b44:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   16b46:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   16b48:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   16b4a:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   16b4e:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   16b50:	69db      	ldr	r3, [r3, #28]
   16b52:	b11b      	cbz	r3, 16b5c <net_buf_unref+0x54>
			pool->destroy(buf);
   16b54:	4620      	mov	r0, r4
   16b56:	4798      	blx	r3
{
   16b58:	4644      	mov	r4, r8
   16b5a:	e7db      	b.n	16b14 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   16b5c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16b60:	4621      	mov	r1, r4
   16b62:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
   16b66:	f006 f884 	bl	1cc72 <k_queue_prepend>
}
   16b6a:	e7f5      	b.n	16b58 <net_buf_unref+0x50>
   16b6c:	200006f4 	.word	0x200006f4

00016b70 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   16b70:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   16b72:	4b09      	ldr	r3, [pc, #36]	; (16b98 <gpio_nrfx_init+0x28>)
   16b74:	781a      	ldrb	r2, [r3, #0]
   16b76:	b96a      	cbnz	r2, 16b94 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   16b78:	2101      	movs	r1, #1
   16b7a:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   16b7c:	2006      	movs	r0, #6
   16b7e:	2105      	movs	r1, #5
   16b80:	f7fa fb92 	bl	112a8 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   16b84:	2006      	movs	r0, #6
   16b86:	f7fa fb5d 	bl	11244 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   16b8a:	4b04      	ldr	r3, [pc, #16]	; (16b9c <gpio_nrfx_init+0x2c>)
   16b8c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   16b90:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   16b94:	2000      	movs	r0, #0
   16b96:	bd08      	pop	{r3, pc}
   16b98:	20002884 	.word	0x20002884
   16b9c:	40006000 	.word	0x40006000

00016ba0 <gpio_nrfx_pin_interrupt_configure>:
{
   16ba0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   16ba2:	4617      	mov	r7, r2
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   16ba4:	6842      	ldr	r2, [r0, #4]
	return port->data;
   16ba6:	6906      	ldr	r6, [r0, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   16ba8:	7a12      	ldrb	r2, [r2, #8]
   16baa:	f001 041f 	and.w	r4, r1, #31
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
   16bae:	f5b7 3fa0 	cmp.w	r7, #81920	; 0x14000
{
   16bb2:	460d      	mov	r5, r1
   16bb4:	ea44 1442 	orr.w	r4, r4, r2, lsl #5
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
   16bb8:	d10c      	bne.n	16bd4 <gpio_nrfx_pin_interrupt_configure+0x34>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   16bba:	f004 021f 	and.w	r2, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   16bbe:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   16bc2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   16bc6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   16bca:	07d0      	lsls	r0, r2, #31
   16bcc:	d507      	bpl.n	16bde <gpio_nrfx_pin_interrupt_configure+0x3e>
		return -ENOTSUP;
   16bce:	f06f 0085 	mvn.w	r0, #133	; 0x85
   16bd2:	e09a      	b.n	16d0a <gpio_nrfx_pin_interrupt_configure+0x16a>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   16bd4:	f5b7 5f00 	cmp.w	r7, #8192	; 0x2000
   16bd8:	68f1      	ldr	r1, [r6, #12]
   16bda:	f000 8098 	beq.w	16d0e <gpio_nrfx_pin_interrupt_configure+0x16e>
   16bde:	68f2      	ldr	r2, [r6, #12]
   16be0:	2101      	movs	r1, #1
   16be2:	40a9      	lsls	r1, r5
   16be4:	4311      	orrs	r1, r2
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   16be6:	6972      	ldr	r2, [r6, #20]
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   16be8:	60f1      	str	r1, [r6, #12]
   16bea:	2101      	movs	r1, #1
   16bec:	40a9      	lsls	r1, r5
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   16bee:	f5b7 3fa0 	cmp.w	r7, #81920	; 0x14000
   16bf2:	bf0c      	ite	eq
   16bf4:	430a      	orreq	r2, r1
   16bf6:	438a      	bicne	r2, r1
   16bf8:	6172      	str	r2, [r6, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   16bfa:	69b2      	ldr	r2, [r6, #24]
   16bfc:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   16c00:	bf0c      	ite	eq
   16c02:	430a      	orreq	r2, r1
   16c04:	438a      	bicne	r2, r1
   16c06:	61b2      	str	r2, [r6, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   16c08:	6932      	ldr	r2, [r6, #16]
   16c0a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
   16c0e:	bf0c      	ite	eq
   16c10:	4311      	orreq	r1, r2
   16c12:	ea22 0101 	bicne.w	r1, r2, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   16c16:	4a4a      	ldr	r2, [pc, #296]	; (16d40 <gpio_nrfx_pin_interrupt_configure+0x1a0>)
   16c18:	6131      	str	r1, [r6, #16]
   16c1a:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   16c1e:	2000      	movs	r0, #0
   16c20:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   16c22:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   16c26:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
   16c2a:	f3c1 2104 	ubfx	r1, r1, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   16c2e:	428c      	cmp	r4, r1
   16c30:	d172      	bne.n	16d18 <gpio_nrfx_pin_interrupt_configure+0x178>
		    && (intenset & BIT(i))) {
   16c32:	fa23 f100 	lsr.w	r1, r3, r0
   16c36:	07c9      	lsls	r1, r1, #31
   16c38:	d56e      	bpl.n	16d18 <gpio_nrfx_pin_interrupt_configure+0x178>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   16c3a:	0083      	lsls	r3, r0, #2
   16c3c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   16c40:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   16c44:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   16c48:	f021 0101 	bic.w	r1, r1, #1
   16c4c:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   16c50:	2301      	movs	r3, #1
   16c52:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
   16c54:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
   16c58:	b2c0      	uxtb	r0, r0
   16c5a:	f001 fb6b 	bl	18334 <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   16c5e:	4620      	mov	r0, r4
   16c60:	2100      	movs	r1, #0
   16c62:	f005 fd96 	bl	1c792 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   16c66:	68f0      	ldr	r0, [r6, #12]
   16c68:	40e8      	lsrs	r0, r5
   16c6a:	f010 0001 	ands.w	r0, r0, #1
   16c6e:	d04c      	beq.n	16d0a <gpio_nrfx_pin_interrupt_configure+0x16a>
		if (data->trig_edge & BIT(pin)) {
   16c70:	6970      	ldr	r0, [r6, #20]
   16c72:	40e8      	lsrs	r0, r5
   16c74:	f010 0201 	ands.w	r2, r0, #1
   16c78:	d055      	beq.n	16d26 <gpio_nrfx_pin_interrupt_configure+0x186>
				if (data->double_edge & BIT(pin)) {
   16c7a:	69b3      	ldr	r3, [r6, #24]
   16c7c:	40eb      	lsrs	r3, r5
   16c7e:	07db      	lsls	r3, r3, #31
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
   16c80:	bf5f      	itttt	pl
   16c82:	6931      	ldrpl	r1, [r6, #16]
   16c84:	fa21 f505 	lsrpl.w	r5, r1, r5
   16c88:	f005 0501 	andpl.w	r5, r5, #1
   16c8c:	f1c5 0502 	rsbpl	r5, r5, #2
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   16c90:	f10d 0007 	add.w	r0, sp, #7
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
   16c94:	bf54      	ite	pl
   16c96:	b2ed      	uxtbpl	r5, r5
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
   16c98:	2503      	movmi	r5, #3
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   16c9a:	f001 fb6b 	bl	18374 <nrfx_gpiote_channel_alloc>
   16c9e:	4b29      	ldr	r3, [pc, #164]	; (16d44 <gpio_nrfx_pin_interrupt_configure+0x1a4>)
   16ca0:	4298      	cmp	r0, r3
   16ca2:	d13d      	bne.n	16d20 <gpio_nrfx_pin_interrupt_configure+0x180>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
   16ca4:	f89d 2007 	ldrb.w	r2, [sp, #7]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   16ca8:	0093      	lsls	r3, r2, #2
   16caa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   16cae:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   16cb2:	0224      	lsls	r4, r4, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   16cb4:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   16cb8:	f421 3147 	bic.w	r1, r1, #203776	; 0x31c00
   16cbc:	f421 7140 	bic.w	r1, r1, #768	; 0x300
   16cc0:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   16cc4:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   16cc8:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
   16ccc:	430c      	orrs	r4, r1
   16cce:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   16cd2:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
   16cd6:	0093      	lsls	r3, r2, #2
   16cd8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   16cdc:	f503 43c2 	add.w	r3, r3, #24832	; 0x6100
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   16ce0:	2000      	movs	r0, #0
   16ce2:	6018      	str	r0, [r3, #0]
	nrf_gpiote_event_enable(NRF_GPIOTE, channel);
   16ce4:	f89d 1007 	ldrb.w	r1, [sp, #7]
   16ce8:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   16cea:	008b      	lsls	r3, r1, #2
   16cec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   16cf0:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   16cf4:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   16cf8:	f042 0201 	orr.w	r2, r2, #1
   16cfc:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_reg->INTENSET = mask;
   16d00:	4a0f      	ldr	r2, [pc, #60]	; (16d40 <gpio_nrfx_pin_interrupt_configure+0x1a0>)
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   16d02:	2301      	movs	r3, #1
   16d04:	408b      	lsls	r3, r1
   16d06:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   16d0a:	b003      	add	sp, #12
   16d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   16d0e:	2201      	movs	r2, #1
   16d10:	40aa      	lsls	r2, r5
   16d12:	ea21 0102 	bic.w	r1, r1, r2
   16d16:	e766      	b.n	16be6 <gpio_nrfx_pin_interrupt_configure+0x46>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   16d18:	3001      	adds	r0, #1
   16d1a:	2808      	cmp	r0, #8
   16d1c:	d181      	bne.n	16c22 <gpio_nrfx_pin_interrupt_configure+0x82>
   16d1e:	e79e      	b.n	16c5e <gpio_nrfx_pin_interrupt_configure+0xbe>
		return -ENODEV;
   16d20:	f06f 0012 	mvn.w	r0, #18
   16d24:	e7f1      	b.n	16d0a <gpio_nrfx_pin_interrupt_configure+0x16a>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   16d26:	6931      	ldr	r1, [r6, #16]
   16d28:	40e9      	lsrs	r1, r5
   16d2a:	f001 0101 	and.w	r1, r1, #1
   16d2e:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   16d32:	4620      	mov	r0, r4
   16d34:	b2c9      	uxtb	r1, r1
   16d36:	f005 fd2c 	bl	1c792 <nrf_gpio_cfg_sense_set>
	int res = 0;
   16d3a:	4610      	mov	r0, r2
   16d3c:	e7e5      	b.n	16d0a <gpio_nrfx_pin_interrupt_configure+0x16a>
   16d3e:	bf00      	nop
   16d40:	40006000 	.word	0x40006000
   16d44:	0bad0000 	.word	0x0bad0000

00016d48 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   16d48:	4b2a      	ldr	r3, [pc, #168]	; (16df4 <gpio_nrfx_config+0xac>)
{
   16d4a:	b570      	push	{r4, r5, r6, lr}
	return port->config;
   16d4c:	6846      	ldr	r6, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   16d4e:	482a      	ldr	r0, [pc, #168]	; (16df8 <gpio_nrfx_config+0xb0>)
   16d50:	4013      	ands	r3, r2
   16d52:	4283      	cmp	r3, r0
   16d54:	d03e      	beq.n	16dd4 <gpio_nrfx_config+0x8c>
   16d56:	d80d      	bhi.n	16d74 <gpio_nrfx_config+0x2c>
   16d58:	2b06      	cmp	r3, #6
   16d5a:	d015      	beq.n	16d88 <gpio_nrfx_config+0x40>
   16d5c:	d805      	bhi.n	16d6a <gpio_nrfx_config+0x22>
   16d5e:	b19b      	cbz	r3, 16d88 <gpio_nrfx_config+0x40>
   16d60:	2b02      	cmp	r3, #2
   16d62:	d039      	beq.n	16dd8 <gpio_nrfx_config+0x90>
   16d64:	f06f 0015 	mvn.w	r0, #21
   16d68:	e033      	b.n	16dd2 <gpio_nrfx_config+0x8a>
   16d6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   16d6e:	d1f9      	bne.n	16d64 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
   16d70:	2301      	movs	r3, #1
   16d72:	e009      	b.n	16d88 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   16d74:	4821      	ldr	r0, [pc, #132]	; (16dfc <gpio_nrfx_config+0xb4>)
   16d76:	4283      	cmp	r3, r0
   16d78:	d030      	beq.n	16ddc <gpio_nrfx_config+0x94>
   16d7a:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   16d7e:	d02f      	beq.n	16de0 <gpio_nrfx_config+0x98>
   16d80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   16d84:	d1ee      	bne.n	16d64 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
   16d86:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   16d88:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
   16d8a:	bf54      	ite	pl
   16d8c:	f3c2 1540 	ubfxpl	r5, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
   16d90:	2503      	movmi	r5, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   16d92:	f482 7480 	eor.w	r4, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
   16d96:	f412 7f00 	tst.w	r2, #512	; 0x200
	dir = ((flags & GPIO_OUTPUT) != 0)
   16d9a:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   16d9e:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   16da2:	d007      	beq.n	16db4 <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   16da4:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   16da8:	6876      	ldr	r6, [r6, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   16daa:	d01b      	beq.n	16de4 <gpio_nrfx_config+0x9c>
			nrf_gpio_port_out_set(reg, BIT(pin));
   16dac:	2201      	movs	r2, #1
   16dae:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
   16db0:	f8c6 2508 	str.w	r2, [r6, #1288]	; 0x508
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   16db4:	ea40 0244 	orr.w	r2, r0, r4, lsl #1
    *p_pin = pin_number & 0x1F;
   16db8:	f001 011f 	and.w	r1, r1, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   16dbc:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
   16dc0:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
   16dc4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   16dc8:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   16dcc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
   16dd0:	2000      	movs	r0, #0
}
   16dd2:	bd70      	pop	{r4, r5, r6, pc}
		drive = NRF_GPIO_PIN_H0D1;
   16dd4:	2307      	movs	r3, #7
   16dd6:	e7d7      	b.n	16d88 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
   16dd8:	2304      	movs	r3, #4
   16dda:	e7d5      	b.n	16d88 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
   16ddc:	2305      	movs	r3, #5
   16dde:	e7d3      	b.n	16d88 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
   16de0:	2303      	movs	r3, #3
   16de2:	e7d1      	b.n	16d88 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   16de4:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   16de6:	bf42      	ittt	mi
   16de8:	2201      	movmi	r2, #1
   16dea:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
   16dec:	f8c6 250c 	strmi.w	r2, [r6, #1292]	; 0x50c
}
   16df0:	e7e0      	b.n	16db4 <gpio_nrfx_config+0x6c>
   16df2:	bf00      	nop
   16df4:	00f00006 	.word	0x00f00006
   16df8:	00100006 	.word	0x00100006
   16dfc:	00400002 	.word	0x00400002

00016e00 <gpiote_event_handler>:
{
   16e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   16e04:	4b41      	ldr	r3, [pc, #260]	; (16f0c <gpiote_event_handler+0x10c>)
   16e06:	f8d3 517c 	ldr.w	r5, [r3, #380]	; 0x17c
	if (port_event) {
   16e0a:	2d00      	cmp	r5, #0
   16e0c:	d059      	beq.n	16ec2 <gpiote_event_handler+0xc2>
	uint32_t out = data->pin_int_en;
   16e0e:	4b40      	ldr	r3, [pc, #256]	; (16f10 <gpiote_event_handler+0x110>)
    return p_reg->IN;
   16e10:	f04f 49a0 	mov.w	r9, #1342177280	; 0x50000000
	out &= ~data->trig_edge & ~data->double_edge;
   16e14:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
	uint32_t out = data->pin_int_en;
   16e18:	68df      	ldr	r7, [r3, #12]
   16e1a:	f8d9 4510 	ldr.w	r4, [r9, #1296]	; 0x510
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   16e1e:	691b      	ldr	r3, [r3, #16]
	out &= ~data->trig_edge & ~data->double_edge;
   16e20:	430a      	orrs	r2, r1
   16e22:	ea27 0702 	bic.w	r7, r7, r2
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   16e26:	405c      	eors	r4, r3
	uint32_t out = pin_states & level_pins;
   16e28:	ea27 0404 	bic.w	r4, r7, r4
	uint32_t check_pins = level_pins;
   16e2c:	463a      	mov	r2, r7
	uint32_t bit = 1U << pin;
   16e2e:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   16e30:	f04f 0800 	mov.w	r8, #0
	while (check_pins) {
   16e34:	bb82      	cbnz	r2, 16e98 <gpiote_event_handler+0x98>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   16e36:	4b35      	ldr	r3, [pc, #212]	; (16f0c <gpiote_event_handler+0x10c>)
   16e38:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
   16e3c:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   16e40:	4a34      	ldr	r2, [pc, #208]	; (16f14 <gpiote_event_handler+0x114>)
    return p_reg->INTENSET & mask;
   16e42:	4832      	ldr	r0, [pc, #200]	; (16f0c <gpiote_event_handler+0x10c>)
   16e44:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   16e46:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   16e48:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
   16e4a:	f8d0 1304 	ldr.w	r1, [r0, #772]	; 0x304
   16e4e:	fa06 fc03 	lsl.w	ip, r6, r3
   16e52:	ea1c 0f01 	tst.w	ip, r1
   16e56:	d00c      	beq.n	16e72 <gpiote_event_handler+0x72>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   16e58:	6811      	ldr	r1, [r2, #0]
   16e5a:	b151      	cbz	r1, 16e72 <gpiote_event_handler+0x72>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   16e5c:	f503 71a2 	add.w	r1, r3, #324	; 0x144
   16e60:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   16e64:	6017      	str	r7, [r2, #0]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   16e66:	f3c1 2104 	ubfx	r1, r1, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   16e6a:	fa06 f101 	lsl.w	r1, r6, r1
   16e6e:	430c      	orrs	r4, r1
   16e70:	6811      	ldr	r1, [r2, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   16e72:	3301      	adds	r3, #1
   16e74:	2b08      	cmp	r3, #8
   16e76:	f102 0204 	add.w	r2, r2, #4
   16e7a:	d1e6      	bne.n	16e4a <gpiote_event_handler+0x4a>
	if (fired_triggers[0]) {
   16e7c:	bb1c      	cbnz	r4, 16ec6 <gpiote_event_handler+0xc6>
	if (port_event) {
   16e7e:	b14d      	cbz	r5, 16e94 <gpiote_event_handler+0x94>
	uint32_t out = data->pin_int_en;
   16e80:	4e23      	ldr	r6, [pc, #140]	; (16f10 <gpiote_event_handler+0x110>)
	out &= ~data->trig_edge & ~data->double_edge;
   16e82:	e9d6 3105 	ldrd	r3, r1, [r6, #20]
	uint32_t out = data->pin_int_en;
   16e86:	68f2      	ldr	r2, [r6, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   16e88:	430b      	orrs	r3, r1
   16e8a:	ea22 0203 	bic.w	r2, r2, r3
	uint32_t bit = 1U << pin;
   16e8e:	2401      	movs	r4, #1
	uint32_t pin = 0U;
   16e90:	2500      	movs	r5, #0
	while (level_pins) {
   16e92:	bb4a      	cbnz	r2, 16ee8 <gpiote_event_handler+0xe8>
}
   16e94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (check_pins & bit) {
   16e98:	4216      	tst	r6, r2
   16e9a:	d00e      	beq.n	16eba <gpiote_event_handler+0xba>
			if (!(level_pins & bit)) {
   16e9c:	423e      	tst	r6, r7
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   16e9e:	f008 001f 	and.w	r0, r8, #31
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   16ea2:	bf08      	it	eq
   16ea4:	f500 73e0 	addeq.w	r3, r0, #448	; 0x1c0
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   16ea8:	f04f 0100 	mov.w	r1, #0
   16eac:	bf08      	it	eq
   16eae:	f859 3023 	ldreq.w	r3, [r9, r3, lsl #2]
   16eb2:	f005 fc6e 	bl	1c792 <nrf_gpio_cfg_sense_set>
			check_pins &= ~bit;
   16eb6:	ea22 0206 	bic.w	r2, r2, r6
		++pin;
   16eba:	f108 0801 	add.w	r8, r8, #1
		bit <<= 1;
   16ebe:	0076      	lsls	r6, r6, #1
   16ec0:	e7b8      	b.n	16e34 <gpiote_event_handler+0x34>
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   16ec2:	462c      	mov	r4, r5
   16ec4:	e7bc      	b.n	16e40 <gpiote_event_handler+0x40>
	gpio_fire_callbacks(list, port, pins);
   16ec6:	4b12      	ldr	r3, [pc, #72]	; (16f10 <gpiote_event_handler+0x110>)
   16ec8:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   16eca:	2900      	cmp	r1, #0
   16ecc:	d0d7      	beq.n	16e7e <gpiote_event_handler+0x7e>
   16ece:	680e      	ldr	r6, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   16ed0:	4f11      	ldr	r7, [pc, #68]	; (16f18 <gpiote_event_handler+0x118>)
		if (cb->pin_mask & pins) {
   16ed2:	688a      	ldr	r2, [r1, #8]
   16ed4:	4022      	ands	r2, r4
   16ed6:	d002      	beq.n	16ede <gpiote_event_handler+0xde>
			cb->handler(port, cb, cb->pin_mask & pins);
   16ed8:	684b      	ldr	r3, [r1, #4]
   16eda:	4638      	mov	r0, r7
   16edc:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   16ede:	2e00      	cmp	r6, #0
   16ee0:	d0cd      	beq.n	16e7e <gpiote_event_handler+0x7e>
   16ee2:	4631      	mov	r1, r6
   16ee4:	6836      	ldr	r6, [r6, #0]
   16ee6:	e7f4      	b.n	16ed2 <gpiote_event_handler+0xd2>
		if (level_pins & bit) {
   16ee8:	4214      	tst	r4, r2
   16eea:	d00c      	beq.n	16f06 <gpiote_event_handler+0x106>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   16eec:	6931      	ldr	r1, [r6, #16]
   16eee:	40e9      	lsrs	r1, r5
   16ef0:	f001 0101 	and.w	r1, r1, #1
   16ef4:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   16ef8:	b2c9      	uxtb	r1, r1
   16efa:	f005 001f 	and.w	r0, r5, #31
   16efe:	f005 fc48 	bl	1c792 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   16f02:	ea22 0204 	bic.w	r2, r2, r4
		++pin;
   16f06:	3501      	adds	r5, #1
		bit <<= 1;
   16f08:	0064      	lsls	r4, r4, #1
   16f0a:	e7c2      	b.n	16e92 <gpiote_event_handler+0x92>
   16f0c:	40006000 	.word	0x40006000
   16f10:	200024b8 	.word	0x200024b8
   16f14:	40006100 	.word	0x40006100
   16f18:	0001d5fc 	.word	0x0001d5fc

00016f1c <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   16f1c:	b570      	push	{r4, r5, r6, lr}
		break;
	default:
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
   16f1e:	794b      	ldrb	r3, [r1, #5]
   16f20:	2b01      	cmp	r3, #1
   16f22:	d124      	bne.n	16f6e <uarte_nrfx_configure+0x52>
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   16f24:	798b      	ldrb	r3, [r1, #6]
   16f26:	2b03      	cmp	r3, #3
   16f28:	d121      	bne.n	16f6e <uarte_nrfx_configure+0x52>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   16f2a:	79cc      	ldrb	r4, [r1, #7]
   16f2c:	b12c      	cbz	r4, 16f3a <uarte_nrfx_configure+0x1e>
   16f2e:	2c01      	cmp	r4, #1
   16f30:	d11d      	bne.n	16f6e <uarte_nrfx_configure+0x52>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (IS_HWFC_PINS_USED(get_dev_config(dev)->flags)) {
   16f32:	6843      	ldr	r3, [r0, #4]
   16f34:	685b      	ldr	r3, [r3, #4]
   16f36:	079b      	lsls	r3, r3, #30
   16f38:	d019      	beq.n	16f6e <uarte_nrfx_configure+0x52>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   16f3a:	790a      	ldrb	r2, [r1, #4]
   16f3c:	b112      	cbz	r2, 16f44 <uarte_nrfx_configure+0x28>
   16f3e:	2a02      	cmp	r2, #2
   16f40:	d115      	bne.n	16f6e <uarte_nrfx_configure+0x52>
   16f42:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   16f44:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   16f46:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   16f48:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   16f4c:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   16f4e:	d062      	beq.n	17016 <uarte_nrfx_configure+0xfa>
   16f50:	d82b      	bhi.n	16faa <uarte_nrfx_configure+0x8e>
   16f52:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16f56:	d061      	beq.n	1701c <uarte_nrfx_configure+0x100>
   16f58:	d814      	bhi.n	16f84 <uarte_nrfx_configure+0x68>
   16f5a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   16f5e:	d05f      	beq.n	17020 <uarte_nrfx_configure+0x104>
   16f60:	d808      	bhi.n	16f74 <uarte_nrfx_configure+0x58>
   16f62:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   16f66:	d05e      	beq.n	17026 <uarte_nrfx_configure+0x10a>
   16f68:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   16f6c:	d05e      	beq.n	1702c <uarte_nrfx_configure+0x110>
   16f6e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   16f72:	e04f      	b.n	17014 <uarte_nrfx_configure+0xf8>
   16f74:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   16f78:	d05b      	beq.n	17032 <uarte_nrfx_configure+0x116>
   16f7a:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   16f7e:	d1f6      	bne.n	16f6e <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   16f80:	4b36      	ldr	r3, [pc, #216]	; (1705c <uarte_nrfx_configure+0x140>)
   16f82:	e03c      	b.n	16ffe <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
   16f84:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   16f88:	d056      	beq.n	17038 <uarte_nrfx_configure+0x11c>
   16f8a:	d807      	bhi.n	16f9c <uarte_nrfx_configure+0x80>
   16f8c:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   16f90:	d054      	beq.n	1703c <uarte_nrfx_configure+0x120>
   16f92:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   16f96:	d1ea      	bne.n	16f6e <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   16f98:	4b31      	ldr	r3, [pc, #196]	; (17060 <uarte_nrfx_configure+0x144>)
   16f9a:	e030      	b.n	16ffe <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
   16f9c:	f647 2612 	movw	r6, #31250	; 0x7a12
   16fa0:	42b3      	cmp	r3, r6
   16fa2:	d1e4      	bne.n	16f6e <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   16fa4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   16fa8:	e029      	b.n	16ffe <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
   16faa:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   16fae:	d047      	beq.n	17040 <uarte_nrfx_configure+0x124>
   16fb0:	d813      	bhi.n	16fda <uarte_nrfx_configure+0xbe>
   16fb2:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   16fb6:	d046      	beq.n	17046 <uarte_nrfx_configure+0x12a>
   16fb8:	d809      	bhi.n	16fce <uarte_nrfx_configure+0xb2>
   16fba:	f64d 26c0 	movw	r6, #56000	; 0xdac0
   16fbe:	42b3      	cmp	r3, r6
   16fc0:	d043      	beq.n	1704a <uarte_nrfx_configure+0x12e>
   16fc2:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   16fc6:	d1d2      	bne.n	16f6e <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   16fc8:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   16fcc:	e017      	b.n	16ffe <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
   16fce:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   16fd2:	d1cc      	bne.n	16f6e <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   16fd4:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   16fd8:	e011      	b.n	16ffe <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
   16fda:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   16fde:	d037      	beq.n	17050 <uarte_nrfx_configure+0x134>
   16fe0:	d808      	bhi.n	16ff4 <uarte_nrfx_configure+0xd8>
   16fe2:	4e20      	ldr	r6, [pc, #128]	; (17064 <uarte_nrfx_configure+0x148>)
   16fe4:	42b3      	cmp	r3, r6
   16fe6:	d036      	beq.n	17056 <uarte_nrfx_configure+0x13a>
   16fe8:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   16fec:	d1bf      	bne.n	16f6e <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   16fee:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   16ff2:	e004      	b.n	16ffe <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
   16ff4:	4e1c      	ldr	r6, [pc, #112]	; (17068 <uarte_nrfx_configure+0x14c>)
   16ff6:	42b3      	cmp	r3, r6
   16ff8:	d1b9      	bne.n	16f6e <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   16ffa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   16ffe:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   17002:	6903      	ldr	r3, [r0, #16]
   17004:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
   17006:	4322      	orrs	r2, r4
   17008:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1700a:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   1700e:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   17012:	2000      	movs	r0, #0
}
   17014:	bd70      	pop	{r4, r5, r6, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   17016:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1701a:	e7f0      	b.n	16ffe <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1701c:	4b13      	ldr	r3, [pc, #76]	; (1706c <uarte_nrfx_configure+0x150>)
   1701e:	e7ee      	b.n	16ffe <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   17020:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   17024:	e7eb      	b.n	16ffe <uarte_nrfx_configure+0xe2>
		nrf_baudrate = 0x00014000;
   17026:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1702a:	e7e8      	b.n	16ffe <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
   1702c:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   17030:	e7e5      	b.n	16ffe <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   17032:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   17036:	e7e2      	b.n	16ffe <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   17038:	4b0d      	ldr	r3, [pc, #52]	; (17070 <uarte_nrfx_configure+0x154>)
   1703a:	e7e0      	b.n	16ffe <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1703c:	4b0d      	ldr	r3, [pc, #52]	; (17074 <uarte_nrfx_configure+0x158>)
   1703e:	e7de      	b.n	16ffe <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   17040:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   17044:	e7db      	b.n	16ffe <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   17046:	4b0c      	ldr	r3, [pc, #48]	; (17078 <uarte_nrfx_configure+0x15c>)
   17048:	e7d9      	b.n	16ffe <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1704a:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1704e:	e7d6      	b.n	16ffe <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   17050:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   17054:	e7d3      	b.n	16ffe <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   17056:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1705a:	e7d0      	b.n	16ffe <uarte_nrfx_configure+0xe2>
   1705c:	0013b000 	.word	0x0013b000
   17060:	004ea000 	.word	0x004ea000
   17064:	0003d090 	.word	0x0003d090
   17068:	000f4240 	.word	0x000f4240
   1706c:	00275000 	.word	0x00275000
   17070:	0075c000 	.word	0x0075c000
   17074:	003af000 	.word	0x003af000
   17078:	013a9000 	.word	0x013a9000

0001707c <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   1707c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return dev->data;
   1707e:	6906      	ldr	r6, [r0, #16]
{
   17080:	4605      	mov	r5, r0
   17082:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   17084:	f005 fd52 	bl	1cb2c <k_is_in_isr>
   17088:	b910      	cbnz	r0, 17090 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
   1708a:	4b2c      	ldr	r3, [pc, #176]	; (1713c <uarte_nrfx_poll_out+0xc0>)
	int key;

	if (isr_mode) {
   1708c:	781b      	ldrb	r3, [r3, #0]
   1708e:	b983      	cbnz	r3, 170b2 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   17090:	f04f 0340 	mov.w	r3, #64	; 0x40
   17094:	f3ef 8411 	mrs	r4, BASEPRI
   17098:	f383 8811 	msr	BASEPRI, r3
   1709c:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   170a0:	6868      	ldr	r0, [r5, #4]
   170a2:	f005 fbf7 	bl	1c894 <is_tx_ready.isra.0>
   170a6:	bb28      	cbnz	r0, 170f4 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
   170a8:	f384 8811 	msr	BASEPRI, r4
   170ac:	f3bf 8f6f 	isb	sy
}
   170b0:	e7ee      	b.n	17090 <uarte_nrfx_poll_out+0x14>
{
   170b2:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   170b4:	6868      	ldr	r0, [r5, #4]
   170b6:	f005 fbed 	bl	1c894 <is_tx_ready.isra.0>
   170ba:	b970      	cbnz	r0, 170da <uarte_nrfx_poll_out+0x5e>
   170bc:	2001      	movs	r0, #1
   170be:	f005 fc77 	bl	1c9b0 <nrfx_busy_wait>
   170c2:	3c01      	subs	r4, #1
   170c4:	d1f6      	bne.n	170b4 <uarte_nrfx_poll_out+0x38>
	return z_impl_k_sleep(timeout);
   170c6:	2100      	movs	r1, #0
   170c8:	2021      	movs	r0, #33	; 0x21
   170ca:	f002 faa5 	bl	19618 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   170ce:	e7f0      	b.n	170b2 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   170d0:	f384 8811 	msr	BASEPRI, r4
   170d4:	f3bf 8f6f 	isb	sy
}
   170d8:	e7f5      	b.n	170c6 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
   170da:	f04f 0340 	mov.w	r3, #64	; 0x40
   170de:	f3ef 8411 	mrs	r4, BASEPRI
   170e2:	f383 8811 	msr	BASEPRI, r3
   170e6:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   170ea:	6868      	ldr	r0, [r5, #4]
   170ec:	f005 fbd2 	bl	1c894 <is_tx_ready.isra.0>
   170f0:	2800      	cmp	r0, #0
   170f2:	d0ed      	beq.n	170d0 <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
   170f4:	f806 7f10 	strb.w	r7, [r6, #16]!
	tx_start(dev, &data->char_out, 1);
   170f8:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
   170fa:	680b      	ldr	r3, [r1, #0]
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
   170fc:	2201      	movs	r2, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   170fe:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   17102:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17106:	2200      	movs	r2, #0
   17108:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   1710c:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   17110:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   17114:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   17118:	684a      	ldr	r2, [r1, #4]
   1711a:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1711c:	bf41      	itttt	mi
   1711e:	2208      	movmi	r2, #8
   17120:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
   17124:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
   17128:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1712c:	2201      	movs	r2, #1
   1712e:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
   17130:	f384 8811 	msr	BASEPRI, r4
   17134:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   17138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1713a:	bf00      	nop
   1713c:	20003408 	.word	0x20003408

00017140 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   17140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17142:	2200      	movs	r2, #0
   17144:	4605      	mov	r5, r0
   17146:	2101      	movs	r1, #1
   17148:	2002      	movs	r0, #2
   1714a:	f7fa f8ad 	bl	112a8 <z_arm_irq_priority_set>
   1714e:	2002      	movs	r0, #2
   17150:	f7fa f878 	bl	11244 <arch_irq_enable>
	return config->uarte_regs;
   17154:	686b      	ldr	r3, [r5, #4]
	return dev->data;
   17156:	692e      	ldr	r6, [r5, #16]
	return config->uarte_regs;
   17158:	681c      	ldr	r4, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1715a:	2300      	movs	r3, #0
   1715c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	data->dev = dev;
   17160:	4631      	mov	r1, r6
    p_reg->OUTSET = set_mask;
   17162:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   17166:	2240      	movs	r2, #64	; 0x40
   17168:	f841 5b04 	str.w	r5, [r1], #4
    reg->PIN_CNF[pin_number] = cnf;
   1716c:	200c      	movs	r0, #12
    p_reg->OUTSET = set_mask;
   1716e:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    p_reg->PSEL.TXD = pseltxd;
   17172:	2706      	movs	r7, #6
    reg->PIN_CNF[pin_number] = cnf;
   17174:	2203      	movs	r2, #3
   17176:	f8c3 2718 	str.w	r2, [r3, #1816]	; 0x718
   1717a:	f8c3 0720 	str.w	r0, [r3, #1824]	; 0x720
   1717e:	f8c4 750c 	str.w	r7, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   17182:	2708      	movs	r7, #8
   17184:	f8c4 7514 	str.w	r7, [r4, #1300]	; 0x514
   17188:	f8c3 071c 	str.w	r0, [r3, #1820]	; 0x71c
    p_reg->OUTSET = set_mask;
   1718c:	2020      	movs	r0, #32
   1718e:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
   17192:	f8c3 2714 	str.w	r2, [r3, #1812]	; 0x714
    p_reg->PSEL.RTS = pselrts;
   17196:	2305      	movs	r3, #5
   17198:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   1719c:	2307      	movs	r3, #7
   1719e:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   171a2:	4628      	mov	r0, r5
   171a4:	f7ff feba 	bl	16f1c <uarte_nrfx_configure>
	if (err) {
   171a8:	4607      	mov	r7, r0
   171aa:	b9b0      	cbnz	r0, 171da <uarte_0_init+0x9a>
	    get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   171ac:	686b      	ldr	r3, [r5, #4]
   171ae:	685b      	ldr	r3, [r3, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   171b0:	0719      	lsls	r1, r3, #28
   171b2:	d527      	bpl.n	17204 <uarte_0_init+0xc4>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   171b4:	f106 0012 	add.w	r0, r6, #18
   171b8:	f001 f914 	bl	183e4 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   171bc:	4b25      	ldr	r3, [pc, #148]	; (17254 <uarte_0_init+0x114>)
   171be:	4298      	cmp	r0, r3
   171c0:	d00d      	beq.n	171de <uarte_0_init+0x9e>
   171c2:	4b25      	ldr	r3, [pc, #148]	; (17258 <uarte_0_init+0x118>)
   171c4:	4925      	ldr	r1, [pc, #148]	; (1725c <uarte_0_init+0x11c>)
		LOG_ERR("Failed to allocate PPI Channel");
   171c6:	4826      	ldr	r0, [pc, #152]	; (17260 <uarte_0_init+0x120>)
   171c8:	1ac9      	subs	r1, r1, r3
   171ca:	08c9      	lsrs	r1, r1, #3
   171cc:	0189      	lsls	r1, r1, #6
   171ce:	f041 0101 	orr.w	r1, r1, #1
   171d2:	f003 f98a 	bl	1a4ea <log_0>
		return -EIO;
   171d6:	f06f 0704 	mvn.w	r7, #4
UART_NRF_UARTE_DEVICE(0);
   171da:	4638      	mov	r0, r7
   171dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   171de:	7cb0      	ldrb	r0, [r6, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   171e0:	00c3      	lsls	r3, r0, #3
   171e2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   171e6:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   171ea:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   171ee:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   171f2:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   171f6:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
   171fa:	4a1a      	ldr	r2, [pc, #104]	; (17264 <uarte_0_init+0x124>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   171fc:	2301      	movs	r3, #1
   171fe:	4083      	lsls	r3, r0
   17200:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   17204:	2308      	movs	r3, #8
   17206:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1720a:	2300      	movs	r3, #0
   1720c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   17210:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   17214:	f106 0311 	add.w	r3, r6, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   17218:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1721c:	2301      	movs	r3, #1
   1721e:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   17222:	6023      	str	r3, [r4, #0]
	if (!(get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   17224:	686b      	ldr	r3, [r5, #4]
   17226:	685b      	ldr	r3, [r3, #4]
   17228:	071a      	lsls	r2, r3, #28
    p_reg->INTENSET = mask;
   1722a:	bf5c      	itt	pl
   1722c:	f44f 7280 	movpl.w	r2, #256	; 0x100
   17230:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   17234:	06db      	lsls	r3, r3, #27
   17236:	bf44      	itt	mi
   17238:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   1723c:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   17240:	3610      	adds	r6, #16
    p_reg->TXD.MAXCNT = length;
   17242:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   17244:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   17248:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1724c:	2301      	movs	r3, #1
   1724e:	60a3      	str	r3, [r4, #8]
   17250:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   17252:	e7c2      	b.n	171da <uarte_0_init+0x9a>
   17254:	0bad0000 	.word	0x0bad0000
   17258:	0001d788 	.word	0x0001d788
   1725c:	0001d838 	.word	0x0001d838
   17260:	0001f751 	.word	0x0001f751
   17264:	4001f000 	.word	0x4001f000

00017268 <random_byte_get>:
	__asm__ volatile(
   17268:	f04f 0340 	mov.w	r3, #64	; 0x40
   1726c:	f3ef 8211 	mrs	r2, BASEPRI
   17270:	f383 8811 	msr	BASEPRI, r3
   17274:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   17278:	4b09      	ldr	r3, [pc, #36]	; (172a0 <random_byte_get+0x38>)
   1727a:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1727e:	b161      	cbz	r1, 1729a <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   17280:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   17282:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   17286:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   1728a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   1728e:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   17290:	f382 8811 	msr	BASEPRI, r2
   17294:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   17298:	4770      	bx	lr
	int retval = -EAGAIN;
   1729a:	f06f 000a 	mvn.w	r0, #10
   1729e:	e7f7      	b.n	17290 <random_byte_get+0x28>
   172a0:	4000d000 	.word	0x4000d000

000172a4 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   172a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   172a6:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   172a8:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   172aa:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   172ac:	f04f 0040 	mov.w	r0, #64	; 0x40
   172b0:	f3ef 8e11 	mrs	lr, BASEPRI
   172b4:	f380 8811 	msr	BASEPRI, r0
   172b8:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   172bc:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   172be:	f893 c001 	ldrb.w	ip, [r3, #1]

	available = (last - first) & mask;
   172c2:	1ba4      	subs	r4, r4, r6
   172c4:	403c      	ands	r4, r7
	if (available < len) {
   172c6:	42a2      	cmp	r2, r4
		len = available;
   172c8:	bf88      	it	hi
   172ca:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   172cc:	18b0      	adds	r0, r6, r2
   172ce:	4038      	ands	r0, r7
	first = rngp->first_alloc;
   172d0:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   172d2:	7018      	strb	r0, [r3, #0]
	__asm__ volatile(
   172d4:	f38e 8811 	msr	BASEPRI, lr
   172d8:	f3bf 8f6f 	isb	sy
   172dc:	1888      	adds	r0, r1, r2
	uint8_t *dst   = buf;
   172de:	460a      	mov	r2, r1
	irq_unlock(key);

	while (likely(len--)) {
   172e0:	4290      	cmp	r0, r2
   172e2:	d119      	bne.n	17318 <rng_pool_get+0x74>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   172e4:	4566      	cmp	r6, ip
   172e6:	d10d      	bne.n	17304 <rng_pool_get+0x60>
	__asm__ volatile(
   172e8:	f04f 0540 	mov.w	r5, #64	; 0x40
   172ec:	f3ef 8011 	mrs	r0, BASEPRI
   172f0:	f385 8811 	msr	BASEPRI, r5
   172f4:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   172f8:	781d      	ldrb	r5, [r3, #0]
   172fa:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   172fc:	f380 8811 	msr	BASEPRI, r0
   17300:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   17304:	1a52      	subs	r2, r2, r1
	available = available - len;
	if (available <= rngp->threshold) {
   17306:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   17308:	b290      	uxth	r0, r2
	available = available - len;
   1730a:	1a22      	subs	r2, r4, r0
	if (available <= rngp->threshold) {
   1730c:	4293      	cmp	r3, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1730e:	bf22      	ittt	cs
   17310:	4b06      	ldrcs	r3, [pc, #24]	; (1732c <rng_pool_get+0x88>)
   17312:	2201      	movcs	r2, #1
   17314:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   17316:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   17318:	eb03 0e05 	add.w	lr, r3, r5
		first = (first + 1) & mask;
   1731c:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   1731e:	f89e e005 	ldrb.w	lr, [lr, #5]
   17322:	f802 eb01 	strb.w	lr, [r2], #1
		first = (first + 1) & mask;
   17326:	403d      	ands	r5, r7
   17328:	e7da      	b.n	172e0 <rng_pool_get+0x3c>
   1732a:	bf00      	nop
   1732c:	4000d000 	.word	0x4000d000

00017330 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   17330:	43db      	mvns	r3, r3
{
   17332:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   17336:	f013 0501 	ands.w	r5, r3, #1
{
   1733a:	460e      	mov	r6, r1
   1733c:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1733e:	d004      	beq.n	1734a <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   17340:	4821      	ldr	r0, [pc, #132]	; (173c8 <entropy_nrf5_get_entropy_isr+0x98>)
   17342:	f7ff ffaf 	bl	172a4 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   17346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   1734a:	b3a2      	cbz	r2, 173b6 <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   1734c:	f04f 0340 	mov.w	r3, #64	; 0x40
   17350:	f3ef 8811 	mrs	r8, BASEPRI
   17354:	f383 8811 	msr	BASEPRI, r3
   17358:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   1735c:	200d      	movs	r0, #13
   1735e:	f7f9 ff95 	bl	1128c <arch_irq_is_enabled>
   17362:	4607      	mov	r7, r0
		irq_disable(IRQN);
   17364:	200d      	movs	r0, #13
   17366:	f7f9 ff7d 	bl	11264 <arch_irq_disable>
	__asm__ volatile(
   1736a:	f388 8811 	msr	BASEPRI, r8
   1736e:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   17372:	f8df 8058 	ldr.w	r8, [pc, #88]	; 173cc <entropy_nrf5_get_entropy_isr+0x9c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   17376:	f8df 9058 	ldr.w	r9, [pc, #88]	; 173d0 <entropy_nrf5_get_entropy_isr+0xa0>
   1737a:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
   1737e:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
   17382:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   17386:	2301      	movs	r3, #1
   17388:	f8c8 3000 	str.w	r3, [r8]
   1738c:	4625      	mov	r5, r4
   1738e:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   17392:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   17396:	b183      	cbz	r3, 173ba <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   17398:	f7ff ff66 	bl	17268 <random_byte_get>
			if (byte < 0) {
   1739c:	1e03      	subs	r3, r0, #0
   1739e:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
   173a2:	dbf6      	blt.n	17392 <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
   173a4:	3d01      	subs	r5, #1
   173a6:	b2ad      	uxth	r5, r5
   173a8:	5573      	strb	r3, [r6, r5]
		} while (len);
   173aa:	2d00      	cmp	r5, #0
   173ac:	d1f1      	bne.n	17392 <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   173ae:	b117      	cbz	r7, 173b6 <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   173b0:	200d      	movs	r0, #13
   173b2:	f7f9 ff47 	bl	11244 <arch_irq_enable>
	return cnt;
   173b6:	4620      	mov	r0, r4
   173b8:	e7c5      	b.n	17346 <entropy_nrf5_get_entropy_isr+0x16>
   173ba:	f3bf 8f4f 	dsb	sy
				__WFE();
   173be:	bf20      	wfe
				__SEV();
   173c0:	bf40      	sev
				__WFE();
   173c2:	bf20      	wfe
   173c4:	e7e5      	b.n	17392 <entropy_nrf5_get_entropy_isr+0x62>
   173c6:	bf00      	nop
   173c8:	2000250c 	.word	0x2000250c
   173cc:	4000d000 	.word	0x4000d000
   173d0:	e000e100 	.word	0xe000e100

000173d4 <entropy_nrf5_get_entropy>:
{
   173d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   173d8:	4f13      	ldr	r7, [pc, #76]	; (17428 <entropy_nrf5_get_entropy+0x54>)
   173da:	460d      	mov	r5, r1
   173dc:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   173de:	f107 0845 	add.w	r8, r7, #69	; 0x45
   173e2:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   173e6:	b914      	cbnz	r4, 173ee <entropy_nrf5_get_entropy+0x1a>
}
   173e8:	4620      	mov	r0, r4
   173ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   173ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   173f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   173f6:	4638      	mov	r0, r7
   173f8:	f001 fc50 	bl	18c9c <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   173fc:	4622      	mov	r2, r4
   173fe:	4629      	mov	r1, r5
   17400:	4640      	mov	r0, r8
   17402:	f7ff ff4f 	bl	172a4 <rng_pool_get>
   17406:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   17408:	4638      	mov	r0, r7
   1740a:	f001 fc21 	bl	18c50 <z_impl_k_sem_give>
		if (bytes == 0U) {
   1740e:	b93e      	cbnz	r6, 17420 <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   17410:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   17414:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17418:	4648      	mov	r0, r9
   1741a:	f001 fc3f 	bl	18c9c <z_impl_k_sem_take>
			continue;
   1741e:	e7e2      	b.n	173e6 <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   17420:	1ba4      	subs	r4, r4, r6
   17422:	b2a4      	uxth	r4, r4
		buf += bytes;
   17424:	4435      	add	r5, r6
   17426:	e7de      	b.n	173e6 <entropy_nrf5_get_entropy+0x12>
   17428:	200024dc 	.word	0x200024dc

0001742c <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   1742c:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1742e:	4c19      	ldr	r4, [pc, #100]	; (17494 <entropy_nrf5_init+0x68>)
   17430:	2201      	movs	r2, #1
   17432:	4611      	mov	r1, r2
   17434:	4620      	mov	r0, r4
   17436:	f005 fc62 	bl	1ccfe <z_impl_k_sem_init>
   1743a:	2201      	movs	r2, #1
   1743c:	2100      	movs	r1, #0
   1743e:	f104 0018 	add.w	r0, r4, #24
   17442:	f005 fc5c 	bl	1ccfe <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   17446:	f240 4307 	movw	r3, #1031	; 0x407
   1744a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   1744e:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   17452:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   17454:	230c      	movs	r3, #12
   17456:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   1745a:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   1745c:	4b0e      	ldr	r3, [pc, #56]	; (17498 <entropy_nrf5_init+0x6c>)
   1745e:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   17462:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   17466:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1746a:	f022 0201 	bic.w	r2, r2, #1
   1746e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   17472:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   17474:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   17478:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   1747c:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   17480:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   17482:	6019      	str	r1, [r3, #0]
   17484:	200d      	movs	r0, #13
   17486:	f7f9 ff0f 	bl	112a8 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   1748a:	200d      	movs	r0, #13
   1748c:	f7f9 feda 	bl	11244 <arch_irq_enable>

	return 0;
}
   17490:	4628      	mov	r0, r5
   17492:	bd38      	pop	{r3, r4, r5, pc}
   17494:	200024dc 	.word	0x200024dc
   17498:	4000d000 	.word	0x4000d000

0001749c <isr>:
{
   1749c:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1749e:	f7ff fee3 	bl	17268 <random_byte_get>
	if (byte < 0) {
   174a2:	2800      	cmp	r0, #0
   174a4:	db20      	blt.n	174e8 <isr+0x4c>
	uint8_t last  = rngp->last;
   174a6:	4b17      	ldr	r3, [pc, #92]	; (17504 <isr+0x68>)
   174a8:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   174ac:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   174b0:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   174b4:	1a51      	subs	r1, r2, r1
   174b6:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   174ba:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   174bc:	d10d      	bne.n	174da <isr+0x3e>
	uint8_t last  = rngp->last;
   174be:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   174c2:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   174c6:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   174ca:	1a51      	subs	r1, r2, r1
   174cc:	ea34 0101 	bics.w	r1, r4, r1
   174d0:	d10b      	bne.n	174ea <isr+0x4e>
   174d2:	4b0d      	ldr	r3, [pc, #52]	; (17508 <isr+0x6c>)
   174d4:	2201      	movs	r2, #1
   174d6:	605a      	str	r2, [r3, #4]
}
   174d8:	e00e      	b.n	174f8 <isr+0x5c>
	rngp->buffer[last] = byte;
   174da:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   174dc:	3201      	adds	r2, #1
   174de:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   174e0:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   174e4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   174e8:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   174ea:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   174ec:	3201      	adds	r2, #1
   174ee:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   174f0:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   174f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   174f8:	4804      	ldr	r0, [pc, #16]	; (1750c <isr+0x70>)
}
   174fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   174fe:	f001 bba7 	b.w	18c50 <z_impl_k_sem_give>
   17502:	bf00      	nop
   17504:	200024dc 	.word	0x200024dc
   17508:	4000d000 	.word	0x4000d000
   1750c:	200024f4 	.word	0x200024f4

00017510 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   17510:	4602      	mov	r2, r0
   17512:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   17514:	4801      	ldr	r0, [pc, #4]	; (1751c <multithreading_lock_acquire+0xc>)
   17516:	f001 baad 	b.w	18a74 <z_impl_k_mutex_lock>
   1751a:	bf00      	nop
   1751c:	20000654 	.word	0x20000654

00017520 <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
   17520:	4801      	ldr	r0, [pc, #4]	; (17528 <multithreading_lock_release+0x8>)
   17522:	f001 bb1f 	b.w	18b64 <z_impl_k_mutex_unlock>
   17526:	bf00      	nop
   17528:	20000654 	.word	0x20000654

0001752c <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   1752c:	b508      	push	{r3, lr}
	z_impl_log_panic();
   1752e:	f7f8 ff2d 	bl	1038c <z_impl_log_panic>
   17532:	4b06      	ldr	r3, [pc, #24]	; (1754c <k_sys_fatal_error_handler+0x20>)
   17534:	4906      	ldr	r1, [pc, #24]	; (17550 <k_sys_fatal_error_handler+0x24>)
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   17536:	4807      	ldr	r0, [pc, #28]	; (17554 <k_sys_fatal_error_handler+0x28>)
   17538:	1ac9      	subs	r1, r1, r3
   1753a:	08c9      	lsrs	r1, r1, #3
   1753c:	0189      	lsls	r1, r1, #6
   1753e:	f041 0101 	orr.w	r1, r1, #1
   17542:	f002 ffd2 	bl	1a4ea <log_0>
		sys_arch_reboot(0);
   17546:	2000      	movs	r0, #0
   17548:	f7fa fb78 	bl	11c3c <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   1754c:	0001d788 	.word	0x0001d788
   17550:	0001d7e0 	.word	0x0001d7e0
   17554:	0001f784 	.word	0x0001f784

00017558 <sdc_assertion_handler>:
	bt_ctlr_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_BT_CTLR_ASSERT_HANDLER) */
void sdc_assertion_handler(const char *const file, const uint32_t line)
{
   17558:	b538      	push	{r3, r4, r5, lr}
   1755a:	4b0b      	ldr	r3, [pc, #44]	; (17588 <sdc_assertion_handler+0x30>)
   1755c:	4c0b      	ldr	r4, [pc, #44]	; (1758c <sdc_assertion_handler+0x34>)
   1755e:	1ae4      	subs	r4, r4, r3
   17560:	460d      	mov	r5, r1
   17562:	08e4      	lsrs	r4, r4, #3
   17564:	f7f8 fd98 	bl	10098 <z_log_strdup>
	BT_ERR("SoftDevice Controller ASSERT: %s, %d", log_strdup(file), line);
   17568:	01a4      	lsls	r4, r4, #6
   1756a:	f044 0401 	orr.w	r4, r4, #1
   1756e:	4601      	mov	r1, r0
   17570:	4623      	mov	r3, r4
   17572:	4807      	ldr	r0, [pc, #28]	; (17590 <sdc_assertion_handler+0x38>)
   17574:	462a      	mov	r2, r5
   17576:	f002 ffd9 	bl	1a52c <log_2>
	k_oops();
   1757a:	4040      	eors	r0, r0
   1757c:	f380 8811 	msr	BASEPRI, r0
   17580:	f04f 0003 	mov.w	r0, #3
   17584:	df02      	svc	2
}
   17586:	bd38      	pop	{r3, r4, r5, pc}
   17588:	0001d788 	.word	0x0001d788
   1758c:	0001d820 	.word	0x0001d820
   17590:	0001f7a1 	.word	0x0001f7a1

00017594 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   17594:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   17596:	4804      	ldr	r0, [pc, #16]	; (175a8 <hci_driver_init+0x14>)
   17598:	f7fb fce2 	bl	12f60 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
	return err;
}
   1759c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = sdc_init(sdc_assertion_handler);
   175a0:	4802      	ldr	r0, [pc, #8]	; (175ac <hci_driver_init+0x18>)
   175a2:	f7ec baad 	b.w	3b00 <sdc_init>
   175a6:	bf00      	nop
   175a8:	0001de00 	.word	0x0001de00
   175ac:	00017559 	.word	0x00017559

000175b0 <rand_prio_low_vector_get>:
{
   175b0:	b538      	push	{r3, r4, r5, lr}
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   175b2:	4b08      	ldr	r3, [pc, #32]	; (175d4 <rand_prio_low_vector_get+0x24>)
{
   175b4:	4604      	mov	r4, r0
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   175b6:	6818      	ldr	r0, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   175b8:	6883      	ldr	r3, [r0, #8]
   175ba:	685d      	ldr	r5, [r3, #4]
   175bc:	460a      	mov	r2, r1
   175be:	b135      	cbz	r5, 175ce <rand_prio_low_vector_get+0x1e>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   175c0:	2300      	movs	r3, #0
   175c2:	4621      	mov	r1, r4
   175c4:	47a8      	blx	r5
	return ret >= 0 ? ret : 0;
   175c6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   175ca:	b2c0      	uxtb	r0, r0
   175cc:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   175ce:	f06f 0085 	mvn.w	r0, #133	; 0x85
   175d2:	e7f8      	b.n	175c6 <rand_prio_low_vector_get+0x16>
   175d4:	20002530 	.word	0x20002530

000175d8 <hci_driver_open>:
{
   175d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   175da:	b091      	sub	sp, #68	; 0x44
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   175dc:	2200      	movs	r2, #0
   175de:	2300      	movs	r3, #0
   175e0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   175e4:	2300      	movs	r3, #0
   175e6:	f06f 0209 	mvn.w	r2, #9
   175ea:	e9cd 2303 	strd	r2, r3, [sp, #12]
   175ee:	e9cd 3301 	strd	r3, r3, [sp, #4]
   175f2:	9300      	str	r3, [sp, #0]
   175f4:	4951      	ldr	r1, [pc, #324]	; (1773c <hci_driver_open+0x164>)
   175f6:	4b52      	ldr	r3, [pc, #328]	; (17740 <hci_driver_open+0x168>)
   175f8:	4852      	ldr	r0, [pc, #328]	; (17744 <hci_driver_open+0x16c>)
   175fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
   175fe:	f001 f99b 	bl	18938 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   17602:	4951      	ldr	r1, [pc, #324]	; (17748 <hci_driver_open+0x170>)
   17604:	484f      	ldr	r0, [pc, #316]	; (17744 <hci_driver_open+0x16c>)
   17606:	4c51      	ldr	r4, [pc, #324]	; (1774c <hci_driver_open+0x174>)
   17608:	f005 fa96 	bl	1cb38 <z_impl_k_thread_name_set>
	sdc_build_revision_get(build_revision);
   1760c:	a80b      	add	r0, sp, #44	; 0x2c
   1760e:	f7ec f9f9 	bl	3a04 <sdc_build_revision_get>
   17612:	4b4f      	ldr	r3, [pc, #316]	; (17750 <hci_driver_open+0x178>)
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   17614:	484f      	ldr	r0, [pc, #316]	; (17754 <hci_driver_open+0x17c>)
   17616:	1ae4      	subs	r4, r4, r3
   17618:	08e4      	lsrs	r4, r4, #3
   1761a:	01a4      	lsls	r4, r4, #6
   1761c:	f044 0303 	orr.w	r3, r4, #3
   17620:	2214      	movs	r2, #20
   17622:	a90b      	add	r1, sp, #44	; 0x2c
   17624:	f002 ffc2 	bl	1a5ac <log_hexdump>
			err = sdc_support_adv();
   17628:	f7ec fae8 	bl	3bfc <sdc_support_adv>
			if (err) {
   1762c:	b110      	cbz	r0, 17634 <hci_driver_open+0x5c>
		return -err;
   1762e:	2086      	movs	r0, #134	; 0x86
}
   17630:	b011      	add	sp, #68	; 0x44
   17632:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err = sdc_support_slave();
   17634:	f7ec fb12 	bl	3c5c <sdc_support_slave>
		if (err) {
   17638:	2800      	cmp	r0, #0
   1763a:	d1f8      	bne.n	1762e <hci_driver_open+0x56>
		err = sdc_support_dle();
   1763c:	f7ec faee 	bl	3c1c <sdc_support_dle>
		if (err) {
   17640:	2800      	cmp	r0, #0
   17642:	d1f4      	bne.n	1762e <hci_driver_open+0x56>
		err = sdc_support_le_2m_phy();
   17644:	f7ec fafa 	bl	3c3c <sdc_support_le_2m_phy>
		if (err) {
   17648:	4606      	mov	r6, r0
   1764a:	2800      	cmp	r0, #0
   1764c:	d1ef      	bne.n	1762e <hci_driver_open+0x56>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1764e:	ad08      	add	r5, sp, #32
   17650:	462a      	mov	r2, r5
   17652:	2101      	movs	r1, #1
	cfg.master_count.count = SDC_MASTER_COUNT;
   17654:	f88d 0020 	strb.w	r0, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   17658:	f7ec f9e2 	bl	3a20 <sdc_cfg_set>
	if (required_memory < 0) {
   1765c:	2800      	cmp	r0, #0
   1765e:	dbe7      	blt.n	17630 <hci_driver_open+0x58>
	cfg.slave_count.count = CONFIG_SDC_SLAVE_COUNT;
   17660:	2701      	movs	r7, #1
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   17662:	462a      	mov	r2, r5
   17664:	2102      	movs	r1, #2
   17666:	4630      	mov	r0, r6
	cfg.slave_count.count = CONFIG_SDC_SLAVE_COUNT;
   17668:	f88d 7020 	strb.w	r7, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1766c:	f7ec f9d8 	bl	3a20 <sdc_cfg_set>
	if (required_memory < 0) {
   17670:	2800      	cmp	r0, #0
   17672:	dbdd      	blt.n	17630 <hci_driver_open+0x58>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   17674:	4b38      	ldr	r3, [pc, #224]	; (17758 <hci_driver_open+0x180>)
   17676:	9308      	str	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   17678:	462a      	mov	r2, r5
   1767a:	2103      	movs	r1, #3
   1767c:	4630      	mov	r0, r6
   1767e:	f7ec f9cf 	bl	3a20 <sdc_cfg_set>
	if (required_memory < 0) {
   17682:	2800      	cmp	r0, #0
   17684:	dbd4      	blt.n	17630 <hci_driver_open+0x58>
	cfg.event_length.event_length_us =
   17686:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1768a:	462a      	mov	r2, r5
   1768c:	2104      	movs	r1, #4
   1768e:	4630      	mov	r0, r6
	cfg.event_length.event_length_us =
   17690:	9308      	str	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   17692:	f7ec f9c5 	bl	3a20 <sdc_cfg_set>
	if (required_memory < 0) {
   17696:	2800      	cmp	r0, #0
   17698:	dbca      	blt.n	17630 <hci_driver_open+0x58>
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1769a:	462a      	mov	r2, r5
   1769c:	2105      	movs	r1, #5
   1769e:	4630      	mov	r0, r6
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   176a0:	f88d 7020 	strb.w	r7, [sp, #32]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   176a4:	f7ec f9bc 	bl	3a20 <sdc_cfg_set>
	if (required_memory < 0) {
   176a8:	2800      	cmp	r0, #0
   176aa:	dbc1      	blt.n	17630 <hci_driver_open+0x58>
	if (required_memory > sizeof(sdc_mempool)) {
   176ac:	f240 63e6 	movw	r3, #1766	; 0x6e6
   176b0:	4298      	cmp	r0, r3
   176b2:	dd10      	ble.n	176d6 <hci_driver_open+0xfe>
		BT_ERR("Allocated memory too low: %u < %u",
   176b4:	4602      	mov	r2, r0
   176b6:	ea44 0307 	orr.w	r3, r4, r7
   176ba:	4828      	ldr	r0, [pc, #160]	; (1775c <hci_driver_open+0x184>)
   176bc:	f240 61e6 	movw	r1, #1766	; 0x6e6
   176c0:	f002 ff34 	bl	1a52c <log_2>
		k_panic();
   176c4:	4040      	eors	r0, r0
   176c6:	f380 8811 	msr	BASEPRI, r0
   176ca:	f04f 0004 	mov.w	r0, #4
   176ce:	df02      	svc	2
		return -ENOMEM;
   176d0:	f06f 000b 	mvn.w	r0, #11
   176d4:	e7ac      	b.n	17630 <hci_driver_open+0x58>
   176d6:	4822      	ldr	r0, [pc, #136]	; (17760 <hci_driver_open+0x188>)
   176d8:	f000 ff64 	bl	185a4 <z_impl_device_get_binding>
	entropy_source = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   176dc:	4b21      	ldr	r3, [pc, #132]	; (17764 <hci_driver_open+0x18c>)
   176de:	6018      	str	r0, [r3, #0]
	if (!entropy_source) {
   176e0:	b938      	cbnz	r0, 176f2 <hci_driver_open+0x11a>
		BT_ERR("An entropy source is required");
   176e2:	4821      	ldr	r0, [pc, #132]	; (17768 <hci_driver_open+0x190>)
   176e4:	f044 0101 	orr.w	r1, r4, #1
   176e8:	f002 feff 	bl	1a4ea <log_0>
		return -ENODEV;
   176ec:	f06f 0012 	mvn.w	r0, #18
   176f0:	e79e      	b.n	17630 <hci_driver_open+0x58>
	sdc_rand_source_t rand_functions = {
   176f2:	4b1e      	ldr	r3, [pc, #120]	; (1776c <hci_driver_open+0x194>)
   176f4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   176f8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   176fc:	4628      	mov	r0, r5
   176fe:	f7ec fb19 	bl	3d34 <sdc_rand_source_register>
	if (err) {
   17702:	4601      	mov	r1, r0
   17704:	b138      	cbz	r0, 17716 <hci_driver_open+0x13e>
		BT_ERR("Failed to register rand source (%d)", err);
   17706:	481a      	ldr	r0, [pc, #104]	; (17770 <hci_driver_open+0x198>)
   17708:	f044 0201 	orr.w	r2, r4, #1
   1770c:	f002 fefa 	bl	1a504 <log_1>
		return -EINVAL;
   17710:	f06f 0015 	mvn.w	r0, #21
   17714:	e78c      	b.n	17630 <hci_driver_open+0x58>
	err = MULTITHREADING_LOCK_ACQUIRE();
   17716:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1771a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1771e:	f7ff fef7 	bl	17510 <multithreading_lock_acquire>
	if (!err) {
   17722:	4604      	mov	r4, r0
   17724:	b930      	cbnz	r0, 17734 <hci_driver_open+0x15c>
		err = sdc_enable(host_signal, sdc_mempool);
   17726:	4913      	ldr	r1, [pc, #76]	; (17774 <hci_driver_open+0x19c>)
   17728:	4813      	ldr	r0, [pc, #76]	; (17778 <hci_driver_open+0x1a0>)
   1772a:	f7ec f9bb 	bl	3aa4 <sdc_enable>
   1772e:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   17730:	f7ff fef6 	bl	17520 <multithreading_lock_release>
	if (err < 0) {
   17734:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   17738:	e77a      	b.n	17630 <hci_driver_open+0x58>
   1773a:	bf00      	nop
   1773c:	20004180 	.word	0x20004180
   17740:	00017799 	.word	0x00017799
   17744:	20001828 	.word	0x20001828
   17748:	0001f7c6 	.word	0x0001f7c6
   1774c:	0001d820 	.word	0x0001d820
   17750:	0001d788 	.word	0x0001d788
   17754:	0001f7cd 	.word	0x0001f7cd
   17758:	02031b1b 	.word	0x02031b1b
   1775c:	0001f7f4 	.word	0x0001f7f4
   17760:	0001f780 	.word	0x0001f780
   17764:	20002530 	.word	0x20002530
   17768:	0001f816 	.word	0x0001f816
   1776c:	0001d90c 	.word	0x0001d90c
   17770:	0001f834 	.word	0x0001f834
   17774:	200028cb 	.word	0x200028cb
   17778:	000178b5 	.word	0x000178b5

0001777c <rand_prio_low_vector_get_blocking>:
{
   1777c:	460a      	mov	r2, r1
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   1777e:	4905      	ldr	r1, [pc, #20]	; (17794 <rand_prio_low_vector_get_blocking+0x18>)
{
   17780:	b410      	push	{r4}
   17782:	4603      	mov	r3, r0
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   17784:	6808      	ldr	r0, [r1, #0]
	return api->get_entropy(dev, buffer, length);
   17786:	6881      	ldr	r1, [r0, #8]
   17788:	680c      	ldr	r4, [r1, #0]
   1778a:	4619      	mov	r1, r3
   1778c:	4623      	mov	r3, r4
}
   1778e:	bc10      	pop	{r4}
   17790:	4718      	bx	r3
   17792:	bf00      	nop
   17794:	20002530 	.word	0x20002530

00017798 <recv_thread>:
{
   17798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1779c:	4b3f      	ldr	r3, [pc, #252]	; (1789c <recv_thread+0x104>)
   1779e:	4e40      	ldr	r6, [pc, #256]	; (178a0 <recv_thread+0x108>)
	return z_impl_k_sem_take(sem, timeout);
   177a0:	f8df 8100 	ldr.w	r8, [pc, #256]	; 178a4 <recv_thread+0x10c>
		errcode = hci_internal_evt_get(p_hci_buffer);
   177a4:	4d40      	ldr	r5, [pc, #256]	; (178a8 <recv_thread+0x110>)
   177a6:	1af6      	subs	r6, r6, r3
	bool received_data = false;
   177a8:	2700      	movs	r7, #0
   177aa:	08f6      	lsrs	r6, r6, #3
	bool received_evt = false;
   177ac:	463c      	mov	r4, r7
		if (!received_evt && !received_data) {
   177ae:	b93c      	cbnz	r4, 177c0 <recv_thread+0x28>
   177b0:	b937      	cbnz	r7, 177c0 <recv_thread+0x28>
   177b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   177b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   177ba:	4640      	mov	r0, r8
   177bc:	f001 fa6e 	bl	18c9c <z_impl_k_sem_take>
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   177c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   177c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   177c8:	f7ff fea2 	bl	17510 <multithreading_lock_acquire>
	if (!errcode) {
   177cc:	b160      	cbz	r0, 177e8 <recv_thread+0x50>
		return false;
   177ce:	2400      	movs	r4, #0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   177d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   177d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   177d8:	f7ff fe9a 	bl	17510 <multithreading_lock_acquire>
	if (!errcode) {
   177dc:	2800      	cmp	r0, #0
   177de:	d03a      	beq.n	17856 <recv_thread+0xbe>
		return false;
   177e0:	2700      	movs	r7, #0
	z_impl_k_yield();
   177e2:	f001 fe91 	bl	19508 <z_impl_k_yield>
}
   177e6:	e7e2      	b.n	177ae <recv_thread+0x16>
		errcode = hci_internal_evt_get(p_hci_buffer);
   177e8:	482f      	ldr	r0, [pc, #188]	; (178a8 <recv_thread+0x110>)
   177ea:	f000 fb6b 	bl	17ec4 <hci_internal_evt_get>
   177ee:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   177f0:	f7ff fe96 	bl	17520 <multithreading_lock_release>
	if (errcode) {
   177f4:	2c00      	cmp	r4, #0
   177f6:	d1ea      	bne.n	177ce <recv_thread+0x36>
	switch (hdr->evt) {
   177f8:	7828      	ldrb	r0, [r5, #0]
   177fa:	283e      	cmp	r0, #62	; 0x3e
   177fc:	d007      	beq.n	1780e <recv_thread+0x76>
   177fe:	28ff      	cmp	r0, #255	; 0xff
   17800:	d01c      	beq.n	1783c <recv_thread+0xa4>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   17802:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   17806:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1780a:	2400      	movs	r4, #0
   1780c:	e007      	b.n	1781e <recv_thread+0x86>
		switch (me->subevent) {
   1780e:	78ab      	ldrb	r3, [r5, #2]
   17810:	2b02      	cmp	r3, #2
   17812:	d001      	beq.n	17818 <recv_thread+0x80>
   17814:	2b0d      	cmp	r3, #13
		switch (subevent) {
   17816:	d1f4      	bne.n	17802 <recv_thread+0x6a>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   17818:	2200      	movs	r2, #0
   1781a:	2300      	movs	r3, #0
   1781c:	2401      	movs	r4, #1
   1781e:	4621      	mov	r1, r4
   17820:	f7fa faf8 	bl	11e14 <bt_buf_get_evt>
	if (!evt_buf) {
   17824:	4607      	mov	r7, r0
   17826:	b960      	cbnz	r0, 17842 <recv_thread+0xaa>
		if (discardable) {
   17828:	2c00      	cmp	r4, #0
   1782a:	d1d1      	bne.n	177d0 <recv_thread+0x38>
		BT_ERR("No event buffer available");
   1782c:	01b1      	lsls	r1, r6, #6
   1782e:	481f      	ldr	r0, [pc, #124]	; (178ac <recv_thread+0x114>)
   17830:	f041 0101 	orr.w	r1, r1, #1
   17834:	f002 fe59 	bl	1a4ea <log_0>
	return true;
   17838:	2401      	movs	r4, #1
   1783a:	e7c9      	b.n	177d0 <recv_thread+0x38>
		switch (subevent) {
   1783c:	78ab      	ldrb	r3, [r5, #2]
   1783e:	2b80      	cmp	r3, #128	; 0x80
   17840:	e7e9      	b.n	17816 <recv_thread+0x7e>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   17842:	786a      	ldrb	r2, [r5, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   17844:	4629      	mov	r1, r5
   17846:	3202      	adds	r2, #2
   17848:	3008      	adds	r0, #8
   1784a:	f004 ff65 	bl	1c718 <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   1784e:	4638      	mov	r0, r7
   17850:	f7fb fb52 	bl	12ef8 <bt_recv>
   17854:	e7f0      	b.n	17838 <recv_thread+0xa0>
		errcode = sdc_hci_data_get(p_hci_buffer);
   17856:	4814      	ldr	r0, [pc, #80]	; (178a8 <recv_thread+0x110>)
   17858:	f7f4 fb5d 	bl	bf16 <sdc_hci_data_get>
   1785c:	4607      	mov	r7, r0
		MULTITHREADING_LOCK_RELEASE();
   1785e:	f7ff fe5f 	bl	17520 <multithreading_lock_release>
	if (errcode) {
   17862:	2f00      	cmp	r7, #0
   17864:	d1bc      	bne.n	177e0 <recv_thread+0x48>
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   17866:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1786a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1786e:	2003      	movs	r0, #3
   17870:	f7fa fa9a 	bl	11da8 <bt_buf_get_rx>
	if (!data_buf) {
   17874:	4607      	mov	r7, r0
   17876:	b938      	cbnz	r0, 17888 <recv_thread+0xf0>
		BT_ERR("No data buffer available");
   17878:	01b1      	lsls	r1, r6, #6
   1787a:	480d      	ldr	r0, [pc, #52]	; (178b0 <recv_thread+0x118>)
   1787c:	f041 0101 	orr.w	r1, r1, #1
   17880:	f002 fe33 	bl	1a4ea <log_0>
	return true;
   17884:	2701      	movs	r7, #1
   17886:	e7ac      	b.n	177e2 <recv_thread+0x4a>
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
   17888:	886a      	ldrh	r2, [r5, #2]
   1788a:	4629      	mov	r1, r5
   1788c:	3204      	adds	r2, #4
   1788e:	3008      	adds	r0, #8
   17890:	f004 ff42 	bl	1c718 <net_buf_simple_add_mem>
	bt_recv(data_buf);
   17894:	4638      	mov	r0, r7
   17896:	f7fb fb2f 	bl	12ef8 <bt_recv>
   1789a:	e7f3      	b.n	17884 <recv_thread+0xec>
   1789c:	0001d788 	.word	0x0001d788
   178a0:	0001d820 	.word	0x0001d820
   178a4:	200006ac 	.word	0x200006ac
   178a8:	20002885 	.word	0x20002885
   178ac:	0001f858 	.word	0x0001f858
   178b0:	0001f872 	.word	0x0001f872

000178b4 <host_signal>:
	z_impl_k_sem_give(sem);
   178b4:	4801      	ldr	r0, [pc, #4]	; (178bc <host_signal+0x8>)
   178b6:	f001 b9cb 	b.w	18c50 <z_impl_k_sem_give>
   178ba:	bf00      	nop
   178bc:	200006ac 	.word	0x200006ac

000178c0 <hci_driver_send>:
{
   178c0:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   178c2:	8983      	ldrh	r3, [r0, #12]
{
   178c4:	4605      	mov	r5, r0
	if (!buf->len) {
   178c6:	b383      	cbz	r3, 1792a <hci_driver_send+0x6a>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   178c8:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   178ca:	b1ab      	cbz	r3, 178f8 <hci_driver_send+0x38>
   178cc:	2b02      	cmp	r3, #2
   178ce:	d12c      	bne.n	1792a <hci_driver_send+0x6a>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   178d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   178d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   178d8:	f7ff fe1a 	bl	17510 <multithreading_lock_acquire>
	if (!errcode) {
   178dc:	4604      	mov	r4, r0
   178de:	b948      	cbnz	r0, 178f4 <hci_driver_send+0x34>
		errcode = sdc_hci_data_put(acl->data);
   178e0:	68a8      	ldr	r0, [r5, #8]
   178e2:	f7f4 fb25 	bl	bf30 <sdc_hci_data_put>
   178e6:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   178e8:	f7ff fe1a 	bl	17520 <multithreading_lock_release>
		if (errcode) {
   178ec:	b1c4      	cbz	r4, 17920 <hci_driver_send+0x60>
   178ee:	4810      	ldr	r0, [pc, #64]	; (17930 <hci_driver_send+0x70>)
   178f0:	f001 f9ae 	bl	18c50 <z_impl_k_sem_give>
}
   178f4:	4620      	mov	r0, r4
   178f6:	bd38      	pop	{r3, r4, r5, pc}
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   178f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   178fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17900:	f7ff fe06 	bl	17510 <multithreading_lock_acquire>
	if (!errcode) {
   17904:	4604      	mov	r4, r0
   17906:	2800      	cmp	r0, #0
   17908:	d1f4      	bne.n	178f4 <hci_driver_send+0x34>
		errcode = hci_internal_cmd_put(cmd->data);
   1790a:	68a8      	ldr	r0, [r5, #8]
   1790c:	f000 f812 	bl	17934 <hci_internal_cmd_put>
   17910:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   17912:	f7ff fe05 	bl	17520 <multithreading_lock_release>
	if (errcode) {
   17916:	2c00      	cmp	r4, #0
   17918:	d1ec      	bne.n	178f4 <hci_driver_send+0x34>
   1791a:	4805      	ldr	r0, [pc, #20]	; (17930 <hci_driver_send+0x70>)
   1791c:	f001 f998 	bl	18c50 <z_impl_k_sem_give>
		net_buf_unref(buf);
   17920:	4628      	mov	r0, r5
   17922:	f7ff f8f1 	bl	16b08 <net_buf_unref>
   17926:	2400      	movs	r4, #0
   17928:	e7e4      	b.n	178f4 <hci_driver_send+0x34>
	switch (type) {
   1792a:	f06f 0415 	mvn.w	r4, #21
   1792e:	e7e1      	b.n	178f4 <hci_driver_send+0x34>
   17930:	200006ac 	.word	0x200006ac

00017934 <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   17934:	b538      	push	{r3, r4, r5, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   17936:	4c87      	ldr	r4, [pc, #540]	; (17b54 <hci_internal_cmd_put+0x220>)
   17938:	7823      	ldrb	r3, [r4, #0]
   1793a:	2b00      	cmp	r3, #0
   1793c:	f040 82bd 	bne.w	17eba <hci_internal_cmd_put+0x586>
	return ((uint16_t)src[1] << 8) | src[0];
   17940:	8805      	ldrh	r5, [r0, #0]
	switch (BT_OGF(opcode)) {
   17942:	f5b5 5f10 	cmp.w	r5, #9216	; 0x2400
   17946:	b22b      	sxth	r3, r5
   17948:	ea4f 2295 	mov.w	r2, r5, lsr #10
   1794c:	d20d      	bcs.n	1796a <hci_internal_cmd_put+0x36>
   1794e:	b17a      	cbz	r2, 17970 <hci_internal_cmd_put+0x3c>
   17950:	3a01      	subs	r2, #1
   17952:	2a07      	cmp	r2, #7
   17954:	d80c      	bhi.n	17970 <hci_internal_cmd_put+0x3c>
   17956:	e8df f012 	tbh	[pc, r2, lsl #1]
   1795a:	000d      	.short	0x000d
   1795c:	0029000b 	.word	0x0029000b
   17960:	000b005d 	.word	0x000b005d
   17964:	000b000b 	.word	0x000b000b
   17968:	0101      	.short	0x0101
   1796a:	2a3f      	cmp	r2, #63	; 0x3f
   1796c:	f000 822f 	beq.w	17dce <hci_internal_cmd_put+0x49a>
	switch (opcode)	{
   17970:	2001      	movs	r0, #1
   17972:	e00e      	b.n	17992 <hci_internal_cmd_put+0x5e>
	switch (opcode)	{
   17974:	f240 4206 	movw	r2, #1030	; 0x406
   17978:	4293      	cmp	r3, r2
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1797a:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   1797e:	d006      	beq.n	1798e <hci_internal_cmd_put+0x5a>
   17980:	f240 421d 	movw	r2, #1053	; 0x41d
   17984:	4293      	cmp	r3, r2
   17986:	d1f3      	bne.n	17970 <hci_internal_cmd_put+0x3c>
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   17988:	f7f4 fbf6 	bl	c178 <sdc_hci_cmd_lc_read_remote_version_information>
   1798c:	e001      	b.n	17992 <hci_internal_cmd_put+0x5e>
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   1798e:	f7f4 fbf1 	bl	c174 <sdc_hci_cmd_lc_disconnect>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   17992:	230f      	movs	r3, #15
   17994:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   17996:	2304      	movs	r3, #4
   17998:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   1799a:	2301      	movs	r3, #1
	evt_data->status = status_code;
   1799c:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   1799e:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   179a0:	f8a4 5005 	strh.w	r5, [r4, #5]
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   179a4:	2301      	movs	r3, #1
   179a6:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   179a8:	2000      	movs	r0, #0
}
   179aa:	bd38      	pop	{r3, r4, r5, pc}
	switch (opcode)	{
   179ac:	f640 4263 	movw	r2, #3171	; 0xc63
   179b0:	4293      	cmp	r3, r2
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   179b2:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   179b6:	d025      	beq.n	17a04 <hci_internal_cmd_put+0xd0>
   179b8:	dc0f      	bgt.n	179da <hci_internal_cmd_put+0xa6>
   179ba:	f640 4203 	movw	r2, #3075	; 0xc03
   179be:	4293      	cmp	r3, r2
   179c0:	d018      	beq.n	179f4 <hci_internal_cmd_put+0xc0>
   179c2:	f640 422d 	movw	r2, #3117	; 0xc2d
   179c6:	4293      	cmp	r3, r2
   179c8:	d017      	beq.n	179fa <hci_internal_cmd_put+0xc6>
   179ca:	f640 4201 	movw	r2, #3073	; 0xc01
   179ce:	4293      	cmp	r3, r2
   179d0:	d1ce      	bne.n	17970 <hci_internal_cmd_put+0x3c>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   179d2:	f7f4 fac9 	bl	bf68 <sdc_hci_cmd_cb_set_event_mask>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   179d6:	2304      	movs	r3, #4
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   179d8:	e0b8      	b.n	17b4c <hci_internal_cmd_put+0x218>
	switch (opcode)	{
   179da:	f640 427b 	movw	r2, #3195	; 0xc7b
   179de:	4293      	cmp	r3, r2
   179e0:	d013      	beq.n	17a0a <hci_internal_cmd_put+0xd6>
   179e2:	f640 427c 	movw	r2, #3196	; 0xc7c
   179e6:	4293      	cmp	r3, r2
   179e8:	d1c2      	bne.n	17970 <hci_internal_cmd_put+0x3c>
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   179ea:	495b      	ldr	r1, [pc, #364]	; (17b58 <hci_internal_cmd_put+0x224>)
   179ec:	f7f4 fac6 	bl	bf7c <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   179f0:	2306      	movs	r3, #6
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   179f2:	e0ab      	b.n	17b4c <hci_internal_cmd_put+0x218>
		return sdc_hci_cmd_cb_reset();
   179f4:	f7ec fa94 	bl	3f20 <sdc_hci_cmd_cb_reset>
   179f8:	e7ed      	b.n	179d6 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   179fa:	4957      	ldr	r1, [pc, #348]	; (17b58 <hci_internal_cmd_put+0x224>)
   179fc:	f7f4 fab2 	bl	bf64 <sdc_hci_cmd_cb_read_transmit_power_level>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   17a00:	2307      	movs	r3, #7
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   17a02:	e0a3      	b.n	17b4c <hci_internal_cmd_put+0x218>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   17a04:	f7f4 fab5 	bl	bf72 <sdc_hci_cmd_cb_set_event_mask_page_2>
   17a08:	e7e5      	b.n	179d6 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   17a0a:	4953      	ldr	r1, [pc, #332]	; (17b58 <hci_internal_cmd_put+0x224>)
   17a0c:	f7f4 faa8 	bl	bf60 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   17a10:	2308      	movs	r3, #8
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   17a12:	e09b      	b.n	17b4c <hci_internal_cmd_put+0x218>
	switch (opcode)	{
   17a14:	f5a5 5380 	sub.w	r3, r5, #4096	; 0x1000
   17a18:	3b01      	subs	r3, #1
   17a1a:	2b08      	cmp	r3, #8
   17a1c:	d8a8      	bhi.n	17970 <hci_internal_cmd_put+0x3c>
   17a1e:	a201      	add	r2, pc, #4	; (adr r2, 17a24 <hci_internal_cmd_put+0xf0>)
   17a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   17a24:	00017a49 	.word	0x00017a49
   17a28:	00017a53 	.word	0x00017a53
   17a2c:	00017b2d 	.word	0x00017b2d
   17a30:	00017971 	.word	0x00017971
   17a34:	00017971 	.word	0x00017971
   17a38:	00017971 	.word	0x00017971
   17a3c:	00017971 	.word	0x00017971
   17a40:	00017971 	.word	0x00017971
   17a44:	00017b45 	.word	0x00017b45
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   17a48:	4843      	ldr	r0, [pc, #268]	; (17b58 <hci_internal_cmd_put+0x224>)
   17a4a:	f7f4 fb48 	bl	c0de <sdc_hci_cmd_ip_read_local_version_information>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   17a4e:	230c      	movs	r3, #12
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   17a50:	e07c      	b.n	17b4c <hci_internal_cmd_put+0x218>
	memset(cmds, 0, sizeof(*cmds));
   17a52:	4841      	ldr	r0, [pc, #260]	; (17b58 <hci_internal_cmd_put+0x224>)
   17a54:	222e      	movs	r2, #46	; 0x2e
   17a56:	2100      	movs	r1, #0
   17a58:	f003 fbb9 	bl	1b1ce <memset>
	cmds->hci_disconnect = 1;
   17a5c:	79e3      	ldrb	r3, [r4, #7]
   17a5e:	f043 0320 	orr.w	r3, r3, #32
   17a62:	71e3      	strb	r3, [r4, #7]
	cmds->hci_read_remote_version_information = 1;
   17a64:	7a63      	ldrb	r3, [r4, #9]
   17a66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   17a6a:	7263      	strb	r3, [r4, #9]
	cmds->hci_set_event_mask = 1;
   17a6c:	7b23      	ldrb	r3, [r4, #12]
   17a6e:	f063 033f 	orn	r3, r3, #63	; 0x3f
   17a72:	7323      	strb	r3, [r4, #12]
	cmds->hci_read_transmit_power_level = 1;
   17a74:	7c63      	ldrb	r3, [r4, #17]
   17a76:	f043 0304 	orr.w	r3, r3, #4
   17a7a:	7463      	strb	r3, [r4, #17]
	cmds->hci_read_local_version_information = 1;
   17a7c:	7d63      	ldrb	r3, [r4, #21]
   17a7e:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   17a82:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   17a86:	7563      	strb	r3, [r4, #21]
	cmds->hci_read_bd_addr = 1;
   17a88:	7da3      	ldrb	r3, [r4, #22]
   17a8a:	f043 0302 	orr.w	r3, r3, #2
   17a8e:	75a3      	strb	r3, [r4, #22]
	cmds->hci_set_event_mask_page_2 = 1;
   17a90:	7f63      	ldrb	r3, [r4, #29]
   17a92:	f043 0304 	orr.w	r3, r3, #4
   17a96:	7763      	strb	r3, [r4, #29]
	cmds->hci_le_set_event_mask = 1;
   17a98:	f894 3020 	ldrb.w	r3, [r4, #32]
   17a9c:	f063 0308 	orn	r3, r3, #8
   17aa0:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_scan_response_data = 1;
   17aa4:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   17aa8:	f063 033c 	orn	r3, r3, #60	; 0x3c
   17aac:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_add_device_to_white_list = 1;
   17ab0:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   17ab4:	f063 030c 	orn	r3, r3, #12
   17ab8:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_enable_encryption = 1;
   17abc:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   17ac0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   17ac4:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
   17ac8:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_read_authenticated_payload_timeout = 1;
   17acc:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   17ad0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   17ad4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   17ad8:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	cmds->hci_le_set_data_length = 1;
   17adc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   17ae0:	f063 033f 	orn	r3, r3, #63	; 0x3f
   17ae4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	cmds->hci_le_write_suggested_default_data_length = 1;
   17ae8:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   17aec:	f023 0379 	bic.w	r3, r3, #121	; 0x79
   17af0:	f043 0379 	orr.w	r3, r3, #121	; 0x79
   17af4:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	cmds->hci_le_set_address_resolution_enable = 1;
   17af8:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   17afc:	f063 0301 	orn	r3, r3, #1
   17b00:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
   17b04:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   17b08:	f043 0301 	orr.w	r3, r3, #1
   17b0c:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
   17b10:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   17b14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   17b18:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	cmds->hci_le_set_privacy_mode = 1;
   17b1c:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   17b20:	f043 0304 	orr.w	r3, r3, #4
   17b24:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
		return 0;
   17b28:	2344      	movs	r3, #68	; 0x44
   17b2a:	e0d6      	b.n	17cda <hci_internal_cmd_put+0x3a6>
	memset(features, 0, sizeof(*features));
   17b2c:	480a      	ldr	r0, [pc, #40]	; (17b58 <hci_internal_cmd_put+0x224>)
   17b2e:	2208      	movs	r2, #8
   17b30:	2100      	movs	r1, #0
   17b32:	f003 fb4c 	bl	1b1ce <memset>
	features->bdedr_not_supported = 1;
   17b36:	7ae3      	ldrb	r3, [r4, #11]
   17b38:	f023 0360 	bic.w	r3, r3, #96	; 0x60
   17b3c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
	*(buf + 4) = states2;
   17b40:	72e3      	strb	r3, [r4, #11]
   17b42:	e0c9      	b.n	17cd8 <hci_internal_cmd_put+0x3a4>
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   17b44:	4804      	ldr	r0, [pc, #16]	; (17b58 <hci_internal_cmd_put+0x224>)
   17b46:	f7f4 fac8 	bl	c0da <sdc_hci_cmd_ip_read_bd_addr>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   17b4a:	230a      	movs	r3, #10
	if (!command_generates_command_complete_event(opcode) ||
   17b4c:	2801      	cmp	r0, #1
   17b4e:	f040 80c5 	bne.w	17cdc <hci_internal_cmd_put+0x3a8>
   17b52:	e71e      	b.n	17992 <hci_internal_cmd_put+0x5e>
   17b54:	20002fb1 	.word	0x20002fb1
   17b58:	20002fb8 	.word	0x20002fb8
	switch (opcode)	{
   17b5c:	f5a5 5300 	sub.w	r3, r5, #8192	; 0x2000
   17b60:	3b01      	subs	r3, #1
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   17b62:	3003      	adds	r0, #3
	switch (opcode)	{
   17b64:	2b4d      	cmp	r3, #77	; 0x4d
   17b66:	f63f af03 	bhi.w	17970 <hci_internal_cmd_put+0x3c>
   17b6a:	a201      	add	r2, pc, #4	; (adr r2, 17b70 <hci_internal_cmd_put+0x23c>)
   17b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   17b70:	00017ca9 	.word	0x00017ca9
   17b74:	00017caf 	.word	0x00017caf
   17b78:	00017cb7 	.word	0x00017cb7
   17b7c:	00017971 	.word	0x00017971
   17b80:	00017ced 	.word	0x00017ced
   17b84:	00017cf3 	.word	0x00017cf3
   17b88:	00017cf9 	.word	0x00017cf9
   17b8c:	00017d03 	.word	0x00017d03
   17b90:	00017d09 	.word	0x00017d09
   17b94:	00017d0f 	.word	0x00017d0f
   17b98:	00017971 	.word	0x00017971
   17b9c:	00017971 	.word	0x00017971
   17ba0:	00017971 	.word	0x00017971
   17ba4:	00017971 	.word	0x00017971
   17ba8:	00017d15 	.word	0x00017d15
   17bac:	00017d1d 	.word	0x00017d1d
   17bb0:	00017d23 	.word	0x00017d23
   17bb4:	00017d29 	.word	0x00017d29
   17bb8:	00017971 	.word	0x00017971
   17bbc:	00017971 	.word	0x00017971
   17bc0:	00017d2f 	.word	0x00017d2f
   17bc4:	00017d39 	.word	0x00017d39
   17bc8:	00017d3f 	.word	0x00017d3f
   17bcc:	00017d49 	.word	0x00017d49
   17bd0:	00017971 	.word	0x00017971
   17bd4:	00017d51 	.word	0x00017d51
   17bd8:	00017d59 	.word	0x00017d59
   17bdc:	00017d61 	.word	0x00017d61
   17be0:	00017971 	.word	0x00017971
   17be4:	00017971 	.word	0x00017971
   17be8:	00017971 	.word	0x00017971
   17bec:	00017971 	.word	0x00017971
   17bf0:	00017971 	.word	0x00017971
   17bf4:	00017d69 	.word	0x00017d69
   17bf8:	00017d71 	.word	0x00017d71
   17bfc:	00017d79 	.word	0x00017d79
   17c00:	00017971 	.word	0x00017971
   17c04:	00017971 	.word	0x00017971
   17c08:	00017d7f 	.word	0x00017d7f
   17c0c:	00017d85 	.word	0x00017d85
   17c10:	00017d8b 	.word	0x00017d8b
   17c14:	00017d91 	.word	0x00017d91
   17c18:	00017971 	.word	0x00017971
   17c1c:	00017971 	.word	0x00017971
   17c20:	00017d99 	.word	0x00017d99
   17c24:	00017d9f 	.word	0x00017d9f
   17c28:	00017da5 	.word	0x00017da5
   17c2c:	00017dad 	.word	0x00017dad
   17c30:	00017db5 	.word	0x00017db5
   17c34:	00017dbb 	.word	0x00017dbb
   17c38:	00017971 	.word	0x00017971
   17c3c:	00017971 	.word	0x00017971
   17c40:	00017971 	.word	0x00017971
   17c44:	00017971 	.word	0x00017971
   17c48:	00017971 	.word	0x00017971
   17c4c:	00017971 	.word	0x00017971
   17c50:	00017971 	.word	0x00017971
   17c54:	00017971 	.word	0x00017971
   17c58:	00017971 	.word	0x00017971
   17c5c:	00017971 	.word	0x00017971
   17c60:	00017971 	.word	0x00017971
   17c64:	00017971 	.word	0x00017971
   17c68:	00017971 	.word	0x00017971
   17c6c:	00017971 	.word	0x00017971
   17c70:	00017971 	.word	0x00017971
   17c74:	00017971 	.word	0x00017971
   17c78:	00017971 	.word	0x00017971
   17c7c:	00017971 	.word	0x00017971
   17c80:	00017971 	.word	0x00017971
   17c84:	00017971 	.word	0x00017971
   17c88:	00017971 	.word	0x00017971
   17c8c:	00017971 	.word	0x00017971
   17c90:	00017971 	.word	0x00017971
   17c94:	00017971 	.word	0x00017971
   17c98:	00017dc1 	.word	0x00017dc1
   17c9c:	00017971 	.word	0x00017971
   17ca0:	00017971 	.word	0x00017971
   17ca4:	00017dc9 	.word	0x00017dc9
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   17ca8:	f7f4 fa53 	bl	c152 <sdc_hci_cmd_le_set_event_mask>
   17cac:	e693      	b.n	179d6 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   17cae:	4884      	ldr	r0, [pc, #528]	; (17ec0 <hci_internal_cmd_put+0x58c>)
   17cb0:	f7f4 fa2d 	bl	c10e <sdc_hci_cmd_le_read_buffer_size>
   17cb4:	e6a4      	b.n	17a00 <hci_internal_cmd_put+0xcc>
	memset(features, 0, sizeof(*features));
   17cb6:	4882      	ldr	r0, [pc, #520]	; (17ec0 <hci_internal_cmd_put+0x58c>)
   17cb8:	2205      	movs	r2, #5
   17cba:	2100      	movs	r1, #0
   17cbc:	f003 fa87 	bl	1b1ce <memset>
	features->le_encryption = 1;
   17cc0:	79e3      	ldrb	r3, [r4, #7]
   17cc2:	f023 0375 	bic.w	r3, r3, #117	; 0x75
   17cc6:	f043 0375 	orr.w	r3, r3, #117	; 0x75
   17cca:	71e3      	strb	r3, [r4, #7]
	features->le_2m_phy = 1;
   17ccc:	7a23      	ldrb	r3, [r4, #8]
   17cce:	f023 0341 	bic.w	r3, r3, #65	; 0x41
   17cd2:	f043 0341 	orr.w	r3, r3, #65	; 0x41
   17cd6:	7223      	strb	r3, [r4, #8]
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   17cd8:	230c      	movs	r3, #12
		return 0;
   17cda:	2000      	movs	r0, #0
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   17cdc:	220e      	movs	r2, #14
	evt_hdr->len = param_length;
   17cde:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   17ce0:	2301      	movs	r3, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   17ce2:	7062      	strb	r2, [r4, #1]
	evt_data->ncmd = 1;
   17ce4:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   17ce6:	80a5      	strh	r5, [r4, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   17ce8:	71a0      	strb	r0, [r4, #6]
}
   17cea:	e65b      	b.n	179a4 <hci_internal_cmd_put+0x70>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   17cec:	f7f4 fa3a 	bl	c164 <sdc_hci_cmd_le_set_random_address>
   17cf0:	e671      	b.n	179d6 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   17cf2:	f7f4 fa28 	bl	c146 <sdc_hci_cmd_le_set_adv_params>
   17cf6:	e66e      	b.n	179d6 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   17cf8:	4871      	ldr	r0, [pc, #452]	; (17ec0 <hci_internal_cmd_put+0x58c>)
   17cfa:	f7f4 fa06 	bl	c10a <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   17cfe:	2305      	movs	r3, #5
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   17d00:	e724      	b.n	17b4c <hci_internal_cmd_put+0x218>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   17d02:	f7f4 fa1c 	bl	c13e <sdc_hci_cmd_le_set_adv_data>
   17d06:	e666      	b.n	179d6 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   17d08:	f7f4 fa30 	bl	c16c <sdc_hci_cmd_le_set_scan_response_data>
   17d0c:	e663      	b.n	179d6 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   17d0e:	f7f4 fa18 	bl	c142 <sdc_hci_cmd_le_set_adv_enable>
   17d12:	e660      	b.n	179d6 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_read_white_list_size((void *)event_out_params);
   17d14:	486a      	ldr	r0, [pc, #424]	; (17ec0 <hci_internal_cmd_put+0x58c>)
   17d16:	f7f4 fa0a 	bl	c12e <sdc_hci_cmd_le_read_white_list_size>
   17d1a:	e7f0      	b.n	17cfe <hci_internal_cmd_put+0x3ca>
		return sdc_hci_cmd_le_clear_white_list();
   17d1c:	f7f4 f9e7 	bl	c0ee <sdc_hci_cmd_le_clear_white_list>
   17d20:	e659      	b.n	179d6 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_add_device_to_white_list((void *)cmd_params);
   17d22:	f7f4 f9e0 	bl	c0e6 <sdc_hci_cmd_le_add_device_to_white_list>
   17d26:	e656      	b.n	179d6 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_remove_device_from_white_list((void *)cmd_params);
   17d28:	f7f4 fa05 	bl	c136 <sdc_hci_cmd_le_remove_device_from_white_list>
   17d2c:	e653      	b.n	179d6 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   17d2e:	4964      	ldr	r1, [pc, #400]	; (17ec0 <hci_internal_cmd_put+0x58c>)
   17d30:	f7f4 f9ef 	bl	c112 <sdc_hci_cmd_le_read_channel_map>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   17d34:	230b      	movs	r3, #11
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   17d36:	e709      	b.n	17b4c <hci_internal_cmd_put+0x218>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   17d38:	f7f4 f9f1 	bl	c11e <sdc_hci_cmd_le_read_remote_features>
   17d3c:	e629      	b.n	17992 <hci_internal_cmd_put+0x5e>
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   17d3e:	4960      	ldr	r1, [pc, #384]	; (17ec0 <hci_internal_cmd_put+0x58c>)
   17d40:	f7f4 f9d7 	bl	c0f2 <sdc_hci_cmd_le_encrypt>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   17d44:	2314      	movs	r3, #20
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   17d46:	e701      	b.n	17b4c <hci_internal_cmd_put+0x218>
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   17d48:	485d      	ldr	r0, [pc, #372]	; (17ec0 <hci_internal_cmd_put+0x58c>)
   17d4a:	f7f4 f9dc 	bl	c106 <sdc_hci_cmd_le_rand>
   17d4e:	e67e      	b.n	17a4e <hci_internal_cmd_put+0x11a>
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   17d50:	495b      	ldr	r1, [pc, #364]	; (17ec0 <hci_internal_cmd_put+0x58c>)
   17d52:	f7f4 f9d4 	bl	c0fe <sdc_hci_cmd_le_long_term_key_request_reply>
   17d56:	e64b      	b.n	179f0 <hci_internal_cmd_put+0xbc>
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   17d58:	4959      	ldr	r1, [pc, #356]	; (17ec0 <hci_internal_cmd_put+0x58c>)
   17d5a:	f7f4 f9cc 	bl	c0f6 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
   17d5e:	e647      	b.n	179f0 <hci_internal_cmd_put+0xbc>
	*buf = states1;
   17d60:	238f      	movs	r3, #143	; 0x8f
   17d62:	71e3      	strb	r3, [r4, #7]
	*(buf + 4) = states2;
   17d64:	23c0      	movs	r3, #192	; 0xc0
   17d66:	e6eb      	b.n	17b40 <hci_internal_cmd_put+0x20c>
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   17d68:	4955      	ldr	r1, [pc, #340]	; (17ec0 <hci_internal_cmd_put+0x58c>)
   17d6a:	f7f4 f9ee 	bl	c14a <sdc_hci_cmd_le_set_data_length>
   17d6e:	e63f      	b.n	179f0 <hci_internal_cmd_put+0xbc>
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   17d70:	4853      	ldr	r0, [pc, #332]	; (17ec0 <hci_internal_cmd_put+0x58c>)
   17d72:	f7f4 f9d8 	bl	c126 <sdc_hci_cmd_le_read_suggested_default_data_length>
   17d76:	e64b      	b.n	17a10 <hci_internal_cmd_put+0xdc>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   17d78:	f7f4 f9fa 	bl	c170 <sdc_hci_cmd_le_write_suggested_default_data_length>
   17d7c:	e62b      	b.n	179d6 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_add_device_to_resolving_list((void *)cmd_params);
   17d7e:	f7f4 f9b0 	bl	c0e2 <sdc_hci_cmd_le_add_device_to_resolving_list>
   17d82:	e628      	b.n	179d6 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_remove_device_from_resolving_list((void *)cmd_params);
   17d84:	f7f4 f9d5 	bl	c132 <sdc_hci_cmd_le_remove_device_from_resolving_list>
   17d88:	e625      	b.n	179d6 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_clear_resolving_list();
   17d8a:	f7f4 f9ae 	bl	c0ea <sdc_hci_cmd_le_clear_resolving_list>
   17d8e:	e622      	b.n	179d6 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   17d90:	484b      	ldr	r0, [pc, #300]	; (17ec0 <hci_internal_cmd_put+0x58c>)
   17d92:	f7f4 f9c6 	bl	c122 <sdc_hci_cmd_le_read_resolving_list_size>
   17d96:	e7b2      	b.n	17cfe <hci_internal_cmd_put+0x3ca>
		return sdc_hci_cmd_le_set_address_resolution_enable((void *)cmd_params);
   17d98:	f7f4 f9cf 	bl	c13a <sdc_hci_cmd_le_set_address_resolution_enable>
   17d9c:	e61b      	b.n	179d6 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_set_resolvable_private_address_timeout((void *)cmd_params);
   17d9e:	f7f4 f9e3 	bl	c168 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>
   17da2:	e618      	b.n	179d6 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   17da4:	4846      	ldr	r0, [pc, #280]	; (17ec0 <hci_internal_cmd_put+0x58c>)
   17da6:	f7f4 f9b6 	bl	c116 <sdc_hci_cmd_le_read_max_data_length>
   17daa:	e650      	b.n	17a4e <hci_internal_cmd_put+0x11a>
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   17dac:	4944      	ldr	r1, [pc, #272]	; (17ec0 <hci_internal_cmd_put+0x58c>)
   17dae:	f7f4 f9b4 	bl	c11a <sdc_hci_cmd_le_read_phy>
   17db2:	e62d      	b.n	17a10 <hci_internal_cmd_put+0xdc>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   17db4:	f7f4 f9cb 	bl	c14e <sdc_hci_cmd_le_set_default_phy>
   17db8:	e60d      	b.n	179d6 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   17dba:	f7f4 f9cf 	bl	c15c <sdc_hci_cmd_le_set_phy>
   17dbe:	e5e8      	b.n	17992 <hci_internal_cmd_put+0x5e>
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   17dc0:	483f      	ldr	r0, [pc, #252]	; (17ec0 <hci_internal_cmd_put+0x58c>)
   17dc2:	f7f4 f9b2 	bl	c12a <sdc_hci_cmd_le_read_transmit_power>
   17dc6:	e613      	b.n	179f0 <hci_internal_cmd_put+0xbc>
		return sdc_hci_cmd_le_set_privacy_mode((void *)cmd_params);
   17dc8:	f7f4 f9ca 	bl	c160 <sdc_hci_cmd_le_set_privacy_mode>
   17dcc:	e603      	b.n	179d6 <hci_internal_cmd_put+0xa2>
	switch (opcode)	{
   17dce:	f64f 430a 	movw	r3, #64522	; 0xfc0a
   17dd2:	429d      	cmp	r5, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   17dd4:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   17dd8:	d820      	bhi.n	17e1c <hci_internal_cmd_put+0x4e8>
   17dda:	f5b5 4f7c 	cmp.w	r5, #64512	; 0xfc00
   17dde:	f43f adc7 	beq.w	17970 <hci_internal_cmd_put+0x3c>
   17de2:	f5a5 437c 	sub.w	r3, r5, #64512	; 0xfc00
   17de6:	3b01      	subs	r3, #1
   17de8:	2b09      	cmp	r3, #9
   17dea:	f63f adc1 	bhi.w	17970 <hci_internal_cmd_put+0x3c>
   17dee:	a201      	add	r2, pc, #4	; (adr r2, 17df4 <hci_internal_cmd_put+0x4c0>)
   17df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   17df4:	00017e3d 	.word	0x00017e3d
   17df8:	00017e47 	.word	0x00017e47
   17dfc:	00017971 	.word	0x00017971
   17e00:	00017971 	.word	0x00017971
   17e04:	00017971 	.word	0x00017971
   17e08:	00017e7f 	.word	0x00017e7f
   17e0c:	00017971 	.word	0x00017971
   17e10:	00017971 	.word	0x00017971
   17e14:	00017e6b 	.word	0x00017e6b
   17e18:	00017e75 	.word	0x00017e75
   17e1c:	f505 7340 	add.w	r3, r5, #768	; 0x300
   17e20:	b29b      	uxth	r3, r3
   17e22:	2b05      	cmp	r3, #5
   17e24:	f63f ada4 	bhi.w	17970 <hci_internal_cmd_put+0x3c>
   17e28:	f5a5 437d 	sub.w	r3, r5, #64768	; 0xfd00
   17e2c:	2b05      	cmp	r3, #5
   17e2e:	f63f ad9f 	bhi.w	17970 <hci_internal_cmd_put+0x3c>
   17e32:	e8df f003 	tbb	[pc, r3]
   17e36:	3327      	.short	0x3327
   17e38:	3f3c3936 	.word	0x3f3c3936
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   17e3c:	4820      	ldr	r0, [pc, #128]	; (17ec0 <hci_internal_cmd_put+0x58c>)
   17e3e:	f7ec f883 	bl	3f48 <sdc_hci_cmd_vs_zephyr_read_version_info>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   17e42:	2310      	movs	r3, #16
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   17e44:	e682      	b.n	17b4c <hci_internal_cmd_put+0x218>
	memset(cmds, 0, sizeof(*cmds));
   17e46:	481e      	ldr	r0, [pc, #120]	; (17ec0 <hci_internal_cmd_put+0x58c>)
   17e48:	2202      	movs	r2, #2
   17e4a:	2100      	movs	r1, #0
   17e4c:	f003 f9bf 	bl	1b1ce <memset>
	cmds->read_version_info = 1;
   17e50:	79e3      	ldrb	r3, [r4, #7]
   17e52:	f023 0323 	bic.w	r3, r3, #35	; 0x23
   17e56:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   17e5a:	71e3      	strb	r3, [r4, #7]
	cmds->read_static_addresses = 1;
   17e5c:	7a23      	ldrb	r3, [r4, #8]
   17e5e:	f023 0307 	bic.w	r3, r3, #7
   17e62:	f043 0307 	orr.w	r3, r3, #7
   17e66:	7223      	strb	r3, [r4, #8]
}
   17e68:	e65e      	b.n	17b28 <hci_internal_cmd_put+0x1f4>
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   17e6a:	4815      	ldr	r0, [pc, #84]	; (17ec0 <hci_internal_cmd_put+0x58c>)
   17e6c:	f7f4 f8e8 	bl	c040 <sdc_hci_cmd_vs_zephyr_read_static_addresses>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   17e70:	231b      	movs	r3, #27
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   17e72:	e66b      	b.n	17b4c <hci_internal_cmd_put+0x218>
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   17e74:	4812      	ldr	r0, [pc, #72]	; (17ec0 <hci_internal_cmd_put+0x58c>)
   17e76:	f7f4 f896 	bl	bfa6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
		*param_length_out +=
   17e7a:	2324      	movs	r3, #36	; 0x24
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   17e7c:	e666      	b.n	17b4c <hci_internal_cmd_put+0x218>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   17e7e:	f7f4 f92a 	bl	c0d6 <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   17e82:	e5a8      	b.n	179d6 <hci_internal_cmd_put+0xa2>
	memset(cmds, 0, sizeof(*cmds));
   17e84:	480e      	ldr	r0, [pc, #56]	; (17ec0 <hci_internal_cmd_put+0x58c>)
   17e86:	2201      	movs	r2, #1
   17e88:	2100      	movs	r1, #0
   17e8a:	f003 f9a0 	bl	1b1ce <memset>
	cmds->read_supported_vs_commands = 1;
   17e8e:	79e3      	ldrb	r3, [r4, #7]
   17e90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   17e94:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
   17e98:	71e3      	strb	r3, [r4, #7]
}
   17e9a:	e645      	b.n	17b28 <hci_internal_cmd_put+0x1f4>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   17e9c:	f7f4 f87c 	bl	bf98 <sdc_hci_cmd_vs_llpm_mode_set>
   17ea0:	e599      	b.n	179d6 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   17ea2:	f7f4 f875 	bl	bf90 <sdc_hci_cmd_vs_conn_update>
   17ea6:	e596      	b.n	179d6 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   17ea8:	f7f4 f86a 	bl	bf80 <sdc_hci_cmd_vs_conn_event_extend>
   17eac:	e593      	b.n	179d6 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   17eae:	f7f4 f875 	bl	bf9c <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   17eb2:	e590      	b.n	179d6 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   17eb4:	f7f4 f86e 	bl	bf94 <sdc_hci_cmd_vs_event_length_set>
   17eb8:	e58d      	b.n	179d6 <hci_internal_cmd_put+0xa2>
		return -NRF_EPERM;
   17eba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17ebe:	e574      	b.n	179aa <hci_internal_cmd_put+0x76>
   17ec0:	20002fb8 	.word	0x20002fb8

00017ec4 <hci_internal_evt_get>:

int hci_internal_evt_get(uint8_t *evt_out)
{
   17ec4:	b510      	push	{r4, lr}
	if (cmd_complete_or_status.occurred) {
   17ec6:	4c07      	ldr	r4, [pc, #28]	; (17ee4 <hci_internal_evt_get+0x20>)
   17ec8:	7823      	ldrb	r3, [r4, #0]
   17eca:	b91b      	cbnz	r3, 17ed4 <hci_internal_evt_get+0x10>

		return 0;
	}

	return sdc_hci_evt_get(evt_out);
}
   17ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return sdc_hci_evt_get(evt_out);
   17ed0:	f7f4 b839 	b.w	bf46 <sdc_hci_evt_get>
		       evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   17ed4:	78a2      	ldrb	r2, [r4, #2]
		memcpy(evt_out,
   17ed6:	1c61      	adds	r1, r4, #1
   17ed8:	3202      	adds	r2, #2
   17eda:	f003 f96d 	bl	1b1b8 <memcpy>
		cmd_complete_or_status.occurred = false;
   17ede:	2000      	movs	r0, #0
   17ee0:	7020      	strb	r0, [r4, #0]
}
   17ee2:	bd10      	pop	{r4, pc}
   17ee4:	20002fb1 	.word	0x20002fb1

00017ee8 <bt_rand>:
#include <common/log.h>

#define BT_ECB_BLOCK_SIZE 16

int bt_rand(void *buf, size_t len)
{
   17ee8:	b570      	push	{r4, r5, r6, lr}
	static const struct device *dev;

	if (unlikely(!dev)) {
   17eea:	4c0b      	ldr	r4, [pc, #44]	; (17f18 <bt_rand+0x30>)
   17eec:	6823      	ldr	r3, [r4, #0]
{
   17eee:	4605      	mov	r5, r0
   17ef0:	460e      	mov	r6, r1
	if (unlikely(!dev)) {
   17ef2:	b13b      	cbz	r3, 17f04 <bt_rand+0x1c>
		if (!dev) {
			return -ENODEV;
		}
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   17ef4:	6820      	ldr	r0, [r4, #0]
   17ef6:	6883      	ldr	r3, [r0, #8]
   17ef8:	b2b2      	uxth	r2, r6
   17efa:	4629      	mov	r1, r5
   17efc:	681b      	ldr	r3, [r3, #0]
}
   17efe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   17f02:	4718      	bx	r3
   17f04:	4805      	ldr	r0, [pc, #20]	; (17f1c <bt_rand+0x34>)
   17f06:	f000 fb4d 	bl	185a4 <z_impl_device_get_binding>
		dev = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   17f0a:	6020      	str	r0, [r4, #0]
		if (!dev) {
   17f0c:	2800      	cmp	r0, #0
   17f0e:	d1f1      	bne.n	17ef4 <bt_rand+0xc>
}
   17f10:	f06f 0012 	mvn.w	r0, #18
   17f14:	bd70      	pop	{r4, r5, r6, pc}
   17f16:	bf00      	nop
   17f18:	20002534 	.word	0x20002534
   17f1c:	0001f780 	.word	0x0001f780

00017f20 <m_assert_handler>:
	mpsl_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_MPSL_ASSERT_HANDLER) */
static void m_assert_handler(const char *const file, const uint32_t line)
{
   17f20:	b538      	push	{r3, r4, r5, lr}
   17f22:	4b0b      	ldr	r3, [pc, #44]	; (17f50 <m_assert_handler+0x30>)
   17f24:	4c0b      	ldr	r4, [pc, #44]	; (17f54 <m_assert_handler+0x34>)
   17f26:	1ae4      	subs	r4, r4, r3
   17f28:	460d      	mov	r5, r1
   17f2a:	08e4      	lsrs	r4, r4, #3
   17f2c:	f7f8 f8b4 	bl	10098 <z_log_strdup>
	LOG_ERR("MPSL ASSERT: %s, %d", log_strdup(file), line);
   17f30:	01a4      	lsls	r4, r4, #6
   17f32:	f044 0401 	orr.w	r4, r4, #1
   17f36:	4601      	mov	r1, r0
   17f38:	4623      	mov	r3, r4
   17f3a:	4807      	ldr	r0, [pc, #28]	; (17f58 <m_assert_handler+0x38>)
   17f3c:	462a      	mov	r2, r5
   17f3e:	f002 faf5 	bl	1a52c <log_2>
	k_oops();
   17f42:	4040      	eors	r0, r0
   17f44:	f380 8811 	msr	BASEPRI, r0
   17f48:	f04f 0003 	mov.w	r0, #3
   17f4c:	df02      	svc	2
}
   17f4e:	bd38      	pop	{r3, r4, r5, pc}
   17f50:	0001d788 	.word	0x0001d788
   17f54:	0001d7f0 	.word	0x0001d7f0
   17f58:	0001f8cc 	.word	0x0001f8cc

00017f5c <mpsl_lib_init>:
	return 0;
#endif
}

static int mpsl_lib_init(const struct device *dev)
{
   17f5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);
	int err = 0;
	mpsl_clock_lfclk_cfg_t clock_cfg;

	clock_cfg.source = m_config_clock_source_get();
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   17f5e:	2332      	movs	r3, #50	; 0x32
   17f60:	f8ad 3004 	strh.w	r3, [sp, #4]
#else
	clock_cfg.rc_ctiv = 0;
	clock_cfg.rc_temp_ctiv = 0;
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   17f64:	4a10      	ldr	r2, [pc, #64]	; (17fa8 <mpsl_lib_init+0x4c>)
	clock_cfg.skip_wait_lfclk_started =
   17f66:	2300      	movs	r3, #0
	clock_cfg.source = m_config_clock_source_get();
   17f68:	2501      	movs	r5, #1
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   17f6a:	2119      	movs	r1, #25
   17f6c:	4668      	mov	r0, sp
	clock_cfg.skip_wait_lfclk_started =
   17f6e:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
   17f72:	f8ad 5000 	strh.w	r5, [sp]
	clock_cfg.rc_temp_ctiv = 0;
   17f76:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   17f7a:	f7eb fb99 	bl	36b0 <mpsl_init>
	if (err) {
   17f7e:	4604      	mov	r4, r0
   17f80:	b970      	cbnz	r0, 17fa0 <mpsl_lib_init+0x44>
	if (err) {
		return err;
	}
#endif

	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   17f82:	4601      	mov	r1, r0
   17f84:	462a      	mov	r2, r5
   17f86:	2008      	movs	r0, #8
   17f88:	f7f9 f98e 	bl	112a8 <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   17f8c:	462a      	mov	r2, r5
   17f8e:	4621      	mov	r1, r4
   17f90:	200b      	movs	r0, #11
   17f92:	f7f9 f989 	bl	112a8 <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   17f96:	462a      	mov	r2, r5
   17f98:	4621      	mov	r1, r4
   17f9a:	4628      	mov	r0, r5
   17f9c:	f7f9 f984 	bl	112a8 <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_ZERO_LATENCY);

	return 0;
}
   17fa0:	4620      	mov	r0, r4
   17fa2:	b003      	add	sp, #12
   17fa4:	bd30      	pop	{r4, r5, pc}
   17fa6:	bf00      	nop
   17fa8:	00017f21 	.word	0x00017f21

00017fac <mpsl_low_prio_irq_handler>:
   17fac:	4801      	ldr	r0, [pc, #4]	; (17fb4 <mpsl_low_prio_irq_handler+0x8>)
   17fae:	f000 be4f 	b.w	18c50 <z_impl_k_sem_give>
   17fb2:	bf00      	nop
   17fb4:	200006c4 	.word	0x200006c4

00017fb8 <mpsl_signal_thread_init>:

static int mpsl_signal_thread_init(const struct device *dev)
{
   17fb8:	b530      	push	{r4, r5, lr}
   17fba:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   17fbc:	4d0f      	ldr	r5, [pc, #60]	; (17ffc <mpsl_signal_thread_init+0x44>)
   17fbe:	4910      	ldr	r1, [pc, #64]	; (18000 <mpsl_signal_thread_init+0x48>)
   17fc0:	2200      	movs	r2, #0
   17fc2:	2300      	movs	r3, #0
   17fc4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   17fc8:	2400      	movs	r4, #0
   17fca:	f06f 0309 	mvn.w	r3, #9
   17fce:	e9cd 3403 	strd	r3, r4, [sp, #12]
   17fd2:	e9cd 4401 	strd	r4, r4, [sp, #4]
   17fd6:	4b0b      	ldr	r3, [pc, #44]	; (18004 <mpsl_signal_thread_init+0x4c>)
   17fd8:	9400      	str	r4, [sp, #0]
   17fda:	f44f 6280 	mov.w	r2, #1024	; 0x400
   17fde:	4628      	mov	r0, r5
   17fe0:	f000 fcaa 	bl	18938 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   17fe4:	4908      	ldr	r1, [pc, #32]	; (18008 <mpsl_signal_thread_init+0x50>)
   17fe6:	4628      	mov	r0, r5
   17fe8:	f004 fda6 	bl	1cb38 <z_impl_k_thread_name_set>
			signal_thread, NULL, NULL, NULL,
			K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO),
			0, K_NO_WAIT);
	k_thread_name_set(&signal_thread_data, "MPSL signal");

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   17fec:	4622      	mov	r2, r4
   17fee:	2104      	movs	r1, #4
   17ff0:	2019      	movs	r0, #25
   17ff2:	f7f9 f959 	bl	112a8 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   17ff6:	4620      	mov	r0, r4
   17ff8:	b009      	add	sp, #36	; 0x24
   17ffa:	bd30      	pop	{r4, r5, pc}
   17ffc:	200018a8 	.word	0x200018a8
   18000:	200045a0 	.word	0x200045a0
   18004:	0001800d 	.word	0x0001800d
   18008:	0001f8e0 	.word	0x0001f8e0

0001800c <signal_thread>:
{
   1800c:	b510      	push	{r4, lr}
	return z_impl_k_sem_take(sem, timeout);
   1800e:	4c09      	ldr	r4, [pc, #36]	; (18034 <signal_thread+0x28>)
   18010:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   18014:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18018:	4620      	mov	r0, r4
   1801a:	f000 fe3f 	bl	18c9c <z_impl_k_sem_take>
		errcode = MULTITHREADING_LOCK_ACQUIRE();
   1801e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   18022:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18026:	f7ff fa73 	bl	17510 <multithreading_lock_acquire>
		mpsl_low_priority_process();
   1802a:	f7f3 fb3f 	bl	b6ac <mpsl_low_priority_process>
		MULTITHREADING_LOCK_RELEASE();
   1802e:	f7ff fa77 	bl	17520 <multithreading_lock_release>
	while (true) {
   18032:	e7ed      	b.n	18010 <signal_thread+0x4>
   18034:	200006c4 	.word	0x200006c4

00018038 <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   18038:	4b01      	ldr	r3, [pc, #4]	; (18040 <mpsl_hfclk_callback+0x8>)
   1803a:	2000      	movs	r0, #0
   1803c:	681b      	ldr	r3, [r3, #0]
   1803e:	4718      	bx	r3
   18040:	20002538 	.word	0x20002538

00018044 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
	switch (domain) {
   18044:	b120      	cbz	r0, 18050 <nrfx_clock_start+0xc>
   18046:	2801      	cmp	r0, #1
   18048:	d106      	bne.n	18058 <nrfx_clock_start+0x14>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   1804a:	4804      	ldr	r0, [pc, #16]	; (1805c <nrfx_clock_start+0x18>)
   1804c:	f7eb b990 	b.w	3370 <mpsl_clock_hfclk_request>
		break;
	case NRF_CLOCK_DOMAIN_LFCLK:
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   18050:	4b03      	ldr	r3, [pc, #12]	; (18060 <nrfx_clock_start+0x1c>)
   18052:	2001      	movs	r0, #1
   18054:	681b      	ldr	r3, [r3, #0]
   18056:	4718      	bx	r3
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   18058:	4770      	bx	lr
   1805a:	bf00      	nop
   1805c:	00018039 	.word	0x00018039
   18060:	20002538 	.word	0x20002538

00018064 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   18064:	4b01      	ldr	r3, [pc, #4]	; (1806c <nrfx_clock_init+0x8>)
   18066:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   18068:	4801      	ldr	r0, [pc, #4]	; (18070 <nrfx_clock_init+0xc>)
   1806a:	4770      	bx	lr
   1806c:	20002538 	.word	0x20002538
   18070:	0bad0000 	.word	0x0bad0000

00018074 <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   18074:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   18078:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1807c:	2a06      	cmp	r2, #6
   1807e:	d109      	bne.n	18094 <nrf52_errata_16+0x20>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   18080:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
   18084:	f3c3 1303 	ubfx	r3, r3, #4, #4
   18088:	3b03      	subs	r3, #3
   1808a:	2b04      	cmp	r3, #4
   1808c:	d802      	bhi.n	18094 <nrf52_errata_16+0x20>
   1808e:	4a02      	ldr	r2, [pc, #8]	; (18098 <nrf52_errata_16+0x24>)
   18090:	5cd0      	ldrb	r0, [r2, r3]
   18092:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
   18094:	2000      	movs	r0, #0
    #endif
}
   18096:	4770      	bx	lr
   18098:	0001f905 	.word	0x0001f905

0001809c <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1809c:	4a02      	ldr	r2, [pc, #8]	; (180a8 <nvmc_wait+0xc>)
   1809e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   180a2:	2b00      	cmp	r3, #0
   180a4:	d0fb      	beq.n	1809e <nvmc_wait+0x2>
}
   180a6:	4770      	bx	lr
   180a8:	4001e000 	.word	0x4001e000

000180ac <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   180ac:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
   180ae:	f004 fc70 	bl	1c992 <nrf52_errata_108>
   180b2:	b140      	cbz	r0, 180c6 <SystemInit+0x1a>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
   180b4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   180b8:	4a90      	ldr	r2, [pc, #576]	; (182fc <SystemInit+0x250>)
   180ba:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
   180be:	f3c3 2304 	ubfx	r3, r3, #8, #5
   180c2:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
   180c6:	f7ff ffd5 	bl	18074 <nrf52_errata_16>
   180ca:	b110      	cbz	r0, 180d2 <SystemInit+0x26>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
   180cc:	4b8c      	ldr	r3, [pc, #560]	; (18300 <SystemInit+0x254>)
   180ce:	4a8d      	ldr	r2, [pc, #564]	; (18304 <SystemInit+0x258>)
   180d0:	675a      	str	r2, [r3, #116]	; 0x74
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
   180d2:	f004 fc5e 	bl	1c992 <nrf52_errata_108>
   180d6:	b148      	cbz	r0, 180ec <SystemInit+0x40>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
   180d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   180dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   180e0:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
   180e4:	f3c3 3342 	ubfx	r3, r3, #13, #3
   180e8:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
   180ec:	f7ff ffc2 	bl	18074 <nrf52_errata_16>
   180f0:	b130      	cbz	r0, 18100 <SystemInit+0x54>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
   180f2:	4a85      	ldr	r2, [pc, #532]	; (18308 <SystemInit+0x25c>)
   180f4:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
   180f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   180fc:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   18100:	f004 fc47 	bl	1c992 <nrf52_errata_108>
   18104:	b140      	cbz	r0, 18118 <SystemInit+0x6c>
            NRF_CLOCK->EVENTS_DONE = 0;
   18106:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1810a:	2200      	movs	r2, #0
   1810c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   18110:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   18114:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
   18118:	f7ff ffac 	bl	18074 <nrf52_errata_16>
   1811c:	b120      	cbz	r0, 18128 <SystemInit+0x7c>
            *(volatile uint32_t *)0x400005A0 = 0x3;
   1811e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   18122:	2203      	movs	r2, #3
   18124:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
   18128:	f7ff ffa4 	bl	18074 <nrf52_errata_16>
   1812c:	b160      	cbz	r0, 18148 <SystemInit+0x9c>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
   1812e:	4b77      	ldr	r3, [pc, #476]	; (1830c <SystemInit+0x260>)
   18130:	2205      	movs	r2, #5
   18132:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
            *(volatile uint32_t *)0x40005688 = 0x00000001;
   18136:	2201      	movs	r2, #1
   18138:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
            *(volatile uint32_t *)0x40005618 = 0x00000000;
   1813c:	2200      	movs	r2, #0
   1813e:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
   18142:	223f      	movs	r2, #63	; 0x3f
   18144:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   18148:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1814c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   18150:	1c51      	adds	r1, r2, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   18152:	bf09      	itett	eq
   18154:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
   18158:	f8d3 3134 	ldrne.w	r3, [r3, #308]	; 0x134
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1815c:	f893 2fe0 	ldrbeq.w	r2, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   18160:	f8d3 3fe8 	ldreq.w	r3, [r3, #4072]	; 0xfe8
   18164:	bf08      	it	eq
   18166:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1816a:	2a06      	cmp	r2, #6
   1816c:	d14d      	bne.n	1820a <SystemInit+0x15e>
            {
                switch(var2)
   1816e:	3b03      	subs	r3, #3
   18170:	2b04      	cmp	r3, #4
   18172:	d803      	bhi.n	1817c <SystemInit+0xd0>
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   18174:	4a66      	ldr	r2, [pc, #408]	; (18310 <SystemInit+0x264>)
   18176:	5cd3      	ldrb	r3, [r2, r3]
   18178:	2b00      	cmp	r3, #0
   1817a:	d046      	beq.n	1820a <SystemInit+0x15e>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1817c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   18180:	4b64      	ldr	r3, [pc, #400]	; (18314 <SystemInit+0x268>)
   18182:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   18186:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1818a:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   1818e:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   18192:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   18196:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1819a:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   1819e:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   181a2:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   181a6:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   181aa:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   181ae:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   181b2:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   181b6:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   181ba:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   181be:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   181c2:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   181c6:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   181ca:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   181ce:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   181d2:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   181d6:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   181da:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   181de:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   181e2:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   181e6:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   181ea:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   181ee:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   181f2:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   181f6:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   181fa:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   181fe:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   18202:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   18206:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
   1820a:	f004 fbc2 	bl	1c992 <nrf52_errata_108>
   1820e:	b148      	cbz	r0, 18224 <SystemInit+0x178>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
   18210:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   18214:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   18218:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   1821c:	f003 034f 	and.w	r3, r3, #79	; 0x4f
   18220:	f8c2 3ee4 	str.w	r3, [r2, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   18224:	f004 fbb5 	bl	1c992 <nrf52_errata_108>
   18228:	b148      	cbz	r0, 1823e <SystemInit+0x192>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1822a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1822e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   18232:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   18234:	bf44      	itt	mi
   18236:	f06f 0201 	mvnmi.w	r2, #1
   1823a:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1823e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   18242:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   18246:	2a06      	cmp	r2, #6
   18248:	d126      	bne.n	18298 <SystemInit+0x1ec>
            {
                switch(var2)
   1824a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   1824e:	3b03      	subs	r3, #3
   18250:	2b04      	cmp	r3, #4
   18252:	d802      	bhi.n	1825a <SystemInit+0x1ae>
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
   18254:	4a30      	ldr	r2, [pc, #192]	; (18318 <SystemInit+0x26c>)
   18256:	5cd3      	ldrb	r3, [r2, r3]
   18258:	b163      	cbz	r3, 18274 <SystemInit+0x1c8>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
   1825a:	4a30      	ldr	r2, [pc, #192]	; (1831c <SystemInit+0x270>)
   1825c:	f8d2 373c 	ldr.w	r3, [r2, #1852]	; 0x73c
   18260:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   18264:	f8c2 373c 	str.w	r3, [r2, #1852]	; 0x73c
        #if defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   18268:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1826c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   18270:	2b06      	cmp	r3, #6
   18272:	d111      	bne.n	18298 <SystemInit+0x1ec>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   18274:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   18278:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   1827c:	3b03      	subs	r3, #3
   1827e:	2b04      	cmp	r3, #4
   18280:	d802      	bhi.n	18288 <SystemInit+0x1dc>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_errata_249())
   18282:	4a27      	ldr	r2, [pc, #156]	; (18320 <SystemInit+0x274>)
   18284:	5cd3      	ldrb	r3, [r2, r3]
   18286:	b13b      	cbz	r3, 18298 <SystemInit+0x1ec>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   18288:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1828c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   18290:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   18294:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   18298:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1829c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   182a0:	2a00      	cmp	r2, #0
   182a2:	db03      	blt.n	182ac <SystemInit+0x200>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   182a4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   182a8:	2b00      	cmp	r3, #0
   182aa:	da22      	bge.n	182f2 <SystemInit+0x246>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   182ac:	491d      	ldr	r1, [pc, #116]	; (18324 <SystemInit+0x278>)
   182ae:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   182b0:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   182b4:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   182b8:	2415      	movs	r4, #21
    nvmc_wait();
   182ba:	f7ff feef 	bl	1809c <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   182be:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   182c2:	f7ff feeb 	bl	1809c <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   182c6:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   182ca:	f7ff fee7 	bl	1809c <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   182ce:	2300      	movs	r3, #0
   182d0:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   182d4:	f7ff fee2 	bl	1809c <nvmc_wait>
   182d8:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   182dc:	490a      	ldr	r1, [pc, #40]	; (18308 <SystemInit+0x25c>)
   182de:	4b12      	ldr	r3, [pc, #72]	; (18328 <SystemInit+0x27c>)
   182e0:	68ca      	ldr	r2, [r1, #12]
   182e2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   182e6:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   182e8:	60cb      	str	r3, [r1, #12]
   182ea:	f3bf 8f4f 	dsb	sy
    __NOP();
   182ee:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   182f0:	e7fd      	b.n	182ee <SystemInit+0x242>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   182f2:	4b0e      	ldr	r3, [pc, #56]	; (1832c <SystemInit+0x280>)
   182f4:	4a0e      	ldr	r2, [pc, #56]	; (18330 <SystemInit+0x284>)
   182f6:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   182f8:	bd10      	pop	{r4, pc}
   182fa:	bf00      	nop
   182fc:	40013000 	.word	0x40013000
   18300:	4007c000 	.word	0x4007c000
   18304:	baadf00d 	.word	0xbaadf00d
   18308:	e000ed00 	.word	0xe000ed00
   1830c:	40005000 	.word	0x40005000
   18310:	0001f8f6 	.word	0x0001f8f6
   18314:	4000c000 	.word	0x4000c000
   18318:	0001f8fb 	.word	0x0001f8fb
   1831c:	40001000 	.word	0x40001000
   18320:	0001f900 	.word	0x0001f900
   18324:	4001e000 	.word	0x4001e000
   18328:	05fa0004 	.word	0x05fa0004
   1832c:	2000052c 	.word	0x2000052c
   18330:	03d09000 	.word	0x03d09000

00018334 <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   18334:	2301      	movs	r3, #1
   18336:	fa03 f000 	lsl.w	r0, r3, r0
   1833a:	b2c3      	uxtb	r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
   1833c:	b193      	cbz	r3, 18364 <nrfx_gpiote_channel_free+0x30>
	__asm__ volatile(
   1833e:	f04f 0340 	mov.w	r3, #64	; 0x40
   18342:	f3ef 8111 	mrs	r1, BASEPRI
   18346:	f383 8811 	msr	BASEPRI, r3
   1834a:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
   1834e:	4a06      	ldr	r2, [pc, #24]	; (18368 <nrfx_gpiote_channel_free+0x34>)
   18350:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   18352:	ea23 0000 	bic.w	r0, r3, r0
   18356:	64d0      	str	r0, [r2, #76]	; 0x4c
	__asm__ volatile(
   18358:	f381 8811 	msr	BASEPRI, r1
   1835c:	f3bf 8f6f 	isb	sy
   18360:	4802      	ldr	r0, [pc, #8]	; (1836c <nrfx_gpiote_channel_free+0x38>)
   18362:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
   18364:	4802      	ldr	r0, [pc, #8]	; (18370 <nrfx_gpiote_channel_free+0x3c>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   18366:	4770      	bx	lr
   18368:	2000253c 	.word	0x2000253c
   1836c:	0bad0000 	.word	0x0bad0000
   18370:	0bad0004 	.word	0x0bad0004

00018374 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
   18374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18378:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
   1837a:	f8df e05c 	ldr.w	lr, [pc, #92]	; 183d8 <nrfx_gpiote_channel_alloc+0x64>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   1837e:	4817      	ldr	r0, [pc, #92]	; (183dc <nrfx_gpiote_channel_alloc+0x68>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
   18380:	f8df 805c 	ldr.w	r8, [pc, #92]	; 183e0 <nrfx_gpiote_channel_alloc+0x6c>
{
   18384:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
   18386:	22ff      	movs	r2, #255	; 0xff
    return m_cb.allocated_channels_mask & (1UL << index);
   18388:	2601      	movs	r6, #1
   1838a:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
   1838c:	f04f 0140 	mov.w	r1, #64	; 0x40
   18390:	f3ef 8c11 	mrs	ip, BASEPRI
   18394:	f381 8811 	msr	BASEPRI, r1
   18398:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   1839c:	fa22 f103 	lsr.w	r1, r2, r3
   183a0:	07c9      	lsls	r1, r1, #31
   183a2:	d50a      	bpl.n	183ba <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
   183a4:	f8de 104c 	ldr.w	r1, [lr, #76]	; 0x4c
   183a8:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   183ac:	4239      	tst	r1, r7
    m_cb.allocated_channels_mask |= (1UL << index);
   183ae:	bf01      	itttt	eq
   183b0:	4339      	orreq	r1, r7
   183b2:	f8ce 104c 	streq.w	r1, [lr, #76]	; 0x4c
            err_code = NRFX_SUCCESS;
   183b6:	4640      	moveq	r0, r8
            *p_channel = ch_idx;
   183b8:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
   183ba:	f38c 8811 	msr	BASEPRI, ip
   183be:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
   183c2:	4540      	cmp	r0, r8
   183c4:	d005      	beq.n	183d2 <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
   183c6:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   183ca:	439a      	bics	r2, r3
   183cc:	f104 0401 	add.w	r4, r4, #1
   183d0:	d1db      	bne.n	1838a <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   183d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   183d6:	bf00      	nop
   183d8:	2000253c 	.word	0x2000253c
   183dc:	0bad0002 	.word	0x0bad0002
   183e0:	0bad0000 	.word	0x0bad0000

000183e4 <nrfx_ppi_channel_alloc>:


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   183e4:	4b18      	ldr	r3, [pc, #96]	; (18448 <nrfx_ppi_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
        {
            channel_allocated_set(channel);
            *p_channel = channel;
            err_code   = NRFX_SUCCESS;
   183e6:	f8df c064 	ldr.w	ip, [pc, #100]	; 1844c <nrfx_ppi_channel_alloc+0x68>
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   183ea:	681b      	ldr	r3, [r3, #0]
{
   183ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   183f0:	43db      	mvns	r3, r3
{
   183f2:	4605      	mov	r5, r0
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
   183f4:	4f16      	ldr	r7, [pc, #88]	; (18450 <nrfx_ppi_channel_alloc+0x6c>)
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   183f6:	4817      	ldr	r0, [pc, #92]	; (18454 <nrfx_ppi_channel_alloc+0x70>)
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   183f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
   183fc:	2400      	movs	r4, #0
NRFX_STATIC_INLINE uint32_t nrfx_ppi_task_addr_group_disable_get(nrf_ppi_channel_group_t group);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE uint32_t nrfx_ppi_channel_to_mask(nrf_ppi_channel_t channel)
{
    return (1uL << (uint32_t) channel);
   183fe:	f04f 0e01 	mov.w	lr, #1
   18402:	b2e6      	uxtb	r6, r4
   18404:	b90b      	cbnz	r3, 1840a <nrfx_ppi_channel_alloc+0x26>
        mask &= ~nrfx_ppi_channel_to_mask(channel);
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   18406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   1840a:	f04f 0240 	mov.w	r2, #64	; 0x40
   1840e:	f3ef 8811 	mrs	r8, BASEPRI
   18412:	f382 8811 	msr	BASEPRI, r2
   18416:	f3bf 8f6f 	isb	sy
   1841a:	fa0e f206 	lsl.w	r2, lr, r6
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
   1841e:	421a      	tst	r2, r3
   18420:	d006      	beq.n	18430 <nrfx_ppi_channel_alloc+0x4c>
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
   18422:	6839      	ldr	r1, [r7, #0]
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
   18424:	420a      	tst	r2, r1
    m_channels_allocated |= nrfx_ppi_channel_to_mask(channel);
   18426:	bf01      	itttt	eq
   18428:	4311      	orreq	r1, r2
   1842a:	6039      	streq	r1, [r7, #0]
            *p_channel = channel;
   1842c:	702e      	strbeq	r6, [r5, #0]
            err_code   = NRFX_SUCCESS;
   1842e:	4660      	moveq	r0, ip
	__asm__ volatile(
   18430:	f388 8811 	msr	BASEPRI, r8
   18434:	f3bf 8f6f 	isb	sy
        if (err_code == NRFX_SUCCESS)
   18438:	4560      	cmp	r0, ip
   1843a:	f104 0401 	add.w	r4, r4, #1
   1843e:	d0e2      	beq.n	18406 <nrfx_ppi_channel_alloc+0x22>
        mask &= ~nrfx_ppi_channel_to_mask(channel);
   18440:	ea23 0302 	bic.w	r3, r3, r2
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
   18444:	e7dd      	b.n	18402 <nrfx_ppi_channel_alloc+0x1e>
   18446:	bf00      	nop
   18448:	0001de14 	.word	0x0001de14
   1844c:	0bad0000 	.word	0x0bad0000
   18450:	2000258c 	.word	0x2000258c
   18454:	0bad0002 	.word	0x0bad0002

00018458 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   18458:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1845a:	4c11      	ldr	r4, [pc, #68]	; (184a0 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   1845c:	4a11      	ldr	r2, [pc, #68]	; (184a4 <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   1845e:	4912      	ldr	r1, [pc, #72]	; (184a8 <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   18460:	2303      	movs	r3, #3
   18462:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   18464:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   18466:	4b11      	ldr	r3, [pc, #68]	; (184ac <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
   18468:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1846a:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   1846c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   18470:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   18472:	2300      	movs	r3, #0
   18474:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   18476:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   18478:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   1847a:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   1847c:	4a0c      	ldr	r2, [pc, #48]	; (184b0 <_DoInit+0x58>)
   1847e:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
   18480:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   18482:	2210      	movs	r2, #16
   18484:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   18486:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   18488:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1848a:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   1848c:	f002 fe4b 	bl	1b126 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   18490:	4908      	ldr	r1, [pc, #32]	; (184b4 <_DoInit+0x5c>)
   18492:	4620      	mov	r0, r4
   18494:	f002 fe47 	bl	1b126 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   18498:	2320      	movs	r3, #32
   1849a:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   1849c:	bd10      	pop	{r4, pc}
   1849e:	bf00      	nop
   184a0:	20002590 	.word	0x20002590
   184a4:	0001f90a 	.word	0x0001f90a
   184a8:	0001f913 	.word	0x0001f913
   184ac:	20003008 	.word	0x20003008
   184b0:	20002ff8 	.word	0x20002ff8
   184b4:	0001f917 	.word	0x0001f917

000184b8 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   184b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   184bc:	4f23      	ldr	r7, [pc, #140]	; (1854c <SEGGER_RTT_WriteSkipNoLock+0x94>)
   184be:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   184c2:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   184c4:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   184c8:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
   184ca:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   184cc:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   184ce:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   184d0:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   184d2:	d834      	bhi.n	1853e <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   184d4:	f8d2 a020 	ldr.w	sl, [r2, #32]
   184d8:	ebaa 0905 	sub.w	r9, sl, r5
   184dc:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
   184e0:	4294      	cmp	r4, r2
   184e2:	d811      	bhi.n	18508 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   184e4:	f04f 0918 	mov.w	r9, #24
   184e8:	fb06 9309 	mla	r3, r6, r9, r9
   184ec:	443b      	add	r3, r7
      memcpy((void*)pDst, pData, NumBytes);
   184ee:	4622      	mov	r2, r4
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   184f0:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
   184f2:	4641      	mov	r1, r8
   184f4:	4428      	add	r0, r5
   184f6:	f002 fe5f 	bl	1b1b8 <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
   184fa:	fb09 7606 	mla	r6, r9, r6, r7
   184fe:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
   18500:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
   18502:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   18504:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   18508:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   1850a:	429c      	cmp	r4, r3
   1850c:	d81b      	bhi.n	18546 <SEGGER_RTT_WriteSkipNoLock+0x8e>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1850e:	fb00 bb0b 	mla	fp, r0, fp, fp
   18512:	44bb      	add	fp, r7
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   18514:	464a      	mov	r2, r9
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   18516:	f8db 0004 	ldr.w	r0, [fp, #4]
   1851a:	442c      	add	r4, r5
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   1851c:	4428      	add	r0, r5
   1851e:	f002 fe4b 	bl	1b1b8 <memcpy>
      if (NumBytes) {
   18522:	ebb4 040a 	subs.w	r4, r4, sl
   18526:	d006      	beq.n	18536 <SEGGER_RTT_WriteSkipNoLock+0x7e>
        memcpy((void*)pDst, pData + Rem, NumBytes);
   18528:	f8db 0004 	ldr.w	r0, [fp, #4]
   1852c:	4622      	mov	r2, r4
   1852e:	eb08 0109 	add.w	r1, r8, r9
   18532:	f002 fe41 	bl	1b1b8 <memcpy>
      pRing->WrOff = NumBytes;
   18536:	2018      	movs	r0, #24
   18538:	fb00 7606 	mla	r6, r0, r6, r7
   1853c:	e7e0      	b.n	18500 <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
   1853e:	3b01      	subs	r3, #1
   18540:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   18542:	42a3      	cmp	r3, r4
   18544:	d2ce      	bcs.n	184e4 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
   18546:	2000      	movs	r0, #0
   18548:	e7dc      	b.n	18504 <SEGGER_RTT_WriteSkipNoLock+0x4c>
   1854a:	bf00      	nop
   1854c:	20002590 	.word	0x20002590

00018550 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   18550:	4b03      	ldr	r3, [pc, #12]	; (18560 <SEGGER_RTT_HasDataUp+0x10>)
   18552:	2218      	movs	r2, #24
   18554:	fb02 3300 	mla	r3, r2, r0, r3
   18558:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
   1855a:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   1855c:	1a80      	subs	r0, r0, r2
   1855e:	4770      	bx	lr
   18560:	20002590 	.word	0x20002590

00018564 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   18564:	4b0e      	ldr	r3, [pc, #56]	; (185a0 <z_sys_init_run_level+0x3c>)
{
   18566:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   18568:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1856c:	3001      	adds	r0, #1
   1856e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   18572:	42a6      	cmp	r6, r4
   18574:	d800      	bhi.n	18578 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   18576:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   18578:	e9d4 3500 	ldrd	r3, r5, [r4]
   1857c:	4628      	mov	r0, r5
   1857e:	4798      	blx	r3
		if (dev != NULL) {
   18580:	b165      	cbz	r5, 1859c <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
   18582:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
   18584:	b130      	cbz	r0, 18594 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   18586:	2800      	cmp	r0, #0
   18588:	bfb8      	it	lt
   1858a:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   1858c:	28ff      	cmp	r0, #255	; 0xff
   1858e:	bfa8      	it	ge
   18590:	20ff      	movge	r0, #255	; 0xff
   18592:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   18594:	785a      	ldrb	r2, [r3, #1]
   18596:	f042 0201 	orr.w	r2, r2, #1
   1859a:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1859c:	3408      	adds	r4, #8
   1859e:	e7e8      	b.n	18572 <z_sys_init_run_level+0xe>
   185a0:	0001de18 	.word	0x0001de18

000185a4 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   185a4:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   185a6:	4605      	mov	r5, r0
   185a8:	b910      	cbnz	r0, 185b0 <z_impl_device_get_binding+0xc>
		return NULL;
   185aa:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   185ac:	4620      	mov	r0, r4
   185ae:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   185b0:	7803      	ldrb	r3, [r0, #0]
   185b2:	2b00      	cmp	r3, #0
   185b4:	d0f9      	beq.n	185aa <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   185b6:	4c0e      	ldr	r4, [pc, #56]	; (185f0 <z_impl_device_get_binding+0x4c>)
   185b8:	4e0e      	ldr	r6, [pc, #56]	; (185f4 <z_impl_device_get_binding+0x50>)
   185ba:	42b4      	cmp	r4, r6
   185bc:	d108      	bne.n	185d0 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
   185be:	4c0c      	ldr	r4, [pc, #48]	; (185f0 <z_impl_device_get_binding+0x4c>)
   185c0:	42b4      	cmp	r4, r6
   185c2:	d0f2      	beq.n	185aa <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   185c4:	4620      	mov	r0, r4
   185c6:	f004 f9fd 	bl	1c9c4 <z_device_ready>
   185ca:	b950      	cbnz	r0, 185e2 <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
   185cc:	3418      	adds	r4, #24
   185ce:	e7f7      	b.n	185c0 <z_impl_device_get_binding+0x1c>
		if (z_device_ready(dev) && (dev->name == name)) {
   185d0:	4620      	mov	r0, r4
   185d2:	f004 f9f7 	bl	1c9c4 <z_device_ready>
   185d6:	b110      	cbz	r0, 185de <z_impl_device_get_binding+0x3a>
   185d8:	6823      	ldr	r3, [r4, #0]
   185da:	42ab      	cmp	r3, r5
   185dc:	d0e6      	beq.n	185ac <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   185de:	3418      	adds	r4, #24
   185e0:	e7eb      	b.n	185ba <z_impl_device_get_binding+0x16>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   185e2:	6821      	ldr	r1, [r4, #0]
   185e4:	4628      	mov	r0, r5
   185e6:	f002 fdca 	bl	1b17e <strcmp>
   185ea:	2800      	cmp	r0, #0
   185ec:	d1ee      	bne.n	185cc <z_impl_device_get_binding+0x28>
   185ee:	e7dd      	b.n	185ac <z_impl_device_get_binding+0x8>
   185f0:	0001d59c 	.word	0x0001d59c
   185f4:	0001d614 	.word	0x0001d614

000185f8 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   185f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   185fc:	4606      	mov	r6, r0
   185fe:	460f      	mov	r7, r1
	__asm__ volatile(
   18600:	f04f 0340 	mov.w	r3, #64	; 0x40
   18604:	f3ef 8811 	mrs	r8, BASEPRI
   18608:	f383 8811 	msr	BASEPRI, r3
   1860c:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   18610:	f001 f81c 	bl	1964c <z_impl_k_current_get>
   18614:	4c1f      	ldr	r4, [pc, #124]	; (18694 <z_fatal_error+0x9c>)
   18616:	4b20      	ldr	r3, [pc, #128]	; (18698 <z_fatal_error+0xa0>)
   18618:	1ae4      	subs	r4, r4, r3
   1861a:	2e04      	cmp	r6, #4
   1861c:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   18620:	bf96      	itet	ls
   18622:	4a1e      	ldrls	r2, [pc, #120]	; (1869c <z_fatal_error+0xa4>)
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   18624:	4a1e      	ldrhi	r2, [pc, #120]	; (186a0 <z_fatal_error+0xa8>)
   18626:	f852 2026 	ldrls.w	r2, [r2, r6, lsl #2]
   1862a:	01a4      	lsls	r4, r4, #6
   1862c:	f044 0301 	orr.w	r3, r4, #1
   18630:	4605      	mov	r5, r0
   18632:	f8ad 3000 	strh.w	r3, [sp]
   18636:	481b      	ldr	r0, [pc, #108]	; (186a4 <z_fatal_error+0xac>)
   18638:	2300      	movs	r3, #0
   1863a:	4631      	mov	r1, r6
   1863c:	f001 ff8f 	bl	1a55e <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   18640:	b147      	cbz	r7, 18654 <z_fatal_error+0x5c>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   18642:	69fb      	ldr	r3, [r7, #28]
   18644:	f3c3 0308 	ubfx	r3, r3, #0, #9
   18648:	b123      	cbz	r3, 18654 <z_fatal_error+0x5c>
		LOG_ERR("Fault during interrupt handling\n");
   1864a:	4817      	ldr	r0, [pc, #92]	; (186a8 <z_fatal_error+0xb0>)
   1864c:	f044 0101 	orr.w	r1, r4, #1
   18650:	f001 ff4b 	bl	1a4ea <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   18654:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   18658:	b12d      	cbz	r5, 18666 <z_fatal_error+0x6e>
   1865a:	4628      	mov	r0, r5
   1865c:	f004 fa6f 	bl	1cb3e <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   18660:	b108      	cbz	r0, 18666 <z_fatal_error+0x6e>
   18662:	7803      	ldrb	r3, [r0, #0]
   18664:	b903      	cbnz	r3, 18668 <z_fatal_error+0x70>
		thread_name = "unknown";
   18666:	4811      	ldr	r0, [pc, #68]	; (186ac <z_fatal_error+0xb4>)
   18668:	f7f7 fd16 	bl	10098 <z_log_strdup>
	LOG_ERR("Current thread: %p (%s)", thread,
   1866c:	4623      	mov	r3, r4
   1866e:	4602      	mov	r2, r0
   18670:	4629      	mov	r1, r5
   18672:	480f      	ldr	r0, [pc, #60]	; (186b0 <z_fatal_error+0xb8>)
   18674:	f001 ff5a 	bl	1a52c <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   18678:	4639      	mov	r1, r7
   1867a:	4630      	mov	r0, r6
   1867c:	f7fe ff56 	bl	1752c <k_sys_fatal_error_handler>
	__asm__ volatile(
   18680:	f388 8811 	msr	BASEPRI, r8
   18684:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   18688:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   1868a:	b002      	add	sp, #8
   1868c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   18690:	f7f9 b9c0 	b.w	11a14 <z_impl_k_thread_abort>
   18694:	0001d808 	.word	0x0001d808
   18698:	0001d788 	.word	0x0001d788
   1869c:	0001de30 	.word	0x0001de30
   186a0:	0001f91e 	.word	0x0001f91e
   186a4:	0001f92c 	.word	0x0001f92c
   186a8:	0001f954 	.word	0x0001f954
   186ac:	0001e950 	.word	0x0001e950
   186b0:	0001f975 	.word	0x0001f975

000186b4 <z_bss_zero>:
 * @return N/A
 */
__boot_func
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   186b4:	4802      	ldr	r0, [pc, #8]	; (186c0 <z_bss_zero+0xc>)
   186b6:	4a03      	ldr	r2, [pc, #12]	; (186c4 <z_bss_zero+0x10>)
   186b8:	2100      	movs	r1, #0
   186ba:	1a12      	subs	r2, r2, r0
   186bc:	f002 bd87 	b.w	1b1ce <memset>
   186c0:	200007e8 	.word	0x200007e8
   186c4:	2000340c 	.word	0x2000340c

000186c8 <bg_thread_main>:
 *
 * @return N/A
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   186c8:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   186ca:	4b0a      	ldr	r3, [pc, #40]	; (186f4 <bg_thread_main+0x2c>)
   186cc:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   186ce:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   186d0:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   186d2:	f7ff ff47 	bl	18564 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   186d6:	f001 fa9d 	bl	19c14 <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   186da:	2003      	movs	r0, #3
   186dc:	f7ff ff42 	bl	18564 <z_sys_init_run_level>

	z_init_static_threads();
   186e0:	f000 f956 	bl	18990 <z_init_static_threads>
	z_sys_init_run_level(_SYS_INIT_LEVEL_SMP);
#endif

	extern void main(void);

	main();
   186e4:	f7f6 fe86 	bl	f3f4 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   186e8:	4a03      	ldr	r2, [pc, #12]	; (186f8 <bg_thread_main+0x30>)
   186ea:	7b13      	ldrb	r3, [r2, #12]
   186ec:	f023 0301 	bic.w	r3, r3, #1
   186f0:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   186f2:	bd08      	pop	{r3, pc}
   186f4:	20003408 	.word	0x20003408
   186f8:	200019a8 	.word	0x200019a8

000186fc <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   186fc:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
   18700:	b0a7      	sub	sp, #156	; 0x9c
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   18702:	f7f7 fc01 	bl	ff08 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   18706:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 187e8 <z_cstart+0xec>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1870a:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1870e:	4d37      	ldr	r5, [pc, #220]	; (187ec <z_cstart+0xf0>)
	_kernel.ready_q.cache = &z_main_thread;
   18710:	4e37      	ldr	r6, [pc, #220]	; (187f0 <z_cstart+0xf4>)
   18712:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   18714:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 187f4 <z_cstart+0xf8>
	z_setup_new_thread(thread, stack,
   18718:	4f37      	ldr	r7, [pc, #220]	; (187f8 <z_cstart+0xfc>)
   1871a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1871e:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   18720:	23e0      	movs	r3, #224	; 0xe0
   18722:	2400      	movs	r4, #0
   18724:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   18728:	2320      	movs	r3, #32
   1872a:	77eb      	strb	r3, [r5, #31]
   1872c:	762c      	strb	r4, [r5, #24]
   1872e:	766c      	strb	r4, [r5, #25]
   18730:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   18732:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   18734:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   18738:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1873a:	f7f9 f905 	bl	11948 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1873e:	f7f8 fe23 	bl	11388 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   18742:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18746:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   18748:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   1874a:	f7f9 fa29 	bl	11ba0 <z_arm_mpu_init>
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   1874e:	4d2b      	ldr	r5, [pc, #172]	; (187fc <z_cstart+0x100>)
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   18750:	f7f9 f972 	bl	11a38 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   18754:	f240 1301 	movw	r3, #257	; 0x101
   18758:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   1875c:	ab06      	add	r3, sp, #24
   1875e:	60ab      	str	r3, [r5, #8]
	dummy_thread->stack_info.size = 0U;
   18760:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   18764:	f004 f92d 	bl	1c9c2 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   18768:	4620      	mov	r0, r4
   1876a:	f7ff fefb 	bl	18564 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1876e:	2001      	movs	r0, #1
   18770:	f7ff fef8 	bl	18564 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   18774:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
   18778:	f000 feba 	bl	194f0 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1877c:	4b20      	ldr	r3, [pc, #128]	; (18800 <z_cstart+0x104>)
	_kernel.ready_q.cache = &z_main_thread;
   1877e:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   18780:	4920      	ldr	r1, [pc, #128]	; (18804 <z_cstart+0x108>)
   18782:	9305      	str	r3, [sp, #20]
   18784:	f44f 6280 	mov.w	r2, #1024	; 0x400
   18788:	4653      	mov	r3, sl
   1878a:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   1878e:	e9cd 4401 	strd	r4, r4, [sp, #4]
   18792:	9400      	str	r4, [sp, #0]
   18794:	4630      	mov	r0, r6
   18796:	f000 f89d 	bl	188d4 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1879a:	7b73      	ldrb	r3, [r6, #13]
   1879c:	4680      	mov	r8, r0
   1879e:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   187a2:	4630      	mov	r0, r6
   187a4:	7373      	strb	r3, [r6, #13]
   187a6:	f004 fc25 	bl	1cff4 <z_ready_thread>
	z_setup_new_thread(thread, stack,
   187aa:	230f      	movs	r3, #15
   187ac:	e9cd 4302 	strd	r4, r3, [sp, #8]
   187b0:	4915      	ldr	r1, [pc, #84]	; (18808 <z_cstart+0x10c>)
   187b2:	4b16      	ldr	r3, [pc, #88]	; (1880c <z_cstart+0x110>)
   187b4:	f44f 72a0 	mov.w	r2, #320	; 0x140
   187b8:	e9cd b404 	strd	fp, r4, [sp, #16]
   187bc:	e9cd 5400 	strd	r5, r4, [sp]
   187c0:	4638      	mov	r0, r7
   187c2:	f000 f887 	bl	188d4 <z_setup_new_thread>
   187c6:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   187c8:	60ef      	str	r7, [r5, #12]
   187ca:	f023 0304 	bic.w	r3, r3, #4
   187ce:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   187d0:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
   187d4:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].id = i;
   187d8:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
   187da:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   187de:	4652      	mov	r2, sl
   187e0:	4641      	mov	r1, r8
   187e2:	4630      	mov	r0, r6
   187e4:	f7f8 fdba 	bl	1135c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   187e8:	20005760 	.word	0x20005760
   187ec:	e000ed00 	.word	0xe000ed00
   187f0:	200019a8 	.word	0x200019a8
   187f4:	000186c9 	.word	0x000186c9
   187f8:	20001928 	.word	0x20001928
   187fc:	20002638 	.word	0x20002638
   18800:	0001f9d7 	.word	0x0001f9d7
   18804:	200049c0 	.word	0x200049c0
   18808:	20004de0 	.word	0x20004de0
   1880c:	00018a49 	.word	0x00018a49

00018810 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   18810:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   18812:	4c06      	ldr	r4, [pc, #24]	; (1882c <statics_init+0x1c>)
   18814:	4d06      	ldr	r5, [pc, #24]	; (18830 <statics_init+0x20>)
   18816:	42ac      	cmp	r4, r5
   18818:	d301      	bcc.n	1881e <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   1881a:	2000      	movs	r0, #0
   1881c:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1881e:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   18822:	4620      	mov	r0, r4
   18824:	f004 f8d8 	bl	1c9d8 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   18828:	3414      	adds	r4, #20
   1882a:	e7f4      	b.n	18816 <statics_init+0x6>
   1882c:	20000640 	.word	0x20000640
   18830:	20000654 	.word	0x20000654

00018834 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   18834:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   18836:	4b0e      	ldr	r3, [pc, #56]	; (18870 <init_mem_slab_module+0x3c>)
   18838:	4c0e      	ldr	r4, [pc, #56]	; (18874 <init_mem_slab_module+0x40>)
   1883a:	42a3      	cmp	r3, r4
   1883c:	d301      	bcc.n	18842 <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
   1883e:	2000      	movs	r0, #0
	return rc;
}
   18840:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   18842:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   18846:	ea41 0200 	orr.w	r2, r1, r0
   1884a:	f012 0203 	ands.w	r2, r2, #3
   1884e:	d10b      	bne.n	18868 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   18850:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   18852:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   18854:	42aa      	cmp	r2, r5
   18856:	d101      	bne.n	1885c <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   18858:	331c      	adds	r3, #28
   1885a:	e7ee      	b.n	1883a <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   1885c:	695e      	ldr	r6, [r3, #20]
   1885e:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   18860:	3201      	adds	r2, #1
		slab->free_list = p;
   18862:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   18864:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   18866:	e7f5      	b.n	18854 <init_mem_slab_module+0x20>
	return rc;
   18868:	f06f 0015 	mvn.w	r0, #21
   1886c:	e7e8      	b.n	18840 <init_mem_slab_module+0xc>
   1886e:	bf00      	nop
   18870:	200005ec 	.word	0x200005ec
   18874:	20000640 	.word	0x20000640

00018878 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   18878:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1887a:	460c      	mov	r4, r1
	__asm__ volatile(
   1887c:	f04f 0540 	mov.w	r5, #64	; 0x40
   18880:	f3ef 8111 	mrs	r1, BASEPRI
   18884:	f385 8811 	msr	BASEPRI, r5
   18888:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   1888c:	6945      	ldr	r5, [r0, #20]
   1888e:	b15d      	cbz	r5, 188a8 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   18890:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   18892:	682b      	ldr	r3, [r5, #0]
   18894:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   18896:	6983      	ldr	r3, [r0, #24]
   18898:	3301      	adds	r3, #1
   1889a:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1889c:	2000      	movs	r0, #0
	__asm__ volatile(
   1889e:	f381 8811 	msr	BASEPRI, r1
   188a2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   188a6:	e011      	b.n	188cc <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   188a8:	ea52 0c03 	orrs.w	ip, r2, r3
   188ac:	d103      	bne.n	188b6 <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   188ae:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   188b0:	f06f 000b 	mvn.w	r0, #11
   188b4:	e7f3      	b.n	1889e <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   188b6:	e9cd 2300 	strd	r2, r3, [sp]
   188ba:	4602      	mov	r2, r0
   188bc:	3008      	adds	r0, #8
   188be:	f000 fc9f 	bl	19200 <z_pend_curr>
		if (result == 0) {
   188c2:	b918      	cbnz	r0, 188cc <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   188c4:	4b02      	ldr	r3, [pc, #8]	; (188d0 <k_mem_slab_alloc+0x58>)
   188c6:	689b      	ldr	r3, [r3, #8]
   188c8:	695b      	ldr	r3, [r3, #20]
   188ca:	6023      	str	r3, [r4, #0]
}
   188cc:	b003      	add	sp, #12
   188ce:	bd30      	pop	{r4, r5, pc}
   188d0:	20002638 	.word	0x20002638

000188d4 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   188d4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   188d8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   188da:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   188dc:	2604      	movs	r6, #4
   188de:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   188e0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   188e2:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   188e4:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
   188e8:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   188ea:	1dd6      	adds	r6, r2, #7
   188ec:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   188f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   188f2:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   188f4:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   188f8:	3720      	adds	r7, #32
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   188fa:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   188fe:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   18902:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   18904:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   18906:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   18908:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1890c:	9202      	str	r2, [sp, #8]
   1890e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   18910:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   18912:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   18914:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   18916:	9200      	str	r2, [sp, #0]
   18918:	4642      	mov	r2, r8
{
   1891a:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1891c:	f7f8 fcec 	bl	112f8 <arch_new_thread>
	if (!_current) {
   18920:	4b04      	ldr	r3, [pc, #16]	; (18934 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
   18922:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   18924:	689b      	ldr	r3, [r3, #8]
   18926:	b103      	cbz	r3, 1892a <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
   18928:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   1892a:	6763      	str	r3, [r4, #116]	; 0x74
}
   1892c:	4640      	mov	r0, r8
   1892e:	b004      	add	sp, #16
   18930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18934:	20002638 	.word	0x20002638

00018938 <z_impl_k_thread_create>:
{
   18938:	b5f0      	push	{r4, r5, r6, r7, lr}
   1893a:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1893c:	2700      	movs	r7, #0
   1893e:	9705      	str	r7, [sp, #20]
   18940:	9f10      	ldr	r7, [sp, #64]	; 0x40
   18942:	9704      	str	r7, [sp, #16]
   18944:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   18946:	9703      	str	r7, [sp, #12]
   18948:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   1894a:	9702      	str	r7, [sp, #8]
{
   1894c:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   18950:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   18952:	9701      	str	r7, [sp, #4]
   18954:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   18956:	9700      	str	r7, [sp, #0]
{
   18958:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1895a:	f7ff ffbb 	bl	188d4 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1895e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   18962:	bf08      	it	eq
   18964:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   18968:	d005      	beq.n	18976 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1896a:	ea55 0306 	orrs.w	r3, r5, r6
   1896e:	d105      	bne.n	1897c <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   18970:	4620      	mov	r0, r4
   18972:	f000 fd57 	bl	19424 <z_sched_start>
}
   18976:	4620      	mov	r0, r4
   18978:	b007      	add	sp, #28
   1897a:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1897c:	4903      	ldr	r1, [pc, #12]	; (1898c <z_impl_k_thread_create+0x54>)
   1897e:	4632      	mov	r2, r6
   18980:	462b      	mov	r3, r5
   18982:	f104 0018 	add.w	r0, r4, #24
   18986:	f000 ff41 	bl	1980c <z_add_timeout>
   1898a:	e7f4      	b.n	18976 <z_impl_k_thread_create+0x3e>
   1898c:	0001d015 	.word	0x0001d015

00018990 <z_init_static_threads>:
{
   18990:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18994:	4c29      	ldr	r4, [pc, #164]	; (18a3c <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   18996:	4d2a      	ldr	r5, [pc, #168]	; (18a40 <z_init_static_threads+0xb0>)
{
   18998:	b087      	sub	sp, #28
   1899a:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   1899c:	42ae      	cmp	r6, r5
   1899e:	f104 0430 	add.w	r4, r4, #48	; 0x30
   189a2:	d30f      	bcc.n	189c4 <z_init_static_threads+0x34>
	k_sched_lock();
   189a4:	f000 fbba 	bl	1911c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   189a8:	4c24      	ldr	r4, [pc, #144]	; (18a3c <z_init_static_threads+0xac>)
   189aa:	f8df 9098 	ldr.w	r9, [pc, #152]	; 18a44 <z_init_static_threads+0xb4>
		} else {
			return (t * to_hz + off) / from_hz;
   189ae:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   189b2:	f240 37e7 	movw	r7, #999	; 0x3e7
   189b6:	42ac      	cmp	r4, r5
   189b8:	d320      	bcc.n	189fc <z_init_static_threads+0x6c>
}
   189ba:	b007      	add	sp, #28
   189bc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   189c0:	f000 bc64 	b.w	1928c <k_sched_unlock>
		z_setup_new_thread(
   189c4:	f854 3c04 	ldr.w	r3, [r4, #-4]
   189c8:	9305      	str	r3, [sp, #20]
   189ca:	f854 3c10 	ldr.w	r3, [r4, #-16]
   189ce:	9304      	str	r3, [sp, #16]
   189d0:	f854 3c14 	ldr.w	r3, [r4, #-20]
   189d4:	9303      	str	r3, [sp, #12]
   189d6:	f854 3c18 	ldr.w	r3, [r4, #-24]
   189da:	9302      	str	r3, [sp, #8]
   189dc:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   189e0:	9301      	str	r3, [sp, #4]
   189e2:	f854 3c20 	ldr.w	r3, [r4, #-32]
   189e6:	9300      	str	r3, [sp, #0]
   189e8:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   189ec:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   189f0:	f7ff ff70 	bl	188d4 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   189f4:	f854 3c30 	ldr.w	r3, [r4, #-48]
   189f8:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   189fa:	e7ce      	b.n	1899a <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   189fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   189fe:	1c5a      	adds	r2, r3, #1
   18a00:	d00d      	beq.n	18a1e <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   18a02:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   18a06:	2100      	movs	r1, #0
   18a08:	4638      	mov	r0, r7
   18a0a:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   18a0e:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   18a12:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   18a16:	d104      	bne.n	18a22 <z_init_static_threads+0x92>
	z_sched_start(thread);
   18a18:	4640      	mov	r0, r8
   18a1a:	f000 fd03 	bl	19424 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   18a1e:	3430      	adds	r4, #48	; 0x30
   18a20:	e7c9      	b.n	189b6 <z_init_static_threads+0x26>
   18a22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   18a26:	2300      	movs	r3, #0
   18a28:	f7e7 fb58 	bl	dc <__aeabi_uldivmod>
   18a2c:	4602      	mov	r2, r0
   18a2e:	460b      	mov	r3, r1
   18a30:	f108 0018 	add.w	r0, r8, #24
   18a34:	4649      	mov	r1, r9
   18a36:	f000 fee9 	bl	1980c <z_add_timeout>
   18a3a:	e7f0      	b.n	18a1e <z_init_static_threads+0x8e>
   18a3c:	200005eb 	.word	0x200005eb
   18a40:	200005eb 	.word	0x200005eb
   18a44:	0001d015 	.word	0x0001d015

00018a48 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   18a48:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   18a4a:	4c09      	ldr	r4, [pc, #36]	; (18a70 <idle+0x28>)
	__asm__ volatile(
   18a4c:	f04f 0240 	mov.w	r2, #64	; 0x40
   18a50:	f3ef 8311 	mrs	r3, BASEPRI
   18a54:	f382 8811 	msr	BASEPRI, r2
   18a58:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
   18a5c:	f004 fb6c 	bl	1d138 <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
   18a60:	6220      	str	r0, [r4, #32]
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
   18a62:	f7f8 f83f 	bl	10ae4 <pm_system_suspend>
   18a66:	2800      	cmp	r0, #0
   18a68:	d1f0      	bne.n	18a4c <idle+0x4>
	arch_cpu_idle();
   18a6a:	f7f8 fc93 	bl	11394 <arch_cpu_idle>
}
   18a6e:	e7ed      	b.n	18a4c <idle+0x4>
   18a70:	20002638 	.word	0x20002638

00018a74 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   18a74:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   18a78:	4604      	mov	r4, r0
   18a7a:	4617      	mov	r7, r2
   18a7c:	461e      	mov	r6, r3
   18a7e:	f04f 0340 	mov.w	r3, #64	; 0x40
   18a82:	f3ef 8811 	mrs	r8, BASEPRI
   18a86:	f383 8811 	msr	BASEPRI, r3
   18a8a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   18a8e:	68c3      	ldr	r3, [r0, #12]
   18a90:	4a32      	ldr	r2, [pc, #200]	; (18b5c <z_impl_k_mutex_lock+0xe8>)
   18a92:	b16b      	cbz	r3, 18ab0 <z_impl_k_mutex_lock+0x3c>
   18a94:	6880      	ldr	r0, [r0, #8]
   18a96:	6891      	ldr	r1, [r2, #8]
   18a98:	4288      	cmp	r0, r1
   18a9a:	d019      	beq.n	18ad0 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   18a9c:	ea57 0306 	orrs.w	r3, r7, r6
   18aa0:	d118      	bne.n	18ad4 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   18aa2:	f388 8811 	msr	BASEPRI, r8
   18aa6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   18aaa:	f06f 000f 	mvn.w	r0, #15
   18aae:	e00c      	b.n	18aca <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   18ab0:	6891      	ldr	r1, [r2, #8]
   18ab2:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   18ab6:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   18ab8:	3301      	adds	r3, #1
   18aba:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   18abc:	6893      	ldr	r3, [r2, #8]
   18abe:	60a3      	str	r3, [r4, #8]
   18ac0:	f388 8811 	msr	BASEPRI, r8
   18ac4:	f3bf 8f6f 	isb	sy
		return 0;
   18ac8:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   18aca:	b002      	add	sp, #8
   18acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   18ad0:	6921      	ldr	r1, [r4, #16]
   18ad2:	e7f0      	b.n	18ab6 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   18ad4:	f991 100e 	ldrsb.w	r1, [r1, #14]
   18ad8:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
   18adc:	4299      	cmp	r1, r3
   18ade:	bfa8      	it	ge
   18ae0:	4619      	movge	r1, r3
   18ae2:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   18ae6:	4291      	cmp	r1, r2
   18ae8:	bfb8      	it	lt
   18aea:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   18aec:	428b      	cmp	r3, r1
   18aee:	dd2e      	ble.n	18b4e <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   18af0:	f004 f830 	bl	1cb54 <adjust_owner_prio.isra.0>
   18af4:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   18af6:	e9cd 7600 	strd	r7, r6, [sp]
   18afa:	4819      	ldr	r0, [pc, #100]	; (18b60 <z_impl_k_mutex_lock+0xec>)
   18afc:	4622      	mov	r2, r4
   18afe:	4641      	mov	r1, r8
   18b00:	f000 fb7e 	bl	19200 <z_pend_curr>
	if (got_mutex == 0) {
   18b04:	2800      	cmp	r0, #0
   18b06:	d0e0      	beq.n	18aca <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   18b08:	f04f 0340 	mov.w	r3, #64	; 0x40
   18b0c:	f3ef 8611 	mrs	r6, BASEPRI
   18b10:	f383 8811 	msr	BASEPRI, r3
   18b14:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   18b18:	6823      	ldr	r3, [r4, #0]
   18b1a:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18b1c:	429c      	cmp	r4, r3
   18b1e:	d00a      	beq.n	18b36 <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   18b20:	b14b      	cbz	r3, 18b36 <z_impl_k_mutex_lock+0xc2>
   18b22:	f993 300e 	ldrsb.w	r3, [r3, #14]
   18b26:	4299      	cmp	r1, r3
   18b28:	bfa8      	it	ge
   18b2a:	4619      	movge	r1, r3
   18b2c:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   18b30:	4299      	cmp	r1, r3
   18b32:	bfb8      	it	lt
   18b34:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   18b36:	68a0      	ldr	r0, [r4, #8]
   18b38:	f004 f80c 	bl	1cb54 <adjust_owner_prio.isra.0>
   18b3c:	b900      	cbnz	r0, 18b40 <z_impl_k_mutex_lock+0xcc>
	if (resched) {
   18b3e:	b145      	cbz	r5, 18b52 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   18b40:	4807      	ldr	r0, [pc, #28]	; (18b60 <z_impl_k_mutex_lock+0xec>)
   18b42:	4631      	mov	r1, r6
   18b44:	f000 fad8 	bl	190f8 <z_reschedule>
	return -EAGAIN;
   18b48:	f06f 000a 	mvn.w	r0, #10
   18b4c:	e7bd      	b.n	18aca <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   18b4e:	2500      	movs	r5, #0
   18b50:	e7d1      	b.n	18af6 <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
   18b52:	f386 8811 	msr	BASEPRI, r6
   18b56:	f3bf 8f6f 	isb	sy
   18b5a:	e7f5      	b.n	18b48 <z_impl_k_mutex_lock+0xd4>
   18b5c:	20002638 	.word	0x20002638
   18b60:	20003409 	.word	0x20003409

00018b64 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   18b64:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   18b66:	6883      	ldr	r3, [r0, #8]
{
   18b68:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   18b6a:	2b00      	cmp	r3, #0
   18b6c:	d032      	beq.n	18bd4 <z_impl_k_mutex_unlock+0x70>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   18b6e:	4a1c      	ldr	r2, [pc, #112]	; (18be0 <z_impl_k_mutex_unlock+0x7c>)
   18b70:	6892      	ldr	r2, [r2, #8]
   18b72:	4293      	cmp	r3, r2
   18b74:	d131      	bne.n	18bda <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   18b76:	7bda      	ldrb	r2, [r3, #15]
   18b78:	3a01      	subs	r2, #1
   18b7a:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   18b7c:	68c3      	ldr	r3, [r0, #12]
   18b7e:	2b01      	cmp	r3, #1
   18b80:	d905      	bls.n	18b8e <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   18b82:	3b01      	subs	r3, #1
   18b84:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   18b86:	f000 fb81 	bl	1928c <k_sched_unlock>

	return 0;
   18b8a:	2000      	movs	r0, #0
}
   18b8c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   18b8e:	f04f 0340 	mov.w	r3, #64	; 0x40
   18b92:	f3ef 8511 	mrs	r5, BASEPRI
   18b96:	f383 8811 	msr	BASEPRI, r3
   18b9a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   18b9e:	6901      	ldr	r1, [r0, #16]
   18ba0:	6880      	ldr	r0, [r0, #8]
   18ba2:	f003 ffd7 	bl	1cb54 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   18ba6:	4620      	mov	r0, r4
   18ba8:	f004 fa6b 	bl	1d082 <z_unpend_first_thread>
	mutex->owner = new_owner;
   18bac:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   18bae:	b158      	cbz	r0, 18bc8 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
   18bb0:	f990 200e 	ldrsb.w	r2, [r0, #14]
   18bb4:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   18bb6:	2200      	movs	r2, #0
   18bb8:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   18bba:	f004 fa1b 	bl	1cff4 <z_ready_thread>
		z_reschedule(&lock, key);
   18bbe:	4809      	ldr	r0, [pc, #36]	; (18be4 <z_impl_k_mutex_unlock+0x80>)
   18bc0:	4629      	mov	r1, r5
   18bc2:	f000 fa99 	bl	190f8 <z_reschedule>
   18bc6:	e7de      	b.n	18b86 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   18bc8:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   18bca:	f385 8811 	msr	BASEPRI, r5
   18bce:	f3bf 8f6f 	isb	sy
   18bd2:	e7d8      	b.n	18b86 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   18bd4:	f06f 0015 	mvn.w	r0, #21
   18bd8:	e7d8      	b.n	18b8c <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   18bda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18bde:	e7d5      	b.n	18b8c <z_impl_k_mutex_unlock+0x28>
   18be0:	20002638 	.word	0x20002638
   18be4:	20003409 	.word	0x20003409

00018be8 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   18be8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   18bea:	4611      	mov	r1, r2
	__asm__ volatile(
   18bec:	f04f 0240 	mov.w	r2, #64	; 0x40
   18bf0:	f3ef 8511 	mrs	r5, BASEPRI
   18bf4:	f382 8811 	msr	BASEPRI, r2
   18bf8:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   18bfc:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   18bfe:	b19c      	cbz	r4, 18c28 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   18c00:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   18c02:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   18c04:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   18c08:	4294      	cmp	r4, r2
	list->head = node;
   18c0a:	6003      	str	r3, [r0, #0]
	list->tail = node;
   18c0c:	bf08      	it	eq
   18c0e:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   18c10:	2101      	movs	r1, #1
   18c12:	4620      	mov	r0, r4
   18c14:	f004 f80a 	bl	1cc2c <z_queue_node_peek>
   18c18:	4604      	mov	r4, r0
	__asm__ volatile(
   18c1a:	f385 8811 	msr	BASEPRI, r5
   18c1e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   18c22:	4620      	mov	r0, r4
   18c24:	b003      	add	sp, #12
   18c26:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   18c28:	ea51 0203 	orrs.w	r2, r1, r3
   18c2c:	d0f5      	beq.n	18c1a <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   18c2e:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   18c32:	e9cd 1300 	strd	r1, r3, [sp]
   18c36:	4610      	mov	r0, r2
   18c38:	4629      	mov	r1, r5
   18c3a:	f000 fae1 	bl	19200 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   18c3e:	2800      	cmp	r0, #0
   18c40:	d1ef      	bne.n	18c22 <z_impl_k_queue_get+0x3a>
   18c42:	4b02      	ldr	r3, [pc, #8]	; (18c4c <z_impl_k_queue_get+0x64>)
   18c44:	689b      	ldr	r3, [r3, #8]
   18c46:	695c      	ldr	r4, [r3, #20]
   18c48:	e7eb      	b.n	18c22 <z_impl_k_queue_get+0x3a>
   18c4a:	bf00      	nop
   18c4c:	20002638 	.word	0x20002638

00018c50 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   18c50:	b538      	push	{r3, r4, r5, lr}
   18c52:	4604      	mov	r4, r0
	__asm__ volatile(
   18c54:	f04f 0340 	mov.w	r3, #64	; 0x40
   18c58:	f3ef 8511 	mrs	r5, BASEPRI
   18c5c:	f383 8811 	msr	BASEPRI, r3
   18c60:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   18c64:	f004 fa0d 	bl	1d082 <z_unpend_first_thread>

	if (thread != NULL) {
   18c68:	b148      	cbz	r0, 18c7e <z_impl_k_sem_give+0x2e>
   18c6a:	2200      	movs	r2, #0
   18c6c:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   18c6e:	f004 f9c1 	bl	1cff4 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   18c72:	4629      	mov	r1, r5
   18c74:	4808      	ldr	r0, [pc, #32]	; (18c98 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   18c76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   18c7a:	f000 ba3d 	b.w	190f8 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   18c7e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   18c82:	429a      	cmp	r2, r3
   18c84:	bf18      	it	ne
   18c86:	3301      	addne	r3, #1
   18c88:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   18c8a:	2102      	movs	r1, #2
   18c8c:	f104 0010 	add.w	r0, r4, #16
   18c90:	f004 fc19 	bl	1d4c6 <z_handle_obj_poll_events>
}
   18c94:	e7ed      	b.n	18c72 <z_impl_k_sem_give+0x22>
   18c96:	bf00      	nop
   18c98:	20003409 	.word	0x20003409

00018c9c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   18c9c:	b513      	push	{r0, r1, r4, lr}
   18c9e:	f04f 0440 	mov.w	r4, #64	; 0x40
   18ca2:	f3ef 8111 	mrs	r1, BASEPRI
   18ca6:	f384 8811 	msr	BASEPRI, r4
   18caa:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   18cae:	6884      	ldr	r4, [r0, #8]
   18cb0:	b144      	cbz	r4, 18cc4 <z_impl_k_sem_take+0x28>
		sem->count--;
   18cb2:	3c01      	subs	r4, #1
   18cb4:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   18cb6:	f381 8811 	msr	BASEPRI, r1
   18cba:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   18cbe:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   18cc0:	b002      	add	sp, #8
   18cc2:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   18cc4:	ea52 0403 	orrs.w	r4, r2, r3
   18cc8:	d106      	bne.n	18cd8 <z_impl_k_sem_take+0x3c>
   18cca:	f381 8811 	msr	BASEPRI, r1
   18cce:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   18cd2:	f06f 000f 	mvn.w	r0, #15
   18cd6:	e7f3      	b.n	18cc0 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   18cd8:	e9cd 2300 	strd	r2, r3, [sp]
   18cdc:	4602      	mov	r2, r0
   18cde:	4802      	ldr	r0, [pc, #8]	; (18ce8 <z_impl_k_sem_take+0x4c>)
   18ce0:	f000 fa8e 	bl	19200 <z_pend_curr>
	return ret;
   18ce4:	e7ec      	b.n	18cc0 <z_impl_k_sem_take+0x24>
   18ce6:	bf00      	nop
   18ce8:	20003409 	.word	0x20003409

00018cec <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   18cec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   18cee:	4b09      	ldr	r3, [pc, #36]	; (18d14 <k_sys_work_q_init+0x28>)
   18cf0:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   18cf2:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   18cf4:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   18cf6:	9300      	str	r3, [sp, #0]
   18cf8:	4907      	ldr	r1, [pc, #28]	; (18d18 <k_sys_work_q_init+0x2c>)
   18cfa:	4808      	ldr	r0, [pc, #32]	; (18d1c <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   18cfc:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   18d00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18d04:	f44f 6200 	mov.w	r2, #2048	; 0x800
   18d08:	f000 f914 	bl	18f34 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   18d0c:	4620      	mov	r0, r4
   18d0e:	b004      	add	sp, #16
   18d10:	bd10      	pop	{r4, pc}
   18d12:	bf00      	nop
   18d14:	0001f9df 	.word	0x0001f9df
   18d18:	20005760 	.word	0x20005760
   18d1c:	20001a28 	.word	0x20001a28

00018d20 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   18d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
   18d24:	4e47      	ldr	r6, [pc, #284]	; (18e44 <work_queue_main+0x124>)
   18d26:	b085      	sub	sp, #20
   18d28:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   18d2a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   18d2e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	__asm__ volatile(
   18d32:	f04f 0340 	mov.w	r3, #64	; 0x40
   18d36:	f3ef 8711 	mrs	r7, BASEPRI
   18d3a:	f383 8811 	msr	BASEPRI, r3
   18d3e:	f3bf 8f6f 	isb	sy
   18d42:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
   18d46:	b98d      	cbnz	r5, 18d6c <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   18d48:	2102      	movs	r1, #2
   18d4a:	f104 0098 	add.w	r0, r4, #152	; 0x98
   18d4e:	f003 ffe6 	bl	1cd1e <flag_test_and_clear>
   18d52:	2800      	cmp	r0, #0
   18d54:	d135      	bne.n	18dc2 <work_queue_main+0xa2>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   18d56:	2300      	movs	r3, #0
   18d58:	e9cd 8900 	strd	r8, r9, [sp]
   18d5c:	9302      	str	r3, [sp, #8]
   18d5e:	f104 0288 	add.w	r2, r4, #136	; 0x88
   18d62:	4639      	mov	r1, r7
   18d64:	4838      	ldr	r0, [pc, #224]	; (18e48 <work_queue_main+0x128>)
   18d66:	f000 fcd9 	bl	1971c <z_sched_wait>
			continue;
   18d6a:	e7e2      	b.n	18d32 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   18d6c:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   18d70:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   18d72:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   18d76:	4295      	cmp	r5, r2
   18d78:	d101      	bne.n	18d7e <work_queue_main+0x5e>
	list->tail = node;
   18d7a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   18d7e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   18d82:	f043 0302 	orr.w	r3, r3, #2
   18d86:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   18d8a:	68eb      	ldr	r3, [r5, #12]
   18d8c:	f023 0304 	bic.w	r3, r3, #4
   18d90:	f043 0301 	orr.w	r3, r3, #1
   18d94:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   18d96:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   18d98:	f387 8811 	msr	BASEPRI, r7
   18d9c:	f3bf 8f6f 	isb	sy

		if (work != NULL) {
			bool yield;

			__ASSERT_NO_MSG(handler != NULL);
			handler(work);
   18da0:	4628      	mov	r0, r5
   18da2:	4798      	blx	r3
	__asm__ volatile(
   18da4:	f04f 0340 	mov.w	r3, #64	; 0x40
   18da8:	f3ef 8b11 	mrs	fp, BASEPRI
   18dac:	f383 8811 	msr	BASEPRI, r3
   18db0:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   18db4:	68eb      	ldr	r3, [r5, #12]
			 * starving other threads.
			 */
			key = k_spin_lock(&lock);

			flag_clear(&work->flags, K_WORK_RUNNING_BIT);
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   18db6:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   18db8:	f023 0201 	bic.w	r2, r3, #1
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   18dbc:	d40b      	bmi.n	18dd6 <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
   18dbe:	60ea      	str	r2, [r5, #12]
   18dc0:	e00e      	b.n	18de0 <work_queue_main+0xc0>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   18dc2:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   18dc6:	2200      	movs	r2, #0
   18dc8:	2101      	movs	r1, #1
   18dca:	4628      	mov	r0, r5
   18dcc:	f004 f981 	bl	1d0d2 <z_sched_wake>
   18dd0:	2800      	cmp	r0, #0
   18dd2:	d1f8      	bne.n	18dc6 <work_queue_main+0xa6>
   18dd4:	e7bf      	b.n	18d56 <work_queue_main+0x36>
	return list->head;
   18dd6:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   18dd8:	f023 0303 	bic.w	r3, r3, #3
   18ddc:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   18dde:	b970      	cbnz	r0, 18dfe <work_queue_main+0xde>
	*flagp &= ~BIT(bit);
   18de0:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   18de4:	f023 0302 	bic.w	r3, r3, #2
   18de8:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   18dec:	f38b 8811 	msr	BASEPRI, fp
   18df0:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&lock, key);

			/* Optionally yield to prevent the work queue from
			 * starving other threads.
			 */
			if (yield) {
   18df4:	05d8      	lsls	r0, r3, #23
   18df6:	d49c      	bmi.n	18d32 <work_queue_main+0x12>
	z_impl_k_yield();
   18df8:	f000 fb86 	bl	19508 <z_impl_k_yield>
}
   18dfc:	e799      	b.n	18d32 <work_queue_main+0x12>
	return node->next;
   18dfe:	2700      	movs	r7, #0
   18e00:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
   18e04:	463b      	mov	r3, r7
		if (wc->work == work) {
   18e06:	6842      	ldr	r2, [r0, #4]
   18e08:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   18e0a:	4601      	mov	r1, r0
		if (wc->work == work) {
   18e0c:	d10c      	bne.n	18e28 <work_queue_main+0x108>
	return node->next;
   18e0e:	6801      	ldr	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   18e10:	b997      	cbnz	r7, 18e38 <work_queue_main+0x118>
   18e12:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   18e14:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   18e16:	4282      	cmp	r2, r0
   18e18:	d100      	bne.n	18e1c <work_queue_main+0xfc>
	list->tail = node;
   18e1a:	6071      	str	r1, [r6, #4]
	parent->next = child;
   18e1c:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   18e20:	f7ff ff16 	bl	18c50 <z_impl_k_sem_give>
}
   18e24:	4639      	mov	r1, r7
   18e26:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   18e28:	f1ba 0f00 	cmp.w	sl, #0
   18e2c:	d0d8      	beq.n	18de0 <work_queue_main+0xc0>
	return node->next;
   18e2e:	4650      	mov	r0, sl
   18e30:	460f      	mov	r7, r1
   18e32:	f8da a000 	ldr.w	sl, [sl]
   18e36:	e7e6      	b.n	18e06 <work_queue_main+0xe6>
	return list->tail;
   18e38:	6872      	ldr	r2, [r6, #4]
	parent->next = child;
   18e3a:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   18e3c:	4290      	cmp	r0, r2
	list->tail = node;
   18e3e:	bf08      	it	eq
   18e40:	6077      	streq	r7, [r6, #4]
}
   18e42:	e7eb      	b.n	18e1c <work_queue_main+0xfc>
   18e44:	20002668 	.word	0x20002668
   18e48:	20003409 	.word	0x20003409

00018e4c <cancel_sync_locked>:
	return (*flagp & BIT(bit)) != 0U;
   18e4c:	68c3      	ldr	r3, [r0, #12]
{
   18e4e:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   18e50:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   18e54:	079b      	lsls	r3, r3, #30
{
   18e56:	4605      	mov	r5, r0
   18e58:	460c      	mov	r4, r1
	if (ret) {
   18e5a:	d50d      	bpl.n	18e78 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   18e5c:	2201      	movs	r2, #1
   18e5e:	2100      	movs	r1, #0
   18e60:	f104 0008 	add.w	r0, r4, #8
   18e64:	f003 ff4b 	bl	1ccfe <z_impl_k_sem_init>
	parent->next = child;
   18e68:	2300      	movs	r3, #0
   18e6a:	6023      	str	r3, [r4, #0]
	return list->tail;
   18e6c:	4b05      	ldr	r3, [pc, #20]	; (18e84 <cancel_sync_locked+0x38>)
	canceler->work = work;
   18e6e:	6065      	str	r5, [r4, #4]
   18e70:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   18e72:	b91a      	cbnz	r2, 18e7c <cancel_sync_locked+0x30>
	list->head = node;
   18e74:	e9c3 4400 	strd	r4, r4, [r3]
}
   18e78:	4630      	mov	r0, r6
   18e7a:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   18e7c:	6014      	str	r4, [r2, #0]
	list->tail = node;
   18e7e:	605c      	str	r4, [r3, #4]
}
   18e80:	e7fa      	b.n	18e78 <cancel_sync_locked+0x2c>
   18e82:	bf00      	nop
   18e84:	20002668 	.word	0x20002668

00018e88 <submit_to_queue_locked>:
{
   18e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   18e8a:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   18e8c:	079a      	lsls	r2, r3, #30
{
   18e8e:	4604      	mov	r4, r0
   18e90:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   18e92:	f3c3 0540 	ubfx	r5, r3, #1, #1
   18e96:	d41f      	bmi.n	18ed8 <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   18e98:	075f      	lsls	r7, r3, #29
   18e9a:	d41f      	bmi.n	18edc <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
   18e9c:	680a      	ldr	r2, [r1, #0]
   18e9e:	b90a      	cbnz	r2, 18ea4 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   18ea0:	6882      	ldr	r2, [r0, #8]
   18ea2:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   18ea4:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
   18ea6:	bf44      	itt	mi
   18ea8:	68a3      	ldrmi	r3, [r4, #8]
   18eaa:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
   18eac:	6837      	ldr	r7, [r6, #0]
			ret = 2;
   18eae:	bf4c      	ite	mi
   18eb0:	2502      	movmi	r5, #2
		ret = 1;
   18eb2:	2501      	movpl	r5, #1
	if (queue == NULL) {
   18eb4:	b37f      	cbz	r7, 18f16 <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   18eb6:	4b1b      	ldr	r3, [pc, #108]	; (18f24 <submit_to_queue_locked+0x9c>)
   18eb8:	689b      	ldr	r3, [r3, #8]
   18eba:	42bb      	cmp	r3, r7
   18ebc:	d111      	bne.n	18ee2 <submit_to_queue_locked+0x5a>
   18ebe:	f003 fe35 	bl	1cb2c <k_is_in_isr>
   18ec2:	f080 0001 	eor.w	r0, r0, #1
   18ec6:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
   18ec8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   18ecc:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   18ece:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   18ed2:	d523      	bpl.n	18f1c <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
   18ed4:	b13a      	cbz	r2, 18ee6 <submit_to_queue_locked+0x5e>
   18ed6:	b940      	cbnz	r0, 18eea <submit_to_queue_locked+0x62>
		ret = -EBUSY;
   18ed8:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   18edc:	2300      	movs	r3, #0
   18ede:	6033      	str	r3, [r6, #0]
	return ret;
   18ee0:	e013      	b.n	18f0a <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   18ee2:	2000      	movs	r0, #0
   18ee4:	e7f0      	b.n	18ec8 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
   18ee6:	071b      	lsls	r3, r3, #28
   18ee8:	d4f6      	bmi.n	18ed8 <submit_to_queue_locked+0x50>
	parent->next = child;
   18eea:	2300      	movs	r3, #0
   18eec:	6023      	str	r3, [r4, #0]
	return list->tail;
   18eee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   18ef2:	b963      	cbnz	r3, 18f0e <submit_to_queue_locked+0x86>
	list->head = node;
   18ef4:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   18ef8:	4638      	mov	r0, r7
   18efa:	f003 ff29 	bl	1cd50 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   18efe:	68e3      	ldr	r3, [r4, #12]
   18f00:	f043 0304 	orr.w	r3, r3, #4
   18f04:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   18f06:	6833      	ldr	r3, [r6, #0]
   18f08:	60a3      	str	r3, [r4, #8]
}
   18f0a:	4628      	mov	r0, r5
   18f0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   18f0e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   18f10:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   18f14:	e7f0      	b.n	18ef8 <submit_to_queue_locked+0x70>
		return -EINVAL;
   18f16:	f06f 0515 	mvn.w	r5, #21
   18f1a:	e7df      	b.n	18edc <submit_to_queue_locked+0x54>
		ret = -ENODEV;
   18f1c:	f06f 0512 	mvn.w	r5, #18
   18f20:	e7dc      	b.n	18edc <submit_to_queue_locked+0x54>
   18f22:	bf00      	nop
   18f24:	20002638 	.word	0x20002638

00018f28 <k_work_submit>:
{
   18f28:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   18f2a:	4801      	ldr	r0, [pc, #4]	; (18f30 <k_work_submit+0x8>)
   18f2c:	f003 bf70 	b.w	1ce10 <k_work_submit_to_queue>
   18f30:	20001a28 	.word	0x20001a28

00018f34 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   18f34:	b5f0      	push	{r4, r5, r6, r7, lr}
   18f36:	b089      	sub	sp, #36	; 0x24
   18f38:	4604      	mov	r4, r0
	list->head = NULL;
   18f3a:	2000      	movs	r0, #0
	list->tail = NULL;
   18f3c:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   18f40:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   18f42:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   18f46:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   18f4a:	f104 0090 	add.w	r0, r4, #144	; 0x90
   18f4e:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   18f52:	b31d      	cbz	r5, 18f9c <k_work_queue_start+0x68>
   18f54:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   18f56:	2800      	cmp	r0, #0
   18f58:	f240 1001 	movw	r0, #257	; 0x101
   18f5c:	bf08      	it	eq
   18f5e:	2001      	moveq	r0, #1
	*flagp = flags;
   18f60:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   18f64:	2000      	movs	r0, #0
   18f66:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   18f6a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   18f6e:	e9cd 3003 	strd	r3, r0, [sp, #12]
   18f72:	e9cd 0001 	strd	r0, r0, [sp, #4]
   18f76:	e9cd 6706 	strd	r6, r7, [sp, #24]
   18f7a:	4b09      	ldr	r3, [pc, #36]	; (18fa0 <k_work_queue_start+0x6c>)
   18f7c:	9400      	str	r4, [sp, #0]
   18f7e:	4620      	mov	r0, r4
   18f80:	f7ff fcda 	bl	18938 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   18f84:	b125      	cbz	r5, 18f90 <k_work_queue_start+0x5c>
   18f86:	6829      	ldr	r1, [r5, #0]
   18f88:	b111      	cbz	r1, 18f90 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   18f8a:	4620      	mov	r0, r4
   18f8c:	f003 fdd4 	bl	1cb38 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   18f90:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   18f92:	b009      	add	sp, #36	; 0x24
   18f94:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   18f98:	f003 bdd3 	b.w	1cb42 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   18f9c:	2001      	movs	r0, #1
   18f9e:	e7df      	b.n	18f60 <k_work_queue_start+0x2c>
   18fa0:	00018d21 	.word	0x00018d21

00018fa4 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   18fa4:	b513      	push	{r0, r1, r4, lr}
   18fa6:	9001      	str	r0, [sp, #4]
   18fa8:	4608      	mov	r0, r1
	__asm__ volatile(
   18faa:	f04f 0140 	mov.w	r1, #64	; 0x40
   18fae:	f3ef 8411 	mrs	r4, BASEPRI
   18fb2:	f381 8811 	msr	BASEPRI, r1
   18fb6:	f3bf 8f6f 	isb	sy
	return *flagp;
   18fba:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   18fbc:	f011 0f0e 	tst.w	r1, #14
   18fc0:	d116      	bne.n	18ff0 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   18fc2:	ea53 0c02 	orrs.w	ip, r3, r2
   18fc6:	d108      	bne.n	18fda <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   18fc8:	a901      	add	r1, sp, #4
   18fca:	f7ff ff5d 	bl	18e88 <submit_to_queue_locked>
	__asm__ volatile(
   18fce:	f384 8811 	msr	BASEPRI, r4
   18fd2:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   18fd6:	b002      	add	sp, #8
   18fd8:	bd10      	pop	{r4, pc}
	*flagp |= BIT(bit);
   18fda:	f041 0108 	orr.w	r1, r1, #8
   18fde:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   18fe0:	9901      	ldr	r1, [sp, #4]
   18fe2:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   18fe4:	3010      	adds	r0, #16
   18fe6:	4903      	ldr	r1, [pc, #12]	; (18ff4 <k_work_schedule_for_queue+0x50>)
   18fe8:	f000 fc10 	bl	1980c <z_add_timeout>
	return ret;
   18fec:	2001      	movs	r0, #1
   18fee:	e7ee      	b.n	18fce <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   18ff0:	2000      	movs	r0, #0
   18ff2:	e7ec      	b.n	18fce <k_work_schedule_for_queue+0x2a>
   18ff4:	0001cdc1 	.word	0x0001cdc1

00018ff8 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   18ff8:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   18ffa:	4801      	ldr	r0, [pc, #4]	; (19000 <k_work_schedule+0x8>)
   18ffc:	f7ff bfd2 	b.w	18fa4 <k_work_schedule_for_queue>
   19000:	20001a28 	.word	0x20001a28

00019004 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   19004:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   19006:	460c      	mov	r4, r1
   19008:	9001      	str	r0, [sp, #4]
   1900a:	4616      	mov	r6, r2
   1900c:	461d      	mov	r5, r3
	__asm__ volatile(
   1900e:	f04f 0340 	mov.w	r3, #64	; 0x40
   19012:	f3ef 8711 	mrs	r7, BASEPRI
   19016:	f383 8811 	msr	BASEPRI, r3
   1901a:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   1901e:	4608      	mov	r0, r1
   19020:	f003 fe88 	bl	1cd34 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   19024:	ea55 0306 	orrs.w	r3, r5, r6
   19028:	d109      	bne.n	1903e <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   1902a:	a901      	add	r1, sp, #4
   1902c:	4620      	mov	r0, r4
   1902e:	f7ff ff2b 	bl	18e88 <submit_to_queue_locked>
	__asm__ volatile(
   19032:	f387 8811 	msr	BASEPRI, r7
   19036:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1903a:	b003      	add	sp, #12
   1903c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   1903e:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   19040:	4906      	ldr	r1, [pc, #24]	; (1905c <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   19042:	f043 0308 	orr.w	r3, r3, #8
   19046:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   19048:	9b01      	ldr	r3, [sp, #4]
   1904a:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1904c:	f104 0010 	add.w	r0, r4, #16
   19050:	4632      	mov	r2, r6
   19052:	462b      	mov	r3, r5
   19054:	f000 fbda 	bl	1980c <z_add_timeout>
	return ret;
   19058:	2001      	movs	r0, #1
   1905a:	e7ea      	b.n	19032 <k_work_reschedule_for_queue+0x2e>
   1905c:	0001cdc1 	.word	0x0001cdc1

00019060 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   19060:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   19062:	4801      	ldr	r0, [pc, #4]	; (19068 <k_work_reschedule+0x8>)
   19064:	f7ff bfce 	b.w	19004 <k_work_reschedule_for_queue>
   19068:	20001a28 	.word	0x20001a28

0001906c <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   1906c:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   1906e:	4c08      	ldr	r4, [pc, #32]	; (19090 <z_reset_time_slice+0x24>)
   19070:	6823      	ldr	r3, [r4, #0]
   19072:	b15b      	cbz	r3, 1908c <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   19074:	f7f8 f80c 	bl	11090 <sys_clock_elapsed>
   19078:	4603      	mov	r3, r0
   1907a:	6820      	ldr	r0, [r4, #0]
   1907c:	4a05      	ldr	r2, [pc, #20]	; (19094 <z_reset_time_slice+0x28>)
   1907e:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   19080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   19084:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   19086:	2100      	movs	r1, #0
   19088:	f004 b866 	b.w	1d158 <z_set_timeout_expiry>
}
   1908c:	bd10      	pop	{r4, pc}
   1908e:	bf00      	nop
   19090:	20002678 	.word	0x20002678
   19094:	20002638 	.word	0x20002638

00019098 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   19098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1909a:	4604      	mov	r4, r0
   1909c:	460d      	mov	r5, r1
	__asm__ volatile(
   1909e:	f04f 0340 	mov.w	r3, #64	; 0x40
   190a2:	f3ef 8611 	mrs	r6, BASEPRI
   190a6:	f383 8811 	msr	BASEPRI, r3
   190aa:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   190ae:	4b0f      	ldr	r3, [pc, #60]	; (190ec <k_sched_time_slice_set+0x54>)
   190b0:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   190b2:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   190b6:	f240 30e7 	movw	r0, #999	; 0x3e7
   190ba:	6119      	str	r1, [r3, #16]
   190bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   190c0:	2300      	movs	r3, #0
   190c2:	fbe4 0107 	umlal	r0, r1, r4, r7
   190c6:	f7e7 f809 	bl	dc <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   190ca:	2c00      	cmp	r4, #0
   190cc:	4b08      	ldr	r3, [pc, #32]	; (190f0 <k_sched_time_slice_set+0x58>)
   190ce:	dc09      	bgt.n	190e4 <k_sched_time_slice_set+0x4c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
   190d0:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   190d2:	4b08      	ldr	r3, [pc, #32]	; (190f4 <k_sched_time_slice_set+0x5c>)
   190d4:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   190d6:	f7ff ffc9 	bl	1906c <z_reset_time_slice>
	__asm__ volatile(
   190da:	f386 8811 	msr	BASEPRI, r6
   190de:	f3bf 8f6f 	isb	sy
	}
}
   190e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
   190e4:	2802      	cmp	r0, #2
   190e6:	bfb8      	it	lt
   190e8:	2002      	movlt	r0, #2
   190ea:	e7f1      	b.n	190d0 <k_sched_time_slice_set+0x38>
   190ec:	20002638 	.word	0x20002638
   190f0:	20002678 	.word	0x20002678
   190f4:	20002674 	.word	0x20002674

000190f8 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   190f8:	b949      	cbnz	r1, 1910e <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   190fa:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   190fe:	b930      	cbnz	r0, 1910e <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   19100:	4b05      	ldr	r3, [pc, #20]	; (19118 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   19102:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   19104:	689b      	ldr	r3, [r3, #8]
   19106:	429a      	cmp	r2, r3
   19108:	d001      	beq.n	1910e <z_reschedule+0x16>
	ret = arch_swap(key);
   1910a:	f7f8 b847 	b.w	1119c <arch_swap>
   1910e:	f381 8811 	msr	BASEPRI, r1
   19112:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   19116:	4770      	bx	lr
   19118:	20002638 	.word	0x20002638

0001911c <k_sched_lock>:
	__asm__ volatile(
   1911c:	f04f 0340 	mov.w	r3, #64	; 0x40
   19120:	f3ef 8111 	mrs	r1, BASEPRI
   19124:	f383 8811 	msr	BASEPRI, r3
   19128:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   1912c:	4b04      	ldr	r3, [pc, #16]	; (19140 <k_sched_lock+0x24>)
   1912e:	689a      	ldr	r2, [r3, #8]
   19130:	7bd3      	ldrb	r3, [r2, #15]
   19132:	3b01      	subs	r3, #1
   19134:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   19136:	f381 8811 	msr	BASEPRI, r1
   1913a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   1913e:	4770      	bx	lr
   19140:	20002638 	.word	0x20002638

00019144 <update_cache>:
{
   19144:	b538      	push	{r3, r4, r5, lr}
   19146:	4602      	mov	r2, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
   19148:	480c      	ldr	r0, [pc, #48]	; (1917c <update_cache+0x38>)
   1914a:	4d0d      	ldr	r5, [pc, #52]	; (19180 <update_cache+0x3c>)
   1914c:	f003 ff22 	bl	1cf94 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   19150:	4604      	mov	r4, r0
   19152:	b900      	cbnz	r0, 19156 <update_cache+0x12>
   19154:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   19156:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   19158:	b94a      	cbnz	r2, 1916e <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
   1915a:	7b5a      	ldrb	r2, [r3, #13]
   1915c:	06d2      	lsls	r2, r2, #27
   1915e:	d106      	bne.n	1916e <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   19160:	69a2      	ldr	r2, [r4, #24]
   19162:	b922      	cbnz	r2, 1916e <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
   19164:	89da      	ldrh	r2, [r3, #14]
   19166:	2a7f      	cmp	r2, #127	; 0x7f
   19168:	d901      	bls.n	1916e <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
   1916a:	626b      	str	r3, [r5, #36]	; 0x24
}
   1916c:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   1916e:	429c      	cmp	r4, r3
   19170:	d001      	beq.n	19176 <update_cache+0x32>
			z_reset_time_slice();
   19172:	f7ff ff7b 	bl	1906c <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   19176:	626c      	str	r4, [r5, #36]	; 0x24
}
   19178:	e7f8      	b.n	1916c <update_cache+0x28>
   1917a:	bf00      	nop
   1917c:	20002660 	.word	0x20002660
   19180:	20002638 	.word	0x20002638

00019184 <unready_thread>:
{
   19184:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   19186:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   1918a:	7b43      	ldrb	r3, [r0, #13]
   1918c:	2a00      	cmp	r2, #0
{
   1918e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   19190:	da04      	bge.n	1919c <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   19192:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   19196:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   19198:	f003 fea7 	bl	1ceea <sys_dlist_remove>
	update_cache(thread == _current);
   1919c:	4b04      	ldr	r3, [pc, #16]	; (191b0 <unready_thread+0x2c>)
   1919e:	6898      	ldr	r0, [r3, #8]
   191a0:	1a43      	subs	r3, r0, r1
   191a2:	4258      	negs	r0, r3
   191a4:	4158      	adcs	r0, r3
}
   191a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   191aa:	f7ff bfcb 	b.w	19144 <update_cache>
   191ae:	bf00      	nop
   191b0:	20002638 	.word	0x20002638

000191b4 <pend>:
{
   191b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   191b8:	4606      	mov	r6, r0
   191ba:	4615      	mov	r5, r2
   191bc:	461c      	mov	r4, r3
	__asm__ volatile(
   191be:	f04f 0340 	mov.w	r3, #64	; 0x40
   191c2:	f3ef 8711 	mrs	r7, BASEPRI
   191c6:	f383 8811 	msr	BASEPRI, r3
   191ca:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   191ce:	f003 fee7 	bl	1cfa0 <add_to_waitq_locked>
	__asm__ volatile(
   191d2:	f387 8811 	msr	BASEPRI, r7
   191d6:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   191da:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   191de:	bf08      	it	eq
   191e0:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
   191e4:	d008      	beq.n	191f8 <pend+0x44>
   191e6:	462a      	mov	r2, r5
   191e8:	4623      	mov	r3, r4
   191ea:	f106 0018 	add.w	r0, r6, #24
   191ee:	4903      	ldr	r1, [pc, #12]	; (191fc <pend+0x48>)
}
   191f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   191f4:	f000 bb0a 	b.w	1980c <z_add_timeout>
   191f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   191fc:	0001d015 	.word	0x0001d015

00019200 <z_pend_curr>:
{
   19200:	b510      	push	{r4, lr}
	pending_current = _current;
   19202:	4b07      	ldr	r3, [pc, #28]	; (19220 <z_pend_curr+0x20>)
   19204:	6898      	ldr	r0, [r3, #8]
   19206:	4b07      	ldr	r3, [pc, #28]	; (19224 <z_pend_curr+0x24>)
{
   19208:	460c      	mov	r4, r1
	pending_current = _current;
   1920a:	6018      	str	r0, [r3, #0]
{
   1920c:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   1920e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   19212:	f7ff ffcf 	bl	191b4 <pend>
   19216:	4620      	mov	r0, r4
}
   19218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1921c:	f7f7 bfbe 	b.w	1119c <arch_swap>
   19220:	20002638 	.word	0x20002638
   19224:	20002670 	.word	0x20002670

00019228 <z_impl_k_thread_suspend>:
{
   19228:	b570      	push	{r4, r5, r6, lr}
   1922a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1922c:	3018      	adds	r0, #24
   1922e:	f003 ff6d 	bl	1d10c <z_abort_timeout>
	__asm__ volatile(
   19232:	f04f 0340 	mov.w	r3, #64	; 0x40
   19236:	f3ef 8611 	mrs	r6, BASEPRI
   1923a:	f383 8811 	msr	BASEPRI, r3
   1923e:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   19242:	f994 200d 	ldrsb.w	r2, [r4, #13]
   19246:	7b63      	ldrb	r3, [r4, #13]
   19248:	2a00      	cmp	r2, #0
   1924a:	da05      	bge.n	19258 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1924c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   19250:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   19252:	4620      	mov	r0, r4
   19254:	f003 fe49 	bl	1ceea <sys_dlist_remove>
		update_cache(thread == _current);
   19258:	4d0b      	ldr	r5, [pc, #44]	; (19288 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1925a:	7b63      	ldrb	r3, [r4, #13]
   1925c:	68a8      	ldr	r0, [r5, #8]
   1925e:	f043 0310 	orr.w	r3, r3, #16
   19262:	7363      	strb	r3, [r4, #13]
   19264:	1b03      	subs	r3, r0, r4
   19266:	4258      	negs	r0, r3
   19268:	4158      	adcs	r0, r3
   1926a:	f7ff ff6b 	bl	19144 <update_cache>
	__asm__ volatile(
   1926e:	f386 8811 	msr	BASEPRI, r6
   19272:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   19276:	68ab      	ldr	r3, [r5, #8]
   19278:	42a3      	cmp	r3, r4
   1927a:	d103      	bne.n	19284 <z_impl_k_thread_suspend+0x5c>
}
   1927c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   19280:	f003 be7e 	b.w	1cf80 <z_reschedule_unlocked>
}
   19284:	bd70      	pop	{r4, r5, r6, pc}
   19286:	bf00      	nop
   19288:	20002638 	.word	0x20002638

0001928c <k_sched_unlock>:
{
   1928c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1928e:	f04f 0340 	mov.w	r3, #64	; 0x40
   19292:	f3ef 8411 	mrs	r4, BASEPRI
   19296:	f383 8811 	msr	BASEPRI, r3
   1929a:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1929e:	4b08      	ldr	r3, [pc, #32]	; (192c0 <k_sched_unlock+0x34>)
   192a0:	689a      	ldr	r2, [r3, #8]
   192a2:	7bd3      	ldrb	r3, [r2, #15]
   192a4:	3301      	adds	r3, #1
   192a6:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   192a8:	2000      	movs	r0, #0
   192aa:	f7ff ff4b 	bl	19144 <update_cache>
	__asm__ volatile(
   192ae:	f384 8811 	msr	BASEPRI, r4
   192b2:	f3bf 8f6f 	isb	sy
}
   192b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   192ba:	f003 be61 	b.w	1cf80 <z_reschedule_unlocked>
   192be:	bf00      	nop
   192c0:	20002638 	.word	0x20002638

000192c4 <move_thread_to_end_of_prio_q>:
{
   192c4:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   192c6:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   192ca:	7b43      	ldrb	r3, [r0, #13]
   192cc:	2a00      	cmp	r2, #0
{
   192ce:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   192d0:	da04      	bge.n	192dc <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   192d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   192d6:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   192d8:	f003 fe07 	bl	1ceea <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   192dc:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   192de:	4a15      	ldr	r2, [pc, #84]	; (19334 <move_thread_to_end_of_prio_q+0x70>)
   192e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   192e4:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   192e6:	e9d2 340a 	ldrd	r3, r4, [r2, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   192ea:	f102 0528 	add.w	r5, r2, #40	; 0x28
   192ee:	42ab      	cmp	r3, r5
   192f0:	d01b      	beq.n	1932a <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   192f2:	b1d3      	cbz	r3, 1932a <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
   192f4:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   192f8:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   192fc:	4286      	cmp	r6, r0
   192fe:	d00f      	beq.n	19320 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
   19300:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   19302:	2800      	cmp	r0, #0
   19304:	dd0c      	ble.n	19320 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   19306:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   19308:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   1930c:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   1930e:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   19310:	6890      	ldr	r0, [r2, #8]
   19312:	1a43      	subs	r3, r0, r1
   19314:	4258      	negs	r0, r3
}
   19316:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   1931a:	4158      	adcs	r0, r3
   1931c:	f7ff bf12 	b.w	19144 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   19320:	42a3      	cmp	r3, r4
   19322:	d002      	beq.n	1932a <move_thread_to_end_of_prio_q+0x66>
   19324:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   19326:	2b00      	cmp	r3, #0
   19328:	d1e6      	bne.n	192f8 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
   1932a:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
   1932e:	6021      	str	r1, [r4, #0]
	list->tail = node;
   19330:	62d1      	str	r1, [r2, #44]	; 0x2c
}
   19332:	e7ed      	b.n	19310 <move_thread_to_end_of_prio_q+0x4c>
   19334:	20002638 	.word	0x20002638

00019338 <z_time_slice>:
{
   19338:	b538      	push	{r3, r4, r5, lr}
   1933a:	4601      	mov	r1, r0
	__asm__ volatile(
   1933c:	f04f 0340 	mov.w	r3, #64	; 0x40
   19340:	f3ef 8411 	mrs	r4, BASEPRI
   19344:	f383 8811 	msr	BASEPRI, r3
   19348:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   1934c:	4b15      	ldr	r3, [pc, #84]	; (193a4 <z_time_slice+0x6c>)
   1934e:	4a16      	ldr	r2, [pc, #88]	; (193a8 <z_time_slice+0x70>)
   19350:	6898      	ldr	r0, [r3, #8]
   19352:	6815      	ldr	r5, [r2, #0]
   19354:	42a8      	cmp	r0, r5
   19356:	d106      	bne.n	19366 <z_time_slice+0x2e>
			z_reset_time_slice();
   19358:	f7ff fe88 	bl	1906c <z_reset_time_slice>
	__asm__ volatile(
   1935c:	f384 8811 	msr	BASEPRI, r4
   19360:	f3bf 8f6f 	isb	sy
}
   19364:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   19366:	2500      	movs	r5, #0
   19368:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
   1936a:	4a10      	ldr	r2, [pc, #64]	; (193ac <z_time_slice+0x74>)
   1936c:	6812      	ldr	r2, [r2, #0]
   1936e:	b1ba      	cbz	r2, 193a0 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
   19370:	89c2      	ldrh	r2, [r0, #14]
   19372:	2a7f      	cmp	r2, #127	; 0x7f
   19374:	d814      	bhi.n	193a0 <z_time_slice+0x68>
		&& !z_is_thread_prevented_from_running(thread)
   19376:	7b42      	ldrb	r2, [r0, #13]
   19378:	06d2      	lsls	r2, r2, #27
   1937a:	d111      	bne.n	193a0 <z_time_slice+0x68>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1937c:	4a0c      	ldr	r2, [pc, #48]	; (193b0 <z_time_slice+0x78>)
   1937e:	f990 500e 	ldrsb.w	r5, [r0, #14]
   19382:	6812      	ldr	r2, [r2, #0]
   19384:	4295      	cmp	r5, r2
   19386:	db0b      	blt.n	193a0 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
   19388:	4a0a      	ldr	r2, [pc, #40]	; (193b4 <z_time_slice+0x7c>)
   1938a:	4290      	cmp	r0, r2
   1938c:	d008      	beq.n	193a0 <z_time_slice+0x68>
		if (ticks >= _current_cpu->slice_ticks) {
   1938e:	691a      	ldr	r2, [r3, #16]
   19390:	428a      	cmp	r2, r1
   19392:	dc02      	bgt.n	1939a <z_time_slice+0x62>
			move_thread_to_end_of_prio_q(_current);
   19394:	f7ff ff96 	bl	192c4 <move_thread_to_end_of_prio_q>
   19398:	e7de      	b.n	19358 <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
   1939a:	1a52      	subs	r2, r2, r1
		_current_cpu->slice_ticks = 0;
   1939c:	611a      	str	r2, [r3, #16]
   1939e:	e7dd      	b.n	1935c <z_time_slice+0x24>
   193a0:	2200      	movs	r2, #0
   193a2:	e7fb      	b.n	1939c <z_time_slice+0x64>
   193a4:	20002638 	.word	0x20002638
   193a8:	20002670 	.word	0x20002670
   193ac:	20002678 	.word	0x20002678
   193b0:	20002674 	.word	0x20002674
   193b4:	20001928 	.word	0x20001928

000193b8 <ready_thread>:
{
   193b8:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   193ba:	f990 200d 	ldrsb.w	r2, [r0, #13]
   193be:	7b43      	ldrb	r3, [r0, #13]
   193c0:	2a00      	cmp	r2, #0
   193c2:	db2a      	blt.n	1941a <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   193c4:	06da      	lsls	r2, r3, #27
   193c6:	d128      	bne.n	1941a <ready_thread+0x62>
   193c8:	6982      	ldr	r2, [r0, #24]
   193ca:	bb32      	cbnz	r2, 1941a <ready_thread+0x62>
	return list->head == list;
   193cc:	4a14      	ldr	r2, [pc, #80]	; (19420 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
   193ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
   193d2:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
   193d4:	e9d2 340a 	ldrd	r3, r4, [r2, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   193d8:	f102 0528 	add.w	r5, r2, #40	; 0x28
   193dc:	42ab      	cmp	r3, r5
   193de:	d017      	beq.n	19410 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   193e0:	b1b3      	cbz	r3, 19410 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
   193e2:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   193e6:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   193ea:	428e      	cmp	r6, r1
   193ec:	d00b      	beq.n	19406 <ready_thread+0x4e>
		return b2 - b1;
   193ee:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   193f0:	2900      	cmp	r1, #0
   193f2:	dd08      	ble.n	19406 <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
   193f4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   193f6:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   193fa:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   193fc:	6058      	str	r0, [r3, #4]
}
   193fe:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   19400:	2000      	movs	r0, #0
   19402:	f7ff be9f 	b.w	19144 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   19406:	42a3      	cmp	r3, r4
   19408:	d002      	beq.n	19410 <ready_thread+0x58>
   1940a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1940c:	2b00      	cmp	r3, #0
   1940e:	d1ea      	bne.n	193e6 <ready_thread+0x2e>
	node->prev = tail;
   19410:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
   19414:	6020      	str	r0, [r4, #0]
	list->tail = node;
   19416:	62d0      	str	r0, [r2, #44]	; 0x2c
}
   19418:	e7f1      	b.n	193fe <ready_thread+0x46>
}
   1941a:	bc70      	pop	{r4, r5, r6}
   1941c:	4770      	bx	lr
   1941e:	bf00      	nop
   19420:	20002638 	.word	0x20002638

00019424 <z_sched_start>:
{
   19424:	b510      	push	{r4, lr}
	__asm__ volatile(
   19426:	f04f 0240 	mov.w	r2, #64	; 0x40
   1942a:	f3ef 8411 	mrs	r4, BASEPRI
   1942e:	f382 8811 	msr	BASEPRI, r2
   19432:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   19436:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   19438:	0751      	lsls	r1, r2, #29
   1943a:	d404      	bmi.n	19446 <z_sched_start+0x22>
	__asm__ volatile(
   1943c:	f384 8811 	msr	BASEPRI, r4
   19440:	f3bf 8f6f 	isb	sy
}
   19444:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   19446:	f022 0204 	bic.w	r2, r2, #4
   1944a:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   1944c:	f7ff ffb4 	bl	193b8 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   19450:	4621      	mov	r1, r4
   19452:	4802      	ldr	r0, [pc, #8]	; (1945c <z_sched_start+0x38>)
}
   19454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   19458:	f7ff be4e 	b.w	190f8 <z_reschedule>
   1945c:	20003409 	.word	0x20003409

00019460 <z_set_prio>:
{
   19460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19462:	4604      	mov	r4, r0
	__asm__ volatile(
   19464:	f04f 0340 	mov.w	r3, #64	; 0x40
   19468:	f3ef 8611 	mrs	r6, BASEPRI
   1946c:	f383 8811 	msr	BASEPRI, r3
   19470:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   19474:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   19476:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   19478:	b249      	sxtb	r1, r1
   1947a:	d133      	bne.n	194e4 <z_set_prio+0x84>
		if (need_sched) {
   1947c:	6982      	ldr	r2, [r0, #24]
   1947e:	bb8a      	cbnz	r2, 194e4 <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   19480:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   19484:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   19486:	f003 fd30 	bl	1ceea <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1948a:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   1948c:	4a17      	ldr	r2, [pc, #92]	; (194ec <z_set_prio+0x8c>)
				thread->base.prio = prio;
   1948e:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   19490:	f063 037f 	orn	r3, r3, #127	; 0x7f
   19494:	7343      	strb	r3, [r0, #13]
   19496:	4610      	mov	r0, r2
   19498:	f850 3f28 	ldr.w	r3, [r0, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1949c:	4283      	cmp	r3, r0
   1949e:	d01b      	beq.n	194d8 <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   194a0:	b1d3      	cbz	r3, 194d8 <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
   194a2:	6ad7      	ldr	r7, [r2, #44]	; 0x2c
	int32_t b2 = thread_2->base.prio;
   194a4:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
   194a8:	42a9      	cmp	r1, r5
   194aa:	d010      	beq.n	194ce <z_set_prio+0x6e>
		return b2 - b1;
   194ac:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   194ae:	2d00      	cmp	r5, #0
   194b0:	dd0d      	ble.n	194ce <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
   194b2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   194b4:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   194b8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   194ba:	605c      	str	r4, [r3, #4]
			update_cache(1);
   194bc:	2001      	movs	r0, #1
   194be:	f7ff fe41 	bl	19144 <update_cache>
   194c2:	2001      	movs	r0, #1
	__asm__ volatile(
   194c4:	f386 8811 	msr	BASEPRI, r6
   194c8:	f3bf 8f6f 	isb	sy
}
   194cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   194ce:	42bb      	cmp	r3, r7
   194d0:	d002      	beq.n	194d8 <z_set_prio+0x78>
   194d2:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   194d4:	2b00      	cmp	r3, #0
   194d6:	d1e5      	bne.n	194a4 <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
   194d8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->prev = tail;
   194da:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
   194de:	601c      	str	r4, [r3, #0]
	list->tail = node;
   194e0:	62d4      	str	r4, [r2, #44]	; 0x2c
}
   194e2:	e7eb      	b.n	194bc <z_set_prio+0x5c>
			thread->base.prio = prio;
   194e4:	73a1      	strb	r1, [r4, #14]
   194e6:	2000      	movs	r0, #0
   194e8:	e7ec      	b.n	194c4 <z_set_prio+0x64>
   194ea:	bf00      	nop
   194ec:	20002638 	.word	0x20002638

000194f0 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   194f0:	4b04      	ldr	r3, [pc, #16]	; (19504 <z_sched_init+0x14>)
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   194f2:	2100      	movs	r1, #0
   194f4:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   194f8:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   194fc:	4608      	mov	r0, r1
   194fe:	f7ff bdcb 	b.w	19098 <k_sched_time_slice_set>
   19502:	bf00      	nop
   19504:	20002638 	.word	0x20002638

00019508 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   19508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   1950a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1950e:	f3ef 8511 	mrs	r5, BASEPRI
   19512:	f383 8811 	msr	BASEPRI, r3
   19516:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(&_kernel.ready_q.runq,
   1951a:	491a      	ldr	r1, [pc, #104]	; (19584 <z_impl_k_yield+0x7c>)
   1951c:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1951e:	7b43      	ldrb	r3, [r0, #13]
   19520:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   19524:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   19526:	f003 fce0 	bl	1ceea <sys_dlist_remove>
			       _current);
	}
	queue_thread(&_kernel.ready_q.runq, _current);
   1952a:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   1952c:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
   1952e:	4608      	mov	r0, r1
   19530:	f062 027f 	orn	r2, r2, #127	; 0x7f
   19534:	735a      	strb	r2, [r3, #13]
   19536:	f850 2f28 	ldr.w	r2, [r0, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1953a:	4282      	cmp	r2, r0
   1953c:	d01c      	beq.n	19578 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1953e:	b1da      	cbz	r2, 19578 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
   19540:	6acf      	ldr	r7, [r1, #44]	; 0x2c
	int32_t b1 = thread_1->base.prio;
   19542:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   19546:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
   1954a:	42a6      	cmp	r6, r4
   1954c:	d00f      	beq.n	1956e <z_impl_k_yield+0x66>
		return b2 - b1;
   1954e:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   19550:	2c00      	cmp	r4, #0
   19552:	dd0c      	ble.n	1956e <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
   19554:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   19556:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   1955a:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   1955c:	6053      	str	r3, [r2, #4]
	update_cache(1);
   1955e:	2001      	movs	r0, #1
   19560:	f7ff fdf0 	bl	19144 <update_cache>
   19564:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   19566:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1956a:	f7f7 be17 	b.w	1119c <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   1956e:	42ba      	cmp	r2, r7
   19570:	d002      	beq.n	19578 <z_impl_k_yield+0x70>
   19572:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   19574:	2a00      	cmp	r2, #0
   19576:	d1e6      	bne.n	19546 <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
   19578:	6aca      	ldr	r2, [r1, #44]	; 0x2c
	node->prev = tail;
   1957a:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
   1957e:	6013      	str	r3, [r2, #0]
	list->tail = node;
   19580:	62cb      	str	r3, [r1, #44]	; 0x2c
}
   19582:	e7ec      	b.n	1955e <z_impl_k_yield+0x56>
   19584:	20002638 	.word	0x20002638

00019588 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   19588:	ea50 0301 	orrs.w	r3, r0, r1
{
   1958c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19590:	4605      	mov	r5, r0
   19592:	460e      	mov	r6, r1
	if (ticks == 0) {
   19594:	d103      	bne.n	1959e <z_tick_sleep+0x16>
	z_impl_k_yield();
   19596:	f7ff ffb7 	bl	19508 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
   1959a:	2000      	movs	r0, #0
   1959c:	e033      	b.n	19606 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
   1959e:	f06f 0401 	mvn.w	r4, #1
   195a2:	1a24      	subs	r4, r4, r0
   195a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   195a8:	eb63 0301 	sbc.w	r3, r3, r1
   195ac:	2c01      	cmp	r4, #1
   195ae:	f173 0300 	sbcs.w	r3, r3, #0
   195b2:	da02      	bge.n	195ba <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   195b4:	f003 fdea 	bl	1d18c <sys_clock_tick_get_32>
   195b8:	1944      	adds	r4, r0, r5
   195ba:	f04f 0340 	mov.w	r3, #64	; 0x40
   195be:	f3ef 8811 	mrs	r8, BASEPRI
   195c2:	f383 8811 	msr	BASEPRI, r3
   195c6:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   195ca:	4f10      	ldr	r7, [pc, #64]	; (1960c <z_tick_sleep+0x84>)
   195cc:	4b10      	ldr	r3, [pc, #64]	; (19610 <z_tick_sleep+0x88>)
   195ce:	68b8      	ldr	r0, [r7, #8]
   195d0:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   195d2:	f7ff fdd7 	bl	19184 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   195d6:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   195d8:	490e      	ldr	r1, [pc, #56]	; (19614 <z_tick_sleep+0x8c>)
   195da:	462a      	mov	r2, r5
   195dc:	4633      	mov	r3, r6
   195de:	3018      	adds	r0, #24
   195e0:	f000 f914 	bl	1980c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   195e4:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   195e6:	7b53      	ldrb	r3, [r2, #13]
   195e8:	f043 0310 	orr.w	r3, r3, #16
   195ec:	7353      	strb	r3, [r2, #13]
   195ee:	4640      	mov	r0, r8
   195f0:	f7f7 fdd4 	bl	1119c <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   195f4:	f003 fdca 	bl	1d18c <sys_clock_tick_get_32>
   195f8:	1a20      	subs	r0, r4, r0
   195fa:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   195fe:	2801      	cmp	r0, #1
   19600:	f173 0300 	sbcs.w	r3, r3, #0
   19604:	dbc9      	blt.n	1959a <z_tick_sleep+0x12>
}
   19606:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1960a:	bf00      	nop
   1960c:	20002638 	.word	0x20002638
   19610:	20002670 	.word	0x20002670
   19614:	0001d015 	.word	0x0001d015

00019618 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   19618:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   1961c:	bf08      	it	eq
   1961e:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   19622:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   19624:	d106      	bne.n	19634 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   19626:	4b08      	ldr	r3, [pc, #32]	; (19648 <z_impl_k_sleep+0x30>)
   19628:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1962a:	f7ff fdfd 	bl	19228 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   1962e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   19632:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   19634:	f7ff ffa8 	bl	19588 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   19638:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1963c:	fb80 0303 	smull	r0, r3, r0, r3
   19640:	0bc0      	lsrs	r0, r0, #15
   19642:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   19646:	e7f4      	b.n	19632 <z_impl_k_sleep+0x1a>
   19648:	20002638 	.word	0x20002638

0001964c <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   1964c:	4b01      	ldr	r3, [pc, #4]	; (19654 <z_impl_k_current_get+0x8>)
   1964e:	6898      	ldr	r0, [r3, #8]
   19650:	4770      	bx	lr
   19652:	bf00      	nop
   19654:	20002638 	.word	0x20002638

00019658 <z_impl_k_is_preempt_thread>:
   19658:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/k_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   1965c:	b93b      	cbnz	r3, 1966e <z_impl_k_is_preempt_thread+0x16>
   1965e:	4b05      	ldr	r3, [pc, #20]	; (19674 <z_impl_k_is_preempt_thread+0x1c>)
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   19660:	689b      	ldr	r3, [r3, #8]
	return !arch_is_in_isr() && is_preempt(_current);
   19662:	89d8      	ldrh	r0, [r3, #14]
   19664:	287f      	cmp	r0, #127	; 0x7f
   19666:	bf8c      	ite	hi
   19668:	2000      	movhi	r0, #0
   1966a:	2001      	movls	r0, #1
   1966c:	4770      	bx	lr
   1966e:	2000      	movs	r0, #0
}
   19670:	4770      	bx	lr
   19672:	bf00      	nop
   19674:	20002638 	.word	0x20002638

00019678 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   19678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1967c:	4604      	mov	r4, r0
   1967e:	f04f 0340 	mov.w	r3, #64	; 0x40
   19682:	f3ef 8611 	mrs	r6, BASEPRI
   19686:	f383 8811 	msr	BASEPRI, r3
   1968a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   1968e:	7b43      	ldrb	r3, [r0, #13]
   19690:	071a      	lsls	r2, r3, #28
   19692:	d505      	bpl.n	196a0 <z_thread_abort+0x28>
	__asm__ volatile(
   19694:	f386 8811 	msr	BASEPRI, r6
   19698:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   1969c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   196a0:	f023 0220 	bic.w	r2, r3, #32
   196a4:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   196a8:	09d2      	lsrs	r2, r2, #7
   196aa:	d120      	bne.n	196ee <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   196ac:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   196ae:	68a3      	ldr	r3, [r4, #8]
   196b0:	b113      	cbz	r3, 196b8 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
   196b2:	4620      	mov	r0, r4
   196b4:	f003 fc21 	bl	1cefa <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   196b8:	f104 0018 	add.w	r0, r4, #24
   196bc:	f003 fd26 	bl	1d10c <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   196c0:	f104 0758 	add.w	r7, r4, #88	; 0x58
   196c4:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   196c8:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   196ca:	42bd      	cmp	r5, r7
   196cc:	d000      	beq.n	196d0 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   196ce:	b9b5      	cbnz	r5, 196fe <z_thread_abort+0x86>
		update_cache(1);
   196d0:	2001      	movs	r0, #1
   196d2:	f7ff fd37 	bl	19144 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   196d6:	4b10      	ldr	r3, [pc, #64]	; (19718 <z_thread_abort+0xa0>)
   196d8:	689b      	ldr	r3, [r3, #8]
   196da:	42a3      	cmp	r3, r4
   196dc:	d1da      	bne.n	19694 <z_thread_abort+0x1c>
   196de:	f3ef 8305 	mrs	r3, IPSR
   196e2:	2b00      	cmp	r3, #0
   196e4:	d1d6      	bne.n	19694 <z_thread_abort+0x1c>
   196e6:	4630      	mov	r0, r6
   196e8:	f7f7 fd58 	bl	1119c <arch_swap>
	return ret;
   196ec:	e7d2      	b.n	19694 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   196ee:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   196f2:	f043 0308 	orr.w	r3, r3, #8
   196f6:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   196f8:	f003 fbf7 	bl	1ceea <sys_dlist_remove>
}
   196fc:	e7d7      	b.n	196ae <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
   196fe:	4628      	mov	r0, r5
   19700:	f003 fbfb 	bl	1cefa <unpend_thread_no_timeout>
   19704:	f105 0018 	add.w	r0, r5, #24
   19708:	f003 fd00 	bl	1d10c <z_abort_timeout>
   1970c:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   19710:	4628      	mov	r0, r5
   19712:	f7ff fe51 	bl	193b8 <ready_thread>
   19716:	e7d7      	b.n	196c8 <z_thread_abort+0x50>
   19718:	20002638 	.word	0x20002638

0001971c <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   1971c:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1971e:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   19722:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   19724:	e9cd 6700 	strd	r6, r7, [sp]
   19728:	f7ff fd6a 	bl	19200 <z_pend_curr>

	if (data != NULL) {
   1972c:	b11c      	cbz	r4, 19736 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   1972e:	4b03      	ldr	r3, [pc, #12]	; (1973c <z_sched_wait+0x20>)
   19730:	689b      	ldr	r3, [r3, #8]
   19732:	695b      	ldr	r3, [r3, #20]
   19734:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   19736:	b002      	add	sp, #8
   19738:	bdd0      	pop	{r4, r6, r7, pc}
   1973a:	bf00      	nop
   1973c:	20002638 	.word	0x20002638

00019740 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   19740:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   19742:	4806      	ldr	r0, [pc, #24]	; (1975c <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   19744:	4a06      	ldr	r2, [pc, #24]	; (19760 <z_data_copy+0x20>)
   19746:	4907      	ldr	r1, [pc, #28]	; (19764 <z_data_copy+0x24>)
   19748:	1a12      	subs	r2, r2, r0
   1974a:	f001 fd35 	bl	1b1b8 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1974e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   19752:	4a05      	ldr	r2, [pc, #20]	; (19768 <z_data_copy+0x28>)
   19754:	4905      	ldr	r1, [pc, #20]	; (1976c <z_data_copy+0x2c>)
   19756:	4806      	ldr	r0, [pc, #24]	; (19770 <z_data_copy+0x30>)
   19758:	f001 bd2e 	b.w	1b1b8 <memcpy>
   1975c:	20000000 	.word	0x20000000
   19760:	200007e4 	.word	0x200007e4
   19764:	0001fa20 	.word	0x0001fa20
   19768:	00000000 	.word	0x00000000
   1976c:	0001fa20 	.word	0x0001fa20
   19770:	20000000 	.word	0x20000000

00019774 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   19774:	4b03      	ldr	r3, [pc, #12]	; (19784 <elapsed+0x10>)
   19776:	681b      	ldr	r3, [r3, #0]
   19778:	b90b      	cbnz	r3, 1977e <elapsed+0xa>
   1977a:	f7f7 bc89 	b.w	11090 <sys_clock_elapsed>
}
   1977e:	2000      	movs	r0, #0
   19780:	4770      	bx	lr
   19782:	bf00      	nop
   19784:	2000267c 	.word	0x2000267c

00019788 <next_timeout>:
	return list->head == list;
   19788:	4b11      	ldr	r3, [pc, #68]	; (197d0 <next_timeout+0x48>)

static int32_t next_timeout(void)
{
   1978a:	b510      	push	{r4, lr}
   1978c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1978e:	429c      	cmp	r4, r3
   19790:	bf08      	it	eq
   19792:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   19794:	f7ff ffee 	bl	19774 <elapsed>
   19798:	4603      	mov	r3, r0
	int32_t ret = to == NULL ? MAX_WAIT
   1979a:	b16c      	cbz	r4, 197b8 <next_timeout+0x30>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1979c:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
   197a0:	1ac0      	subs	r0, r0, r3
   197a2:	eb62 73e3 	sbc.w	r3, r2, r3, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   197a6:	2801      	cmp	r0, #1
   197a8:	f173 0200 	sbcs.w	r2, r3, #0
   197ac:	db0d      	blt.n	197ca <next_timeout+0x42>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   197ae:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   197b2:	f173 0300 	sbcs.w	r3, r3, #0
   197b6:	db01      	blt.n	197bc <next_timeout+0x34>
	int32_t ret = to == NULL ? MAX_WAIT
   197b8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   197bc:	4b05      	ldr	r3, [pc, #20]	; (197d4 <next_timeout+0x4c>)
   197be:	691b      	ldr	r3, [r3, #16]
   197c0:	b113      	cbz	r3, 197c8 <next_timeout+0x40>
   197c2:	4298      	cmp	r0, r3
   197c4:	bfa8      	it	ge
   197c6:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   197c8:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   197ca:	2000      	movs	r0, #0
   197cc:	e7f6      	b.n	197bc <next_timeout+0x34>
   197ce:	bf00      	nop
   197d0:	20000530 	.word	0x20000530
   197d4:	20002638 	.word	0x20002638

000197d8 <remove_timeout>:
{
   197d8:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   197da:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   197dc:	b168      	cbz	r0, 197fa <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   197de:	4a0a      	ldr	r2, [pc, #40]	; (19808 <remove_timeout+0x30>)
   197e0:	6852      	ldr	r2, [r2, #4]
   197e2:	4290      	cmp	r0, r2
   197e4:	d009      	beq.n	197fa <remove_timeout+0x22>
	if (next(t) != NULL) {
   197e6:	b143      	cbz	r3, 197fa <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   197e8:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   197ec:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   197f0:	1912      	adds	r2, r2, r4
   197f2:	eb41 0105 	adc.w	r1, r1, r5
   197f6:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   197fa:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   197fc:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   197fe:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   19800:	2300      	movs	r3, #0
	node->prev = NULL;
   19802:	e9c0 3300 	strd	r3, r3, [r0]
}
   19806:	bd30      	pop	{r4, r5, pc}
   19808:	20000530 	.word	0x20000530

0001980c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1980c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   19810:	bf08      	it	eq
   19812:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   19816:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19818:	4604      	mov	r4, r0
   1981a:	461f      	mov	r7, r3
   1981c:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1981e:	d067      	beq.n	198f0 <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   19820:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   19822:	f04f 0340 	mov.w	r3, #64	; 0x40
   19826:	f3ef 8611 	mrs	r6, BASEPRI
   1982a:	f383 8811 	msr	BASEPRI, r3
   1982e:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   19832:	f06f 0201 	mvn.w	r2, #1
   19836:	1b53      	subs	r3, r2, r5
   19838:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   1983c:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   19840:	2b00      	cmp	r3, #0
   19842:	db1b      	blt.n	1987c <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   19844:	4b2b      	ldr	r3, [pc, #172]	; (198f4 <z_add_timeout+0xe8>)
   19846:	e9d3 1300 	ldrd	r1, r3, [r3]
   1984a:	1a52      	subs	r2, r2, r1
   1984c:	eb6c 0303 	sbc.w	r3, ip, r3
   19850:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
   19852:	eb63 0307 	sbc.w	r3, r3, r7
   19856:	2d01      	cmp	r5, #1
   19858:	f173 0200 	sbcs.w	r2, r3, #0
   1985c:	bfbc      	itt	lt
   1985e:	2501      	movlt	r5, #1
   19860:	2300      	movlt	r3, #0
   19862:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
   19866:	4824      	ldr	r0, [pc, #144]	; (198f8 <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
   19868:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1986c:	4283      	cmp	r3, r0
   1986e:	d118      	bne.n	198a2 <z_add_timeout+0x96>
	node->prev = tail;
   19870:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
   19874:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   19878:	6044      	str	r4, [r0, #4]
}
   1987a:	e026      	b.n	198ca <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   1987c:	f7ff ff7a 	bl	19774 <elapsed>
   19880:	3501      	adds	r5, #1
   19882:	f147 0700 	adc.w	r7, r7, #0
   19886:	182d      	adds	r5, r5, r0
   19888:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
   1988c:	e9c4 5704 	strd	r5, r7, [r4, #16]
   19890:	e7e9      	b.n	19866 <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   19892:	1a52      	subs	r2, r2, r1
   19894:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
   19898:	459c      	cmp	ip, r3
   1989a:	e9c4 2504 	strd	r2, r5, [r4, #16]
   1989e:	d0e7      	beq.n	19870 <z_add_timeout+0x64>
   198a0:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   198a2:	2b00      	cmp	r3, #0
   198a4:	d0e4      	beq.n	19870 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
   198a6:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
   198aa:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
   198ae:	428a      	cmp	r2, r1
   198b0:	eb75 0e07 	sbcs.w	lr, r5, r7
   198b4:	daed      	bge.n	19892 <z_add_timeout+0x86>
				t->dticks -= to->dticks;
   198b6:	1a8a      	subs	r2, r1, r2
   198b8:	eb67 0505 	sbc.w	r5, r7, r5
   198bc:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   198c0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   198c2:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   198c6:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   198c8:	605c      	str	r4, [r3, #4]
	return list->head == list;
   198ca:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   198cc:	4283      	cmp	r3, r0
   198ce:	d00b      	beq.n	198e8 <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   198d0:	429c      	cmp	r4, r3
   198d2:	d109      	bne.n	198e8 <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   198d4:	f7ff ff58 	bl	19788 <next_timeout>

			if (next_time == 0 ||
   198d8:	b118      	cbz	r0, 198e2 <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
   198da:	4b08      	ldr	r3, [pc, #32]	; (198fc <z_add_timeout+0xf0>)
			if (next_time == 0 ||
   198dc:	691b      	ldr	r3, [r3, #16]
   198de:	4283      	cmp	r3, r0
   198e0:	d002      	beq.n	198e8 <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
   198e2:	2100      	movs	r1, #0
   198e4:	f7f7 fba2 	bl	1102c <sys_clock_set_timeout>
	__asm__ volatile(
   198e8:	f386 8811 	msr	BASEPRI, r6
   198ec:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   198f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   198f2:	bf00      	nop
   198f4:	20001ac8 	.word	0x20001ac8
   198f8:	20000530 	.word	0x20000530
   198fc:	20002638 	.word	0x20002638

00019900 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   19900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19904:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   19906:	f7ff fd17 	bl	19338 <z_time_slice>
	__asm__ volatile(
   1990a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1990e:	f3ef 8411 	mrs	r4, BASEPRI
   19912:	f383 8811 	msr	BASEPRI, r3
   19916:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1991a:	4e24      	ldr	r6, [pc, #144]	; (199ac <sys_clock_announce+0xac>)
	return list->head == list;
   1991c:	f8df 8090 	ldr.w	r8, [pc, #144]	; 199b0 <sys_clock_announce+0xb0>
   19920:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   19922:	4d24      	ldr	r5, [pc, #144]	; (199b4 <sys_clock_announce+0xb4>)
   19924:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   19928:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1992a:	4540      	cmp	r0, r8
		curr_tick += dt;
   1992c:	e9d5 1e00 	ldrd	r1, lr, [r5]
   19930:	ea4f 77e2 	mov.w	r7, r2, asr #31
   19934:	d00b      	beq.n	1994e <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   19936:	b150      	cbz	r0, 1994e <sys_clock_announce+0x4e>
   19938:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
   1993c:	429a      	cmp	r2, r3
   1993e:	eb77 090c 	sbcs.w	r9, r7, ip
   19942:	da16      	bge.n	19972 <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   19944:	1a9b      	subs	r3, r3, r2
   19946:	eb6c 0c07 	sbc.w	ip, ip, r7
   1994a:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   1994e:	1852      	adds	r2, r2, r1
   19950:	eb4e 0707 	adc.w	r7, lr, r7
   19954:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
   19958:	2500      	movs	r5, #0
   1995a:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
   1995c:	f7ff ff14 	bl	19788 <next_timeout>
   19960:	4629      	mov	r1, r5
   19962:	f7f7 fb63 	bl	1102c <sys_clock_set_timeout>
	__asm__ volatile(
   19966:	f384 8811 	msr	BASEPRI, r4
   1996a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1996e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   19972:	1859      	adds	r1, r3, r1
   19974:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
   19978:	1ad3      	subs	r3, r2, r3
   1997a:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   1997c:	2200      	movs	r2, #0
   1997e:	2300      	movs	r3, #0
   19980:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
   19984:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
   19988:	f7ff ff26 	bl	197d8 <remove_timeout>
   1998c:	f384 8811 	msr	BASEPRI, r4
   19990:	f3bf 8f6f 	isb	sy
		t->fn(t);
   19994:	6883      	ldr	r3, [r0, #8]
   19996:	4798      	blx	r3
	__asm__ volatile(
   19998:	f04f 0340 	mov.w	r3, #64	; 0x40
   1999c:	f3ef 8411 	mrs	r4, BASEPRI
   199a0:	f383 8811 	msr	BASEPRI, r3
   199a4:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   199a8:	e7bc      	b.n	19924 <sys_clock_announce+0x24>
   199aa:	bf00      	nop
   199ac:	2000267c 	.word	0x2000267c
   199b0:	20000530 	.word	0x20000530
   199b4:	20001ac8 	.word	0x20001ac8

000199b8 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   199b8:	b510      	push	{r4, lr}
   199ba:	f04f 0340 	mov.w	r3, #64	; 0x40
   199be:	f3ef 8411 	mrs	r4, BASEPRI
   199c2:	f383 8811 	msr	BASEPRI, r3
   199c6:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   199ca:	f7f7 fb61 	bl	11090 <sys_clock_elapsed>
   199ce:	4a05      	ldr	r2, [pc, #20]	; (199e4 <sys_clock_tick_get+0x2c>)
   199d0:	e9d2 3100 	ldrd	r3, r1, [r2]
   199d4:	18c0      	adds	r0, r0, r3
   199d6:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
   199da:	f384 8811 	msr	BASEPRI, r4
   199de:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   199e2:	bd10      	pop	{r4, pc}
   199e4:	20001ac8 	.word	0x20001ac8

000199e8 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   199e8:	b538      	push	{r3, r4, r5, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   199ea:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
   199ee:	3301      	adds	r3, #1
   199f0:	f142 0200 	adc.w	r2, r2, #0
   199f4:	2b02      	cmp	r3, #2
   199f6:	f172 0300 	sbcs.w	r3, r2, #0
{
   199fa:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   199fc:	d304      	bcc.n	19a08 <z_timer_expiration_handler+0x20>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   199fe:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   19a02:	490d      	ldr	r1, [pc, #52]	; (19a38 <z_timer_expiration_handler+0x50>)
   19a04:	f7ff ff02 	bl	1980c <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   19a08:	6b23      	ldr	r3, [r4, #48]	; 0x30
   19a0a:	3301      	adds	r3, #1
   19a0c:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   19a0e:	6a23      	ldr	r3, [r4, #32]
   19a10:	b10b      	cbz	r3, 19a16 <z_timer_expiration_handler+0x2e>
		timer->expiry_fn(timer);
   19a12:	4620      	mov	r0, r4
   19a14:	4798      	blx	r3
	return list->head == list;
   19a16:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19a1a:	42a5      	cmp	r5, r4
   19a1c:	d00a      	beq.n	19a34 <z_timer_expiration_handler+0x4c>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   19a1e:	b14d      	cbz	r5, 19a34 <z_timer_expiration_handler+0x4c>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   19a20:	4628      	mov	r0, r5
   19a22:	f003 fa7d 	bl	1cf20 <z_unpend_thread_no_timeout>
   19a26:	2300      	movs	r3, #0
   19a28:	67eb      	str	r3, [r5, #124]	; 0x7c

	arch_thread_return_value_set(thread, 0);

	z_ready_thread(thread);
   19a2a:	4628      	mov	r0, r5
}
   19a2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_ready_thread(thread);
   19a30:	f003 bae0 	b.w	1cff4 <z_ready_thread>
}
   19a34:	bd38      	pop	{r3, r4, r5, pc}
   19a36:	bf00      	nop
   19a38:	000199e9 	.word	0x000199e9

00019a3c <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   19a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19a40:	4611      	mov	r1, r2
   19a42:	4605      	mov	r5, r0
   19a44:	4618      	mov	r0, r3
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   19a46:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   19a4a:	bf08      	it	eq
   19a4c:	f1b1 3fff 	cmpeq.w	r1, #4294967295	; 0xffffffff
{
   19a50:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   19a54:	4688      	mov	r8, r1
   19a56:	4607      	mov	r7, r0
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   19a58:	d03c      	beq.n	19ad4 <z_impl_k_timer_start+0x98>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   19a5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   19a5e:	bf08      	it	eq
   19a60:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   19a64:	4614      	mov	r4, r2
   19a66:	461e      	mov	r6, r3
   19a68:	d013      	beq.n	19a92 <z_impl_k_timer_start+0x56>
   19a6a:	431a      	orrs	r2, r3
   19a6c:	d011      	beq.n	19a92 <z_impl_k_timer_start+0x56>
	    Z_TICK_ABS(period.ticks) < 0) {
   19a6e:	f06f 0201 	mvn.w	r2, #1
   19a72:	1b12      	subs	r2, r2, r4
   19a74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   19a78:	eb62 0203 	sbc.w	r2, r2, r3
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   19a7c:	2a00      	cmp	r2, #0
   19a7e:	da08      	bge.n	19a92 <z_impl_k_timer_start+0x56>
		period.ticks = MAX(period.ticks - 1, 1);
   19a80:	3c01      	subs	r4, #1
   19a82:	f163 0600 	sbc.w	r6, r3, #0
   19a86:	2c01      	cmp	r4, #1
   19a88:	f176 0300 	sbcs.w	r3, r6, #0
   19a8c:	bfbc      	itt	lt
   19a8e:	2401      	movlt	r4, #1
   19a90:	2600      	movlt	r6, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   19a92:	f06f 0301 	mvn.w	r3, #1
   19a96:	1a5b      	subs	r3, r3, r1
   19a98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19a9c:	eb63 0300 	sbc.w	r3, r3, r0
   19aa0:	2b00      	cmp	r3, #0
   19aa2:	da08      	bge.n	19ab6 <z_impl_k_timer_start+0x7a>
		duration.ticks = MAX(duration.ticks - 1, 0);
   19aa4:	1e4a      	subs	r2, r1, #1
   19aa6:	f160 0700 	sbc.w	r7, r0, #0
   19aaa:	2f00      	cmp	r7, #0
   19aac:	4690      	mov	r8, r2
   19aae:	bfbc      	itt	lt
   19ab0:	f04f 0800 	movlt.w	r8, #0
   19ab4:	4647      	movlt	r7, r8
	}

	(void)z_abort_timeout(&timer->timeout);
   19ab6:	4628      	mov	r0, r5
   19ab8:	f003 fb28 	bl	1d10c <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   19abc:	2300      	movs	r3, #0
   19abe:	632b      	str	r3, [r5, #48]	; 0x30
	timer->period = period;
   19ac0:	e9c5 460a 	strd	r4, r6, [r5, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   19ac4:	4642      	mov	r2, r8
   19ac6:	463b      	mov	r3, r7
   19ac8:	4628      	mov	r0, r5
   19aca:	4903      	ldr	r1, [pc, #12]	; (19ad8 <z_impl_k_timer_start+0x9c>)
		     duration);
}
   19acc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   19ad0:	f7ff be9c 	b.w	1980c <z_add_timeout>
}
   19ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19ad8:	000199e9 	.word	0x000199e9

00019adc <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   19adc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   19ae0:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   19ae2:	4b29      	ldr	r3, [pc, #164]	; (19b88 <z_impl_k_poll+0xac>)
   19ae4:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   19ae6:	2301      	movs	r3, #1
   19ae8:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   19aec:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   19af0:	ea52 0305 	orrs.w	r3, r2, r5
{
   19af4:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   19af6:	bf0c      	ite	eq
   19af8:	2301      	moveq	r3, #1
   19afa:	2300      	movne	r3, #0
   19afc:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   19b00:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   19b02:	f003 fbd1 	bl	1d2a8 <register_events>
   19b06:	4681      	mov	r9, r0
	__asm__ volatile(
   19b08:	f04f 0340 	mov.w	r3, #64	; 0x40
   19b0c:	f3ef 8a11 	mrs	sl, BASEPRI
   19b10:	f383 8811 	msr	BASEPRI, r3
   19b14:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   19b18:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   19b1c:	b964      	cbnz	r4, 19b38 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   19b1e:	4601      	mov	r1, r0
   19b20:	4652      	mov	r2, sl
   19b22:	4640      	mov	r0, r8
   19b24:	f003 fc91 	bl	1d44a <clear_event_registrations>
	__asm__ volatile(
   19b28:	f38a 8811 	msr	BASEPRI, sl
   19b2c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   19b30:	4620      	mov	r0, r4
   19b32:	b002      	add	sp, #8
   19b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   19b38:	2300      	movs	r3, #0
   19b3a:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   19b3e:	ea56 0305 	orrs.w	r3, r6, r5
   19b42:	d106      	bne.n	19b52 <z_impl_k_poll+0x76>
   19b44:	f38a 8811 	msr	BASEPRI, sl
   19b48:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   19b4c:	f06f 040a 	mvn.w	r4, #10
   19b50:	e7ee      	b.n	19b30 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   19b52:	e9cd 6500 	strd	r6, r5, [sp]
   19b56:	4a0d      	ldr	r2, [pc, #52]	; (19b8c <z_impl_k_poll+0xb0>)
   19b58:	480d      	ldr	r0, [pc, #52]	; (19b90 <z_impl_k_poll+0xb4>)
   19b5a:	4651      	mov	r1, sl
   19b5c:	f7ff fb50 	bl	19200 <z_pend_curr>
   19b60:	4604      	mov	r4, r0
	__asm__ volatile(
   19b62:	f04f 0340 	mov.w	r3, #64	; 0x40
   19b66:	f3ef 8511 	mrs	r5, BASEPRI
   19b6a:	f383 8811 	msr	BASEPRI, r3
   19b6e:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   19b72:	462a      	mov	r2, r5
   19b74:	4649      	mov	r1, r9
   19b76:	4640      	mov	r0, r8
   19b78:	f003 fc67 	bl	1d44a <clear_event_registrations>
	__asm__ volatile(
   19b7c:	f385 8811 	msr	BASEPRI, r5
   19b80:	f3bf 8f6f 	isb	sy
	return swap_rc;
   19b84:	e7d4      	b.n	19b30 <z_impl_k_poll+0x54>
   19b86:	bf00      	nop
   19b88:	20002638 	.word	0x20002638
   19b8c:	20000538 	.word	0x20000538
   19b90:	20003409 	.word	0x20003409

00019b94 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   19b94:	b538      	push	{r3, r4, r5, lr}
   19b96:	4603      	mov	r3, r0
	__asm__ volatile(
   19b98:	f04f 0240 	mov.w	r2, #64	; 0x40
   19b9c:	f3ef 8511 	mrs	r5, BASEPRI
   19ba0:	f382 8811 	msr	BASEPRI, r2
   19ba4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   19ba8:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   19baa:	2101      	movs	r1, #1
   19bac:	6081      	str	r1, [r0, #8]
	return list->head == list;
   19bae:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   19bb0:	4283      	cmp	r3, r0
   19bb2:	d106      	bne.n	19bc2 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   19bb4:	f385 8811 	msr	BASEPRI, r5
   19bb8:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   19bbc:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   19bbe:	4620      	mov	r0, r4
   19bc0:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   19bc2:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   19bc6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   19bc8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   19bca:	2300      	movs	r3, #0
	node->prev = NULL;
   19bcc:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   19bd0:	f003 fbe1 	bl	1d396 <signal_poll_event>
	z_reschedule(&lock, key);
   19bd4:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   19bd6:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   19bd8:	4801      	ldr	r0, [pc, #4]	; (19be0 <z_impl_k_poll_signal_raise+0x4c>)
   19bda:	f7ff fa8d 	bl	190f8 <z_reschedule>
	return rc;
   19bde:	e7ee      	b.n	19bbe <z_impl_k_poll_signal_raise+0x2a>
   19be0:	20003409 	.word	0x20003409

00019be4 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   19be4:	b538      	push	{r3, r4, r5, lr}
   19be6:	4604      	mov	r4, r0
   19be8:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   19bea:	f002 ff9f 	bl	1cb2c <k_is_in_isr>
   19bee:	b950      	cbnz	r0, 19c06 <z_thread_aligned_alloc+0x22>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   19bf0:	4b06      	ldr	r3, [pc, #24]	; (19c0c <z_thread_aligned_alloc+0x28>)
   19bf2:	689b      	ldr	r3, [r3, #8]
   19bf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   19bf6:	b143      	cbz	r3, 19c0a <z_thread_aligned_alloc+0x26>
		ret = z_heap_aligned_alloc(heap, align, size);
   19bf8:	462a      	mov	r2, r5
   19bfa:	4621      	mov	r1, r4
   19bfc:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   19bfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   19c02:	f003 bc6e 	b.w	1d4e2 <z_heap_aligned_alloc>
		heap = _SYSTEM_HEAP;
   19c06:	4b02      	ldr	r3, [pc, #8]	; (19c10 <z_thread_aligned_alloc+0x2c>)
   19c08:	e7f6      	b.n	19bf8 <z_thread_aligned_alloc+0x14>
}
   19c0a:	bd38      	pop	{r3, r4, r5, pc}
   19c0c:	20002638 	.word	0x20002638
   19c10:	20000640 	.word	0x20000640

00019c14 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   19c14:	4a02      	ldr	r2, [pc, #8]	; (19c20 <boot_banner+0xc>)
   19c16:	4903      	ldr	r1, [pc, #12]	; (19c24 <boot_banner+0x10>)
   19c18:	4803      	ldr	r0, [pc, #12]	; (19c28 <boot_banner+0x14>)
   19c1a:	f000 b84c 	b.w	19cb6 <printk>
   19c1e:	bf00      	nop
   19c20:	0001dffc 	.word	0x0001dffc
   19c24:	0001f9e8 	.word	0x0001f9e8
   19c28:	0001f9f7 	.word	0x0001f9f7

00019c2c <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   19c2c:	4770      	bx	lr

00019c2e <le_param_req>:
}
   19c2e:	2001      	movs	r0, #1
   19c30:	4770      	bx	lr

00019c32 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   19c32:	4603      	mov	r3, r0
   19c34:	b140      	cbz	r0, 19c48 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   19c36:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   19c38:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   19c3c:	2a02      	cmp	r2, #2
   19c3e:	d006      	beq.n	19c4e <sys_notify_validate+0x1c>
   19c40:	2a03      	cmp	r2, #3
   19c42:	d004      	beq.n	19c4e <sys_notify_validate+0x1c>
   19c44:	2a01      	cmp	r2, #1
   19c46:	d005      	beq.n	19c54 <sys_notify_validate+0x22>
		return -EINVAL;
   19c48:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   19c4c:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   19c4e:	681a      	ldr	r2, [r3, #0]
   19c50:	2a00      	cmp	r2, #0
   19c52:	d0f9      	beq.n	19c48 <sys_notify_validate+0x16>
		notify->result = 0;
   19c54:	2000      	movs	r0, #0
   19c56:	6098      	str	r0, [r3, #8]
   19c58:	4770      	bx	lr

00019c5a <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   19c5a:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   19c5c:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   19c60:	2a02      	cmp	r2, #2
{
   19c62:	b510      	push	{r4, lr}
   19c64:	4603      	mov	r3, r0
	notify->result = res;
   19c66:	6081      	str	r1, [r0, #8]
	switch (method) {
   19c68:	d00a      	beq.n	19c80 <sys_notify_finalize+0x26>
   19c6a:	2a03      	cmp	r2, #3
   19c6c:	d10b      	bne.n	19c86 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   19c6e:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   19c70:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   19c72:	2200      	movs	r2, #0
   19c74:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   19c76:	b108      	cbz	r0, 19c7c <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(sig, result);
   19c78:	f7ff ff8c 	bl	19b94 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   19c7c:	4620      	mov	r0, r4
   19c7e:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   19c80:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   19c82:	2400      	movs	r4, #0
		break;
   19c84:	e7f5      	b.n	19c72 <sys_notify_finalize+0x18>
	switch (method) {
   19c86:	2400      	movs	r4, #0
   19c88:	4620      	mov	r0, r4
   19c8a:	e7f2      	b.n	19c72 <sys_notify_finalize+0x18>

00019c8c <arch_printk_char_out>:
}
   19c8c:	2000      	movs	r0, #0
   19c8e:	4770      	bx	lr

00019c90 <str_out>:
{
   19c90:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   19c92:	688a      	ldr	r2, [r1, #8]
   19c94:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   19c96:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   19c98:	b114      	cbz	r4, 19ca0 <str_out+0x10>
   19c9a:	684b      	ldr	r3, [r1, #4]
   19c9c:	4293      	cmp	r3, r2
   19c9e:	dc01      	bgt.n	19ca4 <str_out+0x14>
		ctx->count++;
   19ca0:	608d      	str	r5, [r1, #8]
}
   19ca2:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   19ca4:	3b01      	subs	r3, #1
   19ca6:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   19ca8:	bf08      	it	eq
   19caa:	2200      	moveq	r2, #0
   19cac:	608d      	str	r5, [r1, #8]
   19cae:	bf0c      	ite	eq
   19cb0:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   19cb2:	54a0      	strbne	r0, [r4, r2]
   19cb4:	e7f5      	b.n	19ca2 <str_out+0x12>

00019cb6 <printk>:
{
   19cb6:	b40f      	push	{r0, r1, r2, r3}
   19cb8:	b507      	push	{r0, r1, r2, lr}
   19cba:	a904      	add	r1, sp, #16
   19cbc:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   19cc0:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   19cc2:	f7f5 fc29 	bl	f518 <vprintk>
}
   19cc6:	b003      	add	sp, #12
   19cc8:	f85d eb04 	ldr.w	lr, [sp], #4
   19ccc:	b004      	add	sp, #16
   19cce:	4770      	bx	lr

00019cd0 <snprintk>:
{
   19cd0:	b40c      	push	{r2, r3}
   19cd2:	b507      	push	{r0, r1, r2, lr}
   19cd4:	ab04      	add	r3, sp, #16
   19cd6:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   19cda:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   19cdc:	f7f5 fc2a 	bl	f534 <vsnprintk>
}
   19ce0:	b003      	add	sp, #12
   19ce2:	f85d eb04 	ldr.w	lr, [sp], #4
   19ce6:	b002      	add	sp, #8
   19ce8:	4770      	bx	lr

00019cea <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   19cea:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   19cec:	f013 0307 	ands.w	r3, r3, #7
   19cf0:	d105      	bne.n	19cfe <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   19cf2:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   19cf4:	2b00      	cmp	r3, #0
   19cf6:	bf0c      	ite	eq
   19cf8:	2000      	moveq	r0, #0
   19cfa:	2003      	movne	r0, #3
   19cfc:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   19cfe:	2b02      	cmp	r3, #2
   19d00:	d105      	bne.n	19d0e <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   19d02:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
   19d04:	2b00      	cmp	r3, #0
   19d06:	bf14      	ite	ne
   19d08:	2000      	movne	r0, #0
   19d0a:	2004      	moveq	r0, #4
   19d0c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   19d0e:	2b01      	cmp	r3, #1
   19d10:	d105      	bne.n	19d1e <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   19d12:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   19d14:	2b00      	cmp	r3, #0
   19d16:	bf0c      	ite	eq
   19d18:	2000      	moveq	r0, #0
   19d1a:	2005      	movne	r0, #5
   19d1c:	4770      	bx	lr
	int evt = EVT_NOP;
   19d1e:	2000      	movs	r0, #0
}
   19d20:	4770      	bx	lr

00019d22 <notify_one>:
{
   19d22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19d26:	460d      	mov	r5, r1
   19d28:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   19d2a:	4619      	mov	r1, r3
   19d2c:	1d28      	adds	r0, r5, #4
{
   19d2e:	4690      	mov	r8, r2
   19d30:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   19d32:	f7ff ff92 	bl	19c5a <sys_notify_finalize>
	if (cb) {
   19d36:	4604      	mov	r4, r0
   19d38:	b138      	cbz	r0, 19d4a <notify_one+0x28>
		cb(mgr, cli, state, res);
   19d3a:	4633      	mov	r3, r6
   19d3c:	4642      	mov	r2, r8
   19d3e:	4629      	mov	r1, r5
   19d40:	4638      	mov	r0, r7
   19d42:	46a4      	mov	ip, r4
}
   19d44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   19d48:	4760      	bx	ip
}
   19d4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00019d4e <transition_complete>:
{
   19d4e:	b410      	push	{r4}
	__asm__ volatile(
   19d50:	f04f 0440 	mov.w	r4, #64	; 0x40
   19d54:	f3ef 8211 	mrs	r2, BASEPRI
   19d58:	f384 8811 	msr	BASEPRI, r4
   19d5c:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   19d60:	6141      	str	r1, [r0, #20]
}
   19d62:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   19d64:	2101      	movs	r1, #1
   19d66:	f7f5 bbf9 	b.w	f55c <process_event>

00019d6a <validate_args>:
{
   19d6a:	b510      	push	{r4, lr}
   19d6c:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   19d6e:	b140      	cbz	r0, 19d82 <validate_args+0x18>
   19d70:	b139      	cbz	r1, 19d82 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   19d72:	1d08      	adds	r0, r1, #4
   19d74:	f7ff ff5d 	bl	19c32 <sys_notify_validate>
	if ((rv == 0)
   19d78:	b928      	cbnz	r0, 19d86 <validate_args+0x1c>
	    && ((cli->notify.flags
   19d7a:	68a3      	ldr	r3, [r4, #8]
   19d7c:	f033 0303 	bics.w	r3, r3, #3
   19d80:	d001      	beq.n	19d86 <validate_args+0x1c>
		rv = -EINVAL;
   19d82:	f06f 0015 	mvn.w	r0, #21
}
   19d86:	bd10      	pop	{r4, pc}

00019d88 <onoff_manager_init>:
{
   19d88:	b538      	push	{r3, r4, r5, lr}
   19d8a:	460c      	mov	r4, r1
	if ((mgr == NULL)
   19d8c:	4605      	mov	r5, r0
   19d8e:	b158      	cbz	r0, 19da8 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   19d90:	b151      	cbz	r1, 19da8 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   19d92:	680b      	ldr	r3, [r1, #0]
   19d94:	b143      	cbz	r3, 19da8 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   19d96:	684b      	ldr	r3, [r1, #4]
   19d98:	b133      	cbz	r3, 19da8 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   19d9a:	221c      	movs	r2, #28
   19d9c:	2100      	movs	r1, #0
   19d9e:	f001 fa16 	bl	1b1ce <memset>
   19da2:	612c      	str	r4, [r5, #16]
	return 0;
   19da4:	2000      	movs	r0, #0
}
   19da6:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   19da8:	f06f 0015 	mvn.w	r0, #21
   19dac:	e7fb      	b.n	19da6 <onoff_manager_init+0x1e>

00019dae <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   19dae:	b570      	push	{r4, r5, r6, lr}
   19db0:	4604      	mov	r4, r0
   19db2:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   19db4:	f7ff ffd9 	bl	19d6a <validate_args>

	if (rv < 0) {
   19db8:	1e05      	subs	r5, r0, #0
   19dba:	db31      	blt.n	19e20 <onoff_request+0x72>
   19dbc:	f04f 0340 	mov.w	r3, #64	; 0x40
   19dc0:	f3ef 8111 	mrs	r1, BASEPRI
   19dc4:	f383 8811 	msr	BASEPRI, r3
   19dc8:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   19dcc:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   19dce:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   19dd0:	f64f 75ff 	movw	r5, #65535	; 0xffff
   19dd4:	42ab      	cmp	r3, r5
   19dd6:	f000 0207 	and.w	r2, r0, #7
   19dda:	d02e      	beq.n	19e3a <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   19ddc:	2a02      	cmp	r2, #2
   19dde:	d10e      	bne.n	19dfe <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   19de0:	3301      	adds	r3, #1
   19de2:	8363      	strh	r3, [r4, #26]
	rv = state;
   19de4:	4615      	mov	r5, r2
		notify = true;
   19de6:	2301      	movs	r3, #1
	__asm__ volatile(
   19de8:	f381 8811 	msr	BASEPRI, r1
   19dec:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   19df0:	b1b3      	cbz	r3, 19e20 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   19df2:	2300      	movs	r3, #0
   19df4:	4631      	mov	r1, r6
   19df6:	4620      	mov	r0, r4
   19df8:	f7ff ff93 	bl	19d22 <notify_one>
   19dfc:	e010      	b.n	19e20 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   19dfe:	0783      	lsls	r3, r0, #30
   19e00:	d001      	beq.n	19e06 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   19e02:	2a06      	cmp	r2, #6
   19e04:	d10e      	bne.n	19e24 <onoff_request+0x76>
	parent->next = child;
   19e06:	2300      	movs	r3, #0
   19e08:	6033      	str	r3, [r6, #0]
	return list->tail;
   19e0a:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   19e0c:	b993      	cbnz	r3, 19e34 <onoff_request+0x86>
	list->head = node;
   19e0e:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   19e12:	4615      	mov	r5, r2
   19e14:	b962      	cbnz	r2, 19e30 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   19e16:	460a      	mov	r2, r1
   19e18:	4620      	mov	r0, r4
   19e1a:	2102      	movs	r1, #2
   19e1c:	f7f5 fb9e 	bl	f55c <process_event>
		}
	}

	return rv;
}
   19e20:	4628      	mov	r0, r5
   19e22:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   19e24:	2a05      	cmp	r2, #5
   19e26:	bf0c      	ite	eq
   19e28:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   19e2c:	f06f 0504 	mvnne.w	r5, #4
   19e30:	2300      	movs	r3, #0
   19e32:	e7d9      	b.n	19de8 <onoff_request+0x3a>
	parent->next = child;
   19e34:	601e      	str	r6, [r3, #0]
	list->tail = node;
   19e36:	6066      	str	r6, [r4, #4]
}
   19e38:	e7eb      	b.n	19e12 <onoff_request+0x64>
		rv = -EAGAIN;
   19e3a:	f06f 050a 	mvn.w	r5, #10
   19e3e:	e7f7      	b.n	19e30 <onoff_request+0x82>

00019e40 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   19e40:	4604      	mov	r4, r0
   19e42:	b508      	push	{r3, lr}
   19e44:	4608      	mov	r0, r1
   19e46:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   19e48:	461a      	mov	r2, r3
   19e4a:	47a0      	blx	r4
	return z_impl_k_current_get();
   19e4c:	f7ff fbfe 	bl	1964c <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   19e50:	f7f7 fde0 	bl	11a14 <z_impl_k_thread_abort>

00019e54 <chunk_field>:
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   19e54:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   19e56:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   19e5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   19e5e:	bf2c      	ite	cs
   19e60:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
   19e64:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   19e68:	4770      	bx	lr

00019e6a <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   19e6a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
   19e6e:	6880      	ldr	r0, [r0, #8]
   19e70:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   19e74:	bf2c      	ite	cs
   19e76:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   19e7a:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   19e7e:	4770      	bx	lr

00019e80 <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
   19e80:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   19e82:	2201      	movs	r2, #1
   19e84:	f7ff ffe6 	bl	19e54 <chunk_field>
}
   19e88:	40d0      	lsrs	r0, r2
   19e8a:	bd08      	pop	{r3, pc}

00019e8c <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   19e8c:	6883      	ldr	r3, [r0, #8]
   19e8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
   19e92:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   19e96:	d308      	bcc.n	19eaa <set_chunk_used+0x1e>
		if (used) {
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   19e98:	684b      	ldr	r3, [r1, #4]
		if (used) {
   19e9a:	b11a      	cbz	r2, 19ea4 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   19e9c:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   19ea0:	604b      	str	r3, [r1, #4]
   19ea2:	4770      	bx	lr
   19ea4:	f023 0301 	bic.w	r3, r3, #1
   19ea8:	e7fa      	b.n	19ea0 <set_chunk_used+0x14>
		}
	} else {
		if (used) {
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   19eaa:	884b      	ldrh	r3, [r1, #2]
		if (used) {
   19eac:	b11a      	cbz	r2, 19eb6 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   19eae:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   19eb2:	804b      	strh	r3, [r1, #2]
		}
	}
}
   19eb4:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   19eb6:	f023 0301 	bic.w	r3, r3, #1
   19eba:	e7fa      	b.n	19eb2 <set_chunk_used+0x26>

00019ebc <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   19ebc:	0053      	lsls	r3, r2, #1
   19ebe:	2201      	movs	r2, #1
   19ec0:	f7ff bfd3 	b.w	19e6a <chunk_set>

00019ec4 <bucket_idx.isra.0>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   19ec4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   19ec8:	bf2c      	ite	cs
   19eca:	2008      	movcs	r0, #8
   19ecc:	2004      	movcc	r0, #4
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   19ece:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   19ed0:	3008      	adds	r0, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   19ed2:	eba1 00d0 	sub.w	r0, r1, r0, lsr #3
	return 31 - __builtin_clz(usable_sz);
   19ed6:	fab0 f080 	clz	r0, r0
}
   19eda:	f1c0 001f 	rsb	r0, r0, #31
   19ede:	4770      	bx	lr

00019ee0 <free_list_remove_bidx>:

	return ret;
}

static void free_list_remove_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
   19ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19ee4:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   19ee6:	2203      	movs	r2, #3
   19ee8:	460e      	mov	r6, r1
   19eea:	4604      	mov	r4, r0
   19eec:	f7ff ffb2 	bl	19e54 <chunk_field>

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & (1 << bidx));

	if (next_free_chunk(h, c) == c) {
   19ef0:	4286      	cmp	r6, r0
   19ef2:	4605      	mov	r5, r0
   19ef4:	f107 0804 	add.w	r8, r7, #4
   19ef8:	d10b      	bne.n	19f12 <free_list_remove_bidx+0x32>
		/* this is the last chunk */
		h->avail_buckets &= ~(1 << bidx);
   19efa:	2301      	movs	r3, #1
   19efc:	fa03 f707 	lsl.w	r7, r3, r7
   19f00:	68e3      	ldr	r3, [r4, #12]
   19f02:	ea23 0307 	bic.w	r3, r3, r7
   19f06:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   19f08:	2300      	movs	r3, #0
   19f0a:	f844 3028 	str.w	r3, [r4, r8, lsl #2]

		b->next = second;
		set_next_free_chunk(h, first, second);
		set_prev_free_chunk(h, second, first);
	}
}
   19f0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   19f12:	4631      	mov	r1, r6
   19f14:	2202      	movs	r2, #2
   19f16:	4620      	mov	r0, r4
   19f18:	f7ff ff9c 	bl	19e54 <chunk_field>
	chunk_set(h, c, FREE_NEXT, next);
   19f1c:	462b      	mov	r3, r5
	return chunk_field(h, c, FREE_PREV);
   19f1e:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   19f20:	4601      	mov	r1, r0
		b->next = second;
   19f22:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   19f26:	4620      	mov	r0, r4
   19f28:	2203      	movs	r2, #3
   19f2a:	f7ff ff9e 	bl	19e6a <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   19f2e:	4633      	mov	r3, r6
   19f30:	4629      	mov	r1, r5
   19f32:	4620      	mov	r0, r4
   19f34:	2202      	movs	r2, #2
}
   19f36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   19f3a:	f7ff bf96 	b.w	19e6a <chunk_set>

00019f3e <free_list_remove>:

static void free_list_remove(struct z_heap *h, chunkid_t c)
{
   19f3e:	b570      	push	{r4, r5, r6, lr}
	return big_heap_chunks(h->end_chunk);
   19f40:	6886      	ldr	r6, [r0, #8]
   19f42:	460d      	mov	r5, r1
   19f44:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
   19f46:	f7ff ff9b 	bl	19e80 <chunk_size>
   19f4a:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   19f4e:	4601      	mov	r1, r0
   19f50:	d301      	bcc.n	19f56 <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   19f52:	2801      	cmp	r0, #1
   19f54:	d009      	beq.n	19f6a <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   19f56:	4630      	mov	r0, r6
   19f58:	f7ff ffb4 	bl	19ec4 <bucket_idx.isra.0>
		free_list_remove_bidx(h, c, bidx);
   19f5c:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   19f5e:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   19f60:	4620      	mov	r0, r4
	}
}
   19f62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		free_list_remove_bidx(h, c, bidx);
   19f66:	f7ff bfbb 	b.w	19ee0 <free_list_remove_bidx>
}
   19f6a:	bd70      	pop	{r4, r5, r6, pc}

00019f6c <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   19f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19f70:	4605      	mov	r5, r0
	int bi = bucket_idx(h, sz);
   19f72:	6880      	ldr	r0, [r0, #8]
{
   19f74:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
   19f76:	f7ff ffa5 	bl	19ec4 <bucket_idx.isra.0>
   19f7a:	eb05 0a80 	add.w	sl, r5, r0, lsl #2
   19f7e:	4606      	mov	r6, r0
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   19f80:	f8da 9010 	ldr.w	r9, [sl, #16]
   19f84:	f1b9 0f00 	cmp.w	r9, #0
   19f88:	d01b      	beq.n	19fc2 <alloc_chunk+0x56>
   19f8a:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   19f8c:	f8da 4010 	ldr.w	r4, [sl, #16]
			if (chunk_size(h, c) >= sz) {
   19f90:	4628      	mov	r0, r5
   19f92:	4621      	mov	r1, r4
   19f94:	f7ff ff74 	bl	19e80 <chunk_size>
   19f98:	4540      	cmp	r0, r8
   19f9a:	d307      	bcc.n	19fac <alloc_chunk+0x40>
				free_list_remove_bidx(h, c, bi);
   19f9c:	4632      	mov	r2, r6

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   19f9e:	4621      	mov	r1, r4
   19fa0:	4628      	mov	r0, r5
   19fa2:	f7ff ff9d 	bl	19ee0 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   19fa6:	4620      	mov	r0, r4
   19fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return chunk_field(h, c, FREE_NEXT);
   19fac:	2203      	movs	r2, #3
   19fae:	4621      	mov	r1, r4
   19fb0:	4628      	mov	r0, r5
   19fb2:	f7ff ff4f 	bl	19e54 <chunk_field>
		} while (--i && b->next != first);
   19fb6:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   19fb8:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
   19fbc:	d001      	beq.n	19fc2 <alloc_chunk+0x56>
   19fbe:	4581      	cmp	r9, r0
   19fc0:	d1e4      	bne.n	19f8c <alloc_chunk+0x20>
	uint32_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   19fc2:	68e9      	ldr	r1, [r5, #12]
   19fc4:	3601      	adds	r6, #1
   19fc6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   19fca:	40b4      	lsls	r4, r6
	if (bmask != 0U) {
   19fcc:	400c      	ands	r4, r1
   19fce:	d0ea      	beq.n	19fa6 <alloc_chunk+0x3a>
		int minbucket = __builtin_ctz(bmask);
   19fd0:	fa94 f2a4 	rbit	r2, r4
   19fd4:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   19fd8:	1d13      	adds	r3, r2, #4
   19fda:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
   19fde:	e7de      	b.n	19f9e <alloc_chunk+0x32>

00019fe0 <split_chunks>:
{
   19fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19fe4:	4614      	mov	r4, r2
   19fe6:	4605      	mov	r5, r0
   19fe8:	460e      	mov	r6, r1
	chunksz_t sz0 = chunk_size(h, lc);
   19fea:	f7ff ff49 	bl	19e80 <chunk_size>
	chunksz_t lsz = rc - lc;
   19fee:	eba4 0806 	sub.w	r8, r4, r6
	chunksz_t rsz = sz0 - lsz;
   19ff2:	1b37      	subs	r7, r6, r4
   19ff4:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
   19ff6:	4642      	mov	r2, r8
   19ff8:	4631      	mov	r1, r6
   19ffa:	4628      	mov	r0, r5
   19ffc:	f7ff ff5e 	bl	19ebc <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   1a000:	463a      	mov	r2, r7
   1a002:	4621      	mov	r1, r4
   1a004:	4628      	mov	r0, r5
   1a006:	f7ff ff59 	bl	19ebc <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1a00a:	4643      	mov	r3, r8
   1a00c:	2200      	movs	r2, #0
   1a00e:	4621      	mov	r1, r4
   1a010:	4628      	mov	r0, r5
   1a012:	f7ff ff2a 	bl	19e6a <chunk_set>
	return c + chunk_size(h, c);
   1a016:	4621      	mov	r1, r4
   1a018:	4628      	mov	r0, r5
   1a01a:	f7ff ff31 	bl	19e80 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1a01e:	463b      	mov	r3, r7
   1a020:	1821      	adds	r1, r4, r0
   1a022:	2200      	movs	r2, #0
   1a024:	4628      	mov	r0, r5
}
   1a026:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1a02a:	f7ff bf1e 	b.w	19e6a <chunk_set>

0001a02e <merge_chunks>:
{
   1a02e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a032:	4616      	mov	r6, r2
   1a034:	4604      	mov	r4, r0
   1a036:	460f      	mov	r7, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1a038:	f7ff ff22 	bl	19e80 <chunk_size>
   1a03c:	4631      	mov	r1, r6
   1a03e:	4605      	mov	r5, r0
   1a040:	4620      	mov	r0, r4
   1a042:	f7ff ff1d 	bl	19e80 <chunk_size>
   1a046:	4405      	add	r5, r0
	set_chunk_size(h, lc, newsz);
   1a048:	462a      	mov	r2, r5
   1a04a:	4639      	mov	r1, r7
   1a04c:	4620      	mov	r0, r4
   1a04e:	f7ff ff35 	bl	19ebc <set_chunk_size>
	return c + chunk_size(h, c);
   1a052:	4631      	mov	r1, r6
   1a054:	4620      	mov	r0, r4
   1a056:	f7ff ff13 	bl	19e80 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1a05a:	462b      	mov	r3, r5
   1a05c:	1831      	adds	r1, r6, r0
   1a05e:	2200      	movs	r2, #0
   1a060:	4620      	mov	r0, r4
}
   1a062:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1a066:	f7ff bf00 	b.w	19e6a <chunk_set>

0001a06a <free_list_add>:
{
   1a06a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return big_heap_chunks(h->end_chunk);
   1a06e:	6886      	ldr	r6, [r0, #8]
   1a070:	460d      	mov	r5, r1
   1a072:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
   1a074:	f7ff ff04 	bl	19e80 <chunk_size>
   1a078:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   1a07c:	4601      	mov	r1, r0
   1a07e:	d301      	bcc.n	1a084 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   1a080:	2801      	cmp	r0, #1
   1a082:	d033      	beq.n	1a0ec <free_list_add+0x82>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1a084:	4630      	mov	r0, r6
   1a086:	f7ff ff1d 	bl	19ec4 <bucket_idx.isra.0>
	if (b->next == 0U) {
   1a08a:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   1a08e:	6916      	ldr	r6, [r2, #16]
   1a090:	b99e      	cbnz	r6, 1a0ba <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   1a092:	2301      	movs	r3, #1
   1a094:	fa03 f000 	lsl.w	r0, r3, r0
   1a098:	68e3      	ldr	r3, [r4, #12]
   1a09a:	4303      	orrs	r3, r0
   1a09c:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   1a09e:	4629      	mov	r1, r5
		b->next = c;
   1a0a0:	6115      	str	r5, [r2, #16]
   1a0a2:	462b      	mov	r3, r5
   1a0a4:	2202      	movs	r2, #2
   1a0a6:	4620      	mov	r0, r4
   1a0a8:	f7ff fedf 	bl	19e6a <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1a0ac:	2203      	movs	r2, #3
   1a0ae:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   1a0b0:	4620      	mov	r0, r4
}
   1a0b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1a0b6:	f7ff bed8 	b.w	19e6a <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   1a0ba:	2202      	movs	r2, #2
   1a0bc:	4631      	mov	r1, r6
   1a0be:	4620      	mov	r0, r4
   1a0c0:	f7ff fec8 	bl	19e54 <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
   1a0c4:	4629      	mov	r1, r5
   1a0c6:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
   1a0c8:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   1a0ca:	4620      	mov	r0, r4
   1a0cc:	f7ff fecd 	bl	19e6a <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1a0d0:	2203      	movs	r2, #3
   1a0d2:	4633      	mov	r3, r6
   1a0d4:	4629      	mov	r1, r5
   1a0d6:	4620      	mov	r0, r4
   1a0d8:	f7ff fec7 	bl	19e6a <chunk_set>
   1a0dc:	4639      	mov	r1, r7
   1a0de:	462b      	mov	r3, r5
   1a0e0:	4620      	mov	r0, r4
   1a0e2:	f7ff fec2 	bl	19e6a <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1a0e6:	2202      	movs	r2, #2
   1a0e8:	4631      	mov	r1, r6
   1a0ea:	e7e1      	b.n	1a0b0 <free_list_add+0x46>
   1a0ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001a0f0 <free_chunk>:
{
   1a0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a0f2:	460c      	mov	r4, r1
   1a0f4:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   1a0f6:	f7ff fec3 	bl	19e80 <chunk_size>
   1a0fa:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1a0fc:	2201      	movs	r2, #1
   1a0fe:	4631      	mov	r1, r6
   1a100:	4628      	mov	r0, r5
   1a102:	f7ff fea7 	bl	19e54 <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   1a106:	07c3      	lsls	r3, r0, #31
   1a108:	d40c      	bmi.n	1a124 <free_chunk+0x34>
		free_list_remove(h, right_chunk(h, c));
   1a10a:	4631      	mov	r1, r6
   1a10c:	4628      	mov	r0, r5
   1a10e:	f7ff ff16 	bl	19f3e <free_list_remove>
	return c + chunk_size(h, c);
   1a112:	4621      	mov	r1, r4
   1a114:	4628      	mov	r0, r5
   1a116:	f7ff feb3 	bl	19e80 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1a11a:	4621      	mov	r1, r4
   1a11c:	1822      	adds	r2, r4, r0
   1a11e:	4628      	mov	r0, r5
   1a120:	f7ff ff85 	bl	1a02e <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   1a124:	2200      	movs	r2, #0
   1a126:	4621      	mov	r1, r4
   1a128:	4628      	mov	r0, r5
   1a12a:	f7ff fe93 	bl	19e54 <chunk_field>
   1a12e:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1a130:	2201      	movs	r2, #1
   1a132:	4639      	mov	r1, r7
   1a134:	4628      	mov	r0, r5
   1a136:	f7ff fe8d 	bl	19e54 <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   1a13a:	ea10 0602 	ands.w	r6, r0, r2
   1a13e:	d113      	bne.n	1a168 <free_chunk+0x78>
		free_list_remove(h, left_chunk(h, c));
   1a140:	4639      	mov	r1, r7
   1a142:	4628      	mov	r0, r5
   1a144:	f7ff fefb 	bl	19f3e <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   1a148:	4621      	mov	r1, r4
   1a14a:	4632      	mov	r2, r6
   1a14c:	4628      	mov	r0, r5
   1a14e:	f7ff fe81 	bl	19e54 <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   1a152:	4622      	mov	r2, r4
   1a154:	1a21      	subs	r1, r4, r0
   1a156:	4628      	mov	r0, r5
   1a158:	f7ff ff69 	bl	1a02e <merge_chunks>
   1a15c:	4621      	mov	r1, r4
   1a15e:	4632      	mov	r2, r6
   1a160:	4628      	mov	r0, r5
   1a162:	f7ff fe77 	bl	19e54 <chunk_field>
   1a166:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   1a168:	4621      	mov	r1, r4
   1a16a:	4628      	mov	r0, r5
}
   1a16c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   1a170:	f7ff bf7b 	b.w	1a06a <free_list_add>

0001a174 <sys_heap_free>:
{
   1a174:	b510      	push	{r4, lr}
	if (mem == NULL) {
   1a176:	b191      	cbz	r1, 1a19e <sys_heap_free+0x2a>
   1a178:	6800      	ldr	r0, [r0, #0]
	return big_heap(h) ? 8 : 4;
   1a17a:	6883      	ldr	r3, [r0, #8]
   1a17c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1a180:	bf2c      	ite	cs
   1a182:	2408      	movcs	r4, #8
   1a184:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1a186:	1b0c      	subs	r4, r1, r4
   1a188:	1a24      	subs	r4, r4, r0
   1a18a:	08e4      	lsrs	r4, r4, #3
	set_chunk_used(h, c, false);
   1a18c:	4621      	mov	r1, r4
   1a18e:	2200      	movs	r2, #0
   1a190:	f7ff fe7c 	bl	19e8c <set_chunk_used>
	free_chunk(h, c);
   1a194:	4621      	mov	r1, r4
}
   1a196:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	free_chunk(h, c);
   1a19a:	f7ff bfa9 	b.w	1a0f0 <free_chunk>
}
   1a19e:	bd10      	pop	{r4, pc}

0001a1a0 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   1a1a0:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   1a1a2:	6806      	ldr	r6, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
   1a1a4:	b909      	cbnz	r1, 1a1aa <sys_heap_alloc+0xa>
		return NULL;
   1a1a6:	2000      	movs	r0, #0
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}
   1a1a8:	bd70      	pop	{r4, r5, r6, pc}
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   1a1aa:	68b3      	ldr	r3, [r6, #8]
	if (bytes == 0U || size_too_big(h, bytes)) {
   1a1ac:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   1a1b0:	d9f9      	bls.n	1a1a6 <sys_heap_alloc+0x6>
	return big_heap(h) ? 8 : 4;
   1a1b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1a1b6:	bf2c      	ite	cs
   1a1b8:	2208      	movcs	r2, #8
   1a1ba:	2204      	movcc	r2, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1a1bc:	1dcc      	adds	r4, r1, #7
   1a1be:	4414      	add	r4, r2
   1a1c0:	08e4      	lsrs	r4, r4, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1a1c2:	4621      	mov	r1, r4
   1a1c4:	4630      	mov	r0, r6
   1a1c6:	f7ff fed1 	bl	19f6c <alloc_chunk>
	if (c == 0U) {
   1a1ca:	4605      	mov	r5, r0
   1a1cc:	2800      	cmp	r0, #0
   1a1ce:	d0ea      	beq.n	1a1a6 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   1a1d0:	4601      	mov	r1, r0
   1a1d2:	4630      	mov	r0, r6
   1a1d4:	f7ff fe54 	bl	19e80 <chunk_size>
   1a1d8:	42a0      	cmp	r0, r4
   1a1da:	d909      	bls.n	1a1f0 <sys_heap_alloc+0x50>
		split_chunks(h, c, c + chunk_sz);
   1a1dc:	442c      	add	r4, r5
   1a1de:	4629      	mov	r1, r5
   1a1e0:	4630      	mov	r0, r6
   1a1e2:	4622      	mov	r2, r4
   1a1e4:	f7ff fefc 	bl	19fe0 <split_chunks>
		free_list_add(h, c + chunk_sz);
   1a1e8:	4621      	mov	r1, r4
   1a1ea:	4630      	mov	r0, r6
   1a1ec:	f7ff ff3d 	bl	1a06a <free_list_add>
	set_chunk_used(h, c, true);
   1a1f0:	4629      	mov	r1, r5
   1a1f2:	4630      	mov	r0, r6
   1a1f4:	2201      	movs	r2, #1
   1a1f6:	f7ff fe49 	bl	19e8c <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   1a1fa:	68b3      	ldr	r3, [r6, #8]
   1a1fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1a200:	bf2c      	ite	cs
   1a202:	2308      	movcs	r3, #8
   1a204:	2304      	movcc	r3, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1a206:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   1a20a:	4428      	add	r0, r5
	return chunk_mem(h, c);
   1a20c:	e7cc      	b.n	1a1a8 <sys_heap_alloc+0x8>

0001a20e <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   1a20e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_heap *h = heap->heap;
   1a212:	6806      	ldr	r6, [r0, #0]
{
   1a214:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   1a216:	424a      	negs	r2, r1
   1a218:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
   1a21c:	ea31 0202 	bics.w	r2, r1, r2
	return big_heap_chunks(h->end_chunk);
   1a220:	68b5      	ldr	r5, [r6, #8]
{
   1a222:	460b      	mov	r3, r1
	if (align != rew) {
   1a224:	d00f      	beq.n	1a246 <sys_heap_aligned_alloc+0x38>
	return big_heap(h) ? 8 : 4;
   1a226:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   1a22a:	bf34      	ite	cc
   1a22c:	2104      	movcc	r1, #4
   1a22e:	2108      	movcs	r1, #8
   1a230:	42b9      	cmp	r1, r7
   1a232:	460a      	mov	r2, r1
   1a234:	46b9      	mov	r9, r7
   1a236:	bf28      	it	cs
   1a238:	463a      	movcs	r2, r7
		align -= rew;
   1a23a:	1bdf      	subs	r7, r3, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   1a23c:	b994      	cbnz	r4, 1a264 <sys_heap_aligned_alloc+0x56>
		return NULL;
   1a23e:	2500      	movs	r5, #0
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
   1a240:	4628      	mov	r0, r5
   1a242:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1a246:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   1a24a:	bf34      	ite	cc
   1a24c:	2204      	movcc	r2, #4
   1a24e:	2208      	movcs	r2, #8
		if (align <= chunk_header_bytes(h)) {
   1a250:	4291      	cmp	r1, r2
   1a252:	d804      	bhi.n	1a25e <sys_heap_aligned_alloc+0x50>
			return sys_heap_alloc(heap, bytes);
   1a254:	4621      	mov	r1, r4
}
   1a256:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   1a25a:	f7ff bfa1 	b.w	1a1a0 <sys_heap_alloc>
		rew = 0;
   1a25e:	f04f 0900 	mov.w	r9, #0
   1a262:	e7eb      	b.n	1a23c <sys_heap_aligned_alloc+0x2e>
	if (bytes == 0 || size_too_big(h, bytes)) {
   1a264:	ebb5 0fd4 	cmp.w	r5, r4, lsr #3
   1a268:	d9e9      	bls.n	1a23e <sys_heap_aligned_alloc+0x30>
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   1a26a:	1de1      	adds	r1, r4, #7
   1a26c:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   1a270:	4439      	add	r1, r7
   1a272:	bf2c      	ite	cs
   1a274:	2308      	movcs	r3, #8
   1a276:	2304      	movcc	r3, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1a278:	1a89      	subs	r1, r1, r2
   1a27a:	4419      	add	r1, r3
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   1a27c:	08c9      	lsrs	r1, r1, #3
   1a27e:	4630      	mov	r0, r6
   1a280:	f7ff fe74 	bl	19f6c <alloc_chunk>
	if (c0 == 0) {
   1a284:	4680      	mov	r8, r0
   1a286:	2800      	cmp	r0, #0
   1a288:	d0d9      	beq.n	1a23e <sys_heap_aligned_alloc+0x30>
	return big_heap(h) ? 8 : 4;
   1a28a:	68b3      	ldr	r3, [r6, #8]
   1a28c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1a290:	bf2c      	ite	cs
   1a292:	2308      	movcs	r3, #8
   1a294:	2304      	movcc	r3, #4
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   1a296:	eb09 05c0 	add.w	r5, r9, r0, lsl #3
   1a29a:	441d      	add	r5, r3
   1a29c:	1e7a      	subs	r2, r7, #1
   1a29e:	4435      	add	r5, r6
   1a2a0:	427f      	negs	r7, r7
   1a2a2:	4415      	add	r5, r2
   1a2a4:	403d      	ands	r5, r7
   1a2a6:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1a2aa:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1a2ac:	1aeb      	subs	r3, r5, r3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1a2ae:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1a2b0:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1a2b2:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   1a2b6:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   1a2b8:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1a2bc:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   1a2c0:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   1a2c4:	d208      	bcs.n	1a2d8 <sys_heap_aligned_alloc+0xca>
		split_chunks(h, c0, c);
   1a2c6:	4601      	mov	r1, r0
   1a2c8:	463a      	mov	r2, r7
   1a2ca:	4630      	mov	r0, r6
   1a2cc:	f7ff fe88 	bl	19fe0 <split_chunks>
		free_list_add(h, c0);
   1a2d0:	4641      	mov	r1, r8
   1a2d2:	4630      	mov	r0, r6
   1a2d4:	f7ff fec9 	bl	1a06a <free_list_add>
	return c + chunk_size(h, c);
   1a2d8:	4639      	mov	r1, r7
   1a2da:	4630      	mov	r0, r6
   1a2dc:	f7ff fdd0 	bl	19e80 <chunk_size>
   1a2e0:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   1a2e2:	4284      	cmp	r4, r0
   1a2e4:	d208      	bcs.n	1a2f8 <sys_heap_aligned_alloc+0xea>
		split_chunks(h, c, c_end);
   1a2e6:	4639      	mov	r1, r7
   1a2e8:	4630      	mov	r0, r6
   1a2ea:	4622      	mov	r2, r4
   1a2ec:	f7ff fe78 	bl	19fe0 <split_chunks>
		free_list_add(h, c_end);
   1a2f0:	4621      	mov	r1, r4
   1a2f2:	4630      	mov	r0, r6
   1a2f4:	f7ff feb9 	bl	1a06a <free_list_add>
	set_chunk_used(h, c, true);
   1a2f8:	2201      	movs	r2, #1
   1a2fa:	4639      	mov	r1, r7
   1a2fc:	4630      	mov	r0, r6
   1a2fe:	f7ff fdc5 	bl	19e8c <set_chunk_used>
	return mem;
   1a302:	e79d      	b.n	1a240 <sys_heap_aligned_alloc+0x32>

0001a304 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
   1a304:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   1a308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a30a:	bf2c      	ite	cs
   1a30c:	2408      	movcs	r4, #8
   1a30e:	2404      	movcc	r4, #4
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   1a310:	1b14      	subs	r4, r2, r4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1a312:	1dce      	adds	r6, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1a314:	440c      	add	r4, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1a316:	f026 0607 	bic.w	r6, r6, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1a31a:	f024 0407 	bic.w	r4, r4, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1a31e:	1ba4      	subs	r4, r4, r6
   1a320:	08e4      	lsrs	r4, r4, #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   1a322:	2300      	movs	r3, #0
	heap->heap = h;
   1a324:	6006      	str	r6, [r0, #0]

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1a326:	4621      	mov	r1, r4
	h->end_chunk = heap_sz;
   1a328:	60b4      	str	r4, [r6, #8]
	h->avail_buckets = 0;
   1a32a:	60f3      	str	r3, [r6, #12]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1a32c:	4620      	mov	r0, r4
   1a32e:	f7ff fdc9 	bl	19ec4 <bucket_idx.isra.0>
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1a332:	0085      	lsls	r5, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1a334:	351b      	adds	r5, #27
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1a336:	1c41      	adds	r1, r0, #1
   1a338:	08ed      	lsrs	r5, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   1a33a:	f106 0210 	add.w	r2, r6, #16
		h->buckets[i].next = 0;
   1a33e:	4618      	mov	r0, r3
	for (int i = 0; i < nb_buckets; i++) {
   1a340:	428b      	cmp	r3, r1
   1a342:	db2e      	blt.n	1a3a2 <sys_heap_init+0x9e>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   1a344:	462a      	mov	r2, r5
   1a346:	4630      	mov	r0, r6
   1a348:	2100      	movs	r1, #0
   1a34a:	f7ff fdb7 	bl	19ebc <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1a34e:	2300      	movs	r3, #0
   1a350:	461a      	mov	r2, r3
   1a352:	4619      	mov	r1, r3
   1a354:	4630      	mov	r0, r6
   1a356:	f7ff fd88 	bl	19e6a <chunk_set>
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1a35a:	1b67      	subs	r7, r4, r5
	set_chunk_used(h, 0, true);
   1a35c:	4619      	mov	r1, r3
   1a35e:	4630      	mov	r0, r6
   1a360:	2201      	movs	r2, #1
   1a362:	f7ff fd93 	bl	19e8c <set_chunk_used>
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1a366:	463a      	mov	r2, r7
   1a368:	4629      	mov	r1, r5
   1a36a:	f7ff fda7 	bl	19ebc <set_chunk_size>
   1a36e:	462b      	mov	r3, r5
   1a370:	2200      	movs	r2, #0
   1a372:	4629      	mov	r1, r5
   1a374:	4630      	mov	r0, r6
   1a376:	f7ff fd78 	bl	19e6a <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
   1a37a:	4621      	mov	r1, r4
   1a37c:	4630      	mov	r0, r6
   1a37e:	f7ff fd9d 	bl	19ebc <set_chunk_size>
   1a382:	463b      	mov	r3, r7
   1a384:	4621      	mov	r1, r4
   1a386:	4630      	mov	r0, r6
   1a388:	2200      	movs	r2, #0
   1a38a:	f7ff fd6e 	bl	19e6a <chunk_set>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
   1a38e:	4621      	mov	r1, r4
   1a390:	4630      	mov	r0, r6
   1a392:	2201      	movs	r2, #1
   1a394:	f7ff fd7a 	bl	19e8c <set_chunk_used>

	free_list_add(h, chunk0_size);
   1a398:	4629      	mov	r1, r5
}
   1a39a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   1a39e:	f7ff be64 	b.w	1a06a <free_list_add>
		h->buckets[i].next = 0;
   1a3a2:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   1a3a6:	3301      	adds	r3, #1
   1a3a8:	e7ca      	b.n	1a340 <sys_heap_init+0x3c>

0001a3aa <encode_uint>:
{
   1a3aa:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a3ae:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   1a3b0:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   1a3b2:	2b6f      	cmp	r3, #111	; 0x6f
{
   1a3b4:	4680      	mov	r8, r0
   1a3b6:	460f      	mov	r7, r1
   1a3b8:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1a3ba:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   1a3be:	d029      	beq.n	1a414 <encode_uint+0x6a>
   1a3c0:	d824      	bhi.n	1a40c <encode_uint+0x62>
		return 16;
   1a3c2:	2b58      	cmp	r3, #88	; 0x58
   1a3c4:	bf14      	ite	ne
   1a3c6:	260a      	movne	r6, #10
   1a3c8:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
   1a3ca:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   1a3ce:	4632      	mov	r2, r6
   1a3d0:	2300      	movs	r3, #0
   1a3d2:	4640      	mov	r0, r8
   1a3d4:	4639      	mov	r1, r7
   1a3d6:	f7e5 fe81 	bl	dc <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1a3da:	2a09      	cmp	r2, #9
   1a3dc:	b2d4      	uxtb	r4, r2
   1a3de:	d81e      	bhi.n	1a41e <encode_uint+0x74>
   1a3e0:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   1a3e2:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1a3e4:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   1a3e6:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1a3ea:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   1a3ee:	d301      	bcc.n	1a3f4 <encode_uint+0x4a>
   1a3f0:	45d1      	cmp	r9, sl
   1a3f2:	d811      	bhi.n	1a418 <encode_uint+0x6e>
	if (conv->flag_hash) {
   1a3f4:	782b      	ldrb	r3, [r5, #0]
   1a3f6:	069b      	lsls	r3, r3, #26
   1a3f8:	d505      	bpl.n	1a406 <encode_uint+0x5c>
		if (radix == 8) {
   1a3fa:	2e08      	cmp	r6, #8
   1a3fc:	d115      	bne.n	1a42a <encode_uint+0x80>
			conv->altform_0 = true;
   1a3fe:	78ab      	ldrb	r3, [r5, #2]
   1a400:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   1a404:	70ab      	strb	r3, [r5, #2]
}
   1a406:	4648      	mov	r0, r9
   1a408:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   1a40c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   1a410:	2b70      	cmp	r3, #112	; 0x70
   1a412:	e7d7      	b.n	1a3c4 <encode_uint+0x1a>
	switch (specifier) {
   1a414:	2608      	movs	r6, #8
   1a416:	e7d8      	b.n	1a3ca <encode_uint+0x20>
		value /= radix;
   1a418:	4680      	mov	r8, r0
   1a41a:	460f      	mov	r7, r1
   1a41c:	e7d7      	b.n	1a3ce <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1a41e:	f1bb 0f19 	cmp.w	fp, #25
   1a422:	bf94      	ite	ls
   1a424:	3437      	addls	r4, #55	; 0x37
   1a426:	3457      	addhi	r4, #87	; 0x57
   1a428:	e7db      	b.n	1a3e2 <encode_uint+0x38>
		} else if (radix == 16) {
   1a42a:	2e10      	cmp	r6, #16
   1a42c:	d1eb      	bne.n	1a406 <encode_uint+0x5c>
			conv->altform_0c = true;
   1a42e:	78ab      	ldrb	r3, [r5, #2]
   1a430:	f043 0310 	orr.w	r3, r3, #16
   1a434:	e7e6      	b.n	1a404 <encode_uint+0x5a>

0001a436 <outs>:
{
   1a436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a43a:	4607      	mov	r7, r0
   1a43c:	4688      	mov	r8, r1
   1a43e:	4615      	mov	r5, r2
   1a440:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1a442:	4614      	mov	r4, r2
   1a444:	42b4      	cmp	r4, r6
   1a446:	eba4 0005 	sub.w	r0, r4, r5
   1a44a:	d302      	bcc.n	1a452 <outs+0x1c>
   1a44c:	b93e      	cbnz	r6, 1a45e <outs+0x28>
   1a44e:	7823      	ldrb	r3, [r4, #0]
   1a450:	b12b      	cbz	r3, 1a45e <outs+0x28>
		int rc = out((int)*sp++, ctx);
   1a452:	f814 0b01 	ldrb.w	r0, [r4], #1
   1a456:	4641      	mov	r1, r8
   1a458:	47b8      	blx	r7
		if (rc < 0) {
   1a45a:	2800      	cmp	r0, #0
   1a45c:	daf2      	bge.n	1a444 <outs+0xe>
}
   1a45e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001a462 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1a462:	4770      	bx	lr

0001a464 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   1a464:	2300      	movs	r3, #0
	list->head = NULL;
   1a466:	e9c0 3300 	strd	r3, r3, [r0]
}
   1a46a:	4770      	bx	lr

0001a46c <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   1a46c:	6803      	ldr	r3, [r0, #0]
   1a46e:	b923      	cbnz	r3, 1a47a <log_list_add_tail+0xe>
		list->head = msg;
   1a470:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   1a472:	2300      	movs	r3, #0
	list->tail = msg;
   1a474:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   1a476:	600b      	str	r3, [r1, #0]
}
   1a478:	4770      	bx	lr
		list->tail->next = msg;
   1a47a:	6843      	ldr	r3, [r0, #4]
   1a47c:	6019      	str	r1, [r3, #0]
   1a47e:	e7f8      	b.n	1a472 <log_list_add_tail+0x6>

0001a480 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   1a480:	6800      	ldr	r0, [r0, #0]
   1a482:	4770      	bx	lr

0001a484 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   1a484:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   1a486:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   1a488:	b108      	cbz	r0, 1a48e <log_list_head_get+0xa>
		list->head = list->head->next;
   1a48a:	6802      	ldr	r2, [r0, #0]
   1a48c:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   1a48e:	4770      	bx	lr

0001a490 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   1a490:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1a492:	f7f5 ffdb 	bl	1044c <log_msg_chunk_alloc>

	if (msg != NULL) {
   1a496:	b118      	cbz	r0, 1a4a0 <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   1a498:	2301      	movs	r3, #1
   1a49a:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1a49c:	2300      	movs	r3, #0
   1a49e:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
   1a4a0:	bd08      	pop	{r3, pc}

0001a4a2 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   1a4a2:	f7f6 be03 	b.w	110ac <sys_clock_cycle_get_32>

0001a4a6 <dummy_timestamp>:
   1a4a6:	2000      	movs	r0, #0
   1a4a8:	4770      	bx	lr

0001a4aa <z_log_get_s_mask>:
{
   1a4aa:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a4ac:	4605      	mov	r5, r0
	uint32_t mask = 0U;
   1a4ae:	2000      	movs	r0, #0
	uint32_t arg = 0U;
   1a4b0:	4603      	mov	r3, r0
	bool arm = false;
   1a4b2:	4602      	mov	r2, r0
				mask |= BIT(arg);
   1a4b4:	2701      	movs	r7, #1
	while ((curr = *str++) && arg < nargs) {
   1a4b6:	f815 4b01 	ldrb.w	r4, [r5], #1
   1a4ba:	b10c      	cbz	r4, 1a4c0 <z_log_get_s_mask+0x16>
   1a4bc:	428b      	cmp	r3, r1
   1a4be:	d300      	bcc.n	1a4c2 <z_log_get_s_mask+0x18>
}
   1a4c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
   1a4c2:	2c25      	cmp	r4, #37	; 0x25
   1a4c4:	d102      	bne.n	1a4cc <z_log_get_s_mask+0x22>
			arm = !arm;
   1a4c6:	f082 0201 	eor.w	r2, r2, #1
   1a4ca:	e7f4      	b.n	1a4b6 <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
   1a4cc:	2a00      	cmp	r2, #0
   1a4ce:	d0f2      	beq.n	1a4b6 <z_log_get_s_mask+0xc>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1a4d0:	f044 0620 	orr.w	r6, r4, #32
   1a4d4:	3e61      	subs	r6, #97	; 0x61
   1a4d6:	2e19      	cmp	r6, #25
   1a4d8:	d8ed      	bhi.n	1a4b6 <z_log_get_s_mask+0xc>
			if (curr == 's') {
   1a4da:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
   1a4dc:	bf04      	itt	eq
   1a4de:	fa07 f203 	lsleq.w	r2, r7, r3
   1a4e2:	4310      	orreq	r0, r2
			arg++;
   1a4e4:	3301      	adds	r3, #1
			arm = false;
   1a4e6:	2200      	movs	r2, #0
   1a4e8:	e7e5      	b.n	1a4b6 <z_log_get_s_mask+0xc>

0001a4ea <log_0>:
{
   1a4ea:	b538      	push	{r3, r4, r5, lr}
   1a4ec:	4605      	mov	r5, r0
   1a4ee:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   1a4f0:	f7ff ffce 	bl	1a490 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1a4f4:	b128      	cbz	r0, 1a502 <log_0+0x18>
		msg->str = str;
   1a4f6:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
   1a4f8:	4621      	mov	r1, r4
}
   1a4fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   1a4fe:	f7f5 bee3 	b.w	102c8 <msg_finalize>
}
   1a502:	bd38      	pop	{r3, r4, r5, pc}

0001a504 <log_1>:
{
   1a504:	b570      	push	{r4, r5, r6, lr}
   1a506:	4606      	mov	r6, r0
   1a508:	460d      	mov	r5, r1
   1a50a:	4614      	mov	r4, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1a50c:	f7ff ffc0 	bl	1a490 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1a510:	b158      	cbz	r0, 1a52a <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   1a512:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
   1a514:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   1a516:	2101      	movs	r1, #1
   1a518:	f361 1207 	bfi	r2, r1, #4, #4
   1a51c:	7242      	strb	r2, [r0, #9]
		msg->payload.single.args[0] = arg1;
   1a51e:	6145      	str	r5, [r0, #20]
		msg_finalize(msg, src_level);
   1a520:	4621      	mov	r1, r4
}
   1a522:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   1a526:	f7f5 becf 	b.w	102c8 <msg_finalize>
}
   1a52a:	bd70      	pop	{r4, r5, r6, pc}

0001a52c <log_2>:
{
   1a52c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a530:	4680      	mov	r8, r0
   1a532:	460f      	mov	r7, r1
   1a534:	4616      	mov	r6, r2
   1a536:	461d      	mov	r5, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1a538:	f7ff ffaa 	bl	1a490 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1a53c:	b168      	cbz	r0, 1a55a <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   1a53e:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   1a540:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
   1a544:	2202      	movs	r2, #2
   1a546:	f362 1307 	bfi	r3, r2, #4, #4
   1a54a:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1a54c:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg_finalize(msg, src_level);
   1a550:	4629      	mov	r1, r5
}
   1a552:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   1a556:	f7f5 beb7 	b.w	102c8 <msg_finalize>
}
   1a55a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001a55e <log_3>:
{
   1a55e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a562:	4680      	mov	r8, r0
   1a564:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   1a568:	460f      	mov	r7, r1
   1a56a:	4616      	mov	r6, r2
   1a56c:	461d      	mov	r5, r3
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1a56e:	f7ff ff8f 	bl	1a490 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1a572:	b170      	cbz	r0, 1a592 <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   1a574:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   1a576:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
   1a57a:	2203      	movs	r2, #3
   1a57c:	f362 1307 	bfi	r3, r2, #4, #4
   1a580:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1a582:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->payload.single.args[2] = arg3;
   1a586:	61c5      	str	r5, [r0, #28]
		msg_finalize(msg, src_level);
   1a588:	4649      	mov	r1, r9
}
   1a58a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   1a58e:	f7f5 be9b 	b.w	102c8 <msg_finalize>
}
   1a592:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001a596 <log_n>:
{
   1a596:	b510      	push	{r4, lr}
   1a598:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   1a59a:	f000 f8ac 	bl	1a6f6 <log_msg_create_n>
		if (msg == NULL) {
   1a59e:	b120      	cbz	r0, 1a5aa <log_n+0x14>
		msg_finalize(msg, src_level);
   1a5a0:	4621      	mov	r1, r4
}
   1a5a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   1a5a6:	f7f5 be8f 	b.w	102c8 <msg_finalize>
}
   1a5aa:	bd10      	pop	{r4, pc}

0001a5ac <log_hexdump>:
{
   1a5ac:	b510      	push	{r4, lr}
   1a5ae:	461c      	mov	r4, r3
			log_msg_hexdump_create(str, (const uint8_t *)data, length);
   1a5b0:	f000 f8fd 	bl	1a7ae <log_msg_hexdump_create>
		if (msg == NULL) {
   1a5b4:	b120      	cbz	r0, 1a5c0 <log_hexdump+0x14>
		msg_finalize(msg, src_level);
   1a5b6:	4621      	mov	r1, r4
}
   1a5b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   1a5bc:	f7f5 be84 	b.w	102c8 <msg_finalize>
}
   1a5c0:	bd10      	pop	{r4, pc}

0001a5c2 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   1a5c2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a5c6:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
   1a5c8:	8903      	ldrh	r3, [r0, #8]
{
   1a5ca:	f89d 7020 	ldrb.w	r7, [sp, #32]
   1a5ce:	460e      	mov	r6, r1
   1a5d0:	4611      	mov	r1, r2
	uint32_t available_len = msg->hdr.params.hexdump.length;
   1a5d2:	f3c3 028d 	ubfx	r2, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   1a5d6:	42a2      	cmp	r2, r4
   1a5d8:	d803      	bhi.n	1a5e2 <log_msg_hexdump_data_op+0x20>
		*length = 0;
   1a5da:	2300      	movs	r3, #0
   1a5dc:	600b      	str	r3, [r1, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   1a5de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   1a5e2:	680b      	ldr	r3, [r1, #0]
   1a5e4:	4423      	add	r3, r4
   1a5e6:	4293      	cmp	r3, r2
		*length = available_len - offset;
   1a5e8:	bf84      	itt	hi
   1a5ea:	1b13      	subhi	r3, r2, r4
   1a5ec:	600b      	strhi	r3, [r1, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1a5ee:	2a0c      	cmp	r2, #12
	req_len = *length;
   1a5f0:	f8d1 9000 	ldr.w	r9, [r1]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1a5f4:	d92a      	bls.n	1a64c <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
   1a5f6:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   1a5f8:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   1a5fc:	d82d      	bhi.n	1a65a <log_msg_hexdump_data_op+0x98>
		head_data = msg->payload.ext.data.bytes;
   1a5fe:	3018      	adds	r0, #24
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   1a600:	2208      	movs	r2, #8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1a602:	454a      	cmp	r2, r9
   1a604:	bf28      	it	cs
   1a606:	464a      	movcs	r2, r9
   1a608:	4615      	mov	r5, r2
			(void)memcpy(&head_data[offset], data, cpy_len);
   1a60a:	4420      	add	r0, r4
		if (put_op) {
   1a60c:	b317      	cbz	r7, 1a654 <log_msg_hexdump_data_op+0x92>
			(void)memcpy(&head_data[offset], data, cpy_len);
   1a60e:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
   1a610:	f000 fdd2 	bl	1b1b8 <memcpy>
		req_len -= cpy_len;
   1a614:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   1a618:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
   1a61a:	f1b9 0f00 	cmp.w	r9, #0
   1a61e:	d0de      	beq.n	1a5de <log_msg_hexdump_data_op+0x1c>
   1a620:	f1b8 0f00 	cmp.w	r8, #0
   1a624:	d0db      	beq.n	1a5de <log_msg_hexdump_data_op+0x1c>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   1a626:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1a62a:	454d      	cmp	r5, r9
   1a62c:	bf28      	it	cs
   1a62e:	464d      	movcs	r5, r9
			(void)memcpy(&cont->payload.bytes[offset],
   1a630:	1d20      	adds	r0, r4, #4
   1a632:	4440      	add	r0, r8
   1a634:	462a      	mov	r2, r5
		if (put_op) {
   1a636:	b1bf      	cbz	r7, 1a668 <log_msg_hexdump_data_op+0xa6>
			(void)memcpy(&cont->payload.bytes[offset],
   1a638:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
   1a63a:	f000 fdbd 	bl	1b1b8 <memcpy>
		req_len -= cpy_len;
   1a63e:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
   1a642:	f8d8 8000 	ldr.w	r8, [r8]
		data += cpy_len;
   1a646:	442e      	add	r6, r5
		offset = 0;
   1a648:	2400      	movs	r4, #0
   1a64a:	e7e6      	b.n	1a61a <log_msg_hexdump_data_op+0x58>
		head_data = msg->payload.single.bytes;
   1a64c:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
   1a64e:	f04f 0800 	mov.w	r8, #0
   1a652:	e7d6      	b.n	1a602 <log_msg_hexdump_data_op+0x40>
			(void)memcpy(data, &head_data[offset], cpy_len);
   1a654:	4601      	mov	r1, r0
   1a656:	4630      	mov	r0, r6
   1a658:	e7da      	b.n	1a610 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   1a65a:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   1a65c:	2c1b      	cmp	r4, #27
   1a65e:	d9dc      	bls.n	1a61a <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
   1a660:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   1a664:	3c1c      	subs	r4, #28
   1a666:	e7f9      	b.n	1a65c <log_msg_hexdump_data_op+0x9a>
			(void)memcpy(data, &cont->payload.bytes[offset],
   1a668:	4601      	mov	r1, r0
   1a66a:	4630      	mov	r0, r6
   1a66c:	e7e5      	b.n	1a63a <log_msg_hexdump_data_op+0x78>

0001a66e <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1a66e:	3004      	adds	r0, #4
   1a670:	f3bf 8f5b 	dmb	ish
   1a674:	e850 3f00 	ldrex	r3, [r0]
   1a678:	3301      	adds	r3, #1
   1a67a:	e840 3200 	strex	r2, r3, [r0]
   1a67e:	2a00      	cmp	r2, #0
   1a680:	d1f8      	bne.n	1a674 <log_msg_get+0x6>
   1a682:	f3bf 8f5b 	dmb	ish
}
   1a686:	4770      	bx	lr

0001a688 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   1a688:	7a40      	ldrb	r0, [r0, #9]
}
   1a68a:	0900      	lsrs	r0, r0, #4
   1a68c:	4770      	bx	lr

0001a68e <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   1a68e:	7a43      	ldrb	r3, [r0, #9]
   1a690:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   1a694:	ea4f 1213 	mov.w	r2, r3, lsr #4
   1a698:	d216      	bcs.n	1a6c8 <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1a69a:	2a03      	cmp	r2, #3
   1a69c:	d803      	bhi.n	1a6a6 <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   1a69e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   1a6a2:	6940      	ldr	r0, [r0, #20]
   1a6a4:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   1a6a6:	2901      	cmp	r1, #1
   1a6a8:	d803      	bhi.n	1a6b2 <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   1a6aa:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   1a6ae:	6980      	ldr	r0, [r0, #24]
   1a6b0:	4770      	bx	lr
	cont = msg->payload.ext.next;
   1a6b2:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   1a6b4:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   1a6b6:	2906      	cmp	r1, #6
   1a6b8:	d803      	bhi.n	1a6c2 <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   1a6ba:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1a6be:	6848      	ldr	r0, [r1, #4]
   1a6c0:	4770      	bx	lr
		cont = cont->next;
   1a6c2:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   1a6c4:	3907      	subs	r1, #7
		cont = cont->next;
   1a6c6:	e7f6      	b.n	1a6b6 <log_msg_arg_get+0x28>
		return 0;
   1a6c8:	2000      	movs	r0, #0
}
   1a6ca:	4770      	bx	lr

0001a6cc <log_msg_put>:
{
   1a6cc:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1a6ce:	1d02      	adds	r2, r0, #4
   1a6d0:	f3bf 8f5b 	dmb	ish
   1a6d4:	e852 1f00 	ldrex	r1, [r2]
   1a6d8:	3901      	subs	r1, #1
   1a6da:	e842 1c00 	strex	ip, r1, [r2]
   1a6de:	f1bc 0f00 	cmp.w	ip, #0
   1a6e2:	d1f7      	bne.n	1a6d4 <log_msg_put+0x8>
   1a6e4:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
   1a6e8:	685b      	ldr	r3, [r3, #4]
   1a6ea:	b90b      	cbnz	r3, 1a6f0 <log_msg_put+0x24>
		msg_free(msg);
   1a6ec:	f7f5 bec2 	b.w	10474 <msg_free>
}
   1a6f0:	4770      	bx	lr

0001a6f2 <log_msg_str_get>:
}
   1a6f2:	6900      	ldr	r0, [r0, #16]
   1a6f4:	4770      	bx	lr

0001a6f6 <log_msg_create_n>:
{
   1a6f6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a6fa:	4680      	mov	r8, r0
   1a6fc:	460f      	mov	r7, r1
   1a6fe:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1a700:	f7f5 fea4 	bl	1044c <log_msg_chunk_alloc>
	if (msg != NULL) {
   1a704:	4604      	mov	r4, r0
   1a706:	b358      	cbz	r0, 1a760 <log_msg_create_n+0x6a>
		msg->hdr.ref_cnt = 1;
   1a708:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   1a70a:	f04f 0a00 	mov.w	sl, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1a70e:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   1a710:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1a712:	f8a0 a008 	strh.w	sl, [r0, #8]
   1a716:	d90c      	bls.n	1a732 <log_msg_create_n+0x3c>
	msg->hdr.params.generic.ext = 1;
   1a718:	7a03      	ldrb	r3, [r0, #8]
	*next = NULL;
   1a71a:	f8c0 a014 	str.w	sl, [r0, #20]
	msg->hdr.params.generic.ext = 1;
   1a71e:	f043 0302 	orr.w	r3, r3, #2
   1a722:	7203      	strb	r3, [r0, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   1a724:	f1a5 0902 	sub.w	r9, r5, #2
	next = &msg->payload.ext.next;
   1a728:	f100 0b14 	add.w	fp, r0, #20
	while (n > 0) {
   1a72c:	f1b9 0f00 	cmp.w	r9, #0
   1a730:	dc0e      	bgt.n	1a750 <log_msg_create_n+0x5a>
		msg->hdr.params.std.nargs = nargs;
   1a732:	7a63      	ldrb	r3, [r4, #9]
		msg->str = str;
   1a734:	f8c4 8010 	str.w	r8, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   1a738:	f365 1307 	bfi	r3, r5, #4, #4
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1a73c:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   1a73e:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1a740:	d819      	bhi.n	1a776 <log_msg_create_n+0x80>
		(void)memcpy(msg->payload.single.args, args,
   1a742:	00aa      	lsls	r2, r5, #2
   1a744:	4639      	mov	r1, r7
   1a746:	f104 0014 	add.w	r0, r4, #20
   1a74a:	f000 fd35 	bl	1b1b8 <memcpy>
	while (nargs != 0U) {
   1a74e:	e007      	b.n	1a760 <log_msg_create_n+0x6a>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   1a750:	f7f5 fe7c 	bl	1044c <log_msg_chunk_alloc>
		if (cont == NULL) {
   1a754:	4606      	mov	r6, r0
   1a756:	b930      	cbnz	r0, 1a766 <log_msg_create_n+0x70>
			msg_free(msg);
   1a758:	4620      	mov	r0, r4
   1a75a:	f7f5 fe8b 	bl	10474 <msg_free>
			return NULL;
   1a75e:	4634      	mov	r4, r6
}
   1a760:	4620      	mov	r0, r4
   1a762:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   1a766:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   1a76a:	f1a9 0907 	sub.w	r9, r9, #7
   1a76e:	f8c0 a000 	str.w	sl, [r0]
		next = &cont->next;
   1a772:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
   1a774:	e7da      	b.n	1a72c <log_msg_create_n+0x36>
		(void)memcpy(msg->payload.ext.data.args, args,
   1a776:	4639      	mov	r1, r7
   1a778:	2208      	movs	r2, #8
   1a77a:	f104 0018 	add.w	r0, r4, #24
	struct log_msg_cont *cont = msg->payload.ext.next;
   1a77e:	f8d4 8014 	ldr.w	r8, [r4, #20]
		(void)memcpy(msg->payload.ext.data.args, args,
   1a782:	f000 fd19 	bl	1b1b8 <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   1a786:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   1a788:	3708      	adds	r7, #8
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   1a78a:	2d07      	cmp	r5, #7
   1a78c:	462e      	mov	r6, r5
   1a78e:	bf28      	it	cs
   1a790:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   1a792:	ea4f 0986 	mov.w	r9, r6, lsl #2
   1a796:	4639      	mov	r1, r7
   1a798:	f108 0004 	add.w	r0, r8, #4
   1a79c:	464a      	mov	r2, r9
   1a79e:	f000 fd0b 	bl	1b1b8 <memcpy>
	while (nargs != 0U) {
   1a7a2:	1bad      	subs	r5, r5, r6
		cont = cont->next;
   1a7a4:	f8d8 8000 	ldr.w	r8, [r8]
		args += cpy_args;
   1a7a8:	444f      	add	r7, r9
	while (nargs != 0U) {
   1a7aa:	d1ee      	bne.n	1a78a <log_msg_create_n+0x94>
   1a7ac:	e7d8      	b.n	1a760 <log_msg_create_n+0x6a>

0001a7ae <log_msg_hexdump_create>:
{
   1a7ae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   1a7b2:	f643 75ff 	movw	r5, #16383	; 0x3fff
   1a7b6:	4295      	cmp	r5, r2
{
   1a7b8:	4680      	mov	r8, r0
   1a7ba:	460e      	mov	r6, r1
   1a7bc:	4617      	mov	r7, r2
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   1a7be:	bf28      	it	cs
   1a7c0:	4615      	movcs	r5, r2
	msg = (struct log_msg *)log_msg_chunk_alloc();
   1a7c2:	f7f5 fe43 	bl	1044c <log_msg_chunk_alloc>
	if (msg == NULL) {
   1a7c6:	4604      	mov	r4, r0
   1a7c8:	b388      	cbz	r0, 1a82e <log_msg_hexdump_create+0x80>
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   1a7ca:	8902      	ldrh	r2, [r0, #8]
	msg->str = str;
   1a7cc:	f8c0 8010 	str.w	r8, [r0, #16]
	msg->hdr.ref_cnt = 1;
   1a7d0:	2301      	movs	r3, #1
   1a7d2:	6043      	str	r3, [r0, #4]
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   1a7d4:	00ab      	lsls	r3, r5, #2
   1a7d6:	f043 0301 	orr.w	r3, r3, #1
   1a7da:	f002 0202 	and.w	r2, r2, #2
   1a7de:	4313      	orrs	r3, r2
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1a7e0:	2f0c      	cmp	r7, #12
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   1a7e2:	8103      	strh	r3, [r0, #8]
		(void)memcpy(msg->payload.single.bytes, data, length);
   1a7e4:	f100 0814 	add.w	r8, r0, #20
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1a7e8:	d918      	bls.n	1a81c <log_msg_hexdump_create+0x6e>
		(void)memcpy(msg->payload.ext.data.bytes,
   1a7ea:	4631      	mov	r1, r6
   1a7ec:	2208      	movs	r2, #8
   1a7ee:	3018      	adds	r0, #24
   1a7f0:	f000 fce2 	bl	1b1b8 <memcpy>
		msg->hdr.params.generic.ext = 1;
   1a7f4:	7a23      	ldrb	r3, [r4, #8]
		msg->payload.ext.next = NULL;
   1a7f6:	f04f 0900 	mov.w	r9, #0
		msg->hdr.params.generic.ext = 1;
   1a7fa:	f043 0302 	orr.w	r3, r3, #2
		msg->payload.ext.next = NULL;
   1a7fe:	f8c4 9014 	str.w	r9, [r4, #20]
		msg->hdr.params.generic.ext = 1;
   1a802:	7223      	strb	r3, [r4, #8]
		data += LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   1a804:	3608      	adds	r6, #8
		length -= LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   1a806:	3d08      	subs	r5, #8
	while (length > 0) {
   1a808:	b18d      	cbz	r5, 1a82e <log_msg_hexdump_create+0x80>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   1a80a:	f7f5 fe1f 	bl	1044c <log_msg_chunk_alloc>
		if (cont == NULL) {
   1a80e:	4607      	mov	r7, r0
   1a810:	b980      	cbnz	r0, 1a834 <log_msg_hexdump_create+0x86>
			msg_free(msg);
   1a812:	4620      	mov	r0, r4
   1a814:	f7f5 fe2e 	bl	10474 <msg_free>
			return NULL;
   1a818:	463c      	mov	r4, r7
   1a81a:	e008      	b.n	1a82e <log_msg_hexdump_create+0x80>
		(void)memcpy(msg->payload.single.bytes, data, length);
   1a81c:	462a      	mov	r2, r5
   1a81e:	4631      	mov	r1, r6
   1a820:	4640      	mov	r0, r8
   1a822:	f000 fcc9 	bl	1b1b8 <memcpy>
		msg->hdr.params.generic.ext = 0;
   1a826:	7a23      	ldrb	r3, [r4, #8]
   1a828:	f36f 0341 	bfc	r3, #1, #1
   1a82c:	7223      	strb	r3, [r4, #8]
}
   1a82e:	4620      	mov	r0, r4
   1a830:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		chunk_length = (length > HEXDUMP_BYTES_CONT_MSG) ?
   1a834:	2d1c      	cmp	r5, #28
   1a836:	462f      	mov	r7, r5
   1a838:	bf28      	it	cs
   1a83a:	271c      	movcs	r7, #28
		*prev_cont = cont;
   1a83c:	f8c8 0000 	str.w	r0, [r8]
		(void)memcpy(cont->payload.bytes, data, chunk_length);
   1a840:	4631      	mov	r1, r6
		cont->next = NULL;
   1a842:	f8c0 9000 	str.w	r9, [r0]
		prev_cont = &cont->next;
   1a846:	4680      	mov	r8, r0
		(void)memcpy(cont->payload.bytes, data, chunk_length);
   1a848:	463a      	mov	r2, r7
   1a84a:	3004      	adds	r0, #4
   1a84c:	f000 fcb4 	bl	1b1b8 <memcpy>
		data += chunk_length;
   1a850:	443e      	add	r6, r7
		length -= chunk_length;
   1a852:	1bed      	subs	r5, r5, r7
   1a854:	e7d8      	b.n	1a808 <log_msg_hexdump_create+0x5a>

0001a856 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   1a856:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   1a858:	2400      	movs	r4, #0
   1a85a:	9400      	str	r4, [sp, #0]
   1a85c:	f7ff feb1 	bl	1a5c2 <log_msg_hexdump_data_op>
}
   1a860:	b002      	add	sp, #8
   1a862:	bd10      	pop	{r4, pc}

0001a864 <buffer_write>:
{
   1a864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a866:	4606      	mov	r6, r0
   1a868:	460d      	mov	r5, r1
   1a86a:	4614      	mov	r4, r2
   1a86c:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   1a86e:	4621      	mov	r1, r4
   1a870:	4628      	mov	r0, r5
   1a872:	463a      	mov	r2, r7
   1a874:	47b0      	blx	r6
	} while (len != 0);
   1a876:	1a24      	subs	r4, r4, r0
		buf += processed;
   1a878:	4405      	add	r5, r0
	} while (len != 0);
   1a87a:	d1f8      	bne.n	1a86e <buffer_write+0xa>
}
   1a87c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001a87e <std_print>:
{
   1a87e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a882:	b08e      	sub	sp, #56	; 0x38
   1a884:	af0e      	add	r7, sp, #56	; 0x38
   1a886:	4680      	mov	r8, r0
   1a888:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   1a88a:	f7ff ff32 	bl	1a6f2 <log_msg_str_get>
   1a88e:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   1a890:	4640      	mov	r0, r8
   1a892:	f7ff fef9 	bl	1a688 <log_msg_nargs_get>
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   1a896:	0083      	lsls	r3, r0, #2
   1a898:	3307      	adds	r3, #7
   1a89a:	f023 0307 	bic.w	r3, r3, #7
   1a89e:	ebad 0d03 	sub.w	sp, sp, r3
	uint32_t nargs = log_msg_nargs_get(msg);
   1a8a2:	4682      	mov	sl, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   1a8a4:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   1a8a6:	f04f 0900 	mov.w	r9, #0
   1a8aa:	45d1      	cmp	r9, sl
   1a8ac:	d116      	bne.n	1a8dc <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   1a8ae:	4640      	mov	r0, r8
   1a8b0:	f7ff feea 	bl	1a688 <log_msg_nargs_get>
   1a8b4:	280f      	cmp	r0, #15
   1a8b6:	d81e      	bhi.n	1a8f6 <std_print+0x78>
   1a8b8:	e8df f010 	tbh	[pc, r0, lsl #1]
   1a8bc:	00200019 	.word	0x00200019
   1a8c0:	002d0026 	.word	0x002d0026
   1a8c4:	00410036 	.word	0x00410036
   1a8c8:	005d004e 	.word	0x005d004e
   1a8cc:	0081006e 	.word	0x0081006e
   1a8d0:	00ad0096 	.word	0x00ad0096
   1a8d4:	00e100c6 	.word	0x00e100c6
   1a8d8:	011d00fe 	.word	0x011d00fe
		args[i] = log_msg_arg_get(msg, i);
   1a8dc:	4649      	mov	r1, r9
   1a8de:	4640      	mov	r0, r8
   1a8e0:	f7ff fed5 	bl	1a68e <log_msg_arg_get>
   1a8e4:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   1a8e8:	f109 0901 	add.w	r9, r9, #1
   1a8ec:	e7dd      	b.n	1a8aa <std_print+0x2c>
		print_formatted(output, str);
   1a8ee:	4631      	mov	r1, r6
   1a8f0:	4628      	mov	r0, r5
   1a8f2:	f7f5 fdfd 	bl	104f0 <print_formatted>
}
   1a8f6:	46bd      	mov	sp, r7
   1a8f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
   1a8fc:	6822      	ldr	r2, [r4, #0]
   1a8fe:	4631      	mov	r1, r6
   1a900:	4628      	mov	r0, r5
   1a902:	f7f5 fdf5 	bl	104f0 <print_formatted>
		break;
   1a906:	e7f6      	b.n	1a8f6 <std_print+0x78>
		print_formatted(output, str, args[0], args[1]);
   1a908:	e9d4 2300 	ldrd	r2, r3, [r4]
   1a90c:	4631      	mov	r1, r6
   1a90e:	4628      	mov	r0, r5
   1a910:	f7f5 fdee 	bl	104f0 <print_formatted>
		break;
   1a914:	e7ef      	b.n	1a8f6 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2]);
   1a916:	68a3      	ldr	r3, [r4, #8]
   1a918:	9300      	str	r3, [sp, #0]
   1a91a:	e9d4 2300 	ldrd	r2, r3, [r4]
   1a91e:	4631      	mov	r1, r6
   1a920:	4628      	mov	r0, r5
   1a922:	f7f5 fde5 	bl	104f0 <print_formatted>
		break;
   1a926:	e7e6      	b.n	1a8f6 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1a928:	68e3      	ldr	r3, [r4, #12]
   1a92a:	9301      	str	r3, [sp, #4]
   1a92c:	68a3      	ldr	r3, [r4, #8]
   1a92e:	9300      	str	r3, [sp, #0]
   1a930:	e9d4 2300 	ldrd	r2, r3, [r4]
   1a934:	4631      	mov	r1, r6
   1a936:	4628      	mov	r0, r5
   1a938:	f7f5 fdda 	bl	104f0 <print_formatted>
		break;
   1a93c:	e7db      	b.n	1a8f6 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1a93e:	6923      	ldr	r3, [r4, #16]
   1a940:	9302      	str	r3, [sp, #8]
   1a942:	68e3      	ldr	r3, [r4, #12]
   1a944:	9301      	str	r3, [sp, #4]
   1a946:	68a3      	ldr	r3, [r4, #8]
   1a948:	9300      	str	r3, [sp, #0]
   1a94a:	e9d4 2300 	ldrd	r2, r3, [r4]
   1a94e:	4631      	mov	r1, r6
   1a950:	4628      	mov	r0, r5
   1a952:	f7f5 fdcd 	bl	104f0 <print_formatted>
		break;
   1a956:	e7ce      	b.n	1a8f6 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1a958:	6963      	ldr	r3, [r4, #20]
   1a95a:	9303      	str	r3, [sp, #12]
   1a95c:	6923      	ldr	r3, [r4, #16]
   1a95e:	9302      	str	r3, [sp, #8]
   1a960:	68e3      	ldr	r3, [r4, #12]
   1a962:	9301      	str	r3, [sp, #4]
   1a964:	68a3      	ldr	r3, [r4, #8]
   1a966:	9300      	str	r3, [sp, #0]
   1a968:	e9d4 2300 	ldrd	r2, r3, [r4]
   1a96c:	4631      	mov	r1, r6
   1a96e:	4628      	mov	r0, r5
   1a970:	f7f5 fdbe 	bl	104f0 <print_formatted>
		break;
   1a974:	e7bf      	b.n	1a8f6 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1a976:	69a3      	ldr	r3, [r4, #24]
   1a978:	9304      	str	r3, [sp, #16]
   1a97a:	6963      	ldr	r3, [r4, #20]
   1a97c:	9303      	str	r3, [sp, #12]
   1a97e:	6923      	ldr	r3, [r4, #16]
   1a980:	9302      	str	r3, [sp, #8]
   1a982:	68e3      	ldr	r3, [r4, #12]
   1a984:	9301      	str	r3, [sp, #4]
   1a986:	68a3      	ldr	r3, [r4, #8]
   1a988:	9300      	str	r3, [sp, #0]
   1a98a:	e9d4 2300 	ldrd	r2, r3, [r4]
   1a98e:	4631      	mov	r1, r6
   1a990:	4628      	mov	r0, r5
   1a992:	f7f5 fdad 	bl	104f0 <print_formatted>
		break;
   1a996:	e7ae      	b.n	1a8f6 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1a998:	69e3      	ldr	r3, [r4, #28]
   1a99a:	9305      	str	r3, [sp, #20]
   1a99c:	69a3      	ldr	r3, [r4, #24]
   1a99e:	9304      	str	r3, [sp, #16]
   1a9a0:	6963      	ldr	r3, [r4, #20]
   1a9a2:	9303      	str	r3, [sp, #12]
   1a9a4:	6923      	ldr	r3, [r4, #16]
   1a9a6:	9302      	str	r3, [sp, #8]
   1a9a8:	68e3      	ldr	r3, [r4, #12]
   1a9aa:	9301      	str	r3, [sp, #4]
   1a9ac:	68a3      	ldr	r3, [r4, #8]
   1a9ae:	9300      	str	r3, [sp, #0]
   1a9b0:	e9d4 2300 	ldrd	r2, r3, [r4]
   1a9b4:	4631      	mov	r1, r6
   1a9b6:	4628      	mov	r0, r5
   1a9b8:	f7f5 fd9a 	bl	104f0 <print_formatted>
		break;
   1a9bc:	e79b      	b.n	1a8f6 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1a9be:	6a23      	ldr	r3, [r4, #32]
   1a9c0:	9306      	str	r3, [sp, #24]
   1a9c2:	69e3      	ldr	r3, [r4, #28]
   1a9c4:	9305      	str	r3, [sp, #20]
   1a9c6:	69a3      	ldr	r3, [r4, #24]
   1a9c8:	9304      	str	r3, [sp, #16]
   1a9ca:	6963      	ldr	r3, [r4, #20]
   1a9cc:	9303      	str	r3, [sp, #12]
   1a9ce:	6923      	ldr	r3, [r4, #16]
   1a9d0:	9302      	str	r3, [sp, #8]
   1a9d2:	68e3      	ldr	r3, [r4, #12]
   1a9d4:	9301      	str	r3, [sp, #4]
   1a9d6:	68a3      	ldr	r3, [r4, #8]
   1a9d8:	9300      	str	r3, [sp, #0]
   1a9da:	e9d4 2300 	ldrd	r2, r3, [r4]
   1a9de:	4631      	mov	r1, r6
   1a9e0:	4628      	mov	r0, r5
   1a9e2:	f7f5 fd85 	bl	104f0 <print_formatted>
		break;
   1a9e6:	e786      	b.n	1a8f6 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1a9e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1a9ea:	9307      	str	r3, [sp, #28]
   1a9ec:	6a23      	ldr	r3, [r4, #32]
   1a9ee:	9306      	str	r3, [sp, #24]
   1a9f0:	69e3      	ldr	r3, [r4, #28]
   1a9f2:	9305      	str	r3, [sp, #20]
   1a9f4:	69a3      	ldr	r3, [r4, #24]
   1a9f6:	9304      	str	r3, [sp, #16]
   1a9f8:	6963      	ldr	r3, [r4, #20]
   1a9fa:	9303      	str	r3, [sp, #12]
   1a9fc:	6923      	ldr	r3, [r4, #16]
   1a9fe:	9302      	str	r3, [sp, #8]
   1aa00:	68e3      	ldr	r3, [r4, #12]
   1aa02:	9301      	str	r3, [sp, #4]
   1aa04:	68a3      	ldr	r3, [r4, #8]
   1aa06:	9300      	str	r3, [sp, #0]
   1aa08:	e9d4 2300 	ldrd	r2, r3, [r4]
   1aa0c:	4631      	mov	r1, r6
   1aa0e:	4628      	mov	r0, r5
   1aa10:	f7f5 fd6e 	bl	104f0 <print_formatted>
		break;
   1aa14:	e76f      	b.n	1a8f6 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1aa16:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1aa18:	9308      	str	r3, [sp, #32]
   1aa1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1aa1c:	9307      	str	r3, [sp, #28]
   1aa1e:	6a23      	ldr	r3, [r4, #32]
   1aa20:	9306      	str	r3, [sp, #24]
   1aa22:	69e3      	ldr	r3, [r4, #28]
   1aa24:	9305      	str	r3, [sp, #20]
   1aa26:	69a3      	ldr	r3, [r4, #24]
   1aa28:	9304      	str	r3, [sp, #16]
   1aa2a:	6963      	ldr	r3, [r4, #20]
   1aa2c:	9303      	str	r3, [sp, #12]
   1aa2e:	6923      	ldr	r3, [r4, #16]
   1aa30:	9302      	str	r3, [sp, #8]
   1aa32:	68e3      	ldr	r3, [r4, #12]
   1aa34:	9301      	str	r3, [sp, #4]
   1aa36:	68a3      	ldr	r3, [r4, #8]
   1aa38:	9300      	str	r3, [sp, #0]
   1aa3a:	e9d4 2300 	ldrd	r2, r3, [r4]
   1aa3e:	4631      	mov	r1, r6
   1aa40:	4628      	mov	r0, r5
   1aa42:	f7f5 fd55 	bl	104f0 <print_formatted>
		break;
   1aa46:	e756      	b.n	1a8f6 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1aa48:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1aa4a:	9309      	str	r3, [sp, #36]	; 0x24
   1aa4c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1aa4e:	9308      	str	r3, [sp, #32]
   1aa50:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1aa52:	9307      	str	r3, [sp, #28]
   1aa54:	6a23      	ldr	r3, [r4, #32]
   1aa56:	9306      	str	r3, [sp, #24]
   1aa58:	69e3      	ldr	r3, [r4, #28]
   1aa5a:	9305      	str	r3, [sp, #20]
   1aa5c:	69a3      	ldr	r3, [r4, #24]
   1aa5e:	9304      	str	r3, [sp, #16]
   1aa60:	6963      	ldr	r3, [r4, #20]
   1aa62:	9303      	str	r3, [sp, #12]
   1aa64:	6923      	ldr	r3, [r4, #16]
   1aa66:	9302      	str	r3, [sp, #8]
   1aa68:	68e3      	ldr	r3, [r4, #12]
   1aa6a:	9301      	str	r3, [sp, #4]
   1aa6c:	68a3      	ldr	r3, [r4, #8]
   1aa6e:	9300      	str	r3, [sp, #0]
   1aa70:	e9d4 2300 	ldrd	r2, r3, [r4]
   1aa74:	4631      	mov	r1, r6
   1aa76:	4628      	mov	r0, r5
   1aa78:	f7f5 fd3a 	bl	104f0 <print_formatted>
		break;
   1aa7c:	e73b      	b.n	1a8f6 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1aa7e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1aa80:	930a      	str	r3, [sp, #40]	; 0x28
   1aa82:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1aa84:	9309      	str	r3, [sp, #36]	; 0x24
   1aa86:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1aa88:	9308      	str	r3, [sp, #32]
   1aa8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1aa8c:	9307      	str	r3, [sp, #28]
   1aa8e:	6a23      	ldr	r3, [r4, #32]
   1aa90:	9306      	str	r3, [sp, #24]
   1aa92:	69e3      	ldr	r3, [r4, #28]
   1aa94:	9305      	str	r3, [sp, #20]
   1aa96:	69a3      	ldr	r3, [r4, #24]
   1aa98:	9304      	str	r3, [sp, #16]
   1aa9a:	6963      	ldr	r3, [r4, #20]
   1aa9c:	9303      	str	r3, [sp, #12]
   1aa9e:	6923      	ldr	r3, [r4, #16]
   1aaa0:	9302      	str	r3, [sp, #8]
   1aaa2:	68e3      	ldr	r3, [r4, #12]
   1aaa4:	9301      	str	r3, [sp, #4]
   1aaa6:	68a3      	ldr	r3, [r4, #8]
   1aaa8:	9300      	str	r3, [sp, #0]
   1aaaa:	e9d4 2300 	ldrd	r2, r3, [r4]
   1aaae:	4631      	mov	r1, r6
   1aab0:	4628      	mov	r0, r5
   1aab2:	f7f5 fd1d 	bl	104f0 <print_formatted>
		break;
   1aab6:	e71e      	b.n	1a8f6 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1aab8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1aaba:	930b      	str	r3, [sp, #44]	; 0x2c
   1aabc:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1aabe:	930a      	str	r3, [sp, #40]	; 0x28
   1aac0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1aac2:	9309      	str	r3, [sp, #36]	; 0x24
   1aac4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1aac6:	9308      	str	r3, [sp, #32]
   1aac8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1aaca:	9307      	str	r3, [sp, #28]
   1aacc:	6a23      	ldr	r3, [r4, #32]
   1aace:	9306      	str	r3, [sp, #24]
   1aad0:	69e3      	ldr	r3, [r4, #28]
   1aad2:	9305      	str	r3, [sp, #20]
   1aad4:	69a3      	ldr	r3, [r4, #24]
   1aad6:	9304      	str	r3, [sp, #16]
   1aad8:	6963      	ldr	r3, [r4, #20]
   1aada:	9303      	str	r3, [sp, #12]
   1aadc:	6923      	ldr	r3, [r4, #16]
   1aade:	9302      	str	r3, [sp, #8]
   1aae0:	68e3      	ldr	r3, [r4, #12]
   1aae2:	9301      	str	r3, [sp, #4]
   1aae4:	68a3      	ldr	r3, [r4, #8]
   1aae6:	9300      	str	r3, [sp, #0]
   1aae8:	e9d4 2300 	ldrd	r2, r3, [r4]
   1aaec:	4631      	mov	r1, r6
   1aaee:	4628      	mov	r0, r5
   1aaf0:	f7f5 fcfe 	bl	104f0 <print_formatted>
		break;
   1aaf4:	e6ff      	b.n	1a8f6 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1aaf6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1aaf8:	930c      	str	r3, [sp, #48]	; 0x30
   1aafa:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1aafc:	930b      	str	r3, [sp, #44]	; 0x2c
   1aafe:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1ab00:	930a      	str	r3, [sp, #40]	; 0x28
   1ab02:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1ab04:	9309      	str	r3, [sp, #36]	; 0x24
   1ab06:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1ab08:	9308      	str	r3, [sp, #32]
   1ab0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ab0c:	9307      	str	r3, [sp, #28]
   1ab0e:	6a23      	ldr	r3, [r4, #32]
   1ab10:	9306      	str	r3, [sp, #24]
   1ab12:	69e3      	ldr	r3, [r4, #28]
   1ab14:	9305      	str	r3, [sp, #20]
   1ab16:	69a3      	ldr	r3, [r4, #24]
   1ab18:	9304      	str	r3, [sp, #16]
   1ab1a:	6963      	ldr	r3, [r4, #20]
   1ab1c:	9303      	str	r3, [sp, #12]
   1ab1e:	6923      	ldr	r3, [r4, #16]
   1ab20:	9302      	str	r3, [sp, #8]
   1ab22:	68e3      	ldr	r3, [r4, #12]
   1ab24:	9301      	str	r3, [sp, #4]
   1ab26:	68a3      	ldr	r3, [r4, #8]
   1ab28:	9300      	str	r3, [sp, #0]
   1ab2a:	e9d4 2300 	ldrd	r2, r3, [r4]
   1ab2e:	4631      	mov	r1, r6
   1ab30:	4628      	mov	r0, r5
   1ab32:	f7f5 fcdd 	bl	104f0 <print_formatted>
}
   1ab36:	e6de      	b.n	1a8f6 <std_print+0x78>

0001ab38 <log_output_flush>:
		     output->control_block->offset,
   1ab38:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   1ab3a:	6881      	ldr	r1, [r0, #8]
{
   1ab3c:	b510      	push	{r4, lr}
   1ab3e:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   1ab40:	e9d2 2300 	ldrd	r2, r3, [r2]
   1ab44:	6800      	ldr	r0, [r0, #0]
   1ab46:	f7ff fe8d 	bl	1a864 <buffer_write>
	output->control_block->offset = 0;
   1ab4a:	6863      	ldr	r3, [r4, #4]
   1ab4c:	2200      	movs	r2, #0
   1ab4e:	601a      	str	r2, [r3, #0]
}
   1ab50:	bd10      	pop	{r4, pc}

0001ab52 <out_func>:
{
   1ab52:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   1ab54:	684b      	ldr	r3, [r1, #4]
   1ab56:	681a      	ldr	r2, [r3, #0]
   1ab58:	68cb      	ldr	r3, [r1, #12]
   1ab5a:	429a      	cmp	r2, r3
{
   1ab5c:	4605      	mov	r5, r0
   1ab5e:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   1ab60:	d102      	bne.n	1ab68 <out_func+0x16>
		log_output_flush(out_ctx);
   1ab62:	4608      	mov	r0, r1
   1ab64:	f7ff ffe8 	bl	1ab38 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1ab68:	6863      	ldr	r3, [r4, #4]
   1ab6a:	f3bf 8f5b 	dmb	ish
   1ab6e:	e853 2f00 	ldrex	r2, [r3]
   1ab72:	1c51      	adds	r1, r2, #1
   1ab74:	e843 1000 	strex	r0, r1, [r3]
   1ab78:	2800      	cmp	r0, #0
   1ab7a:	d1f8      	bne.n	1ab6e <out_func+0x1c>
   1ab7c:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   1ab80:	68a3      	ldr	r3, [r4, #8]
   1ab82:	549d      	strb	r5, [r3, r2]
}
   1ab84:	2000      	movs	r0, #0
   1ab86:	bd38      	pop	{r3, r4, r5, pc}

0001ab88 <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   1ab88:	2200      	movs	r2, #0
   1ab8a:	e9c0 2200 	strd	r2, r2, [r0]
   1ab8e:	6082      	str	r2, [r0, #8]
}
   1ab90:	4770      	bx	lr

0001ab92 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1ab92:	6903      	ldr	r3, [r0, #16]
   1ab94:	b2c9      	uxtb	r1, r1
   1ab96:	220c      	movs	r2, #12
   1ab98:	fb01 3302 	mla	r3, r1, r2, r3
   1ab9c:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   1ab9e:	f000 0007 	and.w	r0, r0, #7
   1aba2:	4770      	bx	lr

0001aba4 <set_on_state>:
	__asm__ volatile(
   1aba4:	f04f 0340 	mov.w	r3, #64	; 0x40
   1aba8:	f3ef 8211 	mrs	r2, BASEPRI
   1abac:	f383 8811 	msr	BASEPRI, r3
   1abb0:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1abb4:	6803      	ldr	r3, [r0, #0]
   1abb6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1abba:	f043 0302 	orr.w	r3, r3, #2
   1abbe:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1abc0:	f382 8811 	msr	BASEPRI, r2
   1abc4:	f3bf 8f6f 	isb	sy
}
   1abc8:	4770      	bx	lr

0001abca <stop>:
{
   1abca:	4603      	mov	r3, r0
   1abcc:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
   1abce:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   1abd0:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   1abd2:	f04f 0440 	mov.w	r4, #64	; 0x40
   1abd6:	f3ef 8611 	mrs	r6, BASEPRI
   1abda:	f384 8811 	msr	BASEPRI, r4
   1abde:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1abe2:	250c      	movs	r5, #12
   1abe4:	fb05 0401 	mla	r4, r5, r1, r0
   1abe8:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1abea:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   1abee:	d001      	beq.n	1abf4 <stop+0x2a>
   1abf0:	42a2      	cmp	r2, r4
   1abf2:	d111      	bne.n	1ac18 <stop+0x4e>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1abf4:	fb05 0001 	mla	r0, r5, r1, r0
   1abf8:	2201      	movs	r2, #1
   1abfa:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
   1abfc:	2000      	movs	r0, #0
	__asm__ volatile(
   1abfe:	f386 8811 	msr	BASEPRI, r6
   1ac02:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   1ac06:	b930      	cbnz	r0, 1ac16 <stop+0x4c>
	get_sub_config(dev, type)->stop();
   1ac08:	685b      	ldr	r3, [r3, #4]
   1ac0a:	220c      	movs	r2, #12
   1ac0c:	fb02 3101 	mla	r1, r2, r1, r3
   1ac10:	684b      	ldr	r3, [r1, #4]
   1ac12:	4798      	blx	r3
	return 0;
   1ac14:	2000      	movs	r0, #0
}
   1ac16:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
   1ac18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ac1c:	e7ef      	b.n	1abfe <stop+0x34>

0001ac1e <api_stop>:
	return stop(dev, subsys, CTX_API);
   1ac1e:	2280      	movs	r2, #128	; 0x80
   1ac20:	f7ff bfd3 	b.w	1abca <stop>

0001ac24 <async_start>:
{
   1ac24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ac26:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   1ac28:	6904      	ldr	r4, [r0, #16]
{
   1ac2a:	4605      	mov	r5, r0
   1ac2c:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   1ac2e:	f04f 0040 	mov.w	r0, #64	; 0x40
   1ac32:	f3ef 8c11 	mrs	ip, BASEPRI
   1ac36:	f380 8811 	msr	BASEPRI, r0
   1ac3a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1ac3e:	260c      	movs	r6, #12
   1ac40:	fb06 4601 	mla	r6, r6, r1, r4
   1ac44:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1ac46:	f000 0e07 	and.w	lr, r0, #7
   1ac4a:	f1be 0f01 	cmp.w	lr, #1
   1ac4e:	d110      	bne.n	1ac72 <async_start+0x4e>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1ac50:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
   1ac52:	2600      	movs	r6, #0
	__asm__ volatile(
   1ac54:	f38c 8811 	msr	BASEPRI, ip
   1ac58:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   1ac5c:	b93e      	cbnz	r6, 1ac6e <async_start+0x4a>
	subdata->cb = cb;
   1ac5e:	200c      	movs	r0, #12
   1ac60:	4341      	muls	r1, r0
   1ac62:	440c      	add	r4, r1
	subdata->user_data = user_data;
   1ac64:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   1ac68:	686b      	ldr	r3, [r5, #4]
   1ac6a:	585b      	ldr	r3, [r3, r1]
   1ac6c:	4798      	blx	r3
}
   1ac6e:	4630      	mov	r0, r6
   1ac70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1ac72:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
   1ac76:	4287      	cmp	r7, r0
   1ac78:	bf14      	ite	ne
   1ac7a:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
   1ac7e:	f06f 0677 	mvneq.w	r6, #119	; 0x77
   1ac82:	e7e7      	b.n	1ac54 <async_start+0x30>

0001ac84 <api_start>:
{
   1ac84:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   1ac86:	2480      	movs	r4, #128	; 0x80
   1ac88:	9400      	str	r4, [sp, #0]
   1ac8a:	f7ff ffcb 	bl	1ac24 <async_start>
}
   1ac8e:	b002      	add	sp, #8
   1ac90:	bd10      	pop	{r4, pc}

0001ac92 <onoff_started_callback>:
	return &data->mgr[type];
   1ac92:	6900      	ldr	r0, [r0, #16]
{
   1ac94:	b410      	push	{r4}
	return &data->mgr[type];
   1ac96:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   1ac98:	241c      	movs	r4, #28
   1ac9a:	fb03 0004 	mla	r0, r3, r4, r0
   1ac9e:	2100      	movs	r1, #0
}
   1aca0:	bc10      	pop	{r4}
	notify(mgr, 0);
   1aca2:	4710      	bx	r2

0001aca4 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1aca4:	2000      	movs	r0, #0
   1aca6:	f001 be6c 	b.w	1c982 <nrfx_clock_stop>

0001acaa <blocking_start_callback>:
{
   1acaa:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1acac:	f7fd bfd0 	b.w	18c50 <z_impl_k_sem_give>

0001acb0 <sys_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   1acb0:	4770      	bx	lr

0001acb2 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   1acb2:	4770      	bx	lr

0001acb4 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   1acb4:	b538      	push	{r3, r4, r5, lr}
   1acb6:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   1acb8:	42ab      	cmp	r3, r5
{
   1acba:	4611      	mov	r1, r2
   1acbc:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   1acbe:	d804      	bhi.n	1acca <_copy+0x16>
		(void)memcpy(to, from, from_len);
   1acc0:	461a      	mov	r2, r3
   1acc2:	f000 fa79 	bl	1b1b8 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   1acc6:	4620      	mov	r0, r4
   1acc8:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   1acca:	2400      	movs	r4, #0
   1accc:	e7fb      	b.n	1acc6 <_copy+0x12>

0001acce <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   1acce:	f000 ba7e 	b.w	1b1ce <memset>

0001acd2 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   1acd2:	09c3      	lsrs	r3, r0, #7
   1acd4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1acd8:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1acdc:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   1ace0:	b2c0      	uxtb	r0, r0
   1ace2:	4770      	bx	lr

0001ace4 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   1ace4:	78cb      	ldrb	r3, [r1, #3]
   1ace6:	7802      	ldrb	r2, [r0, #0]
   1ace8:	4053      	eors	r3, r2
   1acea:	7003      	strb	r3, [r0, #0]
   1acec:	884b      	ldrh	r3, [r1, #2]
   1acee:	7842      	ldrb	r2, [r0, #1]
   1acf0:	4053      	eors	r3, r2
   1acf2:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   1acf4:	680a      	ldr	r2, [r1, #0]
   1acf6:	7883      	ldrb	r3, [r0, #2]
   1acf8:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1acfc:	7083      	strb	r3, [r0, #2]
   1acfe:	680a      	ldr	r2, [r1, #0]
   1ad00:	78c3      	ldrb	r3, [r0, #3]
   1ad02:	4053      	eors	r3, r2
   1ad04:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   1ad06:	79cb      	ldrb	r3, [r1, #7]
   1ad08:	7902      	ldrb	r2, [r0, #4]
   1ad0a:	4053      	eors	r3, r2
   1ad0c:	7103      	strb	r3, [r0, #4]
   1ad0e:	88cb      	ldrh	r3, [r1, #6]
   1ad10:	7942      	ldrb	r2, [r0, #5]
   1ad12:	4053      	eors	r3, r2
   1ad14:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   1ad16:	684a      	ldr	r2, [r1, #4]
   1ad18:	7983      	ldrb	r3, [r0, #6]
   1ad1a:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1ad1e:	7183      	strb	r3, [r0, #6]
   1ad20:	684a      	ldr	r2, [r1, #4]
   1ad22:	79c3      	ldrb	r3, [r0, #7]
   1ad24:	4053      	eors	r3, r2
   1ad26:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   1ad28:	7acb      	ldrb	r3, [r1, #11]
   1ad2a:	7a02      	ldrb	r2, [r0, #8]
   1ad2c:	4053      	eors	r3, r2
   1ad2e:	7203      	strb	r3, [r0, #8]
   1ad30:	7a42      	ldrb	r2, [r0, #9]
   1ad32:	894b      	ldrh	r3, [r1, #10]
   1ad34:	4053      	eors	r3, r2
   1ad36:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   1ad38:	688a      	ldr	r2, [r1, #8]
   1ad3a:	7a83      	ldrb	r3, [r0, #10]
   1ad3c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1ad40:	7283      	strb	r3, [r0, #10]
   1ad42:	688a      	ldr	r2, [r1, #8]
   1ad44:	7ac3      	ldrb	r3, [r0, #11]
   1ad46:	4053      	eors	r3, r2
   1ad48:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   1ad4a:	7bcb      	ldrb	r3, [r1, #15]
   1ad4c:	7b02      	ldrb	r2, [r0, #12]
   1ad4e:	4053      	eors	r3, r2
   1ad50:	7303      	strb	r3, [r0, #12]
   1ad52:	89cb      	ldrh	r3, [r1, #14]
   1ad54:	7b42      	ldrb	r2, [r0, #13]
   1ad56:	4053      	eors	r3, r2
   1ad58:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   1ad5a:	68ca      	ldr	r2, [r1, #12]
   1ad5c:	7b83      	ldrb	r3, [r0, #14]
   1ad5e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1ad62:	7383      	strb	r3, [r0, #14]
   1ad64:	68ca      	ldr	r2, [r1, #12]
   1ad66:	7bc3      	ldrb	r3, [r0, #15]
   1ad68:	4053      	eors	r3, r2
   1ad6a:	73c3      	strb	r3, [r0, #15]
}
   1ad6c:	4770      	bx	lr

0001ad6e <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   1ad6e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1ad70:	7802      	ldrb	r2, [r0, #0]
   1ad72:	f88d 2000 	strb.w	r2, [sp]
   1ad76:	7942      	ldrb	r2, [r0, #5]
   1ad78:	f88d 2001 	strb.w	r2, [sp, #1]
   1ad7c:	7a82      	ldrb	r2, [r0, #10]
   1ad7e:	f88d 2002 	strb.w	r2, [sp, #2]
   1ad82:	7bc2      	ldrb	r2, [r0, #15]
   1ad84:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   1ad88:	7902      	ldrb	r2, [r0, #4]
   1ad8a:	f88d 2004 	strb.w	r2, [sp, #4]
   1ad8e:	7a42      	ldrb	r2, [r0, #9]
   1ad90:	f88d 2005 	strb.w	r2, [sp, #5]
   1ad94:	7b82      	ldrb	r2, [r0, #14]
   1ad96:	f88d 2006 	strb.w	r2, [sp, #6]
   1ad9a:	78c2      	ldrb	r2, [r0, #3]
   1ad9c:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   1ada0:	7a02      	ldrb	r2, [r0, #8]
   1ada2:	f88d 2008 	strb.w	r2, [sp, #8]
   1ada6:	7b42      	ldrb	r2, [r0, #13]
   1ada8:	f88d 2009 	strb.w	r2, [sp, #9]
   1adac:	7882      	ldrb	r2, [r0, #2]
   1adae:	f88d 200a 	strb.w	r2, [sp, #10]
   1adb2:	79c2      	ldrb	r2, [r0, #7]
   1adb4:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1adb8:	7b02      	ldrb	r2, [r0, #12]
   1adba:	f88d 200c 	strb.w	r2, [sp, #12]
   1adbe:	7842      	ldrb	r2, [r0, #1]
   1adc0:	7ac3      	ldrb	r3, [r0, #11]
   1adc2:	f88d 200d 	strb.w	r2, [sp, #13]
   1adc6:	7982      	ldrb	r2, [r0, #6]
   1adc8:	f88d 200e 	strb.w	r2, [sp, #14]
   1adcc:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1add0:	2310      	movs	r3, #16
   1add2:	466a      	mov	r2, sp
   1add4:	4619      	mov	r1, r3
   1add6:	f7ff ff6d 	bl	1acb4 <_copy>
}
   1adda:	b005      	add	sp, #20
   1addc:	f85d fb04 	ldr.w	pc, [sp], #4

0001ade0 <mult_row_column>:
{
   1ade0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ade2:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1ade4:	7808      	ldrb	r0, [r1, #0]
{
   1ade6:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1ade8:	f7ff ff73 	bl	1acd2 <_double_byte>
   1adec:	4605      	mov	r5, r0
   1adee:	7860      	ldrb	r0, [r4, #1]
   1adf0:	f7ff ff6f 	bl	1acd2 <_double_byte>
   1adf4:	78a2      	ldrb	r2, [r4, #2]
   1adf6:	7863      	ldrb	r3, [r4, #1]
   1adf8:	4053      	eors	r3, r2
   1adfa:	78e2      	ldrb	r2, [r4, #3]
   1adfc:	4053      	eors	r3, r2
   1adfe:	405d      	eors	r5, r3
   1ae00:	4045      	eors	r5, r0
   1ae02:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   1ae04:	7860      	ldrb	r0, [r4, #1]
   1ae06:	7827      	ldrb	r7, [r4, #0]
   1ae08:	f7ff ff63 	bl	1acd2 <_double_byte>
   1ae0c:	4605      	mov	r5, r0
   1ae0e:	78a0      	ldrb	r0, [r4, #2]
   1ae10:	f7ff ff5f 	bl	1acd2 <_double_byte>
   1ae14:	78a3      	ldrb	r3, [r4, #2]
   1ae16:	405f      	eors	r7, r3
   1ae18:	78e3      	ldrb	r3, [r4, #3]
   1ae1a:	405f      	eors	r7, r3
   1ae1c:	407d      	eors	r5, r7
   1ae1e:	4045      	eors	r5, r0
   1ae20:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   1ae22:	78a0      	ldrb	r0, [r4, #2]
   1ae24:	7865      	ldrb	r5, [r4, #1]
   1ae26:	7827      	ldrb	r7, [r4, #0]
   1ae28:	f7ff ff53 	bl	1acd2 <_double_byte>
   1ae2c:	406f      	eors	r7, r5
   1ae2e:	4605      	mov	r5, r0
   1ae30:	78e0      	ldrb	r0, [r4, #3]
   1ae32:	f7ff ff4e 	bl	1acd2 <_double_byte>
   1ae36:	78e3      	ldrb	r3, [r4, #3]
   1ae38:	405f      	eors	r7, r3
   1ae3a:	407d      	eors	r5, r7
   1ae3c:	4045      	eors	r5, r0
   1ae3e:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   1ae40:	7820      	ldrb	r0, [r4, #0]
   1ae42:	f7ff ff46 	bl	1acd2 <_double_byte>
   1ae46:	7863      	ldrb	r3, [r4, #1]
   1ae48:	7825      	ldrb	r5, [r4, #0]
   1ae4a:	405d      	eors	r5, r3
   1ae4c:	78a3      	ldrb	r3, [r4, #2]
   1ae4e:	405d      	eors	r5, r3
   1ae50:	4045      	eors	r5, r0
   1ae52:	78e0      	ldrb	r0, [r4, #3]
   1ae54:	f7ff ff3d 	bl	1acd2 <_double_byte>
   1ae58:	b2ed      	uxtb	r5, r5
   1ae5a:	4045      	eors	r5, r0
   1ae5c:	70f5      	strb	r5, [r6, #3]
}
   1ae5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001ae60 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   1ae60:	b570      	push	{r4, r5, r6, lr}
   1ae62:	4614      	mov	r4, r2
   1ae64:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   1ae66:	4605      	mov	r5, r0
   1ae68:	2800      	cmp	r0, #0
   1ae6a:	d049      	beq.n	1af00 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   1ae6c:	2900      	cmp	r1, #0
   1ae6e:	d049      	beq.n	1af04 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   1ae70:	2a00      	cmp	r2, #0
   1ae72:	d049      	beq.n	1af08 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   1ae74:	2310      	movs	r3, #16
   1ae76:	460a      	mov	r2, r1
   1ae78:	4668      	mov	r0, sp
   1ae7a:	4619      	mov	r1, r3
   1ae7c:	f7ff ff1a 	bl	1acb4 <_copy>
	add_round_key(state, s->words);
   1ae80:	4621      	mov	r1, r4
   1ae82:	4668      	mov	r0, sp
   1ae84:	f7ff ff2e 	bl	1ace4 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   1ae88:	3410      	adds	r4, #16
   1ae8a:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   1ae8e:	4668      	mov	r0, sp
   1ae90:	f7f6 f926 	bl	110e0 <sub_bytes>
		shift_rows(state);
   1ae94:	4668      	mov	r0, sp
   1ae96:	f7ff ff6a 	bl	1ad6e <shift_rows>
	mult_row_column(t, s);
   1ae9a:	4669      	mov	r1, sp
   1ae9c:	a804      	add	r0, sp, #16
   1ae9e:	f7ff ff9f 	bl	1ade0 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   1aea2:	a901      	add	r1, sp, #4
   1aea4:	a805      	add	r0, sp, #20
   1aea6:	f7ff ff9b 	bl	1ade0 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   1aeaa:	a902      	add	r1, sp, #8
   1aeac:	a806      	add	r0, sp, #24
   1aeae:	f7ff ff97 	bl	1ade0 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   1aeb2:	a903      	add	r1, sp, #12
   1aeb4:	a807      	add	r0, sp, #28
   1aeb6:	f7ff ff93 	bl	1ade0 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1aeba:	2310      	movs	r3, #16
   1aebc:	4619      	mov	r1, r3
   1aebe:	eb0d 0203 	add.w	r2, sp, r3
   1aec2:	4668      	mov	r0, sp
   1aec4:	f7ff fef6 	bl	1acb4 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   1aec8:	4621      	mov	r1, r4
   1aeca:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   1aecc:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   1aece:	f7ff ff09 	bl	1ace4 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   1aed2:	42a6      	cmp	r6, r4
   1aed4:	d1db      	bne.n	1ae8e <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   1aed6:	f7f6 f903 	bl	110e0 <sub_bytes>
	shift_rows(state);
   1aeda:	4668      	mov	r0, sp
   1aedc:	f7ff ff47 	bl	1ad6e <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   1aee0:	4631      	mov	r1, r6
   1aee2:	4668      	mov	r0, sp
   1aee4:	f7ff fefe 	bl	1ace4 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   1aee8:	2310      	movs	r3, #16
   1aeea:	4619      	mov	r1, r3
   1aeec:	466a      	mov	r2, sp
   1aeee:	4628      	mov	r0, r5
   1aef0:	f7ff fee0 	bl	1acb4 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   1aef4:	4668      	mov	r0, sp
   1aef6:	2210      	movs	r2, #16
   1aef8:	2100      	movs	r1, #0
   1aefa:	f7ff fee8 	bl	1acce <_set>

	return TC_CRYPTO_SUCCESS;
   1aefe:	2001      	movs	r0, #1
}
   1af00:	b008      	add	sp, #32
   1af02:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1af04:	4608      	mov	r0, r1
   1af06:	e7fb      	b.n	1af00 <tc_aes_encrypt+0xa0>
   1af08:	4610      	mov	r0, r2
   1af0a:	e7f9      	b.n	1af00 <tc_aes_encrypt+0xa0>

0001af0c <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   1af0c:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1af0e:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   1af10:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1af12:	f912 3b10 	ldrsb.w	r3, [r2], #16
   1af16:	2b00      	cmp	r3, #0
   1af18:	bfb4      	ite	lt
   1af1a:	2387      	movlt	r3, #135	; 0x87
   1af1c:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   1af1e:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1af22:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   1af26:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   1af28:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   1af2c:	d002      	beq.n	1af34 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   1af2e:	7813      	ldrb	r3, [r2, #0]
   1af30:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   1af32:	e7f4      	b.n	1af1e <gf_double+0x12>
	}
}
   1af34:	bd10      	pop	{r4, pc}

0001af36 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   1af36:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   1af38:	b120      	cbz	r0, 1af44 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   1af3a:	2258      	movs	r2, #88	; 0x58
   1af3c:	2100      	movs	r1, #0
   1af3e:	f7ff fec6 	bl	1acce <_set>
   1af42:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1af44:	bd08      	pop	{r3, pc}

0001af46 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   1af46:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1af48:	4604      	mov	r4, r0
   1af4a:	b188      	cbz	r0, 1af70 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1af4c:	2210      	movs	r2, #16
   1af4e:	2100      	movs	r1, #0
   1af50:	f7ff febd 	bl	1acce <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   1af54:	2210      	movs	r2, #16
   1af56:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1af5a:	2100      	movs	r1, #0
   1af5c:	f7ff feb7 	bl	1acce <_set>
	s->leftover_offset = 0;
   1af60:	2300      	movs	r3, #0
   1af62:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   1af64:	2200      	movs	r2, #0
   1af66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1af6a:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   1af6e:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1af70:	bd10      	pop	{r4, pc}

0001af72 <tc_cmac_setup>:
{
   1af72:	b570      	push	{r4, r5, r6, lr}
   1af74:	460d      	mov	r5, r1
   1af76:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   1af78:	4604      	mov	r4, r0
   1af7a:	b310      	cbz	r0, 1afc2 <tc_cmac_setup+0x50>
   1af7c:	b311      	cbz	r1, 1afc4 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   1af7e:	2258      	movs	r2, #88	; 0x58
   1af80:	2100      	movs	r1, #0
   1af82:	f7ff fea4 	bl	1acce <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   1af86:	4629      	mov	r1, r5
	s->sched = sched;
   1af88:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   1af8a:	4630      	mov	r0, r6
   1af8c:	f7f6 f8b4 	bl	110f8 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1af90:	2210      	movs	r2, #16
   1af92:	2100      	movs	r1, #0
   1af94:	4620      	mov	r0, r4
   1af96:	f7ff fe9a 	bl	1acce <_set>
	gf_double (s->K1, s->iv);
   1af9a:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   1af9e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1afa0:	4621      	mov	r1, r4
   1afa2:	4620      	mov	r0, r4
   1afa4:	f7ff ff5c 	bl	1ae60 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   1afa8:	4621      	mov	r1, r4
   1afaa:	4628      	mov	r0, r5
   1afac:	f7ff ffae 	bl	1af0c <gf_double>
	gf_double (s->K2, s->K1);
   1afb0:	4629      	mov	r1, r5
   1afb2:	f104 0020 	add.w	r0, r4, #32
   1afb6:	f7ff ffa9 	bl	1af0c <gf_double>
	tc_cmac_init(s);
   1afba:	4620      	mov	r0, r4
   1afbc:	f7ff ffc3 	bl	1af46 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   1afc0:	2001      	movs	r0, #1
}
   1afc2:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1afc4:	4608      	mov	r0, r1
   1afc6:	e7fc      	b.n	1afc2 <tc_cmac_setup+0x50>

0001afc8 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   1afc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1afcc:	460d      	mov	r5, r1
   1afce:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1afd0:	4604      	mov	r4, r0
   1afd2:	2800      	cmp	r0, #0
   1afd4:	d061      	beq.n	1b09a <tc_cmac_update+0xd2>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   1afd6:	b912      	cbnz	r2, 1afde <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   1afd8:	2001      	movs	r0, #1
}
   1afda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   1afde:	2900      	cmp	r1, #0
   1afe0:	d05b      	beq.n	1b09a <tc_cmac_update+0xd2>
	if (s->countdown == 0) {
   1afe2:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   1afe6:	ea53 0102 	orrs.w	r1, r3, r2
   1afea:	d056      	beq.n	1b09a <tc_cmac_update+0xd2>
	s->countdown--;
   1afec:	3b01      	subs	r3, #1
	if (s->leftover_offset > 0) {
   1afee:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   1aff2:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
   1aff6:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   1affa:	f1b8 0f00 	cmp.w	r8, #0
   1affe:	d02a      	beq.n	1b056 <tc_cmac_update+0x8e>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   1b000:	f1c8 0710 	rsb	r7, r8, #16
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1b004:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   1b008:	42be      	cmp	r6, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1b00a:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   1b00c:	d208      	bcs.n	1b020 <tc_cmac_update+0x58>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1b00e:	462a      	mov	r2, r5
   1b010:	4633      	mov	r3, r6
   1b012:	4631      	mov	r1, r6
   1b014:	f7ff fe4e 	bl	1acb4 <_copy>
			s->leftover_offset += data_length;
   1b018:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1b01a:	4432      	add	r2, r6
   1b01c:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   1b01e:	e7db      	b.n	1afd8 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   1b020:	463b      	mov	r3, r7
   1b022:	462a      	mov	r2, r5
   1b024:	4639      	mov	r1, r7
   1b026:	f7ff fe45 	bl	1acb4 <_copy>
		data_length -= remaining_space;
   1b02a:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   1b02c:	2300      	movs	r3, #0
   1b02e:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   1b030:	4446      	add	r6, r8
		data += remaining_space;
   1b032:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b034:	1e63      	subs	r3, r4, #1
   1b036:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   1b03a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1b03e:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b042:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   1b044:	ea82 0200 	eor.w	r2, r2, r0
   1b048:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b04a:	d1f6      	bne.n	1b03a <tc_cmac_update+0x72>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1b04c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1b04e:	4621      	mov	r1, r4
   1b050:	4620      	mov	r0, r4
   1b052:	f7ff ff05 	bl	1ae60 <tc_aes_encrypt>
   1b056:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   1b05a:	2e10      	cmp	r6, #16
   1b05c:	d80a      	bhi.n	1b074 <tc_cmac_update+0xac>
	if (data_length > 0) {
   1b05e:	2e00      	cmp	r6, #0
   1b060:	d0ba      	beq.n	1afd8 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   1b062:	4633      	mov	r3, r6
   1b064:	462a      	mov	r2, r5
   1b066:	4631      	mov	r1, r6
   1b068:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1b06c:	f7ff fe22 	bl	1acb4 <_copy>
		s->leftover_offset = data_length;
   1b070:	6466      	str	r6, [r4, #68]	; 0x44
   1b072:	e7b1      	b.n	1afd8 <tc_cmac_update+0x10>
   1b074:	1e63      	subs	r3, r4, #1
   1b076:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   1b078:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1b07c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b080:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   1b082:	ea82 0200 	eor.w	r2, r2, r0
   1b086:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b088:	d1f6      	bne.n	1b078 <tc_cmac_update+0xb0>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1b08a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1b08c:	4621      	mov	r1, r4
   1b08e:	4620      	mov	r0, r4
   1b090:	f7ff fee6 	bl	1ae60 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   1b094:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   1b096:	3e10      	subs	r6, #16
   1b098:	e7df      	b.n	1b05a <tc_cmac_update+0x92>
		return TC_CRYPTO_FAIL;
   1b09a:	2000      	movs	r0, #0
   1b09c:	e79d      	b.n	1afda <tc_cmac_update+0x12>

0001b09e <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   1b09e:	b570      	push	{r4, r5, r6, lr}
   1b0a0:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1b0a2:	4605      	mov	r5, r0
   1b0a4:	b1e8      	cbz	r0, 1b0e2 <tc_cmac_final+0x44>
   1b0a6:	b369      	cbz	r1, 1b104 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   1b0a8:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   1b0aa:	2a10      	cmp	r2, #16
   1b0ac:	d11a      	bne.n	1b0e4 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   1b0ae:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b0b0:	1e63      	subs	r3, r4, #1
   1b0b2:	3901      	subs	r1, #1
   1b0b4:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1b0b8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1b0bc:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   1b0c0:	4072      	eors	r2, r6
   1b0c2:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b0c6:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1b0c8:	ea82 0206 	eor.w	r2, r2, r6
   1b0cc:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b0ce:	d1f3      	bne.n	1b0b8 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   1b0d0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1b0d2:	4621      	mov	r1, r4
   1b0d4:	4628      	mov	r0, r5
   1b0d6:	f7ff fec3 	bl	1ae60 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   1b0da:	4620      	mov	r0, r4
   1b0dc:	f7ff ff2b 	bl	1af36 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   1b0e0:	2001      	movs	r0, #1
}
   1b0e2:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   1b0e4:	f102 0030 	add.w	r0, r2, #48	; 0x30
   1b0e8:	2100      	movs	r1, #0
   1b0ea:	f1c2 0210 	rsb	r2, r2, #16
   1b0ee:	4420      	add	r0, r4
   1b0f0:	f7ff fded 	bl	1acce <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1b0f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1b0f6:	4423      	add	r3, r4
   1b0f8:	2280      	movs	r2, #128	; 0x80
   1b0fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   1b0fe:	f104 0120 	add.w	r1, r4, #32
   1b102:	e7d5      	b.n	1b0b0 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   1b104:	4608      	mov	r0, r1
   1b106:	e7ec      	b.n	1b0e2 <tc_cmac_final+0x44>

0001b108 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1b108:	2100      	movs	r1, #0
   1b10a:	2001      	movs	r0, #1
   1b10c:	f7f6 b95a 	b.w	113c4 <z_arm_fatal_error>

0001b110 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1b110:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   1b112:	6800      	ldr	r0, [r0, #0]
   1b114:	f7f6 b956 	b.w	113c4 <z_arm_fatal_error>

0001b118 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1b118:	b508      	push	{r3, lr}
	handler();
   1b11a:	f7f6 f98b 	bl	11434 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   1b11e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1b122:	f7f6 bc19 	b.w	11958 <z_arm_exc_exit>

0001b126 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   1b126:	3901      	subs	r1, #1
   1b128:	4603      	mov	r3, r0
   1b12a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1b12e:	b90a      	cbnz	r2, 1b134 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   1b130:	701a      	strb	r2, [r3, #0]

	return dest;
}
   1b132:	4770      	bx	lr
		*d = *s;
   1b134:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   1b138:	e7f7      	b.n	1b12a <strcpy+0x4>

0001b13a <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   1b13a:	b570      	push	{r4, r5, r6, lr}
   1b13c:	4605      	mov	r5, r0
   1b13e:	462b      	mov	r3, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   1b140:	b142      	cbz	r2, 1b154 <strncpy+0x1a>
   1b142:	f811 4b01 	ldrb.w	r4, [r1], #1
		*d = *s;
		s++;
		d++;
		n--;
   1b146:	1e56      	subs	r6, r2, #1
	while ((n > 0) && *s != '\0') {
   1b148:	b92c      	cbnz	r4, 1b156 <strncpy+0x1c>
   1b14a:	442a      	add	r2, r5
	}

	while (n > 0) {
		*d = '\0';
   1b14c:	f803 4b01 	strb.w	r4, [r3], #1
	while (n > 0) {
   1b150:	429a      	cmp	r2, r3
   1b152:	d1fb      	bne.n	1b14c <strncpy+0x12>
		d++;
		n--;
	}

	return dest;
}
   1b154:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
   1b156:	f805 4b01 	strb.w	r4, [r5], #1
		n--;
   1b15a:	4632      	mov	r2, r6
   1b15c:	e7ef      	b.n	1b13e <strncpy+0x4>

0001b15e <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   1b15e:	4603      	mov	r3, r0
	size_t n = 0;
   1b160:	2000      	movs	r0, #0

	while (*s != '\0') {
   1b162:	5c1a      	ldrb	r2, [r3, r0]
   1b164:	b902      	cbnz	r2, 1b168 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   1b166:	4770      	bx	lr
		n++;
   1b168:	3001      	adds	r0, #1
   1b16a:	e7fa      	b.n	1b162 <strlen+0x4>

0001b16c <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   1b16c:	4603      	mov	r3, r0
	size_t n = 0;
   1b16e:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   1b170:	5c1a      	ldrb	r2, [r3, r0]
   1b172:	b10a      	cbz	r2, 1b178 <strnlen+0xc>
   1b174:	4288      	cmp	r0, r1
   1b176:	d100      	bne.n	1b17a <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   1b178:	4770      	bx	lr
		n++;
   1b17a:	3001      	adds	r0, #1
   1b17c:	e7f8      	b.n	1b170 <strnlen+0x4>

0001b17e <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   1b17e:	1e43      	subs	r3, r0, #1
   1b180:	3901      	subs	r1, #1
   1b182:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1b186:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   1b18a:	4282      	cmp	r2, r0
   1b18c:	d101      	bne.n	1b192 <strcmp+0x14>
   1b18e:	2a00      	cmp	r2, #0
   1b190:	d1f7      	bne.n	1b182 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   1b192:	1a10      	subs	r0, r2, r0
   1b194:	4770      	bx	lr

0001b196 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   1b196:	b510      	push	{r4, lr}
   1b198:	4603      	mov	r3, r0
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   1b19a:	b15a      	cbz	r2, 1b1b4 <memcmp+0x1e>
   1b19c:	3901      	subs	r1, #1
   1b19e:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1b1a0:	f813 0b01 	ldrb.w	r0, [r3], #1
   1b1a4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1b1a8:	42a3      	cmp	r3, r4
   1b1aa:	d001      	beq.n	1b1b0 <memcmp+0x1a>
   1b1ac:	4290      	cmp	r0, r2
   1b1ae:	d0f7      	beq.n	1b1a0 <memcmp+0xa>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1b1b0:	1a80      	subs	r0, r0, r2
}
   1b1b2:	bd10      	pop	{r4, pc}
		return 0;
   1b1b4:	4610      	mov	r0, r2
   1b1b6:	e7fc      	b.n	1b1b2 <memcmp+0x1c>

0001b1b8 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   1b1b8:	b510      	push	{r4, lr}
   1b1ba:	1e43      	subs	r3, r0, #1
   1b1bc:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   1b1be:	4291      	cmp	r1, r2
   1b1c0:	d100      	bne.n	1b1c4 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1b1c2:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   1b1c4:	f811 4b01 	ldrb.w	r4, [r1], #1
   1b1c8:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1b1cc:	e7f7      	b.n	1b1be <memcpy+0x6>

0001b1ce <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   1b1ce:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   1b1d0:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   1b1d2:	4603      	mov	r3, r0
	while (n > 0) {
   1b1d4:	4293      	cmp	r3, r2
   1b1d6:	d100      	bne.n	1b1da <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1b1d8:	4770      	bx	lr
		*(d_byte++) = c_byte;
   1b1da:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1b1de:	e7f9      	b.n	1b1d4 <memset+0x6>

0001b1e0 <_stdout_hook_default>:
}
   1b1e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b1e4:	4770      	bx	lr

0001b1e6 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   1b1e6:	b084      	sub	sp, #16
   1b1e8:	ab04      	add	r3, sp, #16
   1b1ea:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   1b1ee:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1b1f2:	2b06      	cmp	r3, #6
   1b1f4:	d108      	bne.n	1b208 <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   1b1f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1b1fa:	2201      	movs	r2, #1
   1b1fc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   1b200:	f3bf 8f4f 	dsb	sy
        __WFE();
   1b204:	bf20      	wfe
    while (true)
   1b206:	e7fd      	b.n	1b204 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   1b208:	b004      	add	sp, #16
   1b20a:	4770      	bx	lr

0001b20c <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   1b20c:	b084      	sub	sp, #16
   1b20e:	ab04      	add	r3, sp, #16
   1b210:	e903 0007 	stmdb	r3, {r0, r1, r2}
   1b214:	2300      	movs	r3, #0
   1b216:	f383 8811 	msr	BASEPRI, r3
   1b21a:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   1b21e:	b004      	add	sp, #16
   1b220:	4770      	bx	lr

0001b222 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   1b222:	b510      	push	{r4, lr}
   1b224:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   1b226:	7801      	ldrb	r1, [r0, #0]
   1b228:	7822      	ldrb	r2, [r4, #0]
   1b22a:	428a      	cmp	r2, r1
{
   1b22c:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   1b22e:	d00f      	beq.n	1b250 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   1b230:	4669      	mov	r1, sp
   1b232:	f7f6 fd83 	bl	11d3c <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   1b236:	a905      	add	r1, sp, #20
   1b238:	4620      	mov	r0, r4
   1b23a:	f7f6 fd7f 	bl	11d3c <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   1b23e:	2210      	movs	r2, #16
   1b240:	f10d 0115 	add.w	r1, sp, #21
   1b244:	f10d 0001 	add.w	r0, sp, #1
   1b248:	f7ff ffa5 	bl	1b196 <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   1b24c:	b00a      	add	sp, #40	; 0x28
   1b24e:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   1b250:	2a01      	cmp	r2, #1
   1b252:	d006      	beq.n	1b262 <bt_uuid_cmp+0x40>
   1b254:	2a02      	cmp	r2, #2
   1b256:	d007      	beq.n	1b268 <bt_uuid_cmp+0x46>
   1b258:	b972      	cbnz	r2, 1b278 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   1b25a:	8840      	ldrh	r0, [r0, #2]
   1b25c:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1b25e:	1ac0      	subs	r0, r0, r3
   1b260:	e7f4      	b.n	1b24c <bt_uuid_cmp+0x2a>
   1b262:	6840      	ldr	r0, [r0, #4]
   1b264:	6863      	ldr	r3, [r4, #4]
   1b266:	e7fa      	b.n	1b25e <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1b268:	2210      	movs	r2, #16
   1b26a:	1c61      	adds	r1, r4, #1
   1b26c:	3001      	adds	r0, #1
}
   1b26e:	b00a      	add	sp, #40	; 0x28
   1b270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1b274:	f7ff bf8f 	b.w	1b196 <memcmp>
	switch (u1->type) {
   1b278:	f06f 0015 	mvn.w	r0, #21
   1b27c:	e7e6      	b.n	1b24c <bt_uuid_cmp+0x2a>

0001b27e <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   1b27e:	2a04      	cmp	r2, #4
{
   1b280:	b510      	push	{r4, lr}
	switch (data_len) {
   1b282:	d00a      	beq.n	1b29a <bt_uuid_create+0x1c>
   1b284:	2a10      	cmp	r2, #16
   1b286:	d00d      	beq.n	1b2a4 <bt_uuid_create+0x26>
   1b288:	2a02      	cmp	r2, #2
   1b28a:	f04f 0300 	mov.w	r3, #0
   1b28e:	d10f      	bne.n	1b2b0 <bt_uuid_create+0x32>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   1b290:	7003      	strb	r3, [r0, #0]
   1b292:	880b      	ldrh	r3, [r1, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   1b294:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   1b296:	2001      	movs	r0, #1
}
   1b298:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   1b29a:	2301      	movs	r3, #1
   1b29c:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1b29e:	680a      	ldr	r2, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   1b2a0:	6042      	str	r2, [r0, #4]
		break;
   1b2a2:	e7f8      	b.n	1b296 <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   1b2a4:	2302      	movs	r3, #2
   1b2a6:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   1b2aa:	f7ff ff85 	bl	1b1b8 <memcpy>
		break;
   1b2ae:	e7f2      	b.n	1b296 <bt_uuid_create+0x18>
	switch (data_len) {
   1b2b0:	4618      	mov	r0, r3
   1b2b2:	e7f1      	b.n	1b298 <bt_uuid_create+0x1a>

0001b2b4 <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   1b2b4:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   1b2b6:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   1b2b8:	2106      	movs	r1, #6
{
   1b2ba:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   1b2bc:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   1b2c0:	f7fc fe12 	bl	17ee8 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   1b2c4:	b918      	cbnz	r0, 1b2ce <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   1b2c6:	79a3      	ldrb	r3, [r4, #6]
   1b2c8:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1b2cc:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   1b2ce:	bd10      	pop	{r4, pc}

0001b2d0 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   1b2d0:	280f      	cmp	r0, #15
   1b2d2:	d806      	bhi.n	1b2e2 <bt_hci_evt_get_flags+0x12>
   1b2d4:	280d      	cmp	r0, #13
   1b2d6:	d80b      	bhi.n	1b2f0 <bt_hci_evt_get_flags+0x20>
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   1b2d8:	2805      	cmp	r0, #5
   1b2da:	bf14      	ite	ne
   1b2dc:	2002      	movne	r0, #2
   1b2de:	2003      	moveq	r0, #3
   1b2e0:	4770      	bx	lr
	switch (evt) {
   1b2e2:	2813      	cmp	r0, #19
   1b2e4:	d004      	beq.n	1b2f0 <bt_hci_evt_get_flags+0x20>
   1b2e6:	281a      	cmp	r0, #26
   1b2e8:	bf14      	ite	ne
   1b2ea:	2002      	movne	r0, #2
   1b2ec:	2001      	moveq	r0, #1
   1b2ee:	4770      	bx	lr
   1b2f0:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   1b2f2:	4770      	bx	lr

0001b2f4 <atomic_or>:
{
   1b2f4:	4603      	mov	r3, r0
}
   1b2f6:	f3bf 8f5b 	dmb	ish
   1b2fa:	e853 0f00 	ldrex	r0, [r3]
   1b2fe:	ea40 0201 	orr.w	r2, r0, r1
   1b302:	e843 2c00 	strex	ip, r2, [r3]
   1b306:	f1bc 0f00 	cmp.w	ip, #0
   1b30a:	d1f6      	bne.n	1b2fa <atomic_or+0x6>
   1b30c:	f3bf 8f5b 	dmb	ish
   1b310:	4770      	bx	lr

0001b312 <bt_hci_disconnect>:
{
   1b312:	b570      	push	{r4, r5, r6, lr}
   1b314:	4606      	mov	r6, r0
   1b316:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   1b318:	f240 4006 	movw	r0, #1030	; 0x406
   1b31c:	2103      	movs	r1, #3
   1b31e:	f7f7 f931 	bl	12584 <bt_hci_cmd_create>
	if (!buf) {
   1b322:	4604      	mov	r4, r0
   1b324:	b168      	cbz	r0, 1b342 <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   1b326:	2103      	movs	r1, #3
   1b328:	3008      	adds	r0, #8
   1b32a:	f001 f9ef 	bl	1c70c <net_buf_simple_add>
	disconn->reason = reason;
   1b32e:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   1b330:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1b332:	4621      	mov	r1, r4
   1b334:	2200      	movs	r2, #0
}
   1b336:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1b33a:	f240 4006 	movw	r0, #1030	; 0x406
   1b33e:	f7f7 b95b 	b.w	125f8 <bt_hci_cmd_send_sync>
}
   1b342:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1b346:	bd70      	pop	{r4, r5, r6, pc}

0001b348 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   1b348:	8803      	ldrh	r3, [r0, #0]
   1b34a:	8842      	ldrh	r2, [r0, #2]
   1b34c:	4293      	cmp	r3, r2
{
   1b34e:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   1b350:	d819      	bhi.n	1b386 <bt_le_conn_params_valid+0x3e>
   1b352:	2b05      	cmp	r3, #5
   1b354:	d917      	bls.n	1b386 <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   1b356:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   1b35a:	d814      	bhi.n	1b386 <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   1b35c:	8883      	ldrh	r3, [r0, #4]
   1b35e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   1b362:	d210      	bcs.n	1b386 <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   1b364:	88c0      	ldrh	r0, [r0, #6]
   1b366:	f1a0 010a 	sub.w	r1, r0, #10
   1b36a:	b289      	uxth	r1, r1
   1b36c:	f640 4476 	movw	r4, #3190	; 0xc76
   1b370:	42a1      	cmp	r1, r4
   1b372:	d808      	bhi.n	1b386 <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   1b374:	3301      	adds	r3, #1
   1b376:	b29b      	uxth	r3, r3
   1b378:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   1b37a:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   1b37e:	bf34      	ite	cc
   1b380:	2001      	movcc	r0, #1
   1b382:	2000      	movcs	r0, #0
}
   1b384:	bd10      	pop	{r4, pc}
		return false;
   1b386:	2000      	movs	r0, #0
   1b388:	e7fc      	b.n	1b384 <bt_le_conn_params_valid+0x3c>

0001b38a <bt_le_set_data_len>:
{
   1b38a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b38c:	4607      	mov	r7, r0
   1b38e:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1b390:	f242 0022 	movw	r0, #8226	; 0x2022
   1b394:	2106      	movs	r1, #6
{
   1b396:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1b398:	f7f7 f8f4 	bl	12584 <bt_hci_cmd_create>
	if (!buf) {
   1b39c:	4604      	mov	r4, r0
   1b39e:	b170      	cbz	r0, 1b3be <bt_le_set_data_len+0x34>
   1b3a0:	2106      	movs	r1, #6
   1b3a2:	3008      	adds	r0, #8
   1b3a4:	f001 f9b2 	bl	1c70c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1b3a8:	883b      	ldrh	r3, [r7, #0]
   1b3aa:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   1b3ac:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   1b3ae:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1b3b0:	4621      	mov	r1, r4
   1b3b2:	f242 0022 	movw	r0, #8226	; 0x2022
}
   1b3b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1b3ba:	f7f7 b9c9 	b.w	12750 <bt_hci_cmd_send>
}
   1b3be:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1b3c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001b3c4 <bt_le_set_phy>:
{
   1b3c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b3c8:	4680      	mov	r8, r0
   1b3ca:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1b3cc:	f242 0032 	movw	r0, #8242	; 0x2032
   1b3d0:	2107      	movs	r1, #7
{
   1b3d2:	f89d 9020 	ldrb.w	r9, [sp, #32]
   1b3d6:	4616      	mov	r6, r2
   1b3d8:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1b3da:	f7f7 f8d3 	bl	12584 <bt_hci_cmd_create>
	if (!buf) {
   1b3de:	4604      	mov	r4, r0
   1b3e0:	b190      	cbz	r0, 1b408 <bt_le_set_phy+0x44>
   1b3e2:	2107      	movs	r1, #7
   1b3e4:	3008      	adds	r0, #8
   1b3e6:	f001 f991 	bl	1c70c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1b3ea:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   1b3ee:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   1b3f0:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   1b3f2:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   1b3f4:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   1b3f6:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1b3fa:	4621      	mov	r1, r4
   1b3fc:	f242 0032 	movw	r0, #8242	; 0x2032
}
   1b400:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1b404:	f7f7 b9a4 	b.w	12750 <bt_hci_cmd_send>
}
   1b408:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1b40c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001b410 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   1b410:	6880      	ldr	r0, [r0, #8]
   1b412:	f7f7 ba4f 	b.w	128b4 <bt_hci_le_enh_conn_complete>

0001b416 <le_legacy_conn_complete>:
{
   1b416:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   1b418:	6884      	ldr	r4, [r0, #8]
{
   1b41a:	b08a      	sub	sp, #40	; 0x28
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   1b41c:	f7f8 fc3c 	bl	13c98 <bt_le_adv_lookup_legacy>
	(void)bt_le_lim_adv_cancel_timeout(adv);
   1b420:	f000 f92f 	bl	1b682 <bt_le_lim_adv_cancel_timeout>
	enh.status         = evt->status;
   1b424:	7823      	ldrb	r3, [r4, #0]
   1b426:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   1b42a:	f8b4 3001 	ldrh.w	r3, [r4, #1]
   1b42e:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   1b432:	78e3      	ldrb	r3, [r4, #3]
   1b434:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   1b438:	f8b4 300b 	ldrh.w	r3, [r4, #11]
   1b43c:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   1b440:	f8b4 300d 	ldrh.w	r3, [r4, #13]
   1b444:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   1b448:	f8b4 300f 	ldrh.w	r3, [r4, #15]
   1b44c:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   1b450:	7c63      	ldrb	r3, [r4, #17]
   1b452:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	memcpy(dst, src, sizeof(*dst));
   1b456:	1d21      	adds	r1, r4, #4
   1b458:	2207      	movs	r2, #7
   1b45a:	a803      	add	r0, sp, #12
   1b45c:	f7ff feac 	bl	1b1b8 <memcpy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   1b460:	2400      	movs	r4, #0
	memcpy(dst, src, sizeof(*dst));
   1b462:	4669      	mov	r1, sp
   1b464:	2206      	movs	r2, #6
   1b466:	f10d 0013 	add.w	r0, sp, #19
   1b46a:	9400      	str	r4, [sp, #0]
   1b46c:	f8ad 4004 	strh.w	r4, [sp, #4]
   1b470:	f7ff fea2 	bl	1b1b8 <memcpy>
   1b474:	2206      	movs	r2, #6
   1b476:	4669      	mov	r1, sp
   1b478:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   1b47c:	9400      	str	r4, [sp, #0]
   1b47e:	f8ad 4004 	strh.w	r4, [sp, #4]
   1b482:	f7ff fe99 	bl	1b1b8 <memcpy>
	bt_hci_le_enh_conn_complete(evt);
   1b486:	a802      	add	r0, sp, #8
   1b488:	f7f7 fa14 	bl	128b4 <bt_hci_le_enh_conn_complete>
}
   1b48c:	b00a      	add	sp, #40	; 0x28
   1b48e:	bd10      	pop	{r4, pc}

0001b490 <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
   1b490:	2000      	movs	r0, #0
   1b492:	4770      	bx	lr

0001b494 <bt_lookup_id_addr>:
}
   1b494:	4608      	mov	r0, r1
   1b496:	4770      	bx	lr

0001b498 <bt_id_set_adv_private_addr>:
{
   1b498:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   1b49a:	2106      	movs	r1, #6
   1b49c:	4668      	mov	r0, sp
   1b49e:	f7fc fd23 	bl	17ee8 <bt_rand>
	if (err) {
   1b4a2:	b940      	cbnz	r0, 1b4b6 <bt_id_set_adv_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   1b4a4:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
   1b4a8:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   1b4aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1b4ae:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
   1b4b2:	f7f8 f8d5 	bl	13660 <set_random_address>
}
   1b4b6:	b003      	add	sp, #12
   1b4b8:	f85d fb04 	ldr.w	pc, [sp], #4

0001b4bc <bt_id_adv_random_addr_check>:
}
   1b4bc:	2001      	movs	r0, #1
   1b4be:	4770      	bx	lr

0001b4c0 <get_adv_channel_map>:
{
   1b4c0:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   1b4c2:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   1b4c6:	bf0c      	ite	eq
   1b4c8:	2007      	moveq	r0, #7
   1b4ca:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   1b4cc:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   1b4ce:	bf48      	it	mi
   1b4d0:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   1b4d4:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   1b4d6:	bf48      	it	mi
   1b4d8:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   1b4dc:	4770      	bx	lr

0001b4de <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b4de:	f3bf 8f5b 	dmb	ish
   1b4e2:	6800      	ldr	r0, [r0, #0]
   1b4e4:	f3bf 8f5b 	dmb	ish
}
   1b4e8:	4770      	bx	lr

0001b4ea <atomic_and>:
{
   1b4ea:	4603      	mov	r3, r0
}
   1b4ec:	f3bf 8f5b 	dmb	ish
   1b4f0:	e853 0f00 	ldrex	r0, [r3]
   1b4f4:	ea00 0201 	and.w	r2, r0, r1
   1b4f8:	e843 2c00 	strex	ip, r2, [r3]
   1b4fc:	f1bc 0f00 	cmp.w	ip, #0
   1b500:	d1f6      	bne.n	1b4f0 <atomic_and+0x6>
   1b502:	f3bf 8f5b 	dmb	ish
   1b506:	4770      	bx	lr

0001b508 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1b508:	2301      	movs	r3, #1
{
   1b50a:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1b50c:	fa03 f101 	lsl.w	r1, r3, r1
{
   1b510:	4604      	mov	r4, r0
	if (val) {
   1b512:	b162      	cbz	r2, 1b52e <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b514:	f3bf 8f5b 	dmb	ish
   1b518:	e854 3f00 	ldrex	r3, [r4]
   1b51c:	430b      	orrs	r3, r1
   1b51e:	e844 3200 	strex	r2, r3, [r4]
   1b522:	2a00      	cmp	r2, #0
   1b524:	d1f8      	bne.n	1b518 <atomic_set_bit_to+0x10>
   1b526:	f3bf 8f5b 	dmb	ish
	}
}
   1b52a:	bc10      	pop	{r4}
   1b52c:	4770      	bx	lr
   1b52e:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1b530:	43c9      	mvns	r1, r1
   1b532:	f7ff bfda 	b.w	1b4ea <atomic_and>

0001b536 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   1b536:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b53a:	b087      	sub	sp, #28
   1b53c:	4605      	mov	r5, r0
   1b53e:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
   1b542:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   1b546:	f89d 804c 	ldrb.w	r8, [sp, #76]	; 0x4c
   1b54a:	460c      	mov	r4, r1
   1b54c:	4693      	mov	fp, r2
	struct bt_ad d[2] = {};
   1b54e:	2100      	movs	r1, #0
   1b550:	2210      	movs	r2, #16
   1b552:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   1b554:	461e      	mov	r6, r3
	struct bt_ad d[2] = {};
   1b556:	f7ff fe3a 	bl	1b1ce <memset>
	if (use_name) {
   1b55a:	b187      	cbz	r7, 1b57e <le_adv_update.constprop.0+0x48>
		const char *name = bt_get_name();
   1b55c:	f7f8 f862 	bl	13624 <bt_get_name>
   1b560:	4681      	mov	r9, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   1b562:	2c00      	cmp	r4, #0
   1b564:	d13e      	bne.n	1b5e4 <le_adv_update.constprop.0+0xae>
   1b566:	2e00      	cmp	r6, #0
   1b568:	d148      	bne.n	1b5fc <le_adv_update.constprop.0+0xc6>
		data = (struct bt_data)BT_DATA(
   1b56a:	4648      	mov	r0, r9
   1b56c:	f7ff fdf7 	bl	1b15e <strlen>
   1b570:	2209      	movs	r2, #9
   1b572:	f88d 2000 	strb.w	r2, [sp]
   1b576:	f88d 0001 	strb.w	r0, [sp, #1]
   1b57a:	f8cd 9004 	str.w	r9, [sp, #4]
		d[0].len = ad_len;
   1b57e:	e9cd 4b02 	strd	r4, fp, [sp, #8]
		if (use_name && (!scannable || force_name_in_ad)) {
   1b582:	2f00      	cmp	r7, #0
   1b584:	d03c      	beq.n	1b600 <le_adv_update.constprop.0+0xca>
   1b586:	f1ba 0f00 	cmp.w	sl, #0
   1b58a:	d002      	beq.n	1b592 <le_adv_update.constprop.0+0x5c>
   1b58c:	f1b8 0f00 	cmp.w	r8, #0
   1b590:	d036      	beq.n	1b600 <le_adv_update.constprop.0+0xca>
			d[1].len = 1;
   1b592:	2301      	movs	r3, #1
			d[1].data = &data;
   1b594:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   1b598:	9305      	str	r3, [sp, #20]
			d_len = 2;
   1b59a:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   1b59c:	a902      	add	r1, sp, #8
   1b59e:	f242 0008 	movw	r0, #8200	; 0x2008
   1b5a2:	f7f8 fac3 	bl	13b2c <hci_set_ad>
		if (err) {
   1b5a6:	4604      	mov	r4, r0
   1b5a8:	b978      	cbnz	r0, 1b5ca <le_adv_update.constprop.0+0x94>
	if (scannable) {
   1b5aa:	f1ba 0f00 	cmp.w	sl, #0
   1b5ae:	d129      	bne.n	1b604 <le_adv_update.constprop.0+0xce>
   1b5b0:	3510      	adds	r5, #16
   1b5b2:	f3bf 8f5b 	dmb	ish
   1b5b6:	e855 3f00 	ldrex	r3, [r5]
   1b5ba:	f043 0304 	orr.w	r3, r3, #4
   1b5be:	e845 3200 	strex	r2, r3, [r5]
   1b5c2:	2a00      	cmp	r2, #0
   1b5c4:	d1f7      	bne.n	1b5b6 <le_adv_update.constprop.0+0x80>
   1b5c6:	f3bf 8f5b 	dmb	ish
}
   1b5ca:	4620      	mov	r0, r4
   1b5cc:	b007      	add	sp, #28
   1b5ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   1b5d2:	f814 1032 	ldrb.w	r1, [r4, r2, lsl #3]
   1b5d6:	3908      	subs	r1, #8
   1b5d8:	2901      	cmp	r1, #1
   1b5da:	d92a      	bls.n	1b632 <le_adv_update.constprop.0+0xfc>
	for (i = 0; i < ad_len; i++) {
   1b5dc:	3201      	adds	r2, #1
   1b5de:	4593      	cmp	fp, r2
   1b5e0:	d1f7      	bne.n	1b5d2 <le_adv_update.constprop.0+0x9c>
   1b5e2:	e7c0      	b.n	1b566 <le_adv_update.constprop.0+0x30>
   1b5e4:	2200      	movs	r2, #0
   1b5e6:	e7fa      	b.n	1b5de <le_adv_update.constprop.0+0xa8>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   1b5e8:	f816 1032 	ldrb.w	r1, [r6, r2, lsl #3]
   1b5ec:	3908      	subs	r1, #8
   1b5ee:	2901      	cmp	r1, #1
   1b5f0:	d91f      	bls.n	1b632 <le_adv_update.constprop.0+0xfc>
	for (i = 0; i < ad_len; i++) {
   1b5f2:	3201      	adds	r2, #1
   1b5f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1b5f6:	4293      	cmp	r3, r2
   1b5f8:	d1f6      	bne.n	1b5e8 <le_adv_update.constprop.0+0xb2>
   1b5fa:	e7b6      	b.n	1b56a <le_adv_update.constprop.0+0x34>
   1b5fc:	2200      	movs	r2, #0
   1b5fe:	e7f9      	b.n	1b5f4 <le_adv_update.constprop.0+0xbe>
		d_len = 1;
   1b600:	2201      	movs	r2, #1
   1b602:	e7cb      	b.n	1b59c <le_adv_update.constprop.0+0x66>
		d[0].len = sd_len;
   1b604:	9b10      	ldr	r3, [sp, #64]	; 0x40
		d[0].data = sd;
   1b606:	9602      	str	r6, [sp, #8]
		d[0].len = sd_len;
   1b608:	9303      	str	r3, [sp, #12]
		if (use_name && !force_name_in_ad) {
   1b60a:	b187      	cbz	r7, 1b62e <le_adv_update.constprop.0+0xf8>
   1b60c:	f1b8 0f00 	cmp.w	r8, #0
   1b610:	d10d      	bne.n	1b62e <le_adv_update.constprop.0+0xf8>
			d[1].len = 1;
   1b612:	2301      	movs	r3, #1
			d[1].data = &data;
   1b614:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   1b618:	9305      	str	r3, [sp, #20]
			d_len = 2;
   1b61a:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   1b61c:	a902      	add	r1, sp, #8
   1b61e:	f242 0009 	movw	r0, #8201	; 0x2009
   1b622:	f7f8 fa83 	bl	13b2c <hci_set_ad>
		if (err) {
   1b626:	2800      	cmp	r0, #0
   1b628:	d0c2      	beq.n	1b5b0 <le_adv_update.constprop.0+0x7a>
   1b62a:	4604      	mov	r4, r0
   1b62c:	e7cd      	b.n	1b5ca <le_adv_update.constprop.0+0x94>
		d_len = 1;
   1b62e:	2201      	movs	r2, #1
   1b630:	e7f4      	b.n	1b61c <le_adv_update.constprop.0+0xe6>
			return -EINVAL;
   1b632:	f06f 0415 	mvn.w	r4, #21
   1b636:	e7c8      	b.n	1b5ca <le_adv_update.constprop.0+0x94>

0001b638 <bt_le_adv_set_enable_legacy>:
{
   1b638:	b570      	push	{r4, r5, r6, lr}
   1b63a:	4606      	mov	r6, r0
   1b63c:	b086      	sub	sp, #24
   1b63e:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   1b640:	f242 000a 	movw	r0, #8202	; 0x200a
   1b644:	2101      	movs	r1, #1
   1b646:	f7f6 ff9d 	bl	12584 <bt_hci_cmd_create>
	if (!buf) {
   1b64a:	4604      	mov	r4, r0
   1b64c:	b1b0      	cbz	r0, 1b67c <bt_le_adv_set_enable_legacy+0x44>
	return net_buf_simple_add_u8(&buf->b, val);
   1b64e:	3008      	adds	r0, #8
	if (enable) {
   1b650:	b195      	cbz	r5, 1b678 <bt_le_adv_set_enable_legacy+0x40>
   1b652:	2101      	movs	r1, #1
   1b654:	f001 f869 	bl	1c72a <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   1b658:	f106 0210 	add.w	r2, r6, #16
   1b65c:	a903      	add	r1, sp, #12
   1b65e:	4620      	mov	r0, r4
   1b660:	9500      	str	r5, [sp, #0]
   1b662:	2306      	movs	r3, #6
   1b664:	f7f6 ff7c 	bl	12560 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   1b668:	2200      	movs	r2, #0
   1b66a:	4621      	mov	r1, r4
   1b66c:	f242 000a 	movw	r0, #8202	; 0x200a
   1b670:	f7f6 ffc2 	bl	125f8 <bt_hci_cmd_send_sync>
}
   1b674:	b006      	add	sp, #24
   1b676:	bd70      	pop	{r4, r5, r6, pc}
   1b678:	4629      	mov	r1, r5
   1b67a:	e7eb      	b.n	1b654 <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   1b67c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1b680:	e7f8      	b.n	1b674 <bt_le_adv_set_enable_legacy+0x3c>

0001b682 <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   1b682:	3018      	adds	r0, #24
   1b684:	f001 bbed 	b.w	1ce62 <k_work_cancel_delayable>

0001b688 <tx_notify>:
{
   1b688:	b570      	push	{r4, r5, r6, lr}
   1b68a:	4604      	mov	r4, r0
	__asm__ volatile(
   1b68c:	f04f 0240 	mov.w	r2, #64	; 0x40
   1b690:	f3ef 8311 	mrs	r3, BASEPRI
   1b694:	f382 8811 	msr	BASEPRI, r2
   1b698:	f3bf 8f6f 	isb	sy
	return list->head;
   1b69c:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   1b69e:	b920      	cbnz	r0, 1b6aa <tx_notify+0x22>
	__asm__ volatile(
   1b6a0:	f383 8811 	msr	BASEPRI, r3
   1b6a4:	f3bf 8f6f 	isb	sy
}
   1b6a8:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b6aa:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return node->next;
   1b6ac:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1b6ae:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b6b0:	4288      	cmp	r0, r1
	list->tail = node;
   1b6b2:	bf08      	it	eq
   1b6b4:	6262      	streq	r2, [r4, #36]	; 0x24
   1b6b6:	f383 8811 	msr	BASEPRI, r3
   1b6ba:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   1b6be:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   1b6c2:	f7f8 fcf7 	bl	140b4 <tx_free>
		cb(conn, user_data);
   1b6c6:	4631      	mov	r1, r6
   1b6c8:	4620      	mov	r0, r4
   1b6ca:	47a8      	blx	r5
	while (1) {
   1b6cc:	e7de      	b.n	1b68c <tx_notify+0x4>

0001b6ce <tx_complete_work>:
	tx_notify(conn);
   1b6ce:	3828      	subs	r0, #40	; 0x28
   1b6d0:	f7ff bfda 	b.w	1b688 <tx_notify>

0001b6d4 <bt_conn_reset_rx_state>:
{
   1b6d4:	b510      	push	{r4, lr}
   1b6d6:	4604      	mov	r4, r0
	if (!conn->rx) {
   1b6d8:	6900      	ldr	r0, [r0, #16]
   1b6da:	b118      	cbz	r0, 1b6e4 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   1b6dc:	f7fb fa14 	bl	16b08 <net_buf_unref>
	conn->rx = NULL;
   1b6e0:	2300      	movs	r3, #0
   1b6e2:	6123      	str	r3, [r4, #16]
}
   1b6e4:	bd10      	pop	{r4, pc}

0001b6e6 <conn_cleanup>:
{
   1b6e6:	b570      	push	{r4, r5, r6, lr}
   1b6e8:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   1b6ea:	f100 0638 	add.w	r6, r0, #56	; 0x38
   1b6ee:	2200      	movs	r2, #0
   1b6f0:	2300      	movs	r3, #0
   1b6f2:	4630      	mov	r0, r6
   1b6f4:	f000 ffb9 	bl	1c66a <net_buf_get>
   1b6f8:	4605      	mov	r5, r0
   1b6fa:	b950      	cbnz	r0, 1b712 <conn_cleanup+0x2c>
	bt_conn_reset_rx_state(conn);
   1b6fc:	4620      	mov	r0, r4
   1b6fe:	f7ff ffe9 	bl	1b6d4 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   1b702:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1b706:	2200      	movs	r2, #0
}
   1b708:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   1b70c:	2300      	movs	r3, #0
   1b70e:	f7fd bca7 	b.w	19060 <k_work_reschedule>
		if (tx_data(buf)->tx) {
   1b712:	6968      	ldr	r0, [r5, #20]
   1b714:	b108      	cbz	r0, 1b71a <conn_cleanup+0x34>
			tx_free(tx_data(buf)->tx);
   1b716:	f7f8 fccd 	bl	140b4 <tx_free>
		net_buf_unref(buf);
   1b71a:	4628      	mov	r0, r5
   1b71c:	f7fb f9f4 	bl	16b08 <net_buf_unref>
   1b720:	e7e5      	b.n	1b6ee <conn_cleanup+0x8>

0001b722 <bt_conn_ref>:
{
   1b722:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   1b724:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b728:	f3bf 8f5b 	dmb	ish
   1b72c:	6813      	ldr	r3, [r2, #0]
   1b72e:	f3bf 8f5b 	dmb	ish
		if (!old) {
   1b732:	b17b      	cbz	r3, 1b754 <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1b734:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   1b738:	1c59      	adds	r1, r3, #1
   1b73a:	e852 4f00 	ldrex	r4, [r2]
   1b73e:	429c      	cmp	r4, r3
   1b740:	d104      	bne.n	1b74c <bt_conn_ref+0x2a>
   1b742:	e842 1c00 	strex	ip, r1, [r2]
   1b746:	f1bc 0f00 	cmp.w	ip, #0
   1b74a:	d1f6      	bne.n	1b73a <bt_conn_ref+0x18>
   1b74c:	f3bf 8f5b 	dmb	ish
   1b750:	d1ea      	bne.n	1b728 <bt_conn_ref+0x6>
}
   1b752:	bd10      	pop	{r4, pc}
			return NULL;
   1b754:	4618      	mov	r0, r3
   1b756:	e7fc      	b.n	1b752 <bt_conn_ref+0x30>

0001b758 <bt_conn_unref>:
	old = atomic_dec(&conn->ref);
   1b758:	f100 03b8 	add.w	r3, r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1b75c:	f3bf 8f5b 	dmb	ish
   1b760:	e853 2f00 	ldrex	r2, [r3]
   1b764:	3a01      	subs	r2, #1
   1b766:	e843 2100 	strex	r1, r2, [r3]
   1b76a:	2900      	cmp	r1, #0
   1b76c:	d1f8      	bne.n	1b760 <bt_conn_unref+0x8>
   1b76e:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   1b772:	7883      	ldrb	r3, [r0, #2]
   1b774:	2b01      	cmp	r3, #1
   1b776:	d108      	bne.n	1b78a <bt_conn_unref+0x32>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b778:	f3bf 8f5b 	dmb	ish
   1b77c:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   1b780:	f3bf 8f5b 	dmb	ish
   1b784:	b90b      	cbnz	r3, 1b78a <bt_conn_unref+0x32>
		bt_le_adv_resume();
   1b786:	f7f8 bc55 	b.w	14034 <bt_le_adv_resume>
}
   1b78a:	4770      	bx	lr

0001b78c <conn_lookup_handle>:
{
   1b78c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b790:	4607      	mov	r7, r0
   1b792:	460e      	mov	r6, r1
   1b794:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   1b796:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1b798:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   1b79c:	42b4      	cmp	r4, r6
   1b79e:	d103      	bne.n	1b7a8 <conn_lookup_handle+0x1c>
	return NULL;
   1b7a0:	2300      	movs	r3, #0
}
   1b7a2:	4618      	mov	r0, r3
   1b7a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1b7a8:	fb09 7004 	mla	r0, r9, r4, r7
   1b7ac:	f7ff ffb9 	bl	1b722 <bt_conn_ref>
   1b7b0:	4603      	mov	r3, r0
		if (!conn) {
   1b7b2:	b158      	cbz	r0, 1b7cc <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   1b7b4:	7a85      	ldrb	r5, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   1b7b6:	2d01      	cmp	r5, #1
   1b7b8:	d002      	beq.n	1b7c0 <conn_lookup_handle+0x34>
   1b7ba:	3d07      	subs	r5, #7
   1b7bc:	2d01      	cmp	r5, #1
   1b7be:	d803      	bhi.n	1b7c8 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   1b7c0:	881a      	ldrh	r2, [r3, #0]
   1b7c2:	4542      	cmp	r2, r8
   1b7c4:	d0ed      	beq.n	1b7a2 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   1b7c6:	4618      	mov	r0, r3
   1b7c8:	f7ff ffc6 	bl	1b758 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   1b7cc:	3401      	adds	r4, #1
   1b7ce:	e7e5      	b.n	1b79c <conn_lookup_handle+0x10>

0001b7d0 <bt_conn_connected>:
{
   1b7d0:	b510      	push	{r4, lr}
   1b7d2:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   1b7d4:	f7f9 fa68 	bl	14ca8 <bt_l2cap_connected>
	notify_connected(conn);
   1b7d8:	4620      	mov	r0, r4
}
   1b7da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   1b7de:	f7f8 bc73 	b.w	140c8 <notify_connected>

0001b7e2 <bt_conn_get_security>:
}
   1b7e2:	2001      	movs	r0, #1
   1b7e4:	4770      	bx	lr

0001b7e6 <bt_conn_is_peer_addr_le>:
{
   1b7e6:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   1b7e8:	7a03      	ldrb	r3, [r0, #8]
   1b7ea:	428b      	cmp	r3, r1
{
   1b7ec:	4604      	mov	r4, r0
   1b7ee:	4615      	mov	r5, r2
	if (id != conn->id) {
   1b7f0:	d115      	bne.n	1b81e <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   1b7f2:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1b7f6:	2207      	movs	r2, #7
   1b7f8:	4628      	mov	r0, r5
   1b7fa:	f7ff fccc 	bl	1b196 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   1b7fe:	b180      	cbz	r0, 1b822 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   1b800:	78e3      	ldrb	r3, [r4, #3]
   1b802:	2207      	movs	r2, #7
   1b804:	b943      	cbnz	r3, 1b818 <bt_conn_is_peer_addr_le+0x32>
   1b806:	f104 0196 	add.w	r1, r4, #150	; 0x96
   1b80a:	4628      	mov	r0, r5
   1b80c:	f7ff fcc3 	bl	1b196 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   1b810:	fab0 f080 	clz	r0, r0
   1b814:	0940      	lsrs	r0, r0, #5
}
   1b816:	bd38      	pop	{r3, r4, r5, pc}
   1b818:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   1b81c:	e7f5      	b.n	1b80a <bt_conn_is_peer_addr_le+0x24>
		return false;
   1b81e:	2000      	movs	r0, #0
   1b820:	e7f9      	b.n	1b816 <bt_conn_is_peer_addr_le+0x30>
		return true;
   1b822:	2001      	movs	r0, #1
   1b824:	e7f7      	b.n	1b816 <bt_conn_is_peer_addr_le+0x30>

0001b826 <bt_conn_get_dst>:
}
   1b826:	3088      	adds	r0, #136	; 0x88
   1b828:	4770      	bx	lr

0001b82a <bt_conn_le_conn_update>:
{
   1b82a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b82c:	4607      	mov	r7, r0
   1b82e:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   1b830:	f242 0013 	movw	r0, #8211	; 0x2013
   1b834:	210e      	movs	r1, #14
   1b836:	f7f6 fea5 	bl	12584 <bt_hci_cmd_create>
	if (!buf) {
   1b83a:	4606      	mov	r6, r0
   1b83c:	b1d0      	cbz	r0, 1b874 <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   1b83e:	210e      	movs	r1, #14
   1b840:	3008      	adds	r0, #8
   1b842:	f000 ff63 	bl	1c70c <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   1b846:	220e      	movs	r2, #14
   1b848:	4604      	mov	r4, r0
   1b84a:	2100      	movs	r1, #0
   1b84c:	f7ff fcbf 	bl	1b1ce <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1b850:	883b      	ldrh	r3, [r7, #0]
   1b852:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1b854:	882b      	ldrh	r3, [r5, #0]
   1b856:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1b858:	886b      	ldrh	r3, [r5, #2]
   1b85a:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   1b85c:	88ab      	ldrh	r3, [r5, #4]
   1b85e:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   1b860:	88eb      	ldrh	r3, [r5, #6]
   1b862:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1b864:	4631      	mov	r1, r6
   1b866:	2200      	movs	r2, #0
}
   1b868:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1b86c:	f242 0013 	movw	r0, #8211	; 0x2013
   1b870:	f7f6 bec2 	b.w	125f8 <bt_hci_cmd_send_sync>
}
   1b874:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1b878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001b87a <l2cap_connected>:
}
   1b87a:	4770      	bx	lr

0001b87c <l2cap_disconnected>:
	(void)k_work_cancel_delayable(&chan->rtx_work);
   1b87c:	3010      	adds	r0, #16
   1b87e:	f001 baf0 	b.w	1ce62 <k_work_cancel_delayable>

0001b882 <bt_l2cap_chan_remove>:
	return list->head;
   1b882:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1b884:	b530      	push	{r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1b886:	b17b      	cbz	r3, 1b8a8 <bt_l2cap_chan_remove+0x26>
   1b888:	3b08      	subs	r3, #8
   1b88a:	2200      	movs	r2, #0
   1b88c:	b163      	cbz	r3, 1b8a8 <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   1b88e:	428b      	cmp	r3, r1
			sys_slist_remove(&conn->channels, prev, &chan->node);
   1b890:	f103 0408 	add.w	r4, r3, #8
		if (chan == ch) {
   1b894:	d10e      	bne.n	1b8b4 <bt_l2cap_chan_remove+0x32>
	return node->next;
   1b896:	6899      	ldr	r1, [r3, #8]
	return list->tail;
   1b898:	6d45      	ldr	r5, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   1b89a:	b932      	cbnz	r2, 1b8aa <bt_l2cap_chan_remove+0x28>
   1b89c:	42ac      	cmp	r4, r5
	list->head = node;
   1b89e:	6501      	str	r1, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
   1b8a0:	d100      	bne.n	1b8a4 <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   1b8a2:	6541      	str	r1, [r0, #84]	; 0x54
	parent->next = child;
   1b8a4:	2200      	movs	r2, #0
   1b8a6:	609a      	str	r2, [r3, #8]
}
   1b8a8:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_REMOVE(slist, snode)
   1b8aa:	42ac      	cmp	r4, r5
	parent->next = child;
   1b8ac:	6011      	str	r1, [r2, #0]
	list->tail = node;
   1b8ae:	bf08      	it	eq
   1b8b0:	6542      	streq	r2, [r0, #84]	; 0x54
}
   1b8b2:	e7f7      	b.n	1b8a4 <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1b8b4:	2c00      	cmp	r4, #0
   1b8b6:	d0f7      	beq.n	1b8a8 <bt_l2cap_chan_remove+0x26>
	return node->next;
   1b8b8:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1b8ba:	2b00      	cmp	r3, #0
   1b8bc:	d0f4      	beq.n	1b8a8 <bt_l2cap_chan_remove+0x26>
   1b8be:	3b08      	subs	r3, #8
   1b8c0:	4622      	mov	r2, r4
   1b8c2:	e7e3      	b.n	1b88c <bt_l2cap_chan_remove+0xa>

0001b8c4 <bt_l2cap_chan_del>:
{
   1b8c4:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   1b8c6:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   1b8ca:	4604      	mov	r4, r0
	if (!chan->conn) {
   1b8cc:	b123      	cbz	r3, 1b8d8 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   1b8ce:	686b      	ldr	r3, [r5, #4]
   1b8d0:	b103      	cbz	r3, 1b8d4 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   1b8d2:	4798      	blx	r3
	chan->conn = NULL;
   1b8d4:	2300      	movs	r3, #0
   1b8d6:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   1b8d8:	68e3      	ldr	r3, [r4, #12]
   1b8da:	b10b      	cbz	r3, 1b8e0 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   1b8dc:	4620      	mov	r0, r4
   1b8de:	4798      	blx	r3
	if (ops->released) {
   1b8e0:	69eb      	ldr	r3, [r5, #28]
   1b8e2:	b11b      	cbz	r3, 1b8ec <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   1b8e4:	4620      	mov	r0, r4
}
   1b8e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   1b8ea:	4718      	bx	r3
}
   1b8ec:	bd70      	pop	{r4, r5, r6, pc}

0001b8ee <bt_l2cap_disconnected>:
	return list->head;
   1b8ee:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1b8f0:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1b8f2:	b18b      	cbz	r3, 1b918 <bt_l2cap_disconnected+0x2a>
   1b8f4:	f1b3 0008 	subs.w	r0, r3, #8
   1b8f8:	d00e      	beq.n	1b918 <bt_l2cap_disconnected+0x2a>
	return node->next;
   1b8fa:	681c      	ldr	r4, [r3, #0]
   1b8fc:	b104      	cbz	r4, 1b900 <bt_l2cap_disconnected+0x12>
   1b8fe:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   1b900:	f7ff ffe0 	bl	1b8c4 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1b904:	b144      	cbz	r4, 1b918 <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1b906:	f114 0308 	adds.w	r3, r4, #8
   1b90a:	d002      	beq.n	1b912 <bt_l2cap_disconnected+0x24>
	return node->next;
   1b90c:	68a3      	ldr	r3, [r4, #8]
   1b90e:	b103      	cbz	r3, 1b912 <bt_l2cap_disconnected+0x24>
   1b910:	3b08      	subs	r3, #8
{
   1b912:	4620      	mov	r0, r4
   1b914:	461c      	mov	r4, r3
   1b916:	e7f3      	b.n	1b900 <bt_l2cap_disconnected+0x12>
}
   1b918:	bd10      	pop	{r4, pc}

0001b91a <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   1b91a:	3104      	adds	r1, #4
   1b91c:	f7f9 b87a 	b.w	14a14 <bt_conn_create_pdu_timeout>

0001b920 <bt_l2cap_send_cb>:
{
   1b920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b924:	4614      	mov	r4, r2
   1b926:	4605      	mov	r5, r0
   1b928:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   1b92a:	f102 0008 	add.w	r0, r2, #8
   1b92e:	2104      	movs	r1, #4
   1b930:	461e      	mov	r6, r3
   1b932:	f8dd 8018 	ldr.w	r8, [sp, #24]
   1b936:	f000 ff00 	bl	1c73a <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1b93a:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   1b93c:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1b93e:	3a04      	subs	r2, #4
   1b940:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1b942:	4643      	mov	r3, r8
   1b944:	4632      	mov	r2, r6
   1b946:	4621      	mov	r1, r4
   1b948:	4628      	mov	r0, r5
}
   1b94a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1b94e:	f7f8 bd29 	b.w	143a4 <bt_conn_send_cb>

0001b952 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   1b952:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1b954:	b160      	cbz	r0, 1b970 <bt_l2cap_le_lookup_tx_cid+0x1e>
   1b956:	3808      	subs	r0, #8
   1b958:	b900      	cbnz	r0, 1b95c <bt_l2cap_le_lookup_tx_cid+0xa>
   1b95a:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   1b95c:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
   1b960:	428b      	cmp	r3, r1
   1b962:	d005      	beq.n	1b970 <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1b964:	f110 0308 	adds.w	r3, r0, #8
   1b968:	d001      	beq.n	1b96e <bt_l2cap_le_lookup_tx_cid+0x1c>
	return node->next;
   1b96a:	6880      	ldr	r0, [r0, #8]
   1b96c:	e7f2      	b.n	1b954 <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   1b96e:	4618      	mov	r0, r3
}
   1b970:	4770      	bx	lr

0001b972 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   1b972:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1b974:	b160      	cbz	r0, 1b990 <bt_l2cap_le_lookup_rx_cid+0x1e>
   1b976:	3808      	subs	r0, #8
   1b978:	b900      	cbnz	r0, 1b97c <bt_l2cap_le_lookup_rx_cid+0xa>
   1b97a:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1b97c:	f8b0 3070 	ldrh.w	r3, [r0, #112]	; 0x70
   1b980:	428b      	cmp	r3, r1
   1b982:	d005      	beq.n	1b990 <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1b984:	f110 0308 	adds.w	r3, r0, #8
   1b988:	d001      	beq.n	1b98e <bt_l2cap_le_lookup_rx_cid+0x1c>
	return node->next;
   1b98a:	6880      	ldr	r0, [r0, #8]
   1b98c:	e7f2      	b.n	1b974 <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   1b98e:	4618      	mov	r0, r3
}
   1b990:	4770      	bx	lr

0001b992 <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   1b992:	4770      	bx	lr

0001b994 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   1b994:	4603      	mov	r3, r0
	return list->head;
   1b996:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   1b998:	b128      	cbz	r0, 1b9a6 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b99a:	6859      	ldr	r1, [r3, #4]
	return node->next;
   1b99c:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1b99e:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b9a0:	4288      	cmp	r0, r1
	list->tail = node;
   1b9a2:	bf08      	it	eq
   1b9a4:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   1b9a6:	4770      	bx	lr

0001b9a8 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   1b9a8:	4603      	mov	r3, r0
	size_t bytes = 0;
   1b9aa:	2000      	movs	r0, #0

	while (buf) {
   1b9ac:	b903      	cbnz	r3, 1b9b0 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   1b9ae:	4770      	bx	lr
		bytes += buf->len;
   1b9b0:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   1b9b2:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   1b9b4:	4410      	add	r0, r2
		buf = buf->frags;
   1b9b6:	e7f9      	b.n	1b9ac <net_buf_frags_len+0x4>

0001b9b8 <att_sent>:
	if (chan->ops->sent) {
   1b9b8:	684b      	ldr	r3, [r1, #4]
   1b9ba:	695b      	ldr	r3, [r3, #20]
{
   1b9bc:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   1b9be:	b103      	cbz	r3, 1b9c2 <att_sent+0xa>
		chan->ops->sent(chan);
   1b9c0:	4718      	bx	r3
}
   1b9c2:	4770      	bx	lr

0001b9c4 <attr_read_type_cb>:
{
   1b9c4:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   1b9c6:	68d4      	ldr	r4, [r2, #12]
   1b9c8:	7823      	ldrb	r3, [r4, #0]
   1b9ca:	3102      	adds	r1, #2
   1b9cc:	b913      	cbnz	r3, 1b9d4 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   1b9ce:	7021      	strb	r1, [r4, #0]
	return true;
   1b9d0:	2001      	movs	r0, #1
   1b9d2:	e006      	b.n	1b9e2 <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   1b9d4:	428b      	cmp	r3, r1
   1b9d6:	d0fb      	beq.n	1b9d0 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   1b9d8:	8983      	ldrh	r3, [r0, #12]
   1b9da:	3b02      	subs	r3, #2
   1b9dc:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   1b9de:	2000      	movs	r0, #0
   1b9e0:	6110      	str	r0, [r2, #16]
}
   1b9e2:	bd10      	pop	{r4, pc}

0001b9e4 <att_prepare_write_req>:
}
   1b9e4:	2006      	movs	r0, #6
   1b9e6:	4770      	bx	lr

0001b9e8 <att_op_get_type>:
	switch (op) {
   1b9e8:	281e      	cmp	r0, #30
   1b9ea:	d816      	bhi.n	1ba1a <att_op_get_type+0x32>
   1b9ec:	b308      	cbz	r0, 1ba32 <att_op_get_type+0x4a>
   1b9ee:	1e43      	subs	r3, r0, #1
   1b9f0:	2b1d      	cmp	r3, #29
   1b9f2:	d81e      	bhi.n	1ba32 <att_op_get_type+0x4a>
   1b9f4:	e8df f003 	tbb	[pc, r3]
   1b9f8:	23172317 	.word	0x23172317
   1b9fc:	23172317 	.word	0x23172317
   1ba00:	23172317 	.word	0x23172317
   1ba04:	23172317 	.word	0x23172317
   1ba08:	1d172317 	.word	0x1d172317
   1ba0c:	2317231d 	.word	0x2317231d
   1ba10:	1d191d17 	.word	0x1d191d17
   1ba14:	0f1b      	.short	0x0f1b
   1ba16:	2004      	movs	r0, #4
   1ba18:	4770      	bx	lr
   1ba1a:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   1ba1e:	2b52      	cmp	r3, #82	; 0x52
   1ba20:	d107      	bne.n	1ba32 <att_op_get_type+0x4a>
		return ATT_COMMAND;
   1ba22:	2000      	movs	r0, #0
}
   1ba24:	4770      	bx	lr
		return ATT_RESPONSE;
   1ba26:	2002      	movs	r0, #2
   1ba28:	4770      	bx	lr
		return ATT_NOTIFICATION;
   1ba2a:	2003      	movs	r0, #3
   1ba2c:	4770      	bx	lr
		return ATT_INDICATION;
   1ba2e:	2005      	movs	r0, #5
   1ba30:	4770      	bx	lr
		return ATT_COMMAND;
   1ba32:	f010 0f40 	tst.w	r0, #64	; 0x40
   1ba36:	bf0c      	ite	eq
   1ba38:	2006      	moveq	r0, #6
   1ba3a:	2000      	movne	r0, #0
   1ba3c:	4770      	bx	lr
		return ATT_REQUEST;
   1ba3e:	2001      	movs	r0, #1
   1ba40:	4770      	bx	lr

0001ba42 <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   1ba42:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1ba44:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1ba48:	2300      	movs	r3, #0
   1ba4a:	9300      	str	r3, [sp, #0]
   1ba4c:	461a      	mov	r2, r3
   1ba4e:	f7fa fbe9 	bl	16224 <bt_gatt_foreach_attr_type>
				  user_data);
}
   1ba52:	b005      	add	sp, #20
   1ba54:	f85d fb04 	ldr.w	pc, [sp], #4

0001ba58 <find_info_cb>:
{
   1ba58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   1ba5a:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   1ba5c:	6817      	ldr	r7, [r2, #0]
{
   1ba5e:	4605      	mov	r5, r0
   1ba60:	460e      	mov	r6, r1
   1ba62:	4614      	mov	r4, r2
	if (!data->rsp) {
   1ba64:	b963      	cbnz	r3, 1ba80 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   1ba66:	6850      	ldr	r0, [r2, #4]
   1ba68:	2101      	movs	r1, #1
   1ba6a:	3008      	adds	r0, #8
   1ba6c:	f000 fe4e 	bl	1c70c <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1ba70:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1ba72:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1ba74:	781b      	ldrb	r3, [r3, #0]
   1ba76:	2b00      	cmp	r3, #0
   1ba78:	bf0c      	ite	eq
   1ba7a:	2301      	moveq	r3, #1
   1ba7c:	2302      	movne	r3, #2
   1ba7e:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   1ba80:	68a3      	ldr	r3, [r4, #8]
   1ba82:	781b      	ldrb	r3, [r3, #0]
   1ba84:	2b01      	cmp	r3, #1
   1ba86:	d003      	beq.n	1ba90 <find_info_cb+0x38>
   1ba88:	2b02      	cmp	r3, #2
   1ba8a:	d019      	beq.n	1bac0 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   1ba8c:	2000      	movs	r0, #0
   1ba8e:	e016      	b.n	1babe <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   1ba90:	682b      	ldr	r3, [r5, #0]
   1ba92:	781b      	ldrb	r3, [r3, #0]
   1ba94:	2b00      	cmp	r3, #0
   1ba96:	d1f9      	bne.n	1ba8c <find_info_cb+0x34>
   1ba98:	6860      	ldr	r0, [r4, #4]
   1ba9a:	2104      	movs	r1, #4
   1ba9c:	3008      	adds	r0, #8
   1ba9e:	f000 fe35 	bl	1c70c <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1baa2:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   1baa4:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1baa6:	885b      	ldrh	r3, [r3, #2]
   1baa8:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   1baaa:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   1baac:	8006      	strh	r6, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   1baae:	899b      	ldrh	r3, [r3, #12]
   1bab0:	f8b7 0086 	ldrh.w	r0, [r7, #134]	; 0x86
   1bab4:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1bab6:	2804      	cmp	r0, #4
   1bab8:	bf94      	ite	ls
   1baba:	2000      	movls	r0, #0
   1babc:	2001      	movhi	r0, #1
}
   1babe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   1bac0:	682b      	ldr	r3, [r5, #0]
   1bac2:	781b      	ldrb	r3, [r3, #0]
   1bac4:	2b02      	cmp	r3, #2
   1bac6:	d1e1      	bne.n	1ba8c <find_info_cb+0x34>
   1bac8:	6860      	ldr	r0, [r4, #4]
   1baca:	2112      	movs	r1, #18
   1bacc:	3008      	adds	r0, #8
   1bace:	f000 fe1d 	bl	1c70c <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1bad2:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   1bad4:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1bad6:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   1bad8:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1badc:	3101      	adds	r1, #1
   1bade:	f7ff fb6b 	bl	1b1b8 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   1bae2:	6863      	ldr	r3, [r4, #4]
   1bae4:	f8b7 0086 	ldrh.w	r0, [r7, #134]	; 0x86
   1bae8:	899b      	ldrh	r3, [r3, #12]
   1baea:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1baec:	2812      	cmp	r0, #18
   1baee:	e7e3      	b.n	1bab8 <find_info_cb+0x60>

0001baf0 <att_chan_mtu_updated>:
{
   1baf0:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   1baf2:	6806      	ldr	r6, [r0, #0]
	return list->head;
   1baf4:	6a73      	ldr	r3, [r6, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1baf6:	b30b      	cbz	r3, 1bb3c <att_chan_mtu_updated+0x4c>
   1baf8:	f5b3 74a2 	subs.w	r4, r3, #324	; 0x144
   1bafc:	d01d      	beq.n	1bb3a <att_chan_mtu_updated+0x4a>
	return node->next;
   1bafe:	681a      	ldr	r2, [r3, #0]
   1bb00:	b10a      	cbz	r2, 1bb06 <att_chan_mtu_updated+0x16>
   1bb02:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
{
   1bb06:	2300      	movs	r3, #0
   1bb08:	4619      	mov	r1, r3
		if (chan == updated_chan) {
   1bb0a:	42a0      	cmp	r0, r4
   1bb0c:	d009      	beq.n	1bb22 <att_chan_mtu_updated+0x32>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   1bb0e:	f8b4 5086 	ldrh.w	r5, [r4, #134]	; 0x86
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   1bb12:	f8b4 407a 	ldrh.w	r4, [r4, #122]	; 0x7a
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   1bb16:	42a9      	cmp	r1, r5
   1bb18:	bf38      	it	cc
   1bb1a:	4629      	movcc	r1, r5
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   1bb1c:	42a3      	cmp	r3, r4
   1bb1e:	bf38      	it	cc
   1bb20:	4623      	movcc	r3, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1bb22:	b162      	cbz	r2, 1bb3e <att_chan_mtu_updated+0x4e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1bb24:	f512 75a2 	adds.w	r5, r2, #324	; 0x144
   1bb28:	d004      	beq.n	1bb34 <att_chan_mtu_updated+0x44>
	return node->next;
   1bb2a:	f8d2 5144 	ldr.w	r5, [r2, #324]	; 0x144
   1bb2e:	b10d      	cbz	r5, 1bb34 <att_chan_mtu_updated+0x44>
   1bb30:	f5a5 75a2 	sub.w	r5, r5, #324	; 0x144
{
   1bb34:	4614      	mov	r4, r2
   1bb36:	462a      	mov	r2, r5
   1bb38:	e7e7      	b.n	1bb0a <att_chan_mtu_updated+0x1a>
   1bb3a:	4623      	mov	r3, r4
   1bb3c:	4619      	mov	r1, r3
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   1bb3e:	f8b0 4086 	ldrh.w	r4, [r0, #134]	; 0x86
	    (updated_chan->chan.rx.mtu > max_rx)) {
   1bb42:	f8b0 207a 	ldrh.w	r2, [r0, #122]	; 0x7a
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   1bb46:	428c      	cmp	r4, r1
   1bb48:	d801      	bhi.n	1bb4e <att_chan_mtu_updated+0x5e>
   1bb4a:	429a      	cmp	r2, r3
   1bb4c:	d909      	bls.n	1bb62 <att_chan_mtu_updated+0x72>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   1bb4e:	429a      	cmp	r2, r3
   1bb50:	bf38      	it	cc
   1bb52:	461a      	movcc	r2, r3
   1bb54:	42a1      	cmp	r1, r4
   1bb56:	6830      	ldr	r0, [r6, #0]
   1bb58:	bf38      	it	cc
   1bb5a:	4621      	movcc	r1, r4
}
   1bb5c:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   1bb5e:	f7fa be7d 	b.w	1685c <bt_gatt_att_max_mtu_changed>
}
   1bb62:	bc70      	pop	{r4, r5, r6}
   1bb64:	4770      	bx	lr

0001bb66 <attr_read_group_cb>:
	if (!data->rsp->len) {
   1bb66:	68d0      	ldr	r0, [r2, #12]
   1bb68:	7803      	ldrb	r3, [r0, #0]
   1bb6a:	3104      	adds	r1, #4
   1bb6c:	b913      	cbnz	r3, 1bb74 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   1bb6e:	7001      	strb	r1, [r0, #0]
	return true;
   1bb70:	2001      	movs	r0, #1
}
   1bb72:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   1bb74:	428b      	cmp	r3, r1
   1bb76:	d0fb      	beq.n	1bb70 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   1bb78:	6891      	ldr	r1, [r2, #8]
   1bb7a:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   1bb7c:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   1bb7e:	3b04      	subs	r3, #4
   1bb80:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   1bb82:	6110      	str	r0, [r2, #16]
		return false;
   1bb84:	4770      	bx	lr

0001bb86 <chan_req_sent>:
	if (chan->req) {
   1bb86:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   1bb8a:	b133      	cbz	r3, 1bb9a <chan_req_sent+0x14>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   1bb8c:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1bb90:	2300      	movs	r3, #0
   1bb92:	f500 7088 	add.w	r0, r0, #272	; 0x110
   1bb96:	f7fd ba63 	b.w	19060 <k_work_reschedule>
}
   1bb9a:	4770      	bx	lr

0001bb9c <write_cb>:
{
   1bb9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1bb9e:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   1bba0:	4601      	mov	r1, r0
{
   1bba2:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   1bba4:	222a      	movs	r2, #42	; 0x2a
   1bba6:	6820      	ldr	r0, [r4, #0]
   1bba8:	f000 fcd9 	bl	1c55e <bt_gatt_check_perm>
   1bbac:	4605      	mov	r5, r0
   1bbae:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1bbb0:	bb00      	cbnz	r0, 1bbf4 <write_cb+0x58>
	if (!data->req) {
   1bbb2:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   1bbb4:	68b7      	ldr	r7, [r6, #8]
   1bbb6:	68e2      	ldr	r2, [r4, #12]
   1bbb8:	6820      	ldr	r0, [r4, #0]
		flags |= BT_GATT_WRITE_FLAG_CMD;
   1bbba:	2b00      	cmp	r3, #0
   1bbbc:	bf14      	ite	ne
   1bbbe:	2300      	movne	r3, #0
   1bbc0:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   1bbc2:	9301      	str	r3, [sp, #4]
   1bbc4:	8a63      	ldrh	r3, [r4, #18]
   1bbc6:	9300      	str	r3, [sp, #0]
   1bbc8:	4631      	mov	r1, r6
   1bbca:	8a23      	ldrh	r3, [r4, #16]
   1bbcc:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   1bbce:	1e03      	subs	r3, r0, #0
   1bbd0:	db05      	blt.n	1bbde <write_cb+0x42>
   1bbd2:	8a22      	ldrh	r2, [r4, #16]
   1bbd4:	4293      	cmp	r3, r2
   1bbd6:	d10b      	bne.n	1bbf0 <write_cb+0x54>
	data->err = 0U;
   1bbd8:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   1bbda:	2501      	movs	r5, #1
   1bbdc:	e005      	b.n	1bbea <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   1bbde:	f113 0fff 	cmn.w	r3, #255	; 0xff
   1bbe2:	d305      	bcc.n	1bbf0 <write_cb+0x54>
		return -err;
   1bbe4:	425b      	negs	r3, r3
   1bbe6:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   1bbe8:	7523      	strb	r3, [r4, #20]
}
   1bbea:	4628      	mov	r0, r5
   1bbec:	b003      	add	sp, #12
   1bbee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   1bbf0:	230e      	movs	r3, #14
   1bbf2:	e7f9      	b.n	1bbe8 <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   1bbf4:	2500      	movs	r5, #0
   1bbf6:	e7f8      	b.n	1bbea <write_cb+0x4e>

0001bbf8 <att_chan_read>:
{
   1bbf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bbfc:	4680      	mov	r8, r0
   1bbfe:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1bc00:	4610      	mov	r0, r2
{
   1bc02:	4699      	mov	r9, r3
   1bc04:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1bc06:	f7ff fecf 	bl	1b9a8 <net_buf_frags_len>
   1bc0a:	f8b8 3086 	ldrh.w	r3, [r8, #134]	; 0x86
   1bc0e:	4283      	cmp	r3, r0
{
   1bc10:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1bc12:	d97a      	bls.n	1bd0a <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   1bc14:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1bc18:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   1bc1a:	4630      	mov	r0, r6
   1bc1c:	f000 fd54 	bl	1c6c8 <net_buf_frag_last>
	size_t len, total = 0;
   1bc20:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   1bc24:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1bc26:	4630      	mov	r0, r6
   1bc28:	f7ff febe 	bl	1b9a8 <net_buf_frags_len>
   1bc2c:	f8b8 4086 	ldrh.w	r4, [r8, #134]	; 0x86
	return net_buf_simple_tailroom(&buf->b);
   1bc30:	f105 0708 	add.w	r7, r5, #8
   1bc34:	1a24      	subs	r4, r4, r0
   1bc36:	4638      	mov	r0, r7
   1bc38:	f000 fda3 	bl	1c782 <net_buf_simple_tailroom>
   1bc3c:	4284      	cmp	r4, r0
   1bc3e:	d211      	bcs.n	1bc64 <att_chan_read+0x6c>
   1bc40:	4630      	mov	r0, r6
   1bc42:	f7ff feb1 	bl	1b9a8 <net_buf_frags_len>
   1bc46:	f8b8 4086 	ldrh.w	r4, [r8, #134]	; 0x86
   1bc4a:	1a24      	subs	r4, r4, r0
		if (!len) {
   1bc4c:	bb34      	cbnz	r4, 1bc9c <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   1bc4e:	79b0      	ldrb	r0, [r6, #6]
   1bc50:	f7fa fe9c 	bl	1698c <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1bc54:	2200      	movs	r2, #0
   1bc56:	2300      	movs	r3, #0
   1bc58:	f000 fd02 	bl	1c660 <net_buf_alloc_fixed>
			if (!frag) {
   1bc5c:	4605      	mov	r5, r0
   1bc5e:	b930      	cbnz	r0, 1bc6e <att_chan_read+0x76>
	return total;
   1bc60:	4657      	mov	r7, sl
   1bc62:	e02c      	b.n	1bcbe <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   1bc64:	4638      	mov	r0, r7
   1bc66:	f000 fd8c 	bl	1c782 <net_buf_simple_tailroom>
   1bc6a:	4604      	mov	r4, r0
   1bc6c:	e7ee      	b.n	1bc4c <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   1bc6e:	4601      	mov	r1, r0
   1bc70:	4630      	mov	r0, r6
   1bc72:	f000 fd3a 	bl	1c6ea <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1bc76:	4630      	mov	r0, r6
   1bc78:	f7ff fe96 	bl	1b9a8 <net_buf_frags_len>
   1bc7c:	f8b8 4086 	ldrh.w	r4, [r8, #134]	; 0x86
   1bc80:	f105 0708 	add.w	r7, r5, #8
   1bc84:	1a24      	subs	r4, r4, r0
   1bc86:	4638      	mov	r0, r7
   1bc88:	f000 fd7b 	bl	1c782 <net_buf_simple_tailroom>
   1bc8c:	4284      	cmp	r4, r0
   1bc8e:	d21a      	bcs.n	1bcc6 <att_chan_read+0xce>
   1bc90:	4630      	mov	r0, r6
   1bc92:	f7ff fe89 	bl	1b9a8 <net_buf_frags_len>
   1bc96:	f8b8 4086 	ldrh.w	r4, [r8, #134]	; 0x86
   1bc9a:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   1bc9c:	68a9      	ldr	r1, [r5, #8]
   1bc9e:	89aa      	ldrh	r2, [r5, #12]
   1bca0:	f8db 7004 	ldr.w	r7, [fp, #4]
   1bca4:	9803      	ldr	r0, [sp, #12]
   1bca6:	f8cd 9000 	str.w	r9, [sp]
   1bcaa:	440a      	add	r2, r1
   1bcac:	b2a3      	uxth	r3, r4
   1bcae:	4659      	mov	r1, fp
   1bcb0:	47b8      	blx	r7
		if (read < 0) {
   1bcb2:	1e07      	subs	r7, r0, #0
   1bcb4:	da0c      	bge.n	1bcd0 <att_chan_read+0xd8>
				return total;
   1bcb6:	f1ba 0f00 	cmp.w	sl, #0
   1bcba:	bf18      	it	ne
   1bcbc:	4657      	movne	r7, sl
}
   1bcbe:	4638      	mov	r0, r7
   1bcc0:	b005      	add	sp, #20
   1bcc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bcc6:	4638      	mov	r0, r7
   1bcc8:	f000 fd5b 	bl	1c782 <net_buf_simple_tailroom>
   1bccc:	4604      	mov	r4, r0
   1bcce:	e7e5      	b.n	1bc9c <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   1bcd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1bcd2:	b993      	cbnz	r3, 1bcfa <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   1bcd4:	4639      	mov	r1, r7
   1bcd6:	f105 0008 	add.w	r0, r5, #8
   1bcda:	f000 fd17 	bl	1c70c <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1bcde:	4630      	mov	r0, r6
   1bce0:	f7ff fe62 	bl	1b9a8 <net_buf_frags_len>
   1bce4:	f8b8 3086 	ldrh.w	r3, [r8, #134]	; 0x86
		offset += read;
   1bce8:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1bcea:	4283      	cmp	r3, r0
		total += read;
   1bcec:	44ba      	add	sl, r7
		offset += read;
   1bcee:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1bcf2:	d9b5      	bls.n	1bc60 <att_chan_read+0x68>
   1bcf4:	42a7      	cmp	r7, r4
   1bcf6:	d096      	beq.n	1bc26 <att_chan_read+0x2e>
   1bcf8:	e7b2      	b.n	1bc60 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   1bcfa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1bcfc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1bcfe:	4639      	mov	r1, r7
   1bd00:	4628      	mov	r0, r5
   1bd02:	4798      	blx	r3
   1bd04:	2800      	cmp	r0, #0
   1bd06:	d1e5      	bne.n	1bcd4 <att_chan_read+0xdc>
   1bd08:	e7aa      	b.n	1bc60 <att_chan_read+0x68>
		return 0;
   1bd0a:	2700      	movs	r7, #0
   1bd0c:	e7d7      	b.n	1bcbe <att_chan_read+0xc6>

0001bd0e <chan_req_send>:
{
   1bd0e:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1bd10:	688e      	ldr	r6, [r1, #8]
{
   1bd12:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1bd14:	4630      	mov	r0, r6
   1bd16:	f7ff fe47 	bl	1b9a8 <net_buf_frags_len>
   1bd1a:	f8b5 3086 	ldrh.w	r3, [r5, #134]	; 0x86
   1bd1e:	4283      	cmp	r3, r0
{
   1bd20:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1bd22:	d30a      	bcc.n	1bd3a <chan_req_send+0x2c>
	req->buf = NULL;
   1bd24:	2200      	movs	r2, #0
	chan->req = req;
   1bd26:	f8c5 10f4 	str.w	r1, [r5, #244]	; 0xf4
	err = chan_send(chan, buf, NULL);
   1bd2a:	4628      	mov	r0, r5
	req->buf = NULL;
   1bd2c:	608a      	str	r2, [r1, #8]
	err = chan_send(chan, buf, NULL);
   1bd2e:	4631      	mov	r1, r6
   1bd30:	f7f9 fac8 	bl	152c4 <chan_send>
	if (err) {
   1bd34:	b100      	cbz	r0, 1bd38 <chan_req_send+0x2a>
		req->buf = buf;
   1bd36:	60a6      	str	r6, [r4, #8]
}
   1bd38:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   1bd3a:	f06f 0079 	mvn.w	r0, #121	; 0x79
   1bd3e:	e7fb      	b.n	1bd38 <chan_req_send+0x2a>

0001bd40 <process_queue>:
{
   1bd40:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   1bd42:	2200      	movs	r2, #0
{
   1bd44:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   1bd46:	2300      	movs	r3, #0
   1bd48:	4608      	mov	r0, r1
{
   1bd4a:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   1bd4c:	f000 fc8d 	bl	1c66a <net_buf_get>
	if (buf) {
   1bd50:	4605      	mov	r5, r0
   1bd52:	b160      	cbz	r0, 1bd6e <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   1bd54:	4601      	mov	r1, r0
   1bd56:	2200      	movs	r2, #0
   1bd58:	4620      	mov	r0, r4
   1bd5a:	f7f9 fab3 	bl	152c4 <chan_send>
		if (err) {
   1bd5e:	4604      	mov	r4, r0
   1bd60:	b118      	cbz	r0, 1bd6a <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   1bd62:	4629      	mov	r1, r5
   1bd64:	4630      	mov	r0, r6
   1bd66:	f000 ff84 	bl	1cc72 <k_queue_prepend>
}
   1bd6a:	4620      	mov	r0, r4
   1bd6c:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   1bd6e:	f06f 0401 	mvn.w	r4, #1
   1bd72:	e7fa      	b.n	1bd6a <process_queue+0x2a>

0001bd74 <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1bd74:	b510      	push	{r4, lr}
	return list->head;
   1bd76:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1bd78:	2200      	movs	r2, #0
   1bd7a:	b153      	cbz	r3, 1bd92 <sys_slist_find_and_remove.isra.0+0x1e>
   1bd7c:	428b      	cmp	r3, r1
   1bd7e:	d10e      	bne.n	1bd9e <sys_slist_find_and_remove.isra.0+0x2a>
	return node->next;
   1bd80:	680b      	ldr	r3, [r1, #0]
	return list->tail;
   1bd82:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   1bd84:	b932      	cbnz	r2, 1bd94 <sys_slist_find_and_remove.isra.0+0x20>
   1bd86:	42a1      	cmp	r1, r4
	list->head = node;
   1bd88:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   1bd8a:	d100      	bne.n	1bd8e <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   1bd8c:	6043      	str	r3, [r0, #4]
	parent->next = child;
   1bd8e:	2300      	movs	r3, #0
   1bd90:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1bd92:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   1bd94:	42a1      	cmp	r1, r4
	parent->next = child;
   1bd96:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1bd98:	bf08      	it	eq
   1bd9a:	6042      	streq	r2, [r0, #4]
}
   1bd9c:	e7f7      	b.n	1bd8e <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   1bd9e:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1bda0:	681b      	ldr	r3, [r3, #0]
   1bda2:	e7ea      	b.n	1bd7a <sys_slist_find_and_remove.isra.0+0x6>

0001bda4 <att_exec_write_req>:
   1bda4:	2006      	movs	r0, #6
   1bda6:	4770      	bx	lr

0001bda8 <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1bda8:	30f0      	adds	r0, #240	; 0xf0
   1bdaa:	f3bf 8f5b 	dmb	ish
   1bdae:	e850 3f00 	ldrex	r3, [r0]
   1bdb2:	f023 0301 	bic.w	r3, r3, #1
   1bdb6:	e840 3200 	strex	r2, r3, [r0]
   1bdba:	2a00      	cmp	r2, #0
   1bdbc:	d1f7      	bne.n	1bdae <chan_rsp_sent+0x6>
   1bdbe:	f3bf 8f5b 	dmb	ish
}
   1bdc2:	4770      	bx	lr

0001bdc4 <chan_cfm_sent>:
   1bdc4:	30f0      	adds	r0, #240	; 0xf0
   1bdc6:	f3bf 8f5b 	dmb	ish
   1bdca:	e850 3f00 	ldrex	r3, [r0]
   1bdce:	f023 0302 	bic.w	r3, r3, #2
   1bdd2:	e840 3200 	strex	r2, r3, [r0]
   1bdd6:	2a00      	cmp	r2, #0
   1bdd8:	d1f7      	bne.n	1bdca <chan_cfm_sent+0x6>
   1bdda:	f3bf 8f5b 	dmb	ish
}
   1bdde:	4770      	bx	lr

0001bde0 <read_cb>:
{
   1bde0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   1bde4:	f8d2 8000 	ldr.w	r8, [r2]
{
   1bde8:	4606      	mov	r6, r0
	data->err = 0x00;
   1bdea:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   1bdec:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   1bdf0:	7317      	strb	r7, [r2, #12]
{
   1bdf2:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1bdf4:	4631      	mov	r1, r6
   1bdf6:	2215      	movs	r2, #21
   1bdf8:	f000 fbb1 	bl	1c55e <bt_gatt_check_perm>
   1bdfc:	4604      	mov	r4, r0
   1bdfe:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   1be00:	b9a0      	cbnz	r0, 1be2c <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   1be02:	e9cd 0000 	strd	r0, r0, [sp]
   1be06:	88ab      	ldrh	r3, [r5, #4]
   1be08:	68aa      	ldr	r2, [r5, #8]
   1be0a:	4631      	mov	r1, r6
   1be0c:	4640      	mov	r0, r8
   1be0e:	f7ff fef3 	bl	1bbf8 <att_chan_read>
	if (ret < 0) {
   1be12:	1e03      	subs	r3, r0, #0
   1be14:	da0c      	bge.n	1be30 <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   1be16:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   1be1a:	bf26      	itte	cs
   1be1c:	425b      	negcs	r3, r3
   1be1e:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   1be20:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   1be22:	732b      	strb	r3, [r5, #12]
}
   1be24:	4620      	mov	r0, r4
   1be26:	b002      	add	sp, #8
   1be28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   1be2c:	463c      	mov	r4, r7
   1be2e:	e7f9      	b.n	1be24 <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   1be30:	2401      	movs	r4, #1
   1be32:	e7f7      	b.n	1be24 <read_cb+0x44>

0001be34 <bt_att_sent>:
{
   1be34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   1be36:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
	struct bt_att *att = chan->att;
   1be3a:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   1be3e:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1be40:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   1be44:	b10b      	cbz	r3, 1be4a <bt_att_sent+0x16>
		chan->sent(chan);
   1be46:	4638      	mov	r0, r7
   1be48:	4798      	blx	r3
   1be4a:	f3bf 8f5b 	dmb	ish
   1be4e:	f105 03e8 	add.w	r3, r5, #232	; 0xe8
   1be52:	e853 2f00 	ldrex	r2, [r3]
   1be56:	f022 0210 	bic.w	r2, r2, #16
   1be5a:	e843 2100 	strex	r1, r2, [r3]
   1be5e:	2900      	cmp	r1, #0
   1be60:	d1f7      	bne.n	1be52 <bt_att_sent+0x1e>
   1be62:	f3bf 8f5b 	dmb	ish
	if (!att) {
   1be66:	b30c      	cbz	r4, 1beac <bt_att_sent+0x78>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   1be68:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   1be6c:	b98b      	cbnz	r3, 1be92 <bt_att_sent+0x5e>
   1be6e:	6863      	ldr	r3, [r4, #4]
   1be70:	b17b      	cbz	r3, 1be92 <bt_att_sent+0x5e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1be72:	1d20      	adds	r0, r4, #4
   1be74:	f7ff fd8e 	bl	1b994 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1be78:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1be7a:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1be7c:	4638      	mov	r0, r7
   1be7e:	f7ff ff46 	bl	1bd0e <chan_req_send>
   1be82:	2800      	cmp	r0, #0
   1be84:	da12      	bge.n	1beac <bt_att_sent+0x78>
	parent->next = child;
   1be86:	6863      	ldr	r3, [r4, #4]
   1be88:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1be8a:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   1be8c:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   1be8e:	b903      	cbnz	r3, 1be92 <bt_att_sent+0x5e>
	list->tail = node;
   1be90:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   1be92:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
   1be96:	4638      	mov	r0, r7
   1be98:	f7ff ff52 	bl	1bd40 <process_queue>
	if (!err) {
   1be9c:	b130      	cbz	r0, 1beac <bt_att_sent+0x78>
	(void)process_queue(chan, &att->tx_queue);
   1be9e:	f104 010c 	add.w	r1, r4, #12
   1bea2:	4638      	mov	r0, r7
}
   1bea4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   1bea8:	f7ff bf4a 	b.w	1bd40 <process_queue>
}
   1beac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001beae <att_req_send_process>:
{
   1beae:	b570      	push	{r4, r5, r6, lr}
   1beb0:	4605      	mov	r5, r0
	node = sys_slist_get(&att->reqs);
   1beb2:	3004      	adds	r0, #4
   1beb4:	f7ff fd6e 	bl	1b994 <sys_slist_get>
	if (!node) {
   1beb8:	4606      	mov	r6, r0
   1beba:	b1c0      	cbz	r0, 1beee <att_req_send_process+0x40>
	return list->head;
   1bebc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1bebe:	b153      	cbz	r3, 1bed6 <att_req_send_process+0x28>
   1bec0:	f5b3 70a2 	subs.w	r0, r3, #324	; 0x144
   1bec4:	d007      	beq.n	1bed6 <att_req_send_process+0x28>
	return node->next;
   1bec6:	681c      	ldr	r4, [r3, #0]
   1bec8:	b10c      	cbz	r4, 1bece <att_req_send_process+0x20>
   1beca:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
		if (!chan->req) {
   1bece:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   1bed2:	b13b      	cbz	r3, 1bee4 <att_req_send_process+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1bed4:	b964      	cbnz	r4, 1bef0 <att_req_send_process+0x42>
	parent->next = child;
   1bed6:	686b      	ldr	r3, [r5, #4]
   1bed8:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1beda:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   1bedc:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   1bede:	b933      	cbnz	r3, 1beee <att_req_send_process+0x40>
	list->tail = node;
   1bee0:	60ae      	str	r6, [r5, #8]
}
   1bee2:	e004      	b.n	1beee <att_req_send_process+0x40>
	return chan_req_send(chan, req);
   1bee4:	4631      	mov	r1, r6
   1bee6:	f7ff ff12 	bl	1bd0e <chan_req_send>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1beea:	2800      	cmp	r0, #0
   1beec:	dbf2      	blt.n	1bed4 <att_req_send_process+0x26>
}
   1beee:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   1bef0:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   1bef4:	d004      	beq.n	1bf00 <att_req_send_process+0x52>
	return node->next;
   1bef6:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1befa:	b10b      	cbz	r3, 1bf00 <att_req_send_process+0x52>
   1befc:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   1bf00:	4620      	mov	r0, r4
   1bf02:	461c      	mov	r4, r3
   1bf04:	e7e3      	b.n	1bece <att_req_send_process+0x20>

0001bf06 <bt_att_status>:
{
   1bf06:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1bf08:	f3bf 8f5b 	dmb	ish
   1bf0c:	680b      	ldr	r3, [r1, #0]
   1bf0e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1bf12:	07db      	lsls	r3, r3, #31
{
   1bf14:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1bf16:	d519      	bpl.n	1bf4c <bt_att_status+0x46>
	if (!chan->att) {
   1bf18:	f850 0c08 	ldr.w	r0, [r0, #-8]
   1bf1c:	b1b0      	cbz	r0, 1bf4c <bt_att_status+0x46>
	if (chan->req) {
   1bf1e:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   1bf22:	b99b      	cbnz	r3, 1bf4c <bt_att_status+0x46>
	node = sys_slist_get(&chan->att->reqs);
   1bf24:	3004      	adds	r0, #4
   1bf26:	f7ff fd35 	bl	1b994 <sys_slist_get>
	if (!node) {
   1bf2a:	4604      	mov	r4, r0
   1bf2c:	b170      	cbz	r0, 1bf4c <bt_att_status+0x46>
	return chan_req_send(chan, req);
   1bf2e:	4601      	mov	r1, r0
   1bf30:	f1a5 0008 	sub.w	r0, r5, #8
   1bf34:	f7ff feeb 	bl	1bd0e <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1bf38:	2800      	cmp	r0, #0
   1bf3a:	da07      	bge.n	1bf4c <bt_att_status+0x46>
	sys_slist_prepend(&chan->att->reqs, node);
   1bf3c:	f855 3c08 	ldr.w	r3, [r5, #-8]
	parent->next = child;
   1bf40:	685a      	ldr	r2, [r3, #4]
   1bf42:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   1bf44:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1bf46:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1bf48:	b902      	cbnz	r2, 1bf4c <bt_att_status+0x46>
	list->tail = node;
   1bf4a:	609c      	str	r4, [r3, #8]
}
   1bf4c:	bd38      	pop	{r3, r4, r5, pc}

0001bf4e <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   1bf4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bf52:	4688      	mov	r8, r1
   1bf54:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1bf56:	2101      	movs	r1, #1
   1bf58:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   1bf5a:	4605      	mov	r5, r0
   1bf5c:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1bf5e:	f7f9 fab9 	bl	154d4 <bt_att_chan_create_pdu>
	if (!buf) {
   1bf62:	4604      	mov	r4, r0
   1bf64:	b170      	cbz	r0, 1bf84 <send_err_rsp.part.0+0x36>
   1bf66:	2104      	movs	r1, #4
   1bf68:	3008      	adds	r0, #8
   1bf6a:	f000 fbcf 	bl	1c70c <net_buf_simple_add>
	rsp->request = req;
   1bf6e:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   1bf72:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   1bf74:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   1bf78:	4621      	mov	r1, r4
   1bf7a:	4628      	mov	r0, r5
}
   1bf7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   1bf80:	f7f9 ba0e 	b.w	153a0 <bt_att_chan_send_rsp.constprop.0>
}
   1bf84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001bf88 <att_write_req>:
{
   1bf88:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1bf8a:	460c      	mov	r4, r1
   1bf8c:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   1bf8e:	f101 0008 	add.w	r0, r1, #8
   1bf92:	f000 fbea 	bl	1c76a <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   1bf96:	89a2      	ldrh	r2, [r4, #12]
   1bf98:	9201      	str	r2, [sp, #4]
   1bf9a:	68a2      	ldr	r2, [r4, #8]
   1bf9c:	9200      	str	r2, [sp, #0]
   1bf9e:	4603      	mov	r3, r0
   1bfa0:	2213      	movs	r2, #19
   1bfa2:	2112      	movs	r1, #18
   1bfa4:	4628      	mov	r0, r5
   1bfa6:	f7f9 fb89 	bl	156bc <att_write_rsp.constprop.0>
}
   1bfaa:	b003      	add	sp, #12
   1bfac:	bd30      	pop	{r4, r5, pc}

0001bfae <att_write_cmd>:
{
   1bfae:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1bfb0:	460c      	mov	r4, r1
   1bfb2:	4605      	mov	r5, r0
   1bfb4:	f101 0008 	add.w	r0, r1, #8
   1bfb8:	f000 fbd7 	bl	1c76a <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   1bfbc:	89a2      	ldrh	r2, [r4, #12]
   1bfbe:	9201      	str	r2, [sp, #4]
   1bfc0:	68a2      	ldr	r2, [r4, #8]
   1bfc2:	9200      	str	r2, [sp, #0]
   1bfc4:	2200      	movs	r2, #0
   1bfc6:	4603      	mov	r3, r0
   1bfc8:	4611      	mov	r1, r2
   1bfca:	4628      	mov	r0, r5
   1bfcc:	f7f9 fb76 	bl	156bc <att_write_rsp.constprop.0>
}
   1bfd0:	b003      	add	sp, #12
   1bfd2:	bd30      	pop	{r4, r5, pc}

0001bfd4 <att_read_blob_req>:
{
   1bfd4:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   1bfd6:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   1bfd8:	8813      	ldrh	r3, [r2, #0]
   1bfda:	8852      	ldrh	r2, [r2, #2]
   1bfdc:	9200      	str	r2, [sp, #0]
   1bfde:	210c      	movs	r1, #12
   1bfe0:	220d      	movs	r2, #13
   1bfe2:	f7f9 fcd1 	bl	15988 <att_read_rsp>
}
   1bfe6:	b003      	add	sp, #12
   1bfe8:	f85d fb04 	ldr.w	pc, [sp], #4

0001bfec <att_read_req>:
{
   1bfec:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   1bfee:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1bff0:	2200      	movs	r2, #0
   1bff2:	881b      	ldrh	r3, [r3, #0]
   1bff4:	9200      	str	r2, [sp, #0]
   1bff6:	210a      	movs	r1, #10
   1bff8:	220b      	movs	r2, #11
   1bffa:	f7f9 fcc5 	bl	15988 <att_read_rsp>
}
   1bffe:	b003      	add	sp, #12
   1c000:	f85d fb04 	ldr.w	pc, [sp], #4

0001c004 <att_mtu_req>:
{
   1c004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   1c006:	6803      	ldr	r3, [r0, #0]
{
   1c008:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->att->conn;
   1c00a:	6818      	ldr	r0, [r3, #0]
   1c00c:	f3bf 8f5b 	dmb	ish
   1c010:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   1c014:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   1c018:	f3c3 05c0 	ubfx	r5, r3, #3, #1
   1c01c:	071b      	lsls	r3, r3, #28
   1c01e:	d41d      	bmi.n	1c05c <att_mtu_req+0x58>
	mtu_client = sys_le16_to_cpu(req->mtu);
   1c020:	688b      	ldr	r3, [r1, #8]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   1c022:	881b      	ldrh	r3, [r3, #0]
   1c024:	2b16      	cmp	r3, #22
   1c026:	d91b      	bls.n	1c060 <att_mtu_req+0x5c>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   1c028:	2202      	movs	r2, #2
   1c02a:	2103      	movs	r1, #3
   1c02c:	f7f9 fba8 	bl	15780 <bt_att_create_pdu>
	if (!pdu) {
   1c030:	4606      	mov	r6, r0
   1c032:	b1b8      	cbz	r0, 1c064 <att_mtu_req+0x60>
	return net_buf_simple_add(&buf->b, len);
   1c034:	2102      	movs	r1, #2
   1c036:	3008      	adds	r0, #8
   1c038:	f000 fb68 	bl	1c70c <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   1c03c:	2717      	movs	r7, #23
   1c03e:	7007      	strb	r7, [r0, #0]
   1c040:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   1c042:	4631      	mov	r1, r6
   1c044:	4620      	mov	r0, r4
   1c046:	f7f9 f9ab 	bl	153a0 <bt_att_chan_send_rsp.constprop.0>
	att_chan_mtu_updated(chan);
   1c04a:	4620      	mov	r0, r4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   1c04c:	f8a4 707a 	strh.w	r7, [r4, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   1c050:	f8a4 7086 	strh.w	r7, [r4, #134]	; 0x86
	att_chan_mtu_updated(chan);
   1c054:	f7ff fd4c 	bl	1baf0 <att_chan_mtu_updated>
	return 0;
   1c058:	4628      	mov	r0, r5
}
   1c05a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   1c05c:	2006      	movs	r0, #6
   1c05e:	e7fc      	b.n	1c05a <att_mtu_req+0x56>
		return BT_ATT_ERR_INVALID_PDU;
   1c060:	2004      	movs	r0, #4
   1c062:	e7fa      	b.n	1c05a <att_mtu_req+0x56>
		return BT_ATT_ERR_UNLIKELY;
   1c064:	200e      	movs	r0, #14
   1c066:	e7f8      	b.n	1c05a <att_mtu_req+0x56>

0001c068 <bt_att_init>:
	bt_gatt_init();
   1c068:	f7fa b856 	b.w	16118 <bt_gatt_init>

0001c06c <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   1c06c:	898a      	ldrh	r2, [r1, #12]
   1c06e:	6889      	ldr	r1, [r1, #8]
   1c070:	2300      	movs	r3, #0
   1c072:	f7f9 bdfb 	b.w	15c6c <att_handle_rsp>

0001c076 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   1c076:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1c07a:	4607      	mov	r7, r0
   1c07c:	460d      	mov	r5, r1
   1c07e:	4616      	mov	r6, r2
   1c080:	4698      	mov	r8, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   1c082:	f7f8 ff67 	bl	14f54 <att_get>
	if (!att) {
   1c086:	4604      	mov	r4, r0
   1c088:	b938      	cbnz	r0, 1c09a <bt_att_send+0x24>
		net_buf_unref(buf);
   1c08a:	4628      	mov	r0, r5
   1c08c:	f7fa fd3c 	bl	16b08 <net_buf_unref>
		return -ENOTCONN;
   1c090:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   1c094:	b002      	add	sp, #8
   1c096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   1c09a:	b146      	cbz	r6, 1c0ae <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   1c09c:	f8cd 8000 	str.w	r8, [sp]
   1c0a0:	4633      	mov	r3, r6
   1c0a2:	462a      	mov	r2, r5
   1c0a4:	2104      	movs	r1, #4
   1c0a6:	4638      	mov	r0, r7
   1c0a8:	f7ff fc3a 	bl	1b920 <bt_l2cap_send_cb>
   1c0ac:	e7f2      	b.n	1c094 <bt_att_send+0x1e>
	net_buf_put(&att->tx_queue, buf);
   1c0ae:	f100 060c 	add.w	r6, r0, #12
   1c0b2:	4629      	mov	r1, r5
   1c0b4:	4630      	mov	r0, r6
   1c0b6:	f000 faf6 	bl	1c6a6 <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   1c0ba:	2200      	movs	r2, #0
   1c0bc:	2300      	movs	r3, #0
   1c0be:	4630      	mov	r0, r6
   1c0c0:	f000 fad3 	bl	1c66a <net_buf_get>
	if (!buf) {
   1c0c4:	4605      	mov	r5, r0
   1c0c6:	b908      	cbnz	r0, 1c0cc <bt_att_send+0x56>
	return 0;
   1c0c8:	2000      	movs	r0, #0
   1c0ca:	e7e3      	b.n	1c094 <bt_att_send+0x1e>
	return list->head;
   1c0cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1c0ce:	b1c3      	cbz	r3, 1c102 <bt_att_send+0x8c>
   1c0d0:	f5b3 70a2 	subs.w	r0, r3, #324	; 0x144
   1c0d4:	d015      	beq.n	1c102 <bt_att_send+0x8c>
	return node->next;
   1c0d6:	681c      	ldr	r4, [r3, #0]
   1c0d8:	b10c      	cbz	r4, 1c0de <bt_att_send+0x68>
   1c0da:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
	return chan_send(chan, buf, cb);
   1c0de:	2200      	movs	r2, #0
   1c0e0:	4629      	mov	r1, r5
   1c0e2:	f7f9 f8ef 	bl	152c4 <chan_send>
		if (err >= 0) {
   1c0e6:	2800      	cmp	r0, #0
   1c0e8:	daee      	bge.n	1c0c8 <bt_att_send+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1c0ea:	b154      	cbz	r4, 1c102 <bt_att_send+0x8c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1c0ec:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   1c0f0:	d004      	beq.n	1c0fc <bt_att_send+0x86>
	return node->next;
   1c0f2:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   1c0f6:	b10b      	cbz	r3, 1c0fc <bt_att_send+0x86>
   1c0f8:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   1c0fc:	4620      	mov	r0, r4
   1c0fe:	461c      	mov	r4, r3
   1c100:	e7ed      	b.n	1c0de <bt_att_send+0x68>
		k_queue_prepend(&att->tx_queue._queue, buf);
   1c102:	4629      	mov	r1, r5
   1c104:	4630      	mov	r0, r6
   1c106:	f000 fdb4 	bl	1cc72 <k_queue_prepend>
   1c10a:	e7dd      	b.n	1c0c8 <bt_att_send+0x52>

0001c10c <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   1c10c:	b510      	push	{r4, lr}
   1c10e:	460c      	mov	r4, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   1c110:	f7f8 ff20 	bl	14f54 <att_get>
	if (!att) {
   1c114:	b160      	cbz	r0, 1c130 <bt_att_req_send+0x24>
	parent->next = child;
   1c116:	2300      	movs	r3, #0
   1c118:	6023      	str	r3, [r4, #0]
	return list->tail;
   1c11a:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   1c11c:	b92b      	cbnz	r3, 1c12a <bt_att_req_send+0x1e>
	list->head = node;
   1c11e:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   1c122:	f7ff fec4 	bl	1beae <att_req_send_process>

	return 0;
   1c126:	2000      	movs	r0, #0
}
   1c128:	bd10      	pop	{r4, pc}
	parent->next = child;
   1c12a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1c12c:	6084      	str	r4, [r0, #8]
}
   1c12e:	e7f8      	b.n	1c122 <bt_att_req_send+0x16>
		return -ENOTCONN;
   1c130:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1c134:	e7f8      	b.n	1c128 <bt_att_req_send+0x1c>

0001c136 <gatt_ccc_changed>:
{
   1c136:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   1c138:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   1c13a:	895a      	ldrh	r2, [r3, #10]
   1c13c:	428a      	cmp	r2, r1
   1c13e:	d003      	beq.n	1c148 <gatt_ccc_changed+0x12>
		ccc->value = value;
   1c140:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   1c142:	68db      	ldr	r3, [r3, #12]
   1c144:	b103      	cbz	r3, 1c148 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   1c146:	4718      	bx	r3
}
   1c148:	4770      	bx	lr

0001c14a <gatt_indicate_rsp>:
{
   1c14a:	b510      	push	{r4, lr}
   1c14c:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   1c14e:	68a3      	ldr	r3, [r4, #8]
{
   1c150:	460a      	mov	r2, r1
	if (params->func) {
   1c152:	b10b      	cbz	r3, 1c158 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   1c154:	4621      	mov	r1, r4
   1c156:	4798      	blx	r3
	params->_ref--;
   1c158:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   1c15a:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   1c15c:	3b01      	subs	r3, #1
   1c15e:	b2db      	uxtb	r3, r3
   1c160:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   1c162:	b122      	cbz	r2, 1c16e <gatt_indicate_rsp+0x24>
   1c164:	b91b      	cbnz	r3, 1c16e <gatt_indicate_rsp+0x24>
		params->destroy(params);
   1c166:	4620      	mov	r0, r4
}
   1c168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   1c16c:	4710      	bx	r2
}
   1c16e:	bd10      	pop	{r4, pc}

0001c170 <match_uuid>:
	data->attr = attr;
   1c170:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   1c172:	8091      	strh	r1, [r2, #4]
}
   1c174:	2000      	movs	r0, #0
   1c176:	4770      	bx	lr

0001c178 <gen_hash_m>:
{
   1c178:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1c17a:	6807      	ldr	r7, [r0, #0]
   1c17c:	783d      	ldrb	r5, [r7, #0]
{
   1c17e:	b089      	sub	sp, #36	; 0x24
   1c180:	4606      	mov	r6, r0
   1c182:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1c184:	b10d      	cbz	r5, 1c18a <gen_hash_m+0x12>
	switch (u16->val) {
   1c186:	2501      	movs	r5, #1
   1c188:	e014      	b.n	1c1b4 <gen_hash_m+0x3c>
   1c18a:	887b      	ldrh	r3, [r7, #2]
   1c18c:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   1c190:	d004      	beq.n	1c19c <gen_hash_m+0x24>
   1c192:	d812      	bhi.n	1c1ba <gen_hash_m+0x42>
   1c194:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   1c198:	2b03      	cmp	r3, #3
   1c19a:	d8f4      	bhi.n	1c186 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1c19c:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1c1a0:	2202      	movs	r2, #2
   1c1a2:	f10d 010e 	add.w	r1, sp, #14
   1c1a6:	4620      	mov	r0, r4
   1c1a8:	f7fe ff0e 	bl	1afc8 <tc_cmac_update>
   1c1ac:	b9e0      	cbnz	r0, 1c1e8 <gen_hash_m+0x70>
			state->err = -EINVAL;
   1c1ae:	f06f 0315 	mvn.w	r3, #21
   1c1b2:	65a3      	str	r3, [r4, #88]	; 0x58
}
   1c1b4:	4628      	mov	r0, r5
   1c1b6:	b009      	add	sp, #36	; 0x24
   1c1b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   1c1ba:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   1c1be:	33ff      	adds	r3, #255	; 0xff
   1c1c0:	b29b      	uxth	r3, r3
   1c1c2:	2b04      	cmp	r3, #4
   1c1c4:	d8df      	bhi.n	1c186 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1c1c6:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1c1ca:	2202      	movs	r2, #2
   1c1cc:	f10d 010e 	add.w	r1, sp, #14
   1c1d0:	4620      	mov	r0, r4
   1c1d2:	f7fe fef9 	bl	1afc8 <tc_cmac_update>
   1c1d6:	2800      	cmp	r0, #0
   1c1d8:	d0e9      	beq.n	1c1ae <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   1c1da:	887b      	ldrh	r3, [r7, #2]
   1c1dc:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1c1e0:	2202      	movs	r2, #2
   1c1e2:	f10d 010e 	add.w	r1, sp, #14
   1c1e6:	e017      	b.n	1c218 <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   1c1e8:	887b      	ldrh	r3, [r7, #2]
   1c1ea:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1c1ee:	2202      	movs	r2, #2
   1c1f0:	f10d 010e 	add.w	r1, sp, #14
   1c1f4:	4620      	mov	r0, r4
   1c1f6:	f7fe fee7 	bl	1afc8 <tc_cmac_update>
   1c1fa:	2800      	cmp	r0, #0
   1c1fc:	d0d7      	beq.n	1c1ae <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   1c1fe:	2000      	movs	r0, #0
   1c200:	2310      	movs	r3, #16
   1c202:	eb0d 0203 	add.w	r2, sp, r3
   1c206:	6877      	ldr	r7, [r6, #4]
   1c208:	9000      	str	r0, [sp, #0]
   1c20a:	4631      	mov	r1, r6
   1c20c:	47b8      	blx	r7
		if (len < 0) {
   1c20e:	1e02      	subs	r2, r0, #0
   1c210:	da01      	bge.n	1c216 <gen_hash_m+0x9e>
			state->err = len;
   1c212:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   1c214:	e7ce      	b.n	1c1b4 <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   1c216:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1c218:	4620      	mov	r0, r4
   1c21a:	f7fe fed5 	bl	1afc8 <tc_cmac_update>
   1c21e:	2800      	cmp	r0, #0
   1c220:	d1b1      	bne.n	1c186 <gen_hash_m+0xe>
   1c222:	e7c4      	b.n	1c1ae <gen_hash_m+0x36>

0001c224 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   1c224:	2207      	movs	r2, #7
   1c226:	f7fe bfc7 	b.w	1b1b8 <memcpy>

0001c22a <clear_cf_cfg>:
{
   1c22a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1c22c:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1c22e:	2500      	movs	r5, #0
   1c230:	4669      	mov	r1, sp
   1c232:	3001      	adds	r0, #1
   1c234:	9500      	str	r5, [sp, #0]
   1c236:	f8cd 5003 	str.w	r5, [sp, #3]
   1c23a:	f7ff fff3 	bl	1c224 <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   1c23e:	f104 0008 	add.w	r0, r4, #8
   1c242:	2201      	movs	r2, #1
   1c244:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1c246:	340c      	adds	r4, #12
   1c248:	f7fe ffc1 	bl	1b1ce <memset>
   1c24c:	f3bf 8f5b 	dmb	ish
   1c250:	e854 3f00 	ldrex	r3, [r4]
   1c254:	e844 5200 	strex	r2, r5, [r4]
   1c258:	2a00      	cmp	r2, #0
   1c25a:	d1f9      	bne.n	1c250 <clear_cf_cfg+0x26>
   1c25c:	f3bf 8f5b 	dmb	ish
}
   1c260:	b003      	add	sp, #12
   1c262:	bd30      	pop	{r4, r5, pc}

0001c264 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1c264:	2301      	movs	r3, #1
   1c266:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1c268:	f3bf 8f5b 	dmb	ish
   1c26c:	e850 2f00 	ldrex	r2, [r0]
   1c270:	431a      	orrs	r2, r3
   1c272:	e840 2100 	strex	r1, r2, [r0]
   1c276:	2900      	cmp	r1, #0
   1c278:	d1f8      	bne.n	1c26c <atomic_set_bit+0x8>
   1c27a:	f3bf 8f5b 	dmb	ish
}
   1c27e:	4770      	bx	lr

0001c280 <sc_restore_rsp>:
{
   1c280:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   1c282:	f7f9 fdab 	bl	15ddc <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   1c286:	b140      	cbz	r0, 1c29a <sc_restore_rsp+0x1a>
   1c288:	7a03      	ldrb	r3, [r0, #8]
   1c28a:	07db      	lsls	r3, r3, #31
   1c28c:	d505      	bpl.n	1c29a <sc_restore_rsp+0x1a>
}
   1c28e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1c292:	2100      	movs	r1, #0
   1c294:	300c      	adds	r0, #12
   1c296:	f7ff bfe5 	b.w	1c264 <atomic_set_bit>
}
   1c29a:	bd08      	pop	{r3, pc}

0001c29c <read_ppcp>:
{
   1c29c:	b513      	push	{r0, r1, r4, lr}
   1c29e:	4610      	mov	r0, r2
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   1c2a0:	2218      	movs	r2, #24
{
   1c2a2:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   1c2a6:	f8ad 2000 	strh.w	r2, [sp]
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
   1c2aa:	2228      	movs	r2, #40	; 0x28
   1c2ac:	f8ad 2002 	strh.w	r2, [sp, #2]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
   1c2b0:	2200      	movs	r2, #0
   1c2b2:	f8ad 2004 	strh.w	r2, [sp, #4]
	if (offset > value_len) {
   1c2b6:	2908      	cmp	r1, #8
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   1c2b8:	f04f 022a 	mov.w	r2, #42	; 0x2a
   1c2bc:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   1c2c0:	d80b      	bhi.n	1c2da <read_ppcp+0x3e>
	len = MIN(buf_len, value_len - offset);
   1c2c2:	f1c1 0408 	rsb	r4, r1, #8
   1c2c6:	429c      	cmp	r4, r3
   1c2c8:	bfa8      	it	ge
   1c2ca:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1c2cc:	4622      	mov	r2, r4
   1c2ce:	4469      	add	r1, sp
   1c2d0:	f7fe ff72 	bl	1b1b8 <memcpy>
}
   1c2d4:	4620      	mov	r0, r4
   1c2d6:	b002      	add	sp, #8
   1c2d8:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1c2da:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   1c2de:	e7f9      	b.n	1c2d4 <read_ppcp+0x38>

0001c2e0 <read_appearance>:
{
   1c2e0:	b513      	push	{r0, r1, r4, lr}
   1c2e2:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1c2e6:	4610      	mov	r0, r2
	if (offset > value_len) {
   1c2e8:	2902      	cmp	r1, #2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   1c2ea:	f240 32c2 	movw	r2, #962	; 0x3c2
   1c2ee:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   1c2f2:	d80d      	bhi.n	1c310 <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   1c2f4:	f1c1 0402 	rsb	r4, r1, #2
   1c2f8:	429c      	cmp	r4, r3
   1c2fa:	bfa8      	it	ge
   1c2fc:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1c2fe:	f10d 0306 	add.w	r3, sp, #6
   1c302:	4622      	mov	r2, r4
   1c304:	4419      	add	r1, r3
   1c306:	f7fe ff57 	bl	1b1b8 <memcpy>
}
   1c30a:	4620      	mov	r0, r4
   1c30c:	b002      	add	sp, #8
   1c30e:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1c310:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   1c314:	e7f9      	b.n	1c30a <read_appearance+0x2a>

0001c316 <read_name>:
{
   1c316:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c31a:	4698      	mov	r8, r3
   1c31c:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   1c320:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   1c322:	f7f7 f97f 	bl	13624 <bt_get_name>
   1c326:	4607      	mov	r7, r0
				 strlen(name));
   1c328:	f7fe ff19 	bl	1b15e <strlen>
	if (offset > value_len) {
   1c32c:	b283      	uxth	r3, r0
   1c32e:	42b3      	cmp	r3, r6
   1c330:	d30c      	bcc.n	1c34c <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   1c332:	1b9c      	subs	r4, r3, r6
   1c334:	4544      	cmp	r4, r8
   1c336:	bfa8      	it	ge
   1c338:	4644      	movge	r4, r8
   1c33a:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   1c33c:	4622      	mov	r2, r4
   1c33e:	19b9      	adds	r1, r7, r6
   1c340:	4628      	mov	r0, r5
   1c342:	f7fe ff39 	bl	1b1b8 <memcpy>
}
   1c346:	4620      	mov	r0, r4
   1c348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1c34c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   1c350:	e7f9      	b.n	1c346 <read_name+0x30>

0001c352 <cf_read>:
{
   1c352:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1c354:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   1c356:	2300      	movs	r3, #0
{
   1c358:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   1c35c:	f88d 3004 	strb.w	r3, [sp, #4]
{
   1c360:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   1c362:	f7f9 fd3b 	bl	15ddc <find_cf_cfg>
	if (cfg) {
   1c366:	b128      	cbz	r0, 1c374 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   1c368:	f100 0108 	add.w	r1, r0, #8
   1c36c:	2201      	movs	r2, #1
   1c36e:	a801      	add	r0, sp, #4
   1c370:	f7fe ff22 	bl	1b1b8 <memcpy>
	if (offset > value_len) {
   1c374:	2e01      	cmp	r6, #1
   1c376:	d80d      	bhi.n	1c394 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   1c378:	f1c6 0401 	rsb	r4, r6, #1
   1c37c:	42bc      	cmp	r4, r7
   1c37e:	bfa8      	it	ge
   1c380:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1c382:	ab01      	add	r3, sp, #4
   1c384:	4622      	mov	r2, r4
   1c386:	1999      	adds	r1, r3, r6
   1c388:	4628      	mov	r0, r5
   1c38a:	f7fe ff15 	bl	1b1b8 <memcpy>
}
   1c38e:	4620      	mov	r0, r4
   1c390:	b003      	add	sp, #12
   1c392:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1c394:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   1c398:	e7f9      	b.n	1c38e <cf_read+0x3c>

0001c39a <bt_gatt_attr_read_service>:
{
   1c39a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   1c39c:	68c9      	ldr	r1, [r1, #12]
{
   1c39e:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   1c3a2:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   1c3a4:	780b      	ldrb	r3, [r1, #0]
{
   1c3a6:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   1c3a8:	b993      	cbnz	r3, 1c3d0 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1c3aa:	884b      	ldrh	r3, [r1, #2]
   1c3ac:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   1c3b0:	2d02      	cmp	r5, #2
   1c3b2:	d819      	bhi.n	1c3e8 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   1c3b4:	f1c5 0202 	rsb	r2, r5, #2
   1c3b8:	4294      	cmp	r4, r2
   1c3ba:	bfa8      	it	ge
   1c3bc:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1c3be:	f10d 0306 	add.w	r3, sp, #6
   1c3c2:	4622      	mov	r2, r4
   1c3c4:	1959      	adds	r1, r3, r5
   1c3c6:	f7fe fef7 	bl	1b1b8 <memcpy>
}
   1c3ca:	4620      	mov	r0, r4
   1c3cc:	b003      	add	sp, #12
   1c3ce:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   1c3d0:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   1c3d2:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   1c3d6:	d807      	bhi.n	1c3e8 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   1c3d8:	f1c5 0210 	rsb	r2, r5, #16
   1c3dc:	4294      	cmp	r4, r2
   1c3de:	bfa8      	it	ge
   1c3e0:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1c3e2:	4622      	mov	r2, r4
   1c3e4:	4429      	add	r1, r5
   1c3e6:	e7ee      	b.n	1c3c6 <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1c3e8:	f06f 0406 	mvn.w	r4, #6
   1c3ec:	e7ed      	b.n	1c3ca <bt_gatt_attr_read_service+0x30>

0001c3ee <find_ccc_cfg>:
{
   1c3ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1c3f0:	460c      	mov	r4, r1
						    &cfg->peer)) {
   1c3f2:	1c4d      	adds	r5, r1, #1
		if (conn) {
   1c3f4:	b148      	cbz	r0, 1c40a <find_ccc_cfg+0x1c>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1c3f6:	7809      	ldrb	r1, [r1, #0]
   1c3f8:	462a      	mov	r2, r5
   1c3fa:	f7ff f9f4 	bl	1b7e6 <bt_conn_is_peer_addr_le>
	return NULL;
   1c3fe:	2800      	cmp	r0, #0
   1c400:	bf08      	it	eq
   1c402:	2400      	moveq	r4, #0
}
   1c404:	4620      	mov	r0, r4
   1c406:	b003      	add	sp, #12
   1c408:	bd30      	pop	{r4, r5, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1c40a:	9000      	str	r0, [sp, #0]
	return memcmp(a, b, sizeof(*a));
   1c40c:	2207      	movs	r2, #7
   1c40e:	f8cd 0003 	str.w	r0, [sp, #3]
   1c412:	4669      	mov	r1, sp
   1c414:	4628      	mov	r0, r5
   1c416:	f7fe febe 	bl	1b196 <memcmp>
	return NULL;
   1c41a:	2800      	cmp	r0, #0
   1c41c:	bf18      	it	ne
   1c41e:	2400      	movne	r4, #0
   1c420:	e7f0      	b.n	1c404 <find_ccc_cfg+0x16>

0001c422 <bt_gatt_attr_read_ccc>:
{
   1c422:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   1c424:	68c9      	ldr	r1, [r1, #12]
{
   1c426:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   1c42a:	4615      	mov	r5, r2
   1c42c:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   1c42e:	f7ff ffde 	bl	1c3ee <find_ccc_cfg>
	if (cfg) {
   1c432:	b100      	cbz	r0, 1c436 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   1c434:	8900      	ldrh	r0, [r0, #8]
   1c436:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   1c43a:	2e02      	cmp	r6, #2
   1c43c:	d80e      	bhi.n	1c45c <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   1c43e:	f1c6 0402 	rsb	r4, r6, #2
   1c442:	42bc      	cmp	r4, r7
   1c444:	bfa8      	it	ge
   1c446:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1c448:	f10d 0306 	add.w	r3, sp, #6
   1c44c:	4622      	mov	r2, r4
   1c44e:	1999      	adds	r1, r3, r6
   1c450:	4628      	mov	r0, r5
   1c452:	f7fe feb1 	bl	1b1b8 <memcpy>
}
   1c456:	4620      	mov	r0, r4
   1c458:	b003      	add	sp, #12
   1c45a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1c45c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   1c460:	e7f9      	b.n	1c456 <bt_gatt_attr_read_ccc+0x34>

0001c462 <sc_clear>:
{
   1c462:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1c464:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   1c468:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1c46a:	4631      	mov	r1, r6
   1c46c:	7a00      	ldrb	r0, [r0, #8]
   1c46e:	f7ff f80f 	bl	1b490 <bt_addr_le_is_bonded>
   1c472:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   1c474:	4631      	mov	r1, r6
   1c476:	f7f9 fd8b 	bl	15f90 <find_sc_cfg>
	if (!cfg) {
   1c47a:	b128      	cbz	r0, 1c488 <sc_clear+0x26>
}
   1c47c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   1c480:	220c      	movs	r2, #12
   1c482:	2100      	movs	r1, #0
   1c484:	f7fe bea3 	b.w	1b1ce <memset>
}
   1c488:	bd70      	pop	{r4, r5, r6, pc}

0001c48a <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   1c48a:	2a02      	cmp	r2, #2
{
   1c48c:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   1c48e:	d108      	bne.n	1c4a2 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   1c490:	2300      	movs	r3, #0
   1c492:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1c496:	461a      	mov	r2, r3
   1c498:	7a00      	ldrb	r0, [r0, #8]
   1c49a:	f7f9 fd89 	bl	15fb0 <sc_save>
}
   1c49e:	2002      	movs	r0, #2
   1c4a0:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   1c4a2:	f7ff ffde 	bl	1c462 <sc_clear>
   1c4a6:	e7fa      	b.n	1c49e <sc_ccc_cfg_write+0x14>

0001c4a8 <bt_gatt_attr_value_handle>:
{
   1c4a8:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1c4aa:	4604      	mov	r4, r0
   1c4ac:	b910      	cbnz	r0, 1c4b4 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   1c4ae:	2000      	movs	r0, #0
}
   1c4b0:	b002      	add	sp, #8
   1c4b2:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1c4b4:	2300      	movs	r3, #0
   1c4b6:	f88d 3004 	strb.w	r3, [sp, #4]
   1c4ba:	6800      	ldr	r0, [r0, #0]
   1c4bc:	f642 0303 	movw	r3, #10243	; 0x2803
   1c4c0:	a901      	add	r1, sp, #4
   1c4c2:	f8ad 3006 	strh.w	r3, [sp, #6]
   1c4c6:	f7fe feac 	bl	1b222 <bt_uuid_cmp>
   1c4ca:	2800      	cmp	r0, #0
   1c4cc:	d1ef      	bne.n	1c4ae <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   1c4ce:	68e3      	ldr	r3, [r4, #12]
   1c4d0:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   1c4d2:	2800      	cmp	r0, #0
   1c4d4:	d1ec      	bne.n	1c4b0 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   1c4d6:	4620      	mov	r0, r4
   1c4d8:	f7f9 fe74 	bl	161c4 <bt_gatt_attr_get_handle>
   1c4dc:	3001      	adds	r0, #1
   1c4de:	b280      	uxth	r0, r0
	return handle;
   1c4e0:	e7e6      	b.n	1c4b0 <bt_gatt_attr_value_handle+0x8>

0001c4e2 <bt_gatt_attr_read_chrc>:
{
   1c4e2:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   1c4e4:	68cf      	ldr	r7, [r1, #12]
{
   1c4e6:	b087      	sub	sp, #28
   1c4e8:	4608      	mov	r0, r1
   1c4ea:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   1c4ec:	79bb      	ldrb	r3, [r7, #6]
   1c4ee:	f88d 3004 	strb.w	r3, [sp, #4]
{
   1c4f2:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   1c4f6:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1c4f8:	f7ff ffd6 	bl	1c4a8 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1c4fc:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1c4fe:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1c502:	780b      	ldrb	r3, [r1, #0]
   1c504:	b99b      	cbnz	r3, 1c52e <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   1c506:	884b      	ldrh	r3, [r1, #2]
   1c508:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   1c50c:	2105      	movs	r1, #5
	if (offset > value_len) {
   1c50e:	42b1      	cmp	r1, r6
   1c510:	d315      	bcc.n	1c53e <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   1c512:	1b89      	subs	r1, r1, r6
   1c514:	42a1      	cmp	r1, r4
   1c516:	bfa8      	it	ge
   1c518:	4621      	movge	r1, r4
   1c51a:	b28c      	uxth	r4, r1
	memcpy(buf, (uint8_t *)value + offset, len);
   1c51c:	ab01      	add	r3, sp, #4
   1c51e:	4622      	mov	r2, r4
   1c520:	1999      	adds	r1, r3, r6
   1c522:	4628      	mov	r0, r5
   1c524:	f7fe fe48 	bl	1b1b8 <memcpy>
}
   1c528:	4620      	mov	r0, r4
   1c52a:	b007      	add	sp, #28
   1c52c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   1c52e:	3101      	adds	r1, #1
   1c530:	2210      	movs	r2, #16
   1c532:	f10d 0007 	add.w	r0, sp, #7
   1c536:	f7fe fe3f 	bl	1b1b8 <memcpy>
		value_len += 16U;
   1c53a:	2113      	movs	r1, #19
   1c53c:	e7e7      	b.n	1c50e <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1c53e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   1c542:	e7f1      	b.n	1c528 <bt_gatt_attr_read_chrc+0x46>

0001c544 <bt_gatt_foreach_attr>:
{
   1c544:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1c546:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1c54a:	2300      	movs	r3, #0
   1c54c:	9300      	str	r3, [sp, #0]
   1c54e:	461a      	mov	r2, r3
   1c550:	f7f9 fe68 	bl	16224 <bt_gatt_foreach_attr_type>
}
   1c554:	b005      	add	sp, #20
   1c556:	f85d fb04 	ldr.w	pc, [sp], #4

0001c55a <db_hash_process>:
	db_hash_gen(true);
   1c55a:	f7f9 bebd 	b.w	162d8 <db_hash_gen.constprop.0>

0001c55e <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   1c55e:	07d3      	lsls	r3, r2, #31
{
   1c560:	b510      	push	{r4, lr}
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1c562:	7c8c      	ldrb	r4, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   1c564:	d504      	bpl.n	1c570 <bt_gatt_check_perm+0x12>
   1c566:	f014 0f15 	tst.w	r4, #21
   1c56a:	d017      	beq.n	1c59c <bt_gatt_check_perm+0x3e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1c56c:	684b      	ldr	r3, [r1, #4]
   1c56e:	b1ab      	cbz	r3, 1c59c <bt_gatt_check_perm+0x3e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   1c570:	0793      	lsls	r3, r2, #30
   1c572:	d504      	bpl.n	1c57e <bt_gatt_check_perm+0x20>
   1c574:	f014 0f2a 	tst.w	r4, #42	; 0x2a
   1c578:	d012      	beq.n	1c5a0 <bt_gatt_check_perm+0x42>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   1c57a:	688b      	ldr	r3, [r1, #8]
   1c57c:	b183      	cbz	r3, 1c5a0 <bt_gatt_check_perm+0x42>
	mask &= attr->perm;
   1c57e:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   1c580:	f014 0f30 	tst.w	r4, #48	; 0x30
   1c584:	d104      	bne.n	1c590 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   1c586:	f014 000c 	ands.w	r0, r4, #12
   1c58a:	bf18      	it	ne
   1c58c:	200f      	movne	r0, #15
}
   1c58e:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   1c590:	f7ff f927 	bl	1b7e2 <bt_conn_get_security>
   1c594:	2802      	cmp	r0, #2
   1c596:	d8f6      	bhi.n	1c586 <bt_gatt_check_perm+0x28>
			return BT_ATT_ERR_AUTHENTICATION;
   1c598:	2005      	movs	r0, #5
   1c59a:	e7f8      	b.n	1c58e <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   1c59c:	2002      	movs	r0, #2
   1c59e:	e7f6      	b.n	1c58e <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   1c5a0:	2003      	movs	r0, #3
   1c5a2:	e7f4      	b.n	1c58e <bt_gatt_check_perm+0x30>

0001c5a4 <bt_gatt_change_aware>:
{
   1c5a4:	b510      	push	{r4, lr}
   1c5a6:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   1c5a8:	f7f9 fc18 	bl	15ddc <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1c5ac:	4603      	mov	r3, r0
   1c5ae:	b910      	cbnz	r0, 1c5b6 <bt_gatt_change_aware+0x12>
		return true;
   1c5b0:	2401      	movs	r4, #1
}
   1c5b2:	4620      	mov	r0, r4
   1c5b4:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1c5b6:	7a02      	ldrb	r2, [r0, #8]
   1c5b8:	07d2      	lsls	r2, r2, #31
   1c5ba:	d5f9      	bpl.n	1c5b0 <bt_gatt_change_aware+0xc>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c5bc:	f3bf 8f5b 	dmb	ish
   1c5c0:	68d9      	ldr	r1, [r3, #12]
   1c5c2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1c5c6:	f011 0101 	ands.w	r1, r1, #1
   1c5ca:	f100 000c 	add.w	r0, r0, #12
   1c5ce:	d1ef      	bne.n	1c5b0 <bt_gatt_change_aware+0xc>
	if (!req) {
   1c5d0:	2c00      	cmp	r4, #0
   1c5d2:	d0ee      	beq.n	1c5b2 <bt_gatt_change_aware+0xe>
   1c5d4:	f3bf 8f5b 	dmb	ish
   1c5d8:	68db      	ldr	r3, [r3, #12]
   1c5da:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1c5de:	f3c3 0440 	ubfx	r4, r3, #1, #1
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   1c5e2:	079b      	lsls	r3, r3, #30
   1c5e4:	d50e      	bpl.n	1c604 <bt_gatt_change_aware+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1c5e6:	f3bf 8f5b 	dmb	ish
   1c5ea:	e850 3f00 	ldrex	r3, [r0]
   1c5ee:	f023 0302 	bic.w	r3, r3, #2
   1c5f2:	e840 3200 	strex	r2, r3, [r0]
   1c5f6:	2a00      	cmp	r2, #0
   1c5f8:	d1f7      	bne.n	1c5ea <bt_gatt_change_aware+0x46>
   1c5fa:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   1c5fe:	f7ff fe31 	bl	1c264 <atomic_set_bit>
	return false;
   1c602:	e7d6      	b.n	1c5b2 <bt_gatt_change_aware+0xe>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   1c604:	2101      	movs	r1, #1
   1c606:	e7fa      	b.n	1c5fe <bt_gatt_change_aware+0x5a>

0001c608 <bt_smp_recv>:
{
   1c608:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   1c60a:	2100      	movs	r1, #0
   1c60c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c610:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	struct bt_conn *conn = chan->conn;
   1c614:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   1c616:	4608      	mov	r0, r1
   1c618:	f7ff f97f 	bl	1b91a <bt_l2cap_create_pdu_timeout>
   1c61c:	f100 0608 	add.w	r6, r0, #8
   1c620:	4604      	mov	r4, r0
   1c622:	2101      	movs	r1, #1
   1c624:	4630      	mov	r0, r6
   1c626:	f000 f871 	bl	1c70c <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   1c62a:	2505      	movs	r5, #5
   1c62c:	7005      	strb	r5, [r0, #0]
   1c62e:	2101      	movs	r1, #1
   1c630:	4630      	mov	r0, r6
   1c632:	f000 f86b 	bl	1c70c <net_buf_simple_add>
   1c636:	2300      	movs	r3, #0
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   1c638:	7005      	strb	r5, [r0, #0]
   1c63a:	4622      	mov	r2, r4
   1c63c:	9300      	str	r3, [sp, #0]
   1c63e:	2106      	movs	r1, #6
   1c640:	4638      	mov	r0, r7
   1c642:	f7ff f96d 	bl	1b920 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   1c646:	b110      	cbz	r0, 1c64e <bt_smp_recv+0x46>
		net_buf_unref(buf);
   1c648:	4620      	mov	r0, r4
   1c64a:	f7fa fa5d 	bl	16b08 <net_buf_unref>
}
   1c64e:	2000      	movs	r0, #0
   1c650:	b003      	add	sp, #12
   1c652:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001c654 <bt_smp_sign>:
   1c654:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1c658:	4770      	bx	lr

0001c65a <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   1c65a:	2000      	movs	r0, #0
   1c65c:	4770      	bx	lr

0001c65e <fixed_data_unref>:
}
   1c65e:	4770      	bx	lr

0001c660 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1c660:	6a01      	ldr	r1, [r0, #32]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   1c662:	6849      	ldr	r1, [r1, #4]
   1c664:	6809      	ldr	r1, [r1, #0]
   1c666:	f7fa b9c1 	b.w	169ec <net_buf_alloc_len>

0001c66a <net_buf_get>:
{
   1c66a:	b570      	push	{r4, r5, r6, lr}
   1c66c:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   1c66e:	f7fc fabb 	bl	18be8 <z_impl_k_queue_get>
	if (!buf) {
   1c672:	4605      	mov	r5, r0
   1c674:	b128      	cbz	r0, 1c682 <net_buf_get+0x18>
   1c676:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1c678:	7963      	ldrb	r3, [r4, #5]
   1c67a:	f013 0301 	ands.w	r3, r3, #1
   1c67e:	d102      	bne.n	1c686 <net_buf_get+0x1c>
	frag->frags = NULL;
   1c680:	6023      	str	r3, [r4, #0]
}
   1c682:	4628      	mov	r0, r5
   1c684:	bd70      	pop	{r4, r5, r6, pc}
   1c686:	2300      	movs	r3, #0
   1c688:	2200      	movs	r2, #0
   1c68a:	4630      	mov	r0, r6
   1c68c:	f7fc faac 	bl	18be8 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   1c690:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1c692:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   1c694:	f023 0301 	bic.w	r3, r3, #1
   1c698:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1c69a:	4604      	mov	r4, r0
   1c69c:	e7ec      	b.n	1c678 <net_buf_get+0xe>

0001c69e <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   1c69e:	6883      	ldr	r3, [r0, #8]
   1c6a0:	440b      	add	r3, r1
   1c6a2:	6003      	str	r3, [r0, #0]
}
   1c6a4:	4770      	bx	lr

0001c6a6 <net_buf_put>:
{
   1c6a6:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   1c6a8:	460a      	mov	r2, r1
   1c6aa:	6814      	ldr	r4, [r2, #0]
   1c6ac:	b914      	cbnz	r4, 1c6b4 <net_buf_put+0xe>
}
   1c6ae:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   1c6b0:	f000 bae9 	b.w	1cc86 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   1c6b4:	7953      	ldrb	r3, [r2, #5]
   1c6b6:	f043 0301 	orr.w	r3, r3, #1
   1c6ba:	7153      	strb	r3, [r2, #5]
   1c6bc:	4622      	mov	r2, r4
   1c6be:	e7f4      	b.n	1c6aa <net_buf_put+0x4>

0001c6c0 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1c6c0:	7902      	ldrb	r2, [r0, #4]
   1c6c2:	3201      	adds	r2, #1
   1c6c4:	7102      	strb	r2, [r0, #4]
	return buf;
}
   1c6c6:	4770      	bx	lr

0001c6c8 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1c6c8:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   1c6ca:	4618      	mov	r0, r3
   1c6cc:	681b      	ldr	r3, [r3, #0]
   1c6ce:	2b00      	cmp	r3, #0
   1c6d0:	d1fb      	bne.n	1c6ca <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   1c6d2:	4770      	bx	lr

0001c6d4 <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   1c6d4:	6802      	ldr	r2, [r0, #0]
{
   1c6d6:	b510      	push	{r4, lr}
	if (parent->frags) {
   1c6d8:	b12a      	cbz	r2, 1c6e6 <net_buf_frag_insert+0x12>
   1c6da:	460b      	mov	r3, r1
	while (buf->frags) {
   1c6dc:	461c      	mov	r4, r3
   1c6de:	681b      	ldr	r3, [r3, #0]
   1c6e0:	2b00      	cmp	r3, #0
   1c6e2:	d1fb      	bne.n	1c6dc <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   1c6e4:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1c6e6:	6001      	str	r1, [r0, #0]
}
   1c6e8:	bd10      	pop	{r4, pc}

0001c6ea <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1c6ea:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   1c6ec:	4604      	mov	r4, r0
   1c6ee:	b920      	cbnz	r0, 1c6fa <net_buf_frag_add+0x10>
	buf->ref++;
   1c6f0:	790b      	ldrb	r3, [r1, #4]
   1c6f2:	3301      	adds	r3, #1
   1c6f4:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   1c6f6:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   1c6f8:	bd10      	pop	{r4, pc}
   1c6fa:	4603      	mov	r3, r0
	while (buf->frags) {
   1c6fc:	4618      	mov	r0, r3
   1c6fe:	681b      	ldr	r3, [r3, #0]
   1c700:	2b00      	cmp	r3, #0
   1c702:	d1fb      	bne.n	1c6fc <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1c704:	f7ff ffe6 	bl	1c6d4 <net_buf_frag_insert>
   1c708:	4620      	mov	r0, r4
   1c70a:	e7f5      	b.n	1c6f8 <net_buf_frag_add+0xe>

0001c70c <net_buf_simple_add>:
	return buf->data + buf->len;
   1c70c:	8883      	ldrh	r3, [r0, #4]
   1c70e:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   1c710:	4419      	add	r1, r3
   1c712:	8081      	strh	r1, [r0, #4]
	return tail;
}
   1c714:	18d0      	adds	r0, r2, r3
   1c716:	4770      	bx	lr

0001c718 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   1c718:	b430      	push	{r4, r5}
   1c71a:	8884      	ldrh	r4, [r0, #4]
   1c71c:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   1c71e:	18a3      	adds	r3, r4, r2
   1c720:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1c722:	1928      	adds	r0, r5, r4
}
   1c724:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1c726:	f7fe bd47 	b.w	1b1b8 <memcpy>

0001c72a <net_buf_simple_add_u8>:
   1c72a:	8883      	ldrh	r3, [r0, #4]
   1c72c:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   1c72e:	b510      	push	{r4, lr}
	buf->len += len;
   1c730:	1c5c      	adds	r4, r3, #1
   1c732:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   1c734:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   1c736:	18d0      	adds	r0, r2, r3
   1c738:	bd10      	pop	{r4, pc}

0001c73a <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   1c73a:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   1c73c:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   1c73e:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   1c740:	1a40      	subs	r0, r0, r1
	buf->len += len;
   1c742:	4411      	add	r1, r2
	buf->data -= len;
   1c744:	6018      	str	r0, [r3, #0]
	buf->len += len;
   1c746:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   1c748:	4770      	bx	lr

0001c74a <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1c74a:	8882      	ldrh	r2, [r0, #4]
   1c74c:	1a52      	subs	r2, r2, r1
{
   1c74e:	4603      	mov	r3, r0
	buf->len -= len;
   1c750:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   1c752:	6800      	ldr	r0, [r0, #0]
   1c754:	4408      	add	r0, r1
   1c756:	6018      	str	r0, [r3, #0]
}
   1c758:	4770      	bx	lr

0001c75a <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   1c75a:	4603      	mov	r3, r0
	void *data = buf->data;
   1c75c:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1c75e:	889a      	ldrh	r2, [r3, #4]
   1c760:	1a52      	subs	r2, r2, r1
	buf->data += len;
   1c762:	4401      	add	r1, r0
	buf->len -= len;
   1c764:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   1c766:	6019      	str	r1, [r3, #0]

	return data;
}
   1c768:	4770      	bx	lr

0001c76a <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   1c76a:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   1c76c:	6803      	ldr	r3, [r0, #0]
   1c76e:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1c770:	2102      	movs	r1, #2
   1c772:	f7ff ffea 	bl	1c74a <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   1c776:	4620      	mov	r0, r4
   1c778:	bd10      	pop	{r4, pc}

0001c77a <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1c77a:	6802      	ldr	r2, [r0, #0]
   1c77c:	6880      	ldr	r0, [r0, #8]
}
   1c77e:	1a10      	subs	r0, r2, r0
   1c780:	4770      	bx	lr

0001c782 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1c782:	8883      	ldrh	r3, [r0, #4]
   1c784:	88c2      	ldrh	r2, [r0, #6]
   1c786:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   1c788:	6803      	ldr	r3, [r0, #0]
   1c78a:	6880      	ldr	r0, [r0, #8]
   1c78c:	1a18      	subs	r0, r3, r0
}
   1c78e:	1a10      	subs	r0, r2, r0
   1c790:	4770      	bx	lr

0001c792 <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
   1c792:	f000 001f 	and.w	r0, r0, #31
   1c796:	0080      	lsls	r0, r0, #2
   1c798:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1c79c:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
   1c7a0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1c7a4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1c7a8:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
   1c7ac:	4770      	bx	lr

0001c7ae <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c7ae:	6843      	ldr	r3, [r0, #4]
   1c7b0:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   1c7b2:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   1c7b6:	600b      	str	r3, [r1, #0]
}
   1c7b8:	2000      	movs	r0, #0
   1c7ba:	4770      	bx	lr

0001c7bc <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c7bc:	6843      	ldr	r3, [r0, #4]
   1c7be:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   1c7c0:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   1c7c4:	4042      	eors	r2, r0
   1c7c6:	400a      	ands	r2, r1
   1c7c8:	4042      	eors	r2, r0
    p_reg->OUT = value;
   1c7ca:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   1c7ce:	2000      	movs	r0, #0
   1c7d0:	4770      	bx	lr

0001c7d2 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c7d2:	6843      	ldr	r3, [r0, #4]
   1c7d4:	685b      	ldr	r3, [r3, #4]
}
   1c7d6:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   1c7d8:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   1c7dc:	4770      	bx	lr

0001c7de <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c7de:	6843      	ldr	r3, [r0, #4]
   1c7e0:	685b      	ldr	r3, [r3, #4]
}
   1c7e2:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   1c7e4:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   1c7e8:	4770      	bx	lr

0001c7ea <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c7ea:	6843      	ldr	r3, [r0, #4]
   1c7ec:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   1c7ee:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   1c7f2:	404b      	eors	r3, r1
    p_reg->OUT = value;
   1c7f4:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   1c7f8:	2000      	movs	r0, #0
   1c7fa:	4770      	bx	lr

0001c7fc <gpio_nrfx_manage_callback>:
	return port->data;
   1c7fc:	6903      	ldr	r3, [r0, #16]
	return list->head;
   1c7fe:	6858      	ldr	r0, [r3, #4]
{
   1c800:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   1c802:	b158      	cbz	r0, 1c81c <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c804:	2400      	movs	r4, #0
   1c806:	4281      	cmp	r1, r0
   1c808:	d112      	bne.n	1c830 <gpio_nrfx_manage_callback+0x34>
	return node->next;
   1c80a:	6808      	ldr	r0, [r1, #0]
	return list->tail;
   1c80c:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
   1c80e:	b954      	cbnz	r4, 1c826 <gpio_nrfx_manage_callback+0x2a>
   1c810:	428d      	cmp	r5, r1
	list->head = node;
   1c812:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1c814:	d100      	bne.n	1c818 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   1c816:	6098      	str	r0, [r3, #8]
	parent->next = child;
   1c818:	2000      	movs	r0, #0
   1c81a:	6008      	str	r0, [r1, #0]
	if (set) {
   1c81c:	b96a      	cbnz	r2, 1c83a <gpio_nrfx_manage_callback+0x3e>
	return 0;
   1c81e:	2000      	movs	r0, #0
}
   1c820:	bd30      	pop	{r4, r5, pc}
   1c822:	4628      	mov	r0, r5
   1c824:	e7ef      	b.n	1c806 <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
   1c826:	428d      	cmp	r5, r1
	parent->next = child;
   1c828:	6020      	str	r0, [r4, #0]
	list->tail = node;
   1c82a:	bf08      	it	eq
   1c82c:	609c      	streq	r4, [r3, #8]
}
   1c82e:	e7f3      	b.n	1c818 <gpio_nrfx_manage_callback+0x1c>
	return node->next;
   1c830:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c832:	4604      	mov	r4, r0
   1c834:	2d00      	cmp	r5, #0
   1c836:	d1f4      	bne.n	1c822 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   1c838:	b13a      	cbz	r2, 1c84a <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
   1c83a:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
   1c83c:	685a      	ldr	r2, [r3, #4]
   1c83e:	600a      	str	r2, [r1, #0]
	list->head = node;
   1c840:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1c842:	2800      	cmp	r0, #0
   1c844:	d1eb      	bne.n	1c81e <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   1c846:	6099      	str	r1, [r3, #8]
}
   1c848:	e7ea      	b.n	1c820 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   1c84a:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1c84e:	e7e7      	b.n	1c820 <gpio_nrfx_manage_callback+0x24>

0001c850 <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
   1c850:	6902      	ldr	r2, [r0, #16]
{
   1c852:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   1c854:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   1c858:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1c85c:	2000      	movs	r0, #0
   1c85e:	4770      	bx	lr

0001c860 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   1c860:	6843      	ldr	r3, [r0, #4]
   1c862:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1c864:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1c868:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1c86c:	4770      	bx	lr

0001c86e <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   1c86e:	6843      	ldr	r3, [r0, #4]
	return dev->data;
   1c870:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   1c872:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c874:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1c878:	b148      	cbz	r0, 1c88e <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
   1c87a:	7c52      	ldrb	r2, [r2, #17]
   1c87c:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c87e:	2000      	movs	r0, #0
   1c880:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1c884:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c888:	2201      	movs	r2, #1
   1c88a:	601a      	str	r2, [r3, #0]
	return 0;
   1c88c:	4770      	bx	lr
		return -1;
   1c88e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1c892:	4770      	bx	lr

0001c894 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   1c894:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   1c896:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c898:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1c89c:	b940      	cbnz	r0, 1c8b0 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   1c89e:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1c8a0:	071b      	lsls	r3, r3, #28
   1c8a2:	d406      	bmi.n	1c8b2 <is_tx_ready.isra.0+0x1e>
   1c8a4:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   1c8a8:	3800      	subs	r0, #0
   1c8aa:	bf18      	it	ne
   1c8ac:	2001      	movne	r0, #1
   1c8ae:	4770      	bx	lr
   1c8b0:	2001      	movs	r0, #1
}
   1c8b2:	4770      	bx	lr

0001c8b4 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
   1c8b4:	6843      	ldr	r3, [r0, #4]
   1c8b6:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
   1c8b8:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   1c8bc:	05d1      	lsls	r1, r2, #23
   1c8be:	d518      	bpl.n	1c8f2 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c8c0:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   1c8c4:	b1aa      	cbz	r2, 1c8f2 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   1c8c6:	f04f 0140 	mov.w	r1, #64	; 0x40
   1c8ca:	f3ef 8211 	mrs	r2, BASEPRI
   1c8ce:	f381 8811 	msr	BASEPRI, r1
   1c8d2:	f3bf 8f6f 	isb	sy
   1c8d6:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1c8da:	b131      	cbz	r1, 1c8ea <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c8dc:	2100      	movs	r1, #0
   1c8de:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   1c8e2:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c8e6:	2101      	movs	r1, #1
   1c8e8:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   1c8ea:	f382 8811 	msr	BASEPRI, r2
   1c8ee:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1c8f2:	6842      	ldr	r2, [r0, #4]
   1c8f4:	6852      	ldr	r2, [r2, #4]
   1c8f6:	06d2      	lsls	r2, r2, #27
   1c8f8:	d515      	bpl.n	1c926 <uarte_nrfx_isr_int+0x72>
	__asm__ volatile(
   1c8fa:	f04f 0140 	mov.w	r1, #64	; 0x40
   1c8fe:	f3ef 8211 	mrs	r2, BASEPRI
   1c902:	f381 8811 	msr	BASEPRI, r1
   1c906:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c90a:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   1c90e:	b111      	cbz	r1, 1c916 <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1c910:	2100      	movs	r1, #0
   1c912:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   1c916:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   1c91a:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   1c91e:	f382 8811 	msr	BASEPRI, r2
   1c922:	f3bf 8f6f 	isb	sy
}
   1c926:	4770      	bx	lr

0001c928 <rand_prio_high_vector_get>:
   1c928:	f7fa be42 	b.w	175b0 <rand_prio_low_vector_get>

0001c92c <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   1c92c:	4668      	mov	r0, sp
   1c92e:	f020 0107 	bic.w	r1, r0, #7
   1c932:	468d      	mov	sp, r1
   1c934:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   1c936:	f7e5 ff17 	bl	2768 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   1c93a:	f7f4 fccf 	bl	112dc <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   1c93e:	f7f5 f80b 	bl	11958 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   1c942:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1c946:	4685      	mov	sp, r0
   1c948:	4770      	bx	lr

0001c94a <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   1c94a:	4668      	mov	r0, sp
   1c94c:	f020 0107 	bic.w	r1, r0, #7
   1c950:	468d      	mov	sp, r1
   1c952:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   1c954:	f7e5 fe8a 	bl	266c <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   1c958:	f7f4 fcc0 	bl	112dc <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   1c95c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1c960:	4685      	mov	sp, r0
   1c962:	4770      	bx	lr

0001c964 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   1c964:	4668      	mov	r0, sp
   1c966:	f020 0107 	bic.w	r1, r0, #7
   1c96a:	468d      	mov	sp, r1
   1c96c:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   1c96e:	f7ee fdc5 	bl	b4fc <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   1c972:	f7f4 fcb3 	bl	112dc <_arch_isr_direct_pm>
   1c976:	f7f4 ffef 	bl	11958 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   1c97a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1c97e:	4685      	mov	sp, r0
   1c980:	4770      	bx	lr

0001c982 <nrfx_clock_stop>:
	switch (domain) {
   1c982:	2801      	cmp	r0, #1
   1c984:	d101      	bne.n	1c98a <nrfx_clock_stop+0x8>
		mpsl_clock_hfclk_release();
   1c986:	f7e6 bce5 	b.w	3354 <mpsl_clock_hfclk_release>
}
   1c98a:	4770      	bx	lr

0001c98c <nrfx_clock_enable>:
}
   1c98c:	4770      	bx	lr

0001c98e <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   1c98e:	f7e6 baff 	b.w	2f90 <MPSL_IRQ_CLOCK_Handler>

0001c992 <nrf52_errata_108>:
            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   1c992:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1c996:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
   1c99a:	1c42      	adds	r2, r0, #1
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1c99c:	bf04      	itt	eq
   1c99e:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
   1c9a2:	f893 0fe0 	ldrbeq.w	r0, [r3, #4064]	; 0xfe0
}
   1c9a6:	1f83      	subs	r3, r0, #6
   1c9a8:	4258      	negs	r0, r3
   1c9aa:	4158      	adcs	r0, r3
   1c9ac:	4770      	bx	lr

0001c9ae <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   1c9ae:	4700      	bx	r0

0001c9b0 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   1c9b0:	f000 bbf0 	b.w	1d194 <z_impl_k_busy_wait>

0001c9b4 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   1c9b4:	f7fb bd50 	b.w	18458 <_DoInit>

0001c9b8 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   1c9b8:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   1c9ba:	f7ff fffb 	bl	1c9b4 <SEGGER_RTT_Init>

	return 0;
}
   1c9be:	2000      	movs	r0, #0
   1c9c0:	bd08      	pop	{r3, pc}

0001c9c2 <z_device_state_init>:
}
   1c9c2:	4770      	bx	lr

0001c9c4 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   1c9c4:	b138      	cbz	r0, 1c9d6 <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   1c9c6:	68c3      	ldr	r3, [r0, #12]
   1c9c8:	8818      	ldrh	r0, [r3, #0]
   1c9ca:	f3c0 0008 	ubfx	r0, r0, #0, #9
   1c9ce:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   1c9d2:	4258      	negs	r0, r3
   1c9d4:	4158      	adcs	r0, r3
}
   1c9d6:	4770      	bx	lr

0001c9d8 <k_heap_init>:
{
   1c9d8:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   1c9da:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   1c9de:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   1c9e2:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   1c9e4:	f7fd bc8e 	b.w	1a304 <sys_heap_init>

0001c9e8 <k_heap_aligned_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   1c9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c9ec:	b085      	sub	sp, #20
   1c9ee:	4606      	mov	r6, r0
   1c9f0:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1c9f2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
{
   1c9f6:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1c9f8:	f000 fbd0 	bl	1d19c <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1c9fc:	f106 0a14 	add.w	sl, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1ca00:	4605      	mov	r5, r0
   1ca02:	460f      	mov	r7, r1
	__asm__ volatile(
   1ca04:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ca08:	f3ef 8411 	mrs	r4, BASEPRI
   1ca0c:	f383 8811 	msr	BASEPRI, r3
   1ca10:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1ca14:	f106 0b0c 	add.w	fp, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   1ca18:	464a      	mov	r2, r9
   1ca1a:	4641      	mov	r1, r8
   1ca1c:	4630      	mov	r0, r6
   1ca1e:	f7fd fbf6 	bl	1a20e <sys_heap_aligned_alloc>
   1ca22:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   1ca24:	f7fc ffc8 	bl	199b8 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   1ca28:	9b03      	ldr	r3, [sp, #12]
   1ca2a:	b13b      	cbz	r3, 1ca3c <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   1ca2c:	f384 8811 	msr	BASEPRI, r4
   1ca30:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   1ca34:	4618      	mov	r0, r3
   1ca36:	b005      	add	sp, #20
   1ca38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   1ca3c:	1a28      	subs	r0, r5, r0
   1ca3e:	eb67 0101 	sbc.w	r1, r7, r1
   1ca42:	2801      	cmp	r0, #1
   1ca44:	f171 0200 	sbcs.w	r2, r1, #0
   1ca48:	dbf0      	blt.n	1ca2c <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1ca4a:	e9cd 0100 	strd	r0, r1, [sp]
   1ca4e:	465a      	mov	r2, fp
   1ca50:	4621      	mov	r1, r4
   1ca52:	4650      	mov	r0, sl
   1ca54:	f7fc fbd4 	bl	19200 <z_pend_curr>
	__asm__ volatile(
   1ca58:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ca5c:	f3ef 8411 	mrs	r4, BASEPRI
   1ca60:	f383 8811 	msr	BASEPRI, r3
   1ca64:	f3bf 8f6f 	isb	sy
   1ca68:	e7d6      	b.n	1ca18 <k_heap_aligned_alloc+0x30>

0001ca6a <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   1ca6a:	b538      	push	{r3, r4, r5, lr}
   1ca6c:	4604      	mov	r4, r0
   1ca6e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ca72:	f3ef 8511 	mrs	r5, BASEPRI
   1ca76:	f383 8811 	msr	BASEPRI, r3
   1ca7a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   1ca7e:	f7fd fb79 	bl	1a174 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   1ca82:	f104 000c 	add.w	r0, r4, #12
   1ca86:	f000 fb14 	bl	1d0b2 <z_unpend_all>
   1ca8a:	b130      	cbz	r0, 1ca9a <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   1ca8c:	4629      	mov	r1, r5
   1ca8e:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   1ca92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   1ca96:	f7fc bb2f 	b.w	190f8 <z_reschedule>
	__asm__ volatile(
   1ca9a:	f385 8811 	msr	BASEPRI, r5
   1ca9e:	f3bf 8f6f 	isb	sy
}
   1caa2:	bd38      	pop	{r3, r4, r5, pc}

0001caa4 <k_mem_slab_init>:
{
   1caa4:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   1caa6:	2400      	movs	r4, #0
   1caa8:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1caaa:	ea41 0402 	orr.w	r4, r1, r2
   1caae:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   1cab2:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   1cab6:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1cab8:	d10c      	bne.n	1cad4 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   1caba:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1cabc:	42a3      	cmp	r3, r4
   1cabe:	d103      	bne.n	1cac8 <k_mem_slab_init+0x24>
   1cac0:	e9c0 0000 	strd	r0, r0, [r0]
}
   1cac4:	2000      	movs	r0, #0
}
   1cac6:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   1cac8:	6945      	ldr	r5, [r0, #20]
   1caca:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   1cacc:	3401      	adds	r4, #1
		slab->free_list = p;
   1cace:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   1cad0:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   1cad2:	e7f3      	b.n	1cabc <k_mem_slab_init+0x18>
		return -EINVAL;
   1cad4:	f06f 0015 	mvn.w	r0, #21
	return rc;
   1cad8:	e7f5      	b.n	1cac6 <k_mem_slab_init+0x22>

0001cada <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1cada:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cadc:	4604      	mov	r4, r0
   1cade:	460d      	mov	r5, r1
	__asm__ volatile(
   1cae0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cae4:	f3ef 8611 	mrs	r6, BASEPRI
   1cae8:	f383 8811 	msr	BASEPRI, r3
   1caec:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   1caf0:	6947      	ldr	r7, [r0, #20]
   1caf2:	b977      	cbnz	r7, 1cb12 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1caf4:	f000 fac5 	bl	1d082 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   1caf8:	b158      	cbz	r0, 1cb12 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1cafa:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1cafc:	6142      	str	r2, [r0, #20]
   1cafe:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   1cb00:	f000 fa78 	bl	1cff4 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   1cb04:	4631      	mov	r1, r6
   1cb06:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   1cb0a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   1cb0e:	f7fc baf3 	b.w	190f8 <z_reschedule>
	**(char ***) mem = slab->free_list;
   1cb12:	682b      	ldr	r3, [r5, #0]
   1cb14:	6962      	ldr	r2, [r4, #20]
   1cb16:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   1cb18:	682b      	ldr	r3, [r5, #0]
   1cb1a:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   1cb1c:	69a3      	ldr	r3, [r4, #24]
   1cb1e:	3b01      	subs	r3, #1
   1cb20:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1cb22:	f386 8811 	msr	BASEPRI, r6
   1cb26:	f3bf 8f6f 	isb	sy
}
   1cb2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001cb2c <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1cb2c:	f3ef 8005 	mrs	r0, IPSR
}
   1cb30:	3800      	subs	r0, #0
   1cb32:	bf18      	it	ne
   1cb34:	2001      	movne	r0, #1
   1cb36:	4770      	bx	lr

0001cb38 <z_impl_k_thread_name_set>:
}
   1cb38:	f06f 0057 	mvn.w	r0, #87	; 0x57
   1cb3c:	4770      	bx	lr

0001cb3e <k_thread_name_get>:
}
   1cb3e:	2000      	movs	r0, #0
   1cb40:	4770      	bx	lr

0001cb42 <z_impl_k_thread_start>:
	z_sched_start(thread);
   1cb42:	f7fc bc6f 	b.w	19424 <z_sched_start>

0001cb46 <z_pm_save_idle_exit>:
{
   1cb46:	b508      	push	{r3, lr}
	pm_system_resume();
   1cb48:	f7f3 ffa6 	bl	10a98 <pm_system_resume>
}
   1cb4c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   1cb50:	f7fe b8af 	b.w	1acb2 <sys_clock_idle_exit>

0001cb54 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   1cb54:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1cb58:	428b      	cmp	r3, r1
   1cb5a:	d001      	beq.n	1cb60 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   1cb5c:	f7fc bc80 	b.w	19460 <z_set_prio>
}
   1cb60:	2000      	movs	r0, #0
   1cb62:	4770      	bx	lr

0001cb64 <queue_insert>:
{
   1cb64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1cb68:	4699      	mov	r9, r3
   1cb6a:	4604      	mov	r4, r0
   1cb6c:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1cb70:	460d      	mov	r5, r1
   1cb72:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1cb74:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   1cb78:	f04f 0240 	mov.w	r2, #64	; 0x40
   1cb7c:	f3ef 8711 	mrs	r7, BASEPRI
   1cb80:	f382 8811 	msr	BASEPRI, r2
   1cb84:	f3bf 8f6f 	isb	sy
	if (is_append) {
   1cb88:	b103      	cbz	r3, 1cb8c <queue_insert+0x28>
	return list->tail;
   1cb8a:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   1cb8c:	4630      	mov	r0, r6
   1cb8e:	f000 fa78 	bl	1d082 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   1cb92:	b158      	cbz	r0, 1cbac <queue_insert+0x48>
   1cb94:	2400      	movs	r4, #0
   1cb96:	67c4      	str	r4, [r0, #124]	; 0x7c
   1cb98:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   1cb9c:	f000 fa2a 	bl	1cff4 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   1cba0:	4630      	mov	r0, r6
   1cba2:	4639      	mov	r1, r7
   1cba4:	f7fc faa8 	bl	190f8 <z_reschedule>
	return 0;
   1cba8:	2000      	movs	r0, #0
   1cbaa:	e00c      	b.n	1cbc6 <queue_insert+0x62>
	if (alloc) {
   1cbac:	f1b9 0f00 	cmp.w	r9, #0
   1cbb0:	d01b      	beq.n	1cbea <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   1cbb2:	2108      	movs	r1, #8
   1cbb4:	f7fd f816 	bl	19be4 <z_thread_aligned_alloc>
		if (anode == NULL) {
   1cbb8:	b938      	cbnz	r0, 1cbca <queue_insert+0x66>
	__asm__ volatile(
   1cbba:	f387 8811 	msr	BASEPRI, r7
   1cbbe:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   1cbc2:	f06f 000b 	mvn.w	r0, #11
}
   1cbc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   1cbca:	2301      	movs	r3, #1
		anode->data = data;
   1cbcc:	f8c0 8004 	str.w	r8, [r0, #4]
   1cbd0:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1cbd2:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1cbd4:	f003 0203 	and.w	r2, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
   1cbd8:	b95d      	cbnz	r5, 1cbf2 <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1cbda:	6823      	ldr	r3, [r4, #0]
   1cbdc:	4313      	orrs	r3, r2
   1cbde:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1cbe0:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   1cbe2:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1cbe4:	b973      	cbnz	r3, 1cc04 <queue_insert+0xa0>
	list->tail = node;
   1cbe6:	6060      	str	r0, [r4, #4]
}
   1cbe8:	e00c      	b.n	1cc04 <queue_insert+0xa0>
	node->next_and_flags = flags;
   1cbea:	f8c8 9000 	str.w	r9, [r8]
}
   1cbee:	4640      	mov	r0, r8
   1cbf0:	e7ef      	b.n	1cbd2 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1cbf2:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1cbf4:	f033 0303 	bics.w	r3, r3, #3
   1cbf8:	d110      	bne.n	1cc1c <queue_insert+0xb8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1cbfa:	6002      	str	r2, [r0, #0]
	return list->tail;
   1cbfc:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   1cbfe:	b93a      	cbnz	r2, 1cc10 <queue_insert+0xac>
	list->head = node;
   1cc00:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1cc04:	2104      	movs	r1, #4
   1cc06:	f104 0010 	add.w	r0, r4, #16
   1cc0a:	f000 fc5c 	bl	1d4c6 <z_handle_obj_poll_events>
   1cc0e:	e7c7      	b.n	1cba0 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1cc10:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1cc12:	f003 0303 	and.w	r3, r3, #3
   1cc16:	4303      	orrs	r3, r0
   1cc18:	6013      	str	r3, [r2, #0]
   1cc1a:	e7e4      	b.n	1cbe6 <queue_insert+0x82>
   1cc1c:	4313      	orrs	r3, r2
   1cc1e:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1cc20:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1cc22:	f003 0303 	and.w	r3, r3, #3
   1cc26:	4303      	orrs	r3, r0
   1cc28:	602b      	str	r3, [r5, #0]
}
   1cc2a:	e7eb      	b.n	1cc04 <queue_insert+0xa0>

0001cc2c <z_queue_node_peek>:
{
   1cc2c:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   1cc2e:	4604      	mov	r4, r0
   1cc30:	b130      	cbz	r0, 1cc40 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1cc32:	6802      	ldr	r2, [r0, #0]
   1cc34:	0793      	lsls	r3, r2, #30
   1cc36:	d003      	beq.n	1cc40 <z_queue_node_peek+0x14>
		ret = anode->data;
   1cc38:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   1cc3a:	b109      	cbz	r1, 1cc40 <z_queue_node_peek+0x14>
			k_free(anode);
   1cc3c:	f000 fc64 	bl	1d508 <k_free>
}
   1cc40:	4620      	mov	r0, r4
   1cc42:	bd10      	pop	{r4, pc}

0001cc44 <z_impl_k_queue_init>:
	list->head = NULL;
   1cc44:	2300      	movs	r3, #0
	list->tail = NULL;
   1cc46:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&w->waitq);
   1cc4a:	f100 0308 	add.w	r3, r0, #8
   1cc4e:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   1cc52:	f100 0310 	add.w	r3, r0, #16
   1cc56:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   1cc5a:	4770      	bx	lr

0001cc5c <k_queue_append>:
{
   1cc5c:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   1cc5e:	2301      	movs	r3, #1
   1cc60:	9300      	str	r3, [sp, #0]
   1cc62:	2300      	movs	r3, #0
{
   1cc64:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   1cc66:	4619      	mov	r1, r3
   1cc68:	f7ff ff7c 	bl	1cb64 <queue_insert>
}
   1cc6c:	b003      	add	sp, #12
   1cc6e:	f85d fb04 	ldr.w	pc, [sp], #4

0001cc72 <k_queue_prepend>:
{
   1cc72:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   1cc74:	2300      	movs	r3, #0
{
   1cc76:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   1cc78:	9300      	str	r3, [sp, #0]
   1cc7a:	4619      	mov	r1, r3
   1cc7c:	f7ff ff72 	bl	1cb64 <queue_insert>
}
   1cc80:	b003      	add	sp, #12
   1cc82:	f85d fb04 	ldr.w	pc, [sp], #4

0001cc86 <k_queue_append_list>:
{
   1cc86:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1cc8a:	4605      	mov	r5, r0
   1cc8c:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   1cc8e:	460c      	mov	r4, r1
   1cc90:	b391      	cbz	r1, 1ccf8 <k_queue_append_list+0x72>
   1cc92:	b38a      	cbz	r2, 1ccf8 <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1cc94:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   1cc98:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cc9c:	f3ef 8811 	mrs	r8, BASEPRI
   1cca0:	f383 8811 	msr	BASEPRI, r3
   1cca4:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   1cca8:	4638      	mov	r0, r7
   1ccaa:	f000 f9ea 	bl	1d082 <z_unpend_first_thread>
   1ccae:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   1ccb2:	b920      	cbnz	r0, 1ccbe <k_queue_append_list+0x38>
	return list->tail;
   1ccb4:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   1ccb6:	b9ca      	cbnz	r2, 1ccec <k_queue_append_list+0x66>
	list->head = node;
   1ccb8:	602c      	str	r4, [r5, #0]
	list->tail = node;
   1ccba:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   1ccbc:	e00a      	b.n	1ccd4 <k_queue_append_list+0x4e>
	thread->base.swap_data = data;
   1ccbe:	6144      	str	r4, [r0, #20]
   1ccc0:	f8c0 907c 	str.w	r9, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   1ccc4:	f000 f996 	bl	1cff4 <z_ready_thread>
		head = *(void **)head;
   1ccc8:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   1ccca:	4638      	mov	r0, r7
   1cccc:	f000 f9d9 	bl	1d082 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   1ccd0:	2c00      	cmp	r4, #0
   1ccd2:	d1ee      	bne.n	1ccb2 <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   1ccd4:	2104      	movs	r1, #4
   1ccd6:	f105 0010 	add.w	r0, r5, #16
   1ccda:	f000 fbf4 	bl	1d4c6 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   1ccde:	4638      	mov	r0, r7
   1cce0:	4641      	mov	r1, r8
   1cce2:	f7fc fa09 	bl	190f8 <z_reschedule>
	return 0;
   1cce6:	2000      	movs	r0, #0
}
   1cce8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1ccec:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1ccee:	f003 0303 	and.w	r3, r3, #3
   1ccf2:	431c      	orrs	r4, r3
   1ccf4:	6014      	str	r4, [r2, #0]
}
   1ccf6:	e7e0      	b.n	1ccba <k_queue_append_list+0x34>
		return -EINVAL;
   1ccf8:	f06f 0015 	mvn.w	r0, #21
   1ccfc:	e7f4      	b.n	1cce8 <k_queue_append_list+0x62>

0001ccfe <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   1ccfe:	b15a      	cbz	r2, 1cd18 <z_impl_k_sem_init+0x1a>
   1cd00:	428a      	cmp	r2, r1
   1cd02:	d309      	bcc.n	1cd18 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   1cd04:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   1cd08:	e9c0 1202 	strd	r1, r2, [r0, #8]
   1cd0c:	e9c0 0000 	strd	r0, r0, [r0]
   1cd10:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   1cd14:	2000      	movs	r0, #0
   1cd16:	4770      	bx	lr
		return -EINVAL;
   1cd18:	f06f 0015 	mvn.w	r0, #21
}
   1cd1c:	4770      	bx	lr

0001cd1e <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   1cd1e:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   1cd20:	2301      	movs	r3, #1
   1cd22:	408b      	lsls	r3, r1
   1cd24:	ea22 0303 	bic.w	r3, r2, r3
   1cd28:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   1cd2a:	fa22 f001 	lsr.w	r0, r2, r1
}
   1cd2e:	f000 0001 	and.w	r0, r0, #1
   1cd32:	4770      	bx	lr

0001cd34 <unschedule_locked>:
{
   1cd34:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   1cd36:	2103      	movs	r1, #3
{
   1cd38:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   1cd3a:	300c      	adds	r0, #12
   1cd3c:	f7ff ffef 	bl	1cd1e <flag_test_and_clear>
   1cd40:	4604      	mov	r4, r0
   1cd42:	b118      	cbz	r0, 1cd4c <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   1cd44:	f105 0010 	add.w	r0, r5, #16
   1cd48:	f000 f9e0 	bl	1d10c <z_abort_timeout>
}
   1cd4c:	4620      	mov	r0, r4
   1cd4e:	bd38      	pop	{r3, r4, r5, pc}

0001cd50 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   1cd50:	b120      	cbz	r0, 1cd5c <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   1cd52:	2200      	movs	r2, #0
   1cd54:	4611      	mov	r1, r2
   1cd56:	3088      	adds	r0, #136	; 0x88
   1cd58:	f000 b9bb 	b.w	1d0d2 <z_sched_wake>
}
   1cd5c:	4770      	bx	lr

0001cd5e <cancel_async_locked>:
	return (*flagp & BIT(bit)) != 0U;
   1cd5e:	68c3      	ldr	r3, [r0, #12]
{
   1cd60:	b570      	push	{r4, r5, r6, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1cd62:	f3c3 0540 	ubfx	r5, r3, #1, #1
   1cd66:	079b      	lsls	r3, r3, #30
{
   1cd68:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1cd6a:	d416      	bmi.n	1cd9a <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   1cd6c:	6886      	ldr	r6, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   1cd6e:	2102      	movs	r1, #2
   1cd70:	300c      	adds	r0, #12
   1cd72:	f7ff ffd4 	bl	1cd1e <flag_test_and_clear>
   1cd76:	b180      	cbz	r0, 1cd9a <cancel_async_locked+0x3c>
	return list->head;
   1cd78:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1cd7c:	b16a      	cbz	r2, 1cd9a <cancel_async_locked+0x3c>
   1cd7e:	4294      	cmp	r4, r2
   1cd80:	d11b      	bne.n	1cdba <cancel_async_locked+0x5c>
	return node->next;
   1cd82:	6822      	ldr	r2, [r4, #0]
	return list->tail;
   1cd84:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
Z_GENLIST_REMOVE(slist, snode)
   1cd88:	b98d      	cbnz	r5, 1cdae <cancel_async_locked+0x50>
   1cd8a:	428c      	cmp	r4, r1
	list->head = node;
   1cd8c:	f8c6 2080 	str.w	r2, [r6, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   1cd90:	d101      	bne.n	1cd96 <cancel_async_locked+0x38>
	list->tail = node;
   1cd92:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
	parent->next = child;
   1cd96:	2300      	movs	r3, #0
   1cd98:	6023      	str	r3, [r4, #0]
	return *flagp;
   1cd9a:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   1cd9c:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   1cda0:	bf1e      	ittt	ne
   1cda2:	f043 0302 	orrne.w	r3, r3, #2
   1cda6:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   1cda8:	f003 000f 	andne.w	r0, r3, #15
}
   1cdac:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_REMOVE(slist, snode)
   1cdae:	428c      	cmp	r4, r1
	parent->next = child;
   1cdb0:	602a      	str	r2, [r5, #0]
	list->tail = node;
   1cdb2:	bf08      	it	eq
   1cdb4:	f8c6 5084 	streq.w	r5, [r6, #132]	; 0x84
}
   1cdb8:	e7ed      	b.n	1cd96 <cancel_async_locked+0x38>
	return node->next;
   1cdba:	4615      	mov	r5, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1cdbc:	6812      	ldr	r2, [r2, #0]
   1cdbe:	e7dd      	b.n	1cd7c <cancel_async_locked+0x1e>

0001cdc0 <work_timeout>:
{
   1cdc0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1cdc2:	4604      	mov	r4, r0
   1cdc4:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cdc8:	f3ef 8511 	mrs	r5, BASEPRI
   1cdcc:	f383 8811 	msr	BASEPRI, r3
   1cdd0:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   1cdd4:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   1cdd6:	f1a0 0610 	sub.w	r6, r0, #16
   1cdda:	2103      	movs	r1, #3
   1cddc:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   1cdde:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   1cde0:	f7ff ff9d 	bl	1cd1e <flag_test_and_clear>
   1cde4:	b128      	cbz	r0, 1cdf2 <work_timeout+0x32>
		queue = dw->queue;
   1cde6:	69a3      	ldr	r3, [r4, #24]
   1cde8:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   1cdea:	a901      	add	r1, sp, #4
   1cdec:	4630      	mov	r0, r6
   1cdee:	f7fc f84b 	bl	18e88 <submit_to_queue_locked>
	__asm__ volatile(
   1cdf2:	f385 8811 	msr	BASEPRI, r5
   1cdf6:	f3bf 8f6f 	isb	sy
}
   1cdfa:	b002      	add	sp, #8
   1cdfc:	bd70      	pop	{r4, r5, r6, pc}

0001cdfe <k_work_init>:
{
   1cdfe:	b538      	push	{r3, r4, r5, lr}
   1ce00:	4604      	mov	r4, r0
   1ce02:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1ce04:	2210      	movs	r2, #16
   1ce06:	2100      	movs	r1, #0
   1ce08:	f7fe f9e1 	bl	1b1ce <memset>
   1ce0c:	6065      	str	r5, [r4, #4]
}
   1ce0e:	bd38      	pop	{r3, r4, r5, pc}

0001ce10 <k_work_submit_to_queue>:
{
   1ce10:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1ce12:	9001      	str	r0, [sp, #4]
   1ce14:	4608      	mov	r0, r1
	__asm__ volatile(
   1ce16:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ce1a:	f3ef 8511 	mrs	r5, BASEPRI
   1ce1e:	f383 8811 	msr	BASEPRI, r3
   1ce22:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   1ce26:	a901      	add	r1, sp, #4
   1ce28:	f7fc f82e 	bl	18e88 <submit_to_queue_locked>
   1ce2c:	4604      	mov	r4, r0
	__asm__ volatile(
   1ce2e:	f385 8811 	msr	BASEPRI, r5
   1ce32:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   1ce36:	2800      	cmp	r0, #0
   1ce38:	dd04      	ble.n	1ce44 <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
   1ce3a:	f7fc fc0d 	bl	19658 <z_impl_k_is_preempt_thread>
   1ce3e:	b108      	cbz	r0, 1ce44 <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
   1ce40:	f7fc fb62 	bl	19508 <z_impl_k_yield>
}
   1ce44:	4620      	mov	r0, r4
   1ce46:	b003      	add	sp, #12
   1ce48:	bd30      	pop	{r4, r5, pc}

0001ce4a <k_work_init_delayable>:
{
   1ce4a:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   1ce4c:	2230      	movs	r2, #48	; 0x30
{
   1ce4e:	4604      	mov	r4, r0
   1ce50:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   1ce52:	2100      	movs	r1, #0
   1ce54:	f7fe f9bb 	bl	1b1ce <memset>
   1ce58:	f44f 7380 	mov.w	r3, #256	; 0x100
   1ce5c:	6065      	str	r5, [r4, #4]
   1ce5e:	60e3      	str	r3, [r4, #12]
}
   1ce60:	bd38      	pop	{r3, r4, r5, pc}

0001ce62 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   1ce62:	b538      	push	{r3, r4, r5, lr}
   1ce64:	4604      	mov	r4, r0
	__asm__ volatile(
   1ce66:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ce6a:	f3ef 8511 	mrs	r5, BASEPRI
   1ce6e:	f383 8811 	msr	BASEPRI, r3
   1ce72:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   1ce76:	f7ff ff5d 	bl	1cd34 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   1ce7a:	4620      	mov	r0, r4
   1ce7c:	f7ff ff6f 	bl	1cd5e <cancel_async_locked>
	__asm__ volatile(
   1ce80:	f385 8811 	msr	BASEPRI, r5
   1ce84:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   1ce88:	bd38      	pop	{r3, r4, r5, pc}

0001ce8a <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   1ce8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ce8c:	4604      	mov	r4, r0
   1ce8e:	460d      	mov	r5, r1
	__asm__ volatile(
   1ce90:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ce94:	f3ef 8711 	mrs	r7, BASEPRI
   1ce98:	f383 8811 	msr	BASEPRI, r3
   1ce9c:	f3bf 8f6f 	isb	sy
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1cea0:	f3bf 8f5b 	dmb	ish
   1cea4:	68c3      	ldr	r3, [r0, #12]
   1cea6:	f3bf 8f5b 	dmb	ish
	return atomic_get(&dwork->work.flags) & K_WORK_MASK;
   1ceaa:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   1ceae:	2b00      	cmp	r3, #0
   1ceb0:	bf14      	ite	ne
   1ceb2:	2601      	movne	r6, #1
   1ceb4:	2600      	moveq	r6, #0
	bool need_wait = false;

	if (pending) {
   1ceb6:	d009      	beq.n	1cecc <k_work_cancel_delayable_sync+0x42>
	(void)unschedule_locked(dwork);
   1ceb8:	f7ff ff3c 	bl	1cd34 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   1cebc:	4620      	mov	r0, r4
   1cebe:	f7ff ff4e 	bl	1cd5e <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   1cec2:	4629      	mov	r1, r5
   1cec4:	4620      	mov	r0, r4
   1cec6:	f7fb ffc1 	bl	18e4c <cancel_sync_locked>
   1ceca:	4603      	mov	r3, r0
	__asm__ volatile(
   1cecc:	f387 8811 	msr	BASEPRI, r7
   1ced0:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   1ced4:	b13b      	cbz	r3, 1cee6 <k_work_cancel_delayable_sync+0x5c>
	return z_impl_k_sem_take(sem, timeout);
   1ced6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ceda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1cede:	f105 0008 	add.w	r0, r5, #8
   1cee2:	f7fb fedb 	bl	18c9c <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   1cee6:	4630      	mov	r0, r6
   1cee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001ceea <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   1ceea:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1ceee:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1cef0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1cef2:	2300      	movs	r3, #0
	node->prev = NULL;
   1cef4:	e9c0 3300 	strd	r3, r3, [r0]
}
   1cef8:	4770      	bx	lr

0001cefa <unpend_thread_no_timeout>:
{
   1cefa:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   1cefc:	f7ff fff5 	bl	1ceea <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1cf00:	7b43      	ldrb	r3, [r0, #13]
   1cf02:	f023 0302 	bic.w	r3, r3, #2
   1cf06:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   1cf08:	2300      	movs	r3, #0
   1cf0a:	6083      	str	r3, [r0, #8]
}
   1cf0c:	bd08      	pop	{r3, pc}

0001cf0e <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   1cf0e:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1cf12:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   1cf16:	4283      	cmp	r3, r0
		return b2 - b1;
   1cf18:	bf14      	ite	ne
   1cf1a:	1ac0      	subne	r0, r0, r3
	return 0;
   1cf1c:	2000      	moveq	r0, #0
}
   1cf1e:	4770      	bx	lr

0001cf20 <z_unpend_thread_no_timeout>:
{
   1cf20:	b508      	push	{r3, lr}
	__asm__ volatile(
   1cf22:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cf26:	f3ef 8111 	mrs	r1, BASEPRI
   1cf2a:	f383 8811 	msr	BASEPRI, r3
   1cf2e:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   1cf32:	f7ff ffe2 	bl	1cefa <unpend_thread_no_timeout>
	__asm__ volatile(
   1cf36:	f381 8811 	msr	BASEPRI, r1
   1cf3a:	f3bf 8f6f 	isb	sy
}
   1cf3e:	bd08      	pop	{r3, pc}

0001cf40 <z_unpend_thread>:
{
   1cf40:	b510      	push	{r4, lr}
	__asm__ volatile(
   1cf42:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cf46:	f3ef 8411 	mrs	r4, BASEPRI
   1cf4a:	f383 8811 	msr	BASEPRI, r3
   1cf4e:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   1cf52:	f7ff ffd2 	bl	1cefa <unpend_thread_no_timeout>
	__asm__ volatile(
   1cf56:	f384 8811 	msr	BASEPRI, r4
   1cf5a:	f3bf 8f6f 	isb	sy
}
   1cf5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1cf62:	3018      	adds	r0, #24
   1cf64:	f000 b8d2 	b.w	1d10c <z_abort_timeout>

0001cf68 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1cf68:	4603      	mov	r3, r0
   1cf6a:	b920      	cbnz	r0, 1cf76 <z_reschedule_irqlock+0xe>
   1cf6c:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   1cf70:	b90a      	cbnz	r2, 1cf76 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   1cf72:	f7f4 b913 	b.w	1119c <arch_swap>
   1cf76:	f383 8811 	msr	BASEPRI, r3
   1cf7a:	f3bf 8f6f 	isb	sy
}
   1cf7e:	4770      	bx	lr

0001cf80 <z_reschedule_unlocked>:
	__asm__ volatile(
   1cf80:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cf84:	f3ef 8011 	mrs	r0, BASEPRI
   1cf88:	f383 8811 	msr	BASEPRI, r3
   1cf8c:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1cf90:	f7ff bfea 	b.w	1cf68 <z_reschedule_irqlock>

0001cf94 <z_priq_dumb_best>:
{
   1cf94:	4603      	mov	r3, r0
	return list->head == list;
   1cf96:	6800      	ldr	r0, [r0, #0]
}
   1cf98:	4283      	cmp	r3, r0
   1cf9a:	bf08      	it	eq
   1cf9c:	2000      	moveq	r0, #0
   1cf9e:	4770      	bx	lr

0001cfa0 <add_to_waitq_locked>:
{
   1cfa0:	b538      	push	{r3, r4, r5, lr}
   1cfa2:	4604      	mov	r4, r0
   1cfa4:	460d      	mov	r5, r1
	unready_thread(thread);
   1cfa6:	f7fc f8ed 	bl	19184 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   1cfaa:	7b63      	ldrb	r3, [r4, #13]
   1cfac:	f043 0302 	orr.w	r3, r3, #2
   1cfb0:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   1cfb2:	b195      	cbz	r5, 1cfda <add_to_waitq_locked+0x3a>
   1cfb4:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   1cfb6:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1cfb8:	429d      	cmp	r5, r3
   1cfba:	d015      	beq.n	1cfe8 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1cfbc:	b1a3      	cbz	r3, 1cfe8 <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
   1cfbe:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   1cfc2:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   1cfc6:	4291      	cmp	r1, r2
   1cfc8:	d008      	beq.n	1cfdc <add_to_waitq_locked+0x3c>
		return b2 - b1;
   1cfca:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   1cfcc:	2a00      	cmp	r2, #0
   1cfce:	dd05      	ble.n	1cfdc <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
   1cfd0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1cfd2:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1cfd6:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1cfd8:	605c      	str	r4, [r3, #4]
}
   1cfda:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   1cfdc:	686a      	ldr	r2, [r5, #4]
   1cfde:	4293      	cmp	r3, r2
   1cfe0:	d002      	beq.n	1cfe8 <add_to_waitq_locked+0x48>
   1cfe2:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1cfe4:	2b00      	cmp	r3, #0
   1cfe6:	d1ec      	bne.n	1cfc2 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
   1cfe8:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   1cfea:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   1cfee:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1cff0:	606c      	str	r4, [r5, #4]
}
   1cff2:	e7f2      	b.n	1cfda <add_to_waitq_locked+0x3a>

0001cff4 <z_ready_thread>:
{
   1cff4:	b510      	push	{r4, lr}
   1cff6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cffa:	f3ef 8411 	mrs	r4, BASEPRI
   1cffe:	f383 8811 	msr	BASEPRI, r3
   1d002:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   1d006:	f7fc f9d7 	bl	193b8 <ready_thread>
	__asm__ volatile(
   1d00a:	f384 8811 	msr	BASEPRI, r4
   1d00e:	f3bf 8f6f 	isb	sy
}
   1d012:	bd10      	pop	{r4, pc}

0001d014 <z_thread_timeout>:
{
   1d014:	b510      	push	{r4, lr}
   1d016:	4601      	mov	r1, r0
	__asm__ volatile(
   1d018:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d01c:	f3ef 8411 	mrs	r4, BASEPRI
   1d020:	f383 8811 	msr	BASEPRI, r3
   1d024:	f3bf 8f6f 	isb	sy
		if (!killed) {
   1d028:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   1d02c:	f013 0f28 	tst.w	r3, #40	; 0x28
   1d030:	d10d      	bne.n	1d04e <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   1d032:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   1d036:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   1d038:	b10b      	cbz	r3, 1d03e <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   1d03a:	f7ff ff5e 	bl	1cefa <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1d03e:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   1d042:	f023 0314 	bic.w	r3, r3, #20
   1d046:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   1d04a:	f7fc f9b5 	bl	193b8 <ready_thread>
	__asm__ volatile(
   1d04e:	f384 8811 	msr	BASEPRI, r4
   1d052:	f3bf 8f6f 	isb	sy
}
   1d056:	bd10      	pop	{r4, pc}

0001d058 <z_unpend1_no_timeout>:
{
   1d058:	b510      	push	{r4, lr}
	__asm__ volatile(
   1d05a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d05e:	f3ef 8411 	mrs	r4, BASEPRI
   1d062:	f383 8811 	msr	BASEPRI, r3
   1d066:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   1d06a:	f7ff ff93 	bl	1cf94 <z_priq_dumb_best>
		if (thread != NULL) {
   1d06e:	4601      	mov	r1, r0
   1d070:	b108      	cbz	r0, 1d076 <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
   1d072:	f7ff ff42 	bl	1cefa <unpend_thread_no_timeout>
	__asm__ volatile(
   1d076:	f384 8811 	msr	BASEPRI, r4
   1d07a:	f3bf 8f6f 	isb	sy
}
   1d07e:	4608      	mov	r0, r1
   1d080:	bd10      	pop	{r4, pc}

0001d082 <z_unpend_first_thread>:
{
   1d082:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1d084:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d088:	f3ef 8511 	mrs	r5, BASEPRI
   1d08c:	f383 8811 	msr	BASEPRI, r3
   1d090:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   1d094:	f7ff ff7e 	bl	1cf94 <z_priq_dumb_best>
		if (thread != NULL) {
   1d098:	4604      	mov	r4, r0
   1d09a:	b120      	cbz	r0, 1d0a6 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   1d09c:	f7ff ff2d 	bl	1cefa <unpend_thread_no_timeout>
   1d0a0:	3018      	adds	r0, #24
   1d0a2:	f000 f833 	bl	1d10c <z_abort_timeout>
	__asm__ volatile(
   1d0a6:	f385 8811 	msr	BASEPRI, r5
   1d0aa:	f3bf 8f6f 	isb	sy
}
   1d0ae:	4620      	mov	r0, r4
   1d0b0:	bd38      	pop	{r3, r4, r5, pc}

0001d0b2 <z_unpend_all>:
{
   1d0b2:	b538      	push	{r3, r4, r5, lr}
   1d0b4:	4605      	mov	r5, r0
	int need_sched = 0;
   1d0b6:	2000      	movs	r0, #0
	return list->head == list;
   1d0b8:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d0ba:	42a5      	cmp	r5, r4
   1d0bc:	d000      	beq.n	1d0c0 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1d0be:	b904      	cbnz	r4, 1d0c2 <z_unpend_all+0x10>
}
   1d0c0:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   1d0c2:	4620      	mov	r0, r4
   1d0c4:	f7ff ff3c 	bl	1cf40 <z_unpend_thread>
		z_ready_thread(thread);
   1d0c8:	4620      	mov	r0, r4
   1d0ca:	f7ff ff93 	bl	1cff4 <z_ready_thread>
		need_sched = 1;
   1d0ce:	2001      	movs	r0, #1
   1d0d0:	e7f2      	b.n	1d0b8 <z_unpend_all+0x6>

0001d0d2 <z_sched_wake>:
{
   1d0d2:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1d0d4:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d0d8:	f3ef 8511 	mrs	r5, BASEPRI
   1d0dc:	f383 8811 	msr	BASEPRI, r3
   1d0e0:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   1d0e4:	f7ff ff56 	bl	1cf94 <z_priq_dumb_best>
		if (thread != NULL) {
   1d0e8:	4604      	mov	r4, r0
   1d0ea:	b150      	cbz	r0, 1d102 <z_sched_wake+0x30>
   1d0ec:	67c1      	str	r1, [r0, #124]	; 0x7c
   1d0ee:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
   1d0f0:	f7ff ff03 	bl	1cefa <unpend_thread_no_timeout>
   1d0f4:	3018      	adds	r0, #24
   1d0f6:	f000 f809 	bl	1d10c <z_abort_timeout>
			ready_thread(thread);
   1d0fa:	4620      	mov	r0, r4
   1d0fc:	f7fc f95c 	bl	193b8 <ready_thread>
			ret = true;
   1d100:	2001      	movs	r0, #1
	__asm__ volatile(
   1d102:	f385 8811 	msr	BASEPRI, r5
   1d106:	f3bf 8f6f 	isb	sy
}
   1d10a:	bd38      	pop	{r3, r4, r5, pc}

0001d10c <z_abort_timeout>:
{
   1d10c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1d10e:	f04f 0240 	mov.w	r2, #64	; 0x40
   1d112:	f3ef 8411 	mrs	r4, BASEPRI
   1d116:	f382 8811 	msr	BASEPRI, r2
   1d11a:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   1d11e:	6803      	ldr	r3, [r0, #0]
   1d120:	b13b      	cbz	r3, 1d132 <z_abort_timeout+0x26>
			remove_timeout(to);
   1d122:	f7fc fb59 	bl	197d8 <remove_timeout>
			ret = 0;
   1d126:	2000      	movs	r0, #0
	__asm__ volatile(
   1d128:	f384 8811 	msr	BASEPRI, r4
   1d12c:	f3bf 8f6f 	isb	sy
}
   1d130:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   1d132:	f06f 0015 	mvn.w	r0, #21
   1d136:	e7f7      	b.n	1d128 <z_abort_timeout+0x1c>

0001d138 <z_get_next_timeout_expiry>:
{
   1d138:	b510      	push	{r4, lr}
	__asm__ volatile(
   1d13a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d13e:	f3ef 8411 	mrs	r4, BASEPRI
   1d142:	f383 8811 	msr	BASEPRI, r3
   1d146:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   1d14a:	f7fc fb1d 	bl	19788 <next_timeout>
	__asm__ volatile(
   1d14e:	f384 8811 	msr	BASEPRI, r4
   1d152:	f3bf 8f6f 	isb	sy
}
   1d156:	bd10      	pop	{r4, pc}

0001d158 <z_set_timeout_expiry>:
{
   1d158:	b570      	push	{r4, r5, r6, lr}
   1d15a:	4604      	mov	r4, r0
   1d15c:	460d      	mov	r5, r1
	__asm__ volatile(
   1d15e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d162:	f3ef 8611 	mrs	r6, BASEPRI
   1d166:	f383 8811 	msr	BASEPRI, r3
   1d16a:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   1d16e:	f7fc fb0b 	bl	19788 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   1d172:	2801      	cmp	r0, #1
   1d174:	dd05      	ble.n	1d182 <z_set_timeout_expiry+0x2a>
   1d176:	42a0      	cmp	r0, r4
   1d178:	db03      	blt.n	1d182 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   1d17a:	4629      	mov	r1, r5
   1d17c:	4620      	mov	r0, r4
   1d17e:	f7f3 ff55 	bl	1102c <sys_clock_set_timeout>
	__asm__ volatile(
   1d182:	f386 8811 	msr	BASEPRI, r6
   1d186:	f3bf 8f6f 	isb	sy
}
   1d18a:	bd70      	pop	{r4, r5, r6, pc}

0001d18c <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   1d18c:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   1d18e:	f7fc fc13 	bl	199b8 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   1d192:	bd08      	pop	{r3, pc}

0001d194 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   1d194:	b108      	cbz	r0, 1d19a <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   1d196:	f7f4 bd67 	b.w	11c68 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   1d19a:	4770      	bx	lr

0001d19c <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1d19c:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   1d1a0:	bf08      	it	eq
   1d1a2:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   1d1a6:	b538      	push	{r3, r4, r5, lr}
   1d1a8:	4605      	mov	r5, r0
   1d1aa:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1d1ac:	d01d      	beq.n	1d1ea <sys_clock_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1d1ae:	ea51 0300 	orrs.w	r3, r1, r0
   1d1b2:	d103      	bne.n	1d1bc <sys_clock_timeout_end_calc+0x20>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   1d1b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   1d1b8:	f7fc bbfe 	b.w	199b8 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   1d1bc:	f06f 0301 	mvn.w	r3, #1
   1d1c0:	1a18      	subs	r0, r3, r0
   1d1c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d1c6:	eb63 0101 	sbc.w	r1, r3, r1
   1d1ca:	2900      	cmp	r1, #0
   1d1cc:	da0c      	bge.n	1d1e8 <sys_clock_timeout_end_calc+0x4c>
		return sys_clock_tick_get() + MAX(1, dt);
   1d1ce:	f7fc fbf3 	bl	199b8 <sys_clock_tick_get>
   1d1d2:	2d01      	cmp	r5, #1
   1d1d4:	4622      	mov	r2, r4
   1d1d6:	f174 0400 	sbcs.w	r4, r4, #0
   1d1da:	462b      	mov	r3, r5
   1d1dc:	bfbc      	itt	lt
   1d1de:	2301      	movlt	r3, #1
   1d1e0:	2200      	movlt	r2, #0
   1d1e2:	1818      	adds	r0, r3, r0
   1d1e4:	eb41 0102 	adc.w	r1, r1, r2
}
   1d1e8:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   1d1ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d1ee:	4601      	mov	r1, r0
   1d1f0:	e7fa      	b.n	1d1e8 <sys_clock_timeout_end_calc+0x4c>

0001d1f2 <k_timer_init>:
	timer->status = 0U;
   1d1f2:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   1d1f4:	e9c0 1208 	strd	r1, r2, [r0, #32]
   1d1f8:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   1d1fc:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   1d200:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   1d204:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   1d206:	6343      	str	r3, [r0, #52]	; 0x34
}
   1d208:	4770      	bx	lr

0001d20a <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   1d20a:	b510      	push	{r4, lr}
   1d20c:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   1d20e:	f7ff ff7d 	bl	1d10c <z_abort_timeout>

	if (inactive) {
   1d212:	b9b0      	cbnz	r0, 1d242 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   1d214:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d216:	b10b      	cbz	r3, 1d21c <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   1d218:	4620      	mov	r0, r4
   1d21a:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   1d21c:	f104 0018 	add.w	r0, r4, #24
   1d220:	f7ff ff1a 	bl	1d058 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   1d224:	b168      	cbz	r0, 1d242 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   1d226:	f7ff fee5 	bl	1cff4 <z_ready_thread>
	__asm__ volatile(
   1d22a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d22e:	f3ef 8011 	mrs	r0, BASEPRI
   1d232:	f383 8811 	msr	BASEPRI, r3
   1d236:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   1d23a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   1d23e:	f7ff be93 	b.w	1cf68 <z_reschedule_irqlock>
   1d242:	bd10      	pop	{r4, pc}

0001d244 <add_event>:
{
   1d244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d246:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1d248:	e9d0 2300 	ldrd	r2, r3, [r0]
   1d24c:	4290      	cmp	r0, r2
   1d24e:	4604      	mov	r4, r0
   1d250:	460d      	mov	r5, r1
   1d252:	d105      	bne.n	1d260 <add_event+0x1c>
	sys_dnode_t *const tail = list->tail;
   1d254:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   1d256:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   1d25a:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1d25c:	6065      	str	r5, [r4, #4]
}
   1d25e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   1d260:	2b00      	cmp	r3, #0
   1d262:	d0f7      	beq.n	1d254 <add_event+0x10>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1d264:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1d266:	b100      	cbz	r0, 1d26a <add_event+0x26>
   1d268:	3860      	subs	r0, #96	; 0x60
   1d26a:	b107      	cbz	r7, 1d26e <add_event+0x2a>
   1d26c:	3f60      	subs	r7, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1d26e:	4639      	mov	r1, r7
   1d270:	f7ff fe4d 	bl	1cf0e <z_sched_prio_cmp>
	if ((pending == NULL) ||
   1d274:	2800      	cmp	r0, #0
   1d276:	dced      	bgt.n	1d254 <add_event+0x10>
	return list->head == list;
   1d278:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d27a:	42b4      	cmp	r4, r6
   1d27c:	d0ea      	beq.n	1d254 <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1d27e:	2e00      	cmp	r6, #0
   1d280:	d0e8      	beq.n	1d254 <add_event+0x10>
		if (z_sched_prio_cmp(poller_thread(poller),
   1d282:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1d284:	b101      	cbz	r1, 1d288 <add_event+0x44>
   1d286:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   1d288:	4638      	mov	r0, r7
   1d28a:	f7ff fe40 	bl	1cf0e <z_sched_prio_cmp>
   1d28e:	2800      	cmp	r0, #0
   1d290:	dd05      	ble.n	1d29e <add_event+0x5a>
	sys_dnode_t *const prev = successor->prev;
   1d292:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   1d294:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   1d298:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1d29a:	6075      	str	r5, [r6, #4]
			return;
   1d29c:	e7df      	b.n	1d25e <add_event+0x1a>
	return (node == list->tail) ? NULL : node->next;
   1d29e:	6863      	ldr	r3, [r4, #4]
   1d2a0:	42b3      	cmp	r3, r6
   1d2a2:	d0d7      	beq.n	1d254 <add_event+0x10>
   1d2a4:	6836      	ldr	r6, [r6, #0]
   1d2a6:	e7ea      	b.n	1d27e <add_event+0x3a>

0001d2a8 <register_events>:
{
   1d2a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   1d2ac:	2500      	movs	r5, #0
{
   1d2ae:	468b      	mov	fp, r1
   1d2b0:	4614      	mov	r4, r2
   1d2b2:	461f      	mov	r7, r3
   1d2b4:	4682      	mov	sl, r0
	int events_registered = 0;
   1d2b6:	462e      	mov	r6, r5
	event->poller = NULL;
   1d2b8:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   1d2ba:	455d      	cmp	r5, fp
   1d2bc:	db02      	blt.n	1d2c4 <register_events+0x1c>
}
   1d2be:	4630      	mov	r0, r6
   1d2c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d2c4:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d2c8:	f3ef 8911 	mrs	r9, BASEPRI
   1d2cc:	f383 8811 	msr	BASEPRI, r3
   1d2d0:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   1d2d4:	f89a 300d 	ldrb.w	r3, [sl, #13]
   1d2d8:	f003 031f 	and.w	r3, r3, #31
   1d2dc:	3b01      	subs	r3, #1
   1d2de:	2b07      	cmp	r3, #7
   1d2e0:	d80f      	bhi.n	1d302 <register_events+0x5a>
   1d2e2:	e8df f003 	tbb	[pc, r3]
   1d2e6:	041e      	.short	0x041e
   1d2e8:	0e0e0a0e 	.word	0x0e0e0a0e
   1d2ec:	250e      	.short	0x250e
		if (k_sem_count_get(event->sem) > 0U) {
   1d2ee:	f8da 3010 	ldr.w	r3, [sl, #16]
   1d2f2:	689b      	ldr	r3, [r3, #8]
   1d2f4:	b12b      	cbz	r3, 1d302 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   1d2f6:	2302      	movs	r3, #2
   1d2f8:	e020      	b.n	1d33c <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   1d2fa:	f8da 3010 	ldr.w	r3, [sl, #16]
   1d2fe:	681b      	ldr	r3, [r3, #0]
   1d300:	bb8b      	cbnz	r3, 1d366 <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   1d302:	bb47      	cbnz	r7, 1d356 <register_events+0xae>
   1d304:	7823      	ldrb	r3, [r4, #0]
   1d306:	b333      	cbz	r3, 1d356 <register_events+0xae>
	switch (event->type) {
   1d308:	f89a 300d 	ldrb.w	r3, [sl, #13]
   1d30c:	f003 031f 	and.w	r3, r3, #31
   1d310:	3b01      	subs	r3, #1
   1d312:	2b07      	cmp	r3, #7
   1d314:	d830      	bhi.n	1d378 <register_events+0xd0>
   1d316:	e8df f003 	tbb	[pc, r3]
   1d31a:	2833      	.short	0x2833
   1d31c:	2f2f282f 	.word	0x2f2f282f
   1d320:	382f      	.short	0x382f
		if (event->signal->signaled != 0U) {
   1d322:	f8da 3010 	ldr.w	r3, [sl, #16]
   1d326:	689b      	ldr	r3, [r3, #8]
   1d328:	2b00      	cmp	r3, #0
   1d32a:	d0ea      	beq.n	1d302 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   1d32c:	2301      	movs	r3, #1
   1d32e:	e005      	b.n	1d33c <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   1d330:	f8da 3010 	ldr.w	r3, [sl, #16]
   1d334:	6a1b      	ldr	r3, [r3, #32]
   1d336:	2b00      	cmp	r3, #0
   1d338:	d0e3      	beq.n	1d302 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   1d33a:	2310      	movs	r3, #16
	event->state |= state;
   1d33c:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   1d340:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   1d344:	f3c2 3145 	ubfx	r1, r2, #13, #6
   1d348:	430b      	orrs	r3, r1
   1d34a:	f363 3252 	bfi	r2, r3, #13, #6
   1d34e:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   1d352:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   1d356:	f389 8811 	msr	BASEPRI, r9
   1d35a:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   1d35e:	3501      	adds	r5, #1
   1d360:	f10a 0a14 	add.w	sl, sl, #20
   1d364:	e7a9      	b.n	1d2ba <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   1d366:	2304      	movs	r3, #4
   1d368:	e7e8      	b.n	1d33c <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   1d36a:	f8da 0010 	ldr.w	r0, [sl, #16]
   1d36e:	4622      	mov	r2, r4
   1d370:	4651      	mov	r1, sl
   1d372:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   1d374:	f7ff ff66 	bl	1d244 <add_event>
	event->poller = poller;
   1d378:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   1d37c:	3601      	adds	r6, #1
   1d37e:	e7ea      	b.n	1d356 <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   1d380:	f8da 0010 	ldr.w	r0, [sl, #16]
   1d384:	4622      	mov	r2, r4
   1d386:	4651      	mov	r1, sl
   1d388:	e7f4      	b.n	1d374 <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   1d38a:	f8da 0010 	ldr.w	r0, [sl, #16]
   1d38e:	4622      	mov	r2, r4
   1d390:	4651      	mov	r1, sl
   1d392:	3024      	adds	r0, #36	; 0x24
   1d394:	e7ee      	b.n	1d374 <register_events+0xcc>

0001d396 <signal_poll_event>:
{
   1d396:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   1d39a:	6884      	ldr	r4, [r0, #8]
{
   1d39c:	4605      	mov	r5, r0
   1d39e:	460e      	mov	r6, r1
	if (poller != NULL) {
   1d3a0:	b144      	cbz	r4, 1d3b4 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   1d3a2:	7863      	ldrb	r3, [r4, #1]
   1d3a4:	2b01      	cmp	r3, #1
   1d3a6:	d136      	bne.n	1d416 <signal_poll_event+0x80>
	if (!z_is_thread_pending(thread)) {
   1d3a8:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   1d3ac:	f013 0302 	ands.w	r3, r3, #2
   1d3b0:	d10a      	bne.n	1d3c8 <signal_poll_event+0x32>
		poller->is_polling = false;
   1d3b2:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   1d3b4:	68eb      	ldr	r3, [r5, #12]
   1d3b6:	f3c3 3145 	ubfx	r1, r3, #13, #6
   1d3ba:	430e      	orrs	r6, r1
	event->poller = NULL;
   1d3bc:	2000      	movs	r0, #0
	event->state |= state;
   1d3be:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   1d3c2:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   1d3c4:	60eb      	str	r3, [r5, #12]
	return retcode;
   1d3c6:	e00b      	b.n	1d3e0 <signal_poll_event+0x4a>
	if (z_is_thread_timeout_expired(thread)) {
   1d3c8:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   1d3cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1d3d0:	bf08      	it	eq
   1d3d2:	f112 0f02 	cmneq.w	r2, #2
   1d3d6:	d105      	bne.n	1d3e4 <signal_poll_event+0x4e>
		poller->is_polling = false;
   1d3d8:	2300      	movs	r3, #0
   1d3da:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   1d3dc:	f06f 000a 	mvn.w	r0, #10
}
   1d3e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1d3e4:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   1d3e8:	4640      	mov	r0, r8
   1d3ea:	f7ff fda9 	bl	1cf40 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   1d3ee:	2e08      	cmp	r6, #8
   1d3f0:	bf0c      	ite	eq
   1d3f2:	f06f 0303 	mvneq.w	r3, #3
   1d3f6:	2300      	movne	r3, #0
   1d3f8:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1d3fa:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   1d3fe:	06db      	lsls	r3, r3, #27
   1d400:	d102      	bne.n	1d408 <signal_poll_event+0x72>
	if (!z_is_thread_ready(thread)) {
   1d402:	f854 7c48 	ldr.w	r7, [r4, #-72]
   1d406:	b10f      	cbz	r7, 1d40c <signal_poll_event+0x76>
		poller->is_polling = false;
   1d408:	2300      	movs	r3, #0
   1d40a:	e7d2      	b.n	1d3b2 <signal_poll_event+0x1c>
	z_ready_thread(thread);
   1d40c:	4640      	mov	r0, r8
   1d40e:	f7ff fdf1 	bl	1cff4 <z_ready_thread>
		poller->is_polling = false;
   1d412:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   1d414:	e7ce      	b.n	1d3b4 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   1d416:	2b02      	cmp	r3, #2
   1d418:	d1f6      	bne.n	1d408 <signal_poll_event+0x72>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   1d41a:	7823      	ldrb	r3, [r4, #0]
   1d41c:	2b00      	cmp	r3, #0
   1d41e:	d0c9      	beq.n	1d3b4 <signal_poll_event+0x1e>
   1d420:	f854 7c04 	ldr.w	r7, [r4, #-4]
   1d424:	2f00      	cmp	r7, #0
   1d426:	d0f4      	beq.n	1d412 <signal_poll_event+0x7c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   1d428:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   1d42c:	f1a4 0914 	sub.w	r9, r4, #20
   1d430:	f104 0014 	add.w	r0, r4, #20
   1d434:	f7ff fe6a 	bl	1d10c <z_abort_timeout>
		twork->poll_result = 0;
   1d438:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   1d43c:	4649      	mov	r1, r9
   1d43e:	4638      	mov	r0, r7
   1d440:	f7ff fce6 	bl	1ce10 <k_work_submit_to_queue>
		poller->is_polling = false;
   1d444:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   1d448:	e7b4      	b.n	1d3b4 <signal_poll_event+0x1e>

0001d44a <clear_event_registrations>:
	while (num_events--) {
   1d44a:	2314      	movs	r3, #20
{
   1d44c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d44e:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   1d452:	2400      	movs	r4, #0
   1d454:	2601      	movs	r6, #1
	while (num_events--) {
   1d456:	b901      	cbnz	r1, 1d45a <clear_event_registrations+0x10>
}
   1d458:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   1d45a:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   1d45e:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   1d462:	f003 031f 	and.w	r3, r3, #31
   1d466:	2b08      	cmp	r3, #8
   1d468:	f1a0 0714 	sub.w	r7, r0, #20
   1d46c:	d80d      	bhi.n	1d48a <clear_event_registrations+0x40>
   1d46e:	fa06 f303 	lsl.w	r3, r6, r3
   1d472:	f413 7f8b 	tst.w	r3, #278	; 0x116
   1d476:	d008      	beq.n	1d48a <clear_event_registrations+0x40>
	return node->next != NULL;
   1d478:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   1d47c:	b12b      	cbz	r3, 1d48a <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   1d47e:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   1d482:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   1d484:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   1d486:	e940 4405 	strd	r4, r4, [r0, #-20]
   1d48a:	f382 8811 	msr	BASEPRI, r2
   1d48e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1d492:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d496:	f3ef 8211 	mrs	r2, BASEPRI
   1d49a:	f383 8811 	msr	BASEPRI, r3
   1d49e:	f3bf 8f6f 	isb	sy
   1d4a2:	3901      	subs	r1, #1
   1d4a4:	4638      	mov	r0, r7
   1d4a6:	e7d6      	b.n	1d456 <clear_event_registrations+0xc>

0001d4a8 <k_poll_event_init>:
{
   1d4a8:	b510      	push	{r4, lr}
	event->type = type;
   1d4aa:	04d2      	lsls	r2, r2, #19
   1d4ac:	0209      	lsls	r1, r1, #8
   1d4ae:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
   1d4b2:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
   1d4b6:	430a      	orrs	r2, r1
   1d4b8:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   1d4ba:	2400      	movs	r4, #0
	event->type = type;
   1d4bc:	430a      	orrs	r2, r1
	event->obj = obj;
   1d4be:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   1d4c2:	6084      	str	r4, [r0, #8]
}
   1d4c4:	bd10      	pop	{r4, pc}

0001d4c6 <z_handle_obj_poll_events>:
{
   1d4c6:	4603      	mov	r3, r0
	return list->head == list;
   1d4c8:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   1d4ca:	4283      	cmp	r3, r0
   1d4cc:	d008      	beq.n	1d4e0 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   1d4ce:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1d4d2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1d4d4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1d4d6:	2300      	movs	r3, #0
	node->prev = NULL;
   1d4d8:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   1d4dc:	f7ff bf5b 	b.w	1d396 <signal_poll_event>
}
   1d4e0:	4770      	bx	lr

0001d4e2 <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1d4e2:	3204      	adds	r2, #4
{
   1d4e4:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   1d4e6:	4604      	mov	r4, r0
   1d4e8:	d208      	bcs.n	1d4fc <z_heap_aligned_alloc+0x1a>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   1d4ea:	2600      	movs	r6, #0
   1d4ec:	2700      	movs	r7, #0
   1d4ee:	e9cd 6700 	strd	r6, r7, [sp]
   1d4f2:	f041 0104 	orr.w	r1, r1, #4
   1d4f6:	f7ff fa77 	bl	1c9e8 <k_heap_aligned_alloc>
	if (mem == NULL) {
   1d4fa:	b910      	cbnz	r0, 1d502 <z_heap_aligned_alloc+0x20>
		return NULL;
   1d4fc:	2000      	movs	r0, #0
}
   1d4fe:	b002      	add	sp, #8
   1d500:	bdd0      	pop	{r4, r6, r7, pc}
	*heap_ref = heap;
   1d502:	f840 4b04 	str.w	r4, [r0], #4
	return mem;
   1d506:	e7fa      	b.n	1d4fe <z_heap_aligned_alloc+0x1c>

0001d508 <k_free>:
	if (ptr != NULL) {
   1d508:	b120      	cbz	r0, 1d514 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   1d50a:	1f01      	subs	r1, r0, #4
   1d50c:	f850 0c04 	ldr.w	r0, [r0, #-4]
   1d510:	f7ff baab 	b.w	1ca6a <k_heap_free>
}
   1d514:	4770      	bx	lr
	...

0001d518 <z_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   1d518:	f7fa bdc8 	b.w	180ac <SystemInit>
