
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
   0:	c0 56 00 20 c1 1d 01 00 21 cb 01 00 15 1e 01 00     .V. ....!.......
  10:	15 1e 01 00 15 1e 01 00 15 1e 01 00 00 00 00 00     ................
	...
  2c:	a1 1b 01 00 15 1e 01 00 00 00 00 00 4d 1b 01 00     ............M...
  3c:	e5 b8 01 00                                         ....

00000040 <_irq_vector_table>:
  40:	81 1d 01 00 9b ff 01 00 81 1d 01 00 81 1d 01 00     ................
  50:	81 1d 01 00 81 1d 01 00 81 1d 01 00 81 1d 01 00     ................
  60:	63 ff 01 00 81 1d 01 00 81 1d 01 00 81 ff 01 00     c...............
  70:	81 1d 01 00 81 1d 01 00 81 1d 01 00 81 1d 01 00     ................
  80:	81 1d 01 00 81 1d 01 00 81 1d 01 00 81 1d 01 00     ................
  90:	81 1d 01 00 81 1d 01 00 81 1d 01 00 81 1d 01 00     ................
  a0:	81 1d 01 00 81 1d 01 00 81 1d 01 00 81 1d 01 00     ................
  b0:	81 1d 01 00 81 1d 01 00 81 1d 01 00 81 1d 01 00     ................
  c0:	81 1d 01 00 81 1d 01 00 81 1d 01 00 81 1d 01 00     ................
  d0:	81 1d 01 00 81 1d 01 00 81 1d 01 00                 ............

Disassembly of section text:

000000e0 <__aeabi_uldivmod>:
      e0:	b953      	cbnz	r3, f8 <__aeabi_uldivmod+0x18>
      e2:	b94a      	cbnz	r2, f8 <__aeabi_uldivmod+0x18>
      e4:	2900      	cmp	r1, #0
      e6:	bf08      	it	eq
      e8:	2800      	cmpeq	r0, #0
      ea:	bf1c      	itt	ne
      ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
      f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
      f4:	f000 b974 	b.w	3e0 <__aeabi_idiv0>
      f8:	f1ad 0c08 	sub.w	ip, sp, #8
      fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     100:	f000 f806 	bl	110 <__udivmoddi4>
     104:	f8dd e004 	ldr.w	lr, [sp, #4]
     108:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     10c:	b004      	add	sp, #16
     10e:	4770      	bx	lr

00000110 <__udivmoddi4>:
     110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     114:	9e08      	ldr	r6, [sp, #32]
     116:	460d      	mov	r5, r1
     118:	4604      	mov	r4, r0
     11a:	4688      	mov	r8, r1
     11c:	2b00      	cmp	r3, #0
     11e:	d14d      	bne.n	1bc <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x72>
     120:	428a      	cmp	r2, r1
     122:	4694      	mov	ip, r2
     124:	d968      	bls.n	1f8 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xae>
     126:	fab2 f282 	clz	r2, r2
     12a:	b152      	cbz	r2, 142 <CONFIG_IDLE_STACK_SIZE+0x2>
     12c:	fa01 f302 	lsl.w	r3, r1, r2
     130:	f1c2 0120 	rsb	r1, r2, #32
     134:	fa20 f101 	lsr.w	r1, r0, r1
     138:	fa0c fc02 	lsl.w	ip, ip, r2
     13c:	ea41 0803 	orr.w	r8, r1, r3
     140:	4094      	lsls	r4, r2
     142:	ea4f 451c 	mov.w	r5, ip, lsr #16
     146:	0c21      	lsrs	r1, r4, #16
     148:	fbb8 fef5 	udiv	lr, r8, r5
     14c:	fa1f f78c 	uxth.w	r7, ip
     150:	fb05 831e 	mls	r3, r5, lr, r8
     154:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     158:	fb0e f107 	mul.w	r1, lr, r7
     15c:	4299      	cmp	r1, r3
     15e:	d90b      	bls.n	178 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x2e>
     160:	eb1c 0303 	adds.w	r3, ip, r3
     164:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
     168:	f080 811e 	bcs.w	3a8 <CONFIG_FLASH_SIZE+0x1a8>
     16c:	4299      	cmp	r1, r3
     16e:	f240 811b 	bls.w	3a8 <CONFIG_FLASH_SIZE+0x1a8>
     172:	f1ae 0e02 	sub.w	lr, lr, #2
     176:	4463      	add	r3, ip
     178:	1a5b      	subs	r3, r3, r1
     17a:	b2a4      	uxth	r4, r4
     17c:	fbb3 f0f5 	udiv	r0, r3, r5
     180:	fb05 3310 	mls	r3, r5, r0, r3
     184:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     188:	fb00 f707 	mul.w	r7, r0, r7
     18c:	42a7      	cmp	r7, r4
     18e:	d90a      	bls.n	1a6 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x5c>
     190:	eb1c 0404 	adds.w	r4, ip, r4
     194:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     198:	f080 8108 	bcs.w	3ac <CONFIG_FLASH_SIZE+0x1ac>
     19c:	42a7      	cmp	r7, r4
     19e:	f240 8105 	bls.w	3ac <CONFIG_FLASH_SIZE+0x1ac>
     1a2:	4464      	add	r4, ip
     1a4:	3802      	subs	r0, #2
     1a6:	1be4      	subs	r4, r4, r7
     1a8:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     1ac:	2100      	movs	r1, #0
     1ae:	b11e      	cbz	r6, 1b8 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x6e>
     1b0:	40d4      	lsrs	r4, r2
     1b2:	2300      	movs	r3, #0
     1b4:	e9c6 4300 	strd	r4, r3, [r6]
     1b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1bc:	428b      	cmp	r3, r1
     1be:	d908      	bls.n	1d2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x88>
     1c0:	2e00      	cmp	r6, #0
     1c2:	f000 80ee 	beq.w	3a2 <CONFIG_FLASH_SIZE+0x1a2>
     1c6:	2100      	movs	r1, #0
     1c8:	e9c6 0500 	strd	r0, r5, [r6]
     1cc:	4608      	mov	r0, r1
     1ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1d2:	fab3 f183 	clz	r1, r3
     1d6:	2900      	cmp	r1, #0
     1d8:	d14a      	bne.n	270 <CONFIG_FLASH_SIZE+0x70>
     1da:	42ab      	cmp	r3, r5
     1dc:	d302      	bcc.n	1e4 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x9a>
     1de:	4282      	cmp	r2, r0
     1e0:	f200 80f9 	bhi.w	3d6 <CONFIG_BT_DEVICE_APPEARANCE+0x14>
     1e4:	1a84      	subs	r4, r0, r2
     1e6:	eb65 0303 	sbc.w	r3, r5, r3
     1ea:	2001      	movs	r0, #1
     1ec:	4698      	mov	r8, r3
     1ee:	2e00      	cmp	r6, #0
     1f0:	d0e2      	beq.n	1b8 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x6e>
     1f2:	e9c6 4800 	strd	r4, r8, [r6]
     1f6:	e7df      	b.n	1b8 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x6e>
     1f8:	b902      	cbnz	r2, 1fc <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xb2>
     1fa:	deff      	udf	#255	; 0xff
     1fc:	fab2 f282 	clz	r2, r2
     200:	2a00      	cmp	r2, #0
     202:	f040 8091 	bne.w	328 <CONFIG_FLASH_SIZE+0x128>
     206:	eba1 050c 	sub.w	r5, r1, ip
     20a:	ea4f 471c 	mov.w	r7, ip, lsr #16
     20e:	fa1f fe8c 	uxth.w	lr, ip
     212:	2101      	movs	r1, #1
     214:	fbb5 f3f7 	udiv	r3, r5, r7
     218:	fb07 5013 	mls	r0, r7, r3, r5
     21c:	0c25      	lsrs	r5, r4, #16
     21e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
     222:	fb0e f003 	mul.w	r0, lr, r3
     226:	42a8      	cmp	r0, r5
     228:	d908      	bls.n	23c <CONFIG_FLASH_SIZE+0x3c>
     22a:	eb1c 0505 	adds.w	r5, ip, r5
     22e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
     232:	d202      	bcs.n	23a <CONFIG_FLASH_SIZE+0x3a>
     234:	42a8      	cmp	r0, r5
     236:	f200 80cb 	bhi.w	3d0 <CONFIG_BT_DEVICE_APPEARANCE+0xe>
     23a:	4643      	mov	r3, r8
     23c:	1a2d      	subs	r5, r5, r0
     23e:	b2a4      	uxth	r4, r4
     240:	fbb5 f0f7 	udiv	r0, r5, r7
     244:	fb07 5510 	mls	r5, r7, r0, r5
     248:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     24c:	fb0e fe00 	mul.w	lr, lr, r0
     250:	45a6      	cmp	lr, r4
     252:	d908      	bls.n	266 <CONFIG_FLASH_SIZE+0x66>
     254:	eb1c 0404 	adds.w	r4, ip, r4
     258:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     25c:	d202      	bcs.n	264 <CONFIG_FLASH_SIZE+0x64>
     25e:	45a6      	cmp	lr, r4
     260:	f200 80bb 	bhi.w	3da <CONFIG_BT_DEVICE_APPEARANCE+0x18>
     264:	4628      	mov	r0, r5
     266:	eba4 040e 	sub.w	r4, r4, lr
     26a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
     26e:	e79e      	b.n	1ae <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x64>
     270:	f1c1 0720 	rsb	r7, r1, #32
     274:	408b      	lsls	r3, r1
     276:	fa22 fc07 	lsr.w	ip, r2, r7
     27a:	ea4c 0c03 	orr.w	ip, ip, r3
     27e:	fa20 f407 	lsr.w	r4, r0, r7
     282:	fa05 f301 	lsl.w	r3, r5, r1
     286:	431c      	orrs	r4, r3
     288:	40fd      	lsrs	r5, r7
     28a:	ea4f 491c 	mov.w	r9, ip, lsr #16
     28e:	fa00 f301 	lsl.w	r3, r0, r1
     292:	fbb5 f8f9 	udiv	r8, r5, r9
     296:	0c20      	lsrs	r0, r4, #16
     298:	fa1f fe8c 	uxth.w	lr, ip
     29c:	fb09 5518 	mls	r5, r9, r8, r5
     2a0:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
     2a4:	fb08 f00e 	mul.w	r0, r8, lr
     2a8:	42a8      	cmp	r0, r5
     2aa:	fa02 f201 	lsl.w	r2, r2, r1
     2ae:	d90b      	bls.n	2c8 <CONFIG_FLASH_SIZE+0xc8>
     2b0:	eb1c 0505 	adds.w	r5, ip, r5
     2b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
     2b8:	f080 8088 	bcs.w	3cc <CONFIG_BT_DEVICE_APPEARANCE+0xa>
     2bc:	42a8      	cmp	r0, r5
     2be:	f240 8085 	bls.w	3cc <CONFIG_BT_DEVICE_APPEARANCE+0xa>
     2c2:	f1a8 0802 	sub.w	r8, r8, #2
     2c6:	4465      	add	r5, ip
     2c8:	1a2d      	subs	r5, r5, r0
     2ca:	b2a4      	uxth	r4, r4
     2cc:	fbb5 f0f9 	udiv	r0, r5, r9
     2d0:	fb09 5510 	mls	r5, r9, r0, r5
     2d4:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
     2d8:	fb00 fe0e 	mul.w	lr, r0, lr
     2dc:	45ae      	cmp	lr, r5
     2de:	d908      	bls.n	2f2 <CONFIG_FLASH_SIZE+0xf2>
     2e0:	eb1c 0505 	adds.w	r5, ip, r5
     2e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
     2e8:	d26c      	bcs.n	3c4 <CONFIG_BT_DEVICE_APPEARANCE+0x2>
     2ea:	45ae      	cmp	lr, r5
     2ec:	d96a      	bls.n	3c4 <CONFIG_BT_DEVICE_APPEARANCE+0x2>
     2ee:	3802      	subs	r0, #2
     2f0:	4465      	add	r5, ip
     2f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     2f6:	fba0 9402 	umull	r9, r4, r0, r2
     2fa:	eba5 050e 	sub.w	r5, r5, lr
     2fe:	42a5      	cmp	r5, r4
     300:	46c8      	mov	r8, r9
     302:	46a6      	mov	lr, r4
     304:	d356      	bcc.n	3b4 <CONFIG_FLASH_SIZE+0x1b4>
     306:	d053      	beq.n	3b0 <CONFIG_FLASH_SIZE+0x1b0>
     308:	b15e      	cbz	r6, 322 <CONFIG_FLASH_SIZE+0x122>
     30a:	ebb3 0208 	subs.w	r2, r3, r8
     30e:	eb65 050e 	sbc.w	r5, r5, lr
     312:	fa05 f707 	lsl.w	r7, r5, r7
     316:	fa22 f301 	lsr.w	r3, r2, r1
     31a:	40cd      	lsrs	r5, r1
     31c:	431f      	orrs	r7, r3
     31e:	e9c6 7500 	strd	r7, r5, [r6]
     322:	2100      	movs	r1, #0
     324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     328:	f1c2 0320 	rsb	r3, r2, #32
     32c:	fa20 f103 	lsr.w	r1, r0, r3
     330:	fa0c fc02 	lsl.w	ip, ip, r2
     334:	fa25 f303 	lsr.w	r3, r5, r3
     338:	4095      	lsls	r5, r2
     33a:	430d      	orrs	r5, r1
     33c:	ea4f 471c 	mov.w	r7, ip, lsr #16
     340:	fa1f fe8c 	uxth.w	lr, ip
     344:	fbb3 f1f7 	udiv	r1, r3, r7
     348:	fb07 3011 	mls	r0, r7, r1, r3
     34c:	0c2b      	lsrs	r3, r5, #16
     34e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     352:	fb01 f00e 	mul.w	r0, r1, lr
     356:	4298      	cmp	r0, r3
     358:	fa04 f402 	lsl.w	r4, r4, r2
     35c:	d908      	bls.n	370 <CONFIG_FLASH_SIZE+0x170>
     35e:	eb1c 0303 	adds.w	r3, ip, r3
     362:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
     366:	d22f      	bcs.n	3c8 <CONFIG_BT_DEVICE_APPEARANCE+0x6>
     368:	4298      	cmp	r0, r3
     36a:	d92d      	bls.n	3c8 <CONFIG_BT_DEVICE_APPEARANCE+0x6>
     36c:	3902      	subs	r1, #2
     36e:	4463      	add	r3, ip
     370:	1a1b      	subs	r3, r3, r0
     372:	b2ad      	uxth	r5, r5
     374:	fbb3 f0f7 	udiv	r0, r3, r7
     378:	fb07 3310 	mls	r3, r7, r0, r3
     37c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     380:	fb00 f30e 	mul.w	r3, r0, lr
     384:	42ab      	cmp	r3, r5
     386:	d908      	bls.n	39a <CONFIG_FLASH_SIZE+0x19a>
     388:	eb1c 0505 	adds.w	r5, ip, r5
     38c:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
     390:	d216      	bcs.n	3c0 <CONFIG_FLASH_SIZE+0x1c0>
     392:	42ab      	cmp	r3, r5
     394:	d914      	bls.n	3c0 <CONFIG_FLASH_SIZE+0x1c0>
     396:	3802      	subs	r0, #2
     398:	4465      	add	r5, ip
     39a:	1aed      	subs	r5, r5, r3
     39c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     3a0:	e738      	b.n	214 <CONFIG_FLASH_SIZE+0x14>
     3a2:	4631      	mov	r1, r6
     3a4:	4630      	mov	r0, r6
     3a6:	e707      	b.n	1b8 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x6e>
     3a8:	4686      	mov	lr, r0
     3aa:	e6e5      	b.n	178 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x2e>
     3ac:	4618      	mov	r0, r3
     3ae:	e6fa      	b.n	1a6 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x5c>
     3b0:	454b      	cmp	r3, r9
     3b2:	d2a9      	bcs.n	308 <CONFIG_FLASH_SIZE+0x108>
     3b4:	ebb9 0802 	subs.w	r8, r9, r2
     3b8:	eb64 0e0c 	sbc.w	lr, r4, ip
     3bc:	3801      	subs	r0, #1
     3be:	e7a3      	b.n	308 <CONFIG_FLASH_SIZE+0x108>
     3c0:	4640      	mov	r0, r8
     3c2:	e7ea      	b.n	39a <CONFIG_FLASH_SIZE+0x19a>
     3c4:	4620      	mov	r0, r4
     3c6:	e794      	b.n	2f2 <CONFIG_FLASH_SIZE+0xf2>
     3c8:	4641      	mov	r1, r8
     3ca:	e7d1      	b.n	370 <CONFIG_FLASH_SIZE+0x170>
     3cc:	46d0      	mov	r8, sl
     3ce:	e77b      	b.n	2c8 <CONFIG_FLASH_SIZE+0xc8>
     3d0:	3b02      	subs	r3, #2
     3d2:	4465      	add	r5, ip
     3d4:	e732      	b.n	23c <CONFIG_FLASH_SIZE+0x3c>
     3d6:	4608      	mov	r0, r1
     3d8:	e709      	b.n	1ee <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xa4>
     3da:	4464      	add	r4, ip
     3dc:	3802      	subs	r0, #2
     3de:	e742      	b.n	266 <CONFIG_FLASH_SIZE+0x66>

000003e0 <__aeabi_idiv0>:
     3e0:	4770      	bx	lr
     3e2:	bf00      	nop

000003e4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>:
     3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     3e6:	4615      	mov	r5, r2
     3e8:	4a0a      	ldr	r2, [pc, #40]	; (414 <CONFIG_MAIN_STACK_SIZE+0x14>)
     3ea:	461c      	mov	r4, r3
     3ec:	6856      	ldr	r6, [r2, #4]
     3ee:	b12e      	cbz	r6, 3fc <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x18>
     3f0:	b001      	add	sp, #4
     3f2:	462a      	mov	r2, r5
     3f4:	46b4      	mov	ip, r6
     3f6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
     3fa:	4760      	bx	ip
     3fc:	2000      	movs	r0, #0
     3fe:	f88d 0000 	strb.w	r0, [sp]
     402:	4668      	mov	r0, sp
     404:	f00b f8fa 	bl	b5fc <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>
     408:	f89d 0000 	ldrb.w	r0, [sp]
     40c:	1a28      	subs	r0, r5, r0
     40e:	7020      	strb	r0, [r4, #0]
     410:	2000      	movs	r0, #0
     412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     414:	20000000 	.word	0x20000000
     418:	2800      	cmp	r0, #0
     41a:	d019      	beq.n	450 <CONFIG_MAIN_STACK_SIZE+0x50>
     41c:	7803      	ldrb	r3, [r0, #0]
     41e:	4913      	ldr	r1, [pc, #76]	; (46c <CONFIG_MAIN_STACK_SIZE+0x6c>)
     420:	4a13      	ldr	r2, [pc, #76]	; (470 <CONFIG_MAIN_STACK_SIZE+0x70>)
     422:	b113      	cbz	r3, 42a <CONFIG_MAIN_STACK_SIZE+0x2a>
     424:	2b01      	cmp	r3, #1
     426:	d00e      	beq.n	446 <CONFIG_MAIN_STACK_SIZE+0x46>
     428:	e011      	b.n	44e <CONFIG_MAIN_STACK_SIZE+0x4e>
     42a:	7903      	ldrb	r3, [r0, #4]
     42c:	2b01      	cmp	r3, #1
     42e:	d000      	beq.n	432 <CONFIG_MAIN_STACK_SIZE+0x32>
     430:	b96b      	cbnz	r3, 44e <CONFIG_MAIN_STACK_SIZE+0x4e>
     432:	7943      	ldrb	r3, [r0, #5]
     434:	b10b      	cbz	r3, 43a <CONFIG_MAIN_STACK_SIZE+0x3a>
     436:	2b01      	cmp	r3, #1
     438:	d109      	bne.n	44e <CONFIG_MAIN_STACK_SIZE+0x4e>
     43a:	6883      	ldr	r3, [r0, #8]
     43c:	3b64      	subs	r3, #100	; 0x64
     43e:	428b      	cmp	r3, r1
     440:	d205      	bcs.n	44e <CONFIG_MAIN_STACK_SIZE+0x4e>
     442:	68c0      	ldr	r0, [r0, #12]
     444:	e00e      	b.n	464 <CONFIG_MAIN_STACK_SIZE+0x64>
     446:	7903      	ldrb	r3, [r0, #4]
     448:	2b01      	cmp	r3, #1
     44a:	d002      	beq.n	452 <CONFIG_MAIN_STACK_SIZE+0x52>
     44c:	b10b      	cbz	r3, 452 <CONFIG_MAIN_STACK_SIZE+0x52>
     44e:	2000      	movs	r0, #0
     450:	4770      	bx	lr
     452:	7943      	ldrb	r3, [r0, #5]
     454:	b10b      	cbz	r3, 45a <CONFIG_MAIN_STACK_SIZE+0x5a>
     456:	2b01      	cmp	r3, #1
     458:	d1f9      	bne.n	44e <CONFIG_MAIN_STACK_SIZE+0x4e>
     45a:	68c3      	ldr	r3, [r0, #12]
     45c:	3b64      	subs	r3, #100	; 0x64
     45e:	428b      	cmp	r3, r1
     460:	d2f5      	bcs.n	44e <CONFIG_MAIN_STACK_SIZE+0x4e>
     462:	6880      	ldr	r0, [r0, #8]
     464:	4290      	cmp	r0, r2
     466:	d8f2      	bhi.n	44e <CONFIG_MAIN_STACK_SIZE+0x4e>
     468:	2001      	movs	r0, #1
     46a:	4770      	bx	lr
     46c:	0001863d 	.word	0x0001863d
     470:	07a11fff 	.word	0x07a11fff
     474:	b510      	push	{r4, lr}
     476:	4c05      	ldr	r4, [pc, #20]	; (48c <CONFIG_BT_HCI_ECC_STACK_SIZE+0x18>)
     478:	6820      	ldr	r0, [r4, #0]
     47a:	b110      	cbz	r0, 482 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xe>
     47c:	4780      	blx	r0
     47e:	2000      	movs	r0, #0
     480:	6020      	str	r0, [r4, #0]
     482:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     486:	f001 bf91 	b.w	23ac <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
     48a:	0000      	.short	0x0000
     48c:	20000008 	.word	0x20000008

00000490 <mpsl_timeslot_session_open>:
     490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     494:	460e      	mov	r6, r1
     496:	0005      	movs	r5, r0
     498:	d004      	beq.n	4a4 <mpsl_timeslot_session_open+0x14>
     49a:	f000 f845 	bl	528 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
     49e:	4607      	mov	r7, r0
     4a0:	2400      	movs	r4, #0
     4a2:	e00a      	b.n	4ba <mpsl_timeslot_session_open+0x2a>
     4a4:	f06f 0015 	mvn.w	r0, #21
     4a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     4ac:	4620      	mov	r0, r4
     4ae:	f000 f841 	bl	534 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
     4b2:	7880      	ldrb	r0, [r0, #2]
     4b4:	b138      	cbz	r0, 4c6 <mpsl_timeslot_session_open+0x36>
     4b6:	1c64      	adds	r4, r4, #1
     4b8:	b2e4      	uxtb	r4, r4
     4ba:	42bc      	cmp	r4, r7
     4bc:	d3f6      	bcc.n	4ac <mpsl_timeslot_session_open+0x1c>
     4be:	bf00      	nop
     4c0:	f06f 000b 	mvn.w	r0, #11
     4c4:	e7f0      	b.n	4a8 <mpsl_timeslot_session_open+0x18>
     4c6:	4627      	mov	r7, r4
     4c8:	2cff      	cmp	r4, #255	; 0xff
     4ca:	d0f9      	beq.n	4c0 <mpsl_timeslot_session_open+0x30>
     4cc:	4620      	mov	r0, r4
     4ce:	f000 f831 	bl	534 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
     4d2:	4604      	mov	r4, r0
     4d4:	f00b fa35 	bl	b942 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x346>
     4d8:	7127      	strb	r7, [r4, #4]
     4da:	4621      	mov	r1, r4
     4dc:	4807      	ldr	r0, [pc, #28]	; (4fc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x14>)
     4de:	f001 ff3d 	bl	235c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
     4e2:	70e0      	strb	r0, [r4, #3]
     4e4:	2820      	cmp	r0, #32
     4e6:	d005      	beq.n	4f4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc>
     4e8:	2001      	movs	r0, #1
     4ea:	60a5      	str	r5, [r4, #8]
     4ec:	70a0      	strb	r0, [r4, #2]
     4ee:	7037      	strb	r7, [r6, #0]
     4f0:	2000      	movs	r0, #0
     4f2:	e7d9      	b.n	4a8 <mpsl_timeslot_session_open+0x18>
     4f4:	f06f 0022 	mvn.w	r0, #34	; 0x22
     4f8:	e7d6      	b.n	4a8 <mpsl_timeslot_session_open+0x18>
     4fa:	0000      	.short	0x0000
     4fc:	0000b6a3 	.word	0x0000b6a3

00000500 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>:
     500:	b510      	push	{r4, lr}
     502:	0782      	lsls	r2, r0, #30
     504:	d002      	beq.n	50c <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0xc>
     506:	f06f 000d 	mvn.w	r0, #13
     50a:	bd10      	pop	{r4, pc}
     50c:	4a05      	ldr	r2, [pc, #20]	; (524 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0x24>)
     50e:	7011      	strb	r1, [r2, #0]
     510:	6050      	str	r0, [r2, #4]
     512:	b128      	cbz	r0, 520 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0x20>
     514:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
     518:	008a      	lsls	r2, r1, #2
     51a:	2100      	movs	r1, #0
     51c:	f00b fca2 	bl	be64 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     520:	2000      	movs	r0, #0
     522:	bd10      	pop	{r4, pc}
     524:	2000000c 	.word	0x2000000c

00000528 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
     528:	4801      	ldr	r0, [pc, #4]	; (530 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
     52a:	7800      	ldrb	r0, [r0, #0]
     52c:	4770      	bx	lr
     52e:	0000      	.short	0x0000
     530:	2000000c 	.word	0x2000000c

00000534 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
     534:	4905      	ldr	r1, [pc, #20]	; (54c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
     536:	780a      	ldrb	r2, [r1, #0]
     538:	4290      	cmp	r0, r2
     53a:	d301      	bcc.n	540 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
     53c:	2000      	movs	r0, #0
     53e:	4770      	bx	lr
     540:	6849      	ldr	r1, [r1, #4]
     542:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
     546:	eb01 0080 	add.w	r0, r1, r0, lsl #2
     54a:	4770      	bx	lr
     54c:	2000000c 	.word	0x2000000c
     550:	b570      	push	{r4, r5, r6, lr}
     552:	4605      	mov	r5, r0
     554:	2a20      	cmp	r2, #32
     556:	d027      	beq.n	5a8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x74>
     558:	4819      	ldr	r0, [pc, #100]	; (5c0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8c>)
     55a:	4c1a      	ldr	r4, [pc, #104]	; (5c4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x90>)
     55c:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
     560:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
     564:	eb04 0383 	add.w	r3, r4, r3, lsl #2
     568:	2920      	cmp	r1, #32
     56a:	d022      	beq.n	5b2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7e>
     56c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
     570:	7840      	ldrb	r0, [r0, #1]
     572:	784c      	ldrb	r4, [r1, #1]
     574:	7048      	strb	r0, [r1, #1]
     576:	4620      	mov	r0, r4
     578:	4601      	mov	r1, r0
     57a:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
     57e:	4291      	cmp	r1, r2
     580:	7005      	strb	r5, [r0, #0]
     582:	7840      	ldrb	r0, [r0, #1]
     584:	d1f8      	bne.n	578 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x44>
     586:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
     58a:	2a20      	cmp	r2, #32
     58c:	bf1a      	itte	ne
     58e:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
     592:	7054      	strbne	r4, [r2, #1]
     594:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
     598:	2220      	movs	r2, #32
     59a:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
     59e:	f88c 2001 	strb.w	r2, [ip, #1]
     5a2:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
     5a6:	bd70      	pop	{r4, r5, r6, pc}
     5a8:	f240 2191 	movw	r1, #657	; 0x291
     5ac:	2070      	movs	r0, #112	; 0x70
     5ae:	f003 f913 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     5b2:	f893 4020 	ldrb.w	r4, [r3, #32]
     5b6:	7840      	ldrb	r0, [r0, #1]
     5b8:	f883 0020 	strb.w	r0, [r3, #32]
     5bc:	e7db      	b.n	576 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x42>
     5be:	0000      	.short	0x0000
     5c0:	20000cc4 	.word	0x20000cc4
     5c4:	20000d44 	.word	0x20000d44
     5c8:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     5cc:	460c      	mov	r4, r1
     5ce:	8949      	ldrh	r1, [r1, #10]
     5d0:	b087      	sub	sp, #28
     5d2:	f501 61e1 	add.w	r1, r1, #1800	; 0x708
     5d6:	4615      	mov	r5, r2
     5d8:	4281      	cmp	r1, r0
     5da:	f200 80da 	bhi.w	792 <CONFIG_BT_HCI_TX_STACK_SIZE+0x192>
     5de:	aa05      	add	r2, sp, #20
     5e0:	a902      	add	r1, sp, #8
     5e2:	f002 f8b3 	bl	274c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     5e6:	9802      	ldr	r0, [sp, #8]
     5e8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
     5ea:	4428      	add	r0, r5
     5ec:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     5f0:	9004      	str	r0, [sp, #16]
     5f2:	48a9      	ldr	r0, [pc, #676]	; (898 <CONFIG_BT_RX_STACK_SIZE>)
     5f4:	4ea9      	ldr	r6, [pc, #676]	; (89c <CONFIG_BT_RX_STACK_SIZE+0x4>)
     5f6:	eb00 0087 	add.w	r0, r0, r7, lsl #2
     5fa:	9003      	str	r0, [sp, #12]
     5fc:	f890 5020 	ldrb.w	r5, [r0, #32]
     600:	2020      	movs	r0, #32
     602:	46e9      	mov	r9, sp
     604:	f10d 0804 	add.w	r8, sp, #4
     608:	f88d 0000 	strb.w	r0, [sp]
     60c:	f506 7a40 	add.w	sl, r6, #768	; 0x300
     610:	2d20      	cmp	r5, #32
     612:	bf18      	it	ne
     614:	eb0a 1b87 	addne.w	fp, sl, r7, lsl #6
     618:	d026      	beq.n	668 <CONFIG_BT_HCI_TX_STACK_SIZE+0x68>
     61a:	bf00      	nop
     61c:	eb05 0045 	add.w	r0, r5, r5, lsl #1
     620:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
     624:	6821      	ldr	r1, [r4, #0]
     626:	68c2      	ldr	r2, [r0, #12]
     628:	1a89      	subs	r1, r1, r2
     62a:	0209      	lsls	r1, r1, #8
     62c:	17ca      	asrs	r2, r1, #31
     62e:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     632:	3008      	adds	r0, #8
     634:	1209      	asrs	r1, r1, #8
     636:	d417      	bmi.n	668 <CONFIG_BT_HCI_TX_STACK_SIZE+0x68>
     638:	8961      	ldrh	r1, [r4, #10]
     63a:	b171      	cbz	r1, 65a <CONFIG_BT_HCI_TX_STACK_SIZE+0x5a>
     63c:	8941      	ldrh	r1, [r0, #10]
     63e:	b961      	cbnz	r1, 65a <CONFIG_BT_HCI_TX_STACK_SIZE+0x5a>
     640:	f000 fdb4 	bl	11ac <CONFIG_FPROTECT_BLOCK_SIZE+0x1ac>
     644:	f002 f866 	bl	2714 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     648:	6821      	ldr	r1, [r4, #0]
     64a:	1a08      	subs	r0, r1, r0
     64c:	0200      	lsls	r0, r0, #8
     64e:	17c1      	asrs	r1, r0, #31
     650:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     654:	1200      	asrs	r0, r0, #8
     656:	2833      	cmp	r0, #51	; 0x33
     658:	db06      	blt.n	668 <CONFIG_BT_HCI_TX_STACK_SIZE+0x68>
     65a:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     65e:	f889 5000 	strb.w	r5, [r9]
     662:	7845      	ldrb	r5, [r0, #1]
     664:	2d20      	cmp	r5, #32
     666:	d1d9      	bne.n	61c <CONFIG_BT_HCI_TX_STACK_SIZE+0x1c>
     668:	f899 0000 	ldrb.w	r0, [r9]
     66c:	f888 0000 	strb.w	r0, [r8]
     670:	46a1      	mov	r9, r4
     672:	2d20      	cmp	r5, #32
     674:	bf1c      	itt	ne
     676:	488a      	ldrne	r0, [pc, #552]	; (8a0 <CONFIG_BT_RX_STACK_SIZE+0x8>)
     678:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
     67c:	f000 8108 	beq.w	890 <CONFIG_HEAP_MEM_POOL_SIZE+0x90>
     680:	eb05 0145 	add.w	r1, r5, r5, lsl #1
     684:	eb06 0ac1 	add.w	sl, r6, r1, lsl #3
     688:	f8d9 1004 	ldr.w	r1, [r9, #4]
     68c:	f8da 2008 	ldr.w	r2, [sl, #8]
     690:	4648      	mov	r0, r9
     692:	1a51      	subs	r1, r2, r1
     694:	0209      	lsls	r1, r1, #8
     696:	17ca      	asrs	r2, r1, #31
     698:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     69c:	f10a 0708 	add.w	r7, sl, #8
     6a0:	1209      	asrs	r1, r1, #8
     6a2:	d415      	bmi.n	6d0 <CONFIG_BT_HCI_TX_STACK_SIZE+0xd0>
     6a4:	8979      	ldrh	r1, [r7, #10]
     6a6:	2900      	cmp	r1, #0
     6a8:	f000 80f2 	beq.w	890 <CONFIG_HEAP_MEM_POOL_SIZE+0x90>
     6ac:	8941      	ldrh	r1, [r0, #10]
     6ae:	2900      	cmp	r1, #0
     6b0:	f040 80ee 	bne.w	890 <CONFIG_HEAP_MEM_POOL_SIZE+0x90>
     6b4:	f000 fd7a 	bl	11ac <CONFIG_FPROTECT_BLOCK_SIZE+0x1ac>
     6b8:	f002 f82c 	bl	2714 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     6bc:	6839      	ldr	r1, [r7, #0]
     6be:	1a08      	subs	r0, r1, r0
     6c0:	0200      	lsls	r0, r0, #8
     6c2:	17c1      	asrs	r1, r0, #31
     6c4:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     6c8:	1200      	asrs	r0, r0, #8
     6ca:	2833      	cmp	r0, #51	; 0x33
     6cc:	f280 80e0 	bge.w	890 <CONFIG_HEAP_MEM_POOL_SIZE+0x90>
     6d0:	f888 5000 	strb.w	r5, [r8]
     6d4:	f89a 1014 	ldrb.w	r1, [sl, #20]
     6d8:	f899 000c 	ldrb.w	r0, [r9, #12]
     6dc:	4281      	cmp	r1, r0
     6de:	d906      	bls.n	6ee <CONFIG_BT_HCI_TX_STACK_SIZE+0xee>
     6e0:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     6e4:	7845      	ldrb	r5, [r0, #1]
     6e6:	2d20      	cmp	r5, #32
     6e8:	d1ca      	bne.n	680 <CONFIG_BT_HCI_TX_STACK_SIZE+0x80>
     6ea:	f000 b8d1 	b.w	890 <CONFIG_HEAP_MEM_POOL_SIZE+0x90>
     6ee:	f89d 0004 	ldrb.w	r0, [sp, #4]
     6f2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
     6f6:	eb06 05c0 	add.w	r5, r6, r0, lsl #3
     6fa:	8a68      	ldrh	r0, [r5, #18]
     6fc:	68ef      	ldr	r7, [r5, #12]
     6fe:	2800      	cmp	r0, #0
     700:	d13f      	bne.n	782 <CONFIG_BT_HCI_TX_STACK_SIZE+0x182>
     702:	8960      	ldrh	r0, [r4, #10]
     704:	b3e8      	cbz	r0, 782 <CONFIG_BT_HCI_TX_STACK_SIZE+0x182>
     706:	68a8      	ldr	r0, [r5, #8]
     708:	f00b f9c4 	bl	ba94 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
     70c:	8a69      	ldrh	r1, [r5, #18]
     70e:	7c2a      	ldrb	r2, [r5, #16]
     710:	4411      	add	r1, r2
     712:	1c49      	adds	r1, r1, #1
     714:	4a63      	ldr	r2, [pc, #396]	; (8a4 <CONFIG_BT_RX_STACK_SIZE+0xc>)
     716:	1843      	adds	r3, r0, r1
     718:	4290      	cmp	r0, r2
     71a:	d904      	bls.n	726 <CONFIG_BT_HCI_TX_STACK_SIZE+0x126>
     71c:	f240 6116 	movw	r1, #1558	; 0x616
     720:	2070      	movs	r0, #112	; 0x70
     722:	f003 f859 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     726:	4860      	ldr	r0, [pc, #384]	; (8a8 <CONFIG_BT_RX_STACK_SIZE+0x10>)
     728:	4281      	cmp	r1, r0
     72a:	dd04      	ble.n	736 <CONFIG_BT_HCI_TX_STACK_SIZE+0x136>
     72c:	f240 6117 	movw	r1, #1559	; 0x617
     730:	2070      	movs	r0, #112	; 0x70
     732:	f003 f851 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     736:	485d      	ldr	r0, [pc, #372]	; (8ac <CONFIG_BT_RX_STACK_SIZE+0x14>)
     738:	4281      	cmp	r1, r0
     73a:	da04      	bge.n	746 <CONFIG_BT_HCI_TX_STACK_SIZE+0x146>
     73c:	f44f 61c3 	mov.w	r1, #1560	; 0x618
     740:	2070      	movs	r0, #112	; 0x70
     742:	f003 f849 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     746:	485a      	ldr	r0, [pc, #360]	; (8b0 <CONFIG_BT_RX_STACK_SIZE+0x18>)
     748:	4298      	cmp	r0, r3
     74a:	bfdc      	itt	le
     74c:	f503 03f7 	addle.w	r3, r3, #8093696	; 0x7b8000
     750:	f1a3 53f8 	suble.w	r3, r3, #520093696	; 0x1f000000
     754:	dd05      	ble.n	762 <CONFIG_BT_HCI_TX_STACK_SIZE+0x162>
     756:	2b00      	cmp	r3, #0
     758:	bfbc      	itt	lt
     75a:	f5a3 03f7 	sublt.w	r3, r3, #8093696	; 0x7b8000
     75e:	f103 53f8 	addlt.w	r3, r3, #520093696	; 0x1f000000
     762:	4618      	mov	r0, r3
     764:	f001 ffd6 	bl	2714 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     768:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     76c:	1a39      	subs	r1, r7, r0
     76e:	0209      	lsls	r1, r1, #8
     770:	17ca      	asrs	r2, r1, #31
     772:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     776:	1209      	asrs	r1, r1, #8
     778:	2933      	cmp	r1, #51	; 0x33
     77a:	bfbc      	itt	lt
     77c:	3033      	addlt	r0, #51	; 0x33
     77e:	f020 477f 	biclt.w	r7, r0, #4278190080	; 0xff000000
     782:	9804      	ldr	r0, [sp, #16]
     784:	1a38      	subs	r0, r7, r0
     786:	0200      	lsls	r0, r0, #8
     788:	17c1      	asrs	r1, r0, #31
     78a:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     78e:	1200      	asrs	r0, r0, #8
     790:	d403      	bmi.n	79a <CONFIG_BT_HCI_TX_STACK_SIZE+0x19a>
     792:	b00b      	add	sp, #44	; 0x2c
     794:	2000      	movs	r0, #0
     796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     79a:	e9d4 1000 	ldrd	r1, r0, [r4]
     79e:	1a40      	subs	r0, r0, r1
     7a0:	4438      	add	r0, r7
     7a2:	f027 417f 	bic.w	r1, r7, #4278190080	; 0xff000000
     7a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     7aa:	e9c4 1000 	strd	r1, r0, [r4]
     7ae:	9803      	ldr	r0, [sp, #12]
     7b0:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
     7b4:	466f      	mov	r7, sp
     7b6:	f890 5020 	ldrb.w	r5, [r0, #32]
     7ba:	2020      	movs	r0, #32
     7bc:	f10d 0a04 	add.w	sl, sp, #4
     7c0:	f88d 0000 	strb.w	r0, [sp]
     7c4:	2d20      	cmp	r5, #32
     7c6:	bf1c      	itt	ne
     7c8:	4835      	ldrne	r0, [pc, #212]	; (8a0 <CONFIG_BT_RX_STACK_SIZE+0x8>)
     7ca:	eb00 1988 	addne.w	r9, r0, r8, lsl #6
     7ce:	d024      	beq.n	81a <CONFIG_HEAP_MEM_POOL_SIZE+0x1a>
     7d0:	eb05 0045 	add.w	r0, r5, r5, lsl #1
     7d4:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
     7d8:	6822      	ldr	r2, [r4, #0]
     7da:	68c1      	ldr	r1, [r0, #12]
     7dc:	1a51      	subs	r1, r2, r1
     7de:	0209      	lsls	r1, r1, #8
     7e0:	17ca      	asrs	r2, r1, #31
     7e2:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     7e6:	3008      	adds	r0, #8
     7e8:	1209      	asrs	r1, r1, #8
     7ea:	d416      	bmi.n	81a <CONFIG_HEAP_MEM_POOL_SIZE+0x1a>
     7ec:	8961      	ldrh	r1, [r4, #10]
     7ee:	b171      	cbz	r1, 80e <CONFIG_HEAP_MEM_POOL_SIZE+0xe>
     7f0:	8941      	ldrh	r1, [r0, #10]
     7f2:	b961      	cbnz	r1, 80e <CONFIG_HEAP_MEM_POOL_SIZE+0xe>
     7f4:	f000 fcda 	bl	11ac <CONFIG_FPROTECT_BLOCK_SIZE+0x1ac>
     7f8:	f001 ff8c 	bl	2714 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     7fc:	6821      	ldr	r1, [r4, #0]
     7fe:	1a08      	subs	r0, r1, r0
     800:	0200      	lsls	r0, r0, #8
     802:	17c1      	asrs	r1, r0, #31
     804:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     808:	1200      	asrs	r0, r0, #8
     80a:	2833      	cmp	r0, #51	; 0x33
     80c:	db05      	blt.n	81a <CONFIG_HEAP_MEM_POOL_SIZE+0x1a>
     80e:	eb09 0045 	add.w	r0, r9, r5, lsl #1
     812:	703d      	strb	r5, [r7, #0]
     814:	7845      	ldrb	r5, [r0, #1]
     816:	2d20      	cmp	r5, #32
     818:	d1da      	bne.n	7d0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1d0>
     81a:	7838      	ldrb	r0, [r7, #0]
     81c:	f88a 0000 	strb.w	r0, [sl]
     820:	4627      	mov	r7, r4
     822:	2d20      	cmp	r5, #32
     824:	bf1c      	itt	ne
     826:	481e      	ldrne	r0, [pc, #120]	; (8a0 <CONFIG_BT_RX_STACK_SIZE+0x8>)
     828:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
     82c:	d030      	beq.n	890 <CONFIG_HEAP_MEM_POOL_SIZE+0x90>
     82e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
     832:	eb06 09c1 	add.w	r9, r6, r1, lsl #3
     836:	6879      	ldr	r1, [r7, #4]
     838:	f8d9 2008 	ldr.w	r2, [r9, #8]
     83c:	4638      	mov	r0, r7
     83e:	1a51      	subs	r1, r2, r1
     840:	0209      	lsls	r1, r1, #8
     842:	17ca      	asrs	r2, r1, #31
     844:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     848:	f109 0808 	add.w	r8, r9, #8
     84c:	1209      	asrs	r1, r1, #8
     84e:	d412      	bmi.n	876 <CONFIG_HEAP_MEM_POOL_SIZE+0x76>
     850:	f8b8 100a 	ldrh.w	r1, [r8, #10]
     854:	b1e1      	cbz	r1, 890 <CONFIG_HEAP_MEM_POOL_SIZE+0x90>
     856:	8941      	ldrh	r1, [r0, #10]
     858:	b9d1      	cbnz	r1, 890 <CONFIG_HEAP_MEM_POOL_SIZE+0x90>
     85a:	f000 fca7 	bl	11ac <CONFIG_FPROTECT_BLOCK_SIZE+0x1ac>
     85e:	f001 ff59 	bl	2714 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     862:	f8d8 1000 	ldr.w	r1, [r8]
     866:	1a08      	subs	r0, r1, r0
     868:	0200      	lsls	r0, r0, #8
     86a:	17c1      	asrs	r1, r0, #31
     86c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     870:	1200      	asrs	r0, r0, #8
     872:	2833      	cmp	r0, #51	; 0x33
     874:	da0c      	bge.n	890 <CONFIG_HEAP_MEM_POOL_SIZE+0x90>
     876:	f88a 5000 	strb.w	r5, [sl]
     87a:	f899 0014 	ldrb.w	r0, [r9, #20]
     87e:	7b39      	ldrb	r1, [r7, #12]
     880:	4288      	cmp	r0, r1
     882:	f67f af34 	bls.w	6ee <CONFIG_BT_HCI_TX_STACK_SIZE+0xee>
     886:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     88a:	7845      	ldrb	r5, [r0, #1]
     88c:	2d20      	cmp	r5, #32
     88e:	d1ce      	bne.n	82e <CONFIG_HEAP_MEM_POOL_SIZE+0x2e>
     890:	b00b      	add	sp, #44	; 0x2c
     892:	2001      	movs	r0, #1
     894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     898:	20000d44 	.word	0x20000d44
     89c:	200009c4 	.word	0x200009c4
     8a0:	20000cc4 	.word	0x20000cc4
     8a4:	1e847fff 	.word	0x1e847fff
     8a8:	07a12000 	.word	0x07a12000
     8ac:	f85ee000 	.word	0xf85ee000
     8b0:	1e848000 	.word	0x1e848000
     8b4:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
     8b8:	4604      	mov	r4, r0
     8ba:	483c      	ldr	r0, [pc, #240]	; (9ac <CONFIG_BT_RX_STACK_SIZE+0x114>)
     8bc:	460e      	mov	r6, r1
     8be:	eb00 0086 	add.w	r0, r0, r6, lsl #2
     8c2:	4f3b      	ldr	r7, [pc, #236]	; (9b0 <CONFIG_BT_RX_STACK_SIZE+0x118>)
     8c4:	f890 5020 	ldrb.w	r5, [r0, #32]
     8c8:	2020      	movs	r0, #32
     8ca:	4698      	mov	r8, r3
     8cc:	4692      	mov	sl, r2
     8ce:	7010      	strb	r0, [r2, #0]
     8d0:	f507 7940 	add.w	r9, r7, #768	; 0x300
     8d4:	2d20      	cmp	r5, #32
     8d6:	bf18      	it	ne
     8d8:	eb09 1b86 	addne.w	fp, r9, r6, lsl #6
     8dc:	d028      	beq.n	930 <CONFIG_BT_RX_STACK_SIZE+0x98>
     8de:	bf00      	nop
     8e0:	eb05 0045 	add.w	r0, r5, r5, lsl #1
     8e4:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
     8e8:	f100 0108 	add.w	r1, r0, #8
     8ec:	68c0      	ldr	r0, [r0, #12]
     8ee:	6822      	ldr	r2, [r4, #0]
     8f0:	1a10      	subs	r0, r2, r0
     8f2:	0200      	lsls	r0, r0, #8
     8f4:	17c2      	asrs	r2, r0, #31
     8f6:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     8fa:	1200      	asrs	r0, r0, #8
     8fc:	d418      	bmi.n	930 <CONFIG_BT_RX_STACK_SIZE+0x98>
     8fe:	8960      	ldrh	r0, [r4, #10]
     900:	b178      	cbz	r0, 922 <CONFIG_BT_RX_STACK_SIZE+0x8a>
     902:	8948      	ldrh	r0, [r1, #10]
     904:	b968      	cbnz	r0, 922 <CONFIG_BT_RX_STACK_SIZE+0x8a>
     906:	4608      	mov	r0, r1
     908:	f000 fc50 	bl	11ac <CONFIG_FPROTECT_BLOCK_SIZE+0x1ac>
     90c:	f001 ff02 	bl	2714 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     910:	6821      	ldr	r1, [r4, #0]
     912:	1a08      	subs	r0, r1, r0
     914:	0200      	lsls	r0, r0, #8
     916:	17c1      	asrs	r1, r0, #31
     918:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     91c:	1200      	asrs	r0, r0, #8
     91e:	2833      	cmp	r0, #51	; 0x33
     920:	db06      	blt.n	930 <CONFIG_BT_RX_STACK_SIZE+0x98>
     922:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     926:	f88a 5000 	strb.w	r5, [sl]
     92a:	7845      	ldrb	r5, [r0, #1]
     92c:	2d20      	cmp	r5, #32
     92e:	d1d7      	bne.n	8e0 <CONFIG_BT_RX_STACK_SIZE+0x48>
     930:	f89a 0000 	ldrb.w	r0, [sl]
     934:	f888 0000 	strb.w	r0, [r8]
     938:	2d20      	cmp	r5, #32
     93a:	bf18      	it	ne
     93c:	eb09 1a86 	addne.w	sl, r9, r6, lsl #6
     940:	d030      	beq.n	9a4 <CONFIG_BT_RX_STACK_SIZE+0x10c>
     942:	eb05 0145 	add.w	r1, r5, r5, lsl #1
     946:	eb07 09c1 	add.w	r9, r7, r1, lsl #3
     94a:	6861      	ldr	r1, [r4, #4]
     94c:	f8d9 2008 	ldr.w	r2, [r9, #8]
     950:	4620      	mov	r0, r4
     952:	1a51      	subs	r1, r2, r1
     954:	0209      	lsls	r1, r1, #8
     956:	17ca      	asrs	r2, r1, #31
     958:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     95c:	f109 0608 	add.w	r6, r9, #8
     960:	1209      	asrs	r1, r1, #8
     962:	d410      	bmi.n	986 <CONFIG_BT_RX_STACK_SIZE+0xee>
     964:	8971      	ldrh	r1, [r6, #10]
     966:	b1e9      	cbz	r1, 9a4 <CONFIG_BT_RX_STACK_SIZE+0x10c>
     968:	8941      	ldrh	r1, [r0, #10]
     96a:	b9d9      	cbnz	r1, 9a4 <CONFIG_BT_RX_STACK_SIZE+0x10c>
     96c:	f000 fc1e 	bl	11ac <CONFIG_FPROTECT_BLOCK_SIZE+0x1ac>
     970:	f001 fed0 	bl	2714 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     974:	6831      	ldr	r1, [r6, #0]
     976:	1a08      	subs	r0, r1, r0
     978:	0200      	lsls	r0, r0, #8
     97a:	17c1      	asrs	r1, r0, #31
     97c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     980:	1200      	asrs	r0, r0, #8
     982:	2833      	cmp	r0, #51	; 0x33
     984:	da0e      	bge.n	9a4 <CONFIG_BT_RX_STACK_SIZE+0x10c>
     986:	f888 5000 	strb.w	r5, [r8]
     98a:	f899 0014 	ldrb.w	r0, [r9, #20]
     98e:	7b21      	ldrb	r1, [r4, #12]
     990:	4288      	cmp	r0, r1
     992:	d802      	bhi.n	99a <CONFIG_BT_RX_STACK_SIZE+0x102>
     994:	2000      	movs	r0, #0
     996:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
     99a:	eb0a 0045 	add.w	r0, sl, r5, lsl #1
     99e:	7845      	ldrb	r5, [r0, #1]
     9a0:	2d20      	cmp	r5, #32
     9a2:	d1ce      	bne.n	942 <CONFIG_BT_RX_STACK_SIZE+0xaa>
     9a4:	2001      	movs	r0, #1
     9a6:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
     9aa:	0000      	.short	0x0000
     9ac:	20000d44 	.word	0x20000d44
     9b0:	200009c4 	.word	0x200009c4
     9b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     9b8:	f04f 0800 	mov.w	r8, #0
     9bc:	b098      	sub	sp, #96	; 0x60
     9be:	4616      	mov	r6, r2
     9c0:	460d      	mov	r5, r1
     9c2:	46c3      	mov	fp, r8
     9c4:	f002 f91e 	bl	2c04 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
     9c8:	4604      	mov	r4, r0
     9ca:	2d01      	cmp	r5, #1
     9cc:	bf18      	it	ne
     9ce:	2d02      	cmpne	r5, #2
     9d0:	d005      	beq.n	9de <CONFIG_BT_RX_STACK_SIZE+0x146>
     9d2:	f640 1193 	movw	r1, #2451	; 0x993
     9d6:	f04f 0070 	mov.w	r0, #112	; 0x70
     9da:	f002 fefd 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     9de:	49fd      	ldr	r1, [pc, #1012]	; (dd4 <CONFIG_BT_RX_STACK_SIZE+0x53c>)
     9e0:	2001      	movs	r0, #1
     9e2:	6008      	str	r0, [r1, #0]
     9e4:	49fc      	ldr	r1, [pc, #1008]	; (dd8 <CONFIG_BT_RX_STACK_SIZE+0x540>)
     9e6:	6889      	ldr	r1, [r1, #8]
     9e8:	6008      	str	r0, [r1, #0]
     9ea:	2000      	movs	r0, #0
     9ec:	900c      	str	r0, [sp, #48]	; 0x30
     9ee:	1e40      	subs	r0, r0, #1
     9f0:	900e      	str	r0, [sp, #56]	; 0x38
     9f2:	49fa      	ldr	r1, [pc, #1000]	; (ddc <CONFIG_BT_RX_STACK_SIZE+0x544>)
     9f4:	eb06 0046 	add.w	r0, r6, r6, lsl #1
     9f8:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
     9fc:	3308      	adds	r3, #8
     9fe:	af0f      	add	r7, sp, #60	; 0x3c
     a00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
     a02:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
     a06:	a80f      	add	r0, sp, #60	; 0x3c
     a08:	f000 fbd0 	bl	11ac <CONFIG_FPROTECT_BLOCK_SIZE+0x1ac>
     a0c:	900d      	str	r0, [sp, #52]	; 0x34
     a0e:	48f3      	ldr	r0, [pc, #972]	; (ddc <CONFIG_BT_RX_STACK_SIZE+0x544>)
     a10:	f8bd 9046 	ldrh.w	r9, [sp, #70]	; 0x46
     a14:	f8b0 039c 	ldrh.w	r0, [r0, #924]	; 0x39c
     a18:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
     a1c:	f1b9 0f00 	cmp.w	r9, #0
     a20:	bf14      	ite	ne
     a22:	f04f 0a01 	movne.w	sl, #1
     a26:	f04f 0a00 	moveq.w	sl, #0
     a2a:	980f      	ldr	r0, [sp, #60]	; 0x3c
     a2c:	9014      	str	r0, [sp, #80]	; 0x50
     a2e:	f1ba 0f00 	cmp.w	sl, #0
     a32:	d009      	beq.n	a48 <CONFIG_BT_RX_STACK_SIZE+0x1b0>
     a34:	48ea      	ldr	r0, [pc, #936]	; (de0 <CONFIG_BT_RX_STACK_SIZE+0x548>)
     a36:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
     a3a:	b928      	cbnz	r0, a48 <CONFIG_BT_RX_STACK_SIZE+0x1b0>
     a3c:	f002 fe68 	bl	3710 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
     a40:	2800      	cmp	r0, #0
     a42:	bf08      	it	eq
     a44:	2701      	moveq	r7, #1
     a46:	d000      	beq.n	a4a <CONFIG_BT_RX_STACK_SIZE+0x1b2>
     a48:	2700      	movs	r7, #0
     a4a:	48e6      	ldr	r0, [pc, #920]	; (de4 <CONFIG_BT_RX_STACK_SIZE+0x54c>)
     a4c:	2200      	movs	r2, #0
     a4e:	9215      	str	r2, [sp, #84]	; 0x54
     a50:	7800      	ldrb	r0, [r0, #0]
     a52:	4616      	mov	r6, r2
     a54:	2801      	cmp	r0, #1
     a56:	bf18      	it	ne
     a58:	2803      	cmpne	r0, #3
     a5a:	d140      	bne.n	ade <CONFIG_BT_RX_STACK_SIZE+0x246>
     a5c:	48e1      	ldr	r0, [pc, #900]	; (de4 <CONFIG_BT_RX_STACK_SIZE+0x54c>)
     a5e:	f8b0 8002 	ldrh.w	r8, [r0, #2]
     a62:	eba8 0009 	sub.w	r0, r8, r9
     a66:	9015      	str	r0, [sp, #84]	; 0x54
     a68:	45c8      	cmp	r8, r9
     a6a:	d938      	bls.n	ade <CONFIG_BT_RX_STACK_SIZE+0x246>
     a6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
     a6e:	ea6f 0108 	mvn.w	r1, r8
     a72:	f8df e374 	ldr.w	lr, [pc, #884]	; de8 <CONFIG_BT_RX_STACK_SIZE+0x550>
     a76:	1858      	adds	r0, r3, r1
     a78:	f10d 0c0c 	add.w	ip, sp, #12
     a7c:	aa17      	add	r2, sp, #92	; 0x5c
     a7e:	4573      	cmp	r3, lr
     a80:	d904      	bls.n	a8c <CONFIG_BT_RX_STACK_SIZE+0x1f4>
     a82:	f240 6116 	movw	r1, #1558	; 0x616
     a86:	2070      	movs	r0, #112	; 0x70
     a88:	f002 fea6 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     a8c:	4bd7      	ldr	r3, [pc, #860]	; (dec <CONFIG_BT_RX_STACK_SIZE+0x554>)
     a8e:	4299      	cmp	r1, r3
     a90:	dd04      	ble.n	a9c <CONFIG_BT_RX_STACK_SIZE+0x204>
     a92:	f240 6117 	movw	r1, #1559	; 0x617
     a96:	2070      	movs	r0, #112	; 0x70
     a98:	f002 fe9e 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     a9c:	4bd4      	ldr	r3, [pc, #848]	; (df0 <CONFIG_BT_RX_STACK_SIZE+0x558>)
     a9e:	4299      	cmp	r1, r3
     aa0:	da04      	bge.n	aac <CONFIG_BT_RX_STACK_SIZE+0x214>
     aa2:	f44f 61c3 	mov.w	r1, #1560	; 0x618
     aa6:	2070      	movs	r0, #112	; 0x70
     aa8:	f002 fe96 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     aac:	49d1      	ldr	r1, [pc, #836]	; (df4 <CONFIG_BT_RX_STACK_SIZE+0x55c>)
     aae:	4281      	cmp	r1, r0
     ab0:	bfdc      	itt	le
     ab2:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
     ab6:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
     aba:	dd05      	ble.n	ac8 <CONFIG_BT_RX_STACK_SIZE+0x230>
     abc:	2800      	cmp	r0, #0
     abe:	bfbc      	itt	lt
     ac0:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
     ac4:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
     ac8:	4661      	mov	r1, ip
     aca:	f001 fe3f 	bl	274c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     ace:	9803      	ldr	r0, [sp, #12]
     ad0:	990f      	ldr	r1, [sp, #60]	; 0x3c
     ad2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     ad6:	9003      	str	r0, [sp, #12]
     ad8:	1a08      	subs	r0, r1, r0
     ada:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
     ade:	2f00      	cmp	r7, #0
     ae0:	bf18      	it	ne
     ae2:	2632      	movne	r6, #50	; 0x32
     ae4:	d104      	bne.n	af0 <CONFIG_BT_RX_STACK_SIZE+0x258>
     ae6:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
     aea:	2800      	cmp	r0, #0
     aec:	bf18      	it	ne
     aee:	2602      	movne	r6, #2
     af0:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     af4:	d008      	beq.n	b08 <CONFIG_BT_RX_STACK_SIZE+0x270>
     af6:	980f      	ldr	r0, [sp, #60]	; 0x3c
     af8:	1b00      	subs	r0, r0, r4
     afa:	0200      	lsls	r0, r0, #8
     afc:	17c1      	asrs	r1, r0, #31
     afe:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     b02:	1200      	asrs	r0, r0, #8
     b04:	2801      	cmp	r0, #1
     b06:	da02      	bge.n	b0e <CONFIG_BT_RX_STACK_SIZE+0x276>
     b08:	2104      	movs	r1, #4
     b0a:	9818      	ldr	r0, [sp, #96]	; 0x60
     b0c:	e00b      	b.n	b26 <CONFIG_BT_RX_STACK_SIZE+0x28e>
     b0e:	b147      	cbz	r7, b22 <CONFIG_BT_RX_STACK_SIZE+0x28a>
     b10:	48b3      	ldr	r0, [pc, #716]	; (de0 <CONFIG_BT_RX_STACK_SIZE+0x548>)
     b12:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
     b16:	b120      	cbz	r0, b22 <CONFIG_BT_RX_STACK_SIZE+0x28a>
     b18:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
     b1c:	1c06      	adds	r6, r0, #0
     b1e:	bf18      	it	ne
     b20:	2602      	movne	r6, #2
     b22:	4620      	mov	r0, r4
     b24:	2101      	movs	r1, #1
     b26:	f1b9 0f00 	cmp.w	r9, #0
     b2a:	d002      	beq.n	b32 <CONFIG_BT_RX_STACK_SIZE+0x29a>
     b2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
     b2e:	2b1e      	cmp	r3, #30
     b30:	da02      	bge.n	b38 <CONFIG_BT_RX_STACK_SIZE+0x2a0>
     b32:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
     b36:	b113      	cbz	r3, b3e <CONFIG_BT_RX_STACK_SIZE+0x2a6>
     b38:	f04f 0b01 	mov.w	fp, #1
     b3c:	1e49      	subs	r1, r1, #1
     b3e:	198b      	adds	r3, r1, r6
     b40:	49a8      	ldr	r1, [pc, #672]	; (de4 <CONFIG_BT_RX_STACK_SIZE+0x54c>)
     b42:	f89d e04d 	ldrb.w	lr, [sp, #77]	; 0x4d
     b46:	7809      	ldrb	r1, [r1, #0]
     b48:	9115      	str	r1, [sp, #84]	; 0x54
     b4a:	990f      	ldr	r1, [sp, #60]	; 0x3c
     b4c:	1a89      	subs	r1, r1, r2
     b4e:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
     b52:	ebac 0100 	sub.w	r1, ip, r0
     b56:	0209      	lsls	r1, r1, #8
     b58:	17ce      	asrs	r6, r1, #31
     b5a:	eb01 6116 	add.w	r1, r1, r6, lsr #24
     b5e:	1209      	asrs	r1, r1, #8
     b60:	4299      	cmp	r1, r3
     b62:	db18      	blt.n	b96 <CONFIG_BT_RX_STACK_SIZE+0x2fe>
     b64:	2a00      	cmp	r2, #0
     b66:	bf18      	it	ne
     b68:	f8cd c03c 	strne.w	ip, [sp, #60]	; 0x3c
     b6c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
     b6e:	9705      	str	r7, [sp, #20]
     b70:	2700      	movs	r7, #0
     b72:	f001 ff41 	bl	29f8 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
     b76:	1a30      	subs	r0, r6, r0
     b78:	0200      	lsls	r0, r0, #8
     b7a:	17c1      	asrs	r1, r0, #31
     b7c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     b80:	1200      	asrs	r0, r0, #8
     b82:	283e      	cmp	r0, #62	; 0x3e
     b84:	da3f      	bge.n	c06 <CONFIG_BT_RX_STACK_SIZE+0x36e>
     b86:	2d01      	cmp	r5, #1
     b88:	d020      	beq.n	bcc <CONFIG_BT_RX_STACK_SIZE+0x334>
     b8a:	1e70      	subs	r0, r6, #1
     b8c:	9905      	ldr	r1, [sp, #20]
     b8e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     b92:	b319      	cbz	r1, bdc <CONFIG_BT_RX_STACK_SIZE+0x344>
     b94:	e02d      	b.n	bf2 <CONFIG_BT_RX_STACK_SIZE+0x35a>
     b96:	b182      	cbz	r2, bba <CONFIG_BT_RX_STACK_SIZE+0x322>
     b98:	f1be 0f00 	cmp.w	lr, #0
     b9c:	bf04      	itt	eq
     b9e:	9915      	ldreq	r1, [sp, #84]	; 0x54
     ba0:	2903      	cmpeq	r1, #3
     ba2:	d00a      	beq.n	bba <CONFIG_BT_RX_STACK_SIZE+0x322>
     ba4:	b927      	cbnz	r7, bb0 <CONFIG_BT_RX_STACK_SIZE+0x318>
     ba6:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
     baa:	2900      	cmp	r1, #0
     bac:	bf18      	it	ne
     bae:	1e9b      	subne	r3, r3, #2
     bb0:	2200      	movs	r2, #0
     bb2:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
     bb6:	4690      	mov	r8, r2
     bb8:	e7c7      	b.n	b4a <CONFIG_BT_RX_STACK_SIZE+0x2b2>
     bba:	bb07      	cbnz	r7, bfe <CONFIG_BT_RX_STACK_SIZE+0x366>
     bbc:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
     bc0:	b1e9      	cbz	r1, bfe <CONFIG_BT_RX_STACK_SIZE+0x366>
     bc2:	2100      	movs	r1, #0
     bc4:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
     bc8:	1e9b      	subs	r3, r3, #2
     bca:	e7be      	b.n	b4a <CONFIG_BT_RX_STACK_SIZE+0x2b2>
     bcc:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     bd0:	d120      	bne.n	c14 <CONFIG_BT_RX_STACK_SIZE+0x37c>
     bd2:	f640 110c 	movw	r1, #2316	; 0x90c
     bd6:	2070      	movs	r0, #112	; 0x70
     bd8:	f002 fdfe 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     bdc:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     be0:	d007      	beq.n	bf2 <CONFIG_BT_RX_STACK_SIZE+0x35a>
     be2:	1a21      	subs	r1, r4, r0
     be4:	0209      	lsls	r1, r1, #8
     be6:	17ca      	asrs	r2, r1, #31
     be8:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     bec:	1209      	asrs	r1, r1, #8
     bee:	2904      	cmp	r1, #4
     bf0:	dd03      	ble.n	bfa <CONFIG_BT_RX_STACK_SIZE+0x362>
     bf2:	4604      	mov	r4, r0
     bf4:	f001 ff06 	bl	2a04 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
     bf8:	e00c      	b.n	c14 <CONFIG_BT_RX_STACK_SIZE+0x37c>
     bfa:	2900      	cmp	r1, #0
     bfc:	dd0a      	ble.n	c14 <CONFIG_BT_RX_STACK_SIZE+0x37c>
     bfe:	b01b      	add	sp, #108	; 0x6c
     c00:	2000      	movs	r0, #0
     c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     c06:	1e70      	subs	r0, r6, #1
     c08:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
     c0c:	4620      	mov	r0, r4
     c0e:	f001 fef9 	bl	2a04 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
     c12:	4657      	mov	r7, sl
     c14:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     c18:	d028      	beq.n	c6c <CONFIG_BT_RX_STACK_SIZE+0x3d4>
     c1a:	980f      	ldr	r0, [sp, #60]	; 0x3c
     c1c:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
     c20:	1b00      	subs	r0, r0, r4
     c22:	f08b 0301 	eor.w	r3, fp, #1
     c26:	4a74      	ldr	r2, [pc, #464]	; (df8 <CONFIG_BT_RX_STACK_SIZE+0x560>)
     c28:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     c2c:	ebac 0c04 	sub.w	ip, ip, r4
     c30:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
     c34:	4283      	cmp	r3, r0
     c36:	bf98      	it	ls
     c38:	f5b0 0f80 	cmpls.w	r0, #4194304	; 0x400000
     c3c:	d2df      	bcs.n	bfe <CONFIG_BT_RX_STACK_SIZE+0x366>
     c3e:	4562      	cmp	r2, ip
     c40:	d3dd      	bcc.n	bfe <CONFIG_BT_RX_STACK_SIZE+0x366>
     c42:	4620      	mov	r0, r4
     c44:	f00a ff26 	bl	ba94 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
     c48:	4967      	ldr	r1, [pc, #412]	; (de8 <CONFIG_BT_RX_STACK_SIZE+0x550>)
     c4a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
     c4c:	1c4b      	adds	r3, r1, #1
     c4e:	1a16      	subs	r6, r2, r0
     c50:	ebb6 0f93 	cmp.w	r6, r3, lsr #2
     c54:	bf24      	itt	cs
     c56:	eba0 0c02 	subcs.w	ip, r0, r2
     c5a:	ebbc 0f93 	cmpcs.w	ip, r3, lsr #2
     c5e:	d310      	bcc.n	c82 <CONFIG_BT_RX_STACK_SIZE+0x3ea>
     c60:	42b1      	cmp	r1, r6
     c62:	d208      	bcs.n	c76 <CONFIG_BT_RX_STACK_SIZE+0x3de>
     c64:	1a08      	subs	r0, r1, r0
     c66:	4410      	add	r0, r2
     c68:	1c46      	adds	r6, r0, #1
     c6a:	e00a      	b.n	c82 <CONFIG_BT_RX_STACK_SIZE+0x3ea>
     c6c:	f640 212b 	movw	r1, #2603	; 0xa2b
     c70:	2070      	movs	r0, #112	; 0x70
     c72:	f002 fdb1 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     c76:	4561      	cmp	r1, ip
     c78:	d22c      	bcs.n	cd4 <CONFIG_BT_RX_STACK_SIZE+0x43c>
     c7a:	1a89      	subs	r1, r1, r2
     c7c:	4408      	add	r0, r1
     c7e:	1c40      	adds	r0, r0, #1
     c80:	4246      	negs	r6, r0
     c82:	4857      	ldr	r0, [pc, #348]	; (de0 <CONFIG_BT_RX_STACK_SIZE+0x548>)
     c84:	7f80      	ldrb	r0, [r0, #30]
     c86:	b350      	cbz	r0, cde <CONFIG_BT_RX_STACK_SIZE+0x446>
     c88:	4628      	mov	r0, r5
     c8a:	4645      	mov	r5, r8
     c8c:	f04f 0b00 	mov.w	fp, #0
     c90:	46d8      	mov	r8, fp
     c92:	2801      	cmp	r0, #1
     c94:	d005      	beq.n	ca2 <CONFIG_BT_RX_STACK_SIZE+0x40a>
     c96:	2002      	movs	r0, #2
     c98:	f002 f8fc 	bl	2e94 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     c9c:	2001      	movs	r0, #1
     c9e:	f002 f8f9 	bl	2e94 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     ca2:	45a9      	cmp	r9, r5
     ca4:	d22c      	bcs.n	d00 <CONFIG_BT_RX_STACK_SIZE+0x468>
     ca6:	eba6 0105 	sub.w	r1, r6, r5
     caa:	f04f 0301 	mov.w	r3, #1
     cae:	f04f 0203 	mov.w	r2, #3
     cb2:	f04f 0002 	mov.w	r0, #2
     cb6:	f002 f825 	bl	2d04 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     cba:	2800      	cmp	r0, #0
     cbc:	bf08      	it	eq
     cbe:	f04f 0801 	moveq.w	r8, #1
     cc2:	f1b9 0f00 	cmp.w	r9, #0
     cc6:	d035      	beq.n	d34 <CONFIG_BT_RX_STACK_SIZE+0x49c>
     cc8:	2301      	movs	r3, #1
     cca:	eba6 0109 	sub.w	r1, r6, r9
     cce:	2203      	movs	r2, #3
     cd0:	4618      	mov	r0, r3
     cd2:	e023      	b.n	d1c <CONFIG_BT_RX_STACK_SIZE+0x484>
     cd4:	f640 310b 	movw	r1, #2827	; 0xb0b
     cd8:	2070      	movs	r0, #112	; 0x70
     cda:	f002 fd7d 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     cde:	45c1      	cmp	r9, r8
     ce0:	bf34      	ite	cc
     ce2:	4640      	movcc	r0, r8
     ce4:	4648      	movcs	r0, r9
     ce6:	f1bb 0f00 	cmp.w	fp, #0
     cea:	bf14      	ite	ne
     cec:	2100      	movne	r1, #0
     cee:	211e      	moveq	r1, #30
     cf0:	4408      	add	r0, r1
     cf2:	42b0      	cmp	r0, r6
     cf4:	dbc8      	blt.n	c88 <CONFIG_BT_RX_STACK_SIZE+0x3f0>
     cf6:	f640 213e 	movw	r1, #2622	; 0xa3e
     cfa:	2070      	movs	r0, #112	; 0x70
     cfc:	f002 fd6c 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     d00:	d910      	bls.n	d24 <CONFIG_BT_RX_STACK_SIZE+0x48c>
     d02:	2301      	movs	r3, #1
     d04:	eba6 0109 	sub.w	r1, r6, r9
     d08:	2203      	movs	r2, #3
     d0a:	4618      	mov	r0, r3
     d0c:	f001 fffa 	bl	2d04 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     d10:	b328      	cbz	r0, d5e <CONFIG_BT_RX_STACK_SIZE+0x4c6>
     d12:	b17d      	cbz	r5, d34 <CONFIG_BT_RX_STACK_SIZE+0x49c>
     d14:	1b71      	subs	r1, r6, r5
     d16:	2301      	movs	r3, #1
     d18:	2203      	movs	r2, #3
     d1a:	2002      	movs	r0, #2
     d1c:	f001 fff2 	bl	2d04 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     d20:	b1e8      	cbz	r0, d5e <CONFIG_BT_RX_STACK_SIZE+0x4c6>
     d22:	e007      	b.n	d34 <CONFIG_BT_RX_STACK_SIZE+0x49c>
     d24:	ea55 0009 	orrs.w	r0, r5, r9
     d28:	d004      	beq.n	d34 <CONFIG_BT_RX_STACK_SIZE+0x49c>
     d2a:	f640 1176 	movw	r1, #2422	; 0x976
     d2e:	2070      	movs	r0, #112	; 0x70
     d30:	f002 fd52 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     d34:	2301      	movs	r3, #1
     d36:	2203      	movs	r2, #3
     d38:	4631      	mov	r1, r6
     d3a:	2000      	movs	r0, #0
     d3c:	f001 ffe2 	bl	2d04 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     d40:	b168      	cbz	r0, d5e <CONFIG_BT_RX_STACK_SIZE+0x4c6>
     d42:	2501      	movs	r5, #1
     d44:	f1b8 0f00 	cmp.w	r8, #0
     d48:	d003      	beq.n	d52 <CONFIG_BT_RX_STACK_SIZE+0x4ba>
     d4a:	9814      	ldr	r0, [sp, #80]	; 0x50
     d4c:	900f      	str	r0, [sp, #60]	; 0x3c
     d4e:	f88d b04c 	strb.w	fp, [sp, #76]	; 0x4c
     d52:	f8df 80a8 	ldr.w	r8, [pc, #168]	; dfc <CONFIG_BT_RX_STACK_SIZE+0x564>
     d56:	f1ba 0f00 	cmp.w	sl, #0
     d5a:	d10e      	bne.n	d7a <CONFIG_BT_RX_STACK_SIZE+0x4e2>
     d5c:	e009      	b.n	d72 <CONFIG_BT_RX_STACK_SIZE+0x4da>
     d5e:	2002      	movs	r0, #2
     d60:	f002 f898 	bl	2e94 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     d64:	2001      	movs	r0, #1
     d66:	f002 f895 	bl	2e94 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     d6a:	b01b      	add	sp, #108	; 0x6c
     d6c:	2000      	movs	r0, #0
     d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     d72:	481b      	ldr	r0, [pc, #108]	; (de0 <CONFIG_BT_RX_STACK_SIZE+0x548>)
     d74:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
     d78:	b100      	cbz	r0, d7c <CONFIG_BT_RX_STACK_SIZE+0x4e4>
     d7a:	b34f      	cbz	r7, dd0 <CONFIG_BT_RX_STACK_SIZE+0x538>
     d7c:	f8df a060 	ldr.w	sl, [pc, #96]	; de0 <CONFIG_BT_RX_STACK_SIZE+0x548>
     d80:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
     d84:	b118      	cbz	r0, d8e <CONFIG_BT_RX_STACK_SIZE+0x4f6>
     d86:	f002 fb6d 	bl	3464 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
     d8a:	f88a b02c 	strb.w	fp, [sl, #44]	; 0x2c
     d8e:	b307      	cbz	r7, dd2 <CONFIG_BT_RX_STACK_SIZE+0x53a>
     d90:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
     d94:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     d98:	f44f 2000 	mov.w	r0, #524288	; 0x80000
     d9c:	f8c8 0000 	str.w	r0, [r8]
     da0:	2300      	movs	r3, #0
     da2:	2203      	movs	r2, #3
     da4:	2005      	movs	r0, #5
     da6:	f001 ffad 	bl	2d04 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     daa:	b368      	cbz	r0, e08 <CONFIG_BT_RX_STACK_SIZE+0x570>
     dac:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
     db0:	2005      	movs	r0, #5
     db2:	f002 f94f 	bl	3054 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
     db6:	4912      	ldr	r1, [pc, #72]	; (e00 <CONFIG_BT_RX_STACK_SIZE+0x568>)
     db8:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
     dbc:	f8c1 4514 	str.w	r4, [r1, #1300]	; 0x514
     dc0:	4910      	ldr	r1, [pc, #64]	; (e04 <CONFIG_BT_RX_STACK_SIZE+0x56c>)
     dc2:	12e0      	asrs	r0, r4, #11
     dc4:	6008      	str	r0, [r1, #0]
     dc6:	4c06      	ldr	r4, [pc, #24]	; (de0 <CONFIG_BT_RX_STACK_SIZE+0x548>)
     dc8:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
     dcc:	b3f0      	cbz	r0, e4c <CONFIG_BT_RX_STACK_SIZE+0x5b4>
     dce:	e05b      	b.n	e88 <CONFIG_BT_RX_STACK_SIZE+0x5f0>
     dd0:	e01b      	b.n	e0a <CONFIG_BT_RX_STACK_SIZE+0x572>
     dd2:	e01f      	b.n	e14 <CONFIG_BT_RX_STACK_SIZE+0x57c>
     dd4:	40000508 	.word	0x40000508
     dd8:	20000014 	.word	0x20000014
     ddc:	200009c4 	.word	0x200009c4
     de0:	20000d44 	.word	0x20000d44
     de4:	20000016 	.word	0x20000016
     de8:	1e847fff 	.word	0x1e847fff
     dec:	07a12000 	.word	0x07a12000
     df0:	f85ee000 	.word	0xf85ee000
     df4:	1e848000 	.word	0x1e848000
     df8:	003fffff 	.word	0x003fffff
     dfc:	4001f508 	.word	0x4001f508
     e00:	4001f098 	.word	0x4001f098
     e04:	4001f504 	.word	0x4001f504
     e08:	e035      	b.n	e76 <CONFIG_BT_RX_STACK_SIZE+0x5de>
     e0a:	f8df a0b8 	ldr.w	sl, [pc, #184]	; ec4 <CONFIG_BT_RX_STACK_SIZE+0x62c>
     e0e:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
     e12:	b358      	cbz	r0, e6c <CONFIG_BT_RX_STACK_SIZE+0x5d4>
     e14:	4c2b      	ldr	r4, [pc, #172]	; (ec4 <CONFIG_BT_RX_STACK_SIZE+0x62c>)
     e16:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
     e1a:	b150      	cbz	r0, e32 <CONFIG_BT_RX_STACK_SIZE+0x59a>
     e1c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
     e20:	f8c8 0000 	str.w	r0, [r8]
     e24:	2005      	movs	r0, #5
     e26:	f002 f835 	bl	2e94 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     e2a:	f002 fb83 	bl	3534 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
     e2e:	f884 b02d 	strb.w	fp, [r4, #45]	; 0x2d
     e32:	ac0c      	add	r4, sp, #48	; 0x30
     e34:	4824      	ldr	r0, [pc, #144]	; (ec8 <CONFIG_BT_RX_STACK_SIZE+0x630>)
     e36:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
     e3a:	f8c0 1380 	str.w	r1, [r0, #896]	; 0x380
     e3e:	f8c0 2384 	str.w	r2, [r0, #900]	; 0x384
     e42:	f8c0 3388 	str.w	r3, [r0, #904]	; 0x388
     e46:	f8c0 c38c 	str.w	ip, [r0, #908]	; 0x38c
     e4a:	e000      	b.n	e4e <CONFIG_BT_RX_STACK_SIZE+0x5b6>
     e4c:	e018      	b.n	e80 <CONFIG_BT_RX_STACK_SIZE+0x5e8>
     e4e:	ac10      	add	r4, sp, #64	; 0x40
     e50:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
     e54:	f8c0 1390 	str.w	r1, [r0, #912]	; 0x390
     e58:	f8c0 2394 	str.w	r2, [r0, #916]	; 0x394
     e5c:	f8c0 3398 	str.w	r3, [r0, #920]	; 0x398
     e60:	f8c0 c39c 	str.w	ip, [r0, #924]	; 0x39c
     e64:	b01b      	add	sp, #108	; 0x6c
     e66:	2001      	movs	r0, #1
     e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     e6c:	f002 fb16 	bl	349c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
     e70:	f88a 502c 	strb.w	r5, [sl, #44]	; 0x2c
     e74:	e78b      	b.n	d8e <CONFIG_BT_RX_STACK_SIZE+0x4f6>
     e76:	f240 3151 	movw	r1, #849	; 0x351
     e7a:	2070      	movs	r0, #112	; 0x70
     e7c:	f002 fcac 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e80:	f002 fb4a 	bl	3518 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>
     e84:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
     e88:	eba6 0009 	sub.w	r0, r6, r9
     e8c:	f1a0 0119 	sub.w	r1, r0, #25
     e90:	2900      	cmp	r1, #0
     e92:	dc04      	bgt.n	e9e <CONFIG_BT_RX_STACK_SIZE+0x606>
     e94:	f640 2168 	movw	r1, #2664	; 0xa68
     e98:	2070      	movs	r0, #112	; 0x70
     e9a:	f002 fc9d 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e9e:	2203      	movs	r2, #3
     ea0:	2301      	movs	r3, #1
     ea2:	4610      	mov	r0, r2
     ea4:	f001 ff2e 	bl	2d04 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     ea8:	b138      	cbz	r0, eba <CONFIG_BT_RX_STACK_SIZE+0x622>
     eaa:	4808      	ldr	r0, [pc, #32]	; (ecc <CONFIG_BT_RX_STACK_SIZE+0x634>)
     eac:	6880      	ldr	r0, [r0, #8]
     eae:	f8c0 b000 	str.w	fp, [r0]
     eb2:	4807      	ldr	r0, [pc, #28]	; (ed0 <CONFIG_BT_RX_STACK_SIZE+0x638>)
     eb4:	f8c0 b000 	str.w	fp, [r0]
     eb8:	e7bb      	b.n	e32 <CONFIG_BT_RX_STACK_SIZE+0x59a>
     eba:	f640 2173 	movw	r1, #2675	; 0xa73
     ebe:	2070      	movs	r0, #112	; 0x70
     ec0:	f002 fc8a 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     ec4:	20000d44 	.word	0x20000d44
     ec8:	200009c4 	.word	0x200009c4
     ecc:	20000014 	.word	0x20000014
     ed0:	40000508 	.word	0x40000508
     ed4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     ed8:	4606      	mov	r6, r0
     eda:	b083      	sub	sp, #12
     edc:	7808      	ldrb	r0, [r1, #0]
     ede:	7390      	strb	r0, [r2, #14]
     ee0:	7acf      	ldrb	r7, [r1, #11]
     ee2:	7357      	strb	r7, [r2, #13]
     ee4:	7a88      	ldrb	r0, [r1, #10]
     ee6:	7310      	strb	r0, [r2, #12]
     ee8:	8908      	ldrh	r0, [r1, #8]
     eea:	4614      	mov	r4, r2
     eec:	8150      	strh	r0, [r2, #10]
     eee:	460d      	mov	r5, r1
     ef0:	780a      	ldrb	r2, [r1, #0]
     ef2:	495f      	ldr	r1, [pc, #380]	; (1070 <CONFIG_FPROTECT_BLOCK_SIZE+0x70>)
     ef4:	4699      	mov	r9, r3
     ef6:	ea4f 0c81 	mov.w	ip, r1, lsl #2
     efa:	424b      	negs	r3, r1
     efc:	f1ac 0801 	sub.w	r8, ip, #1
     f00:	b15a      	cbz	r2, f1a <CONFIG_BT_RX_STACK_SIZE+0x682>
     f02:	43c0      	mvns	r0, r0
     f04:	f8d5 8004 	ldr.w	r8, [r5, #4]
     f08:	f104 0208 	add.w	r2, r4, #8
     f0c:	4288      	cmp	r0, r1
     f0e:	dd3d      	ble.n	f8c <CONFIG_BT_RX_STACK_SIZE+0x6f4>
     f10:	f240 6117 	movw	r1, #1559	; 0x617
     f14:	2070      	movs	r0, #112	; 0x70
     f16:	f002 fc5f 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     f1a:	68ee      	ldr	r6, [r5, #12]
     f1c:	686d      	ldr	r5, [r5, #4]
     f1e:	ea6f 0900 	mvn.w	r9, r0
     f22:	f104 0208 	add.w	r2, r4, #8
     f26:	eb06 0009 	add.w	r0, r6, r9
     f2a:	4546      	cmp	r6, r8
     f2c:	d904      	bls.n	f38 <CONFIG_BT_RX_STACK_SIZE+0x6a0>
     f2e:	f240 6116 	movw	r1, #1558	; 0x616
     f32:	2070      	movs	r0, #112	; 0x70
     f34:	f002 fc50 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     f38:	4589      	cmp	r9, r1
     f3a:	dce9      	bgt.n	f10 <CONFIG_BT_RX_STACK_SIZE+0x678>
     f3c:	4599      	cmp	r9, r3
     f3e:	db28      	blt.n	f92 <CONFIG_BT_RX_STACK_SIZE+0x6fa>
     f40:	4584      	cmp	ip, r0
     f42:	bfdc      	itt	le
     f44:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
     f48:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
     f4c:	dd05      	ble.n	f5a <CONFIG_BT_RX_STACK_SIZE+0x6c2>
     f4e:	2800      	cmp	r0, #0
     f50:	bfbc      	itt	lt
     f52:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
     f56:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
     f5a:	4621      	mov	r1, r4
     f5c:	f001 fbf6 	bl	274c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     f60:	6820      	ldr	r0, [r4, #0]
     f62:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     f66:	1970      	adds	r0, r6, r5
     f68:	1c40      	adds	r0, r0, #1
     f6a:	6021      	str	r1, [r4, #0]
     f6c:	2f00      	cmp	r7, #0
     f6e:	bf08      	it	eq
     f70:	307a      	addeq	r0, #122	; 0x7a
     f72:	d003      	beq.n	f7c <CONFIG_BT_RX_STACK_SIZE+0x6e4>
     f74:	2f01      	cmp	r7, #1
     f76:	bf08      	it	eq
     f78:	3044      	addeq	r0, #68	; 0x44
     f7a:	d12d      	bne.n	fd8 <CONFIG_BT_RX_STACK_SIZE+0x740>
     f7c:	f001 fbca 	bl	2714 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     f80:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     f84:	6060      	str	r0, [r4, #4]
     f86:	b003      	add	sp, #12
     f88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     f8c:	4601      	mov	r1, r0
     f8e:	4298      	cmp	r0, r3
     f90:	da04      	bge.n	f9c <CONFIG_BT_RX_STACK_SIZE+0x704>
     f92:	f44f 61c3 	mov.w	r1, #1560	; 0x618
     f96:	2070      	movs	r0, #112	; 0x70
     f98:	f002 fc1e 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     f9c:	4584      	cmp	ip, r0
     f9e:	bfdc      	itt	le
     fa0:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
     fa4:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
     fa8:	dd05      	ble.n	fb6 <CONFIG_BT_RX_STACK_SIZE+0x71e>
     faa:	2800      	cmp	r0, #0
     fac:	bfbc      	itt	lt
     fae:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
     fb2:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
     fb6:	4621      	mov	r1, r4
     fb8:	f001 fbc8 	bl	274c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     fbc:	6820      	ldr	r0, [r4, #0]
     fbe:	2f00      	cmp	r7, #0
     fc0:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     fc4:	f108 0001 	add.w	r0, r8, #1
     fc8:	6021      	str	r1, [r4, #0]
     fca:	bf08      	it	eq
     fcc:	307a      	addeq	r0, #122	; 0x7a
     fce:	d008      	beq.n	fe2 <CONFIG_BT_RX_STACK_SIZE+0x74a>
     fd0:	2f01      	cmp	r7, #1
     fd2:	bf08      	it	eq
     fd4:	3044      	addeq	r0, #68	; 0x44
     fd6:	d004      	beq.n	fe2 <CONFIG_BT_RX_STACK_SIZE+0x74a>
     fd8:	f240 61be 	movw	r1, #1726	; 0x6be
     fdc:	2070      	movs	r0, #112	; 0x70
     fde:	f002 fbfb 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     fe2:	f001 fb97 	bl	2714 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     fe6:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     fea:	6061      	str	r1, [r4, #4]
     fec:	8960      	ldrh	r0, [r4, #10]
     fee:	aa01      	add	r2, sp, #4
     ff0:	4669      	mov	r1, sp
     ff2:	f001 fbab 	bl	274c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     ff6:	481f      	ldr	r0, [pc, #124]	; (1074 <CONFIG_FPROTECT_BLOCK_SIZE+0x74>)
     ff8:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
     ffc:	2920      	cmp	r1, #32
     ffe:	d023      	beq.n	1048 <CONFIG_FPROTECT_BLOCK_SIZE+0x48>
    1000:	6900      	ldr	r0, [r0, #16]
    1002:	1d40      	adds	r0, r0, #5
    1004:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1008:	e9d4 2100 	ldrd	r2, r1, [r4]
    100c:	1a89      	subs	r1, r1, r2
    100e:	6020      	str	r0, [r4, #0]
    1010:	4408      	add	r0, r1
    1012:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1016:	6060      	str	r0, [r4, #4]
    1018:	464b      	mov	r3, r9
    101a:	4632      	mov	r2, r6
    101c:	4621      	mov	r1, r4
    101e:	68e8      	ldr	r0, [r5, #12]
    1020:	f7ff fad2 	bl	5c8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x94>
    1024:	2800      	cmp	r0, #0
    1026:	bf1c      	itt	ne
    1028:	b003      	addne	sp, #12
    102a:	e8bd 83f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    102e:	e9d4 1000 	ldrd	r1, r0, [r4]
    1032:	1a40      	subs	r0, r0, r1
    1034:	4430      	add	r0, r6
    1036:	f026 417f 	bic.w	r1, r6, #4278190080	; 0xff000000
    103a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    103e:	e9c4 1000 	strd	r1, r0, [r4]
    1042:	b003      	add	sp, #12
    1044:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1048:	8960      	ldrh	r0, [r4, #10]
    104a:	f106 0709 	add.w	r7, r6, #9
    104e:	b120      	cbz	r0, 105a <CONFIG_FPROTECT_BLOCK_SIZE+0x5a>
    1050:	f002 fb5e 	bl	3710 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1054:	2800      	cmp	r0, #0
    1056:	bf08      	it	eq
    1058:	3732      	addeq	r7, #50	; 0x32
    105a:	4807      	ldr	r0, [pc, #28]	; (1078 <CONFIG_FPROTECT_BLOCK_SIZE+0x78>)
    105c:	7841      	ldrb	r1, [r0, #1]
    105e:	9800      	ldr	r0, [sp, #0]
    1060:	4281      	cmp	r1, r0
    1062:	bf84      	itt	hi
    1064:	1a08      	subhi	r0, r1, r0
    1066:	4407      	addhi	r7, r0
    1068:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
    106c:	e7cc      	b.n	1008 <CONFIG_FPROTECT_BLOCK_SIZE+0x8>
    106e:	0000      	.short	0x0000
    1070:	07a12000 	.word	0x07a12000
    1074:	20000d44 	.word	0x20000d44
    1078:	20000016 	.word	0x20000016
    107c:	b510      	push	{r4, lr}
    107e:	4c15      	ldr	r4, [pc, #84]	; (10d4 <CONFIG_FPROTECT_BLOCK_SIZE+0xd4>)
    1080:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1084:	2820      	cmp	r0, #32
    1086:	bf18      	it	ne
    1088:	bd10      	popne	{r4, pc}
    108a:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    108e:	eb04 0082 	add.w	r0, r4, r2, lsl #2
    1092:	f890 1020 	ldrb.w	r1, [r0, #32]
    1096:	2920      	cmp	r1, #32
    1098:	d017      	beq.n	10ca <CONFIG_FPROTECT_BLOCK_SIZE+0xca>
    109a:	f8df c03c 	ldr.w	ip, [pc, #60]	; 10d8 <CONFIG_FPROTECT_BLOCK_SIZE+0xd8>
    109e:	eb0c 1382 	add.w	r3, ip, r2, lsl #6
    10a2:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    10a6:	785b      	ldrb	r3, [r3, #1]
    10a8:	f880 3020 	strb.w	r3, [r0, #32]
    10ac:	2301      	movs	r3, #1
    10ae:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
    10b2:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
    10b6:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    10ba:	2002      	movs	r0, #2
    10bc:	f000 f8b0 	bl	1220 <CONFIG_FPROTECT_BLOCK_SIZE+0x220>
    10c0:	2000      	movs	r0, #0
    10c2:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
    10c6:	77a0      	strb	r0, [r4, #30]
    10c8:	bd10      	pop	{r4, pc}
    10ca:	f240 319e 	movw	r1, #926	; 0x39e
    10ce:	2070      	movs	r0, #112	; 0x70
    10d0:	f002 fb82 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    10d4:	20000d44 	.word	0x20000d44
    10d8:	20000cc4 	.word	0x20000cc4
    10dc:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    10e0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 119c <CONFIG_FPROTECT_BLOCK_SIZE+0x19c>
    10e4:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    10e8:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    10ec:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    10f0:	2c20      	cmp	r4, #32
    10f2:	bf08      	it	eq
    10f4:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    10f8:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 11a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a0>
    10fc:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 11a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a4>
    1100:	f5aa 7940 	sub.w	r9, sl, #768	; 0x300
    1104:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
    1108:	2607      	movs	r6, #7
    110a:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    110e:	2801      	cmp	r0, #1
    1110:	d00e      	beq.n	1130 <CONFIG_FPROTECT_BLOCK_SIZE+0x130>
    1112:	2804      	cmp	r0, #4
    1114:	bf08      	it	eq
    1116:	2602      	moveq	r6, #2
    1118:	d00a      	beq.n	1130 <CONFIG_FPROTECT_BLOCK_SIZE+0x130>
    111a:	2805      	cmp	r0, #5
    111c:	bf0c      	ite	eq
    111e:	2603      	moveq	r6, #3
    1120:	2806      	cmpne	r0, #6
    1122:	d005      	beq.n	1130 <CONFIG_FPROTECT_BLOCK_SIZE+0x130>
    1124:	f640 01d8 	movw	r1, #2264	; 0x8d8
    1128:	f04f 0070 	mov.w	r0, #112	; 0x70
    112c:	f002 fb54 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1130:	f1bb 0f00 	cmp.w	fp, #0
    1134:	bf18      	it	ne
    1136:	f3af 8000 	nopne.w
    113a:	f3ef 8010 	mrs	r0, PRIMASK
    113e:	b672      	cpsid	i
    1140:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    1144:	784a      	ldrb	r2, [r1, #1]
    1146:	eb08 0185 	add.w	r1, r8, r5, lsl #2
    114a:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    114e:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    1152:	42a2      	cmp	r2, r4
    1154:	bf04      	itt	eq
    1156:	2220      	moveq	r2, #32
    1158:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    115c:	b1b8      	cbz	r0, 118e <CONFIG_FPROTECT_BLOCK_SIZE+0x18e>
    115e:	462a      	mov	r2, r5
    1160:	4621      	mov	r1, r4
    1162:	2001      	movs	r0, #1
    1164:	f000 f85c 	bl	1220 <CONFIG_FPROTECT_BLOCK_SIZE+0x220>
    1168:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    116c:	eb09 00c1 	add.w	r0, r9, r1, lsl #3
    1170:	f859 2031 	ldr.w	r2, [r9, r1, lsl #3]
    1174:	6840      	ldr	r0, [r0, #4]
    1176:	4631      	mov	r1, r6
    1178:	4790      	blx	r2
    117a:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    117e:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    1182:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    1186:	2c20      	cmp	r4, #32
    1188:	d1bc      	bne.n	1104 <CONFIG_FPROTECT_BLOCK_SIZE+0x104>
    118a:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    118e:	4806      	ldr	r0, [pc, #24]	; (11a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a8>)
    1190:	2800      	cmp	r0, #0
    1192:	bf18      	it	ne
    1194:	f3af 8000 	nopne.w
    1198:	b662      	cpsie	i
    119a:	e7e0      	b.n	115e <CONFIG_FPROTECT_BLOCK_SIZE+0x15e>
    119c:	20000d44 	.word	0x20000d44
    11a0:	00000000 	.word	0x00000000
    11a4:	20000cc4 	.word	0x20000cc4
    11a8:	00000000 	.word	0x00000000
    11ac:	b510      	push	{r4, lr}
    11ae:	4604      	mov	r4, r0
    11b0:	6800      	ldr	r0, [r0, #0]
    11b2:	f00a fc6f 	bl	ba94 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    11b6:	4602      	mov	r2, r0
    11b8:	8960      	ldrh	r0, [r4, #10]
    11ba:	7a21      	ldrb	r1, [r4, #8]
    11bc:	4b14      	ldr	r3, [pc, #80]	; (1210 <CONFIG_FPROTECT_BLOCK_SIZE+0x210>)
    11be:	4408      	add	r0, r1
    11c0:	1c41      	adds	r1, r0, #1
    11c2:	1850      	adds	r0, r2, r1
    11c4:	429a      	cmp	r2, r3
    11c6:	d904      	bls.n	11d2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d2>
    11c8:	f240 6116 	movw	r1, #1558	; 0x616
    11cc:	2070      	movs	r0, #112	; 0x70
    11ce:	f002 fb03 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    11d2:	4a10      	ldr	r2, [pc, #64]	; (1214 <CONFIG_FPROTECT_BLOCK_SIZE+0x214>)
    11d4:	4291      	cmp	r1, r2
    11d6:	dd04      	ble.n	11e2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e2>
    11d8:	f240 6117 	movw	r1, #1559	; 0x617
    11dc:	2070      	movs	r0, #112	; 0x70
    11de:	f002 fafb 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    11e2:	4a0d      	ldr	r2, [pc, #52]	; (1218 <CONFIG_FPROTECT_BLOCK_SIZE+0x218>)
    11e4:	4291      	cmp	r1, r2
    11e6:	da04      	bge.n	11f2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1f2>
    11e8:	f44f 61c3 	mov.w	r1, #1560	; 0x618
    11ec:	2070      	movs	r0, #112	; 0x70
    11ee:	f002 faf3 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    11f2:	490a      	ldr	r1, [pc, #40]	; (121c <CONFIG_FPROTECT_BLOCK_SIZE+0x21c>)
    11f4:	4281      	cmp	r1, r0
    11f6:	bfde      	ittt	le
    11f8:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    11fc:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1200:	bd10      	pople	{r4, pc}
    1202:	2800      	cmp	r0, #0
    1204:	bfbc      	itt	lt
    1206:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    120a:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    120e:	bd10      	pop	{r4, pc}
    1210:	1e847fff 	.word	0x1e847fff
    1214:	07a12000 	.word	0x07a12000
    1218:	f85ee000 	.word	0xf85ee000
    121c:	1e848000 	.word	0x1e848000
    1220:	f8df c054 	ldr.w	ip, [pc, #84]	; 1278 <CONFIG_FPROTECT_BLOCK_SIZE+0x278>
    1224:	b510      	push	{r4, lr}
    1226:	2300      	movs	r3, #0
    1228:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    122c:	2807      	cmp	r0, #7
    122e:	d21e      	bcs.n	126e <CONFIG_FPROTECT_BLOCK_SIZE+0x26e>
    1230:	e8df f000 	tbb	[pc, r0]
    1234:	05050505 	.word	0x05050505
    1238:	00040404 	.word	0x00040404
    123c:	2301      	movs	r3, #1
    123e:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    1242:	2b00      	cmp	r3, #0
    1244:	bf08      	it	eq
    1246:	bd10      	popeq	{r4, pc}
    1248:	480c      	ldr	r0, [pc, #48]	; (127c <CONFIG_FPROTECT_BLOCK_SIZE+0x27c>)
    124a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    124e:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    1252:	2820      	cmp	r0, #32
    1254:	bf0e      	itee	eq
    1256:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    125a:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    125e:	7041      	strbne	r1, [r0, #1]
    1260:	2020      	movs	r0, #32
    1262:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    1266:	7058      	strb	r0, [r3, #1]
    1268:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    126c:	bd10      	pop	{r4, pc}
    126e:	f240 2167 	movw	r1, #615	; 0x267
    1272:	2070      	movs	r0, #112	; 0x70
    1274:	f002 fab0 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1278:	20000cc4 	.word	0x20000cc4
    127c:	20000d44 	.word	0x20000d44
    1280:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1284:	b083      	sub	sp, #12
    1286:	485c      	ldr	r0, [pc, #368]	; (13f8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x70>)
    1288:	9904      	ldr	r1, [sp, #16]
    128a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    128e:	9001      	str	r0, [sp, #4]
    1290:	f890 4020 	ldrb.w	r4, [r0, #32]
    1294:	9803      	ldr	r0, [sp, #12]
    1296:	4625      	mov	r5, r4
    1298:	2801      	cmp	r0, #1
    129a:	bf18      	it	ne
    129c:	2802      	cmpne	r0, #2
    129e:	d005      	beq.n	12ac <CONFIG_FPROTECT_BLOCK_SIZE+0x2ac>
    12a0:	f640 21af 	movw	r1, #2735	; 0xaaf
    12a4:	f04f 0070 	mov.w	r0, #112	; 0x70
    12a8:	f002 fa96 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    12ac:	2700      	movs	r7, #0
    12ae:	2d20      	cmp	r5, #32
    12b0:	d04a      	beq.n	1348 <CONFIG_FPROTECT_BLOCK_SIZE+0x348>
    12b2:	4851      	ldr	r0, [pc, #324]	; (13f8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x70>)
    12b4:	9100      	str	r1, [sp, #0]
    12b6:	2600      	movs	r6, #0
    12b8:	7f80      	ldrb	r0, [r0, #30]
    12ba:	2800      	cmp	r0, #0
    12bc:	bf08      	it	eq
    12be:	2602      	moveq	r6, #2
    12c0:	f001 fb9a 	bl	29f8 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    12c4:	f8df a138 	ldr.w	sl, [pc, #312]	; 1400 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x78>
    12c8:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    12cc:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
    12d0:	f8df 9128 	ldr.w	r9, [pc, #296]	; 13fc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x74>
    12d4:	688a      	ldr	r2, [r1, #8]
    12d6:	68c9      	ldr	r1, [r1, #12]
    12d8:	1a12      	subs	r2, r2, r0
    12da:	1a09      	subs	r1, r1, r0
    12dc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    12e0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    12e4:	4296      	cmp	r6, r2
    12e6:	bf98      	it	ls
    12e8:	f5b2 0f80 	cmpls.w	r2, #4194304	; 0x400000
    12ec:	d201      	bcs.n	12f2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f2>
    12ee:	4589      	cmp	r9, r1
    12f0:	d228      	bcs.n	1344 <CONFIG_FPROTECT_BLOCK_SIZE+0x344>
    12f2:	4a44      	ldr	r2, [pc, #272]	; (1404 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7c>)
    12f4:	9900      	ldr	r1, [sp, #0]
    12f6:	eb02 1b81 	add.w	fp, r2, r1, lsl #6
    12fa:	4622      	mov	r2, r4
    12fc:	eb0b 0142 	add.w	r1, fp, r2, lsl #1
    1300:	784c      	ldrb	r4, [r1, #1]
    1302:	2c20      	cmp	r4, #32
    1304:	d016      	beq.n	1334 <CONFIG_FPROTECT_BLOCK_SIZE+0x334>
    1306:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    130a:	eb0a 0cc1 	add.w	ip, sl, r1, lsl #3
    130e:	f8dc 8008 	ldr.w	r8, [ip, #8]
    1312:	f8dc c00c 	ldr.w	ip, [ip, #12]
    1316:	eba8 0800 	sub.w	r8, r8, r0
    131a:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    131e:	ebac 0100 	sub.w	r1, ip, r0
    1322:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1326:	4546      	cmp	r6, r8
    1328:	bf98      	it	ls
    132a:	f5b8 0f80 	cmpls.w	r8, #4194304	; 0x400000
    132e:	d2e4      	bcs.n	12fa <CONFIG_FPROTECT_BLOCK_SIZE+0x2fa>
    1330:	4589      	cmp	r9, r1
    1332:	d3e2      	bcc.n	12fa <CONFIG_FPROTECT_BLOCK_SIZE+0x2fa>
    1334:	2a20      	cmp	r2, #32
    1336:	d005      	beq.n	1344 <CONFIG_FPROTECT_BLOCK_SIZE+0x344>
    1338:	2120      	movs	r1, #32
    133a:	2004      	movs	r0, #4
    133c:	9b00      	ldr	r3, [sp, #0]
    133e:	f7ff f907 	bl	550 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    1342:	4604      	mov	r4, r0
    1344:	42ac      	cmp	r4, r5
    1346:	d115      	bne.n	1374 <CONFIG_FPROTECT_BLOCK_SIZE+0x374>
    1348:	482f      	ldr	r0, [pc, #188]	; (1408 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x80>)
    134a:	2800      	cmp	r0, #0
    134c:	bf18      	it	ne
    134e:	f3af 8000 	nopne.w
    1352:	f001 fb51 	bl	29f8 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1356:	4c28      	ldr	r4, [pc, #160]	; (13f8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x70>)
    1358:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
    135c:	2920      	cmp	r1, #32
    135e:	d00d      	beq.n	137c <CONFIG_FPROTECT_BLOCK_SIZE+0x37c>
    1360:	68e1      	ldr	r1, [r4, #12]
    1362:	1c82      	adds	r2, r0, #2
    1364:	1a51      	subs	r1, r2, r1
    1366:	0209      	lsls	r1, r1, #8
    1368:	17ca      	asrs	r2, r1, #31
    136a:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    136e:	1209      	asrs	r1, r1, #8
    1370:	2900      	cmp	r1, #0
    1372:	dd03      	ble.n	137c <CONFIG_FPROTECT_BLOCK_SIZE+0x37c>
    1374:	b005      	add	sp, #20
    1376:	2000      	movs	r0, #0
    1378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    137c:	2d20      	cmp	r5, #32
    137e:	d00d      	beq.n	139c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x14>
    1380:	462a      	mov	r2, r5
    1382:	9903      	ldr	r1, [sp, #12]
    1384:	f7ff fb16 	bl	9b4 <CONFIG_BT_RX_STACK_SIZE+0x11c>
    1388:	b358      	cbz	r0, 13e2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5a>
    138a:	9801      	ldr	r0, [sp, #4]
    138c:	f880 7023 	strb.w	r7, [r0, #35]	; 0x23
    1390:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    1394:	b005      	add	sp, #20
    1396:	2001      	movs	r0, #1
    1398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    139c:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    13a0:	b118      	cbz	r0, 13aa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x22>
    13a2:	f002 f85f 	bl	3464 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    13a6:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
    13aa:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    13ae:	b150      	cbz	r0, 13c6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3e>
    13b0:	4916      	ldr	r1, [pc, #88]	; (140c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x84>)
    13b2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    13b6:	6008      	str	r0, [r1, #0]
    13b8:	2005      	movs	r0, #5
    13ba:	f001 fd6b 	bl	2e94 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    13be:	f002 f8b9 	bl	3534 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    13c2:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
    13c6:	2004      	movs	r0, #4
    13c8:	f001 fd64 	bl	2e94 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    13cc:	f001 fdca 	bl	2f64 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    13d0:	2020      	movs	r0, #32
    13d2:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    13d6:	480e      	ldr	r0, [pc, #56]	; (1410 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x88>)
    13d8:	6880      	ldr	r0, [r0, #8]
    13da:	6007      	str	r7, [r0, #0]
    13dc:	480d      	ldr	r0, [pc, #52]	; (1414 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8c>)
    13de:	6007      	str	r7, [r0, #0]
    13e0:	e7d8      	b.n	1394 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc>
    13e2:	462a      	mov	r2, r5
    13e4:	2120      	movs	r1, #32
    13e6:	2004      	movs	r0, #4
    13e8:	9b04      	ldr	r3, [sp, #16]
    13ea:	f7ff f8b1 	bl	550 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    13ee:	b005      	add	sp, #20
    13f0:	2000      	movs	r0, #0
    13f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    13f6:	0000      	.short	0x0000
    13f8:	20000d44 	.word	0x20000d44
    13fc:	003fffff 	.word	0x003fffff
    1400:	200009c4 	.word	0x200009c4
    1404:	20000cc4 	.word	0x20000cc4
    1408:	00000000 	.word	0x00000000
    140c:	4001f508 	.word	0x4001f508
    1410:	20000014 	.word	0x20000014
    1414:	40000508 	.word	0x40000508

00001418 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    1418:	4906      	ldr	r1, [pc, #24]	; (1434 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    141a:	b510      	push	{r4, lr}
    141c:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
    1420:	2a20      	cmp	r2, #32
    1422:	bf1c      	itt	ne
    1424:	7788      	strbne	r0, [r1, #30]
    1426:	bd10      	popne	{r4, pc}
    1428:	f240 31fd 	movw	r1, #1021	; 0x3fd
    142c:	2070      	movs	r0, #112	; 0x70
    142e:	f002 f9d3 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1432:	0000      	.short	0x0000
    1434:	20000d44 	.word	0x20000d44

00001438 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    1438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    143c:	4e5b      	ldr	r6, [pc, #364]	; (15ac <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x174>)
    143e:	4681      	mov	r9, r0
    1440:	b085      	sub	sp, #20
    1442:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    1446:	468a      	mov	sl, r1
    1448:	2820      	cmp	r0, #32
    144a:	d04d      	beq.n	14e8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xb0>
    144c:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    1450:	f106 040c 	add.w	r4, r6, #12
    1454:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1458:	f5a6 7860 	sub.w	r8, r6, #896	; 0x380
    145c:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    1460:	2020      	movs	r0, #32
    1462:	f88d 0000 	strb.w	r0, [sp]
    1466:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    146a:	aa03      	add	r2, sp, #12
    146c:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    1470:	a901      	add	r1, sp, #4
    1472:	f890 5020 	ldrb.w	r5, [r0, #32]
    1476:	6930      	ldr	r0, [r6, #16]
    1478:	9002      	str	r0, [sp, #8]
    147a:	6830      	ldr	r0, [r6, #0]
    147c:	4448      	add	r0, r9
    147e:	f001 f965 	bl	274c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1482:	68f8      	ldr	r0, [r7, #12]
    1484:	9901      	ldr	r1, [sp, #4]
    1486:	4a4a      	ldr	r2, [pc, #296]	; (15b0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x178>)
    1488:	4408      	add	r0, r1
    148a:	f1a9 0164 	sub.w	r1, r9, #100	; 0x64
    148e:	4291      	cmp	r1, r2
    1490:	d82f      	bhi.n	14f2 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xba>
    1492:	68b9      	ldr	r1, [r7, #8]
    1494:	1a41      	subs	r1, r0, r1
    1496:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    149a:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    149e:	d228      	bcs.n	14f2 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xba>
    14a0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    14a4:	6060      	str	r0, [r4, #4]
    14a6:	4630      	mov	r0, r6
    14a8:	f884 a00c 	strb.w	sl, [r4, #12]
    14ac:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
    14b0:	46ea      	mov	sl, sp
    14b2:	2d20      	cmp	r5, #32
    14b4:	bf1c      	itt	ne
    14b6:	493f      	ldrne	r1, [pc, #252]	; (15b4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x17c>)
    14b8:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    14bc:	d03c      	beq.n	1538 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    14be:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    14c2:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    14c6:	6860      	ldr	r0, [r4, #4]
    14c8:	68ba      	ldr	r2, [r7, #8]
    14ca:	4621      	mov	r1, r4
    14cc:	1a10      	subs	r0, r2, r0
    14ce:	0200      	lsls	r0, r0, #8
    14d0:	17c2      	asrs	r2, r0, #31
    14d2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    14d6:	f107 0608 	add.w	r6, r7, #8
    14da:	1200      	asrs	r0, r0, #8
    14dc:	d41b      	bmi.n	1516 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xde>
    14de:	8970      	ldrh	r0, [r6, #10]
    14e0:	b350      	cbz	r0, 1538 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    14e2:	8948      	ldrh	r0, [r1, #10]
    14e4:	b148      	cbz	r0, 14fa <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc2>
    14e6:	e027      	b.n	1538 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    14e8:	f640 3173 	movw	r1, #2931	; 0xb73
    14ec:	2070      	movs	r0, #112	; 0x70
    14ee:	f002 f973 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    14f2:	b005      	add	sp, #20
    14f4:	2001      	movs	r0, #1
    14f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    14fa:	4620      	mov	r0, r4
    14fc:	f7ff fe56 	bl	11ac <CONFIG_FPROTECT_BLOCK_SIZE+0x1ac>
    1500:	f001 f908 	bl	2714 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1504:	6831      	ldr	r1, [r6, #0]
    1506:	1a08      	subs	r0, r1, r0
    1508:	0200      	lsls	r0, r0, #8
    150a:	17c1      	asrs	r1, r0, #31
    150c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1510:	1200      	asrs	r0, r0, #8
    1512:	2833      	cmp	r0, #51	; 0x33
    1514:	da10      	bge.n	1538 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    1516:	f88a 5000 	strb.w	r5, [sl]
    151a:	7d39      	ldrb	r1, [r7, #20]
    151c:	7b20      	ldrb	r0, [r4, #12]
    151e:	4281      	cmp	r1, r0
    1520:	d805      	bhi.n	152e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xf6>
    1522:	9802      	ldr	r0, [sp, #8]
    1524:	6060      	str	r0, [r4, #4]
    1526:	b005      	add	sp, #20
    1528:	2002      	movs	r0, #2
    152a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    152e:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1532:	7845      	ldrb	r5, [r0, #1]
    1534:	2d20      	cmp	r5, #32
    1536:	d1c2      	bne.n	14be <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x86>
    1538:	2005      	movs	r0, #5
    153a:	f001 fcab 	bl	2e94 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    153e:	4c1b      	ldr	r4, [pc, #108]	; (15ac <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x174>)
    1540:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1544:	60a0      	str	r0, [r4, #8]
    1546:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    154a:	f89d 2000 	ldrb.w	r2, [sp]
    154e:	2120      	movs	r1, #32
    1550:	2a20      	cmp	r2, #32
    1552:	bf13      	iteet	ne
    1554:	2005      	movne	r0, #5
    1556:	eb04 0083 	addeq.w	r0, r4, r3, lsl #2
    155a:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    155e:	f7fe fff7 	blne	550 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    1562:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    1566:	4913      	ldr	r1, [pc, #76]	; (15b4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x17c>)
    1568:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    156c:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
    1570:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    1574:	7048      	strb	r0, [r1, #1]
    1576:	6820      	ldr	r0, [r4, #0]
    1578:	4448      	add	r0, r9
    157a:	6020      	str	r0, [r4, #0]
    157c:	2001      	movs	r0, #1
    157e:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    1582:	7e60      	ldrb	r0, [r4, #25]
    1584:	2801      	cmp	r0, #1
    1586:	d105      	bne.n	1594 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x15c>
    1588:	6920      	ldr	r0, [r4, #16]
    158a:	1e40      	subs	r0, r0, #1
    158c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1590:	f001 fad2 	bl	2b38 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    1594:	f89d 0000 	ldrb.w	r0, [sp]
    1598:	2820      	cmp	r0, #32
    159a:	d003      	beq.n	15a4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x16c>
    159c:	4806      	ldr	r0, [pc, #24]	; (15b8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x180>)
    159e:	7840      	ldrb	r0, [r0, #1]
    15a0:	f002 f9ea 	bl	3978 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    15a4:	b005      	add	sp, #20
    15a6:	2000      	movs	r0, #0
    15a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    15ac:	20000d44 	.word	0x20000d44
    15b0:	07a11f9c 	.word	0x07a11f9c
    15b4:	20000cc4 	.word	0x20000cc4
    15b8:	20000014 	.word	0x20000014

000015bc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>:
    15bc:	4602      	mov	r2, r0
    15be:	4b14      	ldr	r3, [pc, #80]	; (1610 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x54>)
    15c0:	b510      	push	{r4, lr}
    15c2:	4408      	add	r0, r1
    15c4:	429a      	cmp	r2, r3
    15c6:	d904      	bls.n	15d2 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x16>
    15c8:	f240 6116 	movw	r1, #1558	; 0x616
    15cc:	2070      	movs	r0, #112	; 0x70
    15ce:	f002 f903 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    15d2:	4a10      	ldr	r2, [pc, #64]	; (1614 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x58>)
    15d4:	4291      	cmp	r1, r2
    15d6:	dd04      	ble.n	15e2 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x26>
    15d8:	f240 6117 	movw	r1, #1559	; 0x617
    15dc:	2070      	movs	r0, #112	; 0x70
    15de:	f002 f8fb 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    15e2:	4a0d      	ldr	r2, [pc, #52]	; (1618 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x5c>)
    15e4:	4291      	cmp	r1, r2
    15e6:	da04      	bge.n	15f2 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x36>
    15e8:	f44f 61c3 	mov.w	r1, #1560	; 0x618
    15ec:	2070      	movs	r0, #112	; 0x70
    15ee:	f002 f8f3 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    15f2:	490a      	ldr	r1, [pc, #40]	; (161c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x60>)
    15f4:	4281      	cmp	r1, r0
    15f6:	bfde      	ittt	le
    15f8:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    15fc:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1600:	bd10      	pople	{r4, pc}
    1602:	2800      	cmp	r0, #0
    1604:	bfbc      	itt	lt
    1606:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    160a:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    160e:	bd10      	pop	{r4, pc}
    1610:	1e847fff 	.word	0x1e847fff
    1614:	07a12000 	.word	0x07a12000
    1618:	f85ee000 	.word	0xf85ee000
    161c:	1e848000 	.word	0x1e848000

00001620 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>:
    1620:	4a10      	ldr	r2, [pc, #64]	; (1664 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x44>)
    1622:	1a0b      	subs	r3, r1, r0
    1624:	f102 0c01 	add.w	ip, r2, #1
    1628:	ebb3 0f9c 	cmp.w	r3, ip, lsr #2
    162c:	bf3c      	itt	cc
    162e:	4618      	movcc	r0, r3
    1630:	4770      	bxcc	lr
    1632:	b510      	push	{r4, lr}
    1634:	1a44      	subs	r4, r0, r1
    1636:	ebb4 0f9c 	cmp.w	r4, ip, lsr #2
    163a:	bf3c      	itt	cc
    163c:	4618      	movcc	r0, r3
    163e:	bd10      	popcc	{r4, pc}
    1640:	429a      	cmp	r2, r3
    1642:	d203      	bcs.n	164c <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x2c>
    1644:	1a10      	subs	r0, r2, r0
    1646:	4408      	add	r0, r1
    1648:	1c40      	adds	r0, r0, #1
    164a:	bd10      	pop	{r4, pc}
    164c:	42a2      	cmp	r2, r4
    164e:	d204      	bcs.n	165a <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x3a>
    1650:	1a51      	subs	r1, r2, r1
    1652:	4408      	add	r0, r1
    1654:	1c40      	adds	r0, r0, #1
    1656:	4240      	negs	r0, r0
    1658:	bd10      	pop	{r4, pc}
    165a:	f640 310b 	movw	r1, #2827	; 0xb0b
    165e:	2070      	movs	r0, #112	; 0x70
    1660:	f002 f8ba 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1664:	1e847fff 	.word	0x1e847fff

00001668 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>:
    1668:	4907      	ldr	r1, [pc, #28]	; (1688 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x20>)
    166a:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
    166e:	4282      	cmp	r2, r0
    1670:	bf04      	itt	eq
    1672:	6848      	ldreq	r0, [r1, #4]
    1674:	4770      	bxeq	lr
    1676:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    167a:	4904      	ldr	r1, [pc, #16]	; (168c <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x24>)
    167c:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    1680:	3008      	adds	r0, #8
    1682:	f7ff bd93 	b.w	11ac <CONFIG_FPROTECT_BLOCK_SIZE+0x1ac>
    1686:	0000      	.short	0x0000
    1688:	20000d44 	.word	0x20000d44
    168c:	200009c4 	.word	0x200009c4

00001690 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>:
    1690:	490e      	ldr	r1, [pc, #56]	; (16cc <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x3c>)
    1692:	b510      	push	{r4, lr}
    1694:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    1698:	2820      	cmp	r0, #32
    169a:	d012      	beq.n	16c2 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x32>
    169c:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    16a0:	f5a1 7260 	sub.w	r2, r1, #896	; 0x380
    16a4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    16a8:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    16ac:	f891 102f 	ldrb.w	r1, [r1, #47]	; 0x2f
    16b0:	6840      	ldr	r0, [r0, #4]
    16b2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    16b6:	f852 2031 	ldr.w	r2, [r2, r1, lsl #3]
    16ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    16be:	2104      	movs	r1, #4
    16c0:	4710      	bx	r2
    16c2:	f640 01bb 	movw	r1, #2235	; 0x8bb
    16c6:	2070      	movs	r0, #112	; 0x70
    16c8:	f002 f886 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    16cc:	20000d44 	.word	0x20000d44

000016d0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    16d0:	b570      	push	{r4, r5, r6, lr}
    16d2:	4d6a      	ldr	r5, [pc, #424]	; (187c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1ac>)
    16d4:	496a      	ldr	r1, [pc, #424]	; (1880 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b0>)
    16d6:	2601      	movs	r6, #1
    16d8:	f505 7460 	add.w	r4, r5, #896	; 0x380
    16dc:	2808      	cmp	r0, #8
    16de:	d27d      	bcs.n	17dc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10c>
    16e0:	e8df f000 	tbb	[pc, r0]
    16e4:	a9976104 	.word	0xa9976104
    16e8:	b3ae43c6 	.word	0xb3ae43c6
    16ec:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    16f0:	b918      	cbnz	r0, 16fa <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    16f2:	f001 fed3 	bl	349c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    16f6:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    16fa:	8ae0      	ldrh	r0, [r4, #22]
    16fc:	b110      	cbz	r0, 1704 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    16fe:	f002 f807 	bl	3710 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1702:	b188      	cbz	r0, 1728 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x58>
    1704:	f7ff fcba 	bl	107c <CONFIG_FPROTECT_BLOCK_SIZE+0x7c>
    1708:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    170c:	68a1      	ldr	r1, [r4, #8]
    170e:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    1712:	d005      	beq.n	1720 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x50>
    1714:	2301      	movs	r3, #1
    1716:	2203      	movs	r2, #3
    1718:	2005      	movs	r0, #5
    171a:	f001 faf3 	bl	2d04 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    171e:	b140      	cbz	r0, 1732 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x62>
    1720:	7e60      	ldrb	r0, [r4, #25]
    1722:	2801      	cmp	r0, #1
    1724:	d110      	bne.n	1748 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x78>
    1726:	e009      	b.n	173c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6c>
    1728:	f640 016f 	movw	r1, #2159	; 0x86f
    172c:	2070      	movs	r0, #112	; 0x70
    172e:	f002 f853 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1732:	f640 0174 	movw	r1, #2164	; 0x874
    1736:	2070      	movs	r0, #112	; 0x70
    1738:	f002 f84e 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    173c:	6920      	ldr	r0, [r4, #16]
    173e:	1e40      	subs	r0, r0, #1
    1740:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1744:	f001 f9f8 	bl	2b38 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    1748:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    174c:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    1750:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1754:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    1758:	6840      	ldr	r0, [r0, #4]
    175a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    175e:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    1762:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1766:	2101      	movs	r1, #1
    1768:	4710      	bx	r2
    176a:	f7ff fc87 	bl	107c <CONFIG_FPROTECT_BLOCK_SIZE+0x7c>
    176e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1772:	60a0      	str	r0, [r4, #8]
    1774:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    1778:	b180      	cbz	r0, 179c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xcc>
    177a:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    177e:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    1782:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1786:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    178a:	6840      	ldr	r0, [r0, #4]
    178c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1790:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    1794:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1798:	2106      	movs	r1, #6
    179a:	4710      	bx	r2
    179c:	f640 0185 	movw	r1, #2181	; 0x885
    17a0:	2070      	movs	r0, #112	; 0x70
    17a2:	f002 f819 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    17a6:	f7ff fc69 	bl	107c <CONFIG_FPROTECT_BLOCK_SIZE+0x7c>
    17aa:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    17ae:	f001 ffaf 	bl	3710 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    17b2:	b118      	cbz	r0, 17bc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xec>
    17b4:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    17b8:	b128      	cbz	r0, 17c6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xf6>
    17ba:	e008      	b.n	17ce <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xfe>
    17bc:	f640 0195 	movw	r1, #2197	; 0x895
    17c0:	2070      	movs	r0, #112	; 0x70
    17c2:	f002 f809 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    17c6:	f001 fe69 	bl	349c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    17ca:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    17ce:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    17d2:	b168      	cbz	r0, 17f0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x120>
    17d4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    17d8:	492a      	ldr	r1, [pc, #168]	; (1884 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b4>)
    17da:	e000      	b.n	17de <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10e>
    17dc:	e048      	b.n	1870 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1a0>
    17de:	6008      	str	r0, [r1, #0]
    17e0:	2005      	movs	r0, #5
    17e2:	f001 fb57 	bl	2e94 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    17e6:	f001 fea5 	bl	3534 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    17ea:	2000      	movs	r0, #0
    17ec:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    17f0:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    17f4:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    17f8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    17fc:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    1800:	6840      	ldr	r0, [r0, #4]
    1802:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1806:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    180a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    180e:	2100      	movs	r1, #0
    1810:	4710      	bx	r2
    1812:	f001 fbf1 	bl	2ff8 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    1816:	8ae0      	ldrh	r0, [r4, #22]
    1818:	b110      	cbz	r0, 1820 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x150>
    181a:	f001 ff79 	bl	3710 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    181e:	b128      	cbz	r0, 182c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x15c>
    1820:	4819      	ldr	r0, [pc, #100]	; (1888 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b8>)
    1822:	7800      	ldrb	r0, [r0, #0]
    1824:	2803      	cmp	r0, #3
    1826:	bf08      	it	eq
    1828:	7766      	strbeq	r6, [r4, #29]
    182a:	bd70      	pop	{r4, r5, r6, pc}
    182c:	f44f 610a 	mov.w	r1, #2208	; 0x8a0
    1830:	2070      	movs	r0, #112	; 0x70
    1832:	f001 ffd1 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1836:	4815      	ldr	r0, [pc, #84]	; (188c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1bc>)
    1838:	6006      	str	r6, [r0, #0]
    183a:	6888      	ldr	r0, [r1, #8]
    183c:	6006      	str	r6, [r0, #0]
    183e:	bd70      	pop	{r4, r5, r6, pc}
    1840:	7808      	ldrb	r0, [r1, #0]
    1842:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1846:	f002 b897 	b.w	3978 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    184a:	f7ff fc17 	bl	107c <CONFIG_FPROTECT_BLOCK_SIZE+0x7c>
    184e:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1852:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    1856:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    185a:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    185e:	6840      	ldr	r0, [r0, #4]
    1860:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1864:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    1868:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    186c:	2105      	movs	r1, #5
    186e:	4710      	bx	r2
    1870:	f640 01b3 	movw	r1, #2227	; 0x8b3
    1874:	2070      	movs	r0, #112	; 0x70
    1876:	f001 ffaf 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    187a:	0000      	.short	0x0000
    187c:	200009c4 	.word	0x200009c4
    1880:	20000014 	.word	0x20000014
    1884:	4001f508 	.word	0x4001f508
    1888:	20000016 	.word	0x20000016
    188c:	40000508 	.word	0x40000508

00001890 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
    1890:	4803      	ldr	r0, [pc, #12]	; (18a0 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI+0x10>)
    1892:	b510      	push	{r4, lr}
    1894:	7840      	ldrb	r0, [r0, #1]
    1896:	f00a f8fd 	bl	ba94 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    189a:	b280      	uxth	r0, r0
    189c:	bd10      	pop	{r4, pc}
    189e:	0000      	.short	0x0000
    18a0:	20000016 	.word	0x20000016

000018a4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    18a4:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    18a8:	4682      	mov	sl, r0
    18aa:	48d1      	ldr	r0, [pc, #836]	; (1bf0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x34c>)
    18ac:	b08b      	sub	sp, #44	; 0x2c
    18ae:	6800      	ldr	r0, [r0, #0]
    18b0:	4dd0      	ldr	r5, [pc, #832]	; (1bf4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x350>)
    18b2:	05c0      	lsls	r0, r0, #23
    18b4:	0dc0      	lsrs	r0, r0, #23
    18b6:	d00e      	beq.n	18d6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    18b8:	3810      	subs	r0, #16
    18ba:	b240      	sxtb	r0, r0
    18bc:	2800      	cmp	r0, #0
    18be:	bfb8      	it	lt
    18c0:	f000 000f 	andlt.w	r0, r0, #15
    18c4:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    18c8:	bfac      	ite	ge
    18ca:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    18ce:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    18d2:	0940      	lsrs	r0, r0, #5
    18d4:	d00d      	beq.n	18f2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    18d6:	980c      	ldr	r0, [sp, #48]	; 0x30
    18d8:	f04f 0b00 	mov.w	fp, #0
    18dc:	7800      	ldrb	r0, [r0, #0]
    18de:	2800      	cmp	r0, #0
    18e0:	bf18      	it	ne
    18e2:	2801      	cmpne	r0, #1
    18e4:	d018      	beq.n	1918 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    18e6:	f240 715c 	movw	r1, #1884	; 0x75c
    18ea:	f04f 0070 	mov.w	r0, #112	; 0x70
    18ee:	f001 ff73 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    18f2:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    18f6:	f04f 0b01 	mov.w	fp, #1
    18fa:	2820      	cmp	r0, #32
    18fc:	d007      	beq.n	190e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    18fe:	980c      	ldr	r0, [sp, #48]	; 0x30
    1900:	7800      	ldrb	r0, [r0, #0]
    1902:	b148      	cbz	r0, 1918 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    1904:	f44f 61eb 	mov.w	r1, #1880	; 0x758
    1908:	2070      	movs	r0, #112	; 0x70
    190a:	f001 ff65 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    190e:	f240 7155 	movw	r1, #1877	; 0x755
    1912:	2070      	movs	r0, #112	; 0x70
    1914:	f001 ff60 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1918:	4cb7      	ldr	r4, [pc, #732]	; (1bf8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x354>)
    191a:	b124      	cbz	r4, 1926 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    191c:	2100      	movs	r1, #0
    191e:	f240 705f 	movw	r0, #1887	; 0x75f
    1922:	f3af 8000 	nop.w
    1926:	49b5      	ldr	r1, [pc, #724]	; (1bfc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x358>)
    1928:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    192c:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    1930:	f04f 0801 	mov.w	r8, #1
    1934:	9000      	str	r0, [sp, #0]
    1936:	b124      	cbz	r4, 1942 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9e>
    1938:	2100      	movs	r1, #0
    193a:	f240 7067 	movw	r0, #1895	; 0x767
    193e:	f3af 8000 	nop.w
    1942:	f1b8 0f00 	cmp.w	r8, #0
    1946:	d009      	beq.n	195c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xb8>
    1948:	f895 602e 	ldrb.w	r6, [r5, #46]	; 0x2e
    194c:	f04f 0900 	mov.w	r9, #0
    1950:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    1954:	f1bb 0f00 	cmp.w	fp, #0
    1958:	d007      	beq.n	196a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc6>
    195a:	e02e      	b.n	19ba <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x116>
    195c:	48a8      	ldr	r0, [pc, #672]	; (1c00 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35c>)
    195e:	2800      	cmp	r0, #0
    1960:	bf18      	it	ne
    1962:	f3af 8000 	nopne.w
    1966:	b662      	cpsie	i
    1968:	e7ee      	b.n	1948 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    196a:	4637      	mov	r7, r6
    196c:	2001      	movs	r0, #1
    196e:	ea20 0607 	bic.w	r6, r0, r7
    1972:	48a4      	ldr	r0, [pc, #656]	; (1c04 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x360>)
    1974:	2240      	movs	r2, #64	; 0x40
    1976:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    197a:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    197e:	f00a f9f7 	bl	bd70 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1982:	b124      	cbz	r4, 198e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xea>
    1984:	2100      	movs	r1, #0
    1986:	f240 50da 	movw	r0, #1498	; 0x5da
    198a:	f3af 8000 	nop.w
    198e:	eb05 0187 	add.w	r1, r5, r7, lsl #2
    1992:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    1996:	6a09      	ldr	r1, [r1, #32]
    1998:	6201      	str	r1, [r0, #32]
    199a:	b124      	cbz	r4, 19a6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x102>
    199c:	2100      	movs	r1, #0
    199e:	f240 50de 	movw	r0, #1502	; 0x5de
    19a2:	f3af 8000 	nop.w
    19a6:	b124      	cbz	r4, 19b2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x10e>
    19a8:	2100      	movs	r1, #0
    19aa:	f240 7071 	movw	r0, #1905	; 0x771
    19ae:	f3af 8000 	nop.w
    19b2:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    19b6:	2800      	cmp	r0, #0
    19b8:	d1bd      	bne.n	1936 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    19ba:	b124      	cbz	r4, 19c6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x122>
    19bc:	2100      	movs	r1, #0
    19be:	f240 707b 	movw	r0, #1915	; 0x77b
    19c2:	f3af 8000 	nop.w
    19c6:	f001 f817 	bl	29f8 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    19ca:	4680      	mov	r8, r0
    19cc:	4633      	mov	r3, r6
    19ce:	aa06      	add	r2, sp, #24
    19d0:	990c      	ldr	r1, [sp, #48]	; 0x30
    19d2:	f7ff fa7f 	bl	ed4 <CONFIG_BT_RX_STACK_SIZE+0x63c>
    19d6:	b124      	cbz	r4, 19e2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x13e>
    19d8:	2100      	movs	r1, #0
    19da:	f240 7082 	movw	r0, #1922	; 0x782
    19de:	f3af 8000 	nop.w
    19e2:	4988      	ldr	r1, [pc, #544]	; (1c04 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x360>)
    19e4:	a806      	add	r0, sp, #24
    19e6:	eb01 1786 	add.w	r7, r1, r6, lsl #6
    19ea:	f817 101a 	ldrb.w	r1, [r7, sl, lsl #1]
    19ee:	2901      	cmp	r1, #1
    19f0:	bf18      	it	ne
    19f2:	2902      	cmpne	r1, #2
    19f4:	d13e      	bne.n	1a74 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d0>
    19f6:	9906      	ldr	r1, [sp, #24]
    19f8:	9b07      	ldr	r3, [sp, #28]
    19fa:	eba1 0108 	sub.w	r1, r1, r8
    19fe:	4a82      	ldr	r2, [pc, #520]	; (1c08 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x364>)
    1a00:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1a04:	eba3 0308 	sub.w	r3, r3, r8
    1a08:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1a0c:	2902      	cmp	r1, #2
    1a0e:	d36a      	bcc.n	1ae6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x242>
    1a10:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    1a14:	d267      	bcs.n	1ae6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x242>
    1a16:	429a      	cmp	r2, r3
    1a18:	d365      	bcc.n	1ae6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x242>
    1a1a:	f04f 0901 	mov.w	r9, #1
    1a1e:	ab01      	add	r3, sp, #4
    1a20:	aa05      	add	r2, sp, #20
    1a22:	4631      	mov	r1, r6
    1a24:	f7fe ff46 	bl	8b4 <CONFIG_BT_RX_STACK_SIZE+0x1c>
    1a28:	2800      	cmp	r0, #0
    1a2a:	d064      	beq.n	1af6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x252>
    1a2c:	f89d 1014 	ldrb.w	r1, [sp, #20]
    1a30:	f89d 2004 	ldrb.w	r2, [sp, #4]
    1a34:	4633      	mov	r3, r6
    1a36:	428a      	cmp	r2, r1
    1a38:	d061      	beq.n	1afe <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x25a>
    1a3a:	2005      	movs	r0, #5
    1a3c:	f7fe fd88 	bl	550 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    1a40:	ea4f 0100 	mov.w	r1, r0
    1a44:	eb07 004a 	add.w	r0, r7, sl, lsl #1
    1a48:	7041      	strb	r1, [r0, #1]
    1a4a:	f89d 0014 	ldrb.w	r0, [sp, #20]
    1a4e:	2820      	cmp	r0, #32
    1a50:	bf03      	ittte	eq
    1a52:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    1a56:	f880 a020 	strbeq.w	sl, [r0, #32]
    1a5a:	f880 9023 	strbeq.w	r9, [r0, #35]	; 0x23
    1a5e:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    1a62:	bf18      	it	ne
    1a64:	f880 a001 	strbne.w	sl, [r0, #1]
    1a68:	4632      	mov	r2, r6
    1a6a:	4651      	mov	r1, sl
    1a6c:	f05f 0003 	movs.w	r0, #3
    1a70:	f7ff fbd6 	bl	1220 <CONFIG_FPROTECT_BLOCK_SIZE+0x220>
    1a74:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    1a78:	f890 7023 	ldrb.w	r7, [r0, #35]	; 0x23
    1a7c:	b124      	cbz	r4, 1a88 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1e4>
    1a7e:	2100      	movs	r1, #0
    1a80:	f240 7089 	movw	r0, #1929	; 0x789
    1a84:	f3af 8000 	nop.w
    1a88:	4860      	ldr	r0, [pc, #384]	; (1c0c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x368>)
    1a8a:	2800      	cmp	r0, #0
    1a8c:	bf18      	it	ne
    1a8e:	f3af 8000 	nopne.w
    1a92:	f3ef 8810 	mrs	r8, PRIMASK
    1a96:	b672      	cpsid	i
    1a98:	b124      	cbz	r4, 1aa4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x200>
    1a9a:	2100      	movs	r1, #0
    1a9c:	f240 708f 	movw	r0, #1935	; 0x78f
    1aa0:	f3af 8000 	nop.w
    1aa4:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    1aa8:	2800      	cmp	r0, #0
    1aaa:	f47f af44 	bne.w	1936 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    1aae:	b124      	cbz	r4, 1aba <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x216>
    1ab0:	2100      	movs	r1, #0
    1ab2:	f240 7097 	movw	r0, #1943	; 0x797
    1ab6:	f3af 8000 	nop.w
    1aba:	f10d 0e18 	add.w	lr, sp, #24
    1abe:	9800      	ldr	r0, [sp, #0]
    1ac0:	e89e 100e 	ldmia.w	lr, {r1, r2, r3, ip}
    1ac4:	f100 0008 	add.w	r0, r0, #8
    1ac8:	f1b9 0f00 	cmp.w	r9, #0
    1acc:	e880 100e 	stmia.w	r0, {r1, r2, r3, ip}
    1ad0:	d042      	beq.n	1b58 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2b4>
    1ad2:	b124      	cbz	r4, 1ade <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x23a>
    1ad4:	2100      	movs	r1, #0
    1ad6:	f240 70a4 	movw	r0, #1956	; 0x7a4
    1ada:	f3af 8000 	nop.w
    1ade:	f1bb 0f00 	cmp.w	fp, #0
    1ae2:	d12b      	bne.n	1b3c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x298>
    1ae4:	e015      	b.n	1b12 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x26e>
    1ae6:	4632      	mov	r2, r6
    1ae8:	4651      	mov	r1, sl
    1aea:	2004      	movs	r0, #4
    1aec:	f7ff fb98 	bl	1220 <CONFIG_FPROTECT_BLOCK_SIZE+0x220>
    1af0:	f04f 0901 	mov.w	r9, #1
    1af4:	e7be      	b.n	1a74 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d0>
    1af6:	4632      	mov	r2, r6
    1af8:	4651      	mov	r1, sl
    1afa:	2004      	movs	r0, #4
    1afc:	e7b8      	b.n	1a70 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1cc>
    1afe:	2920      	cmp	r1, #32
    1b00:	bf19      	ittee	ne
    1b02:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    1b06:	7841      	ldrbne	r1, [r0, #1]
    1b08:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    1b0c:	f890 1020 	ldrbeq.w	r1, [r0, #32]
    1b10:	e798      	b.n	1a44 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1a0>
    1b12:	b19f      	cbz	r7, 1b3c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x298>
    1b14:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    1b18:	2820      	cmp	r0, #32
    1b1a:	d10f      	bne.n	1b3c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x298>
    1b1c:	b124      	cbz	r4, 1b28 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x284>
    1b1e:	2100      	movs	r1, #0
    1b20:	f240 70a9 	movw	r0, #1961	; 0x7a9
    1b24:	f3af 8000 	nop.w
    1b28:	4631      	mov	r1, r6
    1b2a:	2002      	movs	r0, #2
    1b2c:	f7ff fba8 	bl	1280 <CONFIG_FPROTECT_BLOCK_SIZE+0x280>
    1b30:	b920      	cbnz	r0, 1b3c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x298>
    1b32:	980c      	ldr	r0, [sp, #48]	; 0x30
    1b34:	7800      	ldrb	r0, [r0, #0]
    1b36:	b3e8      	cbz	r0, 1bb4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x310>
    1b38:	2801      	cmp	r0, #1
    1b3a:	d049      	beq.n	1bd0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32c>
    1b3c:	b124      	cbz	r4, 1b48 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2a4>
    1b3e:	2100      	movs	r1, #0
    1b40:	f240 70c6 	movw	r0, #1990	; 0x7c6
    1b44:	f3af 8000 	nop.w
    1b48:	f885 602e 	strb.w	r6, [r5, #46]	; 0x2e
    1b4c:	2001      	movs	r0, #1
    1b4e:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
    1b52:	bf00      	nop
    1b54:	f04f 0901 	mov.w	r9, #1
    1b58:	b124      	cbz	r4, 1b64 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2c0>
    1b5a:	2100      	movs	r1, #0
    1b5c:	f240 70cf 	movw	r0, #1999	; 0x7cf
    1b60:	f3af 8000 	nop.w
    1b64:	f1b8 0f00 	cmp.w	r8, #0
    1b68:	d03b      	beq.n	1be2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x33e>
    1b6a:	b124      	cbz	r4, 1b76 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
    1b6c:	2100      	movs	r1, #0
    1b6e:	f240 70d3 	movw	r0, #2003	; 0x7d3
    1b72:	f3af 8000 	nop.w
    1b76:	f1b9 0f00 	cmp.w	r9, #0
    1b7a:	d011      	beq.n	1ba0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2fc>
    1b7c:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    1b80:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    1b84:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    1b88:	2820      	cmp	r0, #32
    1b8a:	d009      	beq.n	1ba0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2fc>
    1b8c:	b124      	cbz	r4, 1b98 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f4>
    1b8e:	2100      	movs	r1, #0
    1b90:	f240 70da 	movw	r0, #2010	; 0x7da
    1b94:	f3af 8000 	nop.w
    1b98:	481d      	ldr	r0, [pc, #116]	; (1c10 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36c>)
    1b9a:	7840      	ldrb	r0, [r0, #1]
    1b9c:	f001 feec 	bl	3978 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1ba0:	b124      	cbz	r4, 1bac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x308>
    1ba2:	2100      	movs	r1, #0
    1ba4:	f240 70df 	movw	r0, #2015	; 0x7df
    1ba8:	f3af 8000 	nop.w
    1bac:	b00d      	add	sp, #52	; 0x34
    1bae:	4648      	mov	r0, r9
    1bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1bb4:	e7ff      	b.n	1bb6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x312>
    1bb6:	b124      	cbz	r4, 1bc2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x31e>
    1bb8:	2100      	movs	r1, #0
    1bba:	f240 70b1 	movw	r0, #1969	; 0x7b1
    1bbe:	f3af 8000 	nop.w
    1bc2:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
    1bc6:	4651      	mov	r1, sl
    1bc8:	2004      	movs	r0, #4
    1bca:	f7ff fb29 	bl	1220 <CONFIG_FPROTECT_BLOCK_SIZE+0x220>
    1bce:	e7c1      	b.n	1b54 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2b0>
    1bd0:	2c00      	cmp	r4, #0
    1bd2:	f43f aeb0 	beq.w	1936 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    1bd6:	2100      	movs	r1, #0
    1bd8:	f240 70bc 	movw	r0, #1980	; 0x7bc
    1bdc:	f3af 8000 	nop.w
    1be0:	e6a9      	b.n	1936 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    1be2:	4807      	ldr	r0, [pc, #28]	; (1c00 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35c>)
    1be4:	2800      	cmp	r0, #0
    1be6:	bf18      	it	ne
    1be8:	f3af 8000 	nopne.w
    1bec:	b662      	cpsie	i
    1bee:	e7bc      	b.n	1b6a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2c6>
    1bf0:	e000ed04 	.word	0xe000ed04
    1bf4:	20000d44 	.word	0x20000d44
    1bf8:	00000000 	.word	0x00000000
    1bfc:	200009c4 	.word	0x200009c4
    1c00:	00000000 	.word	0x00000000
    1c04:	20000cc4 	.word	0x20000cc4
    1c08:	003fffff 	.word	0x003fffff
    1c0c:	00000000 	.word	0x00000000
    1c10:	20000014 	.word	0x20000014

00001c14 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    1c14:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1c18:	48a3      	ldr	r0, [pc, #652]	; (1ea8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x15c>)
    1c1a:	b086      	sub	sp, #24
    1c1c:	6800      	ldr	r0, [r0, #0]
    1c1e:	05c0      	lsls	r0, r0, #23
    1c20:	0dc0      	lsrs	r0, r0, #23
    1c22:	d011      	beq.n	1c48 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x34>
    1c24:	3810      	subs	r0, #16
    1c26:	b240      	sxtb	r0, r0
    1c28:	2800      	cmp	r0, #0
    1c2a:	bfb8      	it	lt
    1c2c:	f000 000f 	andlt.w	r0, r0, #15
    1c30:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    1c34:	bfac      	ite	ge
    1c36:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    1c3a:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    1c3e:	0940      	lsrs	r0, r0, #5
    1c40:	bf08      	it	eq
    1c42:	f04f 0901 	moveq.w	r9, #1
    1c46:	d001      	beq.n	1c4c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x38>
    1c48:	f04f 0900 	mov.w	r9, #0
    1c4c:	9806      	ldr	r0, [sp, #24]
    1c4e:	7800      	ldrb	r0, [r0, #0]
    1c50:	2800      	cmp	r0, #0
    1c52:	f04f 0000 	mov.w	r0, #0
    1c56:	bf1c      	itt	ne
    1c58:	b007      	addne	sp, #28
    1c5a:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c5e:	f8df a24c 	ldr.w	sl, [pc, #588]	; 1eac <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x160>
    1c62:	4d93      	ldr	r5, [pc, #588]	; (1eb0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x164>)
    1c64:	4c93      	ldr	r4, [pc, #588]	; (1eb4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x168>)
    1c66:	f04f 0b00 	mov.w	fp, #0
    1c6a:	9004      	str	r0, [sp, #16]
    1c6c:	b125      	cbz	r5, 1c78 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x64>
    1c6e:	2100      	movs	r1, #0
    1c70:	f240 6065 	movw	r0, #1637	; 0x665
    1c74:	f3af 8000 	nop.w
    1c78:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
    1c7c:	f884 b02b 	strb.w	fp, [r4, #43]	; 0x2b
    1c80:	f04f 0800 	mov.w	r8, #0
    1c84:	b125      	cbz	r5, 1c90 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x7c>
    1c86:	2100      	movs	r1, #0
    1c88:	f240 606a 	movw	r0, #1642	; 0x66a
    1c8c:	f3af 8000 	nop.w
    1c90:	f1b9 0f00 	cmp.w	r9, #0
    1c94:	d11d      	bne.n	1cd2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xbe>
    1c96:	4637      	mov	r7, r6
    1c98:	2001      	movs	r0, #1
    1c9a:	ea20 0607 	bic.w	r6, r0, r7
    1c9e:	4886      	ldr	r0, [pc, #536]	; (1eb8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x16c>)
    1ca0:	2240      	movs	r2, #64	; 0x40
    1ca2:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    1ca6:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    1caa:	f00a f861 	bl	bd70 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1cae:	b125      	cbz	r5, 1cba <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xa6>
    1cb0:	2100      	movs	r1, #0
    1cb2:	f240 50da 	movw	r0, #1498	; 0x5da
    1cb6:	f3af 8000 	nop.w
    1cba:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    1cbe:	eb04 0086 	add.w	r0, r4, r6, lsl #2
    1cc2:	6a09      	ldr	r1, [r1, #32]
    1cc4:	6201      	str	r1, [r0, #32]
    1cc6:	b125      	cbz	r5, 1cd2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xbe>
    1cc8:	2100      	movs	r1, #0
    1cca:	f240 50de 	movw	r0, #1502	; 0x5de
    1cce:	f3af 8000 	nop.w
    1cd2:	b125      	cbz	r5, 1cde <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xca>
    1cd4:	2100      	movs	r1, #0
    1cd6:	f240 6072 	movw	r0, #1650	; 0x672
    1cda:	f3af 8000 	nop.w
    1cde:	f000 fe8b 	bl	29f8 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1ce2:	4607      	mov	r7, r0
    1ce4:	4633      	mov	r3, r6
    1ce6:	466a      	mov	r2, sp
    1ce8:	9906      	ldr	r1, [sp, #24]
    1cea:	f7ff f8f3 	bl	ed4 <CONFIG_BT_RX_STACK_SIZE+0x63c>
    1cee:	b125      	cbz	r5, 1cfa <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xe6>
    1cf0:	2100      	movs	r1, #0
    1cf2:	f44f 60cf 	mov.w	r0, #1656	; 0x678
    1cf6:	f3af 8000 	nop.w
    1cfa:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1cfe:	2820      	cmp	r0, #32
    1d00:	d014      	beq.n	1d2c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x118>
    1d02:	6920      	ldr	r0, [r4, #16]
    1d04:	9900      	ldr	r1, [sp, #0]
    1d06:	1a09      	subs	r1, r1, r0
    1d08:	0209      	lsls	r1, r1, #8
    1d0a:	17ca      	asrs	r2, r1, #31
    1d0c:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1d10:	1209      	asrs	r1, r1, #8
    1d12:	d50b      	bpl.n	1d2c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x118>
    1d14:	e9dd 2100 	ldrd	r2, r1, [sp]
    1d18:	1a89      	subs	r1, r1, r2
    1d1a:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    1d1e:	4408      	add	r0, r1
    1d20:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1d24:	e9cd 2000 	strd	r2, r0, [sp]
    1d28:	f04f 0801 	mov.w	r8, #1
    1d2c:	b14d      	cbz	r5, 1d42 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x12e>
    1d2e:	2100      	movs	r1, #0
    1d30:	f240 6082 	movw	r0, #1666	; 0x682
    1d34:	f3af 8000 	nop.w
    1d38:	2100      	movs	r1, #0
    1d3a:	f44f 60d1 	mov.w	r0, #1672	; 0x688
    1d3e:	f3af 8000 	nop.w
    1d42:	9800      	ldr	r0, [sp, #0]
    1d44:	9901      	ldr	r1, [sp, #4]
    1d46:	1bc0      	subs	r0, r0, r7
    1d48:	1bc9      	subs	r1, r1, r7
    1d4a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1d4e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1d52:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    1d56:	d205      	bcs.n	1d64 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x18>
    1d58:	458a      	cmp	sl, r1
    1d5a:	d303      	bcc.n	1d64 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x18>
    1d5c:	f1b9 0f00 	cmp.w	r9, #0
    1d60:	d10c      	bne.n	1d7c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x30>
    1d62:	e003      	b.n	1d6c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x20>
    1d64:	f1b9 0f00 	cmp.w	r9, #0
    1d68:	d038      	beq.n	1ddc <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x90>
    1d6a:	e094      	b.n	1e96 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x14a>
    1d6c:	4633      	mov	r3, r6
    1d6e:	463a      	mov	r2, r7
    1d70:	4669      	mov	r1, sp
    1d72:	4852      	ldr	r0, [pc, #328]	; (1ebc <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x170>)
    1d74:	f7fe fc28 	bl	5c8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x94>
    1d78:	ea48 0800 	orr.w	r8, r8, r0
    1d7c:	f1b8 0f00 	cmp.w	r8, #0
    1d80:	d022      	beq.n	1dc8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x7c>
    1d82:	9800      	ldr	r0, [sp, #0]
    1d84:	f009 fe86 	bl	ba94 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1d88:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    1d8c:	f89d 2008 	ldrb.w	r2, [sp, #8]
    1d90:	4b4b      	ldr	r3, [pc, #300]	; (1ec0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x174>)
    1d92:	4411      	add	r1, r2
    1d94:	1c49      	adds	r1, r1, #1
    1d96:	1842      	adds	r2, r0, r1
    1d98:	4298      	cmp	r0, r3
    1d9a:	d841      	bhi.n	1e20 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xd4>
    1d9c:	4847      	ldr	r0, [pc, #284]	; (1ebc <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x170>)
    1d9e:	4281      	cmp	r1, r0
    1da0:	dc5a      	bgt.n	1e58 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x10c>
    1da2:	4240      	negs	r0, r0
    1da4:	4281      	cmp	r1, r0
    1da6:	db5f      	blt.n	1e68 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x11c>
    1da8:	1c58      	adds	r0, r3, #1
    1daa:	4290      	cmp	r0, r2
    1dac:	bfdc      	itt	le
    1dae:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    1db2:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    1db6:	dd05      	ble.n	1dc4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x78>
    1db8:	2a00      	cmp	r2, #0
    1dba:	bfbc      	itt	lt
    1dbc:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    1dc0:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    1dc4:	9806      	ldr	r0, [sp, #24]
    1dc6:	60c2      	str	r2, [r0, #12]
    1dc8:	2001      	movs	r0, #1
    1dca:	9004      	str	r0, [sp, #16]
    1dcc:	2d00      	cmp	r5, #0
    1dce:	d062      	beq.n	1e96 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x14a>
    1dd0:	2100      	movs	r1, #0
    1dd2:	f240 609b 	movw	r0, #1691	; 0x69b
    1dd6:	f3af 8000 	nop.w
    1dda:	e05c      	b.n	1e96 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x14a>
    1ddc:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    1de0:	aa05      	add	r2, sp, #20
    1de2:	a904      	add	r1, sp, #16
    1de4:	f000 fcb2 	bl	274c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1de8:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1dec:	2820      	cmp	r0, #32
    1dee:	d01c      	beq.n	1e2a <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xde>
    1df0:	6920      	ldr	r0, [r4, #16]
    1df2:	1d40      	adds	r0, r0, #5
    1df4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1df8:	e9dd 2100 	ldrd	r2, r1, [sp]
    1dfc:	1a89      	subs	r1, r1, r2
    1dfe:	4401      	add	r1, r0
    1e00:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1e04:	e9cd 0100 	strd	r0, r1, [sp]
    1e08:	f009 fe44 	bl	ba94 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1e0c:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    1e10:	f89d 2008 	ldrb.w	r2, [sp, #8]
    1e14:	4b2a      	ldr	r3, [pc, #168]	; (1ec0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x174>)
    1e16:	4411      	add	r1, r2
    1e18:	1c49      	adds	r1, r1, #1
    1e1a:	1842      	adds	r2, r0, r1
    1e1c:	4298      	cmp	r0, r3
    1e1e:	d918      	bls.n	1e52 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x106>
    1e20:	f240 6116 	movw	r1, #1558	; 0x616
    1e24:	2070      	movs	r0, #112	; 0x70
    1e26:	f001 fcd7 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e2a:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    1e2e:	f107 0609 	add.w	r6, r7, #9
    1e32:	b120      	cbz	r0, 1e3e <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xf2>
    1e34:	f001 fc6c 	bl	3710 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1e38:	2800      	cmp	r0, #0
    1e3a:	bf08      	it	eq
    1e3c:	3632      	addeq	r6, #50	; 0x32
    1e3e:	4821      	ldr	r0, [pc, #132]	; (1ec4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x178>)
    1e40:	7841      	ldrb	r1, [r0, #1]
    1e42:	9804      	ldr	r0, [sp, #16]
    1e44:	4281      	cmp	r1, r0
    1e46:	bf84      	itt	hi
    1e48:	1a08      	subhi	r0, r1, r0
    1e4a:	4406      	addhi	r6, r0
    1e4c:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    1e50:	e7d2      	b.n	1df8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xac>
    1e52:	481a      	ldr	r0, [pc, #104]	; (1ebc <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x170>)
    1e54:	4281      	cmp	r1, r0
    1e56:	dd04      	ble.n	1e62 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x116>
    1e58:	f240 6117 	movw	r1, #1559	; 0x617
    1e5c:	2070      	movs	r0, #112	; 0x70
    1e5e:	f001 fcbb 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e62:	4819      	ldr	r0, [pc, #100]	; (1ec8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x17c>)
    1e64:	4281      	cmp	r1, r0
    1e66:	da04      	bge.n	1e72 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x126>
    1e68:	f44f 61c3 	mov.w	r1, #1560	; 0x618
    1e6c:	2070      	movs	r0, #112	; 0x70
    1e6e:	f001 fcb3 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e72:	4816      	ldr	r0, [pc, #88]	; (1ecc <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x180>)
    1e74:	4290      	cmp	r0, r2
    1e76:	bfdc      	itt	le
    1e78:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    1e7c:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    1e80:	dd05      	ble.n	1e8e <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x142>
    1e82:	2a00      	cmp	r2, #0
    1e84:	bfbc      	itt	lt
    1e86:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    1e8a:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    1e8e:	9806      	ldr	r0, [sp, #24]
    1e90:	60c2      	str	r2, [r0, #12]
    1e92:	2001      	movs	r0, #1
    1e94:	9004      	str	r0, [sp, #16]
    1e96:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
    1e9a:	2800      	cmp	r0, #0
    1e9c:	f47f aee6 	bne.w	1c6c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x58>
    1ea0:	9804      	ldr	r0, [sp, #16]
    1ea2:	b007      	add	sp, #28
    1ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1ea8:	e000ed04 	.word	0xe000ed04
    1eac:	003fffff 	.word	0x003fffff
    1eb0:	00000000 	.word	0x00000000
    1eb4:	20000d44 	.word	0x20000d44
    1eb8:	20000cc4 	.word	0x20000cc4
    1ebc:	07a12000 	.word	0x07a12000
    1ec0:	1e847fff 	.word	0x1e847fff
    1ec4:	20000016 	.word	0x20000016
    1ec8:	f85ee000 	.word	0xf85ee000
    1ecc:	1e848000 	.word	0x1e848000

00001ed0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    1ed0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1ed4:	4d80      	ldr	r5, [pc, #512]	; (20d8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xd8>)
    1ed6:	b08c      	sub	sp, #48	; 0x30
    1ed8:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    1edc:	2000      	movs	r0, #0
    1ede:	9009      	str	r0, [sp, #36]	; 0x24
    1ee0:	2001      	movs	r0, #1
    1ee2:	4c7e      	ldr	r4, [pc, #504]	; (20dc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xdc>)
    1ee4:	f04f 0800 	mov.w	r8, #0
    1ee8:	f1a5 0780 	sub.w	r7, r5, #128	; 0x80
    1eec:	4683      	mov	fp, r0
    1eee:	9008      	str	r0, [sp, #32]
    1ef0:	b124      	cbz	r4, 1efc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2c>
    1ef2:	2100      	movs	r1, #0
    1ef4:	f240 70ee 	movw	r0, #2030	; 0x7ee
    1ef8:	f3af 8000 	nop.w
    1efc:	9808      	ldr	r0, [sp, #32]
    1efe:	b390      	cbz	r0, 1f66 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x96>
    1f00:	f885 802b 	strb.w	r8, [r5, #43]	; 0x2b
    1f04:	b124      	cbz	r4, 1f10 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x40>
    1f06:	2100      	movs	r1, #0
    1f08:	f240 70f3 	movw	r0, #2035	; 0x7f3
    1f0c:	f3af 8000 	nop.w
    1f10:	f895 902e 	ldrb.w	r9, [r5, #46]	; 0x2e
    1f14:	2240      	movs	r2, #64	; 0x40
    1f16:	ea2b 0609 	bic.w	r6, fp, r9
    1f1a:	eb07 1086 	add.w	r0, r7, r6, lsl #6
    1f1e:	eb07 1189 	add.w	r1, r7, r9, lsl #6
    1f22:	4682      	mov	sl, r0
    1f24:	f009 ff24 	bl	bd70 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1f28:	b124      	cbz	r4, 1f34 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x64>
    1f2a:	2100      	movs	r1, #0
    1f2c:	f240 50da 	movw	r0, #1498	; 0x5da
    1f30:	f3af 8000 	nop.w
    1f34:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    1f38:	eb05 0189 	add.w	r1, r5, r9, lsl #2
    1f3c:	9000      	str	r0, [sp, #0]
    1f3e:	6a09      	ldr	r1, [r1, #32]
    1f40:	6201      	str	r1, [r0, #32]
    1f42:	b124      	cbz	r4, 1f4e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x7e>
    1f44:	2100      	movs	r1, #0
    1f46:	f240 50de 	movw	r0, #1502	; 0x5de
    1f4a:	f3af 8000 	nop.w
    1f4e:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    1f52:	b180      	cbz	r0, 1f76 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa6>
    1f54:	2c00      	cmp	r4, #0
    1f56:	bf1c      	itt	ne
    1f58:	2100      	movne	r1, #0
    1f5a:	f240 70f9 	movwne	r0, #2041	; 0x7f9
    1f5e:	d0c7      	beq.n	1ef0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    1f60:	f3af 8000 	nop.w
    1f64:	e7c4      	b.n	1ef0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    1f66:	e7ff      	b.n	1f68 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x98>
    1f68:	485d      	ldr	r0, [pc, #372]	; (20e0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xe0>)
    1f6a:	2800      	cmp	r0, #0
    1f6c:	bf18      	it	ne
    1f6e:	f3af 8000 	nopne.w
    1f72:	b662      	cpsie	i
    1f74:	e7c4      	b.n	1f00 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x30>
    1f76:	b124      	cbz	r4, 1f82 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xb2>
    1f78:	2100      	movs	r1, #0
    1f7a:	f240 70fd 	movw	r0, #2045	; 0x7fd
    1f7e:	f3af 8000 	nop.w
    1f82:	980c      	ldr	r0, [sp, #48]	; 0x30
    1f84:	f81a 0010 	ldrb.w	r0, [sl, r0, lsl #1]
    1f88:	2803      	cmp	r0, #3
    1f8a:	d178      	bne.n	207e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x7e>
    1f8c:	f8dd 9000 	ldr.w	r9, [sp]
    1f90:	f8cd 9018 	str.w	r9, [sp, #24]
    1f94:	990c      	ldr	r1, [sp, #48]	; 0x30
    1f96:	f899 0020 	ldrb.w	r0, [r9, #32]
    1f9a:	4288      	cmp	r0, r1
    1f9c:	bf14      	ite	ne
    1f9e:	f04f 0a00 	movne.w	sl, #0
    1fa2:	f04f 0a01 	moveq.w	sl, #1
    1fa6:	f109 0c20 	add.w	ip, r9, #32
    1faa:	4686      	mov	lr, r0
    1fac:	2220      	movs	r2, #32
    1fae:	eb07 1386 	add.w	r3, r7, r6, lsl #6
    1fb2:	e003      	b.n	1fbc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xec>
    1fb4:	4602      	mov	r2, r0
    1fb6:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    1fba:	7840      	ldrb	r0, [r0, #1]
    1fbc:	4288      	cmp	r0, r1
    1fbe:	d002      	beq.n	1fc6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf6>
    1fc0:	2820      	cmp	r0, #32
    1fc2:	d00a      	beq.n	1fda <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x10a>
    1fc4:	e7f6      	b.n	1fb4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xe4>
    1fc6:	2820      	cmp	r0, #32
    1fc8:	d007      	beq.n	1fda <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x10a>
    1fca:	4586      	cmp	lr, r0
    1fcc:	d107      	bne.n	1fde <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x10e>
    1fce:	eb03 004e 	add.w	r0, r3, lr, lsl #1
    1fd2:	7840      	ldrb	r0, [r0, #1]
    1fd4:	f88c 0000 	strb.w	r0, [ip]
    1fd8:	e007      	b.n	1fea <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    1fda:	4640      	mov	r0, r8
    1fdc:	e00c      	b.n	1ff8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x128>
    1fde:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    1fe2:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    1fe6:	7840      	ldrb	r0, [r0, #1]
    1fe8:	7048      	strb	r0, [r1, #1]
    1fea:	b124      	cbz	r4, 1ff6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x126>
    1fec:	2100      	movs	r1, #0
    1fee:	f240 5044 	movw	r0, #1348	; 0x544
    1ff2:	f3af 8000 	nop.w
    1ff6:	4658      	mov	r0, fp
    1ff8:	ea10 0f0a 	tst.w	r0, sl
    1ffc:	bf18      	it	ne
    1ffe:	f889 b023 	strbne.w	fp, [r9, #35]	; 0x23
    2002:	b3e0      	cbz	r0, 207e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x7e>
    2004:	b124      	cbz	r4, 2010 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x10>
    2006:	2100      	movs	r1, #0
    2008:	f640 0002 	movw	r0, #2050	; 0x802
    200c:	f3af 8000 	nop.w
    2010:	4632      	mov	r2, r6
    2012:	2001      	movs	r0, #1
    2014:	990c      	ldr	r1, [sp, #48]	; 0x30
    2016:	f7ff f903 	bl	1220 <CONFIG_FPROTECT_BLOCK_SIZE+0x220>
    201a:	9806      	ldr	r0, [sp, #24]
    201c:	f890 9023 	ldrb.w	r9, [r0, #35]	; 0x23
    2020:	b124      	cbz	r4, 202c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2c>
    2022:	2100      	movs	r1, #0
    2024:	f640 000d 	movw	r0, #2061	; 0x80d
    2028:	f3af 8000 	nop.w
    202c:	482d      	ldr	r0, [pc, #180]	; (20e4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xe4>)
    202e:	2800      	cmp	r0, #0
    2030:	bf18      	it	ne
    2032:	f3af 8000 	nopne.w
    2036:	f3ef 8010 	mrs	r0, PRIMASK
    203a:	b672      	cpsid	i
    203c:	9008      	str	r0, [sp, #32]
    203e:	b124      	cbz	r4, 204a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x4a>
    2040:	2100      	movs	r1, #0
    2042:	f640 0012 	movw	r0, #2066	; 0x812
    2046:	f3af 8000 	nop.w
    204a:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    204e:	b138      	cbz	r0, 2060 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x60>
    2050:	2c00      	cmp	r4, #0
    2052:	bf1c      	itt	ne
    2054:	2100      	movne	r1, #0
    2056:	f640 0016 	movwne	r0, #2070	; 0x816
    205a:	f43f af49 	beq.w	1ef0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    205e:	e77f      	b.n	1f60 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x90>
    2060:	f1b9 0f00 	cmp.w	r9, #0
    2064:	d008      	beq.n	2078 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x78>
    2066:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    206a:	2820      	cmp	r0, #32
    206c:	d104      	bne.n	2078 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x78>
    206e:	4631      	mov	r1, r6
    2070:	2002      	movs	r0, #2
    2072:	f7ff f905 	bl	1280 <CONFIG_FPROTECT_BLOCK_SIZE+0x280>
    2076:	b1f8      	cbz	r0, 20b8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xb8>
    2078:	b134      	cbz	r4, 2088 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x88>
    207a:	2100      	movs	r1, #0
    207c:	e000      	b.n	2080 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x80>
    207e:	e009      	b.n	2094 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x94>
    2080:	f640 002a 	movw	r0, #2090	; 0x82a
    2084:	f3af 8000 	nop.w
    2088:	f885 602e 	strb.w	r6, [r5, #46]	; 0x2e
    208c:	f885 b02b 	strb.w	fp, [r5, #43]	; 0x2b
    2090:	2001      	movs	r0, #1
    2092:	9009      	str	r0, [sp, #36]	; 0x24
    2094:	b124      	cbz	r4, 20a0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xa0>
    2096:	2100      	movs	r1, #0
    2098:	f640 0033 	movw	r0, #2099	; 0x833
    209c:	f3af 8000 	nop.w
    20a0:	9808      	ldr	r0, [sp, #32]
    20a2:	b188      	cbz	r0, 20c8 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xc8>
    20a4:	b124      	cbz	r4, 20b0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xb0>
    20a6:	2100      	movs	r1, #0
    20a8:	f640 0037 	movw	r0, #2103	; 0x837
    20ac:	f3af 8000 	nop.w
    20b0:	9809      	ldr	r0, [sp, #36]	; 0x24
    20b2:	b00d      	add	sp, #52	; 0x34
    20b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    20b8:	2c00      	cmp	r4, #0
    20ba:	d0f1      	beq.n	20a0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xa0>
    20bc:	2100      	movs	r1, #0
    20be:	f640 0025 	movw	r0, #2085	; 0x825
    20c2:	f3af 8000 	nop.w
    20c6:	e7e6      	b.n	2096 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x96>
    20c8:	4805      	ldr	r0, [pc, #20]	; (20e0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xe0>)
    20ca:	2800      	cmp	r0, #0
    20cc:	bf18      	it	ne
    20ce:	f3af 8000 	nopne.w
    20d2:	b662      	cpsie	i
    20d4:	e7e6      	b.n	20a4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xa4>
    20d6:	0000      	.short	0x0000
    20d8:	20000d44 	.word	0x20000d44
	...

000020e8 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>:
    20e8:	2820      	cmp	r0, #32
    20ea:	bf24      	itt	cs
    20ec:	2000      	movcs	r0, #0
    20ee:	4770      	bxcs	lr
    20f0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    20f4:	4b03      	ldr	r3, [pc, #12]	; (2104 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI+0x1c>)
    20f6:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
    20fa:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    20fe:	6042      	str	r2, [r0, #4]
    2100:	2001      	movs	r0, #1
    2102:	4770      	bx	lr
    2104:	200009c4 	.word	0x200009c4

00002108 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    2108:	b510      	push	{r4, lr}
    210a:	2820      	cmp	r0, #32
    210c:	d211      	bcs.n	2132 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    210e:	490e      	ldr	r1, [pc, #56]	; (2148 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    2110:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    2114:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    2118:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    211c:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    2120:	b13b      	cbz	r3, 2132 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    2122:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    2126:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    212a:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    212e:	2a01      	cmp	r2, #1
    2130:	d001      	beq.n	2136 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    2132:	2000      	movs	r0, #0
    2134:	bd10      	pop	{r4, pc}
    2136:	f891 202e 	ldrb.w	r2, [r1, #46]	; 0x2e
    213a:	4601      	mov	r1, r0
    213c:	2000      	movs	r0, #0
    213e:	f7ff f86f 	bl	1220 <CONFIG_FPROTECT_BLOCK_SIZE+0x220>
    2142:	2001      	movs	r0, #1
    2144:	bd10      	pop	{r4, pc}
    2146:	0000      	.short	0x0000
    2148:	20000d44 	.word	0x20000d44

0000214c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    214c:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    2150:	4e7e      	ldr	r6, [pc, #504]	; (234c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x200>)
    2152:	4680      	mov	r8, r0
    2154:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    2158:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    215c:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    2160:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    2164:	2800      	cmp	r0, #0
    2166:	d065      	beq.n	2234 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe8>
    2168:	f896 902e 	ldrb.w	r9, [r6, #46]	; 0x2e
    216c:	4d78      	ldr	r5, [pc, #480]	; (2350 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x204>)
    216e:	b125      	cbz	r5, 217a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    2170:	2100      	movs	r1, #0
    2172:	f640 30b9 	movw	r0, #3001	; 0xbb9
    2176:	f3af 8000 	nop.w
    217a:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    217e:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    2182:	2801      	cmp	r0, #1
    2184:	d018      	beq.n	21b8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    2186:	b2c0      	uxtb	r0, r0
    2188:	2804      	cmp	r0, #4
    218a:	bf1c      	itt	ne
    218c:	2805      	cmpne	r0, #5
    218e:	2806      	cmpne	r0, #6
    2190:	d055      	beq.n	223e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf2>
    2192:	b12d      	cbz	r5, 21a0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    2194:	f04f 0100 	mov.w	r1, #0
    2198:	f640 30c5 	movw	r0, #3013	; 0xbc5
    219c:	f3af 8000 	nop.w
    21a0:	f001 fc40 	bl	3a24 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    21a4:	b125      	cbz	r5, 21b0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    21a6:	2100      	movs	r1, #0
    21a8:	f640 30c9 	movw	r0, #3017	; 0xbc9
    21ac:	f3af 8000 	nop.w
    21b0:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    21b4:	2801      	cmp	r0, #1
    21b6:	d1e6      	bne.n	2186 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    21b8:	2401      	movs	r4, #1
    21ba:	b125      	cbz	r5, 21c6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    21bc:	2100      	movs	r1, #0
    21be:	f44f 603d 	mov.w	r0, #3024	; 0xbd0
    21c2:	f3af 8000 	nop.w
    21c6:	b3a4      	cbz	r4, 2232 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe6>
    21c8:	2000      	movs	r0, #0
    21ca:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    21ce:	b125      	cbz	r5, 21da <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x8e>
    21d0:	2100      	movs	r1, #0
    21d2:	f640 30d5 	movw	r0, #3029	; 0xbd5
    21d6:	f3af 8000 	nop.w
    21da:	f896 b02e 	ldrb.w	fp, [r6, #46]	; 0x2e
    21de:	2001      	movs	r0, #1
    21e0:	ea20 090b 	bic.w	r9, r0, fp
    21e4:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    21e8:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    21ec:	2240      	movs	r2, #64	; 0x40
    21ee:	f009 fdbf 	bl	bd70 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    21f2:	b125      	cbz	r5, 21fe <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb2>
    21f4:	2100      	movs	r1, #0
    21f6:	f240 50da 	movw	r0, #1498	; 0x5da
    21fa:	f3af 8000 	nop.w
    21fe:	eb06 008b 	add.w	r0, r6, fp, lsl #2
    2202:	eb06 0a89 	add.w	sl, r6, r9, lsl #2
    2206:	6a00      	ldr	r0, [r0, #32]
    2208:	f8ca 0020 	str.w	r0, [sl, #32]
    220c:	b125      	cbz	r5, 2218 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xcc>
    220e:	2100      	movs	r1, #0
    2210:	f240 50de 	movw	r0, #1502	; 0x5de
    2214:	f3af 8000 	nop.w
    2218:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    221c:	b1e0      	cbz	r0, 2258 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10c>
    221e:	2d00      	cmp	r5, #0
    2220:	bf1c      	itt	ne
    2222:	2100      	movne	r1, #0
    2224:	f640 30db 	movwne	r0, #3035	; 0xbdb
    2228:	d0c7      	beq.n	21ba <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    222a:	bf00      	nop
    222c:	f3af 8000 	nop.w
    2230:	e7c3      	b.n	21ba <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    2232:	e00a      	b.n	224a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xfe>
    2234:	f44f 613b 	mov.w	r1, #2992	; 0xbb0
    2238:	2070      	movs	r0, #112	; 0x70
    223a:	f001 facd 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    223e:	464a      	mov	r2, r9
    2240:	4641      	mov	r1, r8
    2242:	2001      	movs	r0, #1
    2244:	f7fe ffec 	bl	1220 <CONFIG_FPROTECT_BLOCK_SIZE+0x220>
    2248:	e7ac      	b.n	21a4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    224a:	4842      	ldr	r0, [pc, #264]	; (2354 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x208>)
    224c:	2800      	cmp	r0, #0
    224e:	bf18      	it	ne
    2250:	f3af 8000 	nopne.w
    2254:	b662      	cpsie	i
    2256:	e7b7      	b.n	21c8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7c>
    2258:	b125      	cbz	r5, 2264 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x118>
    225a:	2100      	movs	r1, #0
    225c:	f640 30df 	movw	r0, #3039	; 0xbdf
    2260:	f3af 8000 	nop.w
    2264:	f89a 3021 	ldrb.w	r3, [sl, #33]	; 0x21
    2268:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    226c:	4640      	mov	r0, r8
    226e:	461c      	mov	r4, r3
    2270:	f04f 0b20 	mov.w	fp, #32
    2274:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    2278:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    227c:	e004      	b.n	2288 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x13c>
    227e:	46a3      	mov	fp, r4
    2280:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    2284:	f89c 4001 	ldrb.w	r4, [ip, #1]
    2288:	4284      	cmp	r4, r0
    228a:	d002      	beq.n	2292 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x146>
    228c:	2c20      	cmp	r4, #32
    228e:	d02b      	beq.n	22e8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19c>
    2290:	e7f5      	b.n	227e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x132>
    2292:	2c20      	cmp	r4, #32
    2294:	d028      	beq.n	22e8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19c>
    2296:	42a3      	cmp	r3, r4
    2298:	d104      	bne.n	22a4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x158>
    229a:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    229e:	7840      	ldrb	r0, [r0, #1]
    22a0:	7008      	strb	r0, [r1, #0]
    22a2:	e005      	b.n	22b0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x164>
    22a4:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    22a8:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    22ac:	7840      	ldrb	r0, [r0, #1]
    22ae:	7048      	strb	r0, [r1, #1]
    22b0:	f1ba 0f00 	cmp.w	sl, #0
    22b4:	d011      	beq.n	22da <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    22b6:	b125      	cbz	r5, 22c2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x176>
    22b8:	2100      	movs	r1, #0
    22ba:	f240 503c 	movw	r0, #1340	; 0x53c
    22be:	f3af 8000 	nop.w
    22c2:	f89a 0000 	ldrb.w	r0, [sl]
    22c6:	42a0      	cmp	r0, r4
    22c8:	d107      	bne.n	22da <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    22ca:	b125      	cbz	r5, 22d6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18a>
    22cc:	2100      	movs	r1, #0
    22ce:	f240 503f 	movw	r0, #1343	; 0x53f
    22d2:	f3af 8000 	nop.w
    22d6:	f88a b000 	strb.w	fp, [sl]
    22da:	b15d      	cbz	r5, 22f4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a8>
    22dc:	2100      	movs	r1, #0
    22de:	f240 5044 	movw	r0, #1348	; 0x544
    22e2:	f3af 8000 	nop.w
    22e6:	e000      	b.n	22ea <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    22e8:	b125      	cbz	r5, 22f4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a8>
    22ea:	2100      	movs	r1, #0
    22ec:	f640 30e3 	movw	r0, #3043	; 0xbe3
    22f0:	f3af 8000 	nop.w
    22f4:	4818      	ldr	r0, [pc, #96]	; (2358 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x20c>)
    22f6:	2800      	cmp	r0, #0
    22f8:	bf18      	it	ne
    22fa:	f3af 8000 	nopne.w
    22fe:	f3ef 8410 	mrs	r4, PRIMASK
    2302:	b672      	cpsid	i
    2304:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    2308:	b138      	cbz	r0, 231a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ce>
    230a:	2d00      	cmp	r5, #0
    230c:	bf1c      	itt	ne
    230e:	2100      	movne	r1, #0
    2310:	f640 30e9 	movwne	r0, #3049	; 0xbe9
    2314:	f43f af51 	beq.w	21ba <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    2318:	e788      	b.n	222c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe0>
    231a:	f886 902e 	strb.w	r9, [r6, #46]	; 0x2e
    231e:	2001      	movs	r0, #1
    2320:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    2324:	b154      	cbz	r4, 233c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1f0>
    2326:	2d00      	cmp	r5, #0
    2328:	bf08      	it	eq
    232a:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    232e:	2100      	movs	r1, #0
    2330:	f640 30f6 	movw	r0, #3062	; 0xbf6
    2334:	f3af 8000 	nop.w
    2338:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    233c:	4805      	ldr	r0, [pc, #20]	; (2354 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x208>)
    233e:	2800      	cmp	r0, #0
    2340:	bf18      	it	ne
    2342:	f3af 8000 	nopne.w
    2346:	b662      	cpsie	i
    2348:	e7ed      	b.n	2326 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1da>
    234a:	0000      	.short	0x0000
    234c:	20000d44 	.word	0x20000d44
	...

0000235c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    235c:	b570      	push	{r4, r5, r6, lr}
    235e:	460d      	mov	r5, r1
    2360:	4606      	mov	r6, r0
    2362:	f001 f9c3 	bl	36ec <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    2366:	480f      	ldr	r0, [pc, #60]	; (23a4 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    2368:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
    236c:	2400      	movs	r4, #0
    236e:	3880      	subs	r0, #128	; 0x80
    2370:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    2374:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    2378:	b129      	cbz	r1, 2386 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    237a:	1c61      	adds	r1, r4, #1
    237c:	b2cc      	uxtb	r4, r1
    237e:	2c20      	cmp	r4, #32
    2380:	d3f8      	bcc.n	2374 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    2382:	2020      	movs	r0, #32
    2384:	bd70      	pop	{r4, r5, r6, pc}
    2386:	4808      	ldr	r0, [pc, #32]	; (23a8 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    2388:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    238c:	f840 6031 	str.w	r6, [r0, r1, lsl #3]
    2390:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    2394:	4621      	mov	r1, r4
    2396:	6045      	str	r5, [r0, #4]
    2398:	2001      	movs	r0, #1
    239a:	f7fe ff41 	bl	1220 <CONFIG_FPROTECT_BLOCK_SIZE+0x220>
    239e:	4620      	mov	r0, r4
    23a0:	bd70      	pop	{r4, r5, r6, pc}
    23a2:	0000      	.short	0x0000
    23a4:	20000d44 	.word	0x20000d44
    23a8:	200009c4 	.word	0x200009c4

000023ac <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    23ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    23b0:	b083      	sub	sp, #12
    23b2:	f000 fb21 	bl	29f8 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    23b6:	4605      	mov	r5, r0
    23b8:	f000 fdd4 	bl	2f64 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    23bc:	4c63      	ldr	r4, [pc, #396]	; (254c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1a0>)
    23be:	68a0      	ldr	r0, [r4, #8]
    23c0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    23c4:	bf1c      	itt	ne
    23c6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    23ca:	60a0      	strne	r0, [r4, #8]
    23cc:	7fa0      	ldrb	r0, [r4, #30]
    23ce:	f8df b180 	ldr.w	fp, [pc, #384]	; 2550 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1a4>
    23d2:	b9a8      	cbnz	r0, 2400 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x54>
    23d4:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
    23d8:	1a08      	subs	r0, r1, r0
    23da:	0200      	lsls	r0, r0, #8
    23dc:	17c1      	asrs	r1, r0, #31
    23de:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    23e2:	1200      	asrs	r0, r0, #8
    23e4:	f44f 710c 	mov.w	r1, #560	; 0x230
    23e8:	f009 fb81 	bl	baee <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    23ec:	6921      	ldr	r1, [r4, #16]
    23ee:	4408      	add	r0, r1
    23f0:	1a28      	subs	r0, r5, r0
    23f2:	0200      	lsls	r0, r0, #8
    23f4:	17c1      	asrs	r1, r0, #31
    23f6:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    23fa:	1200      	asrs	r0, r0, #8
    23fc:	0fc0      	lsrs	r0, r0, #31
    23fe:	d00b      	beq.n	2418 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x6c>
    2400:	7e60      	ldrb	r0, [r4, #25]
    2402:	b1e8      	cbz	r0, 2440 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x94>
    2404:	f000 fc04 	bl	2c10 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    2408:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    240c:	b1f0      	cbz	r0, 244c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa0>
    240e:	f240 4154 	movw	r1, #1108	; 0x454
    2412:	2070      	movs	r0, #112	; 0x70
    2414:	f001 f9e0 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2418:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    241c:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    2420:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2424:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    2428:	6840      	ldr	r0, [r0, #4]
    242a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    242e:	f85b 2031 	ldr.w	r2, [fp, r1, lsl #3]
    2432:	2108      	movs	r1, #8
    2434:	4790      	blx	r2
    2436:	f240 4143 	movw	r1, #1091	; 0x443
    243a:	2070      	movs	r0, #112	; 0x70
    243c:	f001 f9cc 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2440:	1ce8      	adds	r0, r5, #3
    2442:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2446:	f000 fadd 	bl	2a04 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    244a:	e7dd      	b.n	2408 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x5c>
    244c:	f04f 0a01 	mov.w	sl, #1
    2450:	f884 a02a 	strb.w	sl, [r4, #42]	; 0x2a
    2454:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2458:	2820      	cmp	r0, #32
    245a:	d024      	beq.n	24a6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xfa>
    245c:	f894 802f 	ldrb.w	r8, [r4, #47]	; 0x2f
    2460:	2020      	movs	r0, #32
    2462:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    2466:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    246a:	2600      	movs	r6, #0
    246c:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    2470:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    2474:	4837      	ldr	r0, [pc, #220]	; (2554 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1a8>)
    2476:	6026      	str	r6, [r4, #0]
    2478:	7800      	ldrb	r0, [r0, #0]
    247a:	2802      	cmp	r0, #2
    247c:	bf16      	itet	ne
    247e:	2803      	cmpne	r0, #3
    2480:	2001      	moveq	r0, #1
    2482:	2000      	movne	r0, #0
    2484:	7720      	strb	r0, [r4, #28]
    2486:	f894 702e 	ldrb.w	r7, [r4, #46]	; 0x2e
    248a:	eb04 0987 	add.w	r9, r4, r7, lsl #2
    248e:	f899 0020 	ldrb.w	r0, [r9, #32]
    2492:	2820      	cmp	r0, #32
    2494:	d031      	beq.n	24fa <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14e>
    2496:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    249a:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    249e:	7d81      	ldrb	r1, [r0, #22]
    24a0:	2901      	cmp	r1, #1
    24a2:	d005      	beq.n	24b0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x104>
    24a4:	e029      	b.n	24fa <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14e>
    24a6:	f240 4157 	movw	r1, #1111	; 0x457
    24aa:	2070      	movs	r0, #112	; 0x70
    24ac:	f001 f994 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    24b0:	46ab      	mov	fp, r5
    24b2:	f100 0508 	add.w	r5, r0, #8
    24b6:	8a40      	ldrh	r0, [r0, #18]
    24b8:	aa01      	add	r2, sp, #4
    24ba:	4669      	mov	r1, sp
    24bc:	f000 f946 	bl	274c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    24c0:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    24c4:	2820      	cmp	r0, #32
    24c6:	d004      	beq.n	24d2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x126>
    24c8:	6920      	ldr	r0, [r4, #16]
    24ca:	1d40      	adds	r0, r0, #5
    24cc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    24d0:	e00b      	b.n	24ea <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x13e>
    24d2:	8968      	ldrh	r0, [r5, #10]
    24d4:	f10b 0b09 	add.w	fp, fp, #9
    24d8:	b128      	cbz	r0, 24e6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x13a>
    24da:	f001 f919 	bl	3710 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    24de:	2800      	cmp	r0, #0
    24e0:	bf08      	it	eq
    24e2:	f10b 0b32 	addeq.w	fp, fp, #50	; 0x32
    24e6:	f02b 407f 	bic.w	r0, fp, #4278190080	; 0xff000000
    24ea:	e9d5 2100 	ldrd	r2, r1, [r5]
    24ee:	1a89      	subs	r1, r1, r2
    24f0:	6028      	str	r0, [r5, #0]
    24f2:	4408      	add	r0, r1
    24f4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    24f8:	6068      	str	r0, [r5, #4]
    24fa:	4639      	mov	r1, r7
    24fc:	2001      	movs	r0, #1
    24fe:	f7fe febf 	bl	1280 <CONFIG_FPROTECT_BLOCK_SIZE+0x280>
    2502:	2800      	cmp	r0, #0
    2504:	d0f9      	beq.n	24fa <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14e>
    2506:	4814      	ldr	r0, [pc, #80]	; (2558 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1ac>)
    2508:	eb00 1087 	add.w	r0, r0, r7, lsl #6
    250c:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    2510:	2802      	cmp	r0, #2
    2512:	d104      	bne.n	251e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x172>
    2514:	463a      	mov	r2, r7
    2516:	4641      	mov	r1, r8
    2518:	2006      	movs	r0, #6
    251a:	f7fe fe81 	bl	1220 <CONFIG_FPROTECT_BLOCK_SIZE+0x220>
    251e:	f884 a02b 	strb.w	sl, [r4, #43]	; 0x2b
    2522:	f899 0021 	ldrb.w	r0, [r9, #33]	; 0x21
    2526:	2820      	cmp	r0, #32
    2528:	d003      	beq.n	2532 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x186>
    252a:	480c      	ldr	r0, [pc, #48]	; (255c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b0>)
    252c:	7840      	ldrb	r0, [r0, #1]
    252e:	f001 fa23 	bl	3978 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2532:	7f20      	ldrb	r0, [r4, #28]
    2534:	2800      	cmp	r0, #0
    2536:	bf04      	itt	eq
    2538:	b003      	addeq	sp, #12
    253a:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    253e:	f000 fd5b 	bl	2ff8 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    2542:	7726      	strb	r6, [r4, #28]
    2544:	7766      	strb	r6, [r4, #29]
    2546:	b003      	add	sp, #12
    2548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    254c:	20000d44 	.word	0x20000d44
    2550:	200009c4 	.word	0x200009c4
    2554:	20000016 	.word	0x20000016
    2558:	20000cc4 	.word	0x20000cc4
    255c:	20000014 	.word	0x20000014

00002560 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    2560:	b510      	push	{r4, lr}
    2562:	4c30      	ldr	r4, [pc, #192]	; (2624 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc4>)
    2564:	b082      	sub	sp, #8
    2566:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    256a:	2920      	cmp	r1, #32
    256c:	d008      	beq.n	2580 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x20>
    256e:	68a1      	ldr	r1, [r4, #8]
    2570:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    2574:	d009      	beq.n	258a <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2a>
    2576:	f640 21e8 	movw	r1, #2792	; 0xae8
    257a:	2070      	movs	r0, #112	; 0x70
    257c:	f001 f92c 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2580:	f640 21e7 	movw	r1, #2791	; 0xae7
    2584:	2070      	movs	r0, #112	; 0x70
    2586:	f001 f927 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    258a:	6862      	ldr	r2, [r4, #4]
    258c:	4601      	mov	r1, r0
    258e:	4b26      	ldr	r3, [pc, #152]	; (2628 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc8>)
    2590:	1850      	adds	r0, r2, r1
    2592:	429a      	cmp	r2, r3
    2594:	d904      	bls.n	25a0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x40>
    2596:	f240 6116 	movw	r1, #1558	; 0x616
    259a:	2070      	movs	r0, #112	; 0x70
    259c:	f001 f91c 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    25a0:	4a22      	ldr	r2, [pc, #136]	; (262c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xcc>)
    25a2:	4291      	cmp	r1, r2
    25a4:	dd04      	ble.n	25b0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x50>
    25a6:	f240 6117 	movw	r1, #1559	; 0x617
    25aa:	2070      	movs	r0, #112	; 0x70
    25ac:	f001 f914 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    25b0:	4a1f      	ldr	r2, [pc, #124]	; (2630 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd0>)
    25b2:	4291      	cmp	r1, r2
    25b4:	da04      	bge.n	25c0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x60>
    25b6:	f44f 61c3 	mov.w	r1, #1560	; 0x618
    25ba:	2070      	movs	r0, #112	; 0x70
    25bc:	f001 f90c 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    25c0:	491c      	ldr	r1, [pc, #112]	; (2634 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd4>)
    25c2:	4281      	cmp	r1, r0
    25c4:	bfdc      	itt	le
    25c6:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    25ca:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    25ce:	dd05      	ble.n	25dc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    25d0:	2800      	cmp	r0, #0
    25d2:	bfbc      	itt	lt
    25d4:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    25d8:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    25dc:	aa01      	add	r2, sp, #4
    25de:	4669      	mov	r1, sp
    25e0:	f000 f8b4 	bl	274c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    25e4:	f89d 0004 	ldrb.w	r0, [sp, #4]
    25e8:	280f      	cmp	r0, #15
    25ea:	bf8c      	ite	hi
    25ec:	2001      	movhi	r0, #1
    25ee:	2000      	movls	r0, #0
    25f0:	9900      	ldr	r1, [sp, #0]
    25f2:	4408      	add	r0, r1
    25f4:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    25f8:	60a1      	str	r1, [r4, #8]
    25fa:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    25fe:	2800      	cmp	r0, #0
    2600:	bf04      	itt	eq
    2602:	b002      	addeq	sp, #8
    2604:	bd10      	popeq	{r4, pc}
    2606:	2301      	movs	r3, #1
    2608:	2203      	movs	r2, #3
    260a:	2005      	movs	r0, #5
    260c:	f000 fb7a 	bl	2d04 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    2610:	2800      	cmp	r0, #0
    2612:	bf1c      	itt	ne
    2614:	b002      	addne	sp, #8
    2616:	bd10      	popne	{r4, pc}
    2618:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
    261c:	2070      	movs	r0, #112	; 0x70
    261e:	f001 f8db 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2622:	0000      	.short	0x0000
    2624:	20000d44 	.word	0x20000d44
    2628:	1e847fff 	.word	0x1e847fff
    262c:	07a12000 	.word	0x07a12000
    2630:	f85ee000 	.word	0xf85ee000
    2634:	1e848000 	.word	0x1e848000

00002638 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    2638:	b570      	push	{r4, r5, r6, lr}
    263a:	4c1e      	ldr	r4, [pc, #120]	; (26b4 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    263c:	2120      	movs	r1, #32
    263e:	f884 1020 	strb.w	r1, [r4, #32]
    2642:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    2646:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    264a:	2000      	movs	r0, #0
    264c:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    2650:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    2654:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    2658:	1e42      	subs	r2, r0, #1
    265a:	60a2      	str	r2, [r4, #8]
    265c:	6020      	str	r0, [r4, #0]
    265e:	77a0      	strb	r0, [r4, #30]
    2660:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    2664:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    2668:	7720      	strb	r0, [r4, #28]
    266a:	7760      	strb	r0, [r4, #29]
    266c:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    2670:	4911      	ldr	r1, [pc, #68]	; (26b8 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x80>)
    2672:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    2676:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    267a:	7008      	strb	r0, [r1, #0]
    267c:	7048      	strb	r0, [r1, #1]
    267e:	8048      	strh	r0, [r1, #2]
    2680:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    2684:	2210      	movs	r2, #16
    2686:	7088      	strb	r0, [r1, #2]
    2688:	f801 0f04 	strb.w	r0, [r1, #4]!
    268c:	1e52      	subs	r2, r2, #1
    268e:	d1fa      	bne.n	2686 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x4e>
    2690:	4d0a      	ldr	r5, [pc, #40]	; (26bc <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x84>)
    2692:	2601      	movs	r6, #1
    2694:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    2698:	20ff      	movs	r0, #255	; 0xff
    269a:	7028      	strb	r0, [r5, #0]
    269c:	4808      	ldr	r0, [pc, #32]	; (26c0 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x88>)
    269e:	f001 f94d 	bl	393c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    26a2:	7068      	strb	r0, [r5, #1]
    26a4:	f001 f9a8 	bl	39f8 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    26a8:	60a8      	str	r0, [r5, #8]
    26aa:	f000 fced 	bl	3088 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    26ae:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    26b2:	bd70      	pop	{r4, r5, r6, pc}
    26b4:	20000d44 	.word	0x20000d44
    26b8:	20000016 	.word	0x20000016
    26bc:	20000014 	.word	0x20000014
    26c0:	000010dd 	.word	0x000010dd

000026c4 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>:
    26c4:	b570      	push	{r4, r5, r6, lr}
    26c6:	4604      	mov	r4, r0
    26c8:	4615      	mov	r5, r2
    26ca:	4608      	mov	r0, r1
    26cc:	f009 f9d7 	bl	ba7e <sym_BE2HGIHF5RDQALAHNCCVX54XTGKEN4KZFXFBHBQ>
    26d0:	4a0f      	ldr	r2, [pc, #60]	; (2710 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x4c>)
    26d2:	1b01      	subs	r1, r0, r4
    26d4:	f102 0c01 	add.w	ip, r2, #1
    26d8:	ebb1 0f9c 	cmp.w	r1, ip, lsr #2
    26dc:	bf24      	itt	cs
    26de:	1a23      	subcs	r3, r4, r0
    26e0:	ebb3 0f9c 	cmpcs.w	r3, ip, lsr #2
    26e4:	d30b      	bcc.n	26fe <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x3a>
    26e6:	428a      	cmp	r2, r1
    26e8:	d203      	bcs.n	26f2 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x2e>
    26ea:	1b11      	subs	r1, r2, r4
    26ec:	4408      	add	r0, r1
    26ee:	1c41      	adds	r1, r0, #1
    26f0:	e005      	b.n	26fe <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x3a>
    26f2:	429a      	cmp	r2, r3
    26f4:	d207      	bcs.n	2706 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x42>
    26f6:	1a10      	subs	r0, r2, r0
    26f8:	4420      	add	r0, r4
    26fa:	1c40      	adds	r0, r0, #1
    26fc:	4241      	negs	r1, r0
    26fe:	f101 000f 	add.w	r0, r1, #15
    2702:	1a28      	subs	r0, r5, r0
    2704:	bd70      	pop	{r4, r5, r6, pc}
    2706:	f640 310b 	movw	r1, #2827	; 0xb0b
    270a:	2070      	movs	r0, #112	; 0x70
    270c:	f001 f864 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2710:	1e847fff 	.word	0x1e847fff

00002714 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    2714:	0b41      	lsrs	r1, r0, #13
    2716:	f248 6237 	movw	r2, #34359	; 0x8637
    271a:	4351      	muls	r1, r2
    271c:	0c0a      	lsrs	r2, r1, #16
    271e:	4b09      	ldr	r3, [pc, #36]	; (2744 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    2720:	0251      	lsls	r1, r2, #9
    2722:	fb02 0203 	mla	r2, r2, r3, r0
    2726:	4808      	ldr	r0, [pc, #32]	; (2748 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    2728:	4350      	muls	r0, r2
    272a:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    272e:	306e      	adds	r0, #110	; 0x6e
    2730:	0d40      	lsrs	r0, r0, #21
    2732:	425b      	negs	r3, r3
    2734:	fb10 f303 	smulbb	r3, r0, r3
    2738:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    273c:	bf88      	it	hi
    273e:	1c49      	addhi	r1, r1, #1
    2740:	4408      	add	r0, r1
    2742:	4770      	bx	lr
    2744:	ffffc2f7 	.word	0xffffc2f7
    2748:	00010c6f 	.word	0x00010c6f

0000274c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    274c:	0b43      	lsrs	r3, r0, #13
    274e:	f248 6c37 	movw	ip, #34359	; 0x8637
    2752:	fb03 f30c 	mul.w	r3, r3, ip
    2756:	b430      	push	{r4, r5}
    2758:	0c1b      	lsrs	r3, r3, #16
    275a:	f8df c044 	ldr.w	ip, [pc, #68]	; 27a0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    275e:	025c      	lsls	r4, r3, #9
    2760:	fb03 030c 	mla	r3, r3, ip, r0
    2764:	480f      	ldr	r0, [pc, #60]	; (27a4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    2766:	4358      	muls	r0, r3
    2768:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    276c:	eb04 000c 	add.w	r0, r4, ip
    2770:	f643 5409 	movw	r4, #15625	; 0x3d09
    2774:	fb1c f404 	smulbb	r4, ip, r4
    2778:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    277c:	f643 5508 	movw	r5, #15624	; 0x3d08
    2780:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    2784:	442c      	add	r4, r5
    2786:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    278a:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    278e:	bf84      	itt	hi
    2790:	f04f 0c00 	movhi.w	ip, #0
    2794:	1c40      	addhi	r0, r0, #1
    2796:	6008      	str	r0, [r1, #0]
    2798:	f882 c000 	strb.w	ip, [r2]
    279c:	bc30      	pop	{r4, r5}
    279e:	4770      	bx	lr
    27a0:	ffffc2f7 	.word	0xffffc2f7
    27a4:	00010c6f 	.word	0x00010c6f

000027a8 <MPSL_IRQ_RTC0_Handler>:
    27a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    27ac:	4c38      	ldr	r4, [pc, #224]	; (2890 <MPSL_IRQ_RTC0_Handler+0xe8>)
    27ae:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    27b2:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 2894 <MPSL_IRQ_RTC0_Handler+0xec>
    27b6:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    27ba:	f44f 6600 	mov.w	r6, #2048	; 0x800
    27be:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    27c2:	f04f 0500 	mov.w	r5, #0
    27c6:	bf1c      	itt	ne
    27c8:	f8d4 0140 	ldrne.w	r0, [r4, #320]	; 0x140
    27cc:	2800      	cmpne	r0, #0
    27ce:	d017      	beq.n	2800 <MPSL_IRQ_RTC0_Handler+0x58>
    27d0:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    27d4:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    27d8:	482f      	ldr	r0, [pc, #188]	; (2898 <MPSL_IRQ_RTC0_Handler+0xf0>)
    27da:	6800      	ldr	r0, [r0, #0]
    27dc:	f8d8 1000 	ldr.w	r1, [r8]
    27e0:	eba0 0001 	sub.w	r0, r0, r1
    27e4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    27e8:	2802      	cmp	r0, #2
    27ea:	d302      	bcc.n	27f2 <MPSL_IRQ_RTC0_Handler+0x4a>
    27ec:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    27f0:	d306      	bcc.n	2800 <MPSL_IRQ_RTC0_Handler+0x58>
    27f2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    27f6:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    27fa:	2004      	movs	r0, #4
    27fc:	f7fe ff68 	bl	16d0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2800:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2804:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    2808:	bf1c      	itt	ne
    280a:	f8d4 0144 	ldrne.w	r0, [r4, #324]	; 0x144
    280e:	2800      	cmpne	r0, #0
    2810:	d017      	beq.n	2842 <MPSL_IRQ_RTC0_Handler+0x9a>
    2812:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
    2816:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    281a:	4820      	ldr	r0, [pc, #128]	; (289c <MPSL_IRQ_RTC0_Handler+0xf4>)
    281c:	6800      	ldr	r0, [r0, #0]
    281e:	f8d8 1000 	ldr.w	r1, [r8]
    2822:	eba0 0001 	sub.w	r0, r0, r1
    2826:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    282a:	2802      	cmp	r0, #2
    282c:	d302      	bcc.n	2834 <MPSL_IRQ_RTC0_Handler+0x8c>
    282e:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    2832:	d306      	bcc.n	2842 <MPSL_IRQ_RTC0_Handler+0x9a>
    2834:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    2838:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    283c:	2005      	movs	r0, #5
    283e:	f7fe ff47 	bl	16d0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2842:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2846:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    284a:	bf1a      	itte	ne
    284c:	f8d4 0148 	ldrne.w	r0, [r4, #328]	; 0x148
    2850:	2800      	cmpne	r0, #0
    2852:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    2856:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
    285a:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    285e:	4810      	ldr	r0, [pc, #64]	; (28a0 <MPSL_IRQ_RTC0_Handler+0xf8>)
    2860:	6800      	ldr	r0, [r0, #0]
    2862:	f8d8 1000 	ldr.w	r1, [r8]
    2866:	eba0 0001 	sub.w	r0, r0, r1
    286a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    286e:	2802      	cmp	r0, #2
    2870:	d304      	bcc.n	287c <MPSL_IRQ_RTC0_Handler+0xd4>
    2872:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    2876:	bf38      	it	cc
    2878:	e8bd 81f0 	ldmiacc.w	sp!, {r4, r5, r6, r7, r8, pc}
    287c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    2880:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    2884:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2888:	2006      	movs	r0, #6
    288a:	f7fe bf21 	b.w	16d0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    288e:	0000      	.short	0x0000
    2890:	4000b000 	.word	0x4000b000
    2894:	4000b504 	.word	0x4000b504
    2898:	4000b540 	.word	0x4000b540
    289c:	4000b544 	.word	0x4000b544
    28a0:	4000b548 	.word	0x4000b548

000028a4 <MPSL_IRQ_TIMER0_Handler>:
    28a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    28a8:	4d3a      	ldr	r5, [pc, #232]	; (2994 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    28aa:	7828      	ldrb	r0, [r5, #0]
    28ac:	2804      	cmp	r0, #4
    28ae:	d06c      	beq.n	298a <MPSL_IRQ_TIMER0_Handler+0xe6>
    28b0:	1ce8      	adds	r0, r5, #3
    28b2:	2201      	movs	r2, #1
    28b4:	7801      	ldrb	r1, [r0, #0]
    28b6:	b159      	cbz	r1, 28d0 <MPSL_IRQ_TIMER0_Handler+0x2c>
    28b8:	2901      	cmp	r1, #1
    28ba:	bf08      	it	eq
    28bc:	706a      	strbeq	r2, [r5, #1]
    28be:	d002      	beq.n	28c6 <MPSL_IRQ_TIMER0_Handler+0x22>
    28c0:	7869      	ldrb	r1, [r5, #1]
    28c2:	2900      	cmp	r1, #0
    28c4:	d05c      	beq.n	2980 <MPSL_IRQ_TIMER0_Handler+0xdc>
    28c6:	2102      	movs	r1, #2
    28c8:	7001      	strb	r1, [r0, #0]
    28ca:	7840      	ldrb	r0, [r0, #1]
    28cc:	f000 fae2 	bl	2e94 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    28d0:	4c31      	ldr	r4, [pc, #196]	; (2998 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    28d2:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    28d6:	f04f 0800 	mov.w	r8, #0
    28da:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    28de:	f44f 7680 	mov.w	r6, #256	; 0x100
    28e2:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    28e6:	bf1c      	itt	ne
    28e8:	f8d4 014c 	ldrne.w	r0, [r4, #332]	; 0x14c
    28ec:	2800      	cmpne	r0, #0
    28ee:	d008      	beq.n	2902 <MPSL_IRQ_TIMER0_Handler+0x5e>
    28f0:	f04f 0003 	mov.w	r0, #3
    28f4:	f000 face 	bl	2e94 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    28f8:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    28fc:	2003      	movs	r0, #3
    28fe:	f7fe fee7 	bl	16d0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2902:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2906:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    290a:	bf1c      	itt	ne
    290c:	f8d4 0148 	ldrne.w	r0, [r4, #328]	; 0x148
    2910:	2800      	cmpne	r0, #0
    2912:	d008      	beq.n	2926 <MPSL_IRQ_TIMER0_Handler+0x82>
    2914:	f04f 0002 	mov.w	r0, #2
    2918:	f000 fabc 	bl	2e94 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    291c:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2920:	2002      	movs	r0, #2
    2922:	f7fe fed5 	bl	16d0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2926:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    292a:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    292e:	bf1c      	itt	ne
    2930:	f8d4 0144 	ldrne.w	r0, [r4, #324]	; 0x144
    2934:	2800      	cmpne	r0, #0
    2936:	d008      	beq.n	294a <MPSL_IRQ_TIMER0_Handler+0xa6>
    2938:	f04f 0001 	mov.w	r0, #1
    293c:	f000 faaa 	bl	2e94 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2940:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2944:	2001      	movs	r0, #1
    2946:	f7fe fec3 	bl	16d0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    294a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    294e:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    2952:	bf1a      	itte	ne
    2954:	f8d4 0140 	ldrne.w	r0, [r4, #320]	; 0x140
    2958:	2800      	cmpne	r0, #0
    295a:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    295e:	f04f 0000 	mov.w	r0, #0
    2962:	f000 fa97 	bl	2e94 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2966:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    296a:	2004      	movs	r0, #4
    296c:	7028      	strb	r0, [r5, #0]
    296e:	f8c5 8008 	str.w	r8, [r5, #8]
    2972:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    2976:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    297a:	2000      	movs	r0, #0
    297c:	f7fe bea8 	b.w	16d0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2980:	f240 3166 	movw	r1, #870	; 0x366
    2984:	206c      	movs	r0, #108	; 0x6c
    2986:	f000 ff27 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    298a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    298e:	2007      	movs	r0, #7
    2990:	f7fe be9e 	b.w	16d0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2994:	20000020 	.word	0x20000020
    2998:	40008000 	.word	0x40008000
    299c:	2201      	movs	r2, #1
    299e:	0213      	lsls	r3, r2, #8
    29a0:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    29a4:	2000      	movs	r0, #0
    29a6:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
    29aa:	f501 71c0 	add.w	r1, r1, #384	; 0x180
    29ae:	f3bf 8f4f 	dsb	sy
    29b2:	f3bf 8f6f 	isb	sy
    29b6:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
    29ba:	490c      	ldr	r1, [pc, #48]	; (29ec <MPSL_IRQ_TIMER0_Handler+0x148>)
    29bc:	604a      	str	r2, [r1, #4]
    29be:	1e43      	subs	r3, r0, #1
    29c0:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    29c4:	4b0a      	ldr	r3, [pc, #40]	; (29f0 <MPSL_IRQ_TIMER0_Handler+0x14c>)
    29c6:	6018      	str	r0, [r3, #0]
    29c8:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    29cc:	1d1b      	adds	r3, r3, #4
    29ce:	6018      	str	r0, [r3, #0]
    29d0:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    29d4:	1d1b      	adds	r3, r3, #4
    29d6:	6018      	str	r0, [r3, #0]
    29d8:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    29dc:	1d1b      	adds	r3, r3, #4
    29de:	6018      	str	r0, [r3, #0]
    29e0:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    29e4:	610a      	str	r2, [r1, #16]
    29e6:	4903      	ldr	r1, [pc, #12]	; (29f4 <MPSL_IRQ_TIMER0_Handler+0x150>)
    29e8:	7048      	strb	r0, [r1, #1]
    29ea:	4770      	bx	lr
    29ec:	40008000 	.word	0x40008000
    29f0:	40008540 	.word	0x40008540
    29f4:	20000020 	.word	0x20000020

000029f8 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    29f8:	4801      	ldr	r0, [pc, #4]	; (2a00 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    29fa:	6800      	ldr	r0, [r0, #0]
    29fc:	4770      	bx	lr
    29fe:	0000      	.short	0x0000
    2a00:	4000b504 	.word	0x4000b504

00002a04 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    2a04:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    2a08:	4e41      	ldr	r6, [pc, #260]	; (2b10 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x10c>)
    2a0a:	4604      	mov	r4, r0
    2a0c:	1ef7      	subs	r7, r6, #3
    2a0e:	f896 c000 	ldrb.w	ip, [r6]
    2a12:	68f8      	ldr	r0, [r7, #12]
    2a14:	f1bc 0f01 	cmp.w	ip, #1
    2a18:	bf04      	itt	eq
    2a1a:	42a0      	cmpeq	r0, r4
    2a1c:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    2a20:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    2a24:	4a3b      	ldr	r2, [pc, #236]	; (2b14 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x110>)
    2a26:	6011      	str	r1, [r2, #0]
    2a28:	493b      	ldr	r1, [pc, #236]	; (2b18 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x114>)
    2a2a:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    2a2e:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    2a32:	4a3a      	ldr	r2, [pc, #232]	; (2b1c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x118>)
    2a34:	f04f 0500 	mov.w	r5, #0
    2a38:	f1bc 0f00 	cmp.w	ip, #0
    2a3c:	d057      	beq.n	2aee <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xea>
    2a3e:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    2a42:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2a46:	6015      	str	r5, [r2, #0]
    2a48:	f8c1 5144 	str.w	r5, [r1, #324]	; 0x144
    2a4c:	f8d1 2148 	ldr.w	r2, [r1, #328]	; 0x148
    2a50:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    2a54:	f04f 0801 	mov.w	r8, #1
    2a58:	2a00      	cmp	r2, #0
    2a5a:	bf04      	itt	eq
    2a5c:	f44f 6200 	moveq.w	r2, #2048	; 0x800
    2a60:	f8c9 2280 	streq.w	r2, [r9, #640]	; 0x280
    2a64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2a68:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    2a6c:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2a70:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
    2a74:	4a2a      	ldr	r2, [pc, #168]	; (2b20 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x11c>)
    2a76:	f8d2 a000 	ldr.w	sl, [r2]
    2a7a:	eba4 0a0a 	sub.w	sl, r4, sl
    2a7e:	f02a 4b7f 	bic.w	fp, sl, #4278190080	; 0xff000000
    2a82:	f1bb 0f02 	cmp.w	fp, #2
    2a86:	d33c      	bcc.n	2b02 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfe>
    2a88:	f04f 0a02 	mov.w	sl, #2
    2a8c:	f5bb 0f80 	cmp.w	fp, #4194304	; 0x400000
    2a90:	d237      	bcs.n	2b02 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfe>
    2a92:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    2a96:	f8c1 3344 	str.w	r3, [r1, #836]	; 0x344
    2a9a:	f1bc 0f00 	cmp.w	ip, #0
    2a9e:	d005      	beq.n	2aac <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xa8>
    2aa0:	6811      	ldr	r1, [r2, #0]
    2aa2:	1a41      	subs	r1, r0, r1
    2aa4:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2aa8:	2902      	cmp	r1, #2
    2aaa:	d3f9      	bcc.n	2aa0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x9c>
    2aac:	f8c7 8008 	str.w	r8, [r7, #8]
    2ab0:	703d      	strb	r5, [r7, #0]
    2ab2:	f7ff ff73 	bl	299c <MPSL_IRQ_TIMER0_Handler+0xf8>
    2ab6:	481b      	ldr	r0, [pc, #108]	; (2b24 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x120>)
    2ab8:	6005      	str	r5, [r0, #0]
    2aba:	1d00      	adds	r0, r0, #4
    2abc:	f8c0 a000 	str.w	sl, [r0]
    2ac0:	4919      	ldr	r1, [pc, #100]	; (2b28 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x124>)
    2ac2:	2004      	movs	r0, #4
    2ac4:	6008      	str	r0, [r1, #0]
    2ac6:	4919      	ldr	r1, [pc, #100]	; (2b2c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x128>)
    2ac8:	f8c1 800c 	str.w	r8, [r1, #12]
    2acc:	68ba      	ldr	r2, [r7, #8]
    2ace:	f8c1 2200 	str.w	r2, [r1, #512]	; 0x200
    2ad2:	0181      	lsls	r1, r0, #6
    2ad4:	f8c9 1280 	str.w	r1, [r9, #640]	; 0x280
    2ad8:	f8c9 1100 	str.w	r1, [r9, #256]	; 0x100
    2adc:	4a14      	ldr	r2, [pc, #80]	; (2b30 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x12c>)
    2ade:	0741      	lsls	r1, r0, #29
    2ae0:	6011      	str	r1, [r2, #0]
    2ae2:	60fc      	str	r4, [r7, #12]
    2ae4:	7070      	strb	r0, [r6, #1]
    2ae6:	f886 8000 	strb.w	r8, [r6]
    2aea:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    2aee:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2af2:	4b10      	ldr	r3, [pc, #64]	; (2b34 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x130>)
    2af4:	601d      	str	r5, [r3, #0]
    2af6:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
    2afa:	6015      	str	r5, [r2, #0]
    2afc:	f8c1 5144 	str.w	r5, [r1, #324]	; 0x144
    2b00:	e7a4      	b.n	2a4c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x48>
    2b02:	f8c1 5540 	str.w	r5, [r1, #1344]	; 0x540
    2b06:	f240 11ef 	movw	r1, #495	; 0x1ef
    2b0a:	206c      	movs	r0, #108	; 0x6c
    2b0c:	f000 fe64 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2b10:	20000023 	.word	0x20000023
    2b14:	4001f508 	.word	0x4001f508
    2b18:	4000b000 	.word	0x4000b000
    2b1c:	4000b544 	.word	0x4000b544
    2b20:	4000b504 	.word	0x4000b504
    2b24:	40008504 	.word	0x40008504
    2b28:	40008510 	.word	0x40008510
    2b2c:	40008000 	.word	0x40008000
    2b30:	4001f504 	.word	0x4001f504
    2b34:	4000b540 	.word	0x4000b540

00002b38 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    2b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2b3c:	4c2b      	ldr	r4, [pc, #172]	; (2bec <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    2b3e:	68e1      	ldr	r1, [r4, #12]
    2b40:	4281      	cmp	r1, r0
    2b42:	bf14      	ite	ne
    2b44:	2201      	movne	r2, #1
    2b46:	2200      	moveq	r2, #0
    2b48:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 2bf0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>
    2b4c:	f89c 7000 	ldrb.w	r7, [ip]
    2b50:	2f02      	cmp	r7, #2
    2b52:	d002      	beq.n	2b5a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x22>
    2b54:	2a00      	cmp	r2, #0
    2b56:	d038      	beq.n	2bca <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x92>
    2b58:	e003      	b.n	2b62 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x2a>
    2b5a:	2a00      	cmp	r2, #0
    2b5c:	bf08      	it	eq
    2b5e:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    2b62:	7862      	ldrb	r2, [r4, #1]
    2b64:	b382      	cbz	r2, 2bc8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x90>
    2b66:	4b23      	ldr	r3, [pc, #140]	; (2bf4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    2b68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2b6c:	601a      	str	r2, [r3, #0]
    2b6e:	4b22      	ldr	r3, [pc, #136]	; (2bf8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    2b70:	1395      	asrs	r5, r2, #14
    2b72:	f8c3 5308 	str.w	r5, [r3, #776]	; 0x308
    2b76:	f8c3 5348 	str.w	r5, [r3, #840]	; 0x348
    2b7a:	2600      	movs	r6, #0
    2b7c:	f8c3 6140 	str.w	r6, [r3, #320]	; 0x140
    2b80:	4a1e      	ldr	r2, [pc, #120]	; (2bfc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc4>)
    2b82:	f8d2 8000 	ldr.w	r8, [r2]
    2b86:	eba0 0808 	sub.w	r8, r0, r8
    2b8a:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    2b8e:	f1b8 0f02 	cmp.w	r8, #2
    2b92:	d324      	bcc.n	2bde <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa6>
    2b94:	f5b8 0f80 	cmp.w	r8, #4194304	; 0x400000
    2b98:	d221      	bcs.n	2bde <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa6>
    2b9a:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    2b9e:	f8c3 5344 	str.w	r5, [r3, #836]	; 0x344
    2ba2:	b12f      	cbz	r7, 2bb0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x78>
    2ba4:	6813      	ldr	r3, [r2, #0]
    2ba6:	1acb      	subs	r3, r1, r3
    2ba8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2bac:	2b02      	cmp	r3, #2
    2bae:	d3f9      	bcc.n	2ba4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x6c>
    2bb0:	4b13      	ldr	r3, [pc, #76]	; (2c00 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc8>)
    2bb2:	2102      	movs	r1, #2
    2bb4:	074a      	lsls	r2, r1, #29
    2bb6:	601a      	str	r2, [r3, #0]
    2bb8:	60e0      	str	r0, [r4, #12]
    2bba:	2004      	movs	r0, #4
    2bbc:	f88c 0001 	strb.w	r0, [ip, #1]
    2bc0:	f88c 1000 	strb.w	r1, [ip]
    2bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2bc8:	e004      	b.n	2bd4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    2bca:	f240 11fd 	movw	r1, #509	; 0x1fd
    2bce:	206c      	movs	r0, #108	; 0x6c
    2bd0:	f000 fe02 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2bd4:	f240 2101 	movw	r1, #513	; 0x201
    2bd8:	206c      	movs	r0, #108	; 0x6c
    2bda:	f000 fdfd 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2bde:	f8c3 6540 	str.w	r6, [r3, #1344]	; 0x540
    2be2:	f240 210d 	movw	r1, #525	; 0x20d
    2be6:	206c      	movs	r0, #108	; 0x6c
    2be8:	f000 fdf6 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2bec:	20000020 	.word	0x20000020
    2bf0:	20000023 	.word	0x20000023
    2bf4:	4001f508 	.word	0x4001f508
    2bf8:	4000b000 	.word	0x4000b000
    2bfc:	4000b504 	.word	0x4000b504
    2c00:	4001f504 	.word	0x4001f504

00002c04 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    2c04:	4801      	ldr	r0, [pc, #4]	; (2c0c <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    2c06:	68c0      	ldr	r0, [r0, #12]
    2c08:	4770      	bx	lr
    2c0a:	0000      	.short	0x0000
    2c0c:	20000020 	.word	0x20000020

00002c10 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    2c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2c14:	4833      	ldr	r0, [pc, #204]	; (2ce4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd4>)
    2c16:	f46f 2480 	mvn.w	r4, #262144	; 0x40000
    2c1a:	f8c0 4308 	str.w	r4, [r0, #776]	; 0x308
    2c1e:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 2ce8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd8>
    2c22:	4a32      	ldr	r2, [pc, #200]	; (2cec <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xdc>)
    2c24:	2100      	movs	r1, #0
    2c26:	f89c 3000 	ldrb.w	r3, [ip]
    2c2a:	b163      	cbz	r3, 2c46 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x36>
    2c2c:	f46f 24a0 	mvn.w	r4, #327680	; 0x50000
    2c30:	f8c0 4348 	str.w	r4, [r0, #840]	; 0x348
    2c34:	6011      	str	r1, [r2, #0]
    2c36:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    2c3a:	bf00      	nop
    2c3c:	f8d0 0148 	ldr.w	r0, [r0, #328]	; 0x148
    2c40:	2201      	movs	r2, #1
    2c42:	b980      	cbnz	r0, 2c66 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x56>
    2c44:	e009      	b.n	2c5a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x4a>
    2c46:	f8c0 4348 	str.w	r4, [r0, #840]	; 0x348
    2c4a:	4c29      	ldr	r4, [pc, #164]	; (2cf0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    2c4c:	6021      	str	r1, [r4, #0]
    2c4e:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    2c52:	6011      	str	r1, [r2, #0]
    2c54:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    2c58:	e7f0      	b.n	2c3c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x2c>
    2c5a:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    2c5e:	f44f 6000 	mov.w	r0, #2048	; 0x800
    2c62:	f8c4 0280 	str.w	r0, [r4, #640]	; 0x280
    2c66:	2b02      	cmp	r3, #2
    2c68:	d004      	beq.n	2c74 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x64>
    2c6a:	f240 2119 	movw	r1, #537	; 0x219
    2c6e:	206c      	movs	r0, #108	; 0x6c
    2c70:	f000 fdb2 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c74:	4e1f      	ldr	r6, [pc, #124]	; (2cf4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>)
    2c76:	6830      	ldr	r0, [r6, #0]
    2c78:	4c1f      	ldr	r4, [pc, #124]	; (2cf8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    2c7a:	1cc0      	adds	r0, r0, #3
    2c7c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2c80:	68e3      	ldr	r3, [r4, #12]
    2c82:	4d1e      	ldr	r5, [pc, #120]	; (2cfc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    2c84:	4298      	cmp	r0, r3
    2c86:	d00b      	beq.n	2ca0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    2c88:	6837      	ldr	r7, [r6, #0]
    2c8a:	1bdf      	subs	r7, r3, r7
    2c8c:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    2c90:	2f04      	cmp	r7, #4
    2c92:	d305      	bcc.n	2ca0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    2c94:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
    2c98:	d202      	bcs.n	2ca0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    2c9a:	f7ff feb3 	bl	2a04 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    2c9e:	e01b      	b.n	2cd8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc8>
    2ca0:	6830      	ldr	r0, [r6, #0]
    2ca2:	1a18      	subs	r0, r3, r0
    2ca4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2ca8:	2802      	cmp	r0, #2
    2caa:	d313      	bcc.n	2cd4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc4>
    2cac:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    2cb0:	d210      	bcs.n	2cd4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc4>
    2cb2:	4b13      	ldr	r3, [pc, #76]	; (2d00 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    2cb4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    2cb8:	6018      	str	r0, [r3, #0]
    2cba:	60a2      	str	r2, [r4, #8]
    2cbc:	7021      	strb	r1, [r4, #0]
    2cbe:	606a      	str	r2, [r5, #4]
    2cc0:	60ea      	str	r2, [r5, #12]
    2cc2:	0040      	lsls	r0, r0, #1
    2cc4:	1f19      	subs	r1, r3, #4
    2cc6:	6008      	str	r0, [r1, #0]
    2cc8:	2004      	movs	r0, #4
    2cca:	f88c 0001 	strb.w	r0, [ip, #1]
    2cce:	f88c 2000 	strb.w	r2, [ip]
    2cd2:	e001      	b.n	2cd8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc8>
    2cd4:	60a2      	str	r2, [r4, #8]
    2cd6:	7021      	strb	r1, [r4, #0]
    2cd8:	68a0      	ldr	r0, [r4, #8]
    2cda:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    2cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2ce2:	0000      	.short	0x0000
    2ce4:	4000b000 	.word	0x4000b000
    2ce8:	20000023 	.word	0x20000023
    2cec:	4000b544 	.word	0x4000b544
    2cf0:	4000b540 	.word	0x4000b540
    2cf4:	4000b504 	.word	0x4000b504
    2cf8:	20000020 	.word	0x20000020
    2cfc:	40008000 	.word	0x40008000
    2d00:	4001f508 	.word	0x4001f508

00002d04 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    2d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2d08:	f8df c174 	ldr.w	ip, [pc, #372]	; 2e80 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x17c>
    2d0c:	2701      	movs	r7, #1
    2d0e:	f04f 0800 	mov.w	r8, #0
    2d12:	f89c 5000 	ldrb.w	r5, [ip]
    2d16:	f89c c001 	ldrb.w	ip, [ip, #1]
    2d1a:	2807      	cmp	r0, #7
    2d1c:	d27e      	bcs.n	2e1c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x118>
    2d1e:	e8df f000 	tbb	[pc, r0]
    2d22:	0404      	.short	0x0404
    2d24:	6a6a0404 	.word	0x6a6a0404
    2d28:	006a      	.short	0x006a
    2d2a:	4c56      	ldr	r4, [pc, #344]	; (2e84 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x180>)
    2d2c:	68e6      	ldr	r6, [r4, #12]
    2d2e:	f1b6 7f80 	cmp.w	r6, #16777216	; 0x1000000
    2d32:	bf04      	itt	eq
    2d34:	7864      	ldrbeq	r4, [r4, #1]
    2d36:	2c00      	cmpeq	r4, #0
    2d38:	d002      	beq.n	2d40 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x3c>
    2d3a:	2d02      	cmp	r5, #2
    2d3c:	d005      	beq.n	2d4a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    2d3e:	e03c      	b.n	2dba <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb6>
    2d40:	f44f 7113 	mov.w	r1, #588	; 0x24c
    2d44:	206c      	movs	r0, #108	; 0x6c
    2d46:	f000 fd47 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2d4a:	ea4f 048c 	mov.w	r4, ip, lsl #2
    2d4e:	f104 4680 	add.w	r6, r4, #1073741824	; 0x40000000
    2d52:	f1ac 0404 	sub.w	r4, ip, #4
    2d56:	0624      	lsls	r4, r4, #24
    2d58:	0da4      	lsrs	r4, r4, #22
    2d5a:	f104 4980 	add.w	r9, r4, #1073741824	; 0x40000000
    2d5e:	f506 4600 	add.w	r6, r6, #32768	; 0x8000
    2d62:	f509 4930 	add.w	r9, r9, #45056	; 0xb000
    2d66:	2400      	movs	r4, #0
    2d68:	2d01      	cmp	r5, #1
    2d6a:	d002      	beq.n	2d72 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x6e>
    2d6c:	2d02      	cmp	r5, #2
    2d6e:	d011      	beq.n	2d94 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x90>
    2d70:	e020      	b.n	2db4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2d72:	f1bc 0f04 	cmp.w	ip, #4
    2d76:	d205      	bcs.n	2d84 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x80>
    2d78:	f8d6 a140 	ldr.w	sl, [r6, #320]	; 0x140
    2d7c:	f1ba 0f00 	cmp.w	sl, #0
    2d80:	d118      	bne.n	2db4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2d82:	e004      	b.n	2d8e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8a>
    2d84:	f8d9 a140 	ldr.w	sl, [r9, #320]	; 0x140
    2d88:	f1ba 0f00 	cmp.w	sl, #0
    2d8c:	d112      	bne.n	2db4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2d8e:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
    2d92:	e00f      	b.n	2db4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2d94:	f1bc 0f04 	cmp.w	ip, #4
    2d98:	d205      	bcs.n	2da6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xa2>
    2d9a:	f8d6 a140 	ldr.w	sl, [r6, #320]	; 0x140
    2d9e:	f1ba 0f00 	cmp.w	sl, #0
    2da2:	d107      	bne.n	2db4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2da4:	e004      	b.n	2db0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xac>
    2da6:	f8d9 a140 	ldr.w	sl, [r9, #320]	; 0x140
    2daa:	f1ba 0f00 	cmp.w	sl, #0
    2dae:	d101      	bne.n	2db4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2db0:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    2db4:	f014 4f80 	tst.w	r4, #1073741824	; 0x40000000
    2db8:	d1d5      	bne.n	2d66 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x62>
    2dba:	4c33      	ldr	r4, [pc, #204]	; (2e88 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x184>)
    2dbc:	f100 0c10 	add.w	ip, r0, #16
    2dc0:	fa07 fc0c 	lsl.w	ip, r7, ip
    2dc4:	f8c4 c308 	str.w	ip, [r4, #776]	; 0x308
    2dc8:	0080      	lsls	r0, r0, #2
    2dca:	4420      	add	r0, r4
    2dcc:	b152      	cbz	r2, 2de4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    2dce:	6407      	str	r7, [r0, #64]	; 0x40
    2dd0:	f8d0 6540 	ldr.w	r6, [r0, #1344]	; 0x540
    2dd4:	1b8d      	subs	r5, r1, r6
    2dd6:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    2dda:	42aa      	cmp	r2, r5
    2ddc:	bf98      	it	ls
    2dde:	f5b5 0f80 	cmpls.w	r5, #4194304	; 0x400000
    2de2:	d243      	bcs.n	2e6c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>
    2de4:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    2de8:	2b01      	cmp	r3, #1
    2dea:	bf08      	it	eq
    2dec:	f8c4 c304 	streq.w	ip, [r4, #772]	; 0x304
    2df0:	2001      	movs	r0, #1
    2df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2df6:	b135      	cbz	r5, 2e06 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    2df8:	4584      	cmp	ip, r0
    2dfa:	d104      	bne.n	2e06 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    2dfc:	f240 216f 	movw	r1, #623	; 0x26f
    2e00:	206c      	movs	r0, #108	; 0x6c
    2e02:	f000 fce9 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e06:	1f00      	subs	r0, r0, #4
    2e08:	b2c0      	uxtb	r0, r0
    2e0a:	2b01      	cmp	r3, #1
    2e0c:	bf0c      	ite	eq
    2e0e:	2401      	moveq	r4, #1
    2e10:	2400      	movne	r4, #0
    2e12:	2803      	cmp	r0, #3
    2e14:	d306      	bcc.n	2e24 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x120>
    2e16:	f240 1149 	movw	r1, #329	; 0x149
    2e1a:	e000      	b.n	2e1e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x11a>
    2e1c:	e02b      	b.n	2e76 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x172>
    2e1e:	206c      	movs	r0, #108	; 0x6c
    2e20:	f000 fcda 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e24:	f8df c064 	ldr.w	ip, [pc, #100]	; 2e8c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x188>
    2e28:	f100 0310 	add.w	r3, r0, #16
    2e2c:	fa07 f303 	lsl.w	r3, r7, r3
    2e30:	f8cc 3308 	str.w	r3, [ip, #776]	; 0x308
    2e34:	f8cc 3348 	str.w	r3, [ip, #840]	; 0x348
    2e38:	0080      	lsls	r0, r0, #2
    2e3a:	4460      	add	r0, ip
    2e3c:	f8c0 8140 	str.w	r8, [r0, #320]	; 0x140
    2e40:	b14a      	cbz	r2, 2e56 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x152>
    2e42:	4d13      	ldr	r5, [pc, #76]	; (2e90 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x18c>)
    2e44:	682e      	ldr	r6, [r5, #0]
    2e46:	1b8d      	subs	r5, r1, r6
    2e48:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    2e4c:	42aa      	cmp	r2, r5
    2e4e:	bf98      	it	ls
    2e50:	f5b5 0f80 	cmpls.w	r5, #4194304	; 0x400000
    2e54:	d20a      	bcs.n	2e6c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>
    2e56:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    2e5a:	2c00      	cmp	r4, #0
    2e5c:	bf18      	it	ne
    2e5e:	f8cc 3304 	strne.w	r3, [ip, #772]	; 0x304
    2e62:	f8cc 3344 	str.w	r3, [ip, #836]	; 0x344
    2e66:	2001      	movs	r0, #1
    2e68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2e6c:	f8c0 8540 	str.w	r8, [r0, #1344]	; 0x540
    2e70:	2000      	movs	r0, #0
    2e72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2e76:	f44f 711d 	mov.w	r1, #628	; 0x274
    2e7a:	206c      	movs	r0, #108	; 0x6c
    2e7c:	f000 fcac 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e80:	20000023 	.word	0x20000023
    2e84:	20000020 	.word	0x20000020
    2e88:	40008000 	.word	0x40008000
    2e8c:	4000b000 	.word	0x4000b000
    2e90:	4000b504 	.word	0x4000b504

00002e94 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    2e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e96:	2701      	movs	r7, #1
    2e98:	2400      	movs	r4, #0
    2e9a:	2807      	cmp	r0, #7
    2e9c:	d24c      	bcs.n	2f38 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa4>
    2e9e:	e8df f000 	tbb	[pc, r0]
    2ea2:	0404      	.short	0x0404
    2ea4:	16160404 	.word	0x16160404
    2ea8:	0016      	.short	0x0016
    2eaa:	4a26      	ldr	r2, [pc, #152]	; (2f44 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb0>)
    2eac:	f100 0110 	add.w	r1, r0, #16
    2eb0:	fa07 f101 	lsl.w	r1, r7, r1
    2eb4:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    2eb8:	0081      	lsls	r1, r0, #2
    2eba:	4411      	add	r1, r2
    2ebc:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    2ec0:	f8c1 4140 	str.w	r4, [r1, #320]	; 0x140
    2ec4:	4920      	ldr	r1, [pc, #128]	; (2f48 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>)
    2ec6:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    2eca:	9000      	str	r0, [sp, #0]
    2ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2ece:	4d1f      	ldr	r5, [pc, #124]	; (2f4c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb8>)
    2ed0:	1f01      	subs	r1, r0, #4
    2ed2:	b2ce      	uxtb	r6, r1
    2ed4:	7829      	ldrb	r1, [r5, #0]
    2ed6:	b179      	cbz	r1, 2ef8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x64>
    2ed8:	786a      	ldrb	r2, [r5, #1]
    2eda:	4282      	cmp	r2, r0
    2edc:	d10c      	bne.n	2ef8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x64>
    2ede:	4a1c      	ldr	r2, [pc, #112]	; (2f50 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xbc>)
    2ee0:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    2ee4:	6010      	str	r0, [r2, #0]
    2ee6:	2901      	cmp	r1, #1
    2ee8:	bf08      	it	eq
    2eea:	f7ff fd57 	bleq	299c <MPSL_IRQ_TIMER0_Handler+0xf8>
    2eee:	702c      	strb	r4, [r5, #0]
    2ef0:	4918      	ldr	r1, [pc, #96]	; (2f54 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    2ef2:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    2ef6:	60c8      	str	r0, [r1, #12]
    2ef8:	f106 0010 	add.w	r0, r6, #16
    2efc:	fa07 f100 	lsl.w	r1, r7, r0
    2f00:	4815      	ldr	r0, [pc, #84]	; (2f58 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    2f02:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    2f06:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    2f0a:	00b0      	lsls	r0, r6, #2
    2f0c:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    2f10:	f500 4030 	add.w	r0, r0, #45056	; 0xb000
    2f14:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    2f18:	4a10      	ldr	r2, [pc, #64]	; (2f5c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    2f1a:	6812      	ldr	r2, [r2, #0]
    2f1c:	1a89      	subs	r1, r1, r2
    2f1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2f22:	2902      	cmp	r1, #2
    2f24:	bf24      	itt	cs
    2f26:	f8c0 4540 	strcs.w	r4, [r0, #1344]	; 0x540
    2f2a:	f8c0 4140 	strcs.w	r4, [r0, #320]	; 0x140
    2f2e:	480c      	ldr	r0, [pc, #48]	; (2f60 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    2f30:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    2f34:	9000      	str	r0, [sp, #0]
    2f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2f38:	f240 21ed 	movw	r1, #749	; 0x2ed
    2f3c:	206c      	movs	r0, #108	; 0x6c
    2f3e:	f000 fc4b 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2f42:	0000      	.short	0x0000
    2f44:	40008000 	.word	0x40008000
    2f48:	40008140 	.word	0x40008140
    2f4c:	20000023 	.word	0x20000023
    2f50:	4001f508 	.word	0x4001f508
    2f54:	20000020 	.word	0x20000020
    2f58:	4000b000 	.word	0x4000b000
    2f5c:	4000b504 	.word	0x4000b504
    2f60:	4000b140 	.word	0x4000b140

00002f64 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    2f64:	491e      	ldr	r1, [pc, #120]	; (2fe0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x7c>)
    2f66:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    2f6a:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    2f6e:	481d      	ldr	r0, [pc, #116]	; (2fe4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x80>)
    2f70:	4a1d      	ldr	r2, [pc, #116]	; (2fe8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x84>)
    2f72:	f890 c000 	ldrb.w	ip, [r0]
    2f76:	2000      	movs	r0, #0
    2f78:	f1bc 0f00 	cmp.w	ip, #0
    2f7c:	d00a      	beq.n	2f94 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x30>
    2f7e:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    2f82:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2f86:	6010      	str	r0, [r2, #0]
    2f88:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2f8c:	f8d1 1148 	ldr.w	r1, [r1, #328]	; 0x148
    2f90:	b981      	cbnz	r1, 2fb4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x50>
    2f92:	e009      	b.n	2fa8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x44>
    2f94:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2f98:	4b14      	ldr	r3, [pc, #80]	; (2fec <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x88>)
    2f9a:	6018      	str	r0, [r3, #0]
    2f9c:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    2fa0:	6010      	str	r0, [r2, #0]
    2fa2:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2fa6:	e7f1      	b.n	2f8c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x28>
    2fa8:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    2fac:	f44f 6100 	mov.w	r1, #2048	; 0x800
    2fb0:	f8c2 1280 	str.w	r1, [r2, #640]	; 0x280
    2fb4:	490e      	ldr	r1, [pc, #56]	; (2ff0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x8c>)
    2fb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2fba:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    2fbe:	4a0d      	ldr	r2, [pc, #52]	; (2ff4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x90>)
    2fc0:	6010      	str	r0, [r2, #0]
    2fc2:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    2fc6:	1d12      	adds	r2, r2, #4
    2fc8:	6010      	str	r0, [r2, #0]
    2fca:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2fce:	1d12      	adds	r2, r2, #4
    2fd0:	6010      	str	r0, [r2, #0]
    2fd2:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    2fd6:	1d12      	adds	r2, r2, #4
    2fd8:	6010      	str	r0, [r2, #0]
    2fda:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    2fde:	4770      	bx	lr
    2fe0:	4000b000 	.word	0x4000b000
    2fe4:	20000023 	.word	0x20000023
    2fe8:	4000b544 	.word	0x4000b544
    2fec:	4000b540 	.word	0x4000b540
    2ff0:	40008000 	.word	0x40008000
    2ff4:	40008540 	.word	0x40008540

00002ff8 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>:
    2ff8:	4808      	ldr	r0, [pc, #32]	; (301c <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I+0x24>)
    2ffa:	f990 0002 	ldrsb.w	r0, [r0, #2]
    2ffe:	2800      	cmp	r0, #0
    3000:	bfb8      	it	lt
    3002:	4770      	bxlt	lr
    3004:	f000 011f 	and.w	r1, r0, #31
    3008:	2201      	movs	r2, #1
    300a:	fa02 f101 	lsl.w	r1, r2, r1
    300e:	0940      	lsrs	r0, r0, #5
    3010:	0080      	lsls	r0, r0, #2
    3012:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    3016:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    301a:	4770      	bx	lr
    301c:	20000020 	.word	0x20000020

00003020 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>:
    3020:	b510      	push	{r4, lr}
    3022:	2807      	cmp	r0, #7
    3024:	d20d      	bcs.n	3042 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x22>
    3026:	e8df f000 	tbb	[pc, r0]
    302a:	0404      	.short	0x0404
    302c:	06060404 	.word	0x06060404
    3030:	0006      	.short	0x0006
    3032:	4906      	ldr	r1, [pc, #24]	; (304c <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x2c>)
    3034:	e002      	b.n	303c <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x1c>
    3036:	1f00      	subs	r0, r0, #4
    3038:	4905      	ldr	r1, [pc, #20]	; (3050 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x30>)
    303a:	b2c0      	uxtb	r0, r0
    303c:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    3040:	bd10      	pop	{r4, pc}
    3042:	f44f 7126 	mov.w	r1, #664	; 0x298
    3046:	206c      	movs	r0, #108	; 0x6c
    3048:	f000 fbc6 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    304c:	40008140 	.word	0x40008140
    3050:	4000b140 	.word	0x4000b140

00003054 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
    3054:	b510      	push	{r4, lr}
    3056:	2807      	cmp	r0, #7
    3058:	d20d      	bcs.n	3076 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
    305a:	e8df f000 	tbb	[pc, r0]
    305e:	0404      	.short	0x0404
    3060:	06060404 	.word	0x06060404
    3064:	0006      	.short	0x0006
    3066:	4906      	ldr	r1, [pc, #24]	; (3080 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
    3068:	e002      	b.n	3070 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
    306a:	1f00      	subs	r0, r0, #4
    306c:	4905      	ldr	r1, [pc, #20]	; (3084 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
    306e:	b2c0      	uxtb	r0, r0
    3070:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    3074:	bd10      	pop	{r4, pc}
    3076:	f44f 7126 	mov.w	r1, #664	; 0x298
    307a:	206c      	movs	r0, #108	; 0x6c
    307c:	f000 fbac 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3080:	40008140 	.word	0x40008140
    3084:	4000b140 	.word	0x4000b140

00003088 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    3088:	b570      	push	{r4, r5, r6, lr}
    308a:	4819      	ldr	r0, [pc, #100]	; (30f0 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x68>)
    308c:	2400      	movs	r4, #0
    308e:	2104      	movs	r1, #4
    3090:	7004      	strb	r4, [r0, #0]
    3092:	1ec0      	subs	r0, r0, #3
    3094:	7001      	strb	r1, [r0, #0]
    3096:	0589      	lsls	r1, r1, #22
    3098:	60c1      	str	r1, [r0, #12]
    309a:	f7ff fc7f 	bl	299c <MPSL_IRQ_TIMER0_Handler+0xf8>
    309e:	2501      	movs	r5, #1
    30a0:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    30a4:	02eb      	lsls	r3, r5, #11
    30a6:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    30aa:	f3bf 8f4f 	dsb	sy
    30ae:	f3bf 8f6f 	isb	sy
    30b2:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    30b6:	4a0f      	ldr	r2, [pc, #60]	; (30f4 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x6c>)
    30b8:	6055      	str	r5, [r2, #4]
    30ba:	6095      	str	r5, [r2, #8]
    30bc:	480e      	ldr	r0, [pc, #56]	; (30f8 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x70>)
    30be:	6801      	ldr	r1, [r0, #0]
    30c0:	2900      	cmp	r1, #0
    30c2:	d1fc      	bne.n	30be <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x36>
    30c4:	1e48      	subs	r0, r1, #1
    30c6:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    30ca:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    30ce:	480b      	ldr	r0, [pc, #44]	; (30fc <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x74>)
    30d0:	6004      	str	r4, [r0, #0]
    30d2:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    30d6:	1d00      	adds	r0, r0, #4
    30d8:	6004      	str	r4, [r0, #0]
    30da:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    30de:	1d00      	adds	r0, r0, #4
    30e0:	6004      	str	r4, [r0, #0]
    30e2:	f8c2 4148 	str.w	r4, [r2, #328]	; 0x148
    30e6:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    30ea:	6015      	str	r5, [r2, #0]
    30ec:	bd70      	pop	{r4, r5, r6, pc}
    30ee:	0000      	.short	0x0000
    30f0:	20000023 	.word	0x20000023
    30f4:	4000b000 	.word	0x4000b000
    30f8:	4000b504 	.word	0x4000b504
    30fc:	4000b540 	.word	0x4000b540

00003100 <MPSL_IRQ_CLOCK_Handler>:
    3100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3104:	4c16      	ldr	r4, [pc, #88]	; (3160 <MPSL_IRQ_CLOCK_Handler+0x60>)
    3106:	7a60      	ldrb	r0, [r4, #9]
    3108:	2800      	cmp	r0, #0
    310a:	d027      	beq.n	315c <MPSL_IRQ_CLOCK_Handler+0x5c>
    310c:	f44f 7180 	mov.w	r1, #256	; 0x100
    3110:	058d      	lsls	r5, r1, #22
    3112:	4628      	mov	r0, r5
    3114:	f008 fd0f 	bl	bb36 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3118:	4680      	mov	r8, r0
    311a:	f44f 7182 	mov.w	r1, #260	; 0x104
    311e:	4628      	mov	r0, r5
    3120:	f008 fd09 	bl	bb36 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3124:	2600      	movs	r6, #0
    3126:	4607      	mov	r7, r0
    3128:	f1b8 0f00 	cmp.w	r8, #0
    312c:	d009      	beq.n	3142 <MPSL_IRQ_CLOCK_Handler+0x42>
    312e:	2001      	movs	r0, #1
    3130:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3134:	7920      	ldrb	r0, [r4, #4]
    3136:	b120      	cbz	r0, 3142 <MPSL_IRQ_CLOCK_Handler+0x42>
    3138:	7126      	strb	r6, [r4, #4]
    313a:	69e0      	ldr	r0, [r4, #28]
    313c:	b108      	cbz	r0, 3142 <MPSL_IRQ_CLOCK_Handler+0x42>
    313e:	4780      	blx	r0
    3140:	61e6      	str	r6, [r4, #28]
    3142:	b137      	cbz	r7, 3152 <MPSL_IRQ_CLOCK_Handler+0x52>
    3144:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    3148:	2002      	movs	r0, #2
    314a:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    314e:	f000 fa8b 	bl	3668 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    3152:	4640      	mov	r0, r8
    3154:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3158:	f000 b85a 	b.w	3210 <MPSL_IRQ_CLOCK_Handler+0x110>
    315c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3160:	20000030 	.word	0x20000030
    3164:	b510      	push	{r4, lr}
    3166:	f008 fd90 	bl	bc8a <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    316a:	b930      	cbnz	r0, 317a <MPSL_IRQ_CLOCK_Handler+0x7a>
    316c:	f008 fdae 	bl	bccc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3170:	b918      	cbnz	r0, 317a <MPSL_IRQ_CLOCK_Handler+0x7a>
    3172:	f008 fde1 	bl	bd38 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    3176:	2800      	cmp	r0, #0
    3178:	d002      	beq.n	3180 <MPSL_IRQ_CLOCK_Handler+0x80>
    317a:	4902      	ldr	r1, [pc, #8]	; (3184 <MPSL_IRQ_CLOCK_Handler+0x84>)
    317c:	2002      	movs	r0, #2
    317e:	6008      	str	r0, [r1, #0]
    3180:	bd10      	pop	{r4, pc}
    3182:	0000      	.short	0x0000
    3184:	40000c34 	.word	0x40000c34
    3188:	b570      	push	{r4, r5, r6, lr}
    318a:	f000 f987 	bl	349c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    318e:	f000 fabf 	bl	3710 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3192:	4c09      	ldr	r4, [pc, #36]	; (31b8 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    3194:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    3198:	b130      	cbz	r0, 31a8 <MPSL_IRQ_CLOCK_Handler+0xa8>
    319a:	f7ff ffe3 	bl	3164 <MPSL_IRQ_CLOCK_Handler+0x64>
    319e:	2001      	movs	r0, #1
    31a0:	6128      	str	r0, [r5, #16]
    31a2:	2004      	movs	r0, #4
    31a4:	72a0      	strb	r0, [r4, #10]
    31a6:	e004      	b.n	31b2 <MPSL_IRQ_CLOCK_Handler+0xb2>
    31a8:	2003      	movs	r0, #3
    31aa:	72a0      	strb	r0, [r4, #10]
    31ac:	2001      	movs	r0, #1
    31ae:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    31b2:	2000      	movs	r0, #0
    31b4:	71e0      	strb	r0, [r4, #7]
    31b6:	bd70      	pop	{r4, r5, r6, pc}
    31b8:	20000030 	.word	0x20000030
    31bc:	b570      	push	{r4, r5, r6, lr}
    31be:	4c13      	ldr	r4, [pc, #76]	; (320c <MPSL_IRQ_CLOCK_Handler+0x10c>)
    31c0:	79a0      	ldrb	r0, [r4, #6]
    31c2:	b1f0      	cbz	r0, 3202 <MPSL_IRQ_CLOCK_Handler+0x102>
    31c4:	2801      	cmp	r0, #1
    31c6:	d003      	beq.n	31d0 <MPSL_IRQ_CLOCK_Handler+0xd0>
    31c8:	79e1      	ldrb	r1, [r4, #7]
    31ca:	1e40      	subs	r0, r0, #1
    31cc:	4281      	cmp	r1, r0
    31ce:	da18      	bge.n	3202 <MPSL_IRQ_CLOCK_Handler+0x102>
    31d0:	f000 fa9e 	bl	3710 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    31d4:	4605      	mov	r5, r0
    31d6:	f000 fb6f 	bl	38b8 <mpsl_temperature_get>
    31da:	79a1      	ldrb	r1, [r4, #6]
    31dc:	2901      	cmp	r1, #1
    31de:	d902      	bls.n	31e6 <MPSL_IRQ_CLOCK_Handler+0xe6>
    31e0:	79e1      	ldrb	r1, [r4, #7]
    31e2:	1c49      	adds	r1, r1, #1
    31e4:	71e1      	strb	r1, [r4, #7]
    31e6:	b10d      	cbz	r5, 31ec <MPSL_IRQ_CLOCK_Handler+0xec>
    31e8:	6961      	ldr	r1, [r4, #20]
    31ea:	e000      	b.n	31ee <MPSL_IRQ_CLOCK_Handler+0xee>
    31ec:	6921      	ldr	r1, [r4, #16]
    31ee:	1a41      	subs	r1, r0, r1
    31f0:	2902      	cmp	r1, #2
    31f2:	da02      	bge.n	31fa <MPSL_IRQ_CLOCK_Handler+0xfa>
    31f4:	f111 0f02 	cmn.w	r1, #2
    31f8:	dc07      	bgt.n	320a <MPSL_IRQ_CLOCK_Handler+0x10a>
    31fa:	b10d      	cbz	r5, 3200 <MPSL_IRQ_CLOCK_Handler+0x100>
    31fc:	6160      	str	r0, [r4, #20]
    31fe:	e000      	b.n	3202 <MPSL_IRQ_CLOCK_Handler+0x102>
    3200:	6120      	str	r0, [r4, #16]
    3202:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3206:	f7ff bfbf 	b.w	3188 <MPSL_IRQ_CLOCK_Handler+0x88>
    320a:	bd70      	pop	{r4, r5, r6, pc}
    320c:	20000030 	.word	0x20000030
    3210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3214:	4606      	mov	r6, r0
    3216:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    321a:	f44f 7186 	mov.w	r1, #268	; 0x10c
    321e:	4628      	mov	r0, r5
    3220:	f008 fc89 	bl	bb36 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3224:	4680      	mov	r8, r0
    3226:	f44f 7188 	mov.w	r1, #272	; 0x110
    322a:	4628      	mov	r0, r5
    322c:	f008 fc83 	bl	bb36 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3230:	4c27      	ldr	r4, [pc, #156]	; (32d0 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    3232:	4682      	mov	sl, r0
    3234:	7827      	ldrb	r7, [r4, #0]
    3236:	f104 0008 	add.w	r0, r4, #8
    323a:	f008 fcf0 	bl	bc1e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    323e:	b110      	cbz	r0, 3246 <MPSL_IRQ_CLOCK_Handler+0x146>
    3240:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    3244:	e016      	b.n	3274 <MPSL_IRQ_CLOCK_Handler+0x174>
    3246:	f04f 0901 	mov.w	r9, #1
    324a:	b146      	cbz	r6, 325e <MPSL_IRQ_CLOCK_Handler+0x15e>
    324c:	7aa0      	ldrb	r0, [r4, #10]
    324e:	2803      	cmp	r0, #3
    3250:	d105      	bne.n	325e <MPSL_IRQ_CLOCK_Handler+0x15e>
    3252:	2004      	movs	r0, #4
    3254:	72a0      	strb	r0, [r4, #10]
    3256:	f7ff ff85 	bl	3164 <MPSL_IRQ_CLOCK_Handler+0x64>
    325a:	f8c5 9010 	str.w	r9, [r5, #16]
    325e:	2600      	movs	r6, #0
    3260:	f1b8 0f00 	cmp.w	r8, #0
    3264:	d018      	beq.n	3298 <MPSL_IRQ_CLOCK_Handler+0x198>
    3266:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    326a:	7aa0      	ldrb	r0, [r4, #10]
    326c:	2804      	cmp	r0, #4
    326e:	d004      	beq.n	327a <MPSL_IRQ_CLOCK_Handler+0x17a>
    3270:	f44f 71de 	mov.w	r1, #444	; 0x1bc
    3274:	206d      	movs	r0, #109	; 0x6d
    3276:	f000 faaf 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    327a:	f008 fd06 	bl	bc8a <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    327e:	b928      	cbnz	r0, 328c <MPSL_IRQ_CLOCK_Handler+0x18c>
    3280:	f008 fd24 	bl	bccc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3284:	b910      	cbnz	r0, 328c <MPSL_IRQ_CLOCK_Handler+0x18c>
    3286:	f008 fd57 	bl	bd38 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    328a:	b108      	cbz	r0, 3290 <MPSL_IRQ_CLOCK_Handler+0x190>
    328c:	4811      	ldr	r0, [pc, #68]	; (32d4 <MPSL_IRQ_CLOCK_Handler+0x1d4>)
    328e:	6006      	str	r6, [r0, #0]
    3290:	2002      	movs	r0, #2
    3292:	72a0      	strb	r0, [r4, #10]
    3294:	f000 f8e6 	bl	3464 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3298:	f1ba 0f00 	cmp.w	sl, #0
    329c:	d008      	beq.n	32b0 <MPSL_IRQ_CLOCK_Handler+0x1b0>
    329e:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    32a2:	7aa0      	ldrb	r0, [r4, #10]
    32a4:	2802      	cmp	r0, #2
    32a6:	d101      	bne.n	32ac <MPSL_IRQ_CLOCK_Handler+0x1ac>
    32a8:	f7ff ff88 	bl	31bc <MPSL_IRQ_CLOCK_Handler+0xbc>
    32ac:	f8c5 9014 	str.w	r9, [r5, #20]
    32b0:	b13f      	cbz	r7, 32c2 <MPSL_IRQ_CLOCK_Handler+0x1c2>
    32b2:	7026      	strb	r6, [r4, #0]
    32b4:	7aa0      	ldrb	r0, [r4, #10]
    32b6:	2802      	cmp	r0, #2
    32b8:	d101      	bne.n	32be <MPSL_IRQ_CLOCK_Handler+0x1be>
    32ba:	f7ff ff65 	bl	3188 <MPSL_IRQ_CLOCK_Handler+0x88>
    32be:	f000 f8d1 	bl	3464 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    32c2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    32c6:	4802      	ldr	r0, [pc, #8]	; (32d0 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    32c8:	3008      	adds	r0, #8
    32ca:	f008 bcbf 	b.w	bc4c <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    32ce:	0000      	.short	0x0000
    32d0:	20000030 	.word	0x20000030
    32d4:	40000c34 	.word	0x40000c34
    32d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    32dc:	4c5c      	ldr	r4, [pc, #368]	; (3450 <MPSL_IRQ_CLOCK_Handler+0x350>)
    32de:	f04f 0800 	mov.w	r8, #0
    32e2:	4606      	mov	r6, r0
    32e4:	f8c4 8018 	str.w	r8, [r4, #24]
    32e8:	7843      	ldrb	r3, [r0, #1]
    32ea:	7882      	ldrb	r2, [r0, #2]
    32ec:	7800      	ldrb	r0, [r0, #0]
    32ee:	72e0      	strb	r0, [r4, #11]
    32f0:	7163      	strb	r3, [r4, #5]
    32f2:	2701      	movs	r7, #1
    32f4:	71a2      	strb	r2, [r4, #6]
    32f6:	07bd      	lsls	r5, r7, #30
    32f8:	f884 8007 	strb.w	r8, [r4, #7]
    32fc:	2805      	cmp	r0, #5
    32fe:	d224      	bcs.n	334a <MPSL_IRQ_CLOCK_Handler+0x24a>
    3300:	e8df f000 	tbb	[pc, r0]
    3304:	1f05030f 	.word	0x1f05030f
    3308:	0021      	.short	0x0021
    330a:	61a7      	str	r7, [r4, #24]
    330c:	e009      	b.n	3322 <MPSL_IRQ_CLOCK_Handler+0x222>
    330e:	f000 f8c5 	bl	349c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3312:	2101      	movs	r1, #1
    3314:	4628      	mov	r0, r5
    3316:	f008 fc13 	bl	bb40 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    331a:	2800      	cmp	r0, #0
    331c:	d0f9      	beq.n	3312 <MPSL_IRQ_CLOCK_Handler+0x212>
    331e:	2002      	movs	r0, #2
    3320:	61a0      	str	r0, [r4, #24]
    3322:	f008 fc39 	bl	bb98 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    3326:	b1b0      	cbz	r0, 3356 <MPSL_IRQ_CLOCK_Handler+0x256>
    3328:	f000 fa0c 	bl	3744 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    332c:	7e21      	ldrb	r1, [r4, #24]
    332e:	f001 0103 	and.w	r1, r1, #3
    3332:	4288      	cmp	r0, r1
    3334:	d10f      	bne.n	3356 <MPSL_IRQ_CLOCK_Handler+0x256>
    3336:	79b0      	ldrb	r0, [r6, #6]
    3338:	b150      	cbz	r0, 3350 <MPSL_IRQ_CLOCK_Handler+0x250>
    333a:	2002      	movs	r0, #2
    333c:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3340:	e06a      	b.n	3418 <MPSL_IRQ_CLOCK_Handler+0x318>
    3342:	4844      	ldr	r0, [pc, #272]	; (3454 <MPSL_IRQ_CLOCK_Handler+0x354>)
    3344:	e7ec      	b.n	3320 <MPSL_IRQ_CLOCK_Handler+0x220>
    3346:	4844      	ldr	r0, [pc, #272]	; (3458 <MPSL_IRQ_CLOCK_Handler+0x358>)
    3348:	e7ea      	b.n	3320 <MPSL_IRQ_CLOCK_Handler+0x220>
    334a:	f44f 714c 	mov.w	r1, #816	; 0x330
    334e:	e049      	b.n	33e4 <MPSL_IRQ_CLOCK_Handler+0x2e4>
    3350:	f000 f9cc 	bl	36ec <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    3354:	e060      	b.n	3418 <MPSL_IRQ_CLOCK_Handler+0x318>
    3356:	60ef      	str	r7, [r5, #12]
    3358:	f44f 7a82 	mov.w	sl, #260	; 0x104
    335c:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    3360:	69a0      	ldr	r0, [r4, #24]
    3362:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    3366:	f008 fc7c 	bl	bc62 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    336a:	b940      	cbnz	r0, 337e <MPSL_IRQ_CLOCK_Handler+0x27e>
    336c:	f008 fc83 	bl	bc76 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3370:	b928      	cbnz	r0, 337e <MPSL_IRQ_CLOCK_Handler+0x27e>
    3372:	f008 fc97 	bl	bca4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    3376:	b910      	cbnz	r0, 337e <MPSL_IRQ_CLOCK_Handler+0x27e>
    3378:	f008 fca8 	bl	bccc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    337c:	b138      	cbz	r0, 338e <MPSL_IRQ_CLOCK_Handler+0x28e>
    337e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    3382:	4836      	ldr	r0, [pc, #216]	; (345c <MPSL_IRQ_CLOCK_Handler+0x35c>)
    3384:	f8d1 1244 	ldr.w	r1, [r1, #580]	; 0x244
    3388:	f3c1 3142 	ubfx	r1, r1, #13, #3
    338c:	6001      	str	r1, [r0, #0]
    338e:	f008 fc68 	bl	bc62 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    3392:	b940      	cbnz	r0, 33a6 <MPSL_IRQ_CLOCK_Handler+0x2a6>
    3394:	f008 fc6f 	bl	bc76 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3398:	b928      	cbnz	r0, 33a6 <MPSL_IRQ_CLOCK_Handler+0x2a6>
    339a:	f008 fc83 	bl	bca4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    339e:	b910      	cbnz	r0, 33a6 <MPSL_IRQ_CLOCK_Handler+0x2a6>
    33a0:	f008 fc94 	bl	bccc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    33a4:	b110      	cbz	r0, 33ac <MPSL_IRQ_CLOCK_Handler+0x2ac>
    33a6:	482d      	ldr	r0, [pc, #180]	; (345c <MPSL_IRQ_CLOCK_Handler+0x35c>)
    33a8:	3010      	adds	r0, #16
    33aa:	6007      	str	r7, [r0, #0]
    33ac:	60af      	str	r7, [r5, #8]
    33ae:	2002      	movs	r0, #2
    33b0:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    33b4:	79b0      	ldrb	r0, [r6, #6]
    33b6:	bb78      	cbnz	r0, 3418 <MPSL_IRQ_CLOCK_Handler+0x318>
    33b8:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    33bc:	f010 0f02 	tst.w	r0, #2
    33c0:	d00e      	beq.n	33e0 <MPSL_IRQ_CLOCK_Handler+0x2e0>
    33c2:	f8df 909c 	ldr.w	r9, [pc, #156]	; 3460 <MPSL_IRQ_CLOCK_Handler+0x360>
    33c6:	f8d9 1000 	ldr.w	r1, [r9]
    33ca:	43c9      	mvns	r1, r1
    33cc:	f341 1700 	sbfx	r7, r1, #4, #1
    33d0:	f8d9 1000 	ldr.w	r1, [r9]
    33d4:	f041 0110 	orr.w	r1, r1, #16
    33d8:	f8c9 1000 	str.w	r1, [r9]
    33dc:	1c7f      	adds	r7, r7, #1
    33de:	e007      	b.n	33f0 <MPSL_IRQ_CLOCK_Handler+0x2f0>
    33e0:	f240 21f1 	movw	r1, #753	; 0x2f1
    33e4:	206d      	movs	r0, #109	; 0x6d
    33e6:	f000 f9f7 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    33ea:	bf00      	nop
    33ec:	f000 fb1a 	bl	3a24 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    33f0:	4651      	mov	r1, sl
    33f2:	4628      	mov	r0, r5
    33f4:	f008 fb9f 	bl	bb36 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    33f8:	2800      	cmp	r0, #0
    33fa:	d0f7      	beq.n	33ec <MPSL_IRQ_CLOCK_Handler+0x2ec>
    33fc:	f000 f976 	bl	36ec <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    3400:	b92f      	cbnz	r7, 340e <MPSL_IRQ_CLOCK_Handler+0x30e>
    3402:	f8d9 1000 	ldr.w	r1, [r9]
    3406:	f021 0110 	bic.w	r1, r1, #16
    340a:	f8c9 1000 	str.w	r1, [r9]
    340e:	2002      	movs	r0, #2
    3410:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3414:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    3418:	79a0      	ldrb	r0, [r4, #6]
    341a:	b170      	cbz	r0, 343a <MPSL_IRQ_CLOCK_Handler+0x33a>
    341c:	7830      	ldrb	r0, [r6, #0]
    341e:	b960      	cbnz	r0, 343a <MPSL_IRQ_CLOCK_Handler+0x33a>
    3420:	f000 f976 	bl	3710 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3424:	4606      	mov	r6, r0
    3426:	f000 fa47 	bl	38b8 <mpsl_temperature_get>
    342a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    342e:	b116      	cbz	r6, 3436 <MPSL_IRQ_CLOCK_Handler+0x336>
    3430:	e9c4 2004 	strd	r2, r0, [r4, #16]
    3434:	e001      	b.n	343a <MPSL_IRQ_CLOCK_Handler+0x33a>
    3436:	e9c4 0204 	strd	r0, r2, [r4, #16]
    343a:	2101      	movs	r1, #1
    343c:	4628      	mov	r0, r5
    343e:	f008 fb7f 	bl	bb40 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3442:	b108      	cbz	r0, 3448 <MPSL_IRQ_CLOCK_Handler+0x348>
    3444:	f000 f95e 	bl	3704 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    3448:	f884 800a 	strb.w	r8, [r4, #10]
    344c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3450:	20000030 	.word	0x20000030
    3454:	00020001 	.word	0x00020001
    3458:	00030001 	.word	0x00030001
    345c:	4000053c 	.word	0x4000053c
    3460:	e000ed10 	.word	0xe000ed10

00003464 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    3464:	b510      	push	{r4, lr}
    3466:	f3ef 8410 	mrs	r4, PRIMASK
    346a:	b672      	cpsid	i
    346c:	480a      	ldr	r0, [pc, #40]	; (3498 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    346e:	7841      	ldrb	r1, [r0, #1]
    3470:	b129      	cbz	r1, 347e <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    3472:	7841      	ldrb	r1, [r0, #1]
    3474:	1e49      	subs	r1, r1, #1
    3476:	7041      	strb	r1, [r0, #1]
    3478:	7841      	ldrb	r1, [r0, #1]
    347a:	b129      	cbz	r1, 3488 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    347c:	e008      	b.n	3490 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    347e:	f240 110d 	movw	r1, #269	; 0x10d
    3482:	206d      	movs	r0, #109	; 0x6d
    3484:	f000 f9a8 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3488:	7880      	ldrb	r0, [r0, #2]
    348a:	b908      	cbnz	r0, 3490 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    348c:	f000 f94e 	bl	372c <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    3490:	2c00      	cmp	r4, #0
    3492:	d100      	bne.n	3496 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    3494:	b662      	cpsie	i
    3496:	bd10      	pop	{r4, pc}
    3498:	20000030 	.word	0x20000030

0000349c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    349c:	b510      	push	{r4, lr}
    349e:	f3ef 8410 	mrs	r4, PRIMASK
    34a2:	b672      	cpsid	i
    34a4:	4806      	ldr	r0, [pc, #24]	; (34c0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    34a6:	7841      	ldrb	r1, [r0, #1]
    34a8:	1c49      	adds	r1, r1, #1
    34aa:	7041      	strb	r1, [r0, #1]
    34ac:	7840      	ldrb	r0, [r0, #1]
    34ae:	2801      	cmp	r0, #1
    34b0:	d101      	bne.n	34b6 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    34b2:	f008 fb5c 	bl	bb6e <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    34b6:	2c00      	cmp	r4, #0
    34b8:	d100      	bne.n	34bc <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    34ba:	b662      	cpsie	i
    34bc:	bd10      	pop	{r4, pc}
    34be:	0000      	.short	0x0000
    34c0:	20000030 	.word	0x20000030

000034c4 <mpsl_clock_hfclk_release>:
    34c4:	4805      	ldr	r0, [pc, #20]	; (34dc <mpsl_clock_hfclk_release+0x18>)
    34c6:	b510      	push	{r4, lr}
    34c8:	78c1      	ldrb	r1, [r0, #3]
    34ca:	b121      	cbz	r1, 34d6 <mpsl_clock_hfclk_release+0x12>
    34cc:	2100      	movs	r1, #0
    34ce:	7101      	strb	r1, [r0, #4]
    34d0:	70c1      	strb	r1, [r0, #3]
    34d2:	f7ff ffc7 	bl	3464 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    34d6:	2000      	movs	r0, #0
    34d8:	bd10      	pop	{r4, pc}
    34da:	0000      	.short	0x0000
    34dc:	20000030 	.word	0x20000030

000034e0 <mpsl_clock_hfclk_request>:
    34e0:	b570      	push	{r4, r5, r6, lr}
    34e2:	4c0c      	ldr	r4, [pc, #48]	; (3514 <mpsl_clock_hfclk_request+0x34>)
    34e4:	78e1      	ldrb	r1, [r4, #3]
    34e6:	b961      	cbnz	r1, 3502 <mpsl_clock_hfclk_request+0x22>
    34e8:	2501      	movs	r5, #1
    34ea:	70e5      	strb	r5, [r4, #3]
    34ec:	61e0      	str	r0, [r4, #28]
    34ee:	f7ff ffd5 	bl	349c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    34f2:	f000 f90d 	bl	3710 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    34f6:	b130      	cbz	r0, 3506 <mpsl_clock_hfclk_request+0x26>
    34f8:	69e0      	ldr	r0, [r4, #28]
    34fa:	b110      	cbz	r0, 3502 <mpsl_clock_hfclk_request+0x22>
    34fc:	4780      	blx	r0
    34fe:	2000      	movs	r0, #0
    3500:	61e0      	str	r0, [r4, #28]
    3502:	2000      	movs	r0, #0
    3504:	bd70      	pop	{r4, r5, r6, pc}
    3506:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    350a:	7125      	strb	r5, [r4, #4]
    350c:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    3510:	e7f7      	b.n	3502 <mpsl_clock_hfclk_request+0x22>
    3512:	0000      	.short	0x0000
    3514:	20000030 	.word	0x20000030

00003518 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>:
    3518:	f3ef 8010 	mrs	r0, PRIMASK
    351c:	b672      	cpsid	i
    351e:	4904      	ldr	r1, [pc, #16]	; (3530 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x18>)
    3520:	788a      	ldrb	r2, [r1, #2]
    3522:	1c52      	adds	r2, r2, #1
    3524:	708a      	strb	r2, [r1, #2]
    3526:	2800      	cmp	r0, #0
    3528:	d100      	bne.n	352c <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x14>
    352a:	b662      	cpsie	i
    352c:	4770      	bx	lr
    352e:	0000      	.short	0x0000
    3530:	20000030 	.word	0x20000030

00003534 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>:
    3534:	b510      	push	{r4, lr}
    3536:	f3ef 8410 	mrs	r4, PRIMASK
    353a:	b672      	cpsid	i
    353c:	480a      	ldr	r0, [pc, #40]	; (3568 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x34>)
    353e:	7881      	ldrb	r1, [r0, #2]
    3540:	b129      	cbz	r1, 354e <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x1a>
    3542:	7881      	ldrb	r1, [r0, #2]
    3544:	1e49      	subs	r1, r1, #1
    3546:	7081      	strb	r1, [r0, #2]
    3548:	7841      	ldrb	r1, [r0, #1]
    354a:	b129      	cbz	r1, 3558 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x24>
    354c:	e008      	b.n	3560 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    354e:	f240 1125 	movw	r1, #293	; 0x125
    3552:	206d      	movs	r0, #109	; 0x6d
    3554:	f000 f940 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3558:	7880      	ldrb	r0, [r0, #2]
    355a:	b908      	cbnz	r0, 3560 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    355c:	f000 f8e6 	bl	372c <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    3560:	2c00      	cmp	r4, #0
    3562:	d100      	bne.n	3566 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x32>
    3564:	b662      	cpsie	i
    3566:	bd10      	pop	{r4, pc}
    3568:	20000030 	.word	0x20000030

0000356c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    356c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3570:	0004      	movs	r4, r0
    3572:	f06f 0015 	mvn.w	r0, #21
    3576:	d03c      	beq.n	35f2 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3578:	7821      	ldrb	r1, [r4, #0]
    357a:	2904      	cmp	r1, #4
    357c:	d839      	bhi.n	35f2 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    357e:	2900      	cmp	r1, #0
    3580:	7861      	ldrb	r1, [r4, #1]
    3582:	d038      	beq.n	35f6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8a>
    3584:	2900      	cmp	r1, #0
    3586:	d134      	bne.n	35f2 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3588:	78a1      	ldrb	r1, [r4, #2]
    358a:	2900      	cmp	r1, #0
    358c:	d131      	bne.n	35f2 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    358e:	2000      	movs	r0, #0
    3590:	f008 fa9c 	bl	bacc <MPSL_IRQ_RADIO_Handler+0x1e>
    3594:	2000      	movs	r0, #0
    3596:	f008 fa8c 	bl	bab2 <MPSL_IRQ_RADIO_Handler+0x4>
    359a:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    359e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    35a2:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    35a6:	2600      	movs	r6, #0
    35a8:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    35ac:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    35b0:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    35b4:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    35b8:	4f14      	ldr	r7, [pc, #80]	; (360c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    35ba:	707e      	strb	r6, [r7, #1]
    35bc:	88a0      	ldrh	r0, [r4, #4]
    35be:	81b8      	strh	r0, [r7, #12]
    35c0:	f008 facc 	bl	bb5c <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    35c4:	2501      	movs	r5, #1
    35c6:	b108      	cbz	r0, 35cc <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    35c8:	70fd      	strb	r5, [r7, #3]
    35ca:	707d      	strb	r5, [r7, #1]
    35cc:	2101      	movs	r1, #1
    35ce:	4640      	mov	r0, r8
    35d0:	f008 fab6 	bl	bb40 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    35d4:	b108      	cbz	r0, 35da <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    35d6:	f000 f895 	bl	3704 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    35da:	4620      	mov	r0, r4
    35dc:	f7ff fe7c 	bl	32d8 <MPSL_IRQ_CLOCK_Handler+0x1d8>
    35e0:	727d      	strb	r5, [r7, #9]
    35e2:	2000      	movs	r0, #0
    35e4:	f008 fa65 	bl	bab2 <MPSL_IRQ_RADIO_Handler+0x4>
    35e8:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    35ec:	4630      	mov	r0, r6
    35ee:	f8c1 5100 	str.w	r5, [r1, #256]	; 0x100
    35f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    35f6:	2900      	cmp	r1, #0
    35f8:	d0fb      	beq.n	35f2 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    35fa:	2920      	cmp	r1, #32
    35fc:	d8f9      	bhi.n	35f2 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    35fe:	78a1      	ldrb	r1, [r4, #2]
    3600:	2921      	cmp	r1, #33	; 0x21
    3602:	d8f6      	bhi.n	35f2 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3604:	2901      	cmp	r1, #1
    3606:	d1c2      	bne.n	358e <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    3608:	e7f3      	b.n	35f2 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    360a:	0000      	.short	0x0000
    360c:	20000030 	.word	0x20000030

00003610 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    3610:	4801      	ldr	r0, [pc, #4]	; (3618 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    3612:	8980      	ldrh	r0, [r0, #12]
    3614:	4770      	bx	lr
    3616:	0000      	.short	0x0000
    3618:	20000030 	.word	0x20000030

0000361c <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>:
    361c:	b510      	push	{r4, lr}
    361e:	480d      	ldr	r0, [pc, #52]	; (3654 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    3620:	f008 fafd 	bl	bc1e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    3624:	490b      	ldr	r1, [pc, #44]	; (3654 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    3626:	3908      	subs	r1, #8
    3628:	b148      	cbz	r0, 363e <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x22>
    362a:	2001      	movs	r0, #1
    362c:	7008      	strb	r0, [r1, #0]
    362e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    3632:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    3636:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    363a:	f7ff bf2f 	b.w	349c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    363e:	7a88      	ldrb	r0, [r1, #10]
    3640:	2802      	cmp	r0, #2
    3642:	d101      	bne.n	3648 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x2c>
    3644:	f7ff fda0 	bl	3188 <MPSL_IRQ_CLOCK_Handler+0x88>
    3648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    364c:	4801      	ldr	r0, [pc, #4]	; (3654 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    364e:	f008 bafd 	b.w	bc4c <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    3652:	0000      	.short	0x0000
    3654:	20000038 	.word	0x20000038

00003658 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    3658:	4802      	ldr	r0, [pc, #8]	; (3664 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    365a:	7a80      	ldrb	r0, [r0, #10]
    365c:	2800      	cmp	r0, #0
    365e:	d000      	beq.n	3662 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    3660:	2001      	movs	r0, #1
    3662:	4770      	bx	lr
    3664:	20000030 	.word	0x20000030

00003668 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    3668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    366a:	4d1f      	ldr	r5, [pc, #124]	; (36e8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    366c:	7ae8      	ldrb	r0, [r5, #11]
    366e:	2800      	cmp	r0, #0
    3670:	d10f      	bne.n	3692 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3672:	7e28      	ldrb	r0, [r5, #24]
    3674:	f000 0003 	and.w	r0, r0, #3
    3678:	f008 fa7e 	bl	bb78 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    367c:	2800      	cmp	r0, #0
    367e:	d008      	beq.n	3692 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3680:	f3ef 8110 	mrs	r1, PRIMASK
    3684:	b672      	cpsid	i
    3686:	f7ff ffe7 	bl	3658 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    368a:	b118      	cbz	r0, 3694 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    368c:	2900      	cmp	r1, #0
    368e:	d100      	bne.n	3692 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3690:	b662      	cpsie	i
    3692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3694:	2601      	movs	r6, #1
    3696:	72ae      	strb	r6, [r5, #10]
    3698:	b901      	cbnz	r1, 369c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    369a:	b662      	cpsie	i
    369c:	2018      	movs	r0, #24
    369e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    36a2:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    36a6:	61a6      	str	r6, [r4, #24]
    36a8:	f44f 7020 	mov.w	r0, #640	; 0x280
    36ac:	f8ad 0000 	strh.w	r0, [sp]
    36b0:	f8bd 0000 	ldrh.w	r0, [sp]
    36b4:	1e41      	subs	r1, r0, #1
    36b6:	f8ad 1000 	strh.w	r1, [sp]
    36ba:	d2f9      	bcs.n	36b0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    36bc:	2700      	movs	r7, #0
    36be:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    36c2:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    36c6:	4808      	ldr	r0, [pc, #32]	; (36e8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    36c8:	3008      	adds	r0, #8
    36ca:	f008 fabb 	bl	bc44 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    36ce:	702f      	strb	r7, [r5, #0]
    36d0:	f7ff fd5a 	bl	3188 <MPSL_IRQ_CLOCK_Handler+0x88>
    36d4:	6166      	str	r6, [r4, #20]
    36d6:	7968      	ldrb	r0, [r5, #5]
    36d8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    36dc:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    36e0:	2018      	movs	r0, #24
    36e2:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    36e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    36e8:	20000030 	.word	0x20000030

000036ec <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    36ec:	b510      	push	{r4, lr}
    36ee:	4c04      	ldr	r4, [pc, #16]	; (3700 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    36f0:	7e20      	ldrb	r0, [r4, #24]
    36f2:	f000 0003 	and.w	r0, r0, #3
    36f6:	f008 fa3f 	bl	bb78 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    36fa:	2800      	cmp	r0, #0
    36fc:	d0f8      	beq.n	36f0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    36fe:	bd10      	pop	{r4, pc}
    3700:	20000030 	.word	0x20000030

00003704 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    3704:	4901      	ldr	r1, [pc, #4]	; (370c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    3706:	2001      	movs	r0, #1
    3708:	7008      	strb	r0, [r1, #0]
    370a:	4770      	bx	lr
    370c:	2000029c 	.word	0x2000029c

00003710 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    3710:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3714:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    3718:	b918      	cbnz	r0, 3722 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    371a:	4803      	ldr	r0, [pc, #12]	; (3728 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    371c:	7800      	ldrb	r0, [r0, #0]
    371e:	2800      	cmp	r0, #0
    3720:	d000      	beq.n	3724 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    3722:	2001      	movs	r0, #1
    3724:	4770      	bx	lr
    3726:	0000      	.short	0x0000
    3728:	2000029c 	.word	0x2000029c

0000372c <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    372c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3730:	2101      	movs	r1, #1
    3732:	6041      	str	r1, [r0, #4]
    3734:	2100      	movs	r1, #0
    3736:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    373a:	4801      	ldr	r0, [pc, #4]	; (3740 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    373c:	7001      	strb	r1, [r0, #0]
    373e:	4770      	bx	lr
    3740:	2000029c 	.word	0x2000029c

00003744 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    3744:	4802      	ldr	r0, [pc, #8]	; (3750 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    3746:	6800      	ldr	r0, [r0, #0]
    3748:	f000 0003 	and.w	r0, r0, #3
    374c:	4770      	bx	lr
    374e:	0000      	.short	0x0000
    3750:	4000041c 	.word	0x4000041c
    3754:	b510      	push	{r4, lr}
    3756:	b131      	cbz	r1, 3766 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    3758:	2901      	cmp	r1, #1
    375a:	d007      	beq.n	376c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    375c:	f44f 7142 	mov.w	r1, #776	; 0x308
    3760:	a005      	add	r0, pc, #20	; (adr r0, 3778 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    3762:	f000 f80f 	bl	3784 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    3766:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    376a:	e001      	b.n	3770 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    376c:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    3770:	f000 0001 	and.w	r0, r0, #1
    3774:	bd10      	pop	{r4, pc}
    3776:	0000      	.short	0x0000
    3778:	5f66726e 	.word	0x5f66726e
    377c:	636f6c63 	.word	0x636f6c63
    3780:	00682e6b 	.word	0x00682e6b

00003784 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    3784:	4a02      	ldr	r2, [pc, #8]	; (3790 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xc>)
    3786:	6852      	ldr	r2, [r2, #4]
    3788:	b102      	cbz	r2, 378c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x8>
    378a:	4710      	bx	r2
    378c:	e7fe      	b.n	378c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x8>
    378e:	0000      	.short	0x0000
    3790:	20000050 	.word	0x20000050
    3794:	4806      	ldr	r0, [pc, #24]	; (37b0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x2c>)
    3796:	b510      	push	{r4, lr}
    3798:	2100      	movs	r1, #0
    379a:	6001      	str	r1, [r0, #0]
    379c:	2101      	movs	r1, #1
    379e:	6001      	str	r1, [r0, #0]
    37a0:	4608      	mov	r0, r1
    37a2:	f008 fa10 	bl	bbc6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    37a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    37aa:	2001      	movs	r0, #1
    37ac:	f008 b9fe 	b.w	bbac <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    37b0:	40001ffc 	.word	0x40001ffc
    37b4:	4807      	ldr	r0, [pc, #28]	; (37d4 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x50>)
    37b6:	b510      	push	{r4, lr}
    37b8:	2101      	movs	r1, #1
    37ba:	6041      	str	r1, [r0, #4]
    37bc:	1e89      	subs	r1, r1, #2
    37be:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    37c2:	200c      	movs	r0, #12
    37c4:	f008 f9ff 	bl	bbc6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    37c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    37cc:	200c      	movs	r0, #12
    37ce:	f008 b9ed 	b.w	bbac <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    37d2:	0000      	.short	0x0000
    37d4:	4000c000 	.word	0x4000c000

000037d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    37d8:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    37da:	4a10      	ldr	r2, [pc, #64]	; (381c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    37dc:	6855      	ldr	r5, [r2, #4]
    37de:	b1e5      	cbz	r5, 381a <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x42>
    37e0:	2200      	movs	r2, #0
    37e2:	4603      	mov	r3, r0
    37e4:	466e      	mov	r6, sp
    37e6:	240a      	movs	r4, #10
    37e8:	e003      	b.n	37f2 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1a>
    37ea:	fbb0 f0f4 	udiv	r0, r0, r4
    37ee:	1c52      	adds	r2, r2, #1
    37f0:	b2d2      	uxtb	r2, r2
    37f2:	2800      	cmp	r0, #0
    37f4:	d1f9      	bne.n	37ea <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x12>
    37f6:	54b0      	strb	r0, [r6, r2]
    37f8:	e00a      	b.n	3810 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    37fa:	bf00      	nop
    37fc:	fbb3 f0f4 	udiv	r0, r3, r4
    3800:	fb04 3010 	mls	r0, r4, r0, r3
    3804:	fbb3 f3f4 	udiv	r3, r3, r4
    3808:	1e52      	subs	r2, r2, #1
    380a:	b2d2      	uxtb	r2, r2
    380c:	3030      	adds	r0, #48	; 0x30
    380e:	54b0      	strb	r0, [r6, r2]
    3810:	2a00      	cmp	r2, #0
    3812:	d1f3      	bne.n	37fc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    3814:	4630      	mov	r0, r6
    3816:	47a8      	blx	r5
    3818:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    381a:	e7fe      	b.n	381a <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x42>
    381c:	20000050 	.word	0x20000050

00003820 <mpsl_init>:
    3820:	b570      	push	{r4, r5, r6, lr}
    3822:	4c17      	ldr	r4, [pc, #92]	; (3880 <mpsl_init+0x60>)
    3824:	4606      	mov	r6, r0
    3826:	460d      	mov	r5, r1
    3828:	7860      	ldrb	r0, [r4, #1]
    382a:	b110      	cbz	r0, 3832 <mpsl_init+0x12>
    382c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3830:	bd70      	pop	{r4, r5, r6, pc}
    3832:	b906      	cbnz	r6, 3836 <mpsl_init+0x16>
    3834:	4e13      	ldr	r6, [pc, #76]	; (3884 <mpsl_init+0x64>)
    3836:	6062      	str	r2, [r4, #4]
    3838:	7025      	strb	r5, [r4, #0]
    383a:	f7ff ffab 	bl	3794 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>
    383e:	f7ff ffb9 	bl	37b4 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>
    3842:	4630      	mov	r0, r6
    3844:	f7ff fe92 	bl	356c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    3848:	0006      	movs	r6, r0
    384a:	d1f1      	bne.n	3830 <mpsl_init+0x10>
    384c:	f7fe fef4 	bl	2638 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    3850:	f7ff ff0a 	bl	3668 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    3854:	f008 f87a 	bl	b94c <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    3858:	4628      	mov	r0, r5
    385a:	f008 f9a7 	bl	bbac <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    385e:	2001      	movs	r0, #1
    3860:	2d00      	cmp	r5, #0
    3862:	db09      	blt.n	3878 <mpsl_init+0x58>
    3864:	f005 011f 	and.w	r1, r5, #31
    3868:	fa00 f101 	lsl.w	r1, r0, r1
    386c:	096a      	lsrs	r2, r5, #5
    386e:	0092      	lsls	r2, r2, #2
    3870:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    3874:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    3878:	7060      	strb	r0, [r4, #1]
    387a:	4630      	mov	r0, r6
    387c:	bd70      	pop	{r4, r5, r6, pc}
    387e:	0000      	.short	0x0000
    3880:	20000050 	.word	0x20000050
    3884:	0000bbe8 	.word	0x0000bbe8

00003888 <mpsl_is_initialized>:
    3888:	4801      	ldr	r0, [pc, #4]	; (3890 <mpsl_is_initialized+0x8>)
    388a:	7840      	ldrb	r0, [r0, #1]
    388c:	4770      	bx	lr
    388e:	0000      	.short	0x0000
    3890:	20000050 	.word	0x20000050

00003894 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    3894:	4807      	ldr	r0, [pc, #28]	; (38b4 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    3896:	f990 0000 	ldrsb.w	r0, [r0]
    389a:	2800      	cmp	r0, #0
    389c:	db09      	blt.n	38b2 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    389e:	f000 021f 	and.w	r2, r0, #31
    38a2:	2101      	movs	r1, #1
    38a4:	4091      	lsls	r1, r2
    38a6:	0940      	lsrs	r0, r0, #5
    38a8:	0080      	lsls	r0, r0, #2
    38aa:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    38ae:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    38b2:	4770      	bx	lr
    38b4:	20000050 	.word	0x20000050

000038b8 <mpsl_temperature_get>:
    38b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    38bc:	2601      	movs	r6, #1
    38be:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    38c2:	0331      	lsls	r1, r6, #12
    38c4:	f04f 0800 	mov.w	r8, #0
    38c8:	4640      	mov	r0, r8
    38ca:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    38ce:	f3bf 8f4f 	dsb	sy
    38d2:	f3bf 8f6f 	isb	sy
    38d6:	4c16      	ldr	r4, [pc, #88]	; (3930 <mpsl_temperature_get+0x78>)
    38d8:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    38dc:	200c      	movs	r0, #12
    38de:	f008 f991 	bl	bc04 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    38e2:	4d14      	ldr	r5, [pc, #80]	; (3934 <mpsl_temperature_get+0x7c>)
    38e4:	6828      	ldr	r0, [r5, #0]
    38e6:	43c0      	mvns	r0, r0
    38e8:	f340 1700 	sbfx	r7, r0, #4, #1
    38ec:	6828      	ldr	r0, [r5, #0]
    38ee:	f040 0010 	orr.w	r0, r0, #16
    38f2:	6028      	str	r0, [r5, #0]
    38f4:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    38f8:	6026      	str	r6, [r4, #0]
    38fa:	1c7f      	adds	r7, r7, #1
    38fc:	e002      	b.n	3904 <mpsl_temperature_get+0x4c>
    38fe:	bf00      	nop
    3900:	f000 f890 	bl	3a24 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    3904:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    3908:	2800      	cmp	r0, #0
    390a:	d0f9      	beq.n	3900 <mpsl_temperature_get+0x48>
    390c:	b91f      	cbnz	r7, 3916 <mpsl_temperature_get+0x5e>
    390e:	6828      	ldr	r0, [r5, #0]
    3910:	f020 0010 	bic.w	r0, r0, #16
    3914:	6028      	str	r0, [r5, #0]
    3916:	4808      	ldr	r0, [pc, #32]	; (3938 <mpsl_temperature_get+0x80>)
    3918:	6805      	ldr	r5, [r0, #0]
    391a:	6066      	str	r6, [r4, #4]
    391c:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    3920:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    3924:	200c      	movs	r0, #12
    3926:	f008 f96d 	bl	bc04 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    392a:	4628      	mov	r0, r5
    392c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3930:	4000c000 	.word	0x4000c000
    3934:	e000ed10 	.word	0xe000ed10
    3938:	4000c508 	.word	0x4000c508

0000393c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    393c:	b510      	push	{r4, lr}
    393e:	4602      	mov	r2, r0
    3940:	2005      	movs	r0, #5
    3942:	490c      	ldr	r1, [pc, #48]	; (3974 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    3944:	e004      	b.n	3950 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    3946:	bf00      	nop
    3948:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    394c:	791b      	ldrb	r3, [r3, #4]
    394e:	b133      	cbz	r3, 395e <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    3950:	1e40      	subs	r0, r0, #1
    3952:	b2c0      	uxtb	r0, r0
    3954:	d2f8      	bcs.n	3948 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    3956:	214b      	movs	r1, #75	; 0x4b
    3958:	2069      	movs	r0, #105	; 0x69
    395a:	f7ff ff3d 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    395e:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    3962:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    3966:	2200      	movs	r2, #0
    3968:	714a      	strb	r2, [r1, #5]
    396a:	718a      	strb	r2, [r1, #6]
    396c:	2201      	movs	r2, #1
    396e:	710a      	strb	r2, [r1, #4]
    3970:	bd10      	pop	{r4, pc}
    3972:	0000      	.short	0x0000
    3974:	20000d78 	.word	0x20000d78

00003978 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    3978:	b510      	push	{r4, lr}
    397a:	2805      	cmp	r0, #5
    397c:	d301      	bcc.n	3982 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    397e:	215a      	movs	r1, #90	; 0x5a
    3980:	e006      	b.n	3990 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    3982:	490a      	ldr	r1, [pc, #40]	; (39ac <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    3984:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    3988:	7901      	ldrb	r1, [r0, #4]
    398a:	2901      	cmp	r1, #1
    398c:	d003      	beq.n	3996 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    398e:	215b      	movs	r1, #91	; 0x5b
    3990:	2069      	movs	r0, #105	; 0x69
    3992:	f7ff ff21 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3996:	7941      	ldrb	r1, [r0, #5]
    3998:	7982      	ldrb	r2, [r0, #6]
    399a:	1c49      	adds	r1, r1, #1
    399c:	b2c9      	uxtb	r1, r1
    399e:	428a      	cmp	r2, r1
    39a0:	d000      	beq.n	39a4 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    39a2:	7141      	strb	r1, [r0, #5]
    39a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    39a8:	f7ff bf74 	b.w	3894 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    39ac:	20000d78 	.word	0x20000d78

000039b0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    39b0:	b570      	push	{r4, r5, r6, lr}
    39b2:	2505      	movs	r5, #5
    39b4:	4e0e      	ldr	r6, [pc, #56]	; (39f0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    39b6:	4c0f      	ldr	r4, [pc, #60]	; (39f4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    39b8:	e016      	b.n	39e8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    39ba:	7821      	ldrb	r1, [r4, #0]
    39bc:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    39c0:	7902      	ldrb	r2, [r0, #4]
    39c2:	2a01      	cmp	r2, #1
    39c4:	d108      	bne.n	39d8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    39c6:	7942      	ldrb	r2, [r0, #5]
    39c8:	7983      	ldrb	r3, [r0, #6]
    39ca:	429a      	cmp	r2, r3
    39cc:	d004      	beq.n	39d8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    39ce:	7942      	ldrb	r2, [r0, #5]
    39d0:	7182      	strb	r2, [r0, #6]
    39d2:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    39d6:	4780      	blx	r0
    39d8:	7820      	ldrb	r0, [r4, #0]
    39da:	1c40      	adds	r0, r0, #1
    39dc:	b2c0      	uxtb	r0, r0
    39de:	7020      	strb	r0, [r4, #0]
    39e0:	2805      	cmp	r0, #5
    39e2:	d301      	bcc.n	39e8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    39e4:	2000      	movs	r0, #0
    39e6:	7020      	strb	r0, [r4, #0]
    39e8:	1e6d      	subs	r5, r5, #1
    39ea:	b2ed      	uxtb	r5, r5
    39ec:	d2e5      	bcs.n	39ba <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    39ee:	bd70      	pop	{r4, r5, r6, pc}
    39f0:	20000d78 	.word	0x20000d78
    39f4:	2000029d 	.word	0x2000029d

000039f8 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    39f8:	b500      	push	{lr}
    39fa:	f008 f932 	bl	bc62 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    39fe:	b940      	cbnz	r0, 3a12 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    3a00:	f008 f939 	bl	bc76 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3a04:	b928      	cbnz	r0, 3a12 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    3a06:	f008 f94d 	bl	bca4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    3a0a:	b910      	cbnz	r0, 3a12 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    3a0c:	f008 f95e 	bl	bccc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3a10:	b108      	cbz	r0, 3a16 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    3a12:	4802      	ldr	r0, [pc, #8]	; (3a1c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    3a14:	bd00      	pop	{pc}
    3a16:	4802      	ldr	r0, [pc, #8]	; (3a20 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    3a18:	bd00      	pop	{pc}
    3a1a:	0000      	.short	0x0000
    3a1c:	4000050c 	.word	0x4000050c
    3a20:	4001e700 	.word	0x4001e700

00003a24 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    3a24:	b510      	push	{r4, lr}
    3a26:	f008 f951 	bl	bccc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3a2a:	b330      	cbz	r0, 3a7a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x56>
    3a2c:	f3ef 8010 	mrs	r0, PRIMASK
    3a30:	b1c8      	cbz	r0, 3a66 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
    3a32:	2100      	movs	r1, #0
    3a34:	b672      	cpsid	i
    3a36:	4812      	ldr	r0, [pc, #72]	; (3a80 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
    3a38:	6802      	ldr	r2, [r0, #0]
    3a3a:	6803      	ldr	r3, [r0, #0]
    3a3c:	f3c2 1200 	ubfx	r2, r2, #4, #1
    3a40:	f043 0310 	orr.w	r3, r3, #16
    3a44:	6003      	str	r3, [r0, #0]
    3a46:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3a4a:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    3a4e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    3a52:	431c      	orrs	r4, r3
    3a54:	d000      	beq.n	3a58 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
    3a56:	bf40      	sev
    3a58:	bf20      	wfe
    3a5a:	bf00      	nop
    3a5c:	bf00      	nop
    3a5e:	bf00      	nop
    3a60:	bf00      	nop
    3a62:	b112      	cbz	r2, 3a6a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
    3a64:	e005      	b.n	3a72 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4e>
    3a66:	2101      	movs	r1, #1
    3a68:	e7e4      	b.n	3a34 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
    3a6a:	6802      	ldr	r2, [r0, #0]
    3a6c:	f022 0210 	bic.w	r2, r2, #16
    3a70:	6002      	str	r2, [r0, #0]
    3a72:	2900      	cmp	r1, #0
    3a74:	d000      	beq.n	3a78 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x54>
    3a76:	b662      	cpsie	i
    3a78:	bd10      	pop	{r4, pc}
    3a7a:	bf20      	wfe
    3a7c:	bd10      	pop	{r4, pc}
    3a7e:	0000      	.short	0x0000
    3a80:	e000ed10 	.word	0xe000ed10

00003a84 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    3a84:	0000bf3d 0000bf59 0000bf47 0000bf53     =...Y...G...S...
    3a94:	0000bf41 0000bf3b 0000bf39 0000bf5f     A...;...9..._...
    3aa4:	0000bf4d 0000bf33 0000bf2b 0000bf2f     M...3...+.../...
    3ab4:	0000bf25                                %...

00003ab8 <mpsl_fem_disable>:
    3ab8:	4801      	ldr	r0, [pc, #4]	; (3ac0 <mpsl_fem_disable+0x8>)
    3aba:	6800      	ldr	r0, [r0, #0]
    3abc:	6800      	ldr	r0, [r0, #0]
    3abe:	4700      	bx	r0
    3ac0:	20000058 	.word	0x20000058

00003ac4 <mpsl_fem_lna_configuration_clear>:
    3ac4:	4801      	ldr	r0, [pc, #4]	; (3acc <mpsl_fem_lna_configuration_clear+0x8>)
    3ac6:	6800      	ldr	r0, [r0, #0]
    3ac8:	6900      	ldr	r0, [r0, #16]
    3aca:	4700      	bx	r0
    3acc:	20000058 	.word	0x20000058

00003ad0 <mpsl_fem_lna_configuration_set>:
    3ad0:	4a01      	ldr	r2, [pc, #4]	; (3ad8 <mpsl_fem_lna_configuration_set+0x8>)
    3ad2:	6812      	ldr	r2, [r2, #0]
    3ad4:	6892      	ldr	r2, [r2, #8]
    3ad6:	4710      	bx	r2
    3ad8:	20000058 	.word	0x20000058

00003adc <mpsl_fem_pa_configuration_clear>:
    3adc:	4801      	ldr	r0, [pc, #4]	; (3ae4 <mpsl_fem_pa_configuration_clear+0x8>)
    3ade:	6800      	ldr	r0, [r0, #0]
    3ae0:	68c0      	ldr	r0, [r0, #12]
    3ae2:	4700      	bx	r0
    3ae4:	20000058 	.word	0x20000058

00003ae8 <mpsl_fem_pa_configuration_set>:
    3ae8:	4a01      	ldr	r2, [pc, #4]	; (3af0 <mpsl_fem_pa_configuration_set+0x8>)
    3aea:	6812      	ldr	r2, [r2, #0]
    3aec:	6852      	ldr	r2, [r2, #4]
    3aee:	4710      	bx	r2
    3af0:	20000058 	.word	0x20000058

00003af4 <mpsl_fem_pa_is_configured>:
    3af4:	4901      	ldr	r1, [pc, #4]	; (3afc <mpsl_fem_pa_is_configured+0x8>)
    3af6:	6809      	ldr	r1, [r1, #0]
    3af8:	6a09      	ldr	r1, [r1, #32]
    3afa:	4708      	bx	r1
    3afc:	20000058 	.word	0x20000058

00003b00 <mpsl_fem_device_config_254_apply_get>:
    3b00:	4801      	ldr	r0, [pc, #4]	; (3b08 <mpsl_fem_device_config_254_apply_get+0x8>)
    3b02:	7800      	ldrb	r0, [r0, #0]
    3b04:	4770      	bx	lr
    3b06:	0000      	.short	0x0000
    3b08:	2000029e 	.word	0x2000029e
    3b0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3b0e:	4c17      	ldr	r4, [pc, #92]	; (3b6c <mpsl_fem_device_config_254_apply_get+0x6c>)
    3b10:	79a0      	ldrb	r0, [r4, #6]
    3b12:	2802      	cmp	r0, #2
    3b14:	d200      	bcs.n	3b18 <mpsl_fem_device_config_254_apply_get+0x18>
    3b16:	2002      	movs	r0, #2
    3b18:	f88d 0001 	strb.w	r0, [sp, #1]
    3b1c:	7960      	ldrb	r0, [r4, #5]
    3b1e:	2803      	cmp	r0, #3
    3b20:	d200      	bcs.n	3b24 <mpsl_fem_device_config_254_apply_get+0x24>
    3b22:	2003      	movs	r0, #3
    3b24:	f88d 0000 	strb.w	r0, [sp]
    3b28:	7920      	ldrb	r0, [r4, #4]
    3b2a:	f8ad 0004 	strh.w	r0, [sp, #4]
    3b2e:	78e0      	ldrb	r0, [r4, #3]
    3b30:	f8ad 0002 	strh.w	r0, [sp, #2]
    3b34:	4668      	mov	r0, sp
    3b36:	f006 f8fb 	bl	9d30 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    3b3a:	b108      	cbz	r0, 3b40 <mpsl_fem_device_config_254_apply_get+0x40>
    3b3c:	21ae      	movs	r1, #174	; 0xae
    3b3e:	e010      	b.n	3b62 <mpsl_fem_device_config_254_apply_get+0x62>
    3b40:	68a0      	ldr	r0, [r4, #8]
    3b42:	9002      	str	r0, [sp, #8]
    3b44:	a802      	add	r0, sp, #8
    3b46:	f006 f909 	bl	9d5c <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    3b4a:	b108      	cbz	r0, 3b50 <mpsl_fem_device_config_254_apply_get+0x50>
    3b4c:	21b2      	movs	r1, #178	; 0xb2
    3b4e:	e008      	b.n	3b62 <mpsl_fem_device_config_254_apply_get+0x62>
    3b50:	4807      	ldr	r0, [pc, #28]	; (3b70 <mpsl_fem_device_config_254_apply_get+0x70>)
    3b52:	6800      	ldr	r0, [r0, #0]
    3b54:	9003      	str	r0, [sp, #12]
    3b56:	a803      	add	r0, sp, #12
    3b58:	f00b f932 	bl	edc0 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    3b5c:	2800      	cmp	r0, #0
    3b5e:	d003      	beq.n	3b68 <mpsl_fem_device_config_254_apply_get+0x68>
    3b60:	21b6      	movs	r1, #182	; 0xb6
    3b62:	2003      	movs	r0, #3
    3b64:	f000 f8ce 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3b68:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    3b6a:	0000      	.short	0x0000
    3b6c:	20000068 	.word	0x20000068
    3b70:	00003dec 	.word	0x00003dec

00003b74 <sdc_build_revision_get>:
    3b74:	b510      	push	{r4, lr}
    3b76:	b128      	cbz	r0, 3b84 <sdc_build_revision_get+0x10>
    3b78:	2214      	movs	r2, #20
    3b7a:	4904      	ldr	r1, [pc, #16]	; (3b8c <sdc_build_revision_get+0x18>)
    3b7c:	f008 f8f8 	bl	bd70 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3b80:	2000      	movs	r0, #0
    3b82:	bd10      	pop	{r4, pc}
    3b84:	f06f 0015 	mvn.w	r0, #21
    3b88:	bd10      	pop	{r4, pc}
    3b8a:	0000      	.short	0x0000
    3b8c:	00003e1e 	.word	0x00003e1e

00003b90 <sdc_cfg_set>:
    3b90:	b570      	push	{r4, r5, r6, lr}
    3b92:	f06f 052c 	mvn.w	r5, #44	; 0x2c
    3b96:	bbb0      	cbnz	r0, 3c06 <sdc_cfg_set+0x76>
    3b98:	4c1d      	ldr	r4, [pc, #116]	; (3c10 <sdc_cfg_set+0x80>)
    3b9a:	78a0      	ldrb	r0, [r4, #2]
    3b9c:	b108      	cbz	r0, 3ba2 <sdc_cfg_set+0x12>
    3b9e:	11a8      	asrs	r0, r5, #6
    3ba0:	bd70      	pop	{r4, r5, r6, pc}
    3ba2:	b321      	cbz	r1, 3bee <sdc_cfg_set+0x5e>
    3ba4:	f06f 0015 	mvn.w	r0, #21
    3ba8:	2a00      	cmp	r2, #0
    3baa:	d0f9      	beq.n	3ba0 <sdc_cfg_set+0x10>
    3bac:	2908      	cmp	r1, #8
    3bae:	d22a      	bcs.n	3c06 <sdc_cfg_set+0x76>
    3bb0:	e8df f001 	tbb	[pc, r1]
    3bb4:	0a070429 	.word	0x0a070429
    3bb8:	1e14110e 	.word	0x1e14110e
    3bbc:	7810      	ldrb	r0, [r2, #0]
    3bbe:	7320      	strb	r0, [r4, #12]
    3bc0:	e018      	b.n	3bf4 <sdc_cfg_set+0x64>
    3bc2:	7810      	ldrb	r0, [r2, #0]
    3bc4:	7360      	strb	r0, [r4, #13]
    3bc6:	e015      	b.n	3bf4 <sdc_cfg_set+0x64>
    3bc8:	6810      	ldr	r0, [r2, #0]
    3bca:	f8c4 000f 	str.w	r0, [r4, #15]
    3bce:	e011      	b.n	3bf4 <sdc_cfg_set+0x64>
    3bd0:	6810      	ldr	r0, [r2, #0]
    3bd2:	6160      	str	r0, [r4, #20]
    3bd4:	e00e      	b.n	3bf4 <sdc_cfg_set+0x64>
    3bd6:	7810      	ldrb	r0, [r2, #0]
    3bd8:	73a0      	strb	r0, [r4, #14]
    3bda:	e00b      	b.n	3bf4 <sdc_cfg_set+0x64>
    3bdc:	7921      	ldrb	r1, [r4, #4]
    3bde:	b111      	cbz	r1, 3be6 <sdc_cfg_set+0x56>
    3be0:	7811      	ldrb	r1, [r2, #0]
    3be2:	2902      	cmp	r1, #2
    3be4:	d3dc      	bcc.n	3ba0 <sdc_cfg_set+0x10>
    3be6:	490a      	ldr	r1, [pc, #40]	; (3c10 <sdc_cfg_set+0x80>)
    3be8:	7810      	ldrb	r0, [r2, #0]
    3bea:	310c      	adds	r1, #12
    3bec:	7308      	strb	r0, [r1, #12]
    3bee:	e001      	b.n	3bf4 <sdc_cfg_set+0x64>
    3bf0:	8810      	ldrh	r0, [r2, #0]
    3bf2:	8360      	strh	r0, [r4, #26]
    3bf4:	4906      	ldr	r1, [pc, #24]	; (3c10 <sdc_cfg_set+0x80>)
    3bf6:	2201      	movs	r2, #1
    3bf8:	310c      	adds	r1, #12
    3bfa:	2000      	movs	r0, #0
    3bfc:	f008 f9b1 	bl	bf62 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xfe>
    3c00:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    3c04:	db01      	blt.n	3c0a <sdc_cfg_set+0x7a>
    3c06:	4628      	mov	r0, r5
    3c08:	bd70      	pop	{r4, r5, r6, pc}
    3c0a:	2101      	movs	r1, #1
    3c0c:	70e1      	strb	r1, [r4, #3]
    3c0e:	bd70      	pop	{r4, r5, r6, pc}
    3c10:	2000005c 	.word	0x2000005c

00003c14 <sdc_enable>:
    3c14:	b538      	push	{r3, r4, r5, lr}
    3c16:	460d      	mov	r5, r1
    3c18:	0004      	movs	r4, r0
    3c1a:	d020      	beq.n	3c5e <sdc_enable+0x4a>
    3c1c:	b1fd      	cbz	r5, 3c5e <sdc_enable+0x4a>
    3c1e:	f000 f933 	bl	3e88 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    3c22:	b1f8      	cbz	r0, 3c64 <sdc_enable+0x50>
    3c24:	4620      	mov	r0, r4
    3c26:	f7ff fe89 	bl	393c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    3c2a:	4c10      	ldr	r4, [pc, #64]	; (3c6c <sdc_enable+0x58>)
    3c2c:	2200      	movs	r2, #0
    3c2e:	f104 010c 	add.w	r1, r4, #12
    3c32:	7020      	strb	r0, [r4, #0]
    3c34:	4628      	mov	r0, r5
    3c36:	f008 f994 	bl	bf62 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xfe>
    3c3a:	f00b fcb0 	bl	f59e <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    3c3e:	2100      	movs	r1, #0
    3c40:	7820      	ldrb	r0, [r4, #0]
    3c42:	f006 fae3 	bl	a20c <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    3c46:	7860      	ldrb	r0, [r4, #1]
    3c48:	f88d 0000 	strb.w	r0, [sp]
    3c4c:	4668      	mov	r0, sp
    3c4e:	f00b f8ab 	bl	eda8 <sym_PYH4UVSHNWZESRWJUJ3ZT676FMQZCLVGBPGE4SY>
    3c52:	f7ff ff5b 	bl	3b0c <mpsl_fem_device_config_254_apply_get+0xc>
    3c56:	2001      	movs	r0, #1
    3c58:	70a0      	strb	r0, [r4, #2]
    3c5a:	2000      	movs	r0, #0
    3c5c:	bd38      	pop	{r3, r4, r5, pc}
    3c5e:	f06f 0015 	mvn.w	r0, #21
    3c62:	bd38      	pop	{r3, r4, r5, pc}
    3c64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3c68:	bd38      	pop	{r3, r4, r5, pc}
    3c6a:	0000      	.short	0x0000
    3c6c:	2000005c 	.word	0x2000005c

00003c70 <sdc_init>:
    3c70:	b570      	push	{r4, r5, r6, lr}
    3c72:	0005      	movs	r5, r0
    3c74:	d00b      	beq.n	3c8e <sdc_init+0x1e>
    3c76:	f7ff fe07 	bl	3888 <mpsl_is_initialized>
    3c7a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    3c7e:	b120      	cbz	r0, 3c8a <sdc_init+0x1a>
    3c80:	f7ff fcc6 	bl	3610 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    3c84:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    3c88:	d904      	bls.n	3c94 <sdc_init+0x24>
    3c8a:	4620      	mov	r0, r4
    3c8c:	bd70      	pop	{r4, r5, r6, pc}
    3c8e:	f06f 0015 	mvn.w	r0, #21
    3c92:	bd70      	pop	{r4, r5, r6, pc}
    3c94:	2200      	movs	r2, #0
    3c96:	4b16      	ldr	r3, [pc, #88]	; (3cf0 <sdc_init+0x80>)
    3c98:	4611      	mov	r1, r2
    3c9a:	bf00      	nop
    3c9c:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    3ca0:	4284      	cmp	r4, r0
    3ca2:	d303      	bcc.n	3cac <sdc_init+0x3c>
    3ca4:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    3ca8:	7882      	ldrb	r2, [r0, #2]
    3caa:	e003      	b.n	3cb4 <sdc_init+0x44>
    3cac:	1c49      	adds	r1, r1, #1
    3cae:	b2c9      	uxtb	r1, r1
    3cb0:	290c      	cmp	r1, #12
    3cb2:	d3f3      	bcc.n	3c9c <sdc_init+0x2c>
    3cb4:	4c0f      	ldr	r4, [pc, #60]	; (3cf4 <sdc_init+0x84>)
    3cb6:	4810      	ldr	r0, [pc, #64]	; (3cf8 <sdc_init+0x88>)
    3cb8:	7062      	strb	r2, [r4, #1]
    3cba:	60a5      	str	r5, [r4, #8]
    3cbc:	f000 f9f6 	bl	40ac <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    3cc0:	2000      	movs	r0, #0
    3cc2:	70a0      	strb	r0, [r4, #2]
    3cc4:	70e0      	strb	r0, [r4, #3]
    3cc6:	7120      	strb	r0, [r4, #4]
    3cc8:	f3ef 8410 	mrs	r4, PRIMASK
    3ccc:	b672      	cpsid	i
    3cce:	480b      	ldr	r0, [pc, #44]	; (3cfc <sdc_init+0x8c>)
    3cd0:	f06f 010c 	mvn.w	r1, #12
    3cd4:	f000 fd6c 	bl	47b0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    3cd8:	4809      	ldr	r0, [pc, #36]	; (3d00 <sdc_init+0x90>)
    3cda:	f000 fe2d 	bl	4938 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    3cde:	b118      	cbz	r0, 3ce8 <sdc_init+0x78>
    3ce0:	21c4      	movs	r1, #196	; 0xc4
    3ce2:	2003      	movs	r0, #3
    3ce4:	f000 f80e 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3ce8:	b904      	cbnz	r4, 3cec <sdc_init+0x7c>
    3cea:	b662      	cpsie	i
    3cec:	2000      	movs	r0, #0
    3cee:	bd70      	pop	{r4, r5, r6, pc}
    3cf0:	00003dee 	.word	0x00003dee
    3cf4:	2000005c 	.word	0x2000005c
    3cf8:	00003b0d 	.word	0x00003b0d
    3cfc:	4000c000 	.word	0x4000c000
    3d00:	00003eb5 	.word	0x00003eb5

00003d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    3d04:	b50e      	push	{r1, r2, r3, lr}
    3d06:	b672      	cpsid	i
    3d08:	4a15      	ldr	r2, [pc, #84]	; (3d60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    3d0a:	6895      	ldr	r5, [r2, #8]
    3d0c:	b1d5      	cbz	r5, 3d44 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x40>
    3d0e:	2200      	movs	r2, #0
    3d10:	4603      	mov	r3, r0
    3d12:	466e      	mov	r6, sp
    3d14:	240a      	movs	r4, #10
    3d16:	e003      	b.n	3d20 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    3d18:	fbb0 f0f4 	udiv	r0, r0, r4
    3d1c:	1c52      	adds	r2, r2, #1
    3d1e:	b2d2      	uxtb	r2, r2
    3d20:	2800      	cmp	r0, #0
    3d22:	d1f9      	bne.n	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    3d24:	54b0      	strb	r0, [r6, r2]
    3d26:	e009      	b.n	3d3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x38>
    3d28:	fbb3 f0f4 	udiv	r0, r3, r4
    3d2c:	fb04 3010 	mls	r0, r4, r0, r3
    3d30:	fbb3 f3f4 	udiv	r3, r3, r4
    3d34:	1e52      	subs	r2, r2, #1
    3d36:	b2d2      	uxtb	r2, r2
    3d38:	3030      	adds	r0, #48	; 0x30
    3d3a:	54b0      	strb	r0, [r6, r2]
    3d3c:	2a00      	cmp	r2, #0
    3d3e:	d1f3      	bne.n	3d28 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    3d40:	4630      	mov	r0, r6
    3d42:	47a8      	blx	r5
    3d44:	f3bf 8f4f 	dsb	sy
    3d48:	4806      	ldr	r0, [pc, #24]	; (3d64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    3d4a:	6801      	ldr	r1, [r0, #0]
    3d4c:	4a06      	ldr	r2, [pc, #24]	; (3d68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    3d4e:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    3d52:	4311      	orrs	r1, r2
    3d54:	6001      	str	r1, [r0, #0]
    3d56:	f3bf 8f4f 	dsb	sy
    3d5a:	bf00      	nop
    3d5c:	e7fd      	b.n	3d5a <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x56>
    3d5e:	0000      	.short	0x0000
    3d60:	2000005c 	.word	0x2000005c
    3d64:	e000ed0c 	.word	0xe000ed0c
    3d68:	05fa0004 	.word	0x05fa0004

00003d6c <sdc_support_adv>:
    3d6c:	4806      	ldr	r0, [pc, #24]	; (3d88 <sdc_support_adv+0x1c>)
    3d6e:	b510      	push	{r4, lr}
    3d70:	78c1      	ldrb	r1, [r0, #3]
    3d72:	7880      	ldrb	r0, [r0, #2]
    3d74:	4301      	orrs	r1, r0
    3d76:	d002      	beq.n	3d7e <sdc_support_adv+0x12>
    3d78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3d7c:	bd10      	pop	{r4, pc}
    3d7e:	f006 fa65 	bl	a24c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
    3d82:	2000      	movs	r0, #0
    3d84:	bd10      	pop	{r4, pc}
    3d86:	0000      	.short	0x0000
    3d88:	2000005c 	.word	0x2000005c

00003d8c <sdc_support_dle>:
    3d8c:	4806      	ldr	r0, [pc, #24]	; (3da8 <sdc_support_dle+0x1c>)
    3d8e:	b510      	push	{r4, lr}
    3d90:	78c1      	ldrb	r1, [r0, #3]
    3d92:	7880      	ldrb	r0, [r0, #2]
    3d94:	4301      	orrs	r1, r0
    3d96:	d002      	beq.n	3d9e <sdc_support_dle+0x12>
    3d98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3d9c:	bd10      	pop	{r4, pc}
    3d9e:	f005 fff5 	bl	9d8c <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>
    3da2:	2000      	movs	r0, #0
    3da4:	bd10      	pop	{r4, pc}
    3da6:	0000      	.short	0x0000
    3da8:	2000005c 	.word	0x2000005c

00003dac <sdc_support_le_2m_phy>:
    3dac:	4806      	ldr	r0, [pc, #24]	; (3dc8 <sdc_support_le_2m_phy+0x1c>)
    3dae:	b510      	push	{r4, lr}
    3db0:	78c1      	ldrb	r1, [r0, #3]
    3db2:	7880      	ldrb	r0, [r0, #2]
    3db4:	4301      	orrs	r1, r0
    3db6:	d002      	beq.n	3dbe <sdc_support_le_2m_phy+0x12>
    3db8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3dbc:	bd10      	pop	{r4, pc}
    3dbe:	f00b f964 	bl	f08a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
    3dc2:	2000      	movs	r0, #0
    3dc4:	bd10      	pop	{r4, pc}
    3dc6:	0000      	.short	0x0000
    3dc8:	2000005c 	.word	0x2000005c

00003dcc <sdc_support_slave>:
    3dcc:	4806      	ldr	r0, [pc, #24]	; (3de8 <sdc_support_slave+0x1c>)
    3dce:	b510      	push	{r4, lr}
    3dd0:	78c1      	ldrb	r1, [r0, #3]
    3dd2:	7880      	ldrb	r0, [r0, #2]
    3dd4:	4301      	orrs	r1, r0
    3dd6:	d002      	beq.n	3dde <sdc_support_slave+0x12>
    3dd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3ddc:	bd10      	pop	{r4, pc}
    3dde:	f006 fa47 	bl	a270 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>
    3de2:	2000      	movs	r0, #0
    3de4:	bd10      	pop	{r4, pc}
    3de6:	0000      	.short	0x0000
    3de8:	2000005c 	.word	0x2000005c
    3dec:	00010001 	.word	0x00010001
    3df0:	0002000b 	.word	0x0002000b
    3df4:	0005000a 	.word	0x0005000a
    3df8:	000a0009 	.word	0x000a0009
    3dfc:	00140008 	.word	0x00140008
    3e00:	001e0007 	.word	0x001e0007
    3e04:	00320006 	.word	0x00320006
    3e08:	004b0005 	.word	0x004b0005
    3e0c:	00640004 	.word	0x00640004
    3e10:	00960003 	.word	0x00960003
    3e14:	00fa0002 	.word	0x00fa0002
    3e18:	01f40001 	.word	0x01f40001
    3e1c:	473f0000 	.word	0x473f0000
    3e20:	95818e70 	.word	0x95818e70
    3e24:	d39d864e 	.word	0xd39d864e
    3e28:	f68895a2 	.word	0xf68895a2
    3e2c:	537f0a30 	.word	0x537f0a30
    3e30:	0000fd49 	.word	0x0000fd49

00003e34 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    3e34:	4a05      	ldr	r2, [pc, #20]	; (3e4c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
    3e36:	b510      	push	{r4, lr}
    3e38:	6852      	ldr	r2, [r2, #4]
    3e3a:	b112      	cbz	r2, 3e42 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
    3e3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3e40:	4710      	bx	r2
    3e42:	2183      	movs	r1, #131	; 0x83
    3e44:	2004      	movs	r0, #4
    3e46:	f7ff ff5d 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3e4a:	0000      	.short	0x0000
    3e4c:	20000da0 	.word	0x20000da0

00003e50 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>:
    3e50:	4a05      	ldr	r2, [pc, #20]	; (3e68 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A+0x18>)
    3e52:	b510      	push	{r4, lr}
    3e54:	6812      	ldr	r2, [r2, #0]
    3e56:	b112      	cbz	r2, 3e5e <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A+0xe>
    3e58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3e5c:	4710      	bx	r2
    3e5e:	217d      	movs	r1, #125	; 0x7d
    3e60:	2004      	movs	r0, #4
    3e62:	f7ff ff4f 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3e66:	0000      	.short	0x0000
    3e68:	20000da0 	.word	0x20000da0

00003e6c <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    3e6c:	4a05      	ldr	r2, [pc, #20]	; (3e84 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
    3e6e:	b510      	push	{r4, lr}
    3e70:	6892      	ldr	r2, [r2, #8]
    3e72:	b112      	cbz	r2, 3e7a <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
    3e74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3e78:	4710      	bx	r2
    3e7a:	2189      	movs	r1, #137	; 0x89
    3e7c:	2004      	movs	r0, #4
    3e7e:	f7ff ff41 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3e82:	0000      	.short	0x0000
    3e84:	20000da0 	.word	0x20000da0

00003e88 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    3e88:	4805      	ldr	r0, [pc, #20]	; (3ea0 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
    3e8a:	6801      	ldr	r1, [r0, #0]
    3e8c:	b129      	cbz	r1, 3e9a <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    3e8e:	6841      	ldr	r1, [r0, #4]
    3e90:	b119      	cbz	r1, 3e9a <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    3e92:	6880      	ldr	r0, [r0, #8]
    3e94:	b108      	cbz	r0, 3e9a <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    3e96:	2001      	movs	r0, #1
    3e98:	4770      	bx	lr
    3e9a:	2000      	movs	r0, #0
    3e9c:	4770      	bx	lr
    3e9e:	0000      	.short	0x0000
    3ea0:	20000da0 	.word	0x20000da0

00003ea4 <sdc_rand_source_register>:
    3ea4:	4902      	ldr	r1, [pc, #8]	; (3eb0 <sdc_rand_source_register+0xc>)
    3ea6:	c80d      	ldmia	r0, {r0, r2, r3}
    3ea8:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    3eac:	2000      	movs	r0, #0
    3eae:	4770      	bx	lr
    3eb0:	20000da0 	.word	0x20000da0

00003eb4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    3eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3eb6:	4c12      	ldr	r4, [pc, #72]	; (3f00 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    3eb8:	2600      	movs	r6, #0
    3eba:	6825      	ldr	r5, [r4, #0]
    3ebc:	e011      	b.n	3ee2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    3ebe:	9800      	ldr	r0, [sp, #0]
    3ec0:	2802      	cmp	r0, #2
    3ec2:	d002      	beq.n	3eca <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    3ec4:	2803      	cmp	r0, #3
    3ec6:	d10c      	bne.n	3ee2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    3ec8:	e006      	b.n	3ed8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    3eca:	6820      	ldr	r0, [r4, #0]
    3ecc:	b110      	cbz	r0, 3ed4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    3ece:	2000      	movs	r0, #0
    3ed0:	6026      	str	r6, [r4, #0]
    3ed2:	e005      	b.n	3ee0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    3ed4:	2128      	movs	r1, #40	; 0x28
    3ed6:	e00c      	b.n	3ef2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    3ed8:	6820      	ldr	r0, [r4, #0]
    3eda:	b168      	cbz	r0, 3ef8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    3edc:	2001      	movs	r0, #1
    3ede:	6026      	str	r6, [r4, #0]
    3ee0:	47a8      	blx	r5
    3ee2:	4668      	mov	r0, sp
    3ee4:	f000 fcfa 	bl	48dc <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    3ee8:	2800      	cmp	r0, #0
    3eea:	d0e8      	beq.n	3ebe <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    3eec:	2805      	cmp	r0, #5
    3eee:	d005      	beq.n	3efc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    3ef0:	2135      	movs	r1, #53	; 0x35
    3ef2:	2004      	movs	r0, #4
    3ef4:	f7ff ff06 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3ef8:	212d      	movs	r1, #45	; 0x2d
    3efa:	e7fa      	b.n	3ef2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    3efc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3efe:	0000      	.short	0x0000
    3f00:	20000078 	.word	0x20000078
    3f04:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    3f06:	4c21      	ldr	r4, [pc, #132]	; (3f8c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>)
    3f08:	4605      	mov	r5, r0
    3f0a:	7820      	ldrb	r0, [r4, #0]
    3f0c:	b140      	cbz	r0, 3f20 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x6c>
    3f0e:	78a2      	ldrb	r2, [r4, #2]
    3f10:	1c61      	adds	r1, r4, #1
    3f12:	4628      	mov	r0, r5
    3f14:	1c92      	adds	r2, r2, #2
    3f16:	f007 ff2b 	bl	bd70 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3f1a:	2000      	movs	r0, #0
    3f1c:	7020      	strb	r0, [r4, #0]
    3f1e:	e025      	b.n	3f6c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb8>
    3f20:	481a      	ldr	r0, [pc, #104]	; (3f8c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>)
    3f22:	3844      	subs	r0, #68	; 0x44
    3f24:	f005 ff68 	bl	9df8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    3f28:	2800      	cmp	r0, #0
    3f2a:	d020      	beq.n	3f6e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xba>
    3f2c:	4c17      	ldr	r4, [pc, #92]	; (3f8c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>)
    3f2e:	3c44      	subs	r4, #68	; 0x44
    3f30:	7820      	ldrb	r0, [r4, #0]
    3f32:	2811      	cmp	r0, #17
    3f34:	d104      	bne.n	3f40 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x8c>
    3f36:	210a      	movs	r1, #10
    3f38:	203e      	movs	r0, #62	; 0x3e
    3f3a:	f008 f8af 	bl	c09c <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    3f3e:	b118      	cbz	r0, 3f48 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x94>
    3f40:	7820      	ldrb	r0, [r4, #0]
    3f42:	2808      	cmp	r0, #8
    3f44:	d006      	beq.n	3f54 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa0>
    3f46:	e00a      	b.n	3f5e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xaa>
    3f48:	4910      	ldr	r1, [pc, #64]	; (3f8c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>)
    3f4a:	4628      	mov	r0, r5
    3f4c:	3944      	subs	r1, #68	; 0x44
    3f4e:	f008 faae 	bl	c4ae <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
    3f52:	e00b      	b.n	3f6c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb8>
    3f54:	2105      	movs	r1, #5
    3f56:	203e      	movs	r0, #62	; 0x3e
    3f58:	f008 f8a0 	bl	c09c <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    3f5c:	b140      	cbz	r0, 3f70 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xbc>
    3f5e:	490b      	ldr	r1, [pc, #44]	; (3f8c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>)
    3f60:	4628      	mov	r0, r5
    3f62:	3944      	subs	r1, #68	; 0x44
    3f64:	f008 f8f8 	bl	c158 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    3f68:	2800      	cmp	r0, #0
    3f6a:	d000      	beq.n	3f6e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xba>
    3f6c:	2001      	movs	r0, #1
    3f6e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    3f70:	88a0      	ldrh	r0, [r4, #4]
    3f72:	f8ad 0000 	strh.w	r0, [sp]
    3f76:	a901      	add	r1, sp, #4
    3f78:	4668      	mov	r0, sp
    3f7a:	f008 fbb2 	bl	c6e2 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
    3f7e:	2800      	cmp	r0, #0
    3f80:	d0f5      	beq.n	3f6e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xba>
    3f82:	2198      	movs	r1, #152	; 0x98
    3f84:	2008      	movs	r0, #8
    3f86:	f7ff febd 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3f8a:	0000      	.short	0x0000
    3f8c:	20000e80 	.word	0x20000e80
    3f90:	b570      	push	{r4, r5, r6, lr}
    3f92:	780a      	ldrb	r2, [r1, #0]
    3f94:	7082      	strb	r2, [r0, #2]
    3f96:	b33a      	cbz	r2, 3fe8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x134>
    3f98:	2a01      	cmp	r2, #1
    3f9a:	d825      	bhi.n	3fe8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x134>
    3f9c:	2313      	movs	r3, #19
    3f9e:	7003      	strb	r3, [r0, #0]
    3fa0:	2300      	movs	r3, #0
    3fa2:	e00a      	b.n	3fba <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x106>
    3fa4:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    3fa8:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    3fac:	78a6      	ldrb	r6, [r4, #2]
    3fae:	70ee      	strb	r6, [r5, #3]
    3fb0:	8864      	ldrh	r4, [r4, #2]
    3fb2:	0a24      	lsrs	r4, r4, #8
    3fb4:	1c5b      	adds	r3, r3, #1
    3fb6:	712c      	strb	r4, [r5, #4]
    3fb8:	b2db      	uxtb	r3, r3
    3fba:	4293      	cmp	r3, r2
    3fbc:	d3f2      	bcc.n	3fa4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xf0>
    3fbe:	2300      	movs	r3, #0
    3fc0:	e00b      	b.n	3fda <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x126>
    3fc2:	bf00      	nop
    3fc4:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    3fc8:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    3fcc:	792e      	ldrb	r6, [r5, #4]
    3fce:	7166      	strb	r6, [r4, #5]
    3fd0:	88ad      	ldrh	r5, [r5, #4]
    3fd2:	0a2d      	lsrs	r5, r5, #8
    3fd4:	1c5b      	adds	r3, r3, #1
    3fd6:	71a5      	strb	r5, [r4, #6]
    3fd8:	b2db      	uxtb	r3, r3
    3fda:	4293      	cmp	r3, r2
    3fdc:	d3f2      	bcc.n	3fc4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x110>
    3fde:	2101      	movs	r1, #1
    3fe0:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    3fe4:	b2c0      	uxtb	r0, r0
    3fe6:	bd70      	pop	{r4, r5, r6, pc}
    3fe8:	2000      	movs	r0, #0
    3fea:	bd70      	pop	{r4, r5, r6, pc}

00003fec <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    3fec:	2101      	movs	r1, #1
    3fee:	4a0c      	ldr	r2, [pc, #48]	; (4020 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x34>)
    3ff0:	2840      	cmp	r0, #64	; 0x40
    3ff2:	d20c      	bcs.n	400e <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x22>
    3ff4:	2820      	cmp	r0, #32
    3ff6:	d803      	bhi.n	4000 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x14>
    3ff8:	1e40      	subs	r0, r0, #1
    3ffa:	4081      	lsls	r1, r0
    3ffc:	6810      	ldr	r0, [r2, #0]
    3ffe:	e002      	b.n	4006 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    4000:	3821      	subs	r0, #33	; 0x21
    4002:	4081      	lsls	r1, r0
    4004:	6850      	ldr	r0, [r2, #4]
    4006:	4201      	tst	r1, r0
    4008:	d107      	bne.n	401a <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    400a:	2000      	movs	r0, #0
    400c:	4770      	bx	lr
    400e:	28ff      	cmp	r0, #255	; 0xff
    4010:	d003      	beq.n	401a <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    4012:	3840      	subs	r0, #64	; 0x40
    4014:	4081      	lsls	r1, r0
    4016:	6890      	ldr	r0, [r2, #8]
    4018:	e7f5      	b.n	4006 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    401a:	2001      	movs	r0, #1
    401c:	4770      	bx	lr
    401e:	0000      	.short	0x0000
    4020:	2000007c 	.word	0x2000007c

00004024 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    4024:	2101      	movs	r1, #1
    4026:	1e40      	subs	r0, r0, #1
    4028:	4081      	lsls	r1, r0
    402a:	4804      	ldr	r0, [pc, #16]	; (403c <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x18>)
    402c:	68c0      	ldr	r0, [r0, #12]
    402e:	4201      	tst	r1, r0
    4030:	d001      	beq.n	4036 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x12>
    4032:	2001      	movs	r0, #1
    4034:	4770      	bx	lr
    4036:	2000      	movs	r0, #0
    4038:	4770      	bx	lr
    403a:	0000      	.short	0x0000
    403c:	2000007c 	.word	0x2000007c

00004040 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    4040:	4901      	ldr	r1, [pc, #4]	; (4048 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x8>)
    4042:	6800      	ldr	r0, [r0, #0]
    4044:	60c8      	str	r0, [r1, #12]
    4046:	4770      	bx	lr
    4048:	2000007c 	.word	0x2000007c

0000404c <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    404c:	4904      	ldr	r1, [pc, #16]	; (4060 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x14>)
    404e:	6802      	ldr	r2, [r0, #0]
    4050:	6840      	ldr	r0, [r0, #4]
    4052:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    4056:	600a      	str	r2, [r1, #0]
    4058:	4a02      	ldr	r2, [pc, #8]	; (4064 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    405a:	4310      	orrs	r0, r2
    405c:	6048      	str	r0, [r1, #4]
    405e:	4770      	bx	lr
    4060:	2000007c 	.word	0x2000007c
    4064:	024007f8 	.word	0x024007f8

00004068 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
    4068:	4901      	ldr	r1, [pc, #4]	; (4070 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0x8>)
    406a:	6800      	ldr	r0, [r0, #0]
    406c:	6088      	str	r0, [r1, #8]
    406e:	4770      	bx	lr
    4070:	2000007c 	.word	0x2000007c

00004074 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    4074:	4805      	ldr	r0, [pc, #20]	; (408c <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x18>)
    4076:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    407a:	6001      	str	r1, [r0, #0]
    407c:	0cc9      	lsrs	r1, r1, #19
    407e:	6041      	str	r1, [r0, #4]
    4080:	2100      	movs	r1, #0
    4082:	6081      	str	r1, [r0, #8]
    4084:	211f      	movs	r1, #31
    4086:	60c1      	str	r1, [r0, #12]
    4088:	4770      	bx	lr
    408a:	0000      	.short	0x0000
    408c:	2000007c 	.word	0x2000007c

00004090 <sdc_hci_cmd_cb_reset>:
    4090:	b510      	push	{r4, lr}
    4092:	f7ff ffef 	bl	4074 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    4096:	f00a ff6d 	bl	ef74 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    409a:	4604      	mov	r4, r0
    409c:	4802      	ldr	r0, [pc, #8]	; (40a8 <sdc_hci_cmd_cb_reset+0x18>)
    409e:	6800      	ldr	r0, [r0, #0]
    40a0:	b100      	cbz	r0, 40a4 <sdc_hci_cmd_cb_reset+0x14>
    40a2:	4780      	blx	r0
    40a4:	4620      	mov	r0, r4
    40a6:	bd10      	pop	{r4, pc}
    40a8:	2000008c 	.word	0x2000008c

000040ac <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    40ac:	4901      	ldr	r1, [pc, #4]	; (40b4 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    40ae:	6008      	str	r0, [r1, #0]
    40b0:	4770      	bx	lr
    40b2:	0000      	.short	0x0000
    40b4:	2000008c 	.word	0x2000008c

000040b8 <sdc_hci_cmd_vs_zephyr_read_version_info>:
    40b8:	2102      	movs	r1, #2
    40ba:	8001      	strh	r1, [r0, #0]
    40bc:	8041      	strh	r1, [r0, #2]
    40be:	2100      	movs	r1, #0
    40c0:	7101      	strb	r1, [r0, #4]
    40c2:	213f      	movs	r1, #63	; 0x3f
    40c4:	7141      	strb	r1, [r0, #5]
    40c6:	f247 0147 	movw	r1, #28743	; 0x7047
    40ca:	80c1      	strh	r1, [r0, #6]
    40cc:	4901      	ldr	r1, [pc, #4]	; (40d4 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    40ce:	6081      	str	r1, [r0, #8]
    40d0:	2000      	movs	r0, #0
    40d2:	4770      	bx	lr
    40d4:	4e95818e 	.word	0x4e95818e

000040d8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    40d8:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    40da:	4604      	mov	r4, r0
    40dc:	4669      	mov	r1, sp
    40de:	f008 fe66 	bl	cdae <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    40e2:	b170      	cbz	r0, 4102 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    40e4:	f240 2112 	movw	r1, #530	; 0x212
    40e8:	e008      	b.n	40fc <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x24>
    40ea:	bf00      	nop
    40ec:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    40f0:	4621      	mov	r1, r4
    40f2:	f000 f8a9 	bl	4248 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    40f6:	b120      	cbz	r0, 4102 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    40f8:	f240 2117 	movw	r1, #535	; 0x217
    40fc:	2017      	movs	r0, #23
    40fe:	f7ff fe01 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4102:	4668      	mov	r0, sp
    4104:	f000 f850 	bl	41a8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    4108:	2800      	cmp	r0, #0
    410a:	d0ef      	beq.n	40ec <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x14>
    410c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

00004110 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    4110:	b510      	push	{r4, lr}
    4112:	2802      	cmp	r0, #2
    4114:	d304      	bcc.n	4120 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x10>
    4116:	f240 116b 	movw	r1, #363	; 0x16b
    411a:	2017      	movs	r0, #23
    411c:	f7ff fdf2 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4120:	4901      	ldr	r1, [pc, #4]	; (4128 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x18>)
    4122:	5c08      	ldrb	r0, [r1, r0]
    4124:	bd10      	pop	{r4, pc}
    4126:	0000      	.short	0x0000
    4128:	20000dac 	.word	0x20000dac

0000412c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    412c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    412e:	4605      	mov	r5, r0
    4130:	9000      	str	r0, [sp, #0]
    4132:	4291      	cmp	r1, r2
    4134:	d201      	bcs.n	413a <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xe>
    4136:	4614      	mov	r4, r2
    4138:	e000      	b.n	413c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x10>
    413a:	460c      	mov	r4, r1
    413c:	b155      	cbz	r5, 4154 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x28>
    413e:	2700      	movs	r7, #0
    4140:	1ce8      	adds	r0, r5, #3
    4142:	f020 0003 	bic.w	r0, r0, #3
    4146:	42a8      	cmp	r0, r5
    4148:	d006      	beq.n	4158 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2c>
    414a:	f240 113f 	movw	r1, #319	; 0x13f
    414e:	2017      	movs	r0, #23
    4150:	f7ff fdd8 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4154:	2701      	movs	r7, #1
    4156:	e7f3      	b.n	4140 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x14>
    4158:	4e12      	ldr	r6, [pc, #72]	; (41a4 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x78>)
    415a:	4668      	mov	r0, sp
    415c:	7031      	strb	r1, [r6, #0]
    415e:	7072      	strb	r2, [r6, #1]
    4160:	4639      	mov	r1, r7
    4162:	f000 f8ed 	bl	4340 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf8>
    4166:	2000      	movs	r0, #0
    4168:	4603      	mov	r3, r0
    416a:	9900      	ldr	r1, [sp, #0]
    416c:	1cc9      	adds	r1, r1, #3
    416e:	f021 0103 	bic.w	r1, r1, #3
    4172:	9100      	str	r1, [sp, #0]
    4174:	b967      	cbnz	r7, 4190 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x64>
    4176:	eb06 0280 	add.w	r2, r6, r0, lsl #2
    417a:	60d1      	str	r1, [r2, #12]
    417c:	2100      	movs	r1, #0
    417e:	e005      	b.n	418c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x60>
    4180:	f8d2 c00c 	ldr.w	ip, [r2, #12]
    4184:	f84c 3021 	str.w	r3, [ip, r1, lsl #2]
    4188:	1c49      	adds	r1, r1, #1
    418a:	b2c9      	uxtb	r1, r1
    418c:	42a1      	cmp	r1, r4
    418e:	d3f7      	bcc.n	4180 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x54>
    4190:	9900      	ldr	r1, [sp, #0]
    4192:	1c40      	adds	r0, r0, #1
    4194:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    4198:	b2c0      	uxtb	r0, r0
    419a:	9100      	str	r1, [sp, #0]
    419c:	2802      	cmp	r0, #2
    419e:	d3e4      	bcc.n	416a <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x3e>
    41a0:	1b48      	subs	r0, r1, r5
    41a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    41a4:	20000dac 	.word	0x20000dac

000041a8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    41a8:	b570      	push	{r4, r5, r6, lr}
    41aa:	4604      	mov	r4, r0
    41ac:	f008 fe69 	bl	ce82 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    41b0:	b108      	cbz	r0, 41b6 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0xe>
    41b2:	2010      	movs	r0, #16
    41b4:	bd70      	pop	{r4, r5, r6, pc}
    41b6:	7825      	ldrb	r5, [r4, #0]
    41b8:	f000 f8fe 	bl	43b8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    41bc:	4602      	mov	r2, r0
    41be:	480c      	ldr	r0, [pc, #48]	; (41f0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x48>)
    41c0:	8861      	ldrh	r1, [r4, #2]
    41c2:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    41c6:	e00e      	b.n	41e6 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3e>
    41c8:	68c3      	ldr	r3, [r0, #12]
    41ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    41ce:	b143      	cbz	r3, 41e2 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    41d0:	1c4a      	adds	r2, r1, #1
    41d2:	8062      	strh	r2, [r4, #2]
    41d4:	80a1      	strh	r1, [r4, #4]
    41d6:	68c0      	ldr	r0, [r0, #12]
    41d8:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    41dc:	60a0      	str	r0, [r4, #8]
    41de:	2000      	movs	r0, #0
    41e0:	bd70      	pop	{r4, r5, r6, pc}
    41e2:	1c49      	adds	r1, r1, #1
    41e4:	b289      	uxth	r1, r1
    41e6:	4291      	cmp	r1, r2
    41e8:	d3ee      	bcc.n	41c8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x20>
    41ea:	8061      	strh	r1, [r4, #2]
    41ec:	2005      	movs	r0, #5
    41ee:	bd70      	pop	{r4, r5, r6, pc}
    41f0:	20000dac 	.word	0x20000dac

000041f4 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    41f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    41f8:	b121      	cbz	r1, 4204 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
    41fa:	2901      	cmp	r1, #1
    41fc:	d002      	beq.n	4204 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
    41fe:	2000      	movs	r0, #0
    4200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4204:	4c0f      	ldr	r4, [pc, #60]	; (4244 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>)
    4206:	2700      	movs	r7, #0
    4208:	463b      	mov	r3, r7
    420a:	f64f 76ff 	movw	r6, #65535	; 0xffff
    420e:	eb04 0581 	add.w	r5, r4, r1, lsl #2
    4212:	f814 c001 	ldrb.w	ip, [r4, r1]
    4216:	e00a      	b.n	422e <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x3a>
    4218:	19dc      	adds	r4, r3, r7
    421a:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    421e:	b2a4      	uxth	r4, r4
    4220:	f85e e024 	ldr.w	lr, [lr, r4, lsl #2]
    4224:	f1be 0f00 	cmp.w	lr, #0
    4228:	d004      	beq.n	4234 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x40>
    422a:	1c5b      	adds	r3, r3, #1
    422c:	b29b      	uxth	r3, r3
    422e:	459c      	cmp	ip, r3
    4230:	d8f2      	bhi.n	4218 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x24>
    4232:	4634      	mov	r4, r6
    4234:	8004      	strh	r4, [r0, #0]
    4236:	4620      	mov	r0, r4
    4238:	42b4      	cmp	r4, r6
    423a:	d0e0      	beq.n	41fe <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xa>
    423c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4240:	f000 b834 	b.w	42ac <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>
    4244:	20000dac 	.word	0x20000dac

00004248 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    4248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    424c:	4606      	mov	r6, r0
    424e:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    4252:	460c      	mov	r4, r1
    4254:	f243 0702 	movw	r7, #12290	; 0x3002
    4258:	38ff      	subs	r0, #255	; 0xff
    425a:	d020      	beq.n	429e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    425c:	2c02      	cmp	r4, #2
    425e:	d302      	bcc.n	4266 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1e>
    4260:	2007      	movs	r0, #7
    4262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4266:	4630      	mov	r0, r6
    4268:	f000 f85a 	bl	4320 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>
    426c:	0005      	movs	r5, r0
    426e:	d016      	beq.n	429e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    4270:	480c      	ldr	r0, [pc, #48]	; (42a4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x5c>)
    4272:	4629      	mov	r1, r5
    4274:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
    4278:	4630      	mov	r0, r6
    427a:	4790      	blx	r2
    427c:	480a      	ldr	r0, [pc, #40]	; (42a8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x60>)
    427e:	2100      	movs	r1, #0
    4280:	eb00 0784 	add.w	r7, r0, r4, lsl #2
    4284:	68f8      	ldr	r0, [r7, #12]
    4286:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
    428a:	4620      	mov	r0, r4
    428c:	f000 f88a 	bl	43a4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    4290:	4602      	mov	r2, r0
    4292:	4629      	mov	r1, r5
    4294:	6878      	ldr	r0, [r7, #4]
    4296:	f008 fd57 	bl	cd48 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    429a:	2000      	movs	r0, #0
    429c:	e7e1      	b.n	4262 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    429e:	4638      	mov	r0, r7
    42a0:	e7df      	b.n	4262 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    42a2:	0000      	.short	0x0000
    42a4:	000043d8 	.word	0x000043d8
    42a8:	20000dac 	.word	0x20000dac
    42ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    42b0:	4690      	mov	r8, r2
    42b2:	460d      	mov	r5, r1
    42b4:	4607      	mov	r7, r0
    42b6:	f008 fd8b 	bl	cdd0 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    42ba:	b148      	cbz	r0, 42d0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x88>
    42bc:	4816      	ldr	r0, [pc, #88]	; (4318 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd0>)
    42be:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    42c2:	68f0      	ldr	r0, [r6, #12]
    42c4:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
    42c8:	b128      	cbz	r0, 42d6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x8e>
    42ca:	f240 1109 	movw	r1, #265	; 0x109
    42ce:	e015      	b.n	42fc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    42d0:	f44f 7184 	mov.w	r1, #264	; 0x108
    42d4:	e012      	b.n	42fc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    42d6:	6870      	ldr	r0, [r6, #4]
    42d8:	2800      	cmp	r0, #0
    42da:	d01a      	beq.n	4312 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xca>
    42dc:	4628      	mov	r0, r5
    42de:	f000 f861 	bl	43a4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    42e2:	4601      	mov	r1, r0
    42e4:	6870      	ldr	r0, [r6, #4]
    42e6:	f008 fce1 	bl	ccac <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    42ea:	0004      	movs	r4, r0
    42ec:	d010      	beq.n	4310 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc8>
    42ee:	68f0      	ldr	r0, [r6, #12]
    42f0:	2d02      	cmp	r5, #2
    42f2:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
    42f6:	d304      	bcc.n	4302 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xba>
    42f8:	f44f 718a 	mov.w	r1, #276	; 0x114
    42fc:	2017      	movs	r0, #23
    42fe:	f7ff fd01 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4302:	4806      	ldr	r0, [pc, #24]	; (431c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd4>)
    4304:	4642      	mov	r2, r8
    4306:	4621      	mov	r1, r4
    4308:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
    430c:	4638      	mov	r0, r7
    430e:	4798      	blx	r3
    4310:	4620      	mov	r0, r4
    4312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4316:	0000      	.short	0x0000
    4318:	20000dac 	.word	0x20000dac
    431c:	000043d0 	.word	0x000043d0
    4320:	b570      	push	{r4, r5, r6, lr}
    4322:	460c      	mov	r4, r1
    4324:	4605      	mov	r5, r0
    4326:	f008 fd53 	bl	cdd0 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    432a:	2800      	cmp	r0, #0
    432c:	d005      	beq.n	433a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf2>
    432e:	4803      	ldr	r0, [pc, #12]	; (433c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf4>)
    4330:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    4334:	68c0      	ldr	r0, [r0, #12]
    4336:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    433a:	bd70      	pop	{r4, r5, r6, pc}
    433c:	20000dac 	.word	0x20000dac
    4340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4344:	4e16      	ldr	r6, [pc, #88]	; (43a0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x158>)
    4346:	4688      	mov	r8, r1
    4348:	4605      	mov	r5, r0
    434a:	2400      	movs	r4, #0
    434c:	6828      	ldr	r0, [r5, #0]
    434e:	1cc0      	adds	r0, r0, #3
    4350:	f020 0003 	bic.w	r0, r0, #3
    4354:	6028      	str	r0, [r5, #0]
    4356:	4620      	mov	r0, r4
    4358:	f000 f824 	bl	43a4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    435c:	5d31      	ldrb	r1, [r6, r4]
    435e:	4348      	muls	r0, r1
    4360:	f1b8 0f00 	cmp.w	r8, #0
    4364:	d001      	beq.n	436a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x122>
    4366:	2200      	movs	r2, #0
    4368:	e000      	b.n	436c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x124>
    436a:	682a      	ldr	r2, [r5, #0]
    436c:	4601      	mov	r1, r0
    436e:	9200      	str	r2, [sp, #0]
    4370:	b132      	cbz	r2, 4380 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    4372:	2700      	movs	r7, #0
    4374:	ea4f 000d 	mov.w	r0, sp
    4378:	f008 fcc5 	bl	cd06 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    437c:	b11f      	cbz	r7, 4386 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x13e>
    437e:	e006      	b.n	438e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x146>
    4380:	2701      	movs	r7, #1
    4382:	2000      	movs	r0, #0
    4384:	e7f8      	b.n	4378 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x130>
    4386:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    438a:	9a00      	ldr	r2, [sp, #0]
    438c:	604a      	str	r2, [r1, #4]
    438e:	6829      	ldr	r1, [r5, #0]
    4390:	1c64      	adds	r4, r4, #1
    4392:	4408      	add	r0, r1
    4394:	b2e4      	uxtb	r4, r4
    4396:	6028      	str	r0, [r5, #0]
    4398:	2c02      	cmp	r4, #2
    439a:	d3d7      	bcc.n	434c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x104>
    439c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    43a0:	20000dac 	.word	0x20000dac
    43a4:	4903      	ldr	r1, [pc, #12]	; (43b4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x16c>)
    43a6:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    43aa:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    43ae:	1cc0      	adds	r0, r0, #3
    43b0:	4008      	ands	r0, r1
    43b2:	4770      	bx	lr
    43b4:	000043cc 	.word	0x000043cc
    43b8:	4803      	ldr	r0, [pc, #12]	; (43c8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x180>)
    43ba:	7801      	ldrb	r1, [r0, #0]
    43bc:	7840      	ldrb	r0, [r0, #1]
    43be:	4281      	cmp	r1, r0
    43c0:	d300      	bcc.n	43c4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x17c>
    43c2:	4608      	mov	r0, r1
    43c4:	4770      	bx	lr
    43c6:	0000      	.short	0x0000
    43c8:	20000dac 	.word	0x20000dac
    43cc:	00e80210 	.word	0x00e80210
    43d0:	0000cde5 	.word	0x0000cde5
    43d4:	0000cde5 	.word	0x0000cde5
    43d8:	0000e5c1 	.word	0x0000e5c1
    43dc:	0000db63 	.word	0x0000db63

000043e0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    43e0:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    43e4:	4c26      	ldr	r4, [pc, #152]	; (4480 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0xa0>)
    43e6:	4680      	mov	r8, r0
    43e8:	b081      	sub	sp, #4
    43ea:	6820      	ldr	r0, [r4, #0]
    43ec:	469a      	mov	sl, r3
    43ee:	4693      	mov	fp, r2
    43f0:	b158      	cbz	r0, 440a <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    43f2:	7a02      	ldrb	r2, [r0, #8]
    43f4:	4542      	cmp	r2, r8
    43f6:	d903      	bls.n	4400 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    43f8:	6841      	ldr	r1, [r0, #4]
    43fa:	f851 0028 	ldr.w	r0, [r1, r8, lsl #2]
    43fe:	b140      	cbz	r0, 4412 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    4400:	f243 0002 	movw	r0, #12290	; 0x3002
    4404:	b005      	add	sp, #20
    4406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    440a:	21a5      	movs	r1, #165	; 0xa5
    440c:	2018      	movs	r0, #24
    440e:	f7ff fc79 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4412:	4619      	mov	r1, r3
    4414:	9802      	ldr	r0, [sp, #8]
    4416:	f008 fcfd 	bl	ce14 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    441a:	b286      	uxth	r6, r0
    441c:	4658      	mov	r0, fp
    441e:	990e      	ldr	r1, [sp, #56]	; 0x38
    4420:	f008 fcef 	bl	ce02 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    4424:	b285      	uxth	r5, r0
    4426:	1970      	adds	r0, r6, r5
    4428:	1d00      	adds	r0, r0, #4
    442a:	b287      	uxth	r7, r0
    442c:	6820      	ldr	r0, [r4, #0]
    442e:	46a1      	mov	r9, r4
    4430:	4639      	mov	r1, r7
    4432:	6800      	ldr	r0, [r0, #0]
    4434:	f008 fc3a 	bl	ccac <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    4438:	0004      	movs	r4, r0
    443a:	d01f      	beq.n	447c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x9c>
    443c:	8067      	strh	r7, [r4, #2]
    443e:	8025      	strh	r5, [r4, #0]
    4440:	4629      	mov	r1, r5
    4442:	1d20      	adds	r0, r4, #4
    4444:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    4446:	4607      	mov	r7, r0
    4448:	465a      	mov	r2, fp
    444a:	2301      	movs	r3, #1
    444c:	9500      	str	r5, [sp, #0]
    444e:	f008 fb8c 	bl	cb6a <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    4452:	8820      	ldrh	r0, [r4, #0]
    4454:	4631      	mov	r1, r6
    4456:	4438      	add	r0, r7
    4458:	2301      	movs	r3, #1
    445a:	9a02      	ldr	r2, [sp, #8]
    445c:	f8cd a000 	str.w	sl, [sp]
    4460:	f008 fb83 	bl	cb6a <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    4464:	8820      	ldrh	r0, [r4, #0]
    4466:	19c1      	adds	r1, r0, r7
    4468:	4638      	mov	r0, r7
    446a:	f008 fbaf 	bl	cbcc <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>
    446e:	f8d9 0000 	ldr.w	r0, [r9]
    4472:	6841      	ldr	r1, [r0, #4]
    4474:	2000      	movs	r0, #0
    4476:	f841 4028 	str.w	r4, [r1, r8, lsl #2]
    447a:	e7c3      	b.n	4404 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    447c:	2004      	movs	r0, #4
    447e:	e7c1      	b.n	4404 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    4480:	20000090 	.word	0x20000090

00004484 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    4484:	b570      	push	{r4, r5, r6, lr}
    4486:	4c14      	ldr	r4, [pc, #80]	; (44d8 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    4488:	6823      	ldr	r3, [r4, #0]
    448a:	b18b      	cbz	r3, 44b0 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    448c:	7a19      	ldrb	r1, [r3, #8]
    448e:	4281      	cmp	r1, r0
    4490:	d912      	bls.n	44b8 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    4492:	685a      	ldr	r2, [r3, #4]
    4494:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    4498:	b171      	cbz	r1, 44b8 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    449a:	2500      	movs	r5, #0
    449c:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    44a0:	884a      	ldrh	r2, [r1, #2]
    44a2:	6818      	ldr	r0, [r3, #0]
    44a4:	f008 fc50 	bl	cd48 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    44a8:	6821      	ldr	r1, [r4, #0]
    44aa:	2000      	movs	r0, #0
    44ac:	7a0a      	ldrb	r2, [r1, #8]
    44ae:	e00c      	b.n	44ca <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    44b0:	21c8      	movs	r1, #200	; 0xc8
    44b2:	2018      	movs	r0, #24
    44b4:	f7ff fc26 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    44b8:	f243 0002 	movw	r0, #12290	; 0x3002
    44bc:	bd70      	pop	{r4, r5, r6, pc}
    44be:	684b      	ldr	r3, [r1, #4]
    44c0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    44c4:	b933      	cbnz	r3, 44d4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    44c6:	1c40      	adds	r0, r0, #1
    44c8:	b2c0      	uxtb	r0, r0
    44ca:	4282      	cmp	r2, r0
    44cc:	d8f7      	bhi.n	44be <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    44ce:	6808      	ldr	r0, [r1, #0]
    44d0:	f008 fc2f 	bl	cd32 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    44d4:	2000      	movs	r0, #0
    44d6:	bd70      	pop	{r4, r5, r6, pc}
    44d8:	20000090 	.word	0x20000090

000044dc <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    44dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    44e0:	460d      	mov	r5, r1
    44e2:	0004      	movs	r4, r0
    44e4:	4690      	mov	r8, r2
    44e6:	f04f 0600 	mov.w	r6, #0
    44ea:	d009      	beq.n	4500 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x24>
    44ec:	2700      	movs	r7, #0
    44ee:	1ce0      	adds	r0, r4, #3
    44f0:	f020 0003 	bic.w	r0, r0, #3
    44f4:	42a0      	cmp	r0, r4
    44f6:	d005      	beq.n	4504 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x28>
    44f8:	2186      	movs	r1, #134	; 0x86
    44fa:	2018      	movs	r0, #24
    44fc:	f7ff fc02 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4500:	2701      	movs	r7, #1
    4502:	e7f4      	b.n	44ee <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    4504:	b1cd      	cbz	r5, 453a <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    4506:	4611      	mov	r1, r2
    4508:	2000      	movs	r0, #0
    450a:	f008 fbfc 	bl	cd06 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    450e:	300c      	adds	r0, #12
    4510:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    4514:	b98f      	cbnz	r7, 453a <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    4516:	4f0a      	ldr	r7, [pc, #40]	; (4540 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x64>)
    4518:	f104 000c 	add.w	r0, r4, #12
    451c:	00aa      	lsls	r2, r5, #2
    451e:	603c      	str	r4, [r7, #0]
    4520:	7225      	strb	r5, [r4, #8]
    4522:	6060      	str	r0, [r4, #4]
    4524:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    4528:	6020      	str	r0, [r4, #0]
    452a:	2100      	movs	r1, #0
    452c:	6860      	ldr	r0, [r4, #4]
    452e:	f007 fc99 	bl	be64 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    4532:	4641      	mov	r1, r8
    4534:	6838      	ldr	r0, [r7, #0]
    4536:	f008 fbe6 	bl	cd06 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    453a:	4630      	mov	r0, r6
    453c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4540:	20000090 	.word	0x20000090

00004544 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    4544:	b570      	push	{r4, r5, r6, lr}
    4546:	4d08      	ldr	r5, [pc, #32]	; (4568 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    4548:	6828      	ldr	r0, [r5, #0]
    454a:	2800      	cmp	r0, #0
    454c:	d00a      	beq.n	4564 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    454e:	2400      	movs	r4, #0
    4550:	e004      	b.n	455c <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    4552:	4620      	mov	r0, r4
    4554:	f7ff ff96 	bl	4484 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    4558:	1c64      	adds	r4, r4, #1
    455a:	b2e4      	uxtb	r4, r4
    455c:	6828      	ldr	r0, [r5, #0]
    455e:	7a00      	ldrb	r0, [r0, #8]
    4560:	42a0      	cmp	r0, r4
    4562:	d8f6      	bhi.n	4552 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    4564:	bd70      	pop	{r4, r5, r6, pc}
    4566:	0000      	.short	0x0000
    4568:	20000090 	.word	0x20000090

0000456c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    456c:	4909      	ldr	r1, [pc, #36]	; (4594 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    456e:	b510      	push	{r4, lr}
    4570:	4602      	mov	r2, r0
    4572:	6809      	ldr	r1, [r1, #0]
    4574:	2000      	movs	r0, #0
    4576:	b149      	cbz	r1, 458c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    4578:	7a0b      	ldrb	r3, [r1, #8]
    457a:	4293      	cmp	r3, r2
    457c:	d905      	bls.n	458a <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    457e:	6849      	ldr	r1, [r1, #4]
    4580:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    4584:	2900      	cmp	r1, #0
    4586:	d000      	beq.n	458a <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    4588:	1d08      	adds	r0, r1, #4
    458a:	bd10      	pop	{r4, pc}
    458c:	21ee      	movs	r1, #238	; 0xee
    458e:	2018      	movs	r0, #24
    4590:	f7ff fbb8 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4594:	20000090 	.word	0x20000090

00004598 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    4598:	490a      	ldr	r1, [pc, #40]	; (45c4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    459a:	b510      	push	{r4, lr}
    459c:	4602      	mov	r2, r0
    459e:	6809      	ldr	r1, [r1, #0]
    45a0:	2000      	movs	r0, #0
    45a2:	b159      	cbz	r1, 45bc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    45a4:	7a0b      	ldrb	r3, [r1, #8]
    45a6:	4293      	cmp	r3, r2
    45a8:	d907      	bls.n	45ba <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    45aa:	6849      	ldr	r1, [r1, #4]
    45ac:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    45b0:	2900      	cmp	r1, #0
    45b2:	d002      	beq.n	45ba <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    45b4:	f831 0b04 	ldrh.w	r0, [r1], #4
    45b8:	4408      	add	r0, r1
    45ba:	bd10      	pop	{r4, pc}
    45bc:	21fc      	movs	r1, #252	; 0xfc
    45be:	2018      	movs	r0, #24
    45c0:	f7ff fba0 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    45c4:	20000090 	.word	0x20000090

000045c8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>:
    45c8:	b570      	push	{r4, r5, r6, lr}
    45ca:	4606      	mov	r6, r0
    45cc:	4809      	ldr	r0, [pc, #36]	; (45f4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x2c>)
    45ce:	460d      	mov	r5, r1
    45d0:	8800      	ldrh	r0, [r0, #0]
    45d2:	b10a      	cbz	r2, 45d8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x10>
    45d4:	0844      	lsrs	r4, r0, #1
    45d6:	e000      	b.n	45da <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x12>
    45d8:	0884      	lsrs	r4, r0, #2
    45da:	4621      	mov	r1, r4
    45dc:	6828      	ldr	r0, [r5, #0]
    45de:	f008 fb65 	bl	ccac <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    45e2:	2100      	movs	r1, #0
    45e4:	792a      	ldrb	r2, [r5, #4]
    45e6:	f364 411f 	bfi	r1, r4, #16, #16
    45ea:	1c52      	adds	r2, r2, #1
    45ec:	712a      	strb	r2, [r5, #4]
    45ee:	e9c6 0100 	strd	r0, r1, [r6]
    45f2:	bd70      	pop	{r4, r5, r6, pc}
    45f4:	20000094 	.word	0x20000094

000045f8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>:
    45f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    45fc:	4688      	mov	r8, r1
    45fe:	0005      	movs	r5, r0
    4600:	d00a      	beq.n	4618 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x20>
    4602:	2700      	movs	r7, #0
    4604:	1ce9      	adds	r1, r5, #3
    4606:	2000      	movs	r0, #0
    4608:	f021 0103 	bic.w	r1, r1, #3
    460c:	42a9      	cmp	r1, r5
    460e:	d005      	beq.n	461c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x24>
    4610:	212e      	movs	r1, #46	; 0x2e
    4612:	2009      	movs	r0, #9
    4614:	f7ff fb76 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4618:	2701      	movs	r7, #1
    461a:	e7f3      	b.n	4604 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0xc>
    461c:	491d      	ldr	r1, [pc, #116]	; (4694 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x9c>)
    461e:	eb00 06c8 	add.w	r6, r0, r8, lsl #3
    4622:	b907      	cbnz	r7, 4626 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x2e>
    4624:	604d      	str	r5, [r1, #4]
    4626:	2a1f      	cmp	r2, #31
    4628:	d804      	bhi.n	4634 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x3c>
    462a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    462e:	ea00 0082 	and.w	r0, r0, r2, lsl #2
    4632:	e007      	b.n	4644 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x4c>
    4634:	207c      	movs	r0, #124	; 0x7c
    4636:	ebb0 0f42 	cmp.w	r0, r2, lsl #1
    463a:	d201      	bcs.n	4640 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
    463c:	0050      	lsls	r0, r2, #1
    463e:	e000      	b.n	4642 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x4a>
    4640:	207c      	movs	r0, #124	; 0x7c
    4642:	b280      	uxth	r0, r0
    4644:	f64f 72fc 	movw	r2, #65532	; 0xfffc
    4648:	1cc0      	adds	r0, r0, #3
    464a:	4010      	ands	r0, r2
    464c:	2400      	movs	r4, #0
    464e:	8008      	strh	r0, [r1, #0]
    4650:	46a2      	mov	sl, r4
    4652:	4689      	mov	r9, r1
    4654:	e016      	b.n	4684 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8c>
    4656:	19a8      	adds	r0, r5, r6
    4658:	9000      	str	r0, [sp, #0]
    465a:	b10f      	cbz	r7, 4660 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x68>
    465c:	2000      	movs	r0, #0
    465e:	e000      	b.n	4662 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x6a>
    4660:	4668      	mov	r0, sp
    4662:	f8b9 1000 	ldrh.w	r1, [r9]
    4666:	f008 fb4e 	bl	cd06 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    466a:	b947      	cbnz	r7, 467e <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x86>
    466c:	f8d9 1004 	ldr.w	r1, [r9, #4]
    4670:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
    4674:	f883 a004 	strb.w	sl, [r3, #4]
    4678:	9a00      	ldr	r2, [sp, #0]
    467a:	f841 2034 	str.w	r2, [r1, r4, lsl #3]
    467e:	1c64      	adds	r4, r4, #1
    4680:	4406      	add	r6, r0
    4682:	b2e4      	uxtb	r4, r4
    4684:	4544      	cmp	r4, r8
    4686:	d3e6      	bcc.n	4656 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x5e>
    4688:	1df6      	adds	r6, r6, #7
    468a:	f026 0007 	bic.w	r0, r6, #7
    468e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4692:	0000      	.short	0x0000
    4694:	20000094 	.word	0x20000094

00004698 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>:
    4698:	4906      	ldr	r1, [pc, #24]	; (46b4 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x1c>)
    469a:	b510      	push	{r4, lr}
    469c:	684a      	ldr	r2, [r1, #4]
    469e:	eb02 04c0 	add.w	r4, r2, r0, lsl #3
    46a2:	2000      	movs	r0, #0
    46a4:	7120      	strb	r0, [r4, #4]
    46a6:	8809      	ldrh	r1, [r1, #0]
    46a8:	4620      	mov	r0, r4
    46aa:	f008 fb2c 	bl	cd06 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    46ae:	4620      	mov	r0, r4
    46b0:	bd10      	pop	{r4, pc}
    46b2:	0000      	.short	0x0000
    46b4:	20000094 	.word	0x20000094
    46b8:	4909      	ldr	r1, [pc, #36]	; (46e0 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x48>)
    46ba:	b510      	push	{r4, lr}
    46bc:	4807      	ldr	r0, [pc, #28]	; (46dc <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x44>)
    46be:	6008      	str	r0, [r1, #0]
    46c0:	4b08      	ldr	r3, [pc, #32]	; (46e4 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x4c>)
    46c2:	2011      	movs	r0, #17
    46c4:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
    46c8:	2200      	movs	r2, #0
    46ca:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    46ce:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    46d2:	1c40      	adds	r0, r0, #1
    46d4:	b2c0      	uxtb	r0, r0
    46d6:	2814      	cmp	r0, #20
    46d8:	d3f4      	bcc.n	46c4 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x2c>
    46da:	bd10      	pop	{r4, pc}
    46dc:	fffe0000 	.word	0xfffe0000
    46e0:	4001f508 	.word	0x4001f508
    46e4:	4001f000 	.word	0x4001f000
    46e8:	b570      	push	{r4, r5, r6, lr}
    46ea:	2420      	movs	r4, #32
    46ec:	2100      	movs	r1, #0
    46ee:	2301      	movs	r3, #1
    46f0:	fa20 f201 	lsr.w	r2, r0, r1
    46f4:	07d2      	lsls	r2, r2, #31
    46f6:	d020      	beq.n	473a <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xa2>
    46f8:	b24a      	sxtb	r2, r1
    46fa:	2a00      	cmp	r2, #0
    46fc:	db10      	blt.n	4720 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x88>
    46fe:	bf00      	nop
    4700:	ea4f 1652 	mov.w	r6, r2, lsr #5
    4704:	ea4f 0686 	mov.w	r6, r6, lsl #2
    4708:	f002 051f 	and.w	r5, r2, #31
    470c:	f106 26e0 	add.w	r6, r6, #3758153728	; 0xe000e000
    4710:	fa03 f505 	lsl.w	r5, r3, r5
    4714:	f8c6 5180 	str.w	r5, [r6, #384]	; 0x180
    4718:	f3bf 8f4f 	dsb	sy
    471c:	f3bf 8f6f 	isb	sy
    4720:	db0b      	blt.n	473a <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xa2>
    4722:	f002 051f 	and.w	r5, r2, #31
    4726:	ea4f 1252 	mov.w	r2, r2, lsr #5
    472a:	ea4f 0282 	mov.w	r2, r2, lsl #2
    472e:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    4732:	fa03 f505 	lsl.w	r5, r3, r5
    4736:	f8c2 5280 	str.w	r5, [r2, #640]	; 0x280
    473a:	f101 0101 	add.w	r1, r1, #1
    473e:	42a1      	cmp	r1, r4
    4740:	d3d6      	bcc.n	46f0 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x58>
    4742:	bd70      	pop	{r4, r5, r6, pc}
    4744:	b570      	push	{r4, r5, r6, lr}
    4746:	0042      	lsls	r2, r0, #1
    4748:	f04f 0100 	mov.w	r1, #0
    474c:	d501      	bpl.n	4752 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xba>
    474e:	4a14      	ldr	r2, [pc, #80]	; (47a0 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x108>)
    4750:	6011      	str	r1, [r2, #0]
    4752:	f3c0 3280 	ubfx	r2, r0, #14, #1
    4756:	f3c0 33c0 	ubfx	r3, r0, #15, #1
    475a:	429a      	cmp	r2, r3
    475c:	d003      	beq.n	4766 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xce>
    475e:	2164      	movs	r1, #100	; 0x64
    4760:	201b      	movs	r0, #27
    4762:	f7ff facf 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4766:	f410 4f40 	tst.w	r0, #49152	; 0xc000
    476a:	d014      	beq.n	4796 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xfe>
    476c:	4a0d      	ldr	r2, [pc, #52]	; (47a4 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x10c>)
    476e:	2001      	movs	r0, #1
    4770:	6050      	str	r0, [r2, #4]
    4772:	1e83      	subs	r3, r0, #2
    4774:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    4778:	4a0b      	ldr	r2, [pc, #44]	; (47a8 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x110>)
    477a:	6090      	str	r0, [r2, #8]
    477c:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    4780:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    4784:	4c09      	ldr	r4, [pc, #36]	; (47ac <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x114>)
    4786:	6021      	str	r1, [r4, #0]
    4788:	1d25      	adds	r5, r4, #4
    478a:	6028      	str	r0, [r5, #0]
    478c:	6090      	str	r0, [r2, #8]
    478e:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    4792:	6021      	str	r1, [r4, #0]
    4794:	6028      	str	r0, [r5, #0]
    4796:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    479a:	f7ff bf8d 	b.w	46b8 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x20>
    479e:	0000      	.short	0x0000
    47a0:	4001e504 	.word	0x4001e504
    47a4:	4000e000 	.word	0x4000e000
    47a8:	4000f000 	.word	0x4000f000
    47ac:	4000f500 	.word	0x4000f500

000047b0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    47b0:	b570      	push	{r4, r5, r6, lr}
    47b2:	4c0a      	ldr	r4, [pc, #40]	; (47dc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x2c>)
    47b4:	460d      	mov	r5, r1
    47b6:	6020      	str	r0, [r4, #0]
    47b8:	f7ff ffc4 	bl	4744 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xac>
    47bc:	6820      	ldr	r0, [r4, #0]
    47be:	f7ff ff93 	bl	46e8 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x50>
    47c2:	f000 f877 	bl	48b4 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    47c6:	f7ff ff77 	bl	46b8 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x20>
    47ca:	f008 fb4f 	bl	ce6c <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>
    47ce:	4628      	mov	r0, r5
    47d0:	f000 f8aa 	bl	4928 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    47d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    47d8:	f000 b8c2 	b.w	4960 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    47dc:	2000009c 	.word	0x2000009c

000047e0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    47e0:	e92d 5ffc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    47e4:	4e2f      	ldr	r6, [pc, #188]	; (48a4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc4>)
    47e6:	4683      	mov	fp, r0
    47e8:	6830      	ldr	r0, [r6, #0]
    47ea:	9001      	str	r0, [sp, #4]
    47ec:	2701      	movs	r7, #1
    47ee:	482e      	ldr	r0, [pc, #184]	; (48a8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>)
    47f0:	f007 fa15 	bl	bc1e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    47f4:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 48a8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>
    47f8:	b920      	cbnz	r0, 4804 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x24>
    47fa:	2700      	movs	r7, #0
    47fc:	f108 0001 	add.w	r0, r8, #1
    4800:	f007 fa24 	bl	bc4c <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    4804:	4c29      	ldr	r4, [pc, #164]	; (48ac <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xcc>)
    4806:	2500      	movs	r5, #0
    4808:	f04f 0903 	mov.w	r9, #3
    480c:	2001      	movs	r0, #1
    480e:	6060      	str	r0, [r4, #4]
    4810:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    4814:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    4818:	f8c6 b000 	str.w	fp, [r6]
    481c:	6020      	str	r0, [r4, #0]
    481e:	f8df a090 	ldr.w	sl, [pc, #144]	; 48b0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xd0>
    4822:	e017      	b.n	4854 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    4824:	f8da 0000 	ldr.w	r0, [sl]
    4828:	06c0      	lsls	r0, r0, #27
    482a:	d513      	bpl.n	4854 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    482c:	200e      	movs	r0, #14
    482e:	f008 fb0e 	bl	ce4e <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA+0x28>
    4832:	f3ef 8010 	mrs	r0, PRIMASK
    4836:	9000      	str	r0, [sp, #0]
    4838:	b672      	cpsid	i
    483a:	f8c4 9304 	str.w	r9, [r4, #772]	; 0x304
    483e:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    4842:	b920      	cbnz	r0, 484e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x6e>
    4844:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    4848:	b908      	cbnz	r0, 484e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x6e>
    484a:	f7ff f8eb 	bl	3a24 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    484e:	9800      	ldr	r0, [sp, #0]
    4850:	b900      	cbnz	r0, 4854 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    4852:	b662      	cpsie	i
    4854:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    4858:	b918      	cbnz	r0, 4862 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    485a:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    485e:	2800      	cmp	r0, #0
    4860:	d0e0      	beq.n	4824 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x44>
    4862:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    4866:	2800      	cmp	r0, #0
    4868:	d1d0      	bne.n	480c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x2c>
    486a:	b137      	cbz	r7, 487a <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x9a>
    486c:	9801      	ldr	r0, [sp, #4]
    486e:	6030      	str	r0, [r6, #0]
    4870:	f108 0001 	add.w	r0, r8, #1
    4874:	f007 f9d3 	bl	bc1e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4878:	e011      	b.n	489e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xbe>
    487a:	f108 0001 	add.w	r0, r8, #1
    487e:	f007 f9ce 	bl	bc1e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4882:	2800      	cmp	r0, #0
    4884:	d1ba      	bne.n	47fc <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x1c>
    4886:	f8c4 9308 	str.w	r9, [r4, #776]	; 0x308
    488a:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    488e:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    4892:	200e      	movs	r0, #14
    4894:	f008 fadb 	bl	ce4e <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA+0x28>
    4898:	4803      	ldr	r0, [pc, #12]	; (48a8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>)
    489a:	f007 f9d7 	bl	bc4c <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    489e:	2000      	movs	r0, #0
    48a0:	e8bd 9ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    48a4:	4000e504 	.word	0x4000e504
    48a8:	2000029f 	.word	0x2000029f
    48ac:	4000e000 	.word	0x4000e000
    48b0:	e000ed10 	.word	0xe000ed10

000048b4 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    48b4:	b510      	push	{r4, lr}
    48b6:	4808      	ldr	r0, [pc, #32]	; (48d8 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    48b8:	f007 f9c4 	bl	bc44 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    48bc:	b108      	cbz	r0, 48c2 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0xe>
    48be:	2124      	movs	r1, #36	; 0x24
    48c0:	e006      	b.n	48d0 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>
    48c2:	4805      	ldr	r0, [pc, #20]	; (48d8 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    48c4:	1c40      	adds	r0, r0, #1
    48c6:	f007 f9bd 	bl	bc44 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    48ca:	2800      	cmp	r0, #0
    48cc:	d003      	beq.n	48d6 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x22>
    48ce:	2128      	movs	r1, #40	; 0x28
    48d0:	201d      	movs	r0, #29
    48d2:	f7ff fa17 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    48d6:	bd10      	pop	{r4, pc}
    48d8:	2000029f 	.word	0x2000029f

000048dc <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    48dc:	b570      	push	{r4, r5, r6, lr}
    48de:	4911      	ldr	r1, [pc, #68]	; (4924 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    48e0:	680a      	ldr	r2, [r1, #0]
    48e2:	b1ea      	cbz	r2, 4920 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    48e4:	2300      	movs	r3, #0
    48e6:	461d      	mov	r5, r3
    48e8:	2401      	movs	r4, #1
    48ea:	684a      	ldr	r2, [r1, #4]
    48ec:	1c52      	adds	r2, r2, #1
    48ee:	604a      	str	r2, [r1, #4]
    48f0:	2a09      	cmp	r2, #9
    48f2:	d300      	bcc.n	48f6 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    48f4:	604d      	str	r5, [r1, #4]
    48f6:	790e      	ldrb	r6, [r1, #4]
    48f8:	fa04 f206 	lsl.w	r2, r4, r6
    48fc:	680e      	ldr	r6, [r1, #0]
    48fe:	4216      	tst	r6, r2
    4900:	d00b      	beq.n	491a <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    4902:	f3ef 8310 	mrs	r3, PRIMASK
    4906:	b672      	cpsid	i
    4908:	680c      	ldr	r4, [r1, #0]
    490a:	4394      	bics	r4, r2
    490c:	600c      	str	r4, [r1, #0]
    490e:	b903      	cbnz	r3, 4912 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    4910:	b662      	cpsie	i
    4912:	6849      	ldr	r1, [r1, #4]
    4914:	6001      	str	r1, [r0, #0]
    4916:	2000      	movs	r0, #0
    4918:	bd70      	pop	{r4, r5, r6, pc}
    491a:	1c5b      	adds	r3, r3, #1
    491c:	2b09      	cmp	r3, #9
    491e:	d3e4      	bcc.n	48ea <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    4920:	2005      	movs	r0, #5
    4922:	bd70      	pop	{r4, r5, r6, pc}
    4924:	200000a0 	.word	0x200000a0

00004928 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    4928:	4802      	ldr	r0, [pc, #8]	; (4934 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    492a:	2100      	movs	r1, #0
    492c:	6001      	str	r1, [r0, #0]
    492e:	6041      	str	r1, [r0, #4]
    4930:	4770      	bx	lr
    4932:	0000      	.short	0x0000
    4934:	200000a0 	.word	0x200000a0

00004938 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    4938:	b510      	push	{r4, lr}
    493a:	4c08      	ldr	r4, [pc, #32]	; (495c <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    493c:	7861      	ldrb	r1, [r4, #1]
    493e:	b109      	cbz	r1, 4944 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    4940:	200f      	movs	r0, #15
    4942:	bd10      	pop	{r4, pc}
    4944:	f7fe fffa 	bl	393c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    4948:	7020      	strb	r0, [r4, #0]
    494a:	28ff      	cmp	r0, #255	; 0xff
    494c:	d001      	beq.n	4952 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    494e:	2000      	movs	r0, #0
    4950:	bd10      	pop	{r4, pc}
    4952:	2176      	movs	r1, #118	; 0x76
    4954:	201f      	movs	r0, #31
    4956:	f7ff f9d5 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    495a:	0000      	.short	0x0000
    495c:	200000a8 	.word	0x200000a8

00004960 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    4960:	4901      	ldr	r1, [pc, #4]	; (4968 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    4962:	2000      	movs	r0, #0
    4964:	7048      	strb	r0, [r1, #1]
    4966:	4770      	bx	lr
    4968:	200000a8 	.word	0x200000a8

0000496c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    496c:	4806      	ldr	r0, [pc, #24]	; (4988 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    496e:	4a07      	ldr	r2, [pc, #28]	; (498c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    4970:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    4972:	8852      	ldrh	r2, [r2, #2]
    4974:	4291      	cmp	r1, r2
    4976:	d104      	bne.n	4982 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    4978:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    497c:	b108      	cbz	r0, 4982 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    497e:	2000      	movs	r0, #0
    4980:	4770      	bx	lr
    4982:	2001      	movs	r0, #1
    4984:	4770      	bx	lr
    4986:	0000      	.short	0x0000
    4988:	20000f82 	.word	0x20000f82
    498c:	2000028c 	.word	0x2000028c

00004990 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    4990:	4901      	ldr	r1, [pc, #4]	; (4998 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    4992:	8048      	strh	r0, [r1, #2]
    4994:	4770      	bx	lr
    4996:	0000      	.short	0x0000
    4998:	2000028c 	.word	0x2000028c

0000499c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    499c:	4808      	ldr	r0, [pc, #32]	; (49c0 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    499e:	4a09      	ldr	r2, [pc, #36]	; (49c4 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    49a0:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    49a2:	8852      	ldrh	r2, [r2, #2]
    49a4:	4291      	cmp	r1, r2
    49a6:	d109      	bne.n	49bc <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    49a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    49ac:	8481      	strh	r1, [r0, #36]	; 0x24
    49ae:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    49b2:	b119      	cbz	r1, 49bc <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    49b4:	2100      	movs	r1, #0
    49b6:	7001      	strb	r1, [r0, #0]
    49b8:	2001      	movs	r0, #1
    49ba:	4770      	bx	lr
    49bc:	2000      	movs	r0, #0
    49be:	4770      	bx	lr
    49c0:	20000f82 	.word	0x20000f82
    49c4:	2000028c 	.word	0x2000028c

000049c8 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    49c8:	4807      	ldr	r0, [pc, #28]	; (49e8 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    49ca:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    49ce:	2901      	cmp	r1, #1
    49d0:	d007      	beq.n	49e2 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    49d2:	2101      	movs	r1, #1
    49d4:	7001      	strb	r1, [r0, #0]
    49d6:	4805      	ldr	r0, [pc, #20]	; (49ec <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    49d8:	4903      	ldr	r1, [pc, #12]	; (49e8 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    49da:	8800      	ldrh	r0, [r0, #0]
    49dc:	8488      	strh	r0, [r1, #36]	; 0x24
    49de:	2001      	movs	r0, #1
    49e0:	4770      	bx	lr
    49e2:	2000      	movs	r0, #0
    49e4:	4770      	bx	lr
    49e6:	0000      	.short	0x0000
    49e8:	20000f82 	.word	0x20000f82
    49ec:	2000028c 	.word	0x2000028c

000049f0 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    49f0:	4906      	ldr	r1, [pc, #24]	; (4a0c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    49f2:	4b07      	ldr	r3, [pc, #28]	; (4a10 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    49f4:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    49f6:	885b      	ldrh	r3, [r3, #2]
    49f8:	429a      	cmp	r2, r3
    49fa:	d105      	bne.n	4a08 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    49fc:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    4a00:	b112      	cbz	r2, 4a08 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    4a02:	6001      	str	r1, [r0, #0]
    4a04:	2001      	movs	r0, #1
    4a06:	4770      	bx	lr
    4a08:	2000      	movs	r0, #0
    4a0a:	4770      	bx	lr
    4a0c:	20000f82 	.word	0x20000f82
    4a10:	2000028c 	.word	0x2000028c

00004a14 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    4a14:	4909      	ldr	r1, [pc, #36]	; (4a3c <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    4a16:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    4a18:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    4a1c:	3bff      	subs	r3, #255	; 0xff
    4a1e:	d002      	beq.n	4a26 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    4a20:	2100      	movs	r1, #0
    4a22:	6001      	str	r1, [r0, #0]
    4a24:	e007      	b.n	4a36 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    4a26:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    4a2a:	4904      	ldr	r1, [pc, #16]	; (4a3c <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    4a2c:	2a01      	cmp	r2, #1
    4a2e:	d002      	beq.n	4a36 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    4a30:	6001      	str	r1, [r0, #0]
    4a32:	2001      	movs	r0, #1
    4a34:	4770      	bx	lr
    4a36:	2000      	movs	r0, #0
    4a38:	4770      	bx	lr
    4a3a:	0000      	.short	0x0000
    4a3c:	20000f82 	.word	0x20000f82

00004a40 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    4a40:	4901      	ldr	r1, [pc, #4]	; (4a48 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    4a42:	8008      	strh	r0, [r1, #0]
    4a44:	4770      	bx	lr
    4a46:	0000      	.short	0x0000
    4a48:	2000028c 	.word	0x2000028c

00004a4c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    4a4c:	4905      	ldr	r1, [pc, #20]	; (4a64 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    4a4e:	2000      	movs	r0, #0
    4a50:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    4a54:	f64f 70ff 	movw	r0, #65535	; 0xffff
    4a58:	8488      	strh	r0, [r1, #36]	; 0x24
    4a5a:	4903      	ldr	r1, [pc, #12]	; (4a68 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    4a5c:	8008      	strh	r0, [r1, #0]
    4a5e:	8048      	strh	r0, [r1, #2]
    4a60:	4770      	bx	lr
    4a62:	0000      	.short	0x0000
    4a64:	20000f82 	.word	0x20000f82
    4a68:	2000028c 	.word	0x2000028c
    4a6c:	4905      	ldr	r1, [pc, #20]	; (4a84 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    4a6e:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    4a70:	4282      	cmp	r2, r0
    4a72:	d105      	bne.n	4a80 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    4a74:	2000      	movs	r0, #0
    4a76:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    4a7a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    4a7e:	8488      	strh	r0, [r1, #36]	; 0x24
    4a80:	4770      	bx	lr
    4a82:	0000      	.short	0x0000
    4a84:	20000f82 	.word	0x20000f82

00004a88 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    4a88:	4a0a      	ldr	r2, [pc, #40]	; (4ab4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    4a8a:	b110      	cbz	r0, 4a92 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    4a8c:	2801      	cmp	r0, #1
    4a8e:	d007      	beq.n	4aa0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    4a90:	e00e      	b.n	4ab0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4a92:	7850      	ldrb	r0, [r2, #1]
    4a94:	b160      	cbz	r0, 4ab0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4a96:	f8d2 0002 	ldr.w	r0, [r2, #2]
    4a9a:	6008      	str	r0, [r1, #0]
    4a9c:	88d0      	ldrh	r0, [r2, #6]
    4a9e:	e004      	b.n	4aaa <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    4aa0:	7810      	ldrb	r0, [r2, #0]
    4aa2:	b128      	cbz	r0, 4ab0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4aa4:	6890      	ldr	r0, [r2, #8]
    4aa6:	6008      	str	r0, [r1, #0]
    4aa8:	8990      	ldrh	r0, [r2, #12]
    4aaa:	8088      	strh	r0, [r1, #4]
    4aac:	2001      	movs	r0, #1
    4aae:	4770      	bx	lr
    4ab0:	2000      	movs	r0, #0
    4ab2:	4770      	bx	lr
    4ab4:	200002a1 	.word	0x200002a1

00004ab8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    4ab8:	4a08      	ldr	r2, [pc, #32]	; (4adc <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    4aba:	2301      	movs	r3, #1
    4abc:	b138      	cbz	r0, 4ace <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    4abe:	2801      	cmp	r0, #1
    4ac0:	d104      	bne.n	4acc <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    4ac2:	7013      	strb	r3, [r2, #0]
    4ac4:	6808      	ldr	r0, [r1, #0]
    4ac6:	6090      	str	r0, [r2, #8]
    4ac8:	8888      	ldrh	r0, [r1, #4]
    4aca:	8190      	strh	r0, [r2, #12]
    4acc:	4770      	bx	lr
    4ace:	7053      	strb	r3, [r2, #1]
    4ad0:	6808      	ldr	r0, [r1, #0]
    4ad2:	f8c2 0002 	str.w	r0, [r2, #2]
    4ad6:	8888      	ldrh	r0, [r1, #4]
    4ad8:	80d0      	strh	r0, [r2, #6]
    4ada:	4770      	bx	lr
    4adc:	200002a1 	.word	0x200002a1

00004ae0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    4ae0:	4906      	ldr	r1, [pc, #24]	; (4afc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    4ae2:	b110      	cbz	r0, 4aea <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    4ae4:	2801      	cmp	r0, #1
    4ae6:	d002      	beq.n	4aee <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    4ae8:	e005      	b.n	4af6 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    4aea:	7848      	ldrb	r0, [r1, #1]
    4aec:	e000      	b.n	4af0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    4aee:	7808      	ldrb	r0, [r1, #0]
    4af0:	b108      	cbz	r0, 4af6 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    4af2:	2001      	movs	r0, #1
    4af4:	4770      	bx	lr
    4af6:	2000      	movs	r0, #0
    4af8:	4770      	bx	lr
    4afa:	0000      	.short	0x0000
    4afc:	200002a1 	.word	0x200002a1

00004b00 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    4b00:	4901      	ldr	r1, [pc, #4]	; (4b08 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    4b02:	7448      	strb	r0, [r1, #17]
    4b04:	4770      	bx	lr
    4b06:	0000      	.short	0x0000
    4b08:	200009b2 	.word	0x200009b2

00004b0c <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>:
    4b0c:	4801      	ldr	r0, [pc, #4]	; (4b14 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ+0x8>)
    4b0e:	78c0      	ldrb	r0, [r0, #3]
    4b10:	4770      	bx	lr
    4b12:	0000      	.short	0x0000
    4b14:	200000c4 	.word	0x200000c4

00004b18 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>:
    4b18:	4801      	ldr	r0, [pc, #4]	; (4b20 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY+0x8>)
    4b1a:	7900      	ldrb	r0, [r0, #4]
    4b1c:	4770      	bx	lr
    4b1e:	0000      	.short	0x0000
    4b20:	200000c4 	.word	0x200000c4

00004b24 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I>:
    4b24:	b578      	push	{r3, r4, r5, r6, lr}
    4b26:	4913      	ldr	r1, [pc, #76]	; (4b74 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x50>)
    4b28:	7c4a      	ldrb	r2, [r1, #17]
    4b2a:	b30a      	cbz	r2, 4b70 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
    4b2c:	7c0a      	ldrb	r2, [r1, #16]
    4b2e:	f88d 2000 	strb.w	r2, [sp]
    4b32:	9a00      	ldr	r2, [sp, #0]
    4b34:	9200      	str	r2, [sp, #0]
    4b36:	f89d 2000 	ldrb.w	r2, [sp]
    4b3a:	b1ca      	cbz	r2, 4b70 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
    4b3c:	2300      	movs	r3, #0
    4b3e:	f101 0210 	add.w	r2, r1, #16
    4b42:	241a      	movs	r4, #26
    4b44:	f1a1 0552 	sub.w	r5, r1, #82	; 0x52
    4b48:	7c0e      	ldrb	r6, [r1, #16]
    4b4a:	f88d 6000 	strb.w	r6, [sp]
    4b4e:	9e00      	ldr	r6, [sp, #0]
    4b50:	9600      	str	r6, [sp, #0]
    4b52:	f89d 6000 	ldrb.w	r6, [sp]
    4b56:	b14e      	cbz	r6, 4b6c <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x48>
    4b58:	7013      	strb	r3, [r2, #0]
    4b5a:	7043      	strb	r3, [r0, #1]
    4b5c:	7004      	strb	r4, [r0, #0]
    4b5e:	f8d5 605a 	ldr.w	r6, [r5, #90]	; 0x5a
    4b62:	6046      	str	r6, [r0, #4]
    4b64:	f8d5 605e 	ldr.w	r6, [r5, #94]	; 0x5e
    4b68:	6086      	str	r6, [r0, #8]
    4b6a:	e7ed      	b.n	4b48 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x24>
    4b6c:	2001      	movs	r0, #1
    4b6e:	bd78      	pop	{r3, r4, r5, r6, pc}
    4b70:	2000      	movs	r0, #0
    4b72:	bd78      	pop	{r3, r4, r5, r6, pc}
    4b74:	200009b2 	.word	0x200009b2

00004b78 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    4b78:	b510      	push	{r4, lr}
    4b7a:	4604      	mov	r4, r0
    4b7c:	f000 f946 	bl	4e0c <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    4b80:	b118      	cbz	r0, 4b8a <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x12>
    4b82:	21bd      	movs	r1, #189	; 0xbd
    4b84:	2027      	movs	r0, #39	; 0x27
    4b86:	f7ff f8bd 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4b8a:	4803      	ldr	r0, [pc, #12]	; (4b98 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x20>)
    4b8c:	2101      	movs	r1, #1
    4b8e:	f008 fd4a 	bl	d626 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    4b92:	4802      	ldr	r0, [pc, #8]	; (4b9c <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
    4b94:	62c4      	str	r4, [r0, #44]	; 0x2c
    4b96:	bd10      	pop	{r4, pc}
    4b98:	20000990 	.word	0x20000990
    4b9c:	200000c4 	.word	0x200000c4

00004ba0 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    4ba0:	4901      	ldr	r1, [pc, #4]	; (4ba8 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    4ba2:	2001      	movs	r0, #1
    4ba4:	7188      	strb	r0, [r1, #6]
    4ba6:	4770      	bx	lr
    4ba8:	200000c4 	.word	0x200000c4

00004bac <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    4bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4bb0:	4d57      	ldr	r5, [pc, #348]	; (4d10 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x164>)
    4bb2:	9c08      	ldr	r4, [sp, #32]
    4bb4:	782e      	ldrb	r6, [r5, #0]
    4bb6:	2e00      	cmp	r6, #0
    4bb8:	d16e      	bne.n	4c98 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xec>
    4bba:	2a00      	cmp	r2, #0
    4bbc:	d06c      	beq.n	4c98 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xec>
    4bbe:	2b00      	cmp	r3, #0
    4bc0:	d06a      	beq.n	4c98 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xec>
    4bc2:	2c00      	cmp	r4, #0
    4bc4:	d068      	beq.n	4c98 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xec>
    4bc6:	f105 0614 	add.w	r6, r5, #20
    4bca:	e9c5 010e 	strd	r0, r1, [r5, #56]	; 0x38
    4bce:	e886 001c 	stmia.w	r6, {r2, r3, r4}
    4bd2:	2700      	movs	r7, #0
    4bd4:	71af      	strb	r7, [r5, #6]
    4bd6:	716f      	strb	r7, [r5, #5]
    4bd8:	70ef      	strb	r7, [r5, #3]
    4bda:	70af      	strb	r7, [r5, #2]
    4bdc:	712f      	strb	r7, [r5, #4]
    4bde:	81af      	strh	r7, [r5, #12]
    4be0:	81ef      	strh	r7, [r5, #14]
    4be2:	f000 f94b 	bl	4e7c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    4be6:	4606      	mov	r6, r0
    4be8:	f000 f942 	bl	4e70 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    4bec:	4604      	mov	r4, r0
    4bee:	f005 ffd1 	bl	ab94 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    4bf2:	f005 fca9 	bl	a548 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    4bf6:	f994 0066 	ldrsb.w	r0, [r4, #102]	; 0x66
    4bfa:	f006 f853 	bl	aca4 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    4bfe:	f104 0010 	add.w	r0, r4, #16
    4c02:	f006 f93d 	bl	ae80 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    4c06:	f104 000c 	add.w	r0, r4, #12
    4c0a:	f006 f92d 	bl	ae68 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    4c0e:	f896 0023 	ldrb.w	r0, [r6, #35]	; 0x23
    4c12:	f006 f94f 	bl	aeb4 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    4c16:	f105 0038 	add.w	r0, r5, #56	; 0x38
    4c1a:	6840      	ldr	r0, [r0, #4]
    4c1c:	f890 016c 	ldrb.w	r0, [r0, #364]	; 0x16c
    4c20:	b108      	cbz	r0, 4c26 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x7a>
    4c22:	f005 ff05 	bl	aa30 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>
    4c26:	f894 1063 	ldrb.w	r1, [r4, #99]	; 0x63
    4c2a:	2001      	movs	r0, #1
    4c2c:	f005 fe30 	bl	a890 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    4c30:	2800      	cmp	r0, #0
    4c32:	d066      	beq.n	4d02 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x156>
    4c34:	46ba      	mov	sl, r7
    4c36:	2001      	movs	r0, #1
    4c38:	f005 ff3a 	bl	aab0 <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA>
    4c3c:	4835      	ldr	r0, [pc, #212]	; (4d14 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x168>)
    4c3e:	f005 fea3 	bl	a988 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    4c42:	8820      	ldrh	r0, [r4, #0]
    4c44:	f7ff fca8 	bl	4598 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    4c48:	6328      	str	r0, [r5, #48]	; 0x30
    4c4a:	8820      	ldrh	r0, [r4, #0]
    4c4c:	f7ff fc8e 	bl	456c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    4c50:	f106 0160 	add.w	r1, r6, #96	; 0x60
    4c54:	6368      	str	r0, [r5, #52]	; 0x34
    4c56:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 4d18 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x16c>
    4c5a:	c98e      	ldmia	r1, {r1, r2, r3, r7}
    4c5c:	f109 0808 	add.w	r8, r9, #8
    4c60:	e888 008e 	stmia.w	r8, {r1, r2, r3, r7}
    4c64:	6f31      	ldr	r1, [r6, #112]	; 0x70
    4c66:	f8c9 1021 	str.w	r1, [r9, #33]	; 0x21
    4c6a:	6f71      	ldr	r1, [r6, #116]	; 0x74
    4c6c:	f8c9 1025 	str.w	r1, [r9, #37]	; 0x25
    4c70:	f000 f976 	bl	4f60 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x138>
    4c74:	4601      	mov	r1, r0
    4c76:	8e20      	ldrh	r0, [r4, #48]	; 0x30
    4c78:	f008 fa58 	bl	d12c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    4c7c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
    4c7e:	4281      	cmp	r1, r0
    4c80:	d200      	bcs.n	4c84 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xd8>
    4c82:	4608      	mov	r0, r1
    4c84:	7228      	strb	r0, [r5, #8]
    4c86:	46a8      	mov	r8, r5
    4c88:	f894 1063 	ldrb.w	r1, [r4, #99]	; 0x63
    4c8c:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
    4c8e:	7cf7      	ldrb	r7, [r6, #19]
    4c90:	8ea5      	ldrh	r5, [r4, #52]	; 0x34
    4c92:	2908      	cmp	r1, #8
    4c94:	d104      	bne.n	4ca0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xf4>
    4c96:	e002      	b.n	4c9e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xf2>
    4c98:	f44f 718a 	mov.w	r1, #276	; 0x114
    4c9c:	e035      	b.n	4d0a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x15e>
    4c9e:	2104      	movs	r1, #4
    4ca0:	f008 fa44 	bl	d12c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    4ca4:	b90f      	cbnz	r7, 4caa <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfe>
    4ca6:	1d00      	adds	r0, r0, #4
    4ca8:	b280      	uxth	r0, r0
    4caa:	4285      	cmp	r5, r0
    4cac:	d200      	bcs.n	4cb0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x104>
    4cae:	4628      	mov	r0, r5
    4cb0:	b2c0      	uxtb	r0, r0
    4cb2:	f888 0009 	strb.w	r0, [r8, #9]
    4cb6:	7cf2      	ldrb	r2, [r6, #19]
    4cb8:	b102      	cbz	r2, 4cbc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x110>
    4cba:	2204      	movs	r2, #4
    4cbc:	4410      	add	r0, r2
    4cbe:	b2c0      	uxtb	r0, r0
    4cc0:	f888 0007 	strb.w	r0, [r8, #7]
    4cc4:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
    4cc8:	1d09      	adds	r1, r1, #4
    4cca:	4281      	cmp	r1, r0
    4ccc:	d202      	bcs.n	4cd4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x128>
    4cce:	f240 11a1 	movw	r1, #417	; 0x1a1
    4cd2:	e01a      	b.n	4d0a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x15e>
    4cd4:	4655      	mov	r5, sl
    4cd6:	2001      	movs	r0, #1
    4cd8:	f000 fb46 	bl	5368 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x540>
    4cdc:	480f      	ldr	r0, [pc, #60]	; (4d1c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x170>)
    4cde:	6800      	ldr	r0, [r0, #0]
    4ce0:	2803      	cmp	r0, #3
    4ce2:	d010      	beq.n	4d06 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x15a>
    4ce4:	280b      	cmp	r0, #11
    4ce6:	d00e      	beq.n	4d06 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x15a>
    4ce8:	4648      	mov	r0, r9
    4cea:	f840 5f52 	str.w	r5, [r0, #82]!
    4cee:	6045      	str	r5, [r0, #4]
    4cf0:	4809      	ldr	r0, [pc, #36]	; (4d18 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x16c>)
    4cf2:	88b1      	ldrh	r1, [r6, #4]
    4cf4:	3052      	adds	r0, #82	; 0x52
    4cf6:	8041      	strh	r1, [r0, #2]
    4cf8:	8821      	ldrh	r1, [r4, #0]
    4cfa:	8001      	strh	r1, [r0, #0]
    4cfc:	f896 1023 	ldrb.w	r1, [r6, #35]	; 0x23
    4d00:	7101      	strb	r1, [r0, #4]
    4d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4d06:	f240 11b1 	movw	r1, #433	; 0x1b1
    4d0a:	2027      	movs	r0, #39	; 0x27
    4d0c:	f7fe fffa 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4d10:	200000c4 	.word	0x200000c4
    4d14:	00005594 	.word	0x00005594
    4d18:	20000960 	.word	0x20000960
    4d1c:	40001550 	.word	0x40001550

00004d20 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    4d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4d24:	4605      	mov	r5, r0
    4d26:	f000 f8a9 	bl	4e7c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    4d2a:	4e33      	ldr	r6, [pc, #204]	; (4df8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xd8>)
    4d2c:	4604      	mov	r4, r0
    4d2e:	6a70      	ldr	r0, [r6, #36]	; 0x24
    4d30:	7847      	ldrb	r7, [r0, #1]
    4d32:	b10d      	cbz	r5, 4d38 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x18>
    4d34:	2d01      	cmp	r5, #1
    4d36:	d103      	bne.n	4d40 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x20>
    4d38:	6b71      	ldr	r1, [r6, #52]	; 0x34
    4d3a:	f007 f987 	bl	c04c <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>
    4d3e:	7070      	strb	r0, [r6, #1]
    4d40:	7870      	ldrb	r0, [r6, #1]
    4d42:	f04f 0800 	mov.w	r8, #0
    4d46:	f04f 0901 	mov.w	r9, #1
    4d4a:	b150      	cbz	r0, 4d62 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x42>
    4d4c:	2801      	cmp	r0, #1
    4d4e:	d01a      	beq.n	4d86 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x66>
    4d50:	2802      	cmp	r0, #2
    4d52:	d034      	beq.n	4dbe <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x9e>
    4d54:	2803      	cmp	r0, #3
    4d56:	d048      	beq.n	4dea <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xca>
    4d58:	f240 31f1 	movw	r1, #1009	; 0x3f1
    4d5c:	2027      	movs	r0, #39	; 0x27
    4d5e:	f7fe ffd1 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4d62:	2d01      	cmp	r5, #1
    4d64:	d032      	beq.n	4dcc <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    4d66:	f000 f8e7 	bl	4f38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x110>
    4d6a:	4639      	mov	r1, r7
    4d6c:	2201      	movs	r2, #1
    4d6e:	6b70      	ldr	r0, [r6, #52]	; 0x34
    4d70:	f007 fd90 	bl	c894 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    4d74:	e028      	b.n	4dc8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa8>
    4d76:	bf00      	nop
    4d78:	f884 8008 	strb.w	r8, [r4, #8]
    4d7c:	e031      	b.n	4de2 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    4d7e:	bf00      	nop
    4d80:	f884 9008 	strb.w	r9, [r4, #8]
    4d84:	e02d      	b.n	4de2 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    4d86:	2d01      	cmp	r5, #1
    4d88:	d008      	beq.n	4d9c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x7c>
    4d8a:	f000 f8d5 	bl	4f38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x110>
    4d8e:	4639      	mov	r1, r7
    4d90:	2200      	movs	r2, #0
    4d92:	6b70      	ldr	r0, [r6, #52]	; 0x34
    4d94:	f007 fd7e 	bl	c894 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    4d98:	2d02      	cmp	r5, #2
    4d9a:	d00b      	beq.n	4db4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4d9c:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    4da0:	1c40      	adds	r0, r0, #1
    4da2:	f141 0100 	adc.w	r1, r1, #0
    4da6:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    4daa:	7a20      	ldrb	r0, [r4, #8]
    4dac:	2801      	cmp	r0, #1
    4dae:	d003      	beq.n	4db8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x98>
    4db0:	f884 9008 	strb.w	r9, [r4, #8]
    4db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4db8:	f884 8008 	strb.w	r8, [r4, #8]
    4dbc:	e7fa      	b.n	4db4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4dbe:	2d01      	cmp	r5, #1
    4dc0:	d004      	beq.n	4dcc <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    4dc2:	6b70      	ldr	r0, [r6, #52]	; 0x34
    4dc4:	f007 ff6c 	bl	cca0 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    4dc8:	2d02      	cmp	r5, #2
    4dca:	d0f3      	beq.n	4db4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4dcc:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    4dd0:	1c40      	adds	r0, r0, #1
    4dd2:	f141 0100 	adc.w	r1, r1, #0
    4dd6:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    4dda:	7a20      	ldrb	r0, [r4, #8]
    4ddc:	2801      	cmp	r0, #1
    4dde:	d1cf      	bne.n	4d80 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x60>
    4de0:	e7ca      	b.n	4d78 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x58>
    4de2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4de6:	f004 bee9 	b.w	9bbc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    4dea:	2d01      	cmp	r5, #1
    4dec:	d0e2      	beq.n	4db4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4dee:	6b70      	ldr	r0, [r6, #52]	; 0x34
    4df0:	f007 ff56 	bl	cca0 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    4df4:	e7f5      	b.n	4de2 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    4df6:	0000      	.short	0x0000
    4df8:	200000c4 	.word	0x200000c4

00004dfc <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>:
    4dfc:	4802      	ldr	r0, [pc, #8]	; (4e08 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI+0xc>)
    4dfe:	89c0      	ldrh	r0, [r0, #14]
    4e00:	f3c0 2080 	ubfx	r0, r0, #10, #1
    4e04:	4770      	bx	lr
    4e06:	0000      	.short	0x0000
    4e08:	200000c4 	.word	0x200000c4

00004e0c <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    4e0c:	4804      	ldr	r0, [pc, #16]	; (4e20 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
    4e0e:	7800      	ldrb	r0, [r0, #0]
    4e10:	b108      	cbz	r0, 4e16 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0xa>
    4e12:	200c      	movs	r0, #12
    4e14:	4770      	bx	lr
    4e16:	4903      	ldr	r1, [pc, #12]	; (4e24 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
    4e18:	2000      	movs	r0, #0
    4e1a:	7448      	strb	r0, [r1, #17]
    4e1c:	4770      	bx	lr
    4e1e:	0000      	.short	0x0000
    4e20:	200000c4 	.word	0x200000c4
    4e24:	200009b2 	.word	0x200009b2

00004e28 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    4e28:	480c      	ldr	r0, [pc, #48]	; (4e5c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34>)
    4e2a:	b510      	push	{r4, lr}
    4e2c:	7801      	ldrb	r1, [r0, #0]
    4e2e:	b149      	cbz	r1, 4e44 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c>
    4e30:	f100 0138 	add.w	r1, r0, #56	; 0x38
    4e34:	7800      	ldrb	r0, [r0, #0]
    4e36:	2802      	cmp	r0, #2
    4e38:	d008      	beq.n	4e4c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24>
    4e3a:	f240 11cd 	movw	r1, #461	; 0x1cd
    4e3e:	2027      	movs	r0, #39	; 0x27
    4e40:	f7fe ff60 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4e48:	f000 b9a6 	b.w	5198 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x370>
    4e4c:	6848      	ldr	r0, [r1, #4]
    4e4e:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    4e52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4e56:	f005 bd9f 	b.w	a998 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>
    4e5a:	0000      	.short	0x0000
    4e5c:	200000c4 	.word	0x200000c4
    4e60:	4a02      	ldr	r2, [pc, #8]	; (4e6c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44>)
    4e62:	8993      	ldrh	r3, [r2, #12]
    4e64:	4303      	orrs	r3, r0
    4e66:	8193      	strh	r3, [r2, #12]
    4e68:	6952      	ldr	r2, [r2, #20]
    4e6a:	4710      	bx	r2
    4e6c:	200000c4 	.word	0x200000c4
    4e70:	4801      	ldr	r0, [pc, #4]	; (4e78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>)
    4e72:	6840      	ldr	r0, [r0, #4]
    4e74:	4770      	bx	lr
    4e76:	0000      	.short	0x0000
    4e78:	200000fc 	.word	0x200000fc
    4e7c:	4801      	ldr	r0, [pc, #4]	; (4e84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c>)
    4e7e:	6840      	ldr	r0, [r0, #4]
    4e80:	3068      	adds	r0, #104	; 0x68
    4e82:	4770      	bx	lr
    4e84:	200000fc 	.word	0x200000fc
    4e88:	4a01      	ldr	r2, [pc, #4]	; (4e90 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68>)
    4e8a:	2100      	movs	r1, #0
    4e8c:	6952      	ldr	r2, [r2, #20]
    4e8e:	4710      	bx	r2
    4e90:	200000c4 	.word	0x200000c4
    4e94:	b570      	push	{r4, r5, r6, lr}
    4e96:	f7ff fff1 	bl	4e7c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    4e9a:	4604      	mov	r4, r0
    4e9c:	f7ff ffe8 	bl	4e70 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    4ea0:	4605      	mov	r5, r0
    4ea2:	4621      	mov	r1, r4
    4ea4:	f008 f9c5 	bl	d232 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>
    4ea8:	7fa9      	ldrb	r1, [r5, #30]
    4eaa:	2901      	cmp	r1, #1
    4eac:	d114      	bne.n	4ed8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb0>
    4eae:	2800      	cmp	r0, #0
    4eb0:	d012      	beq.n	4ed8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb0>
    4eb2:	480a      	ldr	r0, [pc, #40]	; (4edc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb4>)
    4eb4:	6842      	ldr	r2, [r0, #4]
    4eb6:	8828      	ldrh	r0, [r5, #0]
    4eb8:	f8a2 01ee 	strh.w	r0, [r2, #494]	; 0x1ee
    4ebc:	7a60      	ldrb	r0, [r4, #9]
    4ebe:	f882 01f0 	strb.w	r0, [r2, #496]	; 0x1f0
    4ec2:	7aa0      	ldrb	r0, [r4, #10]
    4ec4:	f882 01f1 	strb.w	r0, [r2, #497]	; 0x1f1
    4ec8:	f502 72f6 	add.w	r2, r2, #492	; 0x1ec
    4ecc:	2001      	movs	r0, #1
    4ece:	7010      	strb	r0, [r2, #0]
    4ed0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4ed4:	f004 be72 	b.w	9bbc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    4ed8:	bd70      	pop	{r4, r5, r6, pc}
    4eda:	0000      	.short	0x0000
    4edc:	200000fc 	.word	0x200000fc
    4ee0:	b570      	push	{r4, r5, r6, lr}
    4ee2:	4605      	mov	r5, r0
    4ee4:	2901      	cmp	r1, #1
    4ee6:	d818      	bhi.n	4f1a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    4ee8:	4c12      	ldr	r4, [pc, #72]	; (4f34 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>)
    4eea:	69a1      	ldr	r1, [r4, #24]
    4eec:	4788      	blx	r1
    4eee:	b1a0      	cbz	r0, 4f1a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    4ef0:	7960      	ldrb	r0, [r4, #5]
    4ef2:	b990      	cbnz	r0, 4f1a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    4ef4:	b9e5      	cbnz	r5, 4f30 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x108>
    4ef6:	f104 0010 	add.w	r0, r4, #16
    4efa:	7801      	ldrb	r1, [r0, #0]
    4efc:	06c8      	lsls	r0, r1, #27
    4efe:	d405      	bmi.n	4f0c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe4>
    4f00:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    4f02:	7800      	ldrb	r0, [r0, #0]
    4f04:	06c0      	lsls	r0, r0, #27
    4f06:	d401      	bmi.n	4f0c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe4>
    4f08:	2001      	movs	r0, #1
    4f0a:	e000      	b.n	4f0e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe6>
    4f0c:	2000      	movs	r0, #0
    4f0e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    4f10:	b92a      	cbnz	r2, 4f1e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf6>
    4f12:	8962      	ldrh	r2, [r4, #10]
    4f14:	b11a      	cbz	r2, 4f1e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf6>
    4f16:	06c9      	lsls	r1, r1, #27
    4f18:	d401      	bmi.n	4f1e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf6>
    4f1a:	2001      	movs	r0, #1
    4f1c:	bd70      	pop	{r4, r5, r6, pc}
    4f1e:	89a1      	ldrh	r1, [r4, #12]
    4f20:	078a      	lsls	r2, r1, #30
    4f22:	d503      	bpl.n	4f2c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x104>
    4f24:	6a22      	ldr	r2, [r4, #32]
    4f26:	78d2      	ldrb	r2, [r2, #3]
    4f28:	2a02      	cmp	r2, #2
    4f2a:	d001      	beq.n	4f30 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x108>
    4f2c:	4308      	orrs	r0, r1
    4f2e:	d1f4      	bne.n	4f1a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    4f30:	2000      	movs	r0, #0
    4f32:	bd70      	pop	{r4, r5, r6, pc}
    4f34:	200000c4 	.word	0x200000c4
    4f38:	b510      	push	{r4, lr}
    4f3a:	4c08      	ldr	r4, [pc, #32]	; (4f5c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x134>)
    4f3c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    4f3e:	b138      	cbz	r0, 4f50 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x128>
    4f40:	8962      	ldrh	r2, [r4, #10]
    4f42:	6a61      	ldr	r1, [r4, #36]	; 0x24
    4f44:	1cd2      	adds	r2, r2, #3
    4f46:	f006 ff13 	bl	bd70 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4f4a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    4f4c:	6260      	str	r0, [r4, #36]	; 0x24
    4f4e:	bd10      	pop	{r4, pc}
    4f50:	f44f 6187 	mov.w	r1, #1080	; 0x438
    4f54:	2027      	movs	r0, #39	; 0x27
    4f56:	f7fe fed5 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4f5a:	0000      	.short	0x0000
    4f5c:	200000c4 	.word	0x200000c4
    4f60:	b510      	push	{r4, lr}
    4f62:	f7ff ff85 	bl	4e70 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    4f66:	4604      	mov	r4, r0
    4f68:	f7ff ff88 	bl	4e7c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    4f6c:	4601      	mov	r1, r0
    4f6e:	7b42      	ldrb	r2, [r0, #13]
    4f70:	4815      	ldr	r0, [pc, #84]	; (4fc8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1a0>)
    4f72:	2a24      	cmp	r2, #36	; 0x24
    4f74:	d00e      	beq.n	4f94 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16c>
    4f76:	7b89      	ldrb	r1, [r1, #14]
    4f78:	2924      	cmp	r1, #36	; 0x24
    4f7a:	d00b      	beq.n	4f94 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16c>
    4f7c:	2a1f      	cmp	r2, #31
    4f7e:	d00d      	beq.n	4f9c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x174>
    4f80:	2a20      	cmp	r2, #32
    4f82:	d00b      	beq.n	4f9c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x174>
    4f84:	2922      	cmp	r1, #34	; 0x22
    4f86:	d00f      	beq.n	4fa8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x180>
    4f88:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    4f8c:	2804      	cmp	r0, #4
    4f8e:	d100      	bne.n	4f92 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16a>
    4f90:	2008      	movs	r0, #8
    4f92:	bd10      	pop	{r4, pc}
    4f94:	6840      	ldr	r0, [r0, #4]
    4f96:	f890 118e 	ldrb.w	r1, [r0, #398]	; 0x18e
    4f9a:	e00e      	b.n	4fba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x192>
    4f9c:	2922      	cmp	r1, #34	; 0x22
    4f9e:	d003      	beq.n	4fa8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x180>
    4fa0:	6840      	ldr	r0, [r0, #4]
    4fa2:	f890 01a8 	ldrb.w	r0, [r0, #424]	; 0x1a8
    4fa6:	e005      	b.n	4fb4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18c>
    4fa8:	6841      	ldr	r1, [r0, #4]
    4faa:	f891 01a8 	ldrb.w	r0, [r1, #424]	; 0x1a8
    4fae:	f891 105b 	ldrb.w	r1, [r1, #91]	; 0x5b
    4fb2:	4008      	ands	r0, r1
    4fb4:	f007 ffb6 	bl	cf24 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    4fb8:	4601      	mov	r1, r0
    4fba:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    4fbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4fc2:	f007 bfc7 	b.w	cf54 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    4fc6:	0000      	.short	0x0000
    4fc8:	200000fc 	.word	0x200000fc
    4fcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4fd0:	4688      	mov	r8, r1
    4fd2:	4606      	mov	r6, r0
    4fd4:	f7ff ff52 	bl	4e7c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    4fd8:	4c4a      	ldr	r4, [pc, #296]	; (5104 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2dc>)
    4fda:	2700      	movs	r7, #0
    4fdc:	4605      	mov	r5, r0
    4fde:	f88d 7000 	strb.w	r7, [sp]
    4fe2:	7820      	ldrb	r0, [r4, #0]
    4fe4:	2802      	cmp	r0, #2
    4fe6:	d004      	beq.n	4ff2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ca>
    4fe8:	f240 4189 	movw	r1, #1161	; 0x489
    4fec:	2027      	movs	r0, #39	; 0x27
    4fee:	f7fe fe89 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4ff2:	7ba0      	ldrb	r0, [r4, #14]
    4ff4:	0640      	lsls	r0, r0, #25
    4ff6:	d406      	bmi.n	5006 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1de>
    4ff8:	2040      	movs	r0, #64	; 0x40
    4ffa:	f7ff ff45 	bl	4e88 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    4ffe:	89e0      	ldrh	r0, [r4, #14]
    5000:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    5004:	81e0      	strh	r0, [r4, #14]
    5006:	7ce8      	ldrb	r0, [r5, #19]
    5008:	b3c6      	cbz	r6, 507c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x254>
    500a:	f005 fb15 	bl	a638 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    500e:	f005 faf9 	bl	a604 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    5012:	b968      	cbnz	r0, 5030 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
    5014:	7ce8      	ldrb	r0, [r5, #19]
    5016:	b158      	cbz	r0, 5030 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
    5018:	6a60      	ldr	r0, [r4, #36]	; 0x24
    501a:	7841      	ldrb	r1, [r0, #1]
    501c:	b141      	cbz	r1, 5030 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
    501e:	7800      	ldrb	r0, [r0, #0]
    5020:	7a29      	ldrb	r1, [r5, #8]
    5022:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    5026:	4288      	cmp	r0, r1
    5028:	d102      	bne.n	5030 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
    502a:	2001      	movs	r0, #1
    502c:	70a0      	strb	r0, [r4, #2]
    502e:	e04a      	b.n	50c6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x29e>
    5030:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5032:	7841      	ldrb	r1, [r0, #1]
    5034:	8161      	strh	r1, [r4, #10]
    5036:	b121      	cbz	r1, 5042 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x21a>
    5038:	6b60      	ldr	r0, [r4, #52]	; 0x34
    503a:	f007 fdfe 	bl	cc3a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    503e:	62a0      	str	r0, [r4, #40]	; 0x28
    5040:	e000      	b.n	5044 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x21c>
    5042:	62a7      	str	r7, [r4, #40]	; 0x28
    5044:	89e0      	ldrh	r0, [r4, #14]
    5046:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    504a:	81e0      	strh	r0, [r4, #14]
    504c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    504e:	79e9      	ldrb	r1, [r5, #7]
    5050:	7800      	ldrb	r0, [r0, #0]
    5052:	f3c0 0080 	ubfx	r0, r0, #2, #1
    5056:	4288      	cmp	r0, r1
    5058:	d005      	beq.n	5066 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x23e>
    505a:	f000 f937 	bl	52cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a4>
    505e:	89e0      	ldrh	r0, [r4, #14]
    5060:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    5064:	81e0      	strh	r0, [r4, #14]
    5066:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5068:	7a29      	ldrb	r1, [r5, #8]
    506a:	7800      	ldrb	r0, [r0, #0]
    506c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    5070:	4288      	cmp	r0, r1
    5072:	d10e      	bne.n	5092 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x26a>
    5074:	4668      	mov	r0, sp
    5076:	f000 f8e5 	bl	5244 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x41c>
    507a:	e00a      	b.n	5092 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x26a>
    507c:	e7ff      	b.n	507e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x256>
    507e:	b108      	cbz	r0, 5084 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x25c>
    5080:	f005 fad4 	bl	a62c <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    5084:	78e0      	ldrb	r0, [r4, #3]
    5086:	1c40      	adds	r0, r0, #1
    5088:	70e0      	strb	r0, [r4, #3]
    508a:	89e0      	ldrh	r0, [r4, #14]
    508c:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    5090:	81e0      	strh	r0, [r4, #14]
    5092:	4d1d      	ldr	r5, [pc, #116]	; (5108 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2e0>)
    5094:	f1b8 0f00 	cmp.w	r8, #0
    5098:	d104      	bne.n	50a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x27c>
    509a:	78e1      	ldrb	r1, [r4, #3]
    509c:	2001      	movs	r0, #1
    509e:	f7ff ff1f 	bl	4ee0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
    50a2:	b1a0      	cbz	r0, 50ce <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2a6>
    50a4:	f89d 0000 	ldrb.w	r0, [sp]
    50a8:	b110      	cbz	r0, 50b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x288>
    50aa:	2000      	movs	r0, #0
    50ac:	f7ff fe38 	bl	4d20 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    50b0:	b136      	cbz	r6, 50c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x298>
    50b2:	70e7      	strb	r7, [r4, #3]
    50b4:	7968      	ldrb	r0, [r5, #5]
    50b6:	1c40      	adds	r0, r0, #1
    50b8:	7168      	strb	r0, [r5, #5]
    50ba:	f7ff feeb 	bl	4e94 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    50be:	e002      	b.n	50c6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x29e>
    50c0:	79a8      	ldrb	r0, [r5, #6]
    50c2:	1c40      	adds	r0, r0, #1
    50c4:	71a8      	strb	r0, [r5, #6]
    50c6:	f000 f867 	bl	5198 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x370>
    50ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    50ce:	f89d 0000 	ldrb.w	r0, [sp]
    50d2:	b110      	cbz	r0, 50da <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b2>
    50d4:	2001      	movs	r0, #1
    50d6:	f7ff fe23 	bl	4d20 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    50da:	2000      	movs	r0, #0
    50dc:	f000 f98e 	bl	53fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5d4>
    50e0:	f89d 0000 	ldrb.w	r0, [sp]
    50e4:	b110      	cbz	r0, 50ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2c4>
    50e6:	2002      	movs	r0, #2
    50e8:	f7ff fe1a 	bl	4d20 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    50ec:	b136      	cbz	r6, 50fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d4>
    50ee:	70e7      	strb	r7, [r4, #3]
    50f0:	7968      	ldrb	r0, [r5, #5]
    50f2:	1c40      	adds	r0, r0, #1
    50f4:	7168      	strb	r0, [r5, #5]
    50f6:	f7ff fecd 	bl	4e94 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    50fa:	e7e6      	b.n	50ca <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2a2>
    50fc:	79a8      	ldrb	r0, [r5, #6]
    50fe:	1c40      	adds	r0, r0, #1
    5100:	71a8      	strb	r0, [r5, #6]
    5102:	e7e2      	b.n	50ca <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2a2>
    5104:	200000c4 	.word	0x200000c4
    5108:	200009b2 	.word	0x200009b2
    510c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5110:	460e      	mov	r6, r1
    5112:	4680      	mov	r8, r0
    5114:	f7ff feb2 	bl	4e7c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5118:	4d1e      	ldr	r5, [pc, #120]	; (5194 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x36c>)
    511a:	4604      	mov	r4, r0
    511c:	7828      	ldrb	r0, [r5, #0]
    511e:	2801      	cmp	r0, #1
    5120:	d004      	beq.n	512c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x304>
    5122:	f240 4147 	movw	r1, #1095	; 0x447
    5126:	2027      	movs	r0, #39	; 0x27
    5128:	f7fe fdec 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    512c:	7860      	ldrb	r0, [r4, #1]
    512e:	2701      	movs	r7, #1
    5130:	b130      	cbz	r0, 5140 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x318>
    5132:	2000      	movs	r0, #0
    5134:	7060      	strb	r0, [r4, #1]
    5136:	4601      	mov	r1, r0
    5138:	2004      	movs	r0, #4
    513a:	f7ff fe91 	bl	4e60 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    513e:	70e7      	strb	r7, [r4, #3]
    5140:	6a29      	ldr	r1, [r5, #32]
    5142:	7808      	ldrb	r0, [r1, #0]
    5144:	43c0      	mvns	r0, r0
    5146:	0780      	lsls	r0, r0, #30
    5148:	d109      	bne.n	515e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x336>
    514a:	79a0      	ldrb	r0, [r4, #6]
    514c:	b9d0      	cbnz	r0, 5184 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x35c>
    514e:	2002      	movs	r0, #2
    5150:	f7ff fe86 	bl	4e60 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    5154:	6a28      	ldr	r0, [r5, #32]
    5156:	7800      	ldrb	r0, [r0, #0]
    5158:	43c0      	mvns	r0, r0
    515a:	0780      	lsls	r0, r0, #30
    515c:	d012      	beq.n	5184 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x35c>
    515e:	6a28      	ldr	r0, [r5, #32]
    5160:	7840      	ldrb	r0, [r0, #1]
    5162:	b110      	cbz	r0, 516a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x342>
    5164:	2002      	movs	r0, #2
    5166:	71a0      	strb	r0, [r4, #6]
    5168:	e000      	b.n	516c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x344>
    516a:	71a7      	strb	r7, [r4, #6]
    516c:	ea36 0608 	bics.w	r6, r6, r8
    5170:	d004      	beq.n	517c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x354>
    5172:	2100      	movs	r1, #0
    5174:	4608      	mov	r0, r1
    5176:	f7ff feb3 	bl	4ee0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
    517a:	b128      	cbz	r0, 5188 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x360>
    517c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5180:	f000 b80a 	b.w	5198 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x370>
    5184:	2003      	movs	r0, #3
    5186:	e7ee      	b.n	5166 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x33e>
    5188:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    518c:	2000      	movs	r0, #0
    518e:	f000 b8eb 	b.w	5368 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x540>
    5192:	0000      	.short	0x0000
    5194:	200000c4 	.word	0x200000c4
    5198:	b510      	push	{r4, lr}
    519a:	f005 fae5 	bl	a768 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    519e:	f005 f9d3 	bl	a548 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    51a2:	4c0d      	ldr	r4, [pc, #52]	; (51d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b0>)
    51a4:	89e0      	ldrh	r0, [r4, #14]
    51a6:	f7ff fe6f 	bl	4e88 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    51aa:	69e2      	ldr	r2, [r4, #28]
    51ac:	7961      	ldrb	r1, [r4, #5]
    51ae:	78a0      	ldrb	r0, [r4, #2]
    51b0:	4790      	blx	r2
    51b2:	480a      	ldr	r0, [pc, #40]	; (51dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b4>)
    51b4:	7c40      	ldrb	r0, [r0, #17]
    51b6:	b158      	cbz	r0, 51d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a8>
    51b8:	4808      	ldr	r0, [pc, #32]	; (51dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b4>)
    51ba:	3852      	subs	r0, #82	; 0x52
    51bc:	f850 1f52 	ldr.w	r1, [r0, #82]!
    51c0:	6081      	str	r1, [r0, #8]
    51c2:	6841      	ldr	r1, [r0, #4]
    51c4:	60c1      	str	r1, [r0, #12]
    51c6:	4805      	ldr	r0, [pc, #20]	; (51dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b4>)
    51c8:	2101      	movs	r1, #1
    51ca:	7401      	strb	r1, [r0, #16]
    51cc:	f004 fcf6 	bl	9bbc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    51d0:	2000      	movs	r0, #0
    51d2:	7020      	strb	r0, [r4, #0]
    51d4:	bd10      	pop	{r4, pc}
    51d6:	0000      	.short	0x0000
    51d8:	200000c4 	.word	0x200000c4
    51dc:	200009b2 	.word	0x200009b2
    51e0:	4808      	ldr	r0, [pc, #32]	; (5204 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3dc>)
    51e2:	b510      	push	{r4, lr}
    51e4:	7800      	ldrb	r0, [r0, #0]
    51e6:	2802      	cmp	r0, #2
    51e8:	d004      	beq.n	51f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3cc>
    51ea:	f240 2101 	movw	r1, #513	; 0x201
    51ee:	2027      	movs	r0, #39	; 0x27
    51f0:	f7fe fd88 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    51f4:	4904      	ldr	r1, [pc, #16]	; (5208 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e0>)
    51f6:	2001      	movs	r0, #1
    51f8:	71c8      	strb	r0, [r1, #7]
    51fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    51fe:	f7ff bfcb 	b.w	5198 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x370>
    5202:	0000      	.short	0x0000
    5204:	200000c4 	.word	0x200000c4
    5208:	200009b2 	.word	0x200009b2
    520c:	b430      	push	{r4, r5}
    520e:	4b0c      	ldr	r3, [pc, #48]	; (5240 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x418>)
    5210:	b942      	cbnz	r2, 5224 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3fc>
    5212:	79da      	ldrb	r2, [r3, #7]
    5214:	2aff      	cmp	r2, #255	; 0xff
    5216:	d105      	bne.n	5224 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3fc>
    5218:	f890 2063 	ldrb.w	r2, [r0, #99]	; 0x63
    521c:	f890 4062 	ldrb.w	r4, [r0, #98]	; 0x62
    5220:	42a2      	cmp	r2, r4
    5222:	d00b      	beq.n	523c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x414>
    5224:	b131      	cbz	r1, 5234 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x40c>
    5226:	79da      	ldrb	r2, [r3, #7]
    5228:	f890 1063 	ldrb.w	r1, [r0, #99]	; 0x63
    522c:	bc30      	pop	{r4, r5}
    522e:	4610      	mov	r0, r2
    5230:	f005 be2e 	b.w	ae90 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>
    5234:	22ff      	movs	r2, #255	; 0xff
    5236:	f890 1062 	ldrb.w	r1, [r0, #98]	; 0x62
    523a:	e7f7      	b.n	522c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x404>
    523c:	bc30      	pop	{r4, r5}
    523e:	4770      	bx	lr
    5240:	200000c4 	.word	0x200000c4
    5244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5248:	4607      	mov	r7, r0
    524a:	f7ff fe17 	bl	4e7c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    524e:	4604      	mov	r4, r0
    5250:	481d      	ldr	r0, [pc, #116]	; (52c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a0>)
    5252:	2600      	movs	r6, #0
    5254:	2501      	movs	r5, #1
    5256:	6a41      	ldr	r1, [r0, #36]	; 0x24
    5258:	780a      	ldrb	r2, [r1, #0]
    525a:	f002 0203 	and.w	r2, r2, #3
    525e:	2a01      	cmp	r2, #1
    5260:	d015      	beq.n	528e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x466>
    5262:	2a02      	cmp	r2, #2
    5264:	d013      	beq.n	528e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x466>
    5266:	2a03      	cmp	r2, #3
    5268:	d003      	beq.n	5272 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44a>
    526a:	7941      	ldrb	r1, [r0, #5]
    526c:	f041 0104 	orr.w	r1, r1, #4
    5270:	e024      	b.n	52bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x494>
    5272:	7065      	strb	r5, [r4, #1]
    5274:	89c2      	ldrh	r2, [r0, #14]
    5276:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    527a:	81c2      	strh	r2, [r0, #14]
    527c:	2001      	movs	r0, #1
    527e:	f7ff fdef 	bl	4e60 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    5282:	e01d      	b.n	52c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x498>
    5284:	7226      	strb	r6, [r4, #8]
    5286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    528a:	7225      	strb	r5, [r4, #8]
    528c:	e7fb      	b.n	5286 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x45e>
    528e:	7849      	ldrb	r1, [r1, #1]
    5290:	b1b1      	cbz	r1, 52c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x498>
    5292:	89c2      	ldrh	r2, [r0, #14]
    5294:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    5298:	81c2      	strh	r2, [r0, #14]
    529a:	6a82      	ldr	r2, [r0, #40]	; 0x28
    529c:	2a00      	cmp	r2, #0
    529e:	d0f2      	beq.n	5286 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x45e>
    52a0:	29fb      	cmp	r1, #251	; 0xfb
    52a2:	d808      	bhi.n	52b6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48e>
    52a4:	7980      	ldrb	r0, [r0, #6]
    52a6:	b120      	cbz	r0, 52b2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48a>
    52a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    52ac:	2020      	movs	r0, #32
    52ae:	f7ff bdeb 	b.w	4e88 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    52b2:	703d      	strb	r5, [r7, #0]
    52b4:	e7e7      	b.n	5286 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x45e>
    52b6:	7941      	ldrb	r1, [r0, #5]
    52b8:	f041 0110 	orr.w	r1, r1, #16
    52bc:	7141      	strb	r1, [r0, #5]
    52be:	e7e2      	b.n	5286 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x45e>
    52c0:	7a20      	ldrb	r0, [r4, #8]
    52c2:	2801      	cmp	r0, #1
    52c4:	d1e1      	bne.n	528a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x462>
    52c6:	e7dd      	b.n	5284 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x45c>
    52c8:	200000c4 	.word	0x200000c4
    52cc:	b570      	push	{r4, r5, r6, lr}
    52ce:	f7ff fdd5 	bl	4e7c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    52d2:	4604      	mov	r4, r0
    52d4:	7980      	ldrb	r0, [r0, #6]
    52d6:	2800      	cmp	r0, #0
    52d8:	d02e      	beq.n	5338 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x510>
    52da:	2802      	cmp	r0, #2
    52dc:	d10d      	bne.n	52fa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4d2>
    52de:	481c      	ldr	r0, [pc, #112]	; (5350 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x528>)
    52e0:	6b00      	ldr	r0, [r0, #48]	; 0x30
    52e2:	f007 fab0 	bl	c846 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    52e6:	b340      	cbz	r0, 533a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x512>
    52e8:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
    52ec:	1c40      	adds	r0, r0, #1
    52ee:	f141 0100 	adc.w	r1, r1, #0
    52f2:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
    52f6:	f004 fc61 	bl	9bbc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    52fa:	2500      	movs	r5, #0
    52fc:	71a5      	strb	r5, [r4, #6]
    52fe:	78e0      	ldrb	r0, [r4, #3]
    5300:	b120      	cbz	r0, 530c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e4>
    5302:	70e5      	strb	r5, [r4, #3]
    5304:	2100      	movs	r1, #0
    5306:	2010      	movs	r0, #16
    5308:	f7ff fdaa 	bl	4e60 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    530c:	78a0      	ldrb	r0, [r4, #2]
    530e:	b170      	cbz	r0, 532e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x506>
    5310:	70a5      	strb	r5, [r4, #2]
    5312:	f7ff fb43 	bl	499c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    5316:	b198      	cbz	r0, 5340 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x518>
    5318:	2100      	movs	r1, #0
    531a:	2008      	movs	r0, #8
    531c:	f7ff fda0 	bl	4e60 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    5320:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
    5324:	1c40      	adds	r0, r0, #1
    5326:	f141 0100 	adc.w	r1, r1, #0
    532a:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
    532e:	79e0      	ldrb	r0, [r4, #7]
    5330:	2801      	cmp	r0, #1
    5332:	d00a      	beq.n	534a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x522>
    5334:	2001      	movs	r0, #1
    5336:	71e0      	strb	r0, [r4, #7]
    5338:	bd70      	pop	{r4, r5, r6, pc}
    533a:	f44f 7163 	mov.w	r1, #908	; 0x38c
    533e:	e001      	b.n	5344 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x51c>
    5340:	f44f 7169 	mov.w	r1, #932	; 0x3a4
    5344:	2027      	movs	r0, #39	; 0x27
    5346:	f7fe fcdd 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    534a:	71e5      	strb	r5, [r4, #7]
    534c:	bd70      	pop	{r4, r5, r6, pc}
    534e:	0000      	.short	0x0000
    5350:	200000c4 	.word	0x200000c4
    5354:	4803      	ldr	r0, [pc, #12]	; (5364 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x53c>)
    5356:	7800      	ldrb	r0, [r0, #0]
    5358:	2800      	cmp	r0, #0
    535a:	d001      	beq.n	5360 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x538>
    535c:	f7ff bf1c 	b.w	5198 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x370>
    5360:	4770      	bx	lr
    5362:	0000      	.short	0x0000
    5364:	200000c4 	.word	0x200000c4
    5368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    536c:	4681      	mov	r9, r0
    536e:	f7ff fd7f 	bl	4e70 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    5372:	4606      	mov	r6, r0
    5374:	f7ff fd82 	bl	4e7c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5378:	4c1d      	ldr	r4, [pc, #116]	; (53f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c8>)
    537a:	4605      	mov	r5, r0
    537c:	464a      	mov	r2, r9
    537e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    5380:	6260      	str	r0, [r4, #36]	; 0x24
    5382:	2101      	movs	r1, #1
    5384:	4630      	mov	r0, r6
    5386:	f7ff ff41 	bl	520c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e4>
    538a:	7ce8      	ldrb	r0, [r5, #19]
    538c:	f04f 0800 	mov.w	r8, #0
    5390:	b1c0      	cbz	r0, 53c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x59c>
    5392:	7a67      	ldrb	r7, [r4, #9]
    5394:	4817      	ldr	r0, [pc, #92]	; (53f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5cc>)
    5396:	f005 fc8b 	bl	acb0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    539a:	4817      	ldr	r0, [pc, #92]	; (53f8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5d0>)
    539c:	2101      	movs	r1, #1
    539e:	7601      	strb	r1, [r0, #24]
    53a0:	e9d5 1216 	ldrd	r1, r2, [r5, #88]	; 0x58
    53a4:	e9c0 1204 	strd	r1, r2, [r0, #16]
    53a8:	4a12      	ldr	r2, [pc, #72]	; (53f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5cc>)
    53aa:	6a61      	ldr	r1, [r4, #36]	; 0x24
    53ac:	f005 f8bc 	bl	a528 <sym_2A6IJT7MGQ7OBCRC2X2OJJKRLO2X7VBUN6GSTWQ>
    53b0:	f896 0063 	ldrb.w	r0, [r6, #99]	; 0x63
    53b4:	f007 fdc0 	bl	cf38 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    53b8:	4602      	mov	r2, r0
    53ba:	4639      	mov	r1, r7
    53bc:	2001      	movs	r0, #1
    53be:	f005 f8e1 	bl	a584 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A>
    53c2:	e004      	b.n	53ce <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5a6>
    53c4:	6a60      	ldr	r0, [r4, #36]	; 0x24
    53c6:	f005 fc73 	bl	acb0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    53ca:	f005 f8bd 	bl	a548 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    53ce:	f1b9 0f00 	cmp.w	r9, #0
    53d2:	d102      	bne.n	53da <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b2>
    53d4:	4640      	mov	r0, r8
    53d6:	f005 fb03 	bl	a9e0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    53da:	2100      	movs	r1, #0
    53dc:	f896 3062 	ldrb.w	r3, [r6, #98]	; 0x62
    53e0:	2201      	movs	r2, #1
    53e2:	4608      	mov	r0, r1
    53e4:	f005 fcee 	bl	adc4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    53e8:	2002      	movs	r0, #2
    53ea:	7020      	strb	r0, [r4, #0]
    53ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    53f0:	200000c4 	.word	0x200000c4
    53f4:	20000860 	.word	0x20000860
    53f8:	20000968 	.word	0x20000968
    53fc:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    5400:	4604      	mov	r4, r0
    5402:	f7ff fd3b 	bl	4e7c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5406:	4605      	mov	r5, r0
    5408:	f7ff fd32 	bl	4e70 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    540c:	4606      	mov	r6, r0
    540e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 5588 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x760>
    5412:	4622      	mov	r2, r4
    5414:	2100      	movs	r1, #0
    5416:	f7ff fef9 	bl	520c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e4>
    541a:	79a8      	ldrb	r0, [r5, #6]
    541c:	2701      	movs	r7, #1
    541e:	f04f 0800 	mov.w	r8, #0
    5422:	f1a9 0420 	sub.w	r4, r9, #32
    5426:	b140      	cbz	r0, 543a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x612>
    5428:	2801      	cmp	r0, #1
    542a:	d01f      	beq.n	546c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x644>
    542c:	2802      	cmp	r0, #2
    542e:	d030      	beq.n	5492 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x66a>
    5430:	2803      	cmp	r0, #3
    5432:	d03c      	beq.n	54ae <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x686>
    5434:	f240 219e 	movw	r1, #670	; 0x29e
    5438:	e058      	b.n	54ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c4>
    543a:	7a20      	ldrb	r0, [r4, #8]
    543c:	2148      	movs	r1, #72	; 0x48
    543e:	f8ad 0004 	strh.w	r0, [sp, #4]
    5442:	5388      	strh	r0, [r1, r6]
    5444:	4648      	mov	r0, r9
    5446:	f7ff fad3 	bl	49f0 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    544a:	b128      	cbz	r0, 5458 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x630>
    544c:	2080      	movs	r0, #128	; 0x80
    544e:	6a21      	ldr	r1, [r4, #32]
    5450:	f7ff fd06 	bl	4e60 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    5454:	70af      	strb	r7, [r5, #2]
    5456:	e02e      	b.n	54b6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68e>
    5458:	466a      	mov	r2, sp
    545a:	a901      	add	r1, sp, #4
    545c:	6b20      	ldr	r0, [r4, #48]	; 0x30
    545e:	f007 fd83 	bl	cf68 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    5462:	6220      	str	r0, [r4, #32]
    5464:	b110      	cbz	r0, 546c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x644>
    5466:	f895 1043 	ldrb.w	r1, [r5, #67]	; 0x43
    546a:	b111      	cbz	r1, 5472 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x64a>
    546c:	4847      	ldr	r0, [pc, #284]	; (558c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x764>)
    546e:	6220      	str	r0, [r4, #32]
    5470:	e021      	b.n	54b6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68e>
    5472:	f89d 1000 	ldrb.w	r1, [sp]
    5476:	b931      	cbnz	r1, 5486 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x65e>
    5478:	f8a0 8000 	strh.w	r8, [r0]
    547c:	f880 8002 	strb.w	r8, [r0, #2]
    5480:	2101      	movs	r1, #1
    5482:	f008 f8d0 	bl	d626 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    5486:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    548a:	6a20      	ldr	r0, [r4, #32]
    548c:	f008 f88f 	bl	d5ae <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>
    5490:	e011      	b.n	54b6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68e>
    5492:	f8b6 0048 	ldrh.w	r0, [r6, #72]	; 0x48
    5496:	f8ad 0004 	strh.w	r0, [sp, #4]
    549a:	466a      	mov	r2, sp
    549c:	a901      	add	r1, sp, #4
    549e:	6b20      	ldr	r0, [r4, #48]	; 0x30
    54a0:	f007 fd62 	bl	cf68 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    54a4:	6220      	str	r0, [r4, #32]
    54a6:	b930      	cbnz	r0, 54b6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68e>
    54a8:	f240 218f 	movw	r1, #655	; 0x28f
    54ac:	e01e      	b.n	54ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c4>
    54ae:	4648      	mov	r0, r9
    54b0:	f7ff fa9e 	bl	49f0 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    54b4:	b1c0      	cbz	r0, 54e8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c0>
    54b6:	6a20      	ldr	r0, [r4, #32]
    54b8:	2308      	movs	r3, #8
    54ba:	7801      	ldrb	r1, [r0, #0]
    54bc:	f021 0108 	bic.w	r1, r1, #8
    54c0:	7001      	strb	r1, [r0, #0]
    54c2:	79ea      	ldrb	r2, [r5, #7]
    54c4:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    54c8:	4311      	orrs	r1, r2
    54ca:	f021 0104 	bic.w	r1, r1, #4
    54ce:	7001      	strb	r1, [r0, #0]
    54d0:	7a2a      	ldrb	r2, [r5, #8]
    54d2:	2304      	movs	r3, #4
    54d4:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    54d8:	4311      	orrs	r1, r2
    54da:	f021 0110 	bic.w	r1, r1, #16
    54de:	7001      	strb	r1, [r0, #0]
    54e0:	43c9      	mvns	r1, r1
    54e2:	0789      	lsls	r1, r1, #30
    54e4:	d005      	beq.n	54f2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ca>
    54e6:	e007      	b.n	54f8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d0>
    54e8:	f44f 7126 	mov.w	r1, #664	; 0x298
    54ec:	2027      	movs	r0, #39	; 0x27
    54ee:	f7fe fc09 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    54f2:	78c0      	ldrb	r0, [r0, #3]
    54f4:	2802      	cmp	r0, #2
    54f6:	d00f      	beq.n	5518 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f0>
    54f8:	6b20      	ldr	r0, [r4, #48]	; 0x30
    54fa:	f007 fac9 	bl	ca90 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    54fe:	b108      	cbz	r0, 5504 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6dc>
    5500:	2101      	movs	r1, #1
    5502:	e00a      	b.n	551a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f2>
    5504:	6a20      	ldr	r0, [r4, #32]
    5506:	7800      	ldrb	r0, [r0, #0]
    5508:	43c0      	mvns	r0, r0
    550a:	0780      	lsls	r0, r0, #30
    550c:	d004      	beq.n	5518 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f0>
    550e:	f7ff fa2d 	bl	496c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    5512:	f080 0101 	eor.w	r1, r0, #1
    5516:	e000      	b.n	551a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f2>
    5518:	2100      	movs	r1, #0
    551a:	6a20      	ldr	r0, [r4, #32]
    551c:	7802      	ldrb	r2, [r0, #0]
    551e:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    5522:	7001      	strb	r1, [r0, #0]
    5524:	7ca9      	ldrb	r1, [r5, #18]
    5526:	b1d1      	cbz	r1, 555e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x736>
    5528:	7841      	ldrb	r1, [r0, #1]
    552a:	b1c1      	cbz	r1, 555e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x736>
    552c:	4818      	ldr	r0, [pc, #96]	; (5590 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>)
    552e:	f005 fbbf 	bl	acb0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5532:	4816      	ldr	r0, [pc, #88]	; (558c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x764>)
    5534:	3828      	subs	r0, #40	; 0x28
    5536:	f880 8018 	strb.w	r8, [r0, #24]
    553a:	e9d5 1214 	ldrd	r1, r2, [r5, #80]	; 0x50
    553e:	e9c0 1204 	strd	r1, r2, [r0, #16]
    5542:	4913      	ldr	r1, [pc, #76]	; (5590 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>)
    5544:	6a22      	ldr	r2, [r4, #32]
    5546:	f004 ffef 	bl	a528 <sym_2A6IJT7MGQ7OBCRC2X2OJJKRLO2X7VBUN6GSTWQ>
    554a:	f896 0062 	ldrb.w	r0, [r6, #98]	; 0x62
    554e:	f007 fcf3 	bl	cf38 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    5552:	4602      	mov	r2, r0
    5554:	21fb      	movs	r1, #251	; 0xfb
    5556:	2000      	movs	r0, #0
    5558:	f005 f814 	bl	a584 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A>
    555c:	e003      	b.n	5566 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x73e>
    555e:	f005 fba7 	bl	acb0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5562:	f004 fff1 	bl	a548 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    5566:	2201      	movs	r2, #1
    5568:	f896 3063 	ldrb.w	r3, [r6, #99]	; 0x63
    556c:	4611      	mov	r1, r2
    556e:	2000      	movs	r0, #0
    5570:	f005 fc28 	bl	adc4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    5574:	7127      	strb	r7, [r4, #4]
    5576:	6a20      	ldr	r0, [r4, #32]
    5578:	8801      	ldrh	r1, [r0, #0]
    557a:	8221      	strh	r1, [r4, #16]
    557c:	7880      	ldrb	r0, [r0, #2]
    557e:	74a0      	strb	r0, [r4, #18]
    5580:	7027      	strb	r7, [r4, #0]
    5582:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    5586:	0000      	.short	0x0000
    5588:	200000e4 	.word	0x200000e4
    558c:	20000990 	.word	0x20000990
    5590:	20000860 	.word	0x20000860
    5594:	000051e1 	.word	0x000051e1
    5598:	00004fcd 	.word	0x00004fcd
    559c:	0000510d 	.word	0x0000510d
    55a0:	00005355 	.word	0x00005355

000055a4 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    55a4:	4800      	ldr	r0, [pc, #0]	; (55a8 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    55a6:	4770      	bx	lr
    55a8:	2000117b 	.word	0x2000117b

000055ac <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    55ac:	4904      	ldr	r1, [pc, #16]	; (55c0 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    55ae:	788a      	ldrb	r2, [r1, #2]
    55b0:	4282      	cmp	r2, r0
    55b2:	d903      	bls.n	55bc <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    55b4:	4408      	add	r0, r1
    55b6:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    55ba:	4770      	bx	lr
    55bc:	2000      	movs	r0, #0
    55be:	4770      	bx	lr
    55c0:	20000fa8 	.word	0x20000fa8

000055c4 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    55c4:	4904      	ldr	r1, [pc, #16]	; (55d8 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    55c6:	788a      	ldrb	r2, [r1, #2]
    55c8:	4282      	cmp	r2, r0
    55ca:	d903      	bls.n	55d4 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    55cc:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    55d0:	3083      	adds	r0, #131	; 0x83
    55d2:	4770      	bx	lr
    55d4:	2000      	movs	r0, #0
    55d6:	4770      	bx	lr
    55d8:	20000fa8 	.word	0x20000fa8

000055dc <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    55dc:	4a05      	ldr	r2, [pc, #20]	; (55f4 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    55de:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    55e2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    55e6:	6802      	ldr	r2, [r0, #0]
    55e8:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    55ec:	8880      	ldrh	r0, [r0, #4]
    55ee:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    55f2:	4770      	bx	lr
    55f4:	20000fa8 	.word	0x20000fa8

000055f8 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>:
    55f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    55fc:	460e      	mov	r6, r1
    55fe:	4607      	mov	r7, r0
    5600:	4615      	mov	r5, r2
    5602:	2106      	movs	r1, #6
    5604:	4630      	mov	r0, r6
    5606:	f007 fe9d 	bl	d344 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    560a:	4c0d      	ldr	r4, [pc, #52]	; (5640 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x48>)
    560c:	b160      	cbz	r0, 5628 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x30>
    560e:	2000      	movs	r0, #0
    5610:	e004      	b.n	561c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x24>
    5612:	1821      	adds	r1, r4, r0
    5614:	1c40      	adds	r0, r0, #1
    5616:	f881 513b 	strb.w	r5, [r1, #315]	; 0x13b
    561a:	b2c0      	uxtb	r0, r0
    561c:	78a1      	ldrb	r1, [r4, #2]
    561e:	4281      	cmp	r1, r0
    5620:	d8f7      	bhi.n	5612 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x1a>
    5622:	2001      	movs	r0, #1
    5624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5628:	4631      	mov	r1, r6
    562a:	4638      	mov	r0, r7
    562c:	f007 fcab 	bl	cf86 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    5630:	2808      	cmp	r0, #8
    5632:	d003      	beq.n	563c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x44>
    5634:	4420      	add	r0, r4
    5636:	f880 513b 	strb.w	r5, [r0, #315]	; 0x13b
    563a:	e7f2      	b.n	5622 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2a>
    563c:	2000      	movs	r0, #0
    563e:	e7f1      	b.n	5624 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2c>
    5640:	20000fa8 	.word	0x20000fa8

00005644 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    5644:	4904      	ldr	r1, [pc, #16]	; (5658 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    5646:	788a      	ldrb	r2, [r1, #2]
    5648:	4282      	cmp	r2, r0
    564a:	d903      	bls.n	5654 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    564c:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    5650:	1cc0      	adds	r0, r0, #3
    5652:	4770      	bx	lr
    5654:	2000      	movs	r0, #0
    5656:	4770      	bx	lr
    5658:	20000fa8 	.word	0x20000fa8

0000565c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    565c:	b510      	push	{r4, lr}
    565e:	f240 12d3 	movw	r2, #467	; 0x1d3
    5662:	2100      	movs	r1, #0
    5664:	4808      	ldr	r0, [pc, #32]	; (5688 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    5666:	f006 fbfd 	bl	be64 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    566a:	2208      	movs	r2, #8
    566c:	21ff      	movs	r1, #255	; 0xff
    566e:	4807      	ldr	r0, [pc, #28]	; (568c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    5670:	f006 fbf8 	bl	be64 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5674:	4805      	ldr	r0, [pc, #20]	; (568c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    5676:	2100      	movs	r1, #0
    5678:	1f00      	subs	r0, r0, #4
    567a:	7001      	strb	r1, [r0, #0]
    567c:	7041      	strb	r1, [r0, #1]
    567e:	f44f 7161 	mov.w	r1, #900	; 0x384
    5682:	8041      	strh	r1, [r0, #2]
    5684:	bd10      	pop	{r4, pc}
    5686:	0000      	.short	0x0000
    5688:	20000fa8 	.word	0x20000fa8
    568c:	20000294 	.word	0x20000294

00005690 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>:
    5690:	4901      	ldr	r1, [pc, #4]	; (5698 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA+0x8>)
    5692:	7008      	strb	r0, [r1, #0]
    5694:	4770      	bx	lr
    5696:	0000      	.short	0x0000
    5698:	20000290 	.word	0x20000290

0000569c <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>:
    569c:	4801      	ldr	r0, [pc, #4]	; (56a4 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY+0x8>)
    569e:	7800      	ldrb	r0, [r0, #0]
    56a0:	4770      	bx	lr
    56a2:	0000      	.short	0x0000
    56a4:	20000290 	.word	0x20000290

000056a8 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    56a8:	4b0b      	ldr	r3, [pc, #44]	; (56d8 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    56aa:	b510      	push	{r4, lr}
    56ac:	789c      	ldrb	r4, [r3, #2]
    56ae:	4284      	cmp	r4, r0
    56b0:	d90f      	bls.n	56d2 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
    56b2:	4418      	add	r0, r3
    56b4:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    56b8:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    56bc:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    56c0:	700b      	strb	r3, [r1, #0]
    56c2:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    56c6:	6011      	str	r1, [r2, #0]
    56c8:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    56cc:	8090      	strh	r0, [r2, #4]
    56ce:	2001      	movs	r0, #1
    56d0:	bd10      	pop	{r4, pc}
    56d2:	2000      	movs	r0, #0
    56d4:	bd10      	pop	{r4, pc}
    56d6:	0000      	.short	0x0000
    56d8:	20000fa8 	.word	0x20000fa8

000056dc <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    56dc:	4907      	ldr	r1, [pc, #28]	; (56fc <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    56de:	788a      	ldrb	r2, [r1, #2]
    56e0:	4282      	cmp	r2, r0
    56e2:	d909      	bls.n	56f8 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
    56e4:	4408      	add	r0, r1
    56e6:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    56ea:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    56ee:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    56f2:	f000 0001 	and.w	r0, r0, #1
    56f6:	4770      	bx	lr
    56f8:	2000      	movs	r0, #0
    56fa:	4770      	bx	lr
    56fc:	20000fa8 	.word	0x20000fa8

00005700 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>:
    5700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5704:	4698      	mov	r8, r3
    5706:	4691      	mov	r9, r2
    5708:	460c      	mov	r4, r1
    570a:	4605      	mov	r5, r0
    570c:	f000 f938 	bl	5980 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x108>
    5710:	4606      	mov	r6, r0
    5712:	2810      	cmp	r0, #16
    5714:	d006      	beq.n	5724 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    5716:	f000 f903 	bl	5920 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    571a:	2810      	cmp	r0, #16
    571c:	d002      	beq.n	5724 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    571e:	2012      	movs	r0, #18
    5720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5724:	4f18      	ldr	r7, [pc, #96]	; (5788 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x88>)
    5726:	78b8      	ldrb	r0, [r7, #2]
    5728:	2808      	cmp	r0, #8
    572a:	d22a      	bcs.n	5782 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x82>
    572c:	2e10      	cmp	r6, #16
    572e:	d105      	bne.n	573c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x3c>
    5730:	2200      	movs	r2, #0
    5732:	4621      	mov	r1, r4
    5734:	4628      	mov	r0, r5
    5736:	f000 f907 	bl	5948 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xd0>
    573a:	4606      	mov	r6, r0
    573c:	78bc      	ldrb	r4, [r7, #2]
    573e:	2210      	movs	r2, #16
    5740:	1c60      	adds	r0, r4, #1
    5742:	70b8      	strb	r0, [r7, #2]
    5744:	eb07 1504 	add.w	r5, r7, r4, lsl #4
    5748:	1ce8      	adds	r0, r5, #3
    574a:	4649      	mov	r1, r9
    574c:	f007 fd64 	bl	d218 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    5750:	f105 0083 	add.w	r0, r5, #131	; 0x83
    5754:	2210      	movs	r2, #16
    5756:	4641      	mov	r1, r8
    5758:	f007 fd5e 	bl	d218 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    575c:	2110      	movs	r1, #16
    575e:	4640      	mov	r0, r8
    5760:	f007 fdf0 	bl	d344 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    5764:	443c      	add	r4, r7
    5766:	2110      	movs	r1, #16
    5768:	f884 0143 	strb.w	r0, [r4, #323]	; 0x143
    576c:	4648      	mov	r0, r9
    576e:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    5772:	f007 fde7 	bl	d344 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    5776:	77e0      	strb	r0, [r4, #31]
    5778:	f804 6c29 	strb.w	r6, [r4, #-41]
    577c:	2000      	movs	r0, #0
    577e:	73e0      	strb	r0, [r4, #15]
    5780:	e7ce      	b.n	5720 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    5782:	2007      	movs	r0, #7
    5784:	e7cc      	b.n	5720 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    5786:	0000      	.short	0x0000
    5788:	20000fa8 	.word	0x20000fa8

0000578c <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>:
    578c:	4806      	ldr	r0, [pc, #24]	; (57a8 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x1c>)
    578e:	b510      	push	{r4, lr}
    5790:	7880      	ldrb	r0, [r0, #2]
    5792:	1e40      	subs	r0, r0, #1
    5794:	b244      	sxtb	r4, r0
    5796:	e004      	b.n	57a2 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x16>
    5798:	b2e0      	uxtb	r0, r4
    579a:	f000 f939 	bl	5a10 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x198>
    579e:	1e64      	subs	r4, r4, #1
    57a0:	b264      	sxtb	r4, r4
    57a2:	2c00      	cmp	r4, #0
    57a4:	daf8      	bge.n	5798 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xc>
    57a6:	bd10      	pop	{r4, pc}
    57a8:	20000fa8 	.word	0x20000fa8

000057ac <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    57ac:	4801      	ldr	r0, [pc, #4]	; (57b4 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    57ae:	8840      	ldrh	r0, [r0, #2]
    57b0:	4770      	bx	lr
    57b2:	0000      	.short	0x0000
    57b4:	20000290 	.word	0x20000290

000057b8 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>:
    57b8:	b138      	cbz	r0, 57ca <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    57ba:	f24a 11b8 	movw	r1, #41400	; 0xa1b8
    57be:	4288      	cmp	r0, r1
    57c0:	d803      	bhi.n	57ca <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    57c2:	4903      	ldr	r1, [pc, #12]	; (57d0 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x18>)
    57c4:	8048      	strh	r0, [r1, #2]
    57c6:	2001      	movs	r0, #1
    57c8:	4770      	bx	lr
    57ca:	2000      	movs	r0, #0
    57cc:	4770      	bx	lr
    57ce:	0000      	.short	0x0000
    57d0:	20000290 	.word	0x20000290

000057d4 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    57d4:	4905      	ldr	r1, [pc, #20]	; (57ec <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x18>)
    57d6:	788a      	ldrb	r2, [r1, #2]
    57d8:	4282      	cmp	r2, r0
    57da:	d903      	bls.n	57e4 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x10>
    57dc:	4408      	add	r0, r1
    57de:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    57e2:	b108      	cbz	r0, 57e8 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x14>
    57e4:	2000      	movs	r0, #0
    57e6:	4770      	bx	lr
    57e8:	2001      	movs	r0, #1
    57ea:	4770      	bx	lr
    57ec:	20000fa8 	.word	0x20000fa8

000057f0 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    57f0:	b570      	push	{r4, r5, r6, lr}
    57f2:	460d      	mov	r5, r1
    57f4:	4606      	mov	r6, r0
    57f6:	f000 f8c3 	bl	5980 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x108>
    57fa:	4c10      	ldr	r4, [pc, #64]	; (583c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
    57fc:	2810      	cmp	r0, #16
    57fe:	d007      	beq.n	5810 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    5800:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
    5804:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    5808:	07c9      	lsls	r1, r1, #31
    580a:	d001      	beq.n	5810 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    580c:	2001      	movs	r0, #1
    580e:	bd70      	pop	{r4, r5, r6, pc}
    5810:	7861      	ldrb	r1, [r4, #1]
    5812:	2908      	cmp	r1, #8
    5814:	d210      	bcs.n	5838 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
    5816:	2810      	cmp	r0, #16
    5818:	d008      	beq.n	582c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
    581a:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    581e:	2101      	movs	r1, #1
    5820:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    5824:	7860      	ldrb	r0, [r4, #1]
    5826:	1c40      	adds	r0, r0, #1
    5828:	7060      	strb	r0, [r4, #1]
    582a:	e7ef      	b.n	580c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
    582c:	2201      	movs	r2, #1
    582e:	4629      	mov	r1, r5
    5830:	4630      	mov	r0, r6
    5832:	f000 f889 	bl	5948 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xd0>
    5836:	e7f5      	b.n	5824 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
    5838:	2000      	movs	r0, #0
    583a:	bd70      	pop	{r4, r5, r6, pc}
    583c:	20000fa8 	.word	0x20000fa8

00005840 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    5840:	b570      	push	{r4, r5, r6, lr}
    5842:	4d0b      	ldr	r5, [pc, #44]	; (5870 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
    5844:	7828      	ldrb	r0, [r5, #0]
    5846:	1e40      	subs	r0, r0, #1
    5848:	b244      	sxtb	r4, r0
    584a:	e00a      	b.n	5862 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
    584c:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    5850:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    5854:	07c0      	lsls	r0, r0, #31
    5856:	d002      	beq.n	585e <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
    5858:	b2e0      	uxtb	r0, r4
    585a:	f000 f921 	bl	5aa0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x228>
    585e:	1e64      	subs	r4, r4, #1
    5860:	b264      	sxtb	r4, r4
    5862:	2c00      	cmp	r4, #0
    5864:	daf2      	bge.n	584c <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
    5866:	4903      	ldr	r1, [pc, #12]	; (5874 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
    5868:	2000      	movs	r0, #0
    586a:	7048      	strb	r0, [r1, #1]
    586c:	bd70      	pop	{r4, r5, r6, pc}
    586e:	0000      	.short	0x0000
    5870:	20000fa8 	.word	0x20000fa8
    5874:	20000290 	.word	0x20000290

00005878 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    5878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    587c:	2400      	movs	r4, #0
    587e:	4625      	mov	r5, r4
    5880:	4e18      	ldr	r6, [pc, #96]	; (58e4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
    5882:	e029      	b.n	58d8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
    5884:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
    5888:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
    588c:	07c0      	lsls	r0, r0, #31
    588e:	d021      	beq.n	58d4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    5890:	4628      	mov	r0, r5
    5892:	f000 f845 	bl	5920 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    5896:	4603      	mov	r3, r0
    5898:	f7ff fed4 	bl	5644 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    589c:	4601      	mov	r1, r0
    589e:	2000      	movs	r0, #0
    58a0:	2b10      	cmp	r3, #16
    58a2:	d009      	beq.n	58b8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    58a4:	18f2      	adds	r2, r6, r3
    58a6:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
    58aa:	f1bc 0f01 	cmp.w	ip, #1
    58ae:	d002      	beq.n	58b6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
    58b0:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
    58b4:	b102      	cbz	r2, 58b8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    58b6:	2001      	movs	r0, #1
    58b8:	1e40      	subs	r0, r0, #1
    58ba:	4201      	tst	r1, r0
    58bc:	d10a      	bne.n	58d4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    58be:	480a      	ldr	r0, [pc, #40]	; (58e8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
    58c0:	f507 71aa 	add.w	r1, r7, #340	; 0x154
    58c4:	5503      	strb	r3, [r0, r4]
    58c6:	4620      	mov	r0, r4
    58c8:	1c64      	adds	r4, r4, #1
    58ca:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
    58ce:	b2e4      	uxtb	r4, r4
    58d0:	f005 fbea 	bl	b0a8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    58d4:	1c6d      	adds	r5, r5, #1
    58d6:	b2ed      	uxtb	r5, r5
    58d8:	7830      	ldrb	r0, [r6, #0]
    58da:	42a8      	cmp	r0, r5
    58dc:	d8d2      	bhi.n	5884 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
    58de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    58e2:	0000      	.short	0x0000
    58e4:	20000fa8 	.word	0x20000fa8
    58e8:	20000294 	.word	0x20000294
    58ec:	b570      	push	{r4, r5, r6, lr}
    58ee:	4b0a      	ldr	r3, [pc, #40]	; (5918 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    58f0:	781b      	ldrb	r3, [r3, #0]
    58f2:	b173      	cbz	r3, 5912 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9a>
    58f4:	4b09      	ldr	r3, [pc, #36]	; (591c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>)
    58f6:	789c      	ldrb	r4, [r3, #2]
    58f8:	b15c      	cbz	r4, 5912 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9a>
    58fa:	1845      	adds	r5, r0, r1
    58fc:	4621      	mov	r1, r4
    58fe:	b10a      	cbz	r2, 5904 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    5900:	1cd8      	adds	r0, r3, #3
    5902:	e001      	b.n	5908 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
    5904:	4805      	ldr	r0, [pc, #20]	; (591c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>)
    5906:	3083      	adds	r0, #131	; 0x83
    5908:	462a      	mov	r2, r5
    590a:	f004 fd2f 	bl	a36c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    590e:	2001      	movs	r0, #1
    5910:	bd70      	pop	{r4, r5, r6, pc}
    5912:	2000      	movs	r0, #0
    5914:	bd70      	pop	{r4, r5, r6, pc}
    5916:	0000      	.short	0x0000
    5918:	20000290 	.word	0x20000290
    591c:	20000fa8 	.word	0x20000fa8
    5920:	4908      	ldr	r1, [pc, #32]	; (5944 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>)
    5922:	b510      	push	{r4, lr}
    5924:	4603      	mov	r3, r0
    5926:	2000      	movs	r0, #0
    5928:	788a      	ldrb	r2, [r1, #2]
    592a:	e006      	b.n	593a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc2>
    592c:	180c      	adds	r4, r1, r0
    592e:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
    5932:	429c      	cmp	r4, r3
    5934:	d004      	beq.n	5940 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>
    5936:	1c40      	adds	r0, r0, #1
    5938:	b2c0      	uxtb	r0, r0
    593a:	4282      	cmp	r2, r0
    593c:	d8f6      	bhi.n	592c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb4>
    593e:	2010      	movs	r0, #16
    5940:	bd10      	pop	{r4, pc}
    5942:	0000      	.short	0x0000
    5944:	20000fa8 	.word	0x20000fa8
    5948:	b570      	push	{r4, r5, r6, lr}
    594a:	4b0c      	ldr	r3, [pc, #48]	; (597c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>)
    594c:	4604      	mov	r4, r0
    594e:	7818      	ldrb	r0, [r3, #0]
    5950:	1c45      	adds	r5, r0, #1
    5952:	701d      	strb	r5, [r3, #0]
    5954:	2810      	cmp	r0, #16
    5956:	d303      	bcc.n	5960 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe8>
    5958:	2146      	movs	r1, #70	; 0x46
    595a:	2028      	movs	r0, #40	; 0x28
    595c:	f7fe f9d2 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5960:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    5964:	680d      	ldr	r5, [r1, #0]
    5966:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
    596a:	8889      	ldrh	r1, [r1, #4]
    596c:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    5970:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    5974:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    5978:	bd70      	pop	{r4, r5, r6, pc}
    597a:	0000      	.short	0x0000
    597c:	20000fa8 	.word	0x20000fa8
    5980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5984:	460f      	mov	r7, r1
    5986:	4606      	mov	r6, r0
    5988:	2400      	movs	r4, #0
    598a:	4d0d      	ldr	r5, [pc, #52]	; (59c0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x148>)
    598c:	e00f      	b.n	59ae <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x136>
    598e:	bf00      	nop
    5990:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    5994:	f890 1153 	ldrb.w	r1, [r0, #339]	; 0x153
    5998:	42b1      	cmp	r1, r6
    599a:	d106      	bne.n	59aa <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x132>
    599c:	2206      	movs	r2, #6
    599e:	4639      	mov	r1, r7
    59a0:	f500 70aa 	add.w	r0, r0, #340	; 0x154
    59a4:	f006 f9d2 	bl	bd4c <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    59a8:	b138      	cbz	r0, 59ba <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x142>
    59aa:	1c64      	adds	r4, r4, #1
    59ac:	b2e4      	uxtb	r4, r4
    59ae:	7828      	ldrb	r0, [r5, #0]
    59b0:	42a0      	cmp	r0, r4
    59b2:	d8ed      	bhi.n	5990 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x118>
    59b4:	2010      	movs	r0, #16
    59b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    59ba:	4620      	mov	r0, r4
    59bc:	e7fb      	b.n	59b6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13e>
    59be:	0000      	.short	0x0000
    59c0:	20000fa8 	.word	0x20000fa8
    59c4:	b570      	push	{r4, r5, r6, lr}
    59c6:	4605      	mov	r5, r0
    59c8:	f7ff ffaa 	bl	5920 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    59cc:	2810      	cmp	r0, #16
    59ce:	d11c      	bne.n	5a0a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x192>
    59d0:	4c0e      	ldr	r4, [pc, #56]	; (5a0c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x194>)
    59d2:	7820      	ldrb	r0, [r4, #0]
    59d4:	1e40      	subs	r0, r0, #1
    59d6:	b2c0      	uxtb	r0, r0
    59d8:	7020      	strb	r0, [r4, #0]
    59da:	42a8      	cmp	r0, r5
    59dc:	d015      	beq.n	5a0a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x192>
    59de:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    59e2:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    59e6:	f502 7080 	add.w	r0, r2, #256	; 0x100
    59ea:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
    59ee:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
    59f2:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
    59f6:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
    59fa:	7820      	ldrb	r0, [r4, #0]
    59fc:	f7ff ff90 	bl	5920 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    5a00:	2810      	cmp	r0, #16
    5a02:	d002      	beq.n	5a0a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x192>
    5a04:	4420      	add	r0, r4
    5a06:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    5a0a:	bd70      	pop	{r4, r5, r6, pc}
    5a0c:	20000fa8 	.word	0x20000fa8
    5a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5a14:	4c21      	ldr	r4, [pc, #132]	; (5a9c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x224>)
    5a16:	4606      	mov	r6, r0
    5a18:	19a7      	adds	r7, r4, r6
    5a1a:	78a0      	ldrb	r0, [r4, #2]
    5a1c:	1e40      	subs	r0, r0, #1
    5a1e:	b2c5      	uxtb	r5, r0
    5a20:	70a5      	strb	r5, [r4, #2]
    5a22:	f897 8103 	ldrb.w	r8, [r7, #259]	; 0x103
    5a26:	42ae      	cmp	r6, r5
    5a28:	d02a      	beq.n	5a80 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x208>
    5a2a:	eb04 1a05 	add.w	sl, r4, r5, lsl #4
    5a2e:	eb04 1906 	add.w	r9, r4, r6, lsl #4
    5a32:	f10a 0103 	add.w	r1, sl, #3
    5a36:	f109 0003 	add.w	r0, r9, #3
    5a3a:	2210      	movs	r2, #16
    5a3c:	f006 f998 	bl	bd70 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5a40:	f10a 0183 	add.w	r1, sl, #131	; 0x83
    5a44:	f109 0083 	add.w	r0, r9, #131	; 0x83
    5a48:	2210      	movs	r2, #16
    5a4a:	f006 f991 	bl	bd70 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5a4e:	1960      	adds	r0, r4, r5
    5a50:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    5a54:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    5a58:	f887 1103 	strb.w	r1, [r7, #259]	; 0x103
    5a5c:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    5a60:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    5a64:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    5a68:	f8d2 310b 	ldr.w	r3, [r2, #267]	; 0x10b
    5a6c:	f8c1 310b 	str.w	r3, [r1, #267]	; 0x10b
    5a70:	f8b2 210f 	ldrh.w	r2, [r2, #271]	; 0x10f
    5a74:	f8a1 210f 	strh.w	r2, [r1, #271]	; 0x10f
    5a78:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    5a7c:	f887 013b 	strb.w	r0, [r7, #315]	; 0x13b
    5a80:	eb04 00c8 	add.w	r0, r4, r8, lsl #3
    5a84:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    5a88:	07c0      	lsls	r0, r0, #31
    5a8a:	d104      	bne.n	5a96 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x21e>
    5a8c:	4640      	mov	r0, r8
    5a8e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5a92:	f7ff bf97 	b.w	59c4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x14c>
    5a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5a9a:	0000      	.short	0x0000
    5a9c:	20000fa8 	.word	0x20000fa8
    5aa0:	4905      	ldr	r1, [pc, #20]	; (5ab8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x240>)
    5aa2:	784a      	ldrb	r2, [r1, #1]
    5aa4:	1e52      	subs	r2, r2, #1
    5aa6:	704a      	strb	r2, [r1, #1]
    5aa8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    5aac:	2200      	movs	r2, #0
    5aae:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
    5ab2:	f7ff bf87 	b.w	59c4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x14c>
    5ab6:	0000      	.short	0x0000
    5ab8:	20000fa8 	.word	0x20000fa8

00005abc <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ>:
    5abc:	b5f0      	push	{r4, r5, r6, r7, lr}
    5abe:	f06f 021f 	mvn.w	r2, #31
    5ac2:	0c01      	lsrs	r1, r0, #16
    5ac4:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    5ac8:	251f      	movs	r5, #31
    5aca:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    5ace:	3854      	subs	r0, #84	; 0x54
    5ad0:	d00d      	beq.n	5aee <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x32>
    5ad2:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    5ad6:	3855      	subs	r0, #85	; 0x55
    5ad8:	d009      	beq.n	5aee <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x32>
    5ada:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    5ade:	38aa      	subs	r0, #170	; 0xaa
    5ae0:	d005      	beq.n	5aee <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x32>
    5ae2:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    5ae6:	38aa      	subs	r0, #170	; 0xaa
    5ae8:	d001      	beq.n	5aee <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x32>
    5aea:	2001      	movs	r0, #1
    5aec:	e000      	b.n	5af0 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x34>
    5aee:	2000      	movs	r0, #0
    5af0:	2200      	movs	r2, #0
    5af2:	4613      	mov	r3, r2
    5af4:	ea4f 0402 	mov.w	r4, r2
    5af8:	ea82 0701 	eor.w	r7, r2, r1
    5afc:	43ff      	mvns	r7, r7
    5afe:	431f      	orrs	r7, r3
    5b00:	1c7f      	adds	r7, r7, #1
    5b02:	d00f      	beq.n	5b24 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x68>
    5b04:	f006 0701 	and.w	r7, r6, #1
    5b08:	0852      	lsrs	r2, r2, #1
    5b0a:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    5b0e:	f005 0701 	and.w	r7, r5, #1
    5b12:	085b      	lsrs	r3, r3, #1
    5b14:	0876      	lsrs	r6, r6, #1
    5b16:	086d      	lsrs	r5, r5, #1
    5b18:	1c64      	adds	r4, r4, #1
    5b1a:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    5b1e:	2c16      	cmp	r4, #22
    5b20:	d3ea      	bcc.n	5af8 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x3c>
    5b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5b24:	2000      	movs	r0, #0
    5b26:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005b28 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    5b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5b2c:	4604      	mov	r4, r0
    5b2e:	f100 0568 	add.w	r5, r0, #104	; 0x68
    5b32:	f04f 0901 	mov.w	r9, #1
    5b36:	b171      	cbz	r1, 5b56 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x2e>
    5b38:	f104 077e 	add.w	r7, r4, #126	; 0x7e
    5b3c:	1e7e      	subs	r6, r7, #1
    5b3e:	2901      	cmp	r1, #1
    5b40:	d021      	beq.n	5b86 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5e>
    5b42:	2902      	cmp	r1, #2
    5b44:	d046      	beq.n	5bd4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xac>
    5b46:	2903      	cmp	r1, #3
    5b48:	d11b      	bne.n	5b82 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5a>
    5b4a:	4639      	mov	r1, r7
    5b4c:	4630      	mov	r0, r6
    5b4e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5b52:	f007 bc7e 	b.w	d452 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    5b56:	f44f 7204 	mov.w	r2, #528	; 0x210
    5b5a:	2100      	movs	r1, #0
    5b5c:	f006 f982 	bl	be64 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5b60:	f004 fbf4 	bl	a34c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    5b64:	f644 112b 	movw	r1, #18731	; 0x492b
    5b68:	4008      	ands	r0, r1
    5b6a:	f885 9015 	strb.w	r9, [r5, #21]
    5b6e:	f885 004c 	strb.w	r0, [r5, #76]	; 0x4c
    5b72:	0a00      	lsrs	r0, r0, #8
    5b74:	f885 004d 	strb.w	r0, [r5, #77]	; 0x4d
    5b78:	20fe      	movs	r0, #254	; 0xfe
    5b7a:	f885 007c 	strb.w	r0, [r5, #124]	; 0x7c
    5b7e:	207f      	movs	r0, #127	; 0x7f
    5b80:	7268      	strb	r0, [r5, #9]
    5b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5b86:	f04f 0800 	mov.w	r8, #0
    5b8a:	f8a4 8106 	strh.w	r8, [r4, #262]	; 0x106
    5b8e:	f884 80fb 	strb.w	r8, [r4, #251]	; 0xfb
    5b92:	6861      	ldr	r1, [r4, #4]
    5b94:	4814      	ldr	r0, [pc, #80]	; (5be8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc0>)
    5b96:	460a      	mov	r2, r1
    5b98:	4408      	add	r0, r1
    5b9a:	fbb0 f0f1 	udiv	r0, r0, r1
    5b9e:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
    5ba2:	f640 30b8 	movw	r0, #3000	; 0xbb8
    5ba6:	f8a4 0098 	strh.w	r0, [r4, #152]	; 0x98
    5baa:	8963      	ldrh	r3, [r4, #10]
    5bac:	4628      	mov	r0, r5
    5bae:	f000 f81d 	bl	5bec <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc4>
    5bb2:	4639      	mov	r1, r7
    5bb4:	4630      	mov	r0, r6
    5bb6:	f007 fc4c 	bl	d452 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    5bba:	f006 f8a3 	bl	bd04 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    5bbe:	b118      	cbz	r0, 5bc8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa0>
    5bc0:	68e0      	ldr	r0, [r4, #12]
    5bc2:	f7ff ff7b 	bl	5abc <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ>
    5bc6:	b110      	cbz	r0, 5bce <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa6>
    5bc8:	f884 816c 	strb.w	r8, [r4, #364]	; 0x16c
    5bcc:	e7d9      	b.n	5b82 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5a>
    5bce:	f884 916c 	strb.w	r9, [r4, #364]	; 0x16c
    5bd2:	e7d6      	b.n	5b82 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5a>
    5bd4:	6841      	ldr	r1, [r0, #4]
    5bd6:	f8b4 319a 	ldrh.w	r3, [r4, #410]	; 0x19a
    5bda:	f8d4 2194 	ldr.w	r2, [r4, #404]	; 0x194
    5bde:	4628      	mov	r0, r5
    5be0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5be4:	f000 b802 	b.w	5bec <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc4>
    5be8:	01c9c37f 	.word	0x01c9c37f
    5bec:	b530      	push	{r4, r5, lr}
    5bee:	2400      	movs	r4, #0
    5bf0:	8684      	strh	r4, [r0, #52]	; 0x34
    5bf2:	8f04      	ldrh	r4, [r0, #56]	; 0x38
    5bf4:	4d13      	ldr	r5, [pc, #76]	; (5c44 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x11c>)
    5bf6:	434c      	muls	r4, r1
    5bf8:	fbb4 f4f2 	udiv	r4, r4, r2
    5bfc:	8704      	strh	r4, [r0, #56]	; 0x38
    5bfe:	f242 7410 	movw	r4, #10000	; 0x2710
    5c02:	4363      	muls	r3, r4
    5c04:	fbb3 f3f2 	udiv	r3, r3, r2
    5c08:	1c5b      	adds	r3, r3, #1
    5c0a:	b29b      	uxth	r3, r3
    5c0c:	fb03 f402 	mul.w	r4, r3, r2
    5c10:	86c3      	strh	r3, [r0, #54]	; 0x36
    5c12:	42ac      	cmp	r4, r5
    5c14:	d901      	bls.n	5c1a <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xf2>
    5c16:	1e5b      	subs	r3, r3, #1
    5c18:	86c3      	strh	r3, [r0, #54]	; 0x36
    5c1a:	4b0b      	ldr	r3, [pc, #44]	; (5c48 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x120>)
    5c1c:	f240 2471 	movw	r4, #625	; 0x271
    5c20:	fbb3 f3f2 	udiv	r3, r3, r2
    5c24:	1c5b      	adds	r3, r3, #1
    5c26:	8783      	strh	r3, [r0, #60]	; 0x3c
    5c28:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    5c2a:	4363      	muls	r3, r4
    5c2c:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    5c30:	1e5b      	subs	r3, r3, #1
    5c32:	fbb3 f3f2 	udiv	r3, r3, r2
    5c36:	62c3      	str	r3, [r0, #44]	; 0x2c
    5c38:	6a83      	ldr	r3, [r0, #40]	; 0x28
    5c3a:	434b      	muls	r3, r1
    5c3c:	fbb3 f1f2 	udiv	r1, r3, r2
    5c40:	6281      	str	r1, [r0, #40]	; 0x28
    5c42:	bd30      	pop	{r4, r5, pc}
    5c44:	01e84800 	.word	0x01e84800
    5c48:	02625a00 	.word	0x02625a00
    5c4c:	b570      	push	{r4, r5, r6, lr}
    5c4e:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
    5c52:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
    5c56:	2401      	movs	r4, #1
    5c58:	fb03 2101 	mla	r1, r3, r1, r2
    5c5c:	2225      	movs	r2, #37	; 0x25
    5c5e:	fbb1 f3f2 	udiv	r3, r1, r2
    5c62:	fb02 1113 	mls	r1, r2, r3, r1
    5c66:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    5c6a:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    5c6e:	f001 0307 	and.w	r3, r1, #7
    5c72:	7d92      	ldrb	r2, [r2, #22]
    5c74:	fa04 f303 	lsl.w	r3, r4, r3
    5c78:	421a      	tst	r2, r3
    5c7a:	d003      	beq.n	5c84 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x15c>
    5c7c:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    5c80:	2000      	movs	r0, #0
    5c82:	bd70      	pop	{r4, r5, r6, pc}
    5c84:	f890 2020 	ldrb.w	r2, [r0, #32]
    5c88:	fbb1 f3f2 	udiv	r3, r1, r2
    5c8c:	fb02 1113 	mls	r1, r2, r3, r1
    5c90:	1c49      	adds	r1, r1, #1
    5c92:	b2c9      	uxtb	r1, r1
    5c94:	2300      	movs	r3, #0
    5c96:	18c5      	adds	r5, r0, r3
    5c98:	7eea      	ldrb	r2, [r5, #27]
    5c9a:	428a      	cmp	r2, r1
    5c9c:	d311      	bcc.n	5cc2 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x19a>
    5c9e:	f895 5016 	ldrb.w	r5, [r5, #22]
    5ca2:	2200      	movs	r2, #0
    5ca4:	fa04 f602 	lsl.w	r6, r4, r2
    5ca8:	4235      	tst	r5, r6
    5caa:	d001      	beq.n	5cb0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x188>
    5cac:	1e49      	subs	r1, r1, #1
    5cae:	b2c9      	uxtb	r1, r1
    5cb0:	b121      	cbz	r1, 5cbc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x194>
    5cb2:	1c52      	adds	r2, r2, #1
    5cb4:	b2d2      	uxtb	r2, r2
    5cb6:	2a08      	cmp	r2, #8
    5cb8:	d3f4      	bcc.n	5ca4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x17c>
    5cba:	e004      	b.n	5cc6 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x19e>
    5cbc:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    5cc0:	e7dc      	b.n	5c7c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x154>
    5cc2:	1a89      	subs	r1, r1, r2
    5cc4:	b2c9      	uxtb	r1, r1
    5cc6:	1c5b      	adds	r3, r3, #1
    5cc8:	b2db      	uxtb	r3, r3
    5cca:	2b05      	cmp	r3, #5
    5ccc:	d3e3      	bcc.n	5c96 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x16e>
    5cce:	201f      	movs	r0, #31
    5cd0:	bd70      	pop	{r4, r5, r6, pc}
	...

00005cd4 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>:
    5cd4:	7841      	ldrb	r1, [r0, #1]
    5cd6:	b141      	cbz	r1, 5cea <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    5cd8:	78c0      	ldrb	r0, [r0, #3]
    5cda:	2819      	cmp	r0, #25
    5cdc:	d203      	bcs.n	5ce6 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x12>
    5cde:	4a04      	ldr	r2, [pc, #16]	; (5cf0 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x1c>)
    5ce0:	5c10      	ldrb	r0, [r2, r0]
    5ce2:	4288      	cmp	r0, r1
    5ce4:	d101      	bne.n	5cea <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    5ce6:	2001      	movs	r0, #1
    5ce8:	4770      	bx	lr
    5cea:	2000      	movs	r0, #0
    5cec:	4770      	bx	lr
    5cee:	0000      	.short	0x0000
    5cf0:	0000f7f8 	.word	0x0000f7f8

00005cf4 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>:
    5cf4:	b50c      	push	{r2, r3, lr}
    5cf6:	a20b      	add	r2, pc, #44	; (adr r2, 5d24 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x30>)
    5cf8:	e9d2 1200 	ldrd	r1, r2, [r2]
    5cfc:	e9cd 1200 	strd	r1, r2, [sp]
    5d00:	7901      	ldrb	r1, [r0, #4]
    5d02:	7940      	ldrb	r0, [r0, #5]
    5d04:	f001 0207 	and.w	r2, r1, #7
    5d08:	4669      	mov	r1, sp
    5d0a:	f81d 2002 	ldrb.w	r2, [sp, r2]
    5d0e:	2a01      	cmp	r2, #1
    5d10:	d804      	bhi.n	5d1c <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x28>
    5d12:	f000 0007 	and.w	r0, r0, #7
    5d16:	5c08      	ldrb	r0, [r1, r0]
    5d18:	2801      	cmp	r0, #1
    5d1a:	d901      	bls.n	5d20 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x2c>
    5d1c:	2000      	movs	r0, #0
    5d1e:	bd0c      	pop	{r2, r3, pc}
    5d20:	2001      	movs	r0, #1
    5d22:	bd0c      	pop	{r2, r3, pc}
    5d24:	02010100 	.word	0x02010100
    5d28:	03020201 	.word	0x03020201

00005d2c <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>:
    5d2c:	b510      	push	{r4, lr}
    5d2e:	2201      	movs	r2, #1
    5d30:	70c1      	strb	r1, [r0, #3]
    5d32:	2919      	cmp	r1, #25
    5d34:	d202      	bcs.n	5d3c <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x10>
    5d36:	4a06      	ldr	r2, [pc, #24]	; (5d50 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x24>)
    5d38:	5c52      	ldrb	r2, [r2, r1]
    5d3a:	e006      	b.n	5d4a <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    5d3c:	29ff      	cmp	r1, #255	; 0xff
    5d3e:	d004      	beq.n	5d4a <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    5d40:	f44f 716e 	mov.w	r1, #952	; 0x3b8
    5d44:	202a      	movs	r0, #42	; 0x2a
    5d46:	f7fd ffdd 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5d4a:	7042      	strb	r2, [r0, #1]
    5d4c:	bd10      	pop	{r4, pc}
    5d4e:	0000      	.short	0x0000
    5d50:	0000f7f8 	.word	0x0000f7f8

00005d54 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA>:
    5d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5d58:	ea5f 0900 	movs.w	r9, r0
    5d5c:	d006      	beq.n	5d6c <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x18>
    5d5e:	4d21      	ldr	r5, [pc, #132]	; (5de4 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x90>)
    5d60:	f105 0010 	add.w	r0, r5, #16
    5d64:	7b69      	ldrb	r1, [r5, #13]
    5d66:	4682      	mov	sl, r0
    5d68:	b119      	cbz	r1, 5d72 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x1e>
    5d6a:	e00b      	b.n	5d84 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x30>
    5d6c:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    5d70:	e005      	b.n	5d7e <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x2a>
    5d72:	2100      	movs	r1, #0
    5d74:	f007 fd56 	bl	d824 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa6>
    5d78:	b120      	cbz	r0, 5d84 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x30>
    5d7a:	f240 31d3 	movw	r1, #979	; 0x3d3
    5d7e:	202b      	movs	r0, #43	; 0x2b
    5d80:	f7fd ffc0 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5d84:	8a2e      	ldrh	r6, [r5, #16]
    5d86:	2000      	movs	r0, #0
    5d88:	f7fe f9c2 	bl	4110 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    5d8c:	4f16      	ldr	r7, [pc, #88]	; (5de8 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x94>)
    5d8e:	f8df 805c 	ldr.w	r8, [pc, #92]	; 5dec <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x98>
    5d92:	4604      	mov	r4, r0
    5d94:	6838      	ldr	r0, [r7, #0]
    5d96:	b158      	cbz	r0, 5db0 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x5c>
    5d98:	8a28      	ldrh	r0, [r5, #16]
    5d9a:	42a0      	cmp	r0, r4
    5d9c:	d308      	bcc.n	5db0 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x5c>
    5d9e:	1b00      	subs	r0, r0, r4
    5da0:	b2c0      	uxtb	r0, r0
    5da2:	2101      	movs	r1, #1
    5da4:	f006 fff9 	bl	cd9a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    5da8:	b148      	cbz	r0, 5dbe <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x6a>
    5daa:	4649      	mov	r1, r9
    5dac:	683a      	ldr	r2, [r7, #0]
    5dae:	e004      	b.n	5dba <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x66>
    5db0:	f8d8 2000 	ldr.w	r2, [r8]
    5db4:	b11a      	cbz	r2, 5dbe <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x6a>
    5db6:	8a28      	ldrh	r0, [r5, #16]
    5db8:	4649      	mov	r1, r9
    5dba:	4790      	blx	r2
    5dbc:	b968      	cbnz	r0, 5dda <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x86>
    5dbe:	2100      	movs	r1, #0
    5dc0:	4650      	mov	r0, sl
    5dc2:	f007 fd2f 	bl	d824 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa6>
    5dc6:	b910      	cbnz	r0, 5dce <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x7a>
    5dc8:	8a28      	ldrh	r0, [r5, #16]
    5dca:	42b0      	cmp	r0, r6
    5dcc:	d1e2      	bne.n	5d94 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x40>
    5dce:	4808      	ldr	r0, [pc, #32]	; (5df0 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x9c>)
    5dd0:	6801      	ldr	r1, [r0, #0]
    5dd2:	b129      	cbz	r1, 5de0 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x8c>
    5dd4:	4648      	mov	r0, r9
    5dd6:	4788      	blx	r1
    5dd8:	b110      	cbz	r0, 5de0 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x8c>
    5dda:	2001      	movs	r0, #1
    5ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5de0:	2000      	movs	r0, #0
    5de2:	e7fb      	b.n	5ddc <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x88>
    5de4:	20000dc0 	.word	0x20000dc0
    5de8:	20000240 	.word	0x20000240
    5dec:	20000244 	.word	0x20000244
    5df0:	2000024c 	.word	0x2000024c

00005df4 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI>:
    5df4:	b570      	push	{r4, r5, r6, lr}
    5df6:	0005      	movs	r5, r0
    5df8:	460c      	mov	r4, r1
    5dfa:	d02e      	beq.n	5e5a <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x66>
    5dfc:	4818      	ldr	r0, [pc, #96]	; (5e60 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x6c>)
    5dfe:	6802      	ldr	r2, [r0, #0]
    5e00:	b35a      	cbz	r2, 5e5a <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x66>
    5e02:	4628      	mov	r0, r5
    5e04:	4790      	blx	r2
    5e06:	b340      	cbz	r0, 5e5a <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x66>
    5e08:	7820      	ldrb	r0, [r4, #0]
    5e0a:	2811      	cmp	r0, #17
    5e0c:	d002      	beq.n	5e14 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x20>
    5e0e:	2814      	cmp	r0, #20
    5e10:	d003      	beq.n	5e1a <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x26>
    5e12:	e020      	b.n	5e56 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    5e14:	7920      	ldrb	r0, [r4, #4]
    5e16:	b1f0      	cbz	r0, 5e56 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    5e18:	e00a      	b.n	5e30 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x3c>
    5e1a:	7920      	ldrb	r0, [r4, #4]
    5e1c:	b120      	cbz	r0, 5e28 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x34>
    5e1e:	4628      	mov	r0, r5
    5e20:	f007 fef8 	bl	dc14 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    5e24:	b120      	cbz	r0, 5e30 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x3c>
    5e26:	e016      	b.n	5e56 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    5e28:	490e      	ldr	r1, [pc, #56]	; (5e64 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x70>)
    5e2a:	2000      	movs	r0, #0
    5e2c:	7348      	strb	r0, [r1, #13]
    5e2e:	e012      	b.n	5e56 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    5e30:	88e4      	ldrh	r4, [r4, #6]
    5e32:	2100      	movs	r1, #0
    5e34:	4620      	mov	r0, r4
    5e36:	f006 ffb0 	bl	cd9a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    5e3a:	b160      	cbz	r0, 5e56 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    5e3c:	8800      	ldrh	r0, [r0, #0]
    5e3e:	f007 f825 	bl	ce8c <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    5e42:	2100      	movs	r1, #0
    5e44:	4620      	mov	r0, r4
    5e46:	f7fe f9ff 	bl	4248 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    5e4a:	b120      	cbz	r0, 5e56 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    5e4c:	f44f 719a 	mov.w	r1, #308	; 0x134
    5e50:	202b      	movs	r0, #43	; 0x2b
    5e52:	f7fd ff57 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5e56:	2001      	movs	r0, #1
    5e58:	bd70      	pop	{r4, r5, r6, pc}
    5e5a:	2000      	movs	r0, #0
    5e5c:	bd70      	pop	{r4, r5, r6, pc}
    5e5e:	0000      	.short	0x0000
    5e60:	2000023c 	.word	0x2000023c
    5e64:	20000dc0 	.word	0x20000dc0

00005e68 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA>:
    5e68:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5e6c:	b087      	sub	sp, #28
    5e6e:	460c      	mov	r4, r1
    5e70:	a902      	add	r1, sp, #8
    5e72:	9807      	ldr	r0, [sp, #28]
    5e74:	f007 f8ca 	bl	d00c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    5e78:	2800      	cmp	r0, #0
    5e7a:	d17d      	bne.n	5f78 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x110>
    5e7c:	f8df 9120 	ldr.w	r9, [pc, #288]	; 5fa0 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x138>
    5e80:	f04f 0a01 	mov.w	sl, #1
    5e84:	4680      	mov	r8, r0
    5e86:	9803      	ldr	r0, [sp, #12]
    5e88:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
    5e8c:	2800      	cmp	r0, #0
    5e8e:	d00c      	beq.n	5eaa <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x42>
    5e90:	f8d9 2000 	ldr.w	r2, [r9]
    5e94:	b162      	cbz	r2, 5eb0 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x48>
    5e96:	4621      	mov	r1, r4
    5e98:	9807      	ldr	r0, [sp, #28]
    5e9a:	4790      	blx	r2
    5e9c:	b140      	cbz	r0, 5eb0 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x48>
    5e9e:	4620      	mov	r0, r4
    5ea0:	f000 f91a 	bl	60d8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe0>
    5ea4:	2800      	cmp	r0, #0
    5ea6:	d1ee      	bne.n	5e86 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x1e>
    5ea8:	2001      	movs	r0, #1
    5eaa:	b009      	add	sp, #36	; 0x24
    5eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5eb0:	9d03      	ldr	r5, [sp, #12]
    5eb2:	f895 012c 	ldrb.w	r0, [r5, #300]	; 0x12c
    5eb6:	3568      	adds	r5, #104	; 0x68
    5eb8:	b950      	cbnz	r0, 5ed0 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x68>
    5eba:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    5ebe:	f88d 0004 	strb.w	r0, [sp, #4]
    5ec2:	9801      	ldr	r0, [sp, #4]
    5ec4:	9001      	str	r0, [sp, #4]
    5ec6:	f89d 0004 	ldrb.w	r0, [sp, #4]
    5eca:	b108      	cbz	r0, 5ed0 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x68>
    5ecc:	2001      	movs	r0, #1
    5ece:	e000      	b.n	5ed2 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x6a>
    5ed0:	2000      	movs	r0, #0
    5ed2:	4683      	mov	fp, r0
    5ed4:	f895 0045 	ldrb.w	r0, [r5, #69]	; 0x45
    5ed8:	b1c0      	cbz	r0, 5f0c <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xa4>
    5eda:	f895 0046 	ldrb.w	r0, [r5, #70]	; 0x46
    5ede:	0780      	lsls	r0, r0, #30
    5ee0:	d514      	bpl.n	5f0c <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xa4>
    5ee2:	f884 8001 	strb.w	r8, [r4, #1]
    5ee6:	f884 a000 	strb.w	sl, [r4]
    5eea:	f884 8004 	strb.w	r8, [r4, #4]
    5eee:	9907      	ldr	r1, [sp, #28]
    5ef0:	f8a4 1005 	strh.w	r1, [r4, #5]
    5ef4:	f895 1047 	ldrb.w	r1, [r5, #71]	; 0x47
    5ef8:	71e1      	strb	r1, [r4, #7]
    5efa:	f8b5 1048 	ldrh.w	r1, [r5, #72]	; 0x48
    5efe:	8121      	strh	r1, [r4, #8]
    5f00:	f8b5 104a 	ldrh.w	r1, [r5, #74]	; 0x4a
    5f04:	8161      	strh	r1, [r4, #10]
    5f06:	f885 8045 	strb.w	r8, [r5, #69]	; 0x45
    5f0a:	e7c8      	b.n	5e9e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x36>
    5f0c:	9807      	ldr	r0, [sp, #28]
    5f0e:	f7fe fb43 	bl	4598 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    5f12:	0007      	movs	r7, r0
    5f14:	d00d      	beq.n	5f32 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xca>
    5f16:	f006 fd4e 	bl	c9b6 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>
    5f1a:	0006      	movs	r6, r0
    5f1c:	d015      	beq.n	5f4a <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xe2>
    5f1e:	f884 8001 	strb.w	r8, [r4, #1]
    5f22:	200d      	movs	r0, #13
    5f24:	7020      	strb	r0, [r4, #0]
    5f26:	9807      	ldr	r0, [sp, #28]
    5f28:	80e0      	strh	r0, [r4, #6]
    5f2a:	8126      	strh	r6, [r4, #8]
    5f2c:	f884 a004 	strb.w	sl, [r4, #4]
    5f30:	e007      	b.n	5f42 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xda>
    5f32:	f240 213a 	movw	r1, #570	; 0x23a
    5f36:	e02d      	b.n	5f94 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x12c>
    5f38:	2100      	movs	r1, #0
    5f3a:	4638      	mov	r0, r7
    5f3c:	460a      	mov	r2, r1
    5f3e:	f006 fe48 	bl	cbd2 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    5f42:	1e76      	subs	r6, r6, #1
    5f44:	b2b6      	uxth	r6, r6
    5f46:	d2f7      	bcs.n	5f38 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xd0>
    5f48:	e7a9      	b.n	5e9e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x36>
    5f4a:	9807      	ldr	r0, [sp, #28]
    5f4c:	f7fe fb0e 	bl	456c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    5f50:	b1f0      	cbz	r0, 5f90 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x128>
    5f52:	f1bb 0f00 	cmp.w	fp, #0
    5f56:	d020      	beq.n	5f9a <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x132>
    5f58:	f006 fc65 	bl	c826 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    5f5c:	b160      	cbz	r0, 5f78 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x110>
    5f5e:	9807      	ldr	r0, [sp, #28]
    5f60:	f006 ff94 	bl	ce8c <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    5f64:	2100      	movs	r1, #0
    5f66:	9807      	ldr	r0, [sp, #28]
    5f68:	f7fe f96e 	bl	4248 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    5f6c:	f884 8001 	strb.w	r8, [r4, #1]
    5f70:	210a      	movs	r1, #10
    5f72:	4640      	mov	r0, r8
    5f74:	7021      	strb	r1, [r4, #0]
    5f76:	e000      	b.n	5f7a <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x112>
    5f78:	e00f      	b.n	5f9a <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x132>
    5f7a:	f884 8004 	strb.w	r8, [r4, #4]
    5f7e:	9907      	ldr	r1, [sp, #28]
    5f80:	f8a4 1005 	strh.w	r1, [r4, #5]
    5f84:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
    5f88:	71e1      	strb	r1, [r4, #7]
    5f8a:	3524      	adds	r5, #36	; 0x24
    5f8c:	7028      	strb	r0, [r5, #0]
    5f8e:	e786      	b.n	5e9e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x36>
    5f90:	f44f 7116 	mov.w	r1, #600	; 0x258
    5f94:	202b      	movs	r0, #43	; 0x2b
    5f96:	f7fd feb5 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5f9a:	2000      	movs	r0, #0
    5f9c:	e785      	b.n	5eaa <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x42>
    5f9e:	0000      	.short	0x0000
    5fa0:	20000248 	.word	0x20000248

00005fa4 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>:
    5fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5fa8:	4c12      	ldr	r4, [pc, #72]	; (5ff4 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    5faa:	4607      	mov	r7, r0
    5fac:	460e      	mov	r6, r1
    5fae:	7de0      	ldrb	r0, [r4, #23]
    5fb0:	b110      	cbz	r0, 5fb8 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x14>
    5fb2:	8b20      	ldrh	r0, [r4, #24]
    5fb4:	2800      	cmp	r0, #0
    5fb6:	d012      	beq.n	5fde <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    5fb8:	480e      	ldr	r0, [pc, #56]	; (5ff4 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    5fba:	300e      	adds	r0, #14
    5fbc:	4680      	mov	r8, r0
    5fbe:	f007 fbdb 	bl	d778 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    5fc2:	b9a8      	cbnz	r0, 5ff0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    5fc4:	89e5      	ldrh	r5, [r4, #14]
    5fc6:	89e0      	ldrh	r0, [r4, #14]
    5fc8:	4632      	mov	r2, r6
    5fca:	4639      	mov	r1, r7
    5fcc:	f007 fbe3 	bl	d796 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x18>
    5fd0:	b138      	cbz	r0, 5fe2 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3e>
    5fd2:	7de0      	ldrb	r0, [r4, #23]
    5fd4:	b110      	cbz	r0, 5fdc <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x38>
    5fd6:	8b20      	ldrh	r0, [r4, #24]
    5fd8:	1e40      	subs	r0, r0, #1
    5fda:	8320      	strh	r0, [r4, #24]
    5fdc:	2001      	movs	r0, #1
    5fde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5fe2:	4640      	mov	r0, r8
    5fe4:	f007 fbc8 	bl	d778 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    5fe8:	b910      	cbnz	r0, 5ff0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    5fea:	89e0      	ldrh	r0, [r4, #14]
    5fec:	42a8      	cmp	r0, r5
    5fee:	d1ea      	bne.n	5fc6 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x22>
    5ff0:	2000      	movs	r0, #0
    5ff2:	e7f4      	b.n	5fde <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    5ff4:	20000dc0 	.word	0x20000dc0

00005ff8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    5ff8:	b510      	push	{r4, lr}
    5ffa:	7901      	ldrb	r1, [r0, #4]
    5ffc:	b119      	cbz	r1, 6006 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    5ffe:	2901      	cmp	r1, #1
    6000:	d006      	beq.n	6010 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    6002:	2000      	movs	r0, #0
    6004:	bd10      	pop	{r4, pc}
    6006:	8842      	ldrh	r2, [r0, #2]
    6008:	6883      	ldr	r3, [r0, #8]
    600a:	8800      	ldrh	r0, [r0, #0]
    600c:	2102      	movs	r1, #2
    600e:	e003      	b.n	6018 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    6010:	8842      	ldrh	r2, [r0, #2]
    6012:	6883      	ldr	r3, [r0, #8]
    6014:	8800      	ldrh	r0, [r0, #0]
    6016:	2101      	movs	r1, #1
    6018:	f000 f808 	bl	602c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x34>
    601c:	b910      	cbnz	r0, 6024 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2c>
    601e:	4902      	ldr	r1, [pc, #8]	; (6028 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x30>)
    6020:	2001      	movs	r0, #1
    6022:	7008      	strb	r0, [r1, #0]
    6024:	2001      	movs	r0, #1
    6026:	bd10      	pop	{r4, pc}
    6028:	20000dc0 	.word	0x20000dc0
    602c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    6030:	468a      	mov	sl, r1
    6032:	4699      	mov	r9, r3
    6034:	4615      	mov	r5, r2
    6036:	4604      	mov	r4, r0
    6038:	a901      	add	r1, sp, #4
    603a:	f006 ffe7 	bl	d00c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    603e:	bbe0      	cbnz	r0, 60ba <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xc2>
    6040:	9f02      	ldr	r7, [sp, #8]
    6042:	f04f 0800 	mov.w	r8, #0
    6046:	3768      	adds	r7, #104	; 0x68
    6048:	b18d      	cbz	r5, 606e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x76>
    604a:	4620      	mov	r0, r4
    604c:	f7fe faa4 	bl	4598 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    6050:	0004      	movs	r4, r0
    6052:	d00f      	beq.n	6074 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x7c>
    6054:	4629      	mov	r1, r5
    6056:	f006 fced 	bl	ca34 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    605a:	0006      	movs	r6, r0
    605c:	d003      	beq.n	6066 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6e>
    605e:	481d      	ldr	r0, [pc, #116]	; (60d4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xdc>)
    6060:	8880      	ldrh	r0, [r0, #4]
    6062:	42a8      	cmp	r0, r5
    6064:	d208      	bcs.n	6078 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x80>
    6066:	2000      	movs	r0, #0
    6068:	b004      	add	sp, #16
    606a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    606e:	2001      	movs	r0, #1
    6070:	7538      	strb	r0, [r7, #20]
    6072:	e029      	b.n	60c8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd0>
    6074:	2189      	movs	r1, #137	; 0x89
    6076:	e02a      	b.n	60ce <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd6>
    6078:	4620      	mov	r0, r4
    607a:	4631      	mov	r1, r6
    607c:	aa03      	add	r2, sp, #12
    607e:	f006 fcd2 	bl	ca26 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    6082:	9803      	ldr	r0, [sp, #12]
    6084:	f8a0 8000 	strh.w	r8, [r0]
    6088:	f880 8002 	strb.w	r8, [r0, #2]
    608c:	7d39      	ldrb	r1, [r7, #20]
    608e:	b109      	cbz	r1, 6094 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x9c>
    6090:	f04f 0a02 	mov.w	sl, #2
    6094:	4651      	mov	r1, sl
    6096:	f007 fac6 	bl	d626 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    609a:	4631      	mov	r1, r6
    609c:	2603      	movs	r6, #3
    609e:	4620      	mov	r0, r4
    60a0:	464a      	mov	r2, r9
    60a2:	462b      	mov	r3, r5
    60a4:	9600      	str	r6, [sp, #0]
    60a6:	f006 fba7 	bl	c7f8 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>
    60aa:	4620      	mov	r0, r4
    60ac:	4629      	mov	r1, r5
    60ae:	f006 fc5e 	bl	c96e <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    60b2:	b158      	cbz	r0, 60cc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd4>
    60b4:	4644      	mov	r4, r8
    60b6:	a801      	add	r0, sp, #4
    60b8:	e000      	b.n	60bc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xc4>
    60ba:	e005      	b.n	60c8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd0>
    60bc:	f007 fb5f 	bl	d77e <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    60c0:	9802      	ldr	r0, [sp, #8]
    60c2:	f8a0 40f2 	strh.w	r4, [r0, #242]	; 0xf2
    60c6:	753c      	strb	r4, [r7, #20]
    60c8:	2001      	movs	r0, #1
    60ca:	e7cd      	b.n	6068 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x70>
    60cc:	219f      	movs	r1, #159	; 0x9f
    60ce:	202b      	movs	r0, #43	; 0x2b
    60d0:	f7fd fe18 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    60d4:	20000dc0 	.word	0x20000dc0
    60d8:	b510      	push	{r4, lr}
    60da:	492c      	ldr	r1, [pc, #176]	; (618c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x194>)
    60dc:	b086      	sub	sp, #24
    60de:	7d8a      	ldrb	r2, [r1, #22]
    60e0:	7801      	ldrb	r1, [r0, #0]
    60e2:	07d3      	lsls	r3, r2, #31
    60e4:	d101      	bne.n	60ea <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xf2>
    60e6:	2919      	cmp	r1, #25
    60e8:	d004      	beq.n	60f4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xfc>
    60ea:	2918      	cmp	r1, #24
    60ec:	d01e      	beq.n	612c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x134>
    60ee:	2912      	cmp	r1, #18
    60f0:	d045      	beq.n	617e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x186>
    60f2:	e049      	b.n	6188 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x190>
    60f4:	8880      	ldrh	r0, [r0, #4]
    60f6:	f8ad 0000 	strh.w	r0, [sp]
    60fa:	a902      	add	r1, sp, #8
    60fc:	f006 ff86 	bl	d00c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6100:	b108      	cbz	r0, 6106 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x10e>
    6102:	2158      	movs	r1, #88	; 0x58
    6104:	e035      	b.n	6172 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x17a>
    6106:	9803      	ldr	r0, [sp, #12]
    6108:	f810 1f5e 	ldrb.w	r1, [r0, #94]!
    610c:	f88d 1002 	strb.w	r1, [sp, #2]
    6110:	7841      	ldrb	r1, [r0, #1]
    6112:	f88d 1003 	strb.w	r1, [sp, #3]
    6116:	8840      	ldrh	r0, [r0, #2]
    6118:	f8ad 0004 	strh.w	r0, [sp, #4]
    611c:	2102      	movs	r1, #2
    611e:	4668      	mov	r0, sp
    6120:	f008 ff4e 	bl	efc0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    6124:	b340      	cbz	r0, 6178 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x180>
    6126:	f240 114d 	movw	r1, #333	; 0x14d
    612a:	e022      	b.n	6172 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x17a>
    612c:	0791      	lsls	r1, r2, #30
    612e:	d42b      	bmi.n	6188 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x190>
    6130:	8884      	ldrh	r4, [r0, #4]
    6132:	a903      	add	r1, sp, #12
    6134:	4620      	mov	r0, r4
    6136:	f008 fdae 	bl	ec96 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    613a:	b110      	cbz	r0, 6142 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x14a>
    613c:	f44f 71aa 	mov.w	r1, #340	; 0x154
    6140:	e017      	b.n	6172 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x17a>
    6142:	f8ad 4000 	strh.w	r4, [sp]
    6146:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    614a:	f8ad 0002 	strh.w	r0, [sp, #2]
    614e:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    6152:	f8ad 0004 	strh.w	r0, [sp, #4]
    6156:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    615a:	f8ad 0006 	strh.w	r0, [sp, #6]
    615e:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    6162:	f8ad 0008 	strh.w	r0, [sp, #8]
    6166:	4668      	mov	r0, sp
    6168:	f008 fe32 	bl	edd0 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    616c:	b120      	cbz	r0, 6178 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x180>
    616e:	f240 115d 	movw	r1, #349	; 0x15d
    6172:	202b      	movs	r0, #43	; 0x2b
    6174:	f7fd fdc6 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6178:	2001      	movs	r0, #1
    617a:	b006      	add	sp, #24
    617c:	bd10      	pop	{r4, pc}
    617e:	0751      	lsls	r1, r2, #29
    6180:	d402      	bmi.n	6188 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x190>
    6182:	7b80      	ldrb	r0, [r0, #14]
    6184:	07c0      	lsls	r0, r0, #31
    6186:	d0f7      	beq.n	6178 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x180>
    6188:	2000      	movs	r0, #0
    618a:	e7f6      	b.n	617a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x182>
    618c:	20000dc0 	.word	0x20000dc0

00006190 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
    6190:	b570      	push	{r4, r5, r6, lr}
    6192:	4604      	mov	r4, r0
    6194:	7c00      	ldrb	r0, [r0, #16]
    6196:	b300      	cbz	r0, 61da <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    6198:	2802      	cmp	r0, #2
    619a:	d01e      	beq.n	61da <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    619c:	f05f 0001 	movs.w	r0, #1
    61a0:	f104 0149 	add.w	r1, r4, #73	; 0x49
    61a4:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
    61a8:	460d      	mov	r5, r1
    61aa:	b1c0      	cbz	r0, 61de <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4e>
    61ac:	7de0      	ldrb	r0, [r4, #23]
    61ae:	b1f0      	cbz	r0, 61ee <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x5e>
    61b0:	f8d4 0011 	ldr.w	r0, [r4, #17]
    61b4:	f8c4 0049 	str.w	r0, [r4, #73]	; 0x49
    61b8:	f8b4 0015 	ldrh.w	r0, [r4, #21]
    61bc:	f8a4 004d 	strh.w	r0, [r4, #77]	; 0x4d
    61c0:	7c20      	ldrb	r0, [r4, #16]
    61c2:	f007 fc95 	bl	daf0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xcc>
    61c6:	7620      	strb	r0, [r4, #24]
    61c8:	2008      	movs	r0, #8
    61ca:	7660      	strb	r0, [r4, #25]
    61cc:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    61d0:	4629      	mov	r1, r5
    61d2:	f007 fc79 	bl	dac8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xa4>
    61d6:	b9a8      	cbnz	r0, 6204 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x74>
    61d8:	e00e      	b.n	61f8 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x68>
    61da:	2000      	movs	r0, #0
    61dc:	e7e0      	b.n	61a0 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10>
    61de:	2000      	movs	r0, #0
    61e0:	f7fe fc52 	bl	4a88 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    61e4:	2800      	cmp	r0, #0
    61e6:	d1eb      	bne.n	61c0 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x30>
    61e8:	f240 417f 	movw	r1, #1151	; 0x47f
    61ec:	e001      	b.n	61f2 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x62>
    61ee:	f240 4183 	movw	r1, #1155	; 0x483
    61f2:	202d      	movs	r0, #45	; 0x2d
    61f4:	f7fd fd86 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    61f8:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    61fc:	4629      	mov	r1, r5
    61fe:	f007 fc6c 	bl	dada <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb6>
    6202:	b100      	cbz	r0, 6206 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x76>
    6204:	2001      	movs	r0, #1
    6206:	76a0      	strb	r0, [r4, #26]
    6208:	7e20      	ldrb	r0, [r4, #24]
    620a:	b910      	cbnz	r0, 6212 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x82>
    620c:	78a0      	ldrb	r0, [r4, #2]
    620e:	0740      	lsls	r0, r0, #29
    6210:	d506      	bpl.n	6220 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x90>
    6212:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
    6216:	f104 0150 	add.w	r1, r4, #80	; 0x50
    621a:	f006 feb4 	bl	cf86 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    621e:	7660      	strb	r0, [r4, #25]
    6220:	2500      	movs	r5, #0
    6222:	6425      	str	r5, [r4, #64]	; 0x40
    6224:	f005 fc24 	bl	ba70 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    6228:	6460      	str	r0, [r4, #68]	; 0x44
    622a:	2100      	movs	r1, #0
    622c:	4620      	mov	r0, r4
    622e:	f007 fdad 	bl	dd8c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8e>
    6232:	f884 5056 	strb.w	r5, [r4, #86]	; 0x56
    6236:	78a0      	ldrb	r0, [r4, #2]
    6238:	0740      	lsls	r0, r0, #29
    623a:	d508      	bpl.n	624e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbe>
    623c:	7e20      	ldrb	r0, [r4, #24]
    623e:	2800      	cmp	r0, #0
    6240:	d005      	beq.n	624e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbe>
    6242:	4620      	mov	r0, r4
    6244:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6248:	2100      	movs	r1, #0
    624a:	f000 bdcd 	b.w	6de8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x600>
    624e:	bd70      	pop	{r4, r5, r6, pc}

00006250 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA>:
    6250:	b508      	push	{r3, lr}
    6252:	f890 20a8 	ldrb.w	r2, [r0, #168]	; 0xa8
    6256:	f88d 2000 	strb.w	r2, [sp]
    625a:	9a00      	ldr	r2, [sp, #0]
    625c:	9200      	str	r2, [sp, #0]
    625e:	f89d 3000 	ldrb.w	r3, [sp]
    6262:	2200      	movs	r2, #0
    6264:	b163      	cbz	r3, 6280 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x30>
    6266:	704a      	strb	r2, [r1, #1]
    6268:	2317      	movs	r3, #23
    626a:	700b      	strb	r3, [r1, #0]
    626c:	f850 3fa9 	ldr.w	r3, [r0, #169]!
    6270:	604b      	str	r3, [r1, #4]
    6272:	6843      	ldr	r3, [r0, #4]
    6274:	608b      	str	r3, [r1, #8]
    6276:	7a03      	ldrb	r3, [r0, #8]
    6278:	730b      	strb	r3, [r1, #12]
    627a:	f800 2c01 	strb.w	r2, [r0, #-1]
    627e:	e03b      	b.n	62f8 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    6280:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    6284:	f88d 3000 	strb.w	r3, [sp]
    6288:	9b00      	ldr	r3, [sp, #0]
    628a:	9300      	str	r3, [sp, #0]
    628c:	f89d 3000 	ldrb.w	r3, [sp]
    6290:	b143      	cbz	r3, 62a4 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x54>
    6292:	704a      	strb	r2, [r1, #1]
    6294:	2305      	movs	r3, #5
    6296:	700b      	strb	r3, [r1, #0]
    6298:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    629c:	604b      	str	r3, [r1, #4]
    629e:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
    62a2:	e029      	b.n	62f8 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    62a4:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
    62a8:	f88d 3000 	strb.w	r3, [sp]
    62ac:	9b00      	ldr	r3, [sp, #0]
    62ae:	9300      	str	r3, [sp, #0]
    62b0:	f89d 3000 	ldrb.w	r3, [sp]
    62b4:	b11b      	cbz	r3, 62be <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x6e>
    62b6:	bf00      	nop
    62b8:	f007 fd3f 	bl	dd3a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3c>
    62bc:	e01c      	b.n	62f8 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    62be:	f890 309a 	ldrb.w	r3, [r0, #154]	; 0x9a
    62c2:	f88d 3000 	strb.w	r3, [sp]
    62c6:	9b00      	ldr	r3, [sp, #0]
    62c8:	9300      	str	r3, [sp, #0]
    62ca:	f89d 3000 	ldrb.w	r3, [sp]
    62ce:	b1ab      	cbz	r3, 62fc <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xac>
    62d0:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
    62d4:	f88d 3000 	strb.w	r3, [sp]
    62d8:	9b00      	ldr	r3, [sp, #0]
    62da:	9300      	str	r3, [sp, #0]
    62dc:	f89d 3000 	ldrb.w	r3, [sp]
    62e0:	2b00      	cmp	r3, #0
    62e2:	d1e9      	bne.n	62b8 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x68>
    62e4:	704a      	strb	r2, [r1, #1]
    62e6:	2314      	movs	r3, #20
    62e8:	700b      	strb	r3, [r1, #0]
    62ea:	f850 3f9c 	ldr.w	r3, [r0, #156]!
    62ee:	604b      	str	r3, [r1, #4]
    62f0:	8883      	ldrh	r3, [r0, #4]
    62f2:	810b      	strh	r3, [r1, #8]
    62f4:	f800 2c02 	strb.w	r2, [r0, #-2]
    62f8:	2001      	movs	r0, #1
    62fa:	bd08      	pop	{r3, pc}
    62fc:	2000      	movs	r0, #0
    62fe:	bd08      	pop	{r3, pc}

00006300 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
    6300:	b530      	push	{r4, r5, lr}
    6302:	460c      	mov	r4, r1
    6304:	b08d      	sub	sp, #52	; 0x34
    6306:	4605      	mov	r5, r0
    6308:	4601      	mov	r1, r0
    630a:	2220      	movs	r2, #32
    630c:	a802      	add	r0, sp, #8
    630e:	f005 fd2f 	bl	bd70 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6312:	a80a      	add	r0, sp, #40	; 0x28
    6314:	f007 fde7 	bl	dee6 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    6318:	7aa0      	ldrb	r0, [r4, #10]
    631a:	f88d 0018 	strb.w	r0, [sp, #24]
    631e:	7820      	ldrb	r0, [r4, #0]
    6320:	f88d 0008 	strb.w	r0, [sp, #8]
    6324:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    6328:	f8ad 0000 	strh.w	r0, [sp]
    632c:	f89d 0000 	ldrb.w	r0, [sp]
    6330:	f000 0101 	and.w	r1, r0, #1
    6334:	f3c0 0240 	ubfx	r2, r0, #1, #1
    6338:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    633c:	f3c0 0280 	ubfx	r2, r0, #2, #1
    6340:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    6344:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    6348:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    634c:	f3c0 1200 	ubfx	r2, r0, #4, #1
    6350:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    6354:	f3c0 1240 	ubfx	r2, r0, #5, #1
    6358:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    635c:	f3c0 1080 	ubfx	r0, r0, #6, #1
    6360:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
    6364:	f8ad 000a 	strh.w	r0, [sp, #10]
    6368:	7d20      	ldrb	r0, [r4, #20]
    636a:	2801      	cmp	r0, #1
    636c:	d006      	beq.n	637c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    636e:	2802      	cmp	r0, #2
    6370:	d004      	beq.n	637c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    6372:	f240 2185 	movw	r1, #645	; 0x285
    6376:	2006      	movs	r0, #6
    6378:	f7fd fcc4 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    637c:	f88d 000c 	strb.w	r0, [sp, #12]
    6380:	7a61      	ldrb	r1, [r4, #9]
    6382:	a80a      	add	r0, sp, #40	; 0x28
    6384:	f007 fd96 	bl	deb4 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
    6388:	7d20      	ldrb	r0, [r4, #20]
    638a:	2101      	movs	r1, #1
    638c:	2802      	cmp	r0, #2
    638e:	d102      	bne.n	6396 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x96>
    6390:	7d60      	ldrb	r0, [r4, #21]
    6392:	1c40      	adds	r0, r0, #1
    6394:	b2c1      	uxtb	r1, r0
    6396:	7ea0      	ldrb	r0, [r4, #26]
    6398:	1c40      	adds	r0, r0, #1
    639a:	b2c2      	uxtb	r2, r0
    639c:	a80a      	add	r0, sp, #40	; 0x28
    639e:	f007 fd50 	bl	de42 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
    63a2:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    63a6:	0700      	lsls	r0, r0, #28
    63a8:	d501      	bpl.n	63ae <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xae>
    63aa:	2000      	movs	r0, #0
    63ac:	e020      	b.n	63f0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf0>
    63ae:	a80a      	add	r0, sp, #40	; 0x28
    63b0:	f007 fd59 	bl	de66 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    63b4:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    63b8:	2228      	movs	r2, #40	; 0x28
    63ba:	f000 fdbd 	bl	6f38 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    63be:	f240 2171 	movw	r1, #625	; 0x271
    63c2:	f200 20d5 	addw	r0, r0, #725	; 0x2d5
    63c6:	fbb0 f0f1 	udiv	r0, r0, r1
    63ca:	4348      	muls	r0, r1
    63cc:	f8d4 1002 	ldr.w	r1, [r4, #2]
    63d0:	f240 2371 	movw	r3, #625	; 0x271
    63d4:	0a0a      	lsrs	r2, r1, #8
    63d6:	f240 2171 	movw	r1, #625	; 0x271
    63da:	434a      	muls	r2, r1
    63dc:	f8d4 1005 	ldr.w	r1, [r4, #5]
    63e0:	0a09      	lsrs	r1, r1, #8
    63e2:	4359      	muls	r1, r3
    63e4:	4290      	cmp	r0, r2
    63e6:	d801      	bhi.n	63ec <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xec>
    63e8:	9204      	str	r2, [sp, #16]
    63ea:	e004      	b.n	63f6 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    63ec:	4288      	cmp	r0, r1
    63ee:	d801      	bhi.n	63f4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf4>
    63f0:	9004      	str	r0, [sp, #16]
    63f2:	e000      	b.n	63f6 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    63f4:	9104      	str	r1, [sp, #16]
    63f6:	7ca0      	ldrb	r0, [r4, #18]
    63f8:	f88d 0017 	strb.w	r0, [sp, #23]
    63fc:	7e20      	ldrb	r0, [r4, #24]
    63fe:	2801      	cmp	r0, #1
    6400:	d000      	beq.n	6404 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x104>
    6402:	2000      	movs	r0, #0
    6404:	f88d 0014 	strb.w	r0, [sp, #20]
    6408:	f895 0074 	ldrb.w	r0, [r5, #116]	; 0x74
    640c:	f895 0075 	ldrb.w	r0, [r5, #117]	; 0x75
    6410:	2220      	movs	r2, #32
    6412:	a902      	add	r1, sp, #8
    6414:	4628      	mov	r0, r5
    6416:	f005 fcab 	bl	bd70 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    641a:	980a      	ldr	r0, [sp, #40]	; 0x28
    641c:	6228      	str	r0, [r5, #32]
    641e:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
    6422:	84a8      	strh	r0, [r5, #36]	; 0x24
    6424:	7ae0      	ldrb	r0, [r4, #11]
    6426:	b168      	cbz	r0, 6444 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x144>
    6428:	2802      	cmp	r0, #2
    642a:	d00b      	beq.n	6444 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x144>
    642c:	f05f 0001 	movs.w	r0, #1
    6430:	f885 004f 	strb.w	r0, [r5, #79]	; 0x4f
    6434:	68e0      	ldr	r0, [r4, #12]
    6436:	6528      	str	r0, [r5, #80]	; 0x50
    6438:	8a20      	ldrh	r0, [r4, #16]
    643a:	f8a5 0054 	strh.w	r0, [r5, #84]	; 0x54
    643e:	b00d      	add	sp, #52	; 0x34
    6440:	2000      	movs	r0, #0
    6442:	bd30      	pop	{r4, r5, pc}
    6444:	2000      	movs	r0, #0
    6446:	e7f3      	b.n	6430 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x130>

00006448 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
    6448:	4a0a      	ldr	r2, [pc, #40]	; (6474 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x2c>)
    644a:	b510      	push	{r4, lr}
    644c:	2100      	movs	r1, #0
    644e:	7011      	strb	r1, [r2, #0]
    6450:	4c09      	ldr	r4, [pc, #36]	; (6478 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x30>)
    6452:	6060      	str	r0, [r4, #4]
    6454:	f000 f822 	bl	649c <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    6458:	b110      	cbz	r0, 6460 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x18>
    645a:	f44f 7148 	mov.w	r1, #800	; 0x320
    645e:	e004      	b.n	646a <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x22>
    6460:	68a0      	ldr	r0, [r4, #8]
    6462:	2800      	cmp	r0, #0
    6464:	d104      	bne.n	6470 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x28>
    6466:	f240 3123 	movw	r1, #803	; 0x323
    646a:	202d      	movs	r0, #45	; 0x2d
    646c:	f7fd fc4a 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6470:	bd10      	pop	{r4, pc}
    6472:	0000      	.short	0x0000
    6474:	20000ddc 	.word	0x20000ddc
    6478:	20000104 	.word	0x20000104

0000647c <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
    647c:	4902      	ldr	r1, [pc, #8]	; (6488 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
    647e:	4801      	ldr	r0, [pc, #4]	; (6484 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
    6480:	6088      	str	r0, [r1, #8]
    6482:	4770      	bx	lr
    6484:	00006f20 	.word	0x00006f20
    6488:	20000104 	.word	0x20000104

0000648c <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
    648c:	4902      	ldr	r1, [pc, #8]	; (6498 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0xc>)
    648e:	6008      	str	r0, [r1, #0]
    6490:	6889      	ldr	r1, [r1, #8]
    6492:	6809      	ldr	r1, [r1, #0]
    6494:	4708      	bx	r1
    6496:	0000      	.short	0x0000
    6498:	20000104 	.word	0x20000104

0000649c <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
    649c:	4808      	ldr	r0, [pc, #32]	; (64c0 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    649e:	b510      	push	{r4, lr}
    64a0:	7801      	ldrb	r1, [r0, #0]
    64a2:	b111      	cbz	r1, 64aa <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
    64a4:	240c      	movs	r4, #12
    64a6:	4620      	mov	r0, r4
    64a8:	bd10      	pop	{r4, pc}
    64aa:	2400      	movs	r4, #0
    64ac:	6004      	str	r4, [r0, #0]
    64ae:	6044      	str	r4, [r0, #4]
    64b0:	6084      	str	r4, [r0, #8]
    64b2:	60c4      	str	r4, [r0, #12]
    64b4:	f004 f92e 	bl	a714 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    64b8:	f003 ff70 	bl	a39c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    64bc:	e7f3      	b.n	64a6 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xa>
    64be:	0000      	.short	0x0000
    64c0:	20000ddc 	.word	0x20000ddc

000064c4 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
    64c4:	4904      	ldr	r1, [pc, #16]	; (64d8 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x14>)
    64c6:	b510      	push	{r4, lr}
    64c8:	7809      	ldrb	r1, [r1, #0]
    64ca:	2901      	cmp	r1, #1
    64cc:	d101      	bne.n	64d2 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xe>
    64ce:	f000 fb77 	bl	6bc0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d8>
    64d2:	2000      	movs	r0, #0
    64d4:	bd10      	pop	{r4, pc}
    64d6:	0000      	.short	0x0000
    64d8:	20000ddc 	.word	0x20000ddc

000064dc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>:
    64dc:	4902      	ldr	r1, [pc, #8]	; (64e8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xc>)
    64de:	4801      	ldr	r0, [pc, #4]	; (64e4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8>)
    64e0:	6008      	str	r0, [r1, #0]
    64e2:	4770      	bx	lr
    64e4:	00006d0d 	.word	0x00006d0d
    64e8:	20000110 	.word	0x20000110
    64ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    64f0:	000f      	movs	r7, r1
    64f2:	4604      	mov	r4, r0
    64f4:	d023      	beq.n	653e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x62>
    64f6:	f104 0020 	add.w	r0, r4, #32
    64fa:	4605      	mov	r5, r0
    64fc:	f007 fcdc 	bl	deb8 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    6500:	b9b0      	cbnz	r0, 6530 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x54>
    6502:	78a0      	ldrb	r0, [r4, #2]
    6504:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    6508:	b350      	cbz	r0, 6560 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x84>
    650a:	4628      	mov	r0, r5
    650c:	f007 fcab 	bl	de66 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    6510:	4606      	mov	r6, r0
    6512:	4628      	mov	r0, r5
    6514:	f007 fcd0 	bl	deb8 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    6518:	1a30      	subs	r0, r6, r0
    651a:	b2c0      	uxtb	r0, r0
    651c:	f007 fd21 	bl	df62 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    6520:	4601      	mov	r1, r0
    6522:	4835      	ldr	r0, [pc, #212]	; (65f8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x11c>)
    6524:	6842      	ldr	r2, [r0, #4]
    6526:	4411      	add	r1, r2
    6528:	6041      	str	r1, [r0, #4]
    652a:	4628      	mov	r0, r5
    652c:	f007 fce2 	bl	def4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    6530:	4628      	mov	r0, r5
    6532:	f007 fca4 	bl	de7e <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    6536:	4601      	mov	r1, r0
    6538:	4620      	mov	r0, r4
    653a:	f007 fc63 	bl	de04 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x106>
    653e:	4d2f      	ldr	r5, [pc, #188]	; (65fc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x120>)
    6540:	f894 6056 	ldrb.w	r6, [r4, #86]	; 0x56
    6544:	2100      	movs	r1, #0
    6546:	6868      	ldr	r0, [r5, #4]
    6548:	8001      	strh	r1, [r0, #0]
    654a:	f007 fc71 	bl	de30 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x132>
    654e:	8860      	ldrh	r0, [r4, #2]
    6550:	2813      	cmp	r0, #19
    6552:	d013      	beq.n	657c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xa0>
    6554:	dc09      	bgt.n	656a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8e>
    6556:	2810      	cmp	r0, #16
    6558:	d036      	beq.n	65c8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xec>
    655a:	2812      	cmp	r0, #18
    655c:	d109      	bne.n	6572 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x96>
    655e:	e031      	b.n	65c4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe8>
    6560:	4620      	mov	r0, r4
    6562:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6566:	f000 bb2b 	b.w	6bc0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d8>
    656a:	2815      	cmp	r0, #21
    656c:	d00f      	beq.n	658e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    656e:	281d      	cmp	r0, #29
    6570:	d00d      	beq.n	658e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    6572:	f240 6196 	movw	r1, #1686	; 0x696
    6576:	202d      	movs	r0, #45	; 0x2d
    6578:	f7fd fbc4 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    657c:	2100      	movs	r1, #0
    657e:	6868      	ldr	r0, [r5, #4]
    6580:	f007 f8b3 	bl	d6ea <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    6584:	2101      	movs	r1, #1
    6586:	6868      	ldr	r0, [r5, #4]
    6588:	f007 fc52 	bl	de30 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x132>
    658c:	e020      	b.n	65d0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    658e:	2101      	movs	r1, #1
    6590:	6868      	ldr	r0, [r5, #4]
    6592:	f007 f8aa 	bl	d6ea <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    6596:	2101      	movs	r1, #1
    6598:	6868      	ldr	r0, [r5, #4]
    659a:	f007 fc49 	bl	de30 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x132>
    659e:	b136      	cbz	r6, 65ae <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xd2>
    65a0:	f104 0157 	add.w	r1, r4, #87	; 0x57
    65a4:	6868      	ldr	r0, [r5, #4]
    65a6:	f007 f8bb 	bl	d720 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    65aa:	2101      	movs	r1, #1
    65ac:	e006      	b.n	65bc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe0>
    65ae:	f104 0150 	add.w	r1, r4, #80	; 0x50
    65b2:	6868      	ldr	r0, [r5, #4]
    65b4:	f007 f8b4 	bl	d720 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    65b8:	f894 104f 	ldrb.w	r1, [r4, #79]	; 0x4f
    65bc:	6868      	ldr	r0, [r5, #4]
    65be:	f007 f8b5 	bl	d72c <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    65c2:	e005      	b.n	65d0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    65c4:	2106      	movs	r1, #6
    65c6:	e000      	b.n	65ca <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xee>
    65c8:	2102      	movs	r1, #2
    65ca:	6868      	ldr	r0, [r5, #4]
    65cc:	f007 f88d 	bl	d6ea <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    65d0:	4620      	mov	r0, r4
    65d2:	f000 fc7f 	bl	6ed4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6ec>
    65d6:	8860      	ldrh	r0, [r4, #2]
    65d8:	281d      	cmp	r0, #29
    65da:	d006      	beq.n	65ea <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10e>
    65dc:	2815      	cmp	r0, #21
    65de:	d004      	beq.n	65ea <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10e>
    65e0:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    65e2:	6b21      	ldr	r1, [r4, #48]	; 0x30
    65e4:	6868      	ldr	r0, [r5, #4]
    65e6:	f007 f870 	bl	d6ca <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>
    65ea:	4639      	mov	r1, r7
    65ec:	4620      	mov	r0, r4
    65ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    65f2:	f000 b9e5 	b.w	69c0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d8>
    65f6:	0000      	.short	0x0000
    65f8:	20000ddc 	.word	0x20000ddc
    65fc:	20000104 	.word	0x20000104
    6600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6604:	4d28      	ldr	r5, [pc, #160]	; (66a8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1cc>)
    6606:	4680      	mov	r8, r0
    6608:	7828      	ldrb	r0, [r5, #0]
    660a:	2802      	cmp	r0, #2
    660c:	d005      	beq.n	661a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    660e:	7828      	ldrb	r0, [r5, #0]
    6610:	2803      	cmp	r0, #3
    6612:	d002      	beq.n	661a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    6614:	f640 4191 	movw	r1, #3217	; 0xc91
    6618:	e01f      	b.n	665a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x17e>
    661a:	4c24      	ldr	r4, [pc, #144]	; (66ac <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1d0>)
    661c:	6820      	ldr	r0, [r4, #0]
    661e:	7b01      	ldrb	r1, [r0, #12]
    6620:	b109      	cbz	r1, 6626 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x14a>
    6622:	f007 fbfa 	bl	de1a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x11c>
    6626:	6860      	ldr	r0, [r4, #4]
    6628:	2700      	movs	r7, #0
    662a:	f1b8 0f00 	cmp.w	r8, #0
    662e:	7800      	ldrb	r0, [r0, #0]
    6630:	f000 060f 	and.w	r6, r0, #15
    6634:	d01f      	beq.n	6676 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x19a>
    6636:	f004 fa7b 	bl	ab30 <sym_JG4OWOPOBDSVKYOWPCJHHMQ7GDZVMOEUZX73ZYA>
    663a:	b1e0      	cbz	r0, 6676 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x19a>
    663c:	4639      	mov	r1, r7
    663e:	6860      	ldr	r0, [r4, #4]
    6640:	f007 f809 	bl	d656 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>
    6644:	b1b8      	cbz	r0, 6676 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x19a>
    6646:	782a      	ldrb	r2, [r5, #0]
    6648:	6820      	ldr	r0, [r4, #0]
    664a:	4631      	mov	r1, r6
    664c:	2a02      	cmp	r2, #2
    664e:	d007      	beq.n	6660 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x184>
    6650:	782a      	ldrb	r2, [r5, #0]
    6652:	2a03      	cmp	r2, #3
    6654:	d004      	beq.n	6660 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x184>
    6656:	f640 416a 	movw	r1, #3178	; 0xc6a
    665a:	202d      	movs	r0, #45	; 0x2d
    665c:	f7fd fb52 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6660:	68a2      	ldr	r2, [r4, #8]
    6662:	782b      	ldrb	r3, [r5, #0]
    6664:	6952      	ldr	r2, [r2, #20]
    6666:	f06f 0607 	mvn.w	r6, #7
    666a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    666e:	58d2      	ldr	r2, [r2, r3]
    6670:	4790      	blx	r2
    6672:	4606      	mov	r6, r0
    6674:	e000      	b.n	6678 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x19c>
    6676:	2601      	movs	r6, #1
    6678:	7ba8      	ldrb	r0, [r5, #14]
    667a:	b118      	cbz	r0, 6684 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1a8>
    667c:	f004 f84a 	bl	a714 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    6680:	f003 fe8c 	bl	a39c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    6684:	2e00      	cmp	r6, #0
    6686:	d00d      	beq.n	66a4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1c8>
    6688:	6820      	ldr	r0, [r4, #0]
    668a:	f007 fc80 	bl	df8e <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    668e:	b120      	cbz	r0, 669a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1be>
    6690:	68a0      	ldr	r0, [r4, #8]
    6692:	6880      	ldr	r0, [r0, #8]
    6694:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6698:	4700      	bx	r0
    669a:	6820      	ldr	r0, [r4, #0]
    669c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    66a0:	f000 ba8e 	b.w	6bc0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d8>
    66a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    66a8:	20000ddc 	.word	0x20000ddc
    66ac:	20000104 	.word	0x20000104
    66b0:	b510      	push	{r4, lr}
    66b2:	2903      	cmp	r1, #3
    66b4:	d002      	beq.n	66bc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e0>
    66b6:	2905      	cmp	r1, #5
    66b8:	d10a      	bne.n	66d0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1f4>
    66ba:	e002      	b.n	66c2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e6>
    66bc:	f000 fb5a 	bl	6d74 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x58c>
    66c0:	e003      	b.n	66ca <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ee>
    66c2:	4904      	ldr	r1, [pc, #16]	; (66d4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1f8>)
    66c4:	6809      	ldr	r1, [r1, #0]
    66c6:	b109      	cbz	r1, 66cc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1f0>
    66c8:	4788      	blx	r1
    66ca:	b108      	cbz	r0, 66d0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1f4>
    66cc:	2000      	movs	r0, #0
    66ce:	bd10      	pop	{r4, pc}
    66d0:	2001      	movs	r0, #1
    66d2:	bd10      	pop	{r4, pc}
    66d4:	20000110 	.word	0x20000110
    66d8:	4a09      	ldr	r2, [pc, #36]	; (6700 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x224>)
    66da:	0003      	movs	r3, r0
    66dc:	6810      	ldr	r0, [r2, #0]
    66de:	d001      	beq.n	66e4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x208>
    66e0:	f000 ba6e 	b.w	6bc0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d8>
    66e4:	2900      	cmp	r1, #0
    66e6:	d009      	beq.n	66fc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x220>
    66e8:	6891      	ldr	r1, [r2, #8]
    66ea:	4a06      	ldr	r2, [pc, #24]	; (6704 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x228>)
    66ec:	6909      	ldr	r1, [r1, #16]
    66ee:	7812      	ldrb	r2, [r2, #0]
    66f0:	f06f 030f 	mvn.w	r3, #15
    66f4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    66f8:	5889      	ldr	r1, [r1, r2]
    66fa:	4708      	bx	r1
    66fc:	4770      	bx	lr
    66fe:	0000      	.short	0x0000
    6700:	20000104 	.word	0x20000104
    6704:	20000ddc 	.word	0x20000ddc
    6708:	b570      	push	{r4, r5, r6, lr}
    670a:	4604      	mov	r4, r0
    670c:	8840      	ldrh	r0, [r0, #2]
    670e:	2500      	movs	r5, #0
    6710:	2810      	cmp	r0, #16
    6712:	d014      	beq.n	673e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x262>
    6714:	4e14      	ldr	r6, [pc, #80]	; (6768 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x28c>)
    6716:	7bb0      	ldrb	r0, [r6, #14]
    6718:	b120      	cbz	r0, 6724 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x248>
    671a:	f003 fe5f 	bl	a3dc <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    671e:	2040      	movs	r0, #64	; 0x40
    6720:	f004 f808 	bl	a734 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    6724:	4811      	ldr	r0, [pc, #68]	; (676c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x290>)
    6726:	6840      	ldr	r0, [r0, #4]
    6728:	f004 fac2 	bl	acb0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    672c:	78a0      	ldrb	r0, [r4, #2]
    672e:	0740      	lsls	r0, r0, #29
    6730:	d413      	bmi.n	675a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x27e>
    6732:	7be0      	ldrb	r0, [r4, #15]
    6734:	2801      	cmp	r0, #1
    6736:	d008      	beq.n	674a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x26e>
    6738:	2803      	cmp	r0, #3
    673a:	d006      	beq.n	674a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x26e>
    673c:	e006      	b.n	674c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x270>
    673e:	4620      	mov	r0, r4
    6740:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6744:	2101      	movs	r1, #1
    6746:	f7ff bed1 	b.w	64ec <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    674a:	2510      	movs	r5, #16
    674c:	2100      	movs	r1, #0
    674e:	f045 020e 	orr.w	r2, r5, #14
    6752:	7923      	ldrb	r3, [r4, #4]
    6754:	4608      	mov	r0, r1
    6756:	f004 fb35 	bl	adc4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    675a:	2000      	movs	r0, #0
    675c:	f004 f940 	bl	a9e0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    6760:	2002      	movs	r0, #2
    6762:	7030      	strb	r0, [r6, #0]
    6764:	bd70      	pop	{r4, r5, r6, pc}
    6766:	0000      	.short	0x0000
    6768:	20000ddc 	.word	0x20000ddc
    676c:	20000104 	.word	0x20000104
    6770:	b510      	push	{r4, lr}
    6772:	4c12      	ldr	r4, [pc, #72]	; (67bc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e0>)
    6774:	6820      	ldr	r0, [r4, #0]
    6776:	f000 f825 	bl	67c4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e8>
    677a:	6820      	ldr	r0, [r4, #0]
    677c:	f007 fc07 	bl	df8e <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    6780:	2800      	cmp	r0, #0
    6782:	6820      	ldr	r0, [r4, #0]
    6784:	d00b      	beq.n	679e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2c2>
    6786:	490e      	ldr	r1, [pc, #56]	; (67c0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e4>)
    6788:	780a      	ldrb	r2, [r1, #0]
    678a:	2a02      	cmp	r2, #2
    678c:	d00b      	beq.n	67a6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ca>
    678e:	780a      	ldrb	r2, [r1, #0]
    6790:	2a03      	cmp	r2, #3
    6792:	d008      	beq.n	67a6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ca>
    6794:	f640 31a5 	movw	r1, #2981	; 0xba5
    6798:	202d      	movs	r0, #45	; 0x2d
    679a:	f7fd fab3 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    679e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    67a2:	f000 ba0d 	b.w	6bc0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d8>
    67a6:	68a2      	ldr	r2, [r4, #8]
    67a8:	7809      	ldrb	r1, [r1, #0]
    67aa:	68d2      	ldr	r2, [r2, #12]
    67ac:	f06f 0307 	mvn.w	r3, #7
    67b0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    67b4:	5851      	ldr	r1, [r2, r1]
    67b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    67ba:	4708      	bx	r1
    67bc:	20000104 	.word	0x20000104
    67c0:	20000ddc 	.word	0x20000ddc
    67c4:	b510      	push	{r4, lr}
    67c6:	7b01      	ldrb	r1, [r0, #12]
    67c8:	b109      	cbz	r1, 67ce <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2f2>
    67ca:	f007 fb26 	bl	de1a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x11c>
    67ce:	4805      	ldr	r0, [pc, #20]	; (67e4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x308>)
    67d0:	7b80      	ldrb	r0, [r0, #14]
    67d2:	2800      	cmp	r0, #0
    67d4:	d005      	beq.n	67e2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x306>
    67d6:	f003 ff9d 	bl	a714 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    67da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    67de:	f003 bddd 	b.w	a39c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    67e2:	bd10      	pop	{r4, pc}
    67e4:	20000ddc 	.word	0x20000ddc

000067e8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
    67e8:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    67ec:	4d5a      	ldr	r5, [pc, #360]	; (6958 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x170>)
    67ee:	4604      	mov	r4, r0
    67f0:	7828      	ldrb	r0, [r5, #0]
    67f2:	bbe8      	cbnz	r0, 6870 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x88>
    67f4:	7820      	ldrb	r0, [r4, #0]
    67f6:	28ff      	cmp	r0, #255	; 0xff
    67f8:	d049      	beq.n	688e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa6>
    67fa:	f04f 0900 	mov.w	r9, #0
    67fe:	f8a5 900c 	strh.w	r9, [r5, #12]
    6802:	f8c5 9004 	str.w	r9, [r5, #4]
    6806:	f885 9001 	strb.w	r9, [r5, #1]
    680a:	f885 9002 	strb.w	r9, [r5, #2]
    680e:	f884 9061 	strb.w	r9, [r4, #97]	; 0x61
    6812:	4648      	mov	r0, r9
    6814:	f004 f94c 	bl	aab0 <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA>
    6818:	4b50      	ldr	r3, [pc, #320]	; (695c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x174>)
    681a:	f8df a144 	ldr.w	sl, [pc, #324]	; 6960 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x178>
    681e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    6820:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    6824:	f8da 0008 	ldr.w	r0, [sl, #8]
    6828:	6840      	ldr	r0, [r0, #4]
    682a:	9003      	str	r0, [sp, #12]
    682c:	4668      	mov	r0, sp
    682e:	f004 f8ab 	bl	a988 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    6832:	f004 f9af 	bl	ab94 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    6836:	f003 ff6d 	bl	a714 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    683a:	f003 fdaf 	bl	a39c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    683e:	4847      	ldr	r0, [pc, #284]	; (695c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x174>)
    6840:	1f40      	subs	r0, r0, #5
    6842:	f004 fb11 	bl	ae68 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    6846:	4845      	ldr	r0, [pc, #276]	; (695c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x174>)
    6848:	3808      	subs	r0, #8
    684a:	f004 fb19 	bl	ae80 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    684e:	f104 0020 	add.w	r0, r4, #32
    6852:	4606      	mov	r6, r0
    6854:	f007 fb4e 	bl	def4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    6858:	4630      	mov	r0, r6
    685a:	f007 fb10 	bl	de7e <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    685e:	4601      	mov	r1, r0
    6860:	4620      	mov	r0, r4
    6862:	f007 facf 	bl	de04 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x106>
    6866:	f994 000e 	ldrsb.w	r0, [r4, #14]
    686a:	f004 fa1b 	bl	aca4 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    686e:	e000      	b.n	6872 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8a>
    6870:	e00d      	b.n	688e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa6>
    6872:	7921      	ldrb	r1, [r4, #4]
    6874:	2000      	movs	r0, #0
    6876:	f004 f80b 	bl	a890 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    687a:	2601      	movs	r6, #1
    687c:	60a8      	str	r0, [r5, #8]
    687e:	b150      	cbz	r0, 6896 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xae>
    6880:	210f      	movs	r1, #15
    6882:	2005      	movs	r0, #5
    6884:	f003 ff6a 	bl	a75c <sym_ZBDJ2Y5I72NG5GLPCDB32P7JVZVIRY3EZS6BW2Y>
    6888:	7ea0      	ldrb	r0, [r4, #26]
    688a:	b958      	cbnz	r0, 68a4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xbc>
    688c:	e005      	b.n	689a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb2>
    688e:	200c      	movs	r0, #12
    6890:	b004      	add	sp, #16
    6892:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    6896:	702e      	strb	r6, [r5, #0]
    6898:	e05b      	b.n	6952 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16a>
    689a:	7e20      	ldrb	r0, [r4, #24]
    689c:	b910      	cbnz	r0, 68a4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xbc>
    689e:	78a0      	ldrb	r0, [r4, #2]
    68a0:	0740      	lsls	r0, r0, #29
    68a2:	d52b      	bpl.n	68fc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x114>
    68a4:	f005 f8e4 	bl	ba70 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    68a8:	4683      	mov	fp, r0
    68aa:	4659      	mov	r1, fp
    68ac:	6c60      	ldr	r0, [r4, #68]	; 0x44
    68ae:	f7fa feb7 	bl	1620 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    68b2:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 6964 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x17c>
    68b6:	4607      	mov	r7, r0
    68b8:	fb90 f1f8 	sdiv	r1, r0, r8
    68bc:	fb08 7011 	mls	r0, r8, r1, r7
    68c0:	4241      	negs	r1, r0
    68c2:	4658      	mov	r0, fp
    68c4:	f7fa fe7a 	bl	15bc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    68c8:	6460      	str	r0, [r4, #68]	; 0x44
    68ca:	fb97 f0f8 	sdiv	r0, r7, r8
    68ce:	6c21      	ldr	r1, [r4, #64]	; 0x40
    68d0:	4408      	add	r0, r1
    68d2:	6420      	str	r0, [r4, #64]	; 0x40
    68d4:	f7fe ff6a 	bl	57ac <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    68d8:	6c21      	ldr	r1, [r4, #64]	; 0x40
    68da:	4288      	cmp	r0, r1
    68dc:	d80e      	bhi.n	68fc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x114>
    68de:	e9c4 9b10 	strd	r9, fp, [r4, #64]	; 0x40
    68e2:	2101      	movs	r1, #1
    68e4:	4620      	mov	r0, r4
    68e6:	f007 fa51 	bl	dd8c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8e>
    68ea:	78a0      	ldrb	r0, [r4, #2]
    68ec:	0740      	lsls	r0, r0, #29
    68ee:	d505      	bpl.n	68fc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x114>
    68f0:	7e20      	ldrb	r0, [r4, #24]
    68f2:	b118      	cbz	r0, 68fc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x114>
    68f4:	2101      	movs	r1, #1
    68f6:	4620      	mov	r0, r4
    68f8:	f000 fa76 	bl	6de8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x600>
    68fc:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
    6900:	f104 0049 	add.w	r0, r4, #73	; 0x49
    6904:	f004 faa4 	bl	ae50 <sym_LZLCMBXYRGNNSS6IYQ5J2ORWQO6TGPOEG4SEIWQ>
    6908:	f894 0074 	ldrb.w	r0, [r4, #116]	; 0x74
    690c:	2802      	cmp	r0, #2
    690e:	d10a      	bne.n	6926 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x13e>
    6910:	4622      	mov	r2, r4
    6912:	e9d2 3719 	ldrd	r3, r7, [r2, #100]	; 0x64
    6916:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
    691a:	e9c4 370c 	strd	r3, r7, [r4, #48]	; 0x30
    691e:	e9c4 0119 	strd	r0, r1, [r4, #100]	; 0x64
    6922:	f884 6074 	strb.w	r6, [r4, #116]	; 0x74
    6926:	f894 0075 	ldrb.w	r0, [r4, #117]	; 0x75
    692a:	2802      	cmp	r0, #2
    692c:	d109      	bne.n	6942 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x15a>
    692e:	e9d4 100e 	ldrd	r1, r0, [r4, #56]	; 0x38
    6932:	e9d4 231b 	ldrd	r2, r3, [r4, #108]	; 0x6c
    6936:	e9c4 101b 	strd	r1, r0, [r4, #108]	; 0x6c
    693a:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
    693e:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
    6942:	f7fe ff99 	bl	5878 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    6946:	2103      	movs	r1, #3
    6948:	f8da 0004 	ldr.w	r0, [sl, #4]
    694c:	f006 fb0e 	bl	cf6c <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    6950:	73a8      	strb	r0, [r5, #14]
    6952:	2000      	movs	r0, #0
    6954:	e79c      	b.n	6890 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa8>
    6956:	0000      	.short	0x0000
    6958:	20000ddc 	.word	0x20000ddc
    695c:	00006f00 	.word	0x00006f00
    6960:	20000104 	.word	0x20000104
    6964:	000f4240 	.word	0x000f4240
    6968:	b510      	push	{r4, lr}
    696a:	4604      	mov	r4, r0
    696c:	f7ff ff3c 	bl	67e8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
    6970:	2800      	cmp	r0, #0
    6972:	d108      	bne.n	6986 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x19e>
    6974:	4804      	ldr	r0, [pc, #16]	; (6988 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1a0>)
    6976:	7800      	ldrb	r0, [r0, #0]
    6978:	2801      	cmp	r0, #1
    697a:	d003      	beq.n	6984 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x19c>
    697c:	2100      	movs	r1, #0
    697e:	4620      	mov	r0, r4
    6980:	f7ff fdb4 	bl	64ec <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    6984:	2000      	movs	r0, #0
    6986:	bd10      	pop	{r4, pc}
    6988:	20000ddc 	.word	0x20000ddc
    698c:	480a      	ldr	r0, [pc, #40]	; (69b8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d0>)
    698e:	b510      	push	{r4, lr}
    6990:	490a      	ldr	r1, [pc, #40]	; (69bc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d4>)
    6992:	6804      	ldr	r4, [r0, #0]
    6994:	7808      	ldrb	r0, [r1, #0]
    6996:	2800      	cmp	r0, #0
    6998:	d00d      	beq.n	69b6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ce>
    699a:	7808      	ldrb	r0, [r1, #0]
    699c:	2802      	cmp	r0, #2
    699e:	d002      	beq.n	69a6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1be>
    69a0:	7808      	ldrb	r0, [r1, #0]
    69a2:	2803      	cmp	r0, #3
    69a4:	d102      	bne.n	69ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1c4>
    69a6:	4620      	mov	r0, r4
    69a8:	f7ff ff0c 	bl	67c4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e8>
    69ac:	4620      	mov	r0, r4
    69ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    69b2:	f000 b905 	b.w	6bc0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d8>
    69b6:	bd10      	pop	{r4, pc}
    69b8:	20000104 	.word	0x20000104
    69bc:	20000ddc 	.word	0x20000ddc
    69c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    69c4:	4604      	mov	r4, r0
    69c6:	4827      	ldr	r0, [pc, #156]	; (6a64 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27c>)
    69c8:	460d      	mov	r5, r1
    69ca:	6840      	ldr	r0, [r0, #4]
    69cc:	f004 f970 	bl	acb0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    69d0:	4e25      	ldr	r6, [pc, #148]	; (6a68 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>)
    69d2:	2004      	movs	r0, #4
    69d4:	7030      	strb	r0, [r6, #0]
    69d6:	b325      	cbz	r5, 6a22 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x23a>
    69d8:	8860      	ldrh	r0, [r4, #2]
    69da:	2810      	cmp	r0, #16
    69dc:	d02a      	beq.n	6a34 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x24c>
    69de:	f104 0020 	add.w	r0, r4, #32
    69e2:	4680      	mov	r8, r0
    69e4:	68b5      	ldr	r5, [r6, #8]
    69e6:	f007 fa3e 	bl	de66 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    69ea:	4607      	mov	r7, r0
    69ec:	4640      	mov	r0, r8
    69ee:	f007 fa63 	bl	deb8 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    69f2:	1a38      	subs	r0, r7, r0
    69f4:	1e40      	subs	r0, r0, #1
    69f6:	b2c0      	uxtb	r0, r0
    69f8:	8861      	ldrh	r1, [r4, #2]
    69fa:	2228      	movs	r2, #40	; 0x28
    69fc:	f000 fabc 	bl	6f78 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
    6a00:	4405      	add	r5, r0
    6a02:	78a0      	ldrb	r0, [r4, #2]
    6a04:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    6a08:	b130      	cbz	r0, 6a18 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x230>
    6a0a:	6870      	ldr	r0, [r6, #4]
    6a0c:	4405      	add	r5, r0
    6a0e:	f007 faac 	bl	df6a <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
    6a12:	4428      	add	r0, r5
    6a14:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    6a18:	7922      	ldrb	r2, [r4, #4]
    6a1a:	4629      	mov	r1, r5
    6a1c:	2000      	movs	r0, #0
    6a1e:	f004 f955 	bl	accc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    6a22:	8860      	ldrh	r0, [r4, #2]
    6a24:	2813      	cmp	r0, #19
    6a26:	d013      	beq.n	6a50 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x268>
    6a28:	dc09      	bgt.n	6a3e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x256>
    6a2a:	2810      	cmp	r0, #16
    6a2c:	d018      	beq.n	6a60 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x278>
    6a2e:	2812      	cmp	r0, #18
    6a30:	d109      	bne.n	6a46 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x25e>
    6a32:	e00d      	b.n	6a50 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x268>
    6a34:	7921      	ldrb	r1, [r4, #4]
    6a36:	2000      	movs	r0, #0
    6a38:	f003 fede 	bl	a7f8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    6a3c:	e7f1      	b.n	6a22 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x23a>
    6a3e:	2815      	cmp	r0, #21
    6a40:	d006      	beq.n	6a50 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x268>
    6a42:	281d      	cmp	r0, #29
    6a44:	d004      	beq.n	6a50 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x268>
    6a46:	f640 511c 	movw	r1, #3356	; 0xd1c
    6a4a:	202d      	movs	r0, #45	; 0x2d
    6a4c:	f7fd f95a 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6a50:	7923      	ldrb	r3, [r4, #4]
    6a52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6a56:	2201      	movs	r2, #1
    6a58:	4611      	mov	r1, r2
    6a5a:	2000      	movs	r0, #0
    6a5c:	f004 b9b2 	b.w	adc4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    6a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6a64:	20000104 	.word	0x20000104
    6a68:	20000ddc 	.word	0x20000ddc
    6a6c:	b510      	push	{r4, lr}
    6a6e:	4604      	mov	r4, r0
    6a70:	7800      	ldrb	r0, [r0, #0]
    6a72:	460b      	mov	r3, r1
    6a74:	f884 00a9 	strb.w	r0, [r4, #169]	; 0xa9
    6a78:	29ff      	cmp	r1, #255	; 0xff
    6a7a:	d010      	beq.n	6a9e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2b6>
    6a7c:	f104 02ab 	add.w	r2, r4, #171	; 0xab
    6a80:	1e51      	subs	r1, r2, #1
    6a82:	4618      	mov	r0, r3
    6a84:	f7fe fe10 	bl	56a8 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    6a88:	b130      	cbz	r0, 6a98 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2b0>
    6a8a:	f894 00aa 	ldrb.w	r0, [r4, #170]	; 0xaa
    6a8e:	f040 0002 	orr.w	r0, r0, #2
    6a92:	f884 00aa 	strb.w	r0, [r4, #170]	; 0xaa
    6a96:	e011      	b.n	6abc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2d4>
    6a98:	f640 712c 	movw	r1, #3884	; 0xf2c
    6a9c:	e01d      	b.n	6ada <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2f2>
    6a9e:	4810      	ldr	r0, [pc, #64]	; (6ae0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2f8>)
    6aa0:	6840      	ldr	r0, [r0, #4]
    6aa2:	7801      	ldrb	r1, [r0, #0]
    6aa4:	f3c1 1180 	ubfx	r1, r1, #6, #1
    6aa8:	f884 10aa 	strb.w	r1, [r4, #170]	; 0xaa
    6aac:	f8d0 1003 	ldr.w	r1, [r0, #3]
    6ab0:	f8c4 10ab 	str.w	r1, [r4, #171]	; 0xab
    6ab4:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    6ab8:	f8a4 00af 	strh.w	r0, [r4, #175]	; 0xaf
    6abc:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
    6ac0:	287f      	cmp	r0, #127	; 0x7f
    6ac2:	d008      	beq.n	6ad6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2ee>
    6ac4:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1
    6ac8:	207f      	movs	r0, #127	; 0x7f
    6aca:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    6ace:	3492      	adds	r4, #146	; 0x92
    6ad0:	2001      	movs	r0, #1
    6ad2:	75a0      	strb	r0, [r4, #22]
    6ad4:	bd10      	pop	{r4, pc}
    6ad6:	f640 51ce 	movw	r1, #3534	; 0xdce
    6ada:	202d      	movs	r0, #45	; 0x2d
    6adc:	f7fd f912 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6ae0:	20000104 	.word	0x20000104
    6ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6ae8:	4604      	mov	r4, r0
    6aea:	8840      	ldrh	r0, [r0, #2]
    6aec:	4617      	mov	r7, r2
    6aee:	4688      	mov	r8, r1
    6af0:	2903      	cmp	r1, #3
    6af2:	d006      	beq.n	6b02 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x31a>
    6af4:	f000 0501 	and.w	r5, r0, #1
    6af8:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
    6afc:	b118      	cbz	r0, 6b06 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x31e>
    6afe:	2001      	movs	r0, #1
    6b00:	e002      	b.n	6b08 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x320>
    6b02:	f3c0 0540 	ubfx	r5, r0, #1, #1
    6b06:	2000      	movs	r0, #0
    6b08:	4681      	mov	r9, r0
    6b0a:	f003 fe21 	bl	a750 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>
    6b0e:	4606      	mov	r6, r0
    6b10:	f1b8 0f03 	cmp.w	r8, #3
    6b14:	d025      	beq.n	6b62 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x37a>
    6b16:	2001      	movs	r0, #1
    6b18:	4680      	mov	r8, r0
    6b1a:	ea35 0509 	bics.w	r5, r5, r9
    6b1e:	d046      	beq.n	6bae <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c6>
    6b20:	4825      	ldr	r0, [pc, #148]	; (6bb8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d0>)
    6b22:	7b80      	ldrb	r0, [r0, #14]
    6b24:	b138      	cbz	r0, 6b36 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x34e>
    6b26:	f006 fa24 	bl	cf72 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    6b2a:	7038      	strb	r0, [r7, #0]
    6b2c:	28ff      	cmp	r0, #255	; 0xff
    6b2e:	d002      	beq.n	6b36 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x34e>
    6b30:	f7fe fdd4 	bl	56dc <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    6b34:	4306      	orrs	r6, r0
    6b36:	4d21      	ldr	r5, [pc, #132]	; (6bbc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d4>)
    6b38:	f894 204f 	ldrb.w	r2, [r4, #79]	; 0x4f
    6b3c:	6868      	ldr	r0, [r5, #4]
    6b3e:	7801      	ldrb	r1, [r0, #0]
    6b40:	f3c1 1180 	ubfx	r1, r1, #6, #1
    6b44:	4291      	cmp	r1, r2
    6b46:	d106      	bne.n	6b56 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x36e>
    6b48:	2206      	movs	r2, #6
    6b4a:	f104 0150 	add.w	r1, r4, #80	; 0x50
    6b4e:	1cc0      	adds	r0, r0, #3
    6b50:	f005 f8fc 	bl	bd4c <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    6b54:	b138      	cbz	r0, 6b66 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x37e>
    6b56:	2000      	movs	r0, #0
    6b58:	7839      	ldrb	r1, [r7, #0]
    6b5a:	29ff      	cmp	r1, #255	; 0xff
    6b5c:	d009      	beq.n	6b72 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x38a>
    6b5e:	b9b8      	cbnz	r0, 6b90 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a8>
    6b60:	e003      	b.n	6b6a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x382>
    6b62:	2002      	movs	r0, #2
    6b64:	e7d8      	b.n	6b18 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x330>
    6b66:	2001      	movs	r0, #1
    6b68:	e7f6      	b.n	6b58 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x370>
    6b6a:	7e60      	ldrb	r0, [r4, #25]
    6b6c:	4288      	cmp	r0, r1
    6b6e:	d00f      	beq.n	6b90 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a8>
    6b70:	e008      	b.n	6b84 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x39c>
    6b72:	b138      	cbz	r0, 6b84 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x39c>
    6b74:	6869      	ldr	r1, [r5, #4]
    6b76:	f811 0b03 	ldrb.w	r0, [r1], #3
    6b7a:	f3c0 1080 	ubfx	r0, r0, #6, #1
    6b7e:	f007 f8c3 	bl	dd08 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    6b82:	b128      	cbz	r0, 6b90 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a8>
    6b84:	2000      	movs	r0, #0
    6b86:	78a1      	ldrb	r1, [r4, #2]
    6b88:	0749      	lsls	r1, r1, #29
    6b8a:	d503      	bpl.n	6b94 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ac>
    6b8c:	b990      	cbnz	r0, 6bb4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3cc>
    6b8e:	e00e      	b.n	6bae <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c6>
    6b90:	2001      	movs	r0, #1
    6b92:	e7f8      	b.n	6b86 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x39e>
    6b94:	b976      	cbnz	r6, 6bb4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3cc>
    6b96:	7be0      	ldrb	r0, [r4, #15]
    6b98:	b108      	cbz	r0, 6b9e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b6>
    6b9a:	4540      	cmp	r0, r8
    6b9c:	d107      	bne.n	6bae <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c6>
    6b9e:	6869      	ldr	r1, [r5, #4]
    6ba0:	f811 0b03 	ldrb.w	r0, [r1], #3
    6ba4:	f3c0 1080 	ubfx	r0, r0, #6, #1
    6ba8:	f007 f8ae 	bl	dd08 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    6bac:	b110      	cbz	r0, 6bb4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3cc>
    6bae:	2000      	movs	r0, #0
    6bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6bb4:	2001      	movs	r0, #1
    6bb6:	e7fb      	b.n	6bb0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c8>
    6bb8:	20000ddc 	.word	0x20000ddc
    6bbc:	20000104 	.word	0x20000104
    6bc0:	b570      	push	{r4, r5, r6, lr}
    6bc2:	4604      	mov	r4, r0
    6bc4:	6a80      	ldr	r0, [r0, #40]	; 0x28
    6bc6:	4d10      	ldr	r5, [pc, #64]	; (6c08 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x420>)
    6bc8:	1c40      	adds	r0, r0, #1
    6bca:	62a0      	str	r0, [r4, #40]	; 0x28
    6bcc:	7ba8      	ldrb	r0, [r5, #14]
    6bce:	2600      	movs	r6, #0
    6bd0:	b120      	cbz	r0, 6bdc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f4>
    6bd2:	f003 fd9f 	bl	a714 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    6bd6:	f003 fbe1 	bl	a39c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    6bda:	73ae      	strb	r6, [r5, #14]
    6bdc:	702e      	strb	r6, [r5, #0]
    6bde:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
    6be2:	b108      	cbz	r0, 6be8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x400>
    6be4:	2101      	movs	r1, #1
    6be6:	e00a      	b.n	6bfe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x416>
    6be8:	7b60      	ldrb	r0, [r4, #13]
    6bea:	b138      	cbz	r0, 6bfc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x414>
    6bec:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    6bee:	4288      	cmp	r0, r1
    6bf0:	d804      	bhi.n	6bfc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x414>
    6bf2:	2101      	movs	r1, #1
    6bf4:	4620      	mov	r0, r4
    6bf6:	f007 f9df 	bl	dfb8 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    6bfa:	bd70      	pop	{r4, r5, r6, pc}
    6bfc:	2100      	movs	r1, #0
    6bfe:	4620      	mov	r0, r4
    6c00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6c04:	f007 b9d8 	b.w	dfb8 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    6c08:	20000ddc 	.word	0x20000ddc
    6c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6c10:	4604      	mov	r4, r0
    6c12:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    6c16:	4690      	mov	r8, r2
    6c18:	460d      	mov	r5, r1
    6c1a:	f88d 0000 	strb.w	r0, [sp]
    6c1e:	9800      	ldr	r0, [sp, #0]
    6c20:	9000      	str	r0, [sp, #0]
    6c22:	f89d 0000 	ldrb.w	r0, [sp]
    6c26:	b110      	cbz	r0, 6c2e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x446>
    6c28:	f640 31d9 	movw	r1, #3033	; 0xbd9
    6c2c:	e058      	b.n	6ce0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4f8>
    6c2e:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
    6c32:	8828      	ldrh	r0, [r5, #0]
    6c34:	f8a4 007c 	strh.w	r0, [r4, #124]	; 0x7c
    6c38:	2b00      	cmp	r3, #0
    6c3a:	d163      	bne.n	6d04 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x51c>
    6c3c:	6868      	ldr	r0, [r5, #4]
    6c3e:	f006 f9f6 	bl	d02e <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    6c42:	f8a4 0092 	strh.w	r0, [r4, #146]	; 0x92
    6c46:	8928      	ldrh	r0, [r5, #8]
    6c48:	f8a4 0094 	strh.w	r0, [r4, #148]	; 0x94
    6c4c:	8968      	ldrh	r0, [r5, #10]
    6c4e:	f8a4 0096 	strh.w	r0, [r4, #150]	; 0x96
    6c52:	f895 016d 	ldrb.w	r0, [r5, #365]	; 0x16d
    6c56:	f884 0098 	strb.w	r0, [r4, #152]	; 0x98
    6c5a:	7e21      	ldrb	r1, [r4, #24]
    6c5c:	f104 0649 	add.w	r6, r4, #73	; 0x49
    6c60:	2700      	movs	r7, #0
    6c62:	f104 0980 	add.w	r9, r4, #128	; 0x80
    6c66:	b129      	cbz	r1, 6c74 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x48c>
    6c68:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    6c6c:	4631      	mov	r1, r6
    6c6e:	f006 ff34 	bl	dada <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb6>
    6c72:	b940      	cbnz	r0, 6c86 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x49e>
    6c74:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    6c78:	b170      	cbz	r0, 6c98 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4b0>
    6c7a:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    6c7e:	4631      	mov	r1, r6
    6c80:	f006 ff22 	bl	dac8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xa4>
    6c84:	b140      	cbz	r0, 6c98 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4b0>
    6c86:	f8d4 0049 	ldr.w	r0, [r4, #73]	; 0x49
    6c8a:	f8c4 0086 	str.w	r0, [r4, #134]	; 0x86
    6c8e:	f8b4 004d 	ldrh.w	r0, [r4, #77]	; 0x4d
    6c92:	f8a4 008a 	strh.w	r0, [r4, #138]	; 0x8a
    6c96:	e003      	b.n	6ca0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4b8>
    6c98:	f8c4 7086 	str.w	r7, [r4, #134]	; 0x86
    6c9c:	f8a4 708a 	strh.w	r7, [r4, #138]	; 0x8a
    6ca0:	4819      	ldr	r0, [pc, #100]	; (6d08 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x520>)
    6ca2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    6ca6:	6840      	ldr	r0, [r0, #4]
    6ca8:	7801      	ldrb	r1, [r0, #0]
    6caa:	f3c1 1180 	ubfx	r1, r1, #6, #1
    6cae:	f884 107f 	strb.w	r1, [r4, #127]	; 0x7f
    6cb2:	f850 1f03 	ldr.w	r1, [r0, #3]!
    6cb6:	d016      	beq.n	6ce6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4fe>
    6cb8:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    6cbc:	8880      	ldrh	r0, [r0, #4]
    6cbe:	f8a4 0090 	strh.w	r0, [r4, #144]	; 0x90
    6cc2:	464a      	mov	r2, r9
    6cc4:	f104 017f 	add.w	r1, r4, #127	; 0x7f
    6cc8:	4640      	mov	r0, r8
    6cca:	f7fe fced 	bl	56a8 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    6cce:	b128      	cbz	r0, 6cdc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4f4>
    6cd0:	f814 0f7f 	ldrb.w	r0, [r4, #127]!
    6cd4:	f040 0002 	orr.w	r0, r0, #2
    6cd8:	7020      	strb	r0, [r4, #0]
    6cda:	e00c      	b.n	6cf6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x50e>
    6cdc:	f640 31fa 	movw	r1, #3066	; 0xbfa
    6ce0:	202d      	movs	r0, #45	; 0x2d
    6ce2:	f7fd f80f 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6ce6:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
    6cea:	8880      	ldrh	r0, [r0, #4]
    6cec:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
    6cf0:	f844 7f8c 	str.w	r7, [r4, #140]!
    6cf4:	80a7      	strh	r7, [r4, #4]
    6cf6:	8828      	ldrh	r0, [r5, #0]
    6cf8:	f7fd fc38 	bl	456c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    6cfc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6d00:	f005 bf21 	b.w	cb46 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    6d04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6d08:	20000104 	.word	0x20000104
    6d0c:	b538      	push	{r3, r4, r5, lr}
    6d0e:	4604      	mov	r4, r0
    6d10:	20ff      	movs	r0, #255	; 0xff
    6d12:	f88d 0000 	strb.w	r0, [sp]
    6d16:	2501      	movs	r5, #1
    6d18:	466a      	mov	r2, sp
    6d1a:	2105      	movs	r1, #5
    6d1c:	4620      	mov	r0, r4
    6d1e:	f7ff fee1 	bl	6ae4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2fc>
    6d22:	b300      	cbz	r0, 6d66 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x57e>
    6d24:	4a11      	ldr	r2, [pc, #68]	; (6d6c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x584>)
    6d26:	69e0      	ldr	r0, [r4, #28]
    6d28:	6852      	ldr	r2, [r2, #4]
    6d2a:	f810 1f7d 	ldrb.w	r1, [r0, #125]!
    6d2e:	7812      	ldrb	r2, [r2, #0]
    6d30:	f3c2 1240 	ubfx	r2, r2, #5, #1
    6d34:	4011      	ands	r1, r2
    6d36:	7001      	strb	r1, [r0, #0]
    6d38:	2201      	movs	r2, #1
    6d3a:	4620      	mov	r0, r4
    6d3c:	69e1      	ldr	r1, [r4, #28]
    6d3e:	f000 f881 	bl	6e44 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x65c>
    6d42:	2300      	movs	r3, #0
    6d44:	f89d 2000 	ldrb.w	r2, [sp]
    6d48:	4620      	mov	r0, r4
    6d4a:	69e1      	ldr	r1, [r4, #28]
    6d4c:	f7ff ff5e 	bl	6c0c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x424>
    6d50:	2001      	movs	r0, #1
    6d52:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
    6d56:	4a06      	ldr	r2, [pc, #24]	; (6d70 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x588>)
    6d58:	2100      	movs	r1, #0
    6d5a:	69e0      	ldr	r0, [r4, #28]
    6d5c:	7011      	strb	r1, [r2, #0]
    6d5e:	2105      	movs	r1, #5
    6d60:	f000 fa1a 	bl	7198 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    6d64:	e000      	b.n	6d68 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x580>
    6d66:	2500      	movs	r5, #0
    6d68:	4628      	mov	r0, r5
    6d6a:	bd38      	pop	{r3, r4, r5, pc}
    6d6c:	20000104 	.word	0x20000104
    6d70:	20000ddc 	.word	0x20000ddc
    6d74:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    6d76:	4604      	mov	r4, r0
    6d78:	20ff      	movs	r0, #255	; 0xff
    6d7a:	f88d 0000 	strb.w	r0, [sp]
    6d7e:	2501      	movs	r5, #1
    6d80:	466a      	mov	r2, sp
    6d82:	2103      	movs	r1, #3
    6d84:	4620      	mov	r0, r4
    6d86:	f7ff fead 	bl	6ae4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2fc>
    6d8a:	b328      	cbz	r0, 6dd8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5f0>
    6d8c:	7b20      	ldrb	r0, [r4, #12]
    6d8e:	b168      	cbz	r0, 6dac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5c4>
    6d90:	f894 00a8 	ldrb.w	r0, [r4, #168]	; 0xa8
    6d94:	f88d 0004 	strb.w	r0, [sp, #4]
    6d98:	9801      	ldr	r0, [sp, #4]
    6d9a:	9001      	str	r0, [sp, #4]
    6d9c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    6da0:	b920      	cbnz	r0, 6dac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5c4>
    6da2:	f89d 1000 	ldrb.w	r1, [sp]
    6da6:	4620      	mov	r0, r4
    6da8:	f7ff fe60 	bl	6a6c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x284>
    6dac:	4e0c      	ldr	r6, [pc, #48]	; (6de0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5f8>)
    6dae:	2100      	movs	r1, #0
    6db0:	6870      	ldr	r0, [r6, #4]
    6db2:	8001      	strh	r1, [r0, #0]
    6db4:	2104      	movs	r1, #4
    6db6:	f006 fc98 	bl	d6ea <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    6dba:	4620      	mov	r0, r4
    6dbc:	f000 f88a 	bl	6ed4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6ec>
    6dc0:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    6dc2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    6dc4:	6870      	ldr	r0, [r6, #4]
    6dc6:	f006 fcc7 	bl	d758 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>
    6dca:	4906      	ldr	r1, [pc, #24]	; (6de4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5fc>)
    6dcc:	2005      	movs	r0, #5
    6dce:	7008      	strb	r0, [r1, #0]
    6dd0:	6870      	ldr	r0, [r6, #4]
    6dd2:	f003 ff6d 	bl	acb0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6dd6:	e000      	b.n	6dda <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5f2>
    6dd8:	2500      	movs	r5, #0
    6dda:	4628      	mov	r0, r5
    6ddc:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    6dde:	0000      	.short	0x0000
    6de0:	20000104 	.word	0x20000104
    6de4:	20000ddc 	.word	0x20000ddc
    6de8:	b570      	push	{r4, r5, r6, lr}
    6dea:	4604      	mov	r4, r0
    6dec:	460e      	mov	r6, r1
    6dee:	7e40      	ldrb	r0, [r0, #25]
    6df0:	f7fe fc28 	bl	5644 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    6df4:	0005      	movs	r5, r0
    6df6:	d019      	beq.n	6e2c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x644>
    6df8:	2110      	movs	r1, #16
    6dfa:	f006 faa3 	bl	d344 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    6dfe:	2800      	cmp	r0, #0
    6e00:	d114      	bne.n	6e2c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x644>
    6e02:	2001      	movs	r0, #1
    6e04:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    6e08:	f104 0157 	add.w	r1, r4, #87	; 0x57
    6e0c:	4632      	mov	r2, r6
    6e0e:	460c      	mov	r4, r1
    6e10:	4628      	mov	r0, r5
    6e12:	f006 f850 	bl	ceb6 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    6e16:	4621      	mov	r1, r4
    6e18:	4c05      	ldr	r4, [pc, #20]	; (6e30 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x648>)
    6e1a:	6860      	ldr	r0, [r4, #4]
    6e1c:	f006 fc80 	bl	d720 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    6e20:	6860      	ldr	r0, [r4, #4]
    6e22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6e26:	2101      	movs	r1, #1
    6e28:	f006 bc80 	b.w	d72c <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    6e2c:	bd70      	pop	{r4, r5, r6, pc}
    6e2e:	0000      	.short	0x0000
    6e30:	20000104 	.word	0x20000104
    6e34:	4802      	ldr	r0, [pc, #8]	; (6e40 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x658>)
    6e36:	2101      	movs	r1, #1
    6e38:	6800      	ldr	r0, [r0, #0]
    6e3a:	f7ff bb57 	b.w	64ec <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    6e3e:	0000      	.short	0x0000
    6e40:	20000104 	.word	0x20000104
    6e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6e48:	4e21      	ldr	r6, [pc, #132]	; (6ed0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6e8>)
    6e4a:	4680      	mov	r8, r0
    6e4c:	460c      	mov	r4, r1
    6e4e:	6870      	ldr	r0, [r6, #4]
    6e50:	4615      	mov	r5, r2
    6e52:	f850 1f0f 	ldr.w	r1, [r0, #15]!
    6e56:	60e1      	str	r1, [r4, #12]
    6e58:	8881      	ldrh	r1, [r0, #4]
    6e5a:	8221      	strh	r1, [r4, #16]
    6e5c:	7981      	ldrb	r1, [r0, #6]
    6e5e:	74a1      	strb	r1, [r4, #18]
    6e60:	8940      	ldrh	r0, [r0, #10]
    6e62:	f006 f8e0 	bl	d026 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    6e66:	4607      	mov	r7, r0
    6e68:	6060      	str	r0, [r4, #4]
    6e6a:	6870      	ldr	r0, [r6, #4]
    6e6c:	4639      	mov	r1, r7
    6e6e:	7d80      	ldrb	r0, [r0, #22]
    6e70:	f006 fa63 	bl	d33a <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    6e74:	82a0      	strh	r0, [r4, #20]
    6e76:	6870      	ldr	r0, [r6, #4]
    6e78:	4639      	mov	r1, r7
    6e7a:	f8b0 0017 	ldrh.w	r0, [r0, #23]
    6e7e:	f006 fa58 	bl	d332 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    6e82:	61a0      	str	r0, [r4, #24]
    6e84:	6870      	ldr	r0, [r6, #4]
    6e86:	f830 1f1b 	ldrh.w	r1, [r0, #27]!
    6e8a:	8121      	strh	r1, [r4, #8]
    6e8c:	8841      	ldrh	r1, [r0, #2]
    6e8e:	8161      	strh	r1, [r4, #10]
    6e90:	6841      	ldr	r1, [r0, #4]
    6e92:	f8c4 107e 	str.w	r1, [r4, #126]	; 0x7e
    6e96:	7a01      	ldrb	r1, [r0, #8]
    6e98:	f884 1082 	strb.w	r1, [r4, #130]	; 0x82
    6e9c:	7a41      	ldrb	r1, [r0, #9]
    6e9e:	f001 011f 	and.w	r1, r1, #31
    6ea2:	f884 1089 	strb.w	r1, [r4, #137]	; 0x89
    6ea6:	7a40      	ldrb	r0, [r0, #9]
    6ea8:	0940      	lsrs	r0, r0, #5
    6eaa:	f884 016d 	strb.w	r0, [r4, #365]	; 0x16d
    6eae:	f104 005a 	add.w	r0, r4, #90	; 0x5a
    6eb2:	2101      	movs	r1, #1
    6eb4:	7205      	strb	r5, [r0, #8]
    6eb6:	7245      	strb	r5, [r0, #9]
    6eb8:	7281      	strb	r1, [r0, #10]
    6eba:	2100      	movs	r1, #0
    6ebc:	3836      	subs	r0, #54	; 0x36
    6ebe:	f006 fd86 	bl	d9ce <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    6ec2:	f898 000e 	ldrb.w	r0, [r8, #14]
    6ec6:	f884 0066 	strb.w	r0, [r4, #102]	; 0x66
    6eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6ece:	0000      	.short	0x0000
    6ed0:	20000104 	.word	0x20000104
    6ed4:	b570      	push	{r4, r5, r6, lr}
    6ed6:	4d07      	ldr	r5, [pc, #28]	; (6ef4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x70c>)
    6ed8:	4604      	mov	r4, r0
    6eda:	f100 0149 	add.w	r1, r0, #73	; 0x49
    6ede:	6868      	ldr	r0, [r5, #4]
    6ee0:	f006 fc2b 	bl	d73a <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
    6ee4:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
    6ee8:	6868      	ldr	r0, [r5, #4]
    6eea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6eee:	f006 bc2a 	b.w	d746 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    6ef2:	0000      	.short	0x0000
    6ef4:	20000104 	.word	0x20000104
    6ef8:	d6555555 	.word	0xd6555555
    6efc:	008e89be 	.word	0x008e89be
    6f00:	00006771 	.word	0x00006771
    6f04:	00006601 	.word	0x00006601
    6f08:	000066d9 	.word	0x000066d9
    6f0c:	00000000 	.word	0x00000000
    6f10:	000066b1 	.word	0x000066b1
    6f14:	00006709 	.word	0x00006709
    6f18:	0000dd2f 	.word	0x0000dd2f
    6f1c:	0000dd35 	.word	0x0000dd35
    6f20:	00006969 	.word	0x00006969
    6f24:	0000698d 	.word	0x0000698d
    6f28:	00006e35 	.word	0x00006e35
    6f2c:	00006f1c 	.word	0x00006f1c
    6f30:	00006f14 	.word	0x00006f14
    6f34:	00006f10 	.word	0x00006f10

00006f38 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
    6f38:	b510      	push	{r4, lr}
    6f3a:	1e42      	subs	r2, r0, #1
    6f3c:	2a02      	cmp	r2, #2
    6f3e:	d901      	bls.n	6f44 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0xc>
    6f40:	21ca      	movs	r1, #202	; 0xca
    6f42:	e009      	b.n	6f58 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x20>
    6f44:	1e40      	subs	r0, r0, #1
    6f46:	2910      	cmp	r1, #16
    6f48:	d009      	beq.n	6f5e <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x26>
    6f4a:	2912      	cmp	r1, #18
    6f4c:	d00c      	beq.n	6f68 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    6f4e:	2913      	cmp	r1, #19
    6f50:	d00a      	beq.n	6f68 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    6f52:	2915      	cmp	r1, #21
    6f54:	d005      	beq.n	6f62 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x2a>
    6f56:	21d8      	movs	r1, #216	; 0xd8
    6f58:	202f      	movs	r0, #47	; 0x2f
    6f5a:	f7fc fed3 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6f5e:	4905      	ldr	r1, [pc, #20]	; (6f74 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    6f60:	e004      	b.n	6f6c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    6f62:	4904      	ldr	r1, [pc, #16]	; (6f74 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    6f64:	1d89      	adds	r1, r1, #6
    6f66:	e001      	b.n	6f6c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    6f68:	4902      	ldr	r1, [pc, #8]	; (6f74 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    6f6a:	1f89      	subs	r1, r1, #6
    6f6c:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    6f70:	bd10      	pop	{r4, pc}
    6f72:	0000      	.short	0x0000
    6f74:	0000df82 	.word	0x0000df82

00006f78 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
    6f78:	1e42      	subs	r2, r0, #1
    6f7a:	b510      	push	{r4, lr}
    6f7c:	b2d2      	uxtb	r2, r2
    6f7e:	2a01      	cmp	r2, #1
    6f80:	d903      	bls.n	6f8a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    6f82:	291d      	cmp	r1, #29
    6f84:	d001      	beq.n	6f8a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    6f86:	21ee      	movs	r1, #238	; 0xee
    6f88:	e00d      	b.n	6fa6 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
    6f8a:	2913      	cmp	r1, #19
    6f8c:	d013      	beq.n	6fb6 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    6f8e:	dc04      	bgt.n	6f9a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x22>
    6f90:	2910      	cmp	r1, #16
    6f92:	d00b      	beq.n	6fac <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x34>
    6f94:	2912      	cmp	r1, #18
    6f96:	d104      	bne.n	6fa2 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2a>
    6f98:	e00d      	b.n	6fb6 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    6f9a:	2915      	cmp	r1, #21
    6f9c:	d008      	beq.n	6fb0 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x38>
    6f9e:	291d      	cmp	r1, #29
    6fa0:	d00e      	beq.n	6fc0 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x48>
    6fa2:	f44f 7181 	mov.w	r1, #258	; 0x102
    6fa6:	202f      	movs	r0, #47	; 0x2f
    6fa8:	f7fc feac 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6fac:	4807      	ldr	r0, [pc, #28]	; (6fcc <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    6fae:	e004      	b.n	6fba <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    6fb0:	4806      	ldr	r0, [pc, #24]	; (6fcc <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    6fb2:	3008      	adds	r0, #8
    6fb4:	e001      	b.n	6fba <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    6fb6:	4805      	ldr	r0, [pc, #20]	; (6fcc <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    6fb8:	1d00      	adds	r0, r0, #4
    6fba:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    6fbe:	bd10      	pop	{r4, pc}
    6fc0:	f240 315a 	movw	r1, #858	; 0x35a
    6fc4:	fb10 f001 	smulbb	r0, r0, r1
    6fc8:	bd10      	pop	{r4, pc}
    6fca:	0000      	.short	0x0000
    6fcc:	0000df70 	.word	0x0000df70

00006fd0 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA>:
    6fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6fd4:	4604      	mov	r4, r0
    6fd6:	f890 00c8 	ldrb.w	r0, [r0, #200]	; 0xc8
    6fda:	4615      	mov	r5, r2
    6fdc:	460f      	mov	r7, r1
    6fde:	2800      	cmp	r0, #0
    6fe0:	d15d      	bne.n	709e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9e>
    6fe2:	4621      	mov	r1, r4
    6fe4:	4844      	ldr	r0, [pc, #272]	; (70f8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf8>)
    6fe6:	f7fb f9b9 	bl	235c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    6fea:	4606      	mov	r6, r0
    6fec:	2820      	cmp	r0, #32
    6fee:	d056      	beq.n	709e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9e>
    6ff0:	2234      	movs	r2, #52	; 0x34
    6ff2:	2100      	movs	r1, #0
    6ff4:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    6ff8:	f004 ff34 	bl	be64 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6ffc:	f884 60b4 	strb.w	r6, [r4, #180]	; 0xb4
    7000:	2601      	movs	r6, #1
    7002:	f8c4 70b8 	str.w	r7, [r4, #184]	; 0xb8
    7006:	f884 60c8 	strb.w	r6, [r4, #200]	; 0xc8
    700a:	b15f      	cbz	r7, 7024 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24>
    700c:	2101      	movs	r1, #1
    700e:	f507 708e 	add.w	r0, r7, #284	; 0x11c
    7012:	f7fc ff2b 	bl	3e6c <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    7016:	f897 011c 	ldrb.w	r0, [r7, #284]	; 0x11c
    701a:	f000 0007 	and.w	r0, r0, #7
    701e:	1c40      	adds	r0, r0, #1
    7020:	f887 011c 	strb.w	r0, [r7, #284]	; 0x11c
    7024:	4620      	mov	r0, r4
    7026:	f007 f951 	bl	e2cc <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x22a>
    702a:	f8a4 00d4 	strh.w	r0, [r4, #212]	; 0xd4
    702e:	2003      	movs	r0, #3
    7030:	f884 00d6 	strb.w	r0, [r4, #214]	; 0xd6
    7034:	f884 60d7 	strb.w	r6, [r4, #215]	; 0xd7
    7038:	2700      	movs	r7, #0
    703a:	f804 7fcc 	strb.w	r7, [r4, #204]!
    703e:	f7fa fc27 	bl	1890 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    7042:	8921      	ldrh	r1, [r4, #8]
    7044:	3ccc      	subs	r4, #204	; 0xcc
    7046:	4288      	cmp	r0, r1
    7048:	d800      	bhi.n	704c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4c>
    704a:	4608      	mov	r0, r1
    704c:	f200 60bf 	addw	r0, r0, #1727	; 0x6bf
    7050:	fa1f f880 	uxth.w	r8, r0
    7054:	4620      	mov	r0, r4
    7056:	f006 fddd 	bl	dc14 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    705a:	b318      	cbz	r0, 70a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa4>
    705c:	4827      	ldr	r0, [pc, #156]	; (70fc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xfc>)
    705e:	7800      	ldrb	r0, [r0, #0]
    7060:	f000 f8e4 	bl	722c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x94>
    7064:	f500 60cd 	add.w	r0, r0, #1640	; 0x668
    7068:	b281      	uxth	r1, r0
    706a:	4628      	mov	r0, r5
    706c:	f004 fd3f 	bl	baee <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7070:	4428      	add	r0, r5
    7072:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
    7076:	34b8      	adds	r4, #184	; 0xb8
    7078:	f004 fcfa 	bl	ba70 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    707c:	4641      	mov	r1, r8
    707e:	f7fa fa9d 	bl	15bc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    7082:	6220      	str	r0, [r4, #32]
    7084:	f804 7c03 	strb.w	r7, [r4, #-3]
    7088:	7126      	strb	r6, [r4, #4]
    708a:	2001      	movs	r0, #1
    708c:	f006 ff69 	bl	df62 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    7090:	f200 1007 	addw	r0, r0, #263	; 0x107
    7094:	1a28      	subs	r0, r5, r0
    7096:	62a7      	str	r7, [r4, #40]	; 0x28
    7098:	60a0      	str	r0, [r4, #8]
    709a:	3cb8      	subs	r4, #184	; 0xb8
    709c:	e017      	b.n	70ce <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xce>
    709e:	200c      	movs	r0, #12
    70a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    70a4:	4620      	mov	r0, r4
    70a6:	f007 f8bf 	bl	e228 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x186>
    70aa:	f844 0fd0 	str.w	r0, [r4, #208]!
    70ae:	f804 6c1b 	strb.w	r6, [r4, #-27]
    70b2:	f004 fcdd 	bl	ba70 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    70b6:	4606      	mov	r6, r0
    70b8:	2000      	movs	r0, #0
    70ba:	f007 f9b6 	bl	e42a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x388>
    70be:	eb00 0108 	add.w	r1, r0, r8
    70c2:	4630      	mov	r0, r6
    70c4:	f7fa fa7a 	bl	15bc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    70c8:	6125      	str	r5, [r4, #16]
    70ca:	60a0      	str	r0, [r4, #8]
    70cc:	3cd0      	subs	r4, #208	; 0xd0
    70ce:	f104 01cc 	add.w	r1, r4, #204	; 0xcc
    70d2:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
    70d6:	f007 f8f7 	bl	e2c8 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x226>
    70da:	b138      	cbz	r0, 70ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xec>
    70dc:	f8a4 70dc 	strh.w	r7, [r4, #220]	; 0xdc
    70e0:	2100      	movs	r1, #0
    70e2:	4620      	mov	r0, r4
    70e4:	f006 fdf6 	bl	dcd4 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    70e8:	2000      	movs	r0, #0
    70ea:	e7d9      	b.n	70a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa0>
    70ec:	f44f 71fd 	mov.w	r1, #506	; 0x1fa
    70f0:	2030      	movs	r0, #48	; 0x30
    70f2:	f7fc fe07 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    70f6:	0000      	.short	0x0000
    70f8:	000078e5 	.word	0x000078e5
    70fc:	20000114 	.word	0x20000114

00007100 <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY>:
    7100:	4804      	ldr	r0, [pc, #16]	; (7114 <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY+0x14>)
    7102:	2101      	movs	r1, #1
    7104:	2200      	movs	r2, #0
    7106:	7001      	strb	r1, [r0, #0]
    7108:	7042      	strb	r2, [r0, #1]
    710a:	70c1      	strb	r1, [r0, #3]
    710c:	7082      	strb	r2, [r0, #2]
    710e:	f006 bf95 	b.w	e03c <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA>
    7112:	0000      	.short	0x0000
    7114:	20000114 	.word	0x20000114

00007118 <sym_24SKLESBEZEAQ7XSDAQVJQD35IVFROKORCGBXPI>:
    7118:	4901      	ldr	r1, [pc, #4]	; (7120 <sym_24SKLESBEZEAQ7XSDAQVJQD35IVFROKORCGBXPI+0x8>)
    711a:	7008      	strb	r0, [r1, #0]
    711c:	4770      	bx	lr
    711e:	0000      	.short	0x0000
    7120:	20000114 	.word	0x20000114

00007124 <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A>:
    7124:	4901      	ldr	r1, [pc, #4]	; (712c <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A+0x8>)
    7126:	7048      	strb	r0, [r1, #1]
    7128:	4770      	bx	lr
    712a:	0000      	.short	0x0000
    712c:	20000114 	.word	0x20000114

00007130 <sym_2XQD73Z3W4NFFHWTLZCIS7IQ3ACFNR3KKEBKCJQ>:
    7130:	4905      	ldr	r1, [pc, #20]	; (7148 <sym_2XQD73Z3W4NFFHWTLZCIS7IQ3ACFNR3KKEBKCJQ+0x18>)
    7132:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7136:	fbb1 f1f2 	udiv	r1, r1, r2
    713a:	b510      	push	{r4, lr}
    713c:	f201 218b 	addw	r1, r1, #651	; 0x28b
    7140:	f006 fc5e 	bl	da00 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    7144:	b280      	uxth	r0, r0
    7146:	bd10      	pop	{r4, pc}
    7148:	0001527d 	.word	0x0001527d

0000714c <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>:
    714c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7150:	4c10      	ldr	r4, [pc, #64]	; (7194 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x48>)
    7152:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
    7156:	f003 fcb1 	bl	aabc <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    715a:	4606      	mov	r6, r0
    715c:	7860      	ldrb	r0, [r4, #1]
    715e:	b128      	cbz	r0, 716c <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x20>
    7160:	4632      	mov	r2, r6
    7162:	4639      	mov	r1, r7
    7164:	4628      	mov	r0, r5
    7166:	f005 ff68 	bl	d03a <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    716a:	4605      	mov	r5, r0
    716c:	6860      	ldr	r0, [r4, #4]
    716e:	4285      	cmp	r5, r0
    7170:	d005      	beq.n	717e <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x32>
    7172:	68e1      	ldr	r1, [r4, #12]
    7174:	1a28      	subs	r0, r5, r0
    7176:	4408      	add	r0, r1
    7178:	60e0      	str	r0, [r4, #12]
    717a:	f7fb f9f1 	bl	2560 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    717e:	6065      	str	r5, [r4, #4]
    7180:	42ae      	cmp	r6, r5
    7182:	d801      	bhi.n	7188 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3c>
    7184:	78a0      	ldrb	r0, [r4, #2]
    7186:	b110      	cbz	r0, 718e <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x42>
    7188:	2000      	movs	r0, #0
    718a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    718e:	2001      	movs	r0, #1
    7190:	e7fb      	b.n	718a <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3e>
    7192:	0000      	.short	0x0000
    7194:	20000114 	.word	0x20000114

00007198 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>:
    7198:	b570      	push	{r4, r5, r6, lr}
    719a:	4c22      	ldr	r4, [pc, #136]	; (7224 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8c>)
    719c:	4605      	mov	r5, r0
    719e:	2906      	cmp	r1, #6
    71a0:	d23c      	bcs.n	721c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x84>
    71a2:	e8df f001 	tbb	[pc, r1]
    71a6:	0b05      	.short	0x0b05
    71a8:	250f0e03 	.word	0x250f0e03
    71ac:	2100      	movs	r1, #0
    71ae:	e000      	b.n	71b2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1a>
    71b0:	2101      	movs	r1, #1
    71b2:	4628      	mov	r0, r5
    71b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    71b8:	f000 b94c 	b.w	7454 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2bc>
    71bc:	2003      	movs	r0, #3
    71be:	f885 012c 	strb.w	r0, [r5, #300]	; 0x12c
    71c2:	bd70      	pop	{r4, r5, r6, pc}
    71c4:	f003 fcae 	bl	ab24 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>
    71c8:	f8c5 0168 	str.w	r0, [r5, #360]	; 0x168
    71cc:	f895 0063 	ldrb.w	r0, [r5, #99]	; 0x63
    71d0:	f008 fa64 	bl	f69c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    71d4:	f8d5 1168 	ldr.w	r1, [r5, #360]	; 0x168
    71d8:	1a08      	subs	r0, r1, r0
    71da:	6861      	ldr	r1, [r4, #4]
    71dc:	4401      	add	r1, r0
    71de:	6061      	str	r1, [r4, #4]
    71e0:	68a1      	ldr	r1, [r4, #8]
    71e2:	4408      	add	r0, r1
    71e4:	60a0      	str	r0, [r4, #8]
    71e6:	4628      	mov	r0, r5
    71e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    71ec:	f000 b8d2 	b.w	7394 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1fc>
    71f0:	f003 fc64 	bl	aabc <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    71f4:	4601      	mov	r1, r0
    71f6:	2200      	movs	r2, #0
    71f8:	69a0      	ldr	r0, [r4, #24]
    71fa:	f007 f8cb 	bl	e394 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2f2>
    71fe:	69a0      	ldr	r0, [r4, #24]
    7200:	4909      	ldr	r1, [pc, #36]	; (7228 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x90>)
    7202:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
    7206:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    720a:	f7fa ff6d 	bl	20e8 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>
    720e:	2800      	cmp	r0, #0
    7210:	d1d7      	bne.n	71c2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2a>
    7212:	f240 717a 	movw	r1, #1914	; 0x77a
    7216:	2030      	movs	r0, #48	; 0x30
    7218:	f7fc fd74 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    721c:	f240 7191 	movw	r1, #1937	; 0x791
    7220:	e7f9      	b.n	7216 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7e>
    7222:	0000      	.short	0x0000
    7224:	20000114 	.word	0x20000114
    7228:	0000e455 	.word	0x0000e455
    722c:	b510      	push	{r4, lr}
    722e:	280c      	cmp	r0, #12
    7230:	d304      	bcc.n	723c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa4>
    7232:	f44f 7140 	mov.w	r1, #768	; 0x300
    7236:	2006      	movs	r0, #6
    7238:	f7fc fd64 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    723c:	4901      	ldr	r1, [pc, #4]	; (7244 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xac>)
    723e:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    7242:	bd10      	pop	{r4, pc}
    7244:	0000e536 	.word	0x0000e536
    7248:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    724a:	4c18      	ldr	r4, [pc, #96]	; (72ac <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x114>)
    724c:	2001      	movs	r0, #1
    724e:	70a0      	strb	r0, [r4, #2]
    7250:	f64f 75ff 	movw	r5, #65535	; 0xffff
    7254:	e00b      	b.n	726e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xd6>
    7256:	2100      	movs	r1, #0
    7258:	f005 fd9f 	bl	cd9a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    725c:	0006      	movs	r6, r0
    725e:	d010      	beq.n	7282 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xea>
    7260:	f896 0160 	ldrb.w	r0, [r6, #352]	; 0x160
    7264:	f7fa ff72 	bl	214c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    7268:	4630      	mov	r0, r6
    726a:	f007 f886 	bl	e37a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2d8>
    726e:	4669      	mov	r1, sp
    7270:	2000      	movs	r0, #0
    7272:	f005 fd9c 	bl	cdae <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    7276:	b180      	cbz	r0, 729a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x102>
    7278:	f240 1111 	movw	r1, #273	; 0x111
    727c:	2030      	movs	r0, #48	; 0x30
    727e:	f7fc fd41 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7282:	f240 1131 	movw	r1, #305	; 0x131
    7286:	e7f9      	b.n	727c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xe4>
    7288:	9802      	ldr	r0, [sp, #8]
    728a:	b130      	cbz	r0, 729a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x102>
    728c:	f890 112c 	ldrb.w	r1, [r0, #300]	; 0x12c
    7290:	b119      	cbz	r1, 729a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x102>
    7292:	8800      	ldrh	r0, [r0, #0]
    7294:	42a8      	cmp	r0, r5
    7296:	d1de      	bne.n	7256 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xbe>
    7298:	e004      	b.n	72a4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x10c>
    729a:	4668      	mov	r0, sp
    729c:	f7fc ff84 	bl	41a8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    72a0:	2800      	cmp	r0, #0
    72a2:	d0f1      	beq.n	7288 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xf0>
    72a4:	2000      	movs	r0, #0
    72a6:	70a0      	strb	r0, [r4, #2]
    72a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    72aa:	0000      	.short	0x0000
    72ac:	20000114 	.word	0x20000114
    72b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    72b4:	4604      	mov	r4, r0
    72b6:	4836      	ldr	r0, [pc, #216]	; (7390 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1f8>)
    72b8:	461e      	mov	r6, r3
    72ba:	4690      	mov	r8, r2
    72bc:	78c0      	ldrb	r0, [r0, #3]
    72be:	4689      	mov	r9, r1
    72c0:	2500      	movs	r5, #0
    72c2:	b368      	cbz	r0, 7320 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x188>
    72c4:	f7fc f9c8 	bl	3658 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    72c8:	b350      	cbz	r0, 7320 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x188>
    72ca:	f8b4 0118 	ldrh.w	r0, [r4, #280]	; 0x118
    72ce:	2802      	cmp	r0, #2
    72d0:	d326      	bcc.n	7320 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x188>
    72d2:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    72d6:	2802      	cmp	r0, #2
    72d8:	d022      	beq.n	7320 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x188>
    72da:	f894 0142 	ldrb.w	r0, [r4, #322]	; 0x142
    72de:	b9f8      	cbnz	r0, 7320 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x188>
    72e0:	f894 016d 	ldrb.w	r0, [r4, #365]	; 0x16d
    72e4:	f7ff ffa2 	bl	722c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x94>
    72e8:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    72ec:	b281      	uxth	r1, r0
    72ee:	8031      	strh	r1, [r6, #0]
    72f0:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    72f4:	2700      	movs	r7, #0
    72f6:	2801      	cmp	r0, #1
    72f8:	d015      	beq.n	7326 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x18e>
    72fa:	6860      	ldr	r0, [r4, #4]
    72fc:	f004 fbf7 	bl	baee <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7300:	f8b4 2106 	ldrh.w	r2, [r4, #262]	; 0x106
    7304:	b280      	uxth	r0, r0
    7306:	4442      	add	r2, r8
    7308:	eba2 0109 	sub.w	r1, r2, r9
    730c:	f8d4 2134 	ldr.w	r2, [r4, #308]	; 0x134
    7310:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    7314:	1a82      	subs	r2, r0, r2
    7316:	fb01 7502 	mla	r5, r1, r2, r7
    731a:	2001      	movs	r0, #1
    731c:	f884 0142 	strb.w	r0, [r4, #322]	; 0x142
    7320:	4628      	mov	r0, r5
    7322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7326:	f894 0079 	ldrb.w	r0, [r4, #121]	; 0x79
    732a:	2803      	cmp	r0, #3
    732c:	d02c      	beq.n	7388 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1f0>
    732e:	2101      	movs	r1, #1
    7330:	2000      	movs	r0, #0
    7332:	f005 ff3c 	bl	d1ae <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    7336:	69a1      	ldr	r1, [r4, #24]
    7338:	1847      	adds	r7, r0, r1
    733a:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
    733e:	8831      	ldrh	r1, [r6, #0]
    7340:	34c8      	adds	r4, #200	; 0xc8
    7342:	f004 fbd4 	bl	baee <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7346:	6da2      	ldr	r2, [r4, #88]	; 0x58
    7348:	6e21      	ldr	r1, [r4, #96]	; 0x60
    734a:	1a82      	subs	r2, r0, r2
    734c:	fb01 5502 	mla	r5, r1, r2, r5
    7350:	65a0      	str	r0, [r4, #88]	; 0x58
    7352:	8831      	ldrh	r1, [r6, #0]
    7354:	4638      	mov	r0, r7
    7356:	f004 fbca 	bl	baee <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    735a:	6ea1      	ldr	r1, [r4, #104]	; 0x68
    735c:	66a0      	str	r0, [r4, #104]	; 0x68
    735e:	1a41      	subs	r1, r0, r1
    7360:	440d      	add	r5, r1
    7362:	8831      	ldrh	r1, [r6, #0]
    7364:	f854 0cc4 	ldr.w	r0, [r4, #-196]
    7368:	f004 fbc1 	bl	baee <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    736c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    736e:	4442      	add	r2, r8
    7370:	eba2 0109 	sub.w	r1, r2, r9
    7374:	6e22      	ldr	r2, [r4, #96]	; 0x60
    7376:	1a89      	subs	r1, r1, r2
    7378:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    737a:	1e49      	subs	r1, r1, #1
    737c:	1a82      	subs	r2, r0, r2
    737e:	fb01 5502 	mla	r5, r1, r2, r5
    7382:	66e0      	str	r0, [r4, #108]	; 0x6c
    7384:	3cc8      	subs	r4, #200	; 0xc8
    7386:	e7c8      	b.n	731a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x182>
    7388:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
    738c:	e7d3      	b.n	7336 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x19e>
    738e:	0000      	.short	0x0000
    7390:	20000114 	.word	0x20000114
    7394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7398:	4604      	mov	r4, r0
    739a:	f890 0142 	ldrb.w	r0, [r0, #322]	; 0x142
    739e:	2800      	cmp	r0, #0
    73a0:	d053      	beq.n	744a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2b2>
    73a2:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    73a6:	2803      	cmp	r0, #3
    73a8:	d14f      	bne.n	744a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2b2>
    73aa:	4829      	ldr	r0, [pc, #164]	; (7450 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2b8>)
    73ac:	f894 9063 	ldrb.w	r9, [r4, #99]	; 0x63
    73b0:	7800      	ldrb	r0, [r0, #0]
    73b2:	f7ff ff3b 	bl	722c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x94>
    73b6:	4605      	mov	r5, r0
    73b8:	f894 016d 	ldrb.w	r0, [r4, #365]	; 0x16d
    73bc:	f7ff ff36 	bl	722c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x94>
    73c0:	4428      	add	r0, r5
    73c2:	b286      	uxth	r6, r0
    73c4:	f894 016d 	ldrb.w	r0, [r4, #365]	; 0x16d
    73c8:	f7ff ff30 	bl	722c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x94>
    73cc:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    73d0:	fa1f f880 	uxth.w	r8, r0
    73d4:	4648      	mov	r0, r9
    73d6:	f008 f961 	bl	f69c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    73da:	f8d4 1168 	ldr.w	r1, [r4, #360]	; 0x168
    73de:	1a0d      	subs	r5, r1, r0
    73e0:	4648      	mov	r0, r9
    73e2:	f008 f969 	bl	f6b8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    73e6:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
    73ea:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    73ee:	fbb0 f0fa 	udiv	r0, r0, sl
    73f2:	1a2d      	subs	r5, r5, r0
    73f4:	4648      	mov	r0, r9
    73f6:	f008 f951 	bl	f69c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    73fa:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    73fe:	1a0f      	subs	r7, r1, r0
    7400:	4648      	mov	r0, r9
    7402:	f008 f959 	bl	f6b8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    7406:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    740a:	4401      	add	r1, r0
    740c:	fbb1 f0fa 	udiv	r0, r1, sl
    7410:	1a39      	subs	r1, r7, r0
    7412:	f1a1 0060 	sub.w	r0, r1, #96	; 0x60
    7416:	4370      	muls	r0, r6
    7418:	fbb0 f2f8 	udiv	r2, r0, r8
    741c:	2029      	movs	r0, #41	; 0x29
    741e:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    7422:	3260      	adds	r2, #96	; 0x60
    7424:	eba0 0152 	sub.w	r1, r0, r2, lsr #1
    7428:	eb00 0052 	add.w	r0, r0, r2, lsr #1
    742c:	42a9      	cmp	r1, r5
    742e:	d801      	bhi.n	7434 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x29c>
    7430:	4285      	cmp	r5, r0
    7432:	d901      	bls.n	7438 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2a0>
    7434:	f7fc f8f2 	bl	361c <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>
    7438:	4631      	mov	r1, r6
    743a:	6860      	ldr	r0, [r4, #4]
    743c:	f004 fb57 	bl	baee <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7440:	2100      	movs	r1, #0
    7442:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    7446:	f884 1142 	strb.w	r1, [r4, #322]	; 0x142
    744a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    744e:	0000      	.short	0x0000
    7450:	20000114 	.word	0x20000114
    7454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7456:	460e      	mov	r6, r1
    7458:	4604      	mov	r4, r0
    745a:	f003 fb2f 	bl	aabc <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    745e:	2500      	movs	r5, #0
    7460:	f8c4 0164 	str.w	r0, [r4, #356]	; 0x164
    7464:	2e01      	cmp	r6, #1
    7466:	d102      	bne.n	746e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2d6>
    7468:	480f      	ldr	r0, [pc, #60]	; (74a8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x310>)
    746a:	7880      	ldrb	r0, [r0, #2]
    746c:	b168      	cbz	r0, 748a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2f2>
    746e:	2004      	movs	r0, #4
    7470:	f884 012c 	strb.w	r0, [r4, #300]	; 0x12c
    7474:	f006 ff0f 	bl	e296 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1f4>
    7478:	f8a4 515e 	strh.w	r5, [r4, #350]	; 0x15e
    747c:	f8b4 006c 	ldrh.w	r0, [r4, #108]	; 0x6c
    7480:	f8a4 013e 	strh.w	r0, [r4, #318]	; 0x13e
    7484:	f884 5141 	strb.w	r5, [r4, #321]	; 0x141
    7488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    748a:	9500      	str	r5, [sp, #0]
    748c:	f8b4 10f4 	ldrh.w	r1, [r4, #244]	; 0xf4
    7490:	2301      	movs	r3, #1
    7492:	2200      	movs	r2, #0
    7494:	4620      	mov	r0, r4
    7496:	f000 f809 	bl	74ac <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x314>
    749a:	2800      	cmp	r0, #0
    749c:	d0ea      	beq.n	7474 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2dc>
    749e:	f240 61e2 	movw	r1, #1762	; 0x6e2
    74a2:	2030      	movs	r0, #48	; 0x30
    74a4:	f7fc fc2e 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    74a8:	20000114 	.word	0x20000114
    74ac:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    74b0:	4604      	mov	r4, r0
    74b2:	b085      	sub	sp, #20
    74b4:	f890 0063 	ldrb.w	r0, [r0, #99]	; 0x63
    74b8:	f8df b424 	ldr.w	fp, [pc, #1060]	; 78e0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x748>
    74bc:	e9cd 3000 	strd	r3, r0, [sp]
    74c0:	4699      	mov	r9, r3
    74c2:	460f      	mov	r7, r1
    74c4:	f89b 0000 	ldrb.w	r0, [fp]
    74c8:	f7ff feb0 	bl	722c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x94>
    74cc:	4605      	mov	r5, r0
    74ce:	f894 016d 	ldrb.w	r0, [r4, #365]	; 0x16d
    74d2:	f7ff feab 	bl	722c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x94>
    74d6:	4428      	add	r0, r5
    74d8:	f8ad 0008 	strh.w	r0, [sp, #8]
    74dc:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
    74e0:	280d      	cmp	r0, #13
    74e2:	d004      	beq.n	74ee <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x356>
    74e4:	2000      	movs	r0, #0
    74e6:	9003      	str	r0, [sp, #12]
    74e8:	9807      	ldr	r0, [sp, #28]
    74ea:	b110      	cbz	r0, 74f2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x35a>
    74ec:	e02e      	b.n	754c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x3b4>
    74ee:	2001      	movs	r0, #1
    74f0:	e7f9      	b.n	74e6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x34e>
    74f2:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    74f6:	2803      	cmp	r0, #3
    74f8:	d128      	bne.n	754c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x3b4>
    74fa:	9803      	ldr	r0, [sp, #12]
    74fc:	b330      	cbz	r0, 754c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x3b4>
    74fe:	f8b4 018c 	ldrh.w	r0, [r4, #396]	; 0x18c
    7502:	42b8      	cmp	r0, r7
    7504:	d122      	bne.n	754c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x3b4>
    7506:	f8d4 0134 	ldr.w	r0, [r4, #308]	; 0x134
    750a:	f8c4 0120 	str.w	r0, [r4, #288]	; 0x120
    750e:	6860      	ldr	r0, [r4, #4]
    7510:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
    7514:	f8b4 015e 	ldrh.w	r0, [r4, #350]	; 0x15e
    7518:	f8b4 1106 	ldrh.w	r1, [r4, #262]	; 0x106
    751c:	4408      	add	r0, r1
    751e:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
    7522:	4620      	mov	r0, r4
    7524:	f007 f81d 	bl	e562 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>
    7528:	f8d4 0190 	ldr.w	r0, [r4, #400]	; 0x190
    752c:	61a0      	str	r0, [r4, #24]
    752e:	f8b4 018e 	ldrh.w	r0, [r4, #398]	; 0x18e
    7532:	82a0      	strh	r0, [r4, #20]
    7534:	f8d4 0194 	ldr.w	r0, [r4, #404]	; 0x194
    7538:	6060      	str	r0, [r4, #4]
    753a:	f8b4 0198 	ldrh.w	r0, [r4, #408]	; 0x198
    753e:	8120      	strh	r0, [r4, #8]
    7540:	f8b4 019a 	ldrh.w	r0, [r4, #410]	; 0x19a
    7544:	8160      	strh	r0, [r4, #10]
    7546:	2002      	movs	r0, #2
    7548:	f884 012c 	strb.w	r0, [r4, #300]	; 0x12c
    754c:	f8b4 006c 	ldrh.w	r0, [r4, #108]	; 0x6c
    7550:	f504 75a2 	add.w	r5, r4, #324	; 0x144
    7554:	1a38      	subs	r0, r7, r0
    7556:	fa0f fa80 	sxth.w	sl, r0
    755a:	f8b4 015c 	ldrh.w	r0, [r4, #348]	; 0x15c
    755e:	1a38      	subs	r0, r7, r0
    7560:	fa0f f880 	sxth.w	r8, r0
    7564:	f1b8 0f00 	cmp.w	r8, #0
    7568:	da06      	bge.n	7578 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x3e0>
    756a:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
    756e:	f8c4 0158 	str.w	r0, [r4, #344]	; 0x158
    7572:	2001      	movs	r0, #1
    7574:	46d0      	mov	r8, sl
    7576:	9000      	str	r0, [sp, #0]
    7578:	ab02      	add	r3, sp, #8
    757a:	4652      	mov	r2, sl
    757c:	4641      	mov	r1, r8
    757e:	4620      	mov	r0, r4
    7580:	f7ff fe96 	bl	72b0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x118>
    7584:	9004      	str	r0, [sp, #16]
    7586:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    758a:	b140      	cbz	r0, 759e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x406>
    758c:	2801      	cmp	r0, #1
    758e:	d07c      	beq.n	768a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4f2>
    7590:	2802      	cmp	r0, #2
    7592:	d05a      	beq.n	764a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4b2>
    7594:	2803      	cmp	r0, #3
    7596:	d079      	beq.n	768c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4f4>
    7598:	f44f 61ac 	mov.w	r1, #1376	; 0x560
    759c:	e19c      	b.n	78d8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x740>
    759e:	f8d4 0164 	ldr.w	r0, [r4, #356]	; 0x164
    75a2:	b3e8      	cbz	r0, 7620 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x488>
    75a4:	2101      	movs	r1, #1
    75a6:	2000      	movs	r0, #0
    75a8:	f005 fe01 	bl	d1ae <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    75ac:	4606      	mov	r6, r0
    75ae:	69a0      	ldr	r0, [r4, #24]
    75b0:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    75b4:	4430      	add	r0, r6
    75b6:	f004 fa9a 	bl	baee <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    75ba:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
    75be:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    75c2:	6860      	ldr	r0, [r4, #4]
    75c4:	f004 fa93 	bl	baee <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    75c8:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    75cc:	a901      	add	r1, sp, #4
    75ce:	4668      	mov	r0, sp
    75d0:	f003 f9d2 	bl	a978 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>
    75d4:	e9dd 1200 	ldrd	r1, r2, [sp]
    75d8:	f8d4 0158 	ldr.w	r0, [r4, #344]	; 0x158
    75dc:	f7fb f872 	bl	26c4 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>
    75e0:	4682      	mov	sl, r0
    75e2:	4620      	mov	r0, r4
    75e4:	f006 fe49 	bl	e27a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1d8>
    75e8:	f894 0063 	ldrb.w	r0, [r4, #99]	; 0x63
    75ec:	f8d4 8164 	ldr.w	r8, [r4, #356]	; 0x164
    75f0:	f008 f862 	bl	f6b8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    75f4:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    75f8:	4401      	add	r1, r0
    75fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    75fe:	fbb1 f0f0 	udiv	r0, r1, r0
    7602:	69a1      	ldr	r1, [r4, #24]
    7604:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
    7608:	4431      	add	r1, r6
    760a:	1a08      	subs	r0, r1, r0
    760c:	1a81      	subs	r1, r0, r2
    760e:	4441      	add	r1, r8
    7610:	3920      	subs	r1, #32
    7612:	eba1 060a 	sub.w	r6, r1, sl
    7616:	0050      	lsls	r0, r2, #1
    7618:	8aa1      	ldrh	r1, [r4, #20]
    761a:	3060      	adds	r0, #96	; 0x60
    761c:	4401      	add	r1, r0
    761e:	e000      	b.n	7622 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x48a>
    7620:	e010      	b.n	7644 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4ac>
    7622:	f894 0063 	ldrb.w	r0, [r4, #99]	; 0x63
    7626:	f006 fe3d 	bl	e2a4 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x202>
    762a:	3020      	adds	r0, #32
    762c:	f8cb 0010 	str.w	r0, [fp, #16]
    7630:	f8d4 0164 	ldr.w	r0, [r4, #356]	; 0x164
    7634:	4659      	mov	r1, fp
    7636:	1a30      	subs	r0, r6, r0
    7638:	f5b0 7fd7 	cmp.w	r0, #430	; 0x1ae
    763c:	d85c      	bhi.n	76f8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x560>
    763e:	f240 41f9 	movw	r1, #1273	; 0x4f9
    7642:	e149      	b.n	78d8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x740>
    7644:	f240 41d7 	movw	r1, #1239	; 0x4d7
    7648:	e146      	b.n	78d8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x740>
    764a:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
    764e:	69a0      	ldr	r0, [r4, #24]
    7650:	4408      	add	r0, r1
    7652:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    7656:	f004 fa4a 	bl	baee <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    765a:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
    765e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    7662:	6860      	ldr	r0, [r4, #4]
    7664:	f004 fa43 	bl	baee <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7668:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    766c:	4620      	mov	r0, r4
    766e:	f006 fe04 	bl	e27a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1d8>
    7672:	f8b4 0106 	ldrh.w	r0, [r4, #262]	; 0x106
    7676:	bb10      	cbnz	r0, 76be <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x526>
    7678:	f1b9 0f00 	cmp.w	r9, #0
    767c:	d01f      	beq.n	76be <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x526>
    767e:	f894 8063 	ldrb.w	r8, [r4, #99]	; 0x63
    7682:	4640      	mov	r0, r8
    7684:	f008 f818 	bl	f6b8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    7688:	e001      	b.n	768e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4f6>
    768a:	e036      	b.n	76fa <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x562>
    768c:	e052      	b.n	7734 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x59c>
    768e:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    7692:	4401      	add	r1, r0
    7694:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    7698:	fbb1 f0f0 	udiv	r0, r1, r0
    769c:	f8d4 1130 	ldr.w	r1, [r4, #304]	; 0x130
    76a0:	69a2      	ldr	r2, [r4, #24]
    76a2:	4408      	add	r0, r1
    76a4:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
    76a8:	4411      	add	r1, r2
    76aa:	1a0e      	subs	r6, r1, r0
    76ac:	4640      	mov	r0, r8
    76ae:	f007 fff5 	bl	f69c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    76b2:	f8d4 1168 	ldr.w	r1, [r4, #360]	; 0x168
    76b6:	1a08      	subs	r0, r1, r0
    76b8:	4406      	add	r6, r0
    76ba:	3e20      	subs	r6, #32
    76bc:	e006      	b.n	76cc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x534>
    76be:	69a1      	ldr	r1, [r4, #24]
    76c0:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
    76c4:	4408      	add	r0, r1
    76c6:	f8d4 1130 	ldr.w	r1, [r4, #304]	; 0x130
    76ca:	1a46      	subs	r6, r0, r1
    76cc:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
    76d0:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
    76d4:	f8d4 0130 	ldr.w	r0, [r4, #304]	; 0x130
    76d8:	fb01 0002 	mla	r0, r1, r2, r0
    76dc:	0040      	lsls	r0, r0, #1
    76de:	8aa1      	ldrh	r1, [r4, #20]
    76e0:	3060      	adds	r0, #96	; 0x60
    76e2:	4401      	add	r1, r0
    76e4:	f894 0063 	ldrb.w	r0, [r4, #99]	; 0x63
    76e8:	f006 fddc 	bl	e2a4 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x202>
    76ec:	f8cb 0010 	str.w	r0, [fp, #16]
    76f0:	2001      	movs	r0, #1
    76f2:	4659      	mov	r1, fp
    76f4:	f884 012c 	strb.w	r0, [r4, #300]	; 0x12c
    76f8:	e066      	b.n	77c8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x630>
    76fa:	f8d4 1134 	ldr.w	r1, [r4, #308]	; 0x134
    76fe:	6860      	ldr	r0, [r4, #4]
    7700:	f8b4 2106 	ldrh.w	r2, [r4, #262]	; 0x106
    7704:	1a46      	subs	r6, r0, r1
    7706:	eb02 000a 	add.w	r0, r2, sl
    770a:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
    770e:	f8d4 c120 	ldr.w	ip, [r4, #288]	; 0x120
    7712:	1a80      	subs	r0, r0, r2
    7714:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
    7718:	1e40      	subs	r0, r0, #1
    771a:	fb0c 3202 	mla	r2, ip, r2, r3
    771e:	fb00 2001 	mla	r0, r0, r1, r2
    7722:	0040      	lsls	r0, r0, #1
    7724:	8aa1      	ldrh	r1, [r4, #20]
    7726:	3060      	adds	r0, #96	; 0x60
    7728:	4401      	add	r1, r0
    772a:	fb06 f608 	mul.w	r6, r6, r8
    772e:	f894 0063 	ldrb.w	r0, [r4, #99]	; 0x63
    7732:	e044      	b.n	77be <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x626>
    7734:	6860      	ldr	r0, [r4, #4]
    7736:	f8d4 1134 	ldr.w	r1, [r4, #308]	; 0x134
    773a:	fb00 f008 	mul.w	r0, r0, r8
    773e:	fb08 0611 	mls	r6, r8, r1, r0
    7742:	f894 0075 	ldrb.w	r0, [r4, #117]	; 0x75
    7746:	2824      	cmp	r0, #36	; 0x24
    7748:	d003      	beq.n	7752 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x5ba>
    774a:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
    774e:	2824      	cmp	r0, #36	; 0x24
    7750:	d109      	bne.n	7766 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x5ce>
    7752:	f8b4 018c 	ldrh.w	r0, [r4, #396]	; 0x18c
    7756:	1a38      	subs	r0, r7, r0
    7758:	b200      	sxth	r0, r0
    775a:	2800      	cmp	r0, #0
    775c:	db03      	blt.n	7766 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x5ce>
    775e:	f894 018f 	ldrb.w	r0, [r4, #399]	; 0x18f
    7762:	b100      	cbz	r0, 7766 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x5ce>
    7764:	9001      	str	r0, [sp, #4]
    7766:	9800      	ldr	r0, [sp, #0]
    7768:	b1f8      	cbz	r0, 77aa <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x612>
    776a:	f8b4 0106 	ldrh.w	r0, [r4, #262]	; 0x106
    776e:	b9e0      	cbnz	r0, 77aa <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x612>
    7770:	f8d4 0168 	ldr.w	r0, [r4, #360]	; 0x168
    7774:	2800      	cmp	r0, #0
    7776:	d07d      	beq.n	7874 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6dc>
    7778:	f8d4 0164 	ldr.w	r0, [r4, #356]	; 0x164
    777c:	2800      	cmp	r0, #0
    777e:	d079      	beq.n	7874 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6dc>
    7780:	f894 0063 	ldrb.w	r0, [r4, #99]	; 0x63
    7784:	f007 ff98 	bl	f6b8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    7788:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    778c:	4401      	add	r1, r0
    778e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    7792:	fbb1 f0f0 	udiv	r0, r1, r0
    7796:	1a36      	subs	r6, r6, r0
    7798:	f894 0063 	ldrb.w	r0, [r4, #99]	; 0x63
    779c:	f007 ff7e 	bl	f69c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    77a0:	f8d4 1168 	ldr.w	r1, [r4, #360]	; 0x168
    77a4:	1a08      	subs	r0, r1, r0
    77a6:	4406      	add	r6, r0
    77a8:	3e20      	subs	r6, #32
    77aa:	f8b4 1106 	ldrh.w	r1, [r4, #262]	; 0x106
    77ae:	eb01 000a 	add.w	r0, r1, sl
    77b2:	f8d4 1134 	ldr.w	r1, [r4, #308]	; 0x134
    77b6:	4348      	muls	r0, r1
    77b8:	0041      	lsls	r1, r0, #1
    77ba:	3160      	adds	r1, #96	; 0x60
    77bc:	9801      	ldr	r0, [sp, #4]
    77be:	f006 fd71 	bl	e2a4 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x202>
    77c2:	4659      	mov	r1, fp
    77c4:	f8cb 0010 	str.w	r0, [fp, #16]
    77c8:	9804      	ldr	r0, [sp, #16]
    77ca:	6909      	ldr	r1, [r1, #16]
    77cc:	1a33      	subs	r3, r6, r0
    77ce:	f8d4 6134 	ldr.w	r6, [r4, #308]	; 0x134
    77d2:	6860      	ldr	r0, [r4, #4]
    77d4:	1b80      	subs	r0, r0, r6
    77d6:	f2a0 203d 	subw	r0, r0, #573	; 0x23d
    77da:	f8cb 0014 	str.w	r0, [fp, #20]
    77de:	4281      	cmp	r1, r0
    77e0:	d800      	bhi.n	77e4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x64c>
    77e2:	4608      	mov	r0, r1
    77e4:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    77e8:	2000      	movs	r0, #0
    77ea:	7028      	strb	r0, [r5, #0]
    77ec:	2064      	movs	r0, #100	; 0x64
    77ee:	8128      	strh	r0, [r5, #8]
    77f0:	f8d4 0158 	ldr.w	r0, [r4, #344]	; 0x158
    77f4:	4619      	mov	r1, r3
    77f6:	34dc      	adds	r4, #220	; 0xdc
    77f8:	f7f9 fee0 	bl	15bc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    77fc:	60e8      	str	r0, [r5, #12]
    77fe:	f854 0cb4 	ldr.w	r0, [r4, #-180]
    7802:	6a61      	ldr	r1, [r4, #36]	; 0x24
    7804:	4408      	add	r0, r1
    7806:	6068      	str	r0, [r5, #4]
    7808:	68e8      	ldr	r0, [r5, #12]
    780a:	67e0      	str	r0, [r4, #124]	; 0x7c
    780c:	f8a4 7080 	strh.w	r7, [r4, #128]	; 0x80
    7810:	2001      	movs	r0, #1
    7812:	72a8      	strb	r0, [r5, #10]
    7814:	8aa1      	ldrh	r1, [r4, #20]
    7816:	3cdc      	subs	r4, #220	; 0xdc
    7818:	1bc9      	subs	r1, r1, r7
    781a:	b209      	sxth	r1, r1
    781c:	2900      	cmp	r1, #0
    781e:	dd01      	ble.n	7824 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x68c>
    7820:	2103      	movs	r1, #3
    7822:	72a9      	strb	r1, [r5, #10]
    7824:	9903      	ldr	r1, [sp, #12]
    7826:	b331      	cbz	r1, 7876 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6de>
    7828:	f1b9 0f00 	cmp.w	r9, #0
    782c:	d027      	beq.n	787e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6e6>
    782e:	bf00      	nop
    7830:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
    7834:	b392      	cbz	r2, 789c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x704>
    7836:	f8b4 111a 	ldrh.w	r1, [r4, #282]	; 0x11a
    783a:	bf00      	nop
    783c:	f8a4 111a 	strh.w	r1, [r4, #282]	; 0x11a
    7840:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
    7844:	1c49      	adds	r1, r1, #1
    7846:	434b      	muls	r3, r1
    7848:	4293      	cmp	r3, r2
    784a:	d218      	bcs.n	787e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6e6>
    784c:	7aa9      	ldrb	r1, [r5, #10]
    784e:	1e49      	subs	r1, r1, #1
    7850:	2900      	cmp	r1, #0
    7852:	dd14      	ble.n	787e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6e6>
    7854:	72a8      	strb	r0, [r5, #10]
    7856:	f8b4 011a 	ldrh.w	r0, [r4, #282]	; 0x11a
    785a:	2101      	movs	r1, #1
    785c:	1c40      	adds	r0, r0, #1
    785e:	f8a4 011a 	strh.w	r0, [r4, #282]	; 0x11a
    7862:	f504 708e 	add.w	r0, r4, #284	; 0x11c
    7866:	f7fc fae5 	bl	3e34 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    786a:	f894 011c 	ldrb.w	r0, [r4, #284]	; 0x11c
    786e:	f000 0007 	and.w	r0, r0, #7
    7872:	e001      	b.n	7878 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6e0>
    7874:	e013      	b.n	789e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x706>
    7876:	e015      	b.n	78a4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x70c>
    7878:	1c40      	adds	r0, r0, #1
    787a:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
    787e:	f894 0160 	ldrb.w	r0, [r4, #352]	; 0x160
    7882:	4629      	mov	r1, r5
    7884:	f006 fd20 	bl	e2c8 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x226>
    7888:	b320      	cbz	r0, 78d4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x73c>
    788a:	9807      	ldr	r0, [sp, #28]
    788c:	f080 0001 	eor.w	r0, r0, #1
    7890:	f884 0140 	strb.w	r0, [r4, #320]	; 0x140
    7894:	2000      	movs	r0, #0
    7896:	b009      	add	sp, #36	; 0x24
    7898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    789c:	e018      	b.n	78d0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x738>
    789e:	f240 514b 	movw	r1, #1355	; 0x54b
    78a2:	e019      	b.n	78d8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x740>
    78a4:	f1b9 0f00 	cmp.w	r9, #0
    78a8:	d1c2      	bne.n	7830 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x698>
    78aa:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    78ae:	2800      	cmp	r0, #0
    78b0:	d0e5      	beq.n	787e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6e6>
    78b2:	f8d4 1134 	ldr.w	r1, [r4, #308]	; 0x134
    78b6:	6860      	ldr	r0, [r4, #4]
    78b8:	1a41      	subs	r1, r0, r1
    78ba:	4628      	mov	r0, r5
    78bc:	f005 fc89 	bl	d1d2 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    78c0:	0400      	lsls	r0, r0, #16
    78c2:	0c00      	lsrs	r0, r0, #16
    78c4:	d0db      	beq.n	787e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6e6>
    78c6:	9912      	ldr	r1, [sp, #72]	; 0x48
    78c8:	b101      	cbz	r1, 78cc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x734>
    78ca:	8008      	strh	r0, [r1, #0]
    78cc:	2001      	movs	r0, #1
    78ce:	e7e2      	b.n	7896 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6fe>
    78d0:	2100      	movs	r1, #0
    78d2:	e7b3      	b.n	783c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6a4>
    78d4:	f240 51ab 	movw	r1, #1451	; 0x5ab
    78d8:	2030      	movs	r0, #48	; 0x30
    78da:	f7fc fa13 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    78de:	0000      	.short	0x0000
    78e0:	20000114 	.word	0x20000114
    78e4:	b570      	push	{r4, r5, r6, lr}
    78e6:	b140      	cbz	r0, 78fa <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x762>
    78e8:	2909      	cmp	r1, #9
    78ea:	d24a      	bcs.n	7982 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7ea>
    78ec:	e8df f001 	tbb	[pc, r1]
    78f0:	3d3d1707 	.word	0x3d3d1707
    78f4:	412b4939 	.word	0x412b4939
    78f8:	0045      	.short	0x0045
    78fa:	21d5      	movs	r1, #213	; 0xd5
    78fc:	e03e      	b.n	797c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7e4>
    78fe:	4922      	ldr	r1, [pc, #136]	; (7988 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7f0>)
    7900:	4604      	mov	r4, r0
    7902:	6188      	str	r0, [r1, #24]
    7904:	f7fe fdc2 	bl	648c <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
    7908:	b110      	cbz	r0, 7910 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x778>
    790a:	f240 2187 	movw	r1, #647	; 0x287
    790e:	e035      	b.n	797c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7e4>
    7910:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
    7914:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7918:	38f6      	subs	r0, #246	; 0xf6
    791a:	f7fa be21 	b.w	2560 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    791e:	4605      	mov	r5, r0
    7920:	f006 f978 	bl	dc14 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    7924:	b9a8      	cbnz	r0, 7952 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7ba>
    7926:	4628      	mov	r0, r5
    7928:	f006 fc7e 	bl	e228 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x186>
    792c:	4604      	mov	r4, r0
    792e:	f8d5 00d0 	ldr.w	r0, [r5, #208]	; 0xd0
    7932:	42a0      	cmp	r0, r4
    7934:	d20b      	bcs.n	794e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7b6>
    7936:	1a20      	subs	r0, r4, r0
    7938:	2104      	movs	r1, #4
    793a:	f7f9 fd7d 	bl	1438 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    793e:	b130      	cbz	r0, 794e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7b6>
    7940:	4628      	mov	r0, r5
    7942:	f8c5 40d0 	str.w	r4, [r5, #208]	; 0xd0
    7946:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    794a:	f006 b934 	b.w	dbb6 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
    794e:	f8c5 40d0 	str.w	r4, [r5, #208]	; 0xd0
    7952:	4628      	mov	r0, r5
    7954:	f7fe fdb6 	bl	64c4 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
    7958:	2800      	cmp	r0, #0
    795a:	d014      	beq.n	7986 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7ee>
    795c:	f240 21bb 	movw	r1, #699	; 0x2bb
    7960:	e00c      	b.n	797c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7e4>
    7962:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7966:	f003 baab 	b.w	aec0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    796a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    796e:	f006 bbf5 	b.w	e15c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xba>
    7972:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7976:	f006 bc4e 	b.w	e216 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x174>
    797a:	21f7      	movs	r1, #247	; 0xf7
    797c:	2030      	movs	r0, #48	; 0x30
    797e:	f7fc f9c1 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7982:	21fb      	movs	r1, #251	; 0xfb
    7984:	e7fa      	b.n	797c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7e4>
    7986:	bd70      	pop	{r4, r5, r6, pc}
    7988:	20000114 	.word	0x20000114
    798c:	b570      	push	{r4, r5, r6, lr}
    798e:	4604      	mov	r4, r0
    7990:	f7f9 ff7e 	bl	1890 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    7994:	2864      	cmp	r0, #100	; 0x64
    7996:	d901      	bls.n	799c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x804>
    7998:	4605      	mov	r5, r0
    799a:	e000      	b.n	799e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x806>
    799c:	2564      	movs	r5, #100	; 0x64
    799e:	f894 0063 	ldrb.w	r0, [r4, #99]	; 0x63
    79a2:	2128      	movs	r1, #40	; 0x28
    79a4:	f006 fbd8 	bl	e158 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb6>
    79a8:	4428      	add	r0, r5
    79aa:	f8d4 1134 	ldr.w	r1, [r4, #308]	; 0x134
    79ae:	f200 2037 	addw	r0, r0, #567	; 0x237
    79b2:	180e      	adds	r6, r1, r0
    79b4:	f894 0063 	ldrb.w	r0, [r4, #99]	; 0x63
    79b8:	2128      	movs	r1, #40	; 0x28
    79ba:	f006 fbcd 	bl	e158 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb6>
    79be:	f200 229b 	addw	r2, r0, #667	; 0x29b
    79c2:	4620      	mov	r0, r4
    79c4:	6a61      	ldr	r1, [r4, #36]	; 0x24
    79c6:	f005 ff8f 	bl	d8e8 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    79ca:	4605      	mov	r5, r0
    79cc:	4632      	mov	r2, r6
    79ce:	4620      	mov	r0, r4
    79d0:	6861      	ldr	r1, [r4, #4]
    79d2:	f005 ff89 	bl	d8e8 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    79d6:	4907      	ldr	r1, [pc, #28]	; (79f4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x85c>)
    79d8:	4285      	cmp	r5, r0
    79da:	6088      	str	r0, [r1, #8]
    79dc:	d200      	bcs.n	79e0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x848>
    79de:	4628      	mov	r0, r5
    79e0:	6048      	str	r0, [r1, #4]
    79e2:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
    79e6:	f5a0 70b2 	sub.w	r0, r0, #356	; 0x164
    79ea:	60c8      	str	r0, [r1, #12]
    79ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    79f0:	f7fa bdb6 	b.w	2560 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    79f4:	20000114 	.word	0x20000114
    79f8:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    79fa:	4604      	mov	r4, r0
    79fc:	f004 f838 	bl	ba70 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    7a00:	4601      	mov	r1, r0
    7a02:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
    7a06:	f7f9 fe0b 	bl	1620 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    7a0a:	6861      	ldr	r1, [r4, #4]
    7a0c:	b111      	cbz	r1, 7a14 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x87c>
    7a0e:	fbb0 f0f1 	udiv	r0, r0, r1
    7a12:	e000      	b.n	7a16 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x87e>
    7a14:	2000      	movs	r0, #0
    7a16:	f894 1076 	ldrb.w	r1, [r4, #118]	; 0x76
    7a1a:	290d      	cmp	r1, #13
    7a1c:	d00c      	beq.n	7a38 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8a0>
    7a1e:	f8b4 206c 	ldrh.w	r2, [r4, #108]	; 0x6c
    7a22:	f8b4 113e 	ldrh.w	r1, [r4, #318]	; 0x13e
    7a26:	1813      	adds	r3, r2, r0
    7a28:	1acb      	subs	r3, r1, r3
    7a2a:	b21b      	sxth	r3, r3
    7a2c:	2b00      	cmp	r3, #0
    7a2e:	db06      	blt.n	7a3e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8a6>
    7a30:	1c49      	adds	r1, r1, #1
    7a32:	f8a4 113e 	strh.w	r1, [r4, #318]	; 0x13e
    7a36:	e006      	b.n	7a46 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8ae>
    7a38:	f8b4 013e 	ldrh.w	r0, [r4, #318]	; 0x13e
    7a3c:	e00c      	b.n	7a58 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8c0>
    7a3e:	1c40      	adds	r0, r0, #1
    7a40:	4410      	add	r0, r2
    7a42:	f8a4 013e 	strh.w	r0, [r4, #318]	; 0x13e
    7a46:	f894 0141 	ldrb.w	r0, [r4, #321]	; 0x141
    7a4a:	b940      	cbnz	r0, 7a5e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8c6>
    7a4c:	f8b4 013e 	ldrh.w	r0, [r4, #318]	; 0x13e
    7a50:	f8b4 10f4 	ldrh.w	r1, [r4, #244]	; 0xf4
    7a54:	4288      	cmp	r0, r1
    7a56:	d102      	bne.n	7a5e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8c6>
    7a58:	1c40      	adds	r0, r0, #1
    7a5a:	f8a4 013e 	strh.w	r0, [r4, #318]	; 0x13e
    7a5e:	f8b4 015e 	ldrh.w	r0, [r4, #350]	; 0x15e
    7a62:	1c40      	adds	r0, r0, #1
    7a64:	f8a4 015e 	strh.w	r0, [r4, #350]	; 0x15e
    7a68:	f8b4 009e 	ldrh.w	r0, [r4, #158]	; 0x9e
    7a6c:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
    7a70:	1a40      	subs	r0, r0, r1
    7a72:	f8b4 106c 	ldrh.w	r1, [r4, #108]	; 0x6c
    7a76:	1e40      	subs	r0, r0, #1
    7a78:	4408      	add	r0, r1
    7a7a:	b285      	uxth	r5, r0
    7a7c:	e023      	b.n	7ac6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x92e>
    7a7e:	a801      	add	r0, sp, #4
    7a80:	2300      	movs	r3, #0
    7a82:	9000      	str	r0, [sp, #0]
    7a84:	461a      	mov	r2, r3
    7a86:	4620      	mov	r0, r4
    7a88:	f7ff fd10 	bl	74ac <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x314>
    7a8c:	2800      	cmp	r0, #0
    7a8e:	d036      	beq.n	7afe <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x966>
    7a90:	2801      	cmp	r0, #1
    7a92:	d004      	beq.n	7a9e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x906>
    7a94:	f240 6162 	movw	r1, #1634	; 0x662
    7a98:	2030      	movs	r0, #48	; 0x30
    7a9a:	f7fc f933 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7a9e:	f8b4 113e 	ldrh.w	r1, [r4, #318]	; 0x13e
    7aa2:	f8b4 00f0 	ldrh.w	r0, [r4, #240]	; 0xf0
    7aa6:	1a0a      	subs	r2, r1, r0
    7aa8:	b212      	sxth	r2, r2
    7aaa:	2a00      	cmp	r2, #0
    7aac:	da06      	bge.n	7abc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x924>
    7aae:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    7ab2:	440a      	add	r2, r1
    7ab4:	1aaa      	subs	r2, r5, r2
    7ab6:	b212      	sxth	r2, r2
    7ab8:	2a00      	cmp	r2, #0
    7aba:	db02      	blt.n	7ac2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x92a>
    7abc:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    7ac0:	4408      	add	r0, r1
    7ac2:	f8a4 013e 	strh.w	r0, [r4, #318]	; 0x13e
    7ac6:	f8b4 113e 	ldrh.w	r1, [r4, #318]	; 0x13e
    7aca:	1a68      	subs	r0, r5, r1
    7acc:	b200      	sxth	r0, r0
    7ace:	2800      	cmp	r0, #0
    7ad0:	dad5      	bge.n	7a7e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8e6>
    7ad2:	f894 0079 	ldrb.w	r0, [r4, #121]	; 0x79
    7ad6:	b180      	cbz	r0, 7afa <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x962>
    7ad8:	f05f 0008 	movs.w	r0, #8
    7adc:	f884 008d 	strb.w	r0, [r4, #141]	; 0x8d
    7ae0:	2001      	movs	r0, #1
    7ae2:	f884 008c 	strb.w	r0, [r4, #140]	; 0x8c
    7ae6:	4620      	mov	r0, r4
    7ae8:	f006 fd70 	bl	e5cc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    7aec:	4620      	mov	r0, r4
    7aee:	f006 fc44 	bl	e37a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2d8>
    7af2:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    7af6:	f002 b861 	b.w	9bbc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    7afa:	203e      	movs	r0, #62	; 0x3e
    7afc:	e7ee      	b.n	7adc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x944>
    7afe:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

00007b00 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>:
    7b00:	4806      	ldr	r0, [pc, #24]	; (7b1c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x1c>)
    7b02:	4905      	ldr	r1, [pc, #20]	; (7b18 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x18>)
    7b04:	6501      	str	r1, [r0, #80]	; 0x50
    7b06:	4906      	ldr	r1, [pc, #24]	; (7b20 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x20>)
    7b08:	6541      	str	r1, [r0, #84]	; 0x54
    7b0a:	4807      	ldr	r0, [pc, #28]	; (7b28 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x28>)
    7b0c:	4905      	ldr	r1, [pc, #20]	; (7b24 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x24>)
    7b0e:	6501      	str	r1, [r0, #80]	; 0x50
    7b10:	4906      	ldr	r1, [pc, #24]	; (7b2c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x2c>)
    7b12:	6541      	str	r1, [r0, #84]	; 0x54
    7b14:	4770      	bx	lr
    7b16:	0000      	.short	0x0000
    7b18:	00008fa5 	.word	0x00008fa5
    7b1c:	20000144 	.word	0x20000144
    7b20:	00009065 	.word	0x00009065
    7b24:	000096b1 	.word	0x000096b1
    7b28:	200001a8 	.word	0x200001a8
    7b2c:	000096e1 	.word	0x000096e1

00007b30 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA>:
    7b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7b32:	460d      	mov	r5, r1
    7b34:	4607      	mov	r7, r0
    7b36:	2100      	movs	r1, #0
    7b38:	f005 f92f 	bl	cd9a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    7b3c:	1e04      	subs	r4, r0, #0
    7b3e:	d04f      	beq.n	7be0 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
    7b40:	f894 0068 	ldrb.w	r0, [r4, #104]	; 0x68
    7b44:	2800      	cmp	r0, #0
    7b46:	d04b      	beq.n	7be0 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
    7b48:	f894 01b0 	ldrb.w	r0, [r4, #432]	; 0x1b0
    7b4c:	f88d 0000 	strb.w	r0, [sp]
    7b50:	9800      	ldr	r0, [sp, #0]
    7b52:	9000      	str	r0, [sp, #0]
    7b54:	f89d 0000 	ldrb.w	r0, [sp]
    7b58:	2600      	movs	r6, #0
    7b5a:	b1d8      	cbz	r0, 7b94 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x64>
    7b5c:	706e      	strb	r6, [r5, #1]
    7b5e:	2007      	movs	r0, #7
    7b60:	7028      	strb	r0, [r5, #0]
    7b62:	e00b      	b.n	7b7c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x4c>
    7b64:	f884 61b0 	strb.w	r6, [r4, #432]	; 0x1b0
    7b68:	83a6      	strh	r6, [r4, #28]
    7b6a:	f8d4 01b2 	ldr.w	r0, [r4, #434]	; 0x1b2
    7b6e:	6068      	str	r0, [r5, #4]
    7b70:	f8d4 01b6 	ldr.w	r0, [r4, #438]	; 0x1b6
    7b74:	60a8      	str	r0, [r5, #8]
    7b76:	f8b4 01ba 	ldrh.w	r0, [r4, #442]	; 0x1ba
    7b7a:	81a8      	strh	r0, [r5, #12]
    7b7c:	f894 01b0 	ldrb.w	r0, [r4, #432]	; 0x1b0
    7b80:	f88d 0000 	strb.w	r0, [sp]
    7b84:	9800      	ldr	r0, [sp, #0]
    7b86:	9000      	str	r0, [sp, #0]
    7b88:	f89d 0000 	ldrb.w	r0, [sp]
    7b8c:	2800      	cmp	r0, #0
    7b8e:	d1e9      	bne.n	7b64 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x34>
    7b90:	712e      	strb	r6, [r5, #4]
    7b92:	e10b      	b.n	7dac <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7b94:	f894 01bc 	ldrb.w	r0, [r4, #444]	; 0x1bc
    7b98:	b3a0      	cbz	r0, 7c04 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xd4>
    7b9a:	f894 01bc 	ldrb.w	r0, [r4, #444]	; 0x1bc
    7b9e:	280b      	cmp	r0, #11
    7ba0:	d016      	beq.n	7bd0 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xa0>
    7ba2:	280c      	cmp	r0, #12
    7ba4:	d004      	beq.n	7bb0 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x80>
    7ba6:	f640 21ce 	movw	r1, #2766	; 0xace
    7baa:	2031      	movs	r0, #49	; 0x31
    7bac:	f7fc f8aa 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7bb0:	8820      	ldrh	r0, [r4, #0]
    7bb2:	f7fc fcdb 	bl	456c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    7bb6:	4607      	mov	r7, r0
    7bb8:	f004 ffaa 	bl	cb10 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    7bbc:	b978      	cbnz	r0, 7bde <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xae>
    7bbe:	706e      	strb	r6, [r5, #1]
    7bc0:	200c      	movs	r0, #12
    7bc2:	7028      	strb	r0, [r5, #0]
    7bc4:	f894 01be 	ldrb.w	r0, [r4, #446]	; 0x1be
    7bc8:	7128      	strb	r0, [r5, #4]
    7bca:	8820      	ldrh	r0, [r4, #0]
    7bcc:	80e8      	strh	r0, [r5, #6]
    7bce:	e013      	b.n	7bf8 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xc8>
    7bd0:	8820      	ldrh	r0, [r4, #0]
    7bd2:	f7fc fccb 	bl	456c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    7bd6:	4607      	mov	r7, r0
    7bd8:	f004 ff9a 	bl	cb10 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    7bdc:	b108      	cbz	r0, 7be2 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb2>
    7bde:	2000      	movs	r0, #0
    7be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7be2:	706e      	strb	r6, [r5, #1]
    7be4:	200b      	movs	r0, #11
    7be6:	7028      	strb	r0, [r5, #0]
    7be8:	f894 01be 	ldrb.w	r0, [r4, #446]	; 0x1be
    7bec:	7128      	strb	r0, [r5, #4]
    7bee:	8820      	ldrh	r0, [r4, #0]
    7bf0:	80e8      	strh	r0, [r5, #6]
    7bf2:	f894 01c2 	ldrb.w	r0, [r4, #450]	; 0x1c2
    7bf6:	7228      	strb	r0, [r5, #8]
    7bf8:	f884 61bc 	strb.w	r6, [r4, #444]	; 0x1bc
    7bfc:	4638      	mov	r0, r7
    7bfe:	f004 ff9c 	bl	cb3a <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    7c02:	e0d3      	b.n	7dac <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7c04:	e7ff      	b.n	7c06 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xd6>
    7c06:	f894 01f2 	ldrb.w	r0, [r4, #498]	; 0x1f2
    7c0a:	f88d 0000 	strb.w	r0, [sp]
    7c0e:	9800      	ldr	r0, [sp, #0]
    7c10:	9000      	str	r0, [sp, #0]
    7c12:	f89d 0000 	ldrb.w	r0, [sp]
    7c16:	b130      	cbz	r0, 7c26 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xf6>
    7c18:	706e      	strb	r6, [r5, #1]
    7c1a:	200e      	movs	r0, #14
    7c1c:	7028      	strb	r0, [r5, #0]
    7c1e:	80af      	strh	r7, [r5, #4]
    7c20:	f884 61f2 	strb.w	r6, [r4, #498]	; 0x1f2
    7c24:	e0c2      	b.n	7dac <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7c26:	f894 01c4 	ldrb.w	r0, [r4, #452]	; 0x1c4
    7c2a:	f88d 0000 	strb.w	r0, [sp]
    7c2e:	9800      	ldr	r0, [sp, #0]
    7c30:	9000      	str	r0, [sp, #0]
    7c32:	f89d 0000 	ldrb.w	r0, [sp]
    7c36:	b198      	cbz	r0, 7c60 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x130>
    7c38:	706e      	strb	r6, [r5, #1]
    7c3a:	2008      	movs	r0, #8
    7c3c:	7028      	strb	r0, [r5, #0]
    7c3e:	8820      	ldrh	r0, [r4, #0]
    7c40:	80a8      	strh	r0, [r5, #4]
    7c42:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
    7c46:	f8c5 1006 	str.w	r1, [r5, #6]
    7c4a:	f8d4 11cc 	ldr.w	r1, [r4, #460]	; 0x1cc
    7c4e:	f8c5 100a 	str.w	r1, [r5, #10]
    7c52:	f8b4 01d0 	ldrh.w	r0, [r4, #464]	; 0x1d0
    7c56:	81e8      	strh	r0, [r5, #14]
    7c58:	f504 74e2 	add.w	r4, r4, #452	; 0x1c4
    7c5c:	7026      	strb	r6, [r4, #0]
    7c5e:	e0a5      	b.n	7dac <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7c60:	f894 01ec 	ldrb.w	r0, [r4, #492]	; 0x1ec
    7c64:	f88d 0000 	strb.w	r0, [sp]
    7c68:	9800      	ldr	r0, [sp, #0]
    7c6a:	9000      	str	r0, [sp, #0]
    7c6c:	f89d 0000 	ldrb.w	r0, [sp]
    7c70:	b1a0      	cbz	r0, 7c9c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x16c>
    7c72:	706e      	strb	r6, [r5, #1]
    7c74:	2016      	movs	r0, #22
    7c76:	7028      	strb	r0, [r5, #0]
    7c78:	e005      	b.n	7c86 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x156>
    7c7a:	bf00      	nop
    7c7c:	f884 61ec 	strb.w	r6, [r4, #492]	; 0x1ec
    7c80:	f8d4 01ee 	ldr.w	r0, [r4, #494]	; 0x1ee
    7c84:	6068      	str	r0, [r5, #4]
    7c86:	f894 01ec 	ldrb.w	r0, [r4, #492]	; 0x1ec
    7c8a:	f88d 0000 	strb.w	r0, [sp]
    7c8e:	9800      	ldr	r0, [sp, #0]
    7c90:	9000      	str	r0, [sp, #0]
    7c92:	f89d 0000 	ldrb.w	r0, [sp]
    7c96:	2800      	cmp	r0, #0
    7c98:	d1f0      	bne.n	7c7c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x14c>
    7c9a:	e087      	b.n	7dac <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7c9c:	f894 0202 	ldrb.w	r0, [r4, #514]	; 0x202
    7ca0:	f88d 0000 	strb.w	r0, [sp]
    7ca4:	9800      	ldr	r0, [sp, #0]
    7ca6:	9000      	str	r0, [sp, #0]
    7ca8:	f89d 0000 	ldrb.w	r0, [sp]
    7cac:	b170      	cbz	r0, 7ccc <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x19c>
    7cae:	706e      	strb	r6, [r5, #1]
    7cb0:	2006      	movs	r0, #6
    7cb2:	7028      	strb	r0, [r5, #0]
    7cb4:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
    7cb8:	6068      	str	r0, [r5, #4]
    7cba:	f8d4 0208 	ldr.w	r0, [r4, #520]	; 0x208
    7cbe:	60a8      	str	r0, [r5, #8]
    7cc0:	f8d4 020c 	ldr.w	r0, [r4, #524]	; 0x20c
    7cc4:	60e8      	str	r0, [r5, #12]
    7cc6:	f504 7401 	add.w	r4, r4, #516	; 0x204
    7cca:	e03a      	b.n	7d42 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x212>
    7ccc:	f894 01d2 	ldrb.w	r0, [r4, #466]	; 0x1d2
    7cd0:	f88d 0000 	strb.w	r0, [sp]
    7cd4:	9800      	ldr	r0, [sp, #0]
    7cd6:	9000      	str	r0, [sp, #0]
    7cd8:	f89d 0000 	ldrb.w	r0, [sp]
    7cdc:	b1d0      	cbz	r0, 7d14 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1e4>
    7cde:	706e      	strb	r6, [r5, #1]
    7ce0:	2012      	movs	r0, #18
    7ce2:	7028      	strb	r0, [r5, #0]
    7ce4:	e00b      	b.n	7cfe <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1ce>
    7ce6:	bf00      	nop
    7ce8:	f884 61d2 	strb.w	r6, [r4, #466]	; 0x1d2
    7cec:	f8d4 01d4 	ldr.w	r0, [r4, #468]	; 0x1d4
    7cf0:	6068      	str	r0, [r5, #4]
    7cf2:	f8d4 01d8 	ldr.w	r0, [r4, #472]	; 0x1d8
    7cf6:	60a8      	str	r0, [r5, #8]
    7cf8:	f8d4 01dc 	ldr.w	r0, [r4, #476]	; 0x1dc
    7cfc:	60e8      	str	r0, [r5, #12]
    7cfe:	f894 01d2 	ldrb.w	r0, [r4, #466]	; 0x1d2
    7d02:	f88d 0000 	strb.w	r0, [sp]
    7d06:	9800      	ldr	r0, [sp, #0]
    7d08:	9000      	str	r0, [sp, #0]
    7d0a:	f89d 0000 	ldrb.w	r0, [sp]
    7d0e:	2800      	cmp	r0, #0
    7d10:	d1ea      	bne.n	7ce8 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1b8>
    7d12:	e04b      	b.n	7dac <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7d14:	f894 01e0 	ldrb.w	r0, [r4, #480]	; 0x1e0
    7d18:	f88d 0000 	strb.w	r0, [sp]
    7d1c:	9800      	ldr	r0, [sp, #0]
    7d1e:	9000      	str	r0, [sp, #0]
    7d20:	f89d 0000 	ldrb.w	r0, [sp]
    7d24:	b180      	cbz	r0, 7d48 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x218>
    7d26:	706e      	strb	r6, [r5, #1]
    7d28:	2018      	movs	r0, #24
    7d2a:	7028      	strb	r0, [r5, #0]
    7d2c:	f8d4 01e2 	ldr.w	r0, [r4, #482]	; 0x1e2
    7d30:	6068      	str	r0, [r5, #4]
    7d32:	f8d4 01e6 	ldr.w	r0, [r4, #486]	; 0x1e6
    7d36:	60a8      	str	r0, [r5, #8]
    7d38:	f8b4 01ea 	ldrh.w	r0, [r4, #490]	; 0x1ea
    7d3c:	81a8      	strh	r0, [r5, #12]
    7d3e:	f504 74f1 	add.w	r4, r4, #482	; 0x1e2
    7d42:	f804 6c02 	strb.w	r6, [r4, #-2]
    7d46:	e031      	b.n	7dac <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7d48:	f894 01f4 	ldrb.w	r0, [r4, #500]	; 0x1f4
    7d4c:	f88d 0000 	strb.w	r0, [sp]
    7d50:	9800      	ldr	r0, [sp, #0]
    7d52:	9000      	str	r0, [sp, #0]
    7d54:	f89d 0000 	ldrb.w	r0, [sp]
    7d58:	b138      	cbz	r0, 7d6a <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x23a>
    7d5a:	2019      	movs	r0, #25
    7d5c:	7028      	strb	r0, [r5, #0]
    7d5e:	f8d4 01f6 	ldr.w	r0, [r4, #502]	; 0x1f6
    7d62:	6068      	str	r0, [r5, #4]
    7d64:	f884 61f4 	strb.w	r6, [r4, #500]	; 0x1f4
    7d68:	e020      	b.n	7dac <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7d6a:	f894 01fa 	ldrb.w	r0, [r4, #506]	; 0x1fa
    7d6e:	f88d 0000 	strb.w	r0, [sp]
    7d72:	9800      	ldr	r0, [sp, #0]
    7d74:	9000      	str	r0, [sp, #0]
    7d76:	f89d 0000 	ldrb.w	r0, [sp]
    7d7a:	2800      	cmp	r0, #0
    7d7c:	f43f af30 	beq.w	7be0 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
    7d80:	706e      	strb	r6, [r5, #1]
    7d82:	2013      	movs	r0, #19
    7d84:	7028      	strb	r0, [r5, #0]
    7d86:	e007      	b.n	7d98 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x268>
    7d88:	f884 61fa 	strb.w	r6, [r4, #506]	; 0x1fa
    7d8c:	f8d4 01fc 	ldr.w	r0, [r4, #508]	; 0x1fc
    7d90:	6068      	str	r0, [r5, #4]
    7d92:	f8b4 0200 	ldrh.w	r0, [r4, #512]	; 0x200
    7d96:	8128      	strh	r0, [r5, #8]
    7d98:	f894 01fa 	ldrb.w	r0, [r4, #506]	; 0x1fa
    7d9c:	f88d 0000 	strb.w	r0, [sp]
    7da0:	9800      	ldr	r0, [sp, #0]
    7da2:	9000      	str	r0, [sp, #0]
    7da4:	f89d 0000 	ldrb.w	r0, [sp]
    7da8:	2800      	cmp	r0, #0
    7daa:	d1ed      	bne.n	7d88 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x258>
    7dac:	2001      	movs	r0, #1
    7dae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00007db0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>:
    7db0:	481b      	ldr	r0, [pc, #108]	; (7e20 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x70>)
    7db2:	491a      	ldr	r1, [pc, #104]	; (7e1c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x6c>)
    7db4:	6081      	str	r1, [r0, #8]
    7db6:	491b      	ldr	r1, [pc, #108]	; (7e24 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x74>)
    7db8:	6041      	str	r1, [r0, #4]
    7dba:	491b      	ldr	r1, [pc, #108]	; (7e28 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x78>)
    7dbc:	6001      	str	r1, [r0, #0]
    7dbe:	491b      	ldr	r1, [pc, #108]	; (7e2c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x7c>)
    7dc0:	6281      	str	r1, [r0, #40]	; 0x28
    7dc2:	491b      	ldr	r1, [pc, #108]	; (7e30 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x80>)
    7dc4:	62c1      	str	r1, [r0, #44]	; 0x2c
    7dc6:	491b      	ldr	r1, [pc, #108]	; (7e34 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x84>)
    7dc8:	60c1      	str	r1, [r0, #12]
    7dca:	491b      	ldr	r1, [pc, #108]	; (7e38 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x88>)
    7dcc:	6181      	str	r1, [r0, #24]
    7dce:	491b      	ldr	r1, [pc, #108]	; (7e3c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x8c>)
    7dd0:	6301      	str	r1, [r0, #48]	; 0x30
    7dd2:	491b      	ldr	r1, [pc, #108]	; (7e40 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x90>)
    7dd4:	6201      	str	r1, [r0, #32]
    7dd6:	491b      	ldr	r1, [pc, #108]	; (7e44 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x94>)
    7dd8:	64c1      	str	r1, [r0, #76]	; 0x4c
    7dda:	491b      	ldr	r1, [pc, #108]	; (7e48 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x98>)
    7ddc:	6481      	str	r1, [r0, #72]	; 0x48
    7dde:	491b      	ldr	r1, [pc, #108]	; (7e4c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x9c>)
    7de0:	6441      	str	r1, [r0, #68]	; 0x44
    7de2:	491b      	ldr	r1, [pc, #108]	; (7e50 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa0>)
    7de4:	6341      	str	r1, [r0, #52]	; 0x34
    7de6:	491b      	ldr	r1, [pc, #108]	; (7e54 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa4>)
    7de8:	61c1      	str	r1, [r0, #28]
    7dea:	481c      	ldr	r0, [pc, #112]	; (7e5c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xac>)
    7dec:	491a      	ldr	r1, [pc, #104]	; (7e58 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa8>)
    7dee:	6081      	str	r1, [r0, #8]
    7df0:	491b      	ldr	r1, [pc, #108]	; (7e60 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb0>)
    7df2:	61c1      	str	r1, [r0, #28]
    7df4:	491b      	ldr	r1, [pc, #108]	; (7e64 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb4>)
    7df6:	6241      	str	r1, [r0, #36]	; 0x24
    7df8:	491b      	ldr	r1, [pc, #108]	; (7e68 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb8>)
    7dfa:	62c1      	str	r1, [r0, #44]	; 0x2c
    7dfc:	491b      	ldr	r1, [pc, #108]	; (7e6c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xbc>)
    7dfe:	6101      	str	r1, [r0, #16]
    7e00:	491b      	ldr	r1, [pc, #108]	; (7e70 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc0>)
    7e02:	6141      	str	r1, [r0, #20]
    7e04:	491b      	ldr	r1, [pc, #108]	; (7e74 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc4>)
    7e06:	6441      	str	r1, [r0, #68]	; 0x44
    7e08:	6341      	str	r1, [r0, #52]	; 0x34
    7e0a:	491b      	ldr	r1, [pc, #108]	; (7e78 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc8>)
    7e0c:	6181      	str	r1, [r0, #24]
    7e0e:	491b      	ldr	r1, [pc, #108]	; (7e7c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xcc>)
    7e10:	6301      	str	r1, [r0, #48]	; 0x30
    7e12:	491b      	ldr	r1, [pc, #108]	; (7e80 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd0>)
    7e14:	6481      	str	r1, [r0, #72]	; 0x48
    7e16:	491b      	ldr	r1, [pc, #108]	; (7e84 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd4>)
    7e18:	64c1      	str	r1, [r0, #76]	; 0x4c
    7e1a:	4770      	bx	lr
    7e1c:	00009405 	.word	0x00009405
    7e20:	20000144 	.word	0x20000144
    7e24:	00008d6d 	.word	0x00008d6d
    7e28:	00008dc9 	.word	0x00008dc9
    7e2c:	0000912d 	.word	0x0000912d
    7e30:	00009171 	.word	0x00009171
    7e34:	00008e75 	.word	0x00008e75
    7e38:	000093dd 	.word	0x000093dd
    7e3c:	00009521 	.word	0x00009521
    7e40:	00008f21 	.word	0x00008f21
    7e44:	00009101 	.word	0x00009101
    7e48:	000090d5 	.word	0x000090d5
    7e4c:	0000939d 	.word	0x0000939d
    7e50:	000093cd 	.word	0x000093cd
    7e54:	00009439 	.word	0x00009439
    7e58:	00009899 	.word	0x00009899
    7e5c:	200001a8 	.word	0x200001a8
    7e60:	000098c1 	.word	0x000098c1
    7e64:	00009681 	.word	0x00009681
    7e68:	00009759 	.word	0x00009759
    7e6c:	00009655 	.word	0x00009655
    7e70:	00009801 	.word	0x00009801
    7e74:	000097dd 	.word	0x000097dd
    7e78:	00009825 	.word	0x00009825
    7e7c:	00009919 	.word	0x00009919
    7e80:	00009711 	.word	0x00009711
    7e84:	00009741 	.word	0x00009741

00007e88 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>:
    7e88:	4806      	ldr	r0, [pc, #24]	; (7ea4 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x1c>)
    7e8a:	4905      	ldr	r1, [pc, #20]	; (7ea0 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x18>)
    7e8c:	6581      	str	r1, [r0, #88]	; 0x58
    7e8e:	4906      	ldr	r1, [pc, #24]	; (7ea8 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x20>)
    7e90:	6601      	str	r1, [r0, #96]	; 0x60
    7e92:	4807      	ldr	r0, [pc, #28]	; (7eb0 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x28>)
    7e94:	4905      	ldr	r1, [pc, #20]	; (7eac <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x24>)
    7e96:	6581      	str	r1, [r0, #88]	; 0x58
    7e98:	4906      	ldr	r1, [pc, #24]	; (7eb4 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2c>)
    7e9a:	65c1      	str	r1, [r0, #92]	; 0x5c
    7e9c:	4770      	bx	lr
    7e9e:	0000      	.short	0x0000
    7ea0:	00009191 	.word	0x00009191
    7ea4:	20000144 	.word	0x20000144
    7ea8:	00009259 	.word	0x00009259
    7eac:	00009785 	.word	0x00009785
    7eb0:	200001a8 	.word	0x200001a8
    7eb4:	000097b5 	.word	0x000097b5

00007eb8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>:
    7eb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7ebc:	2701      	movs	r7, #1
    7ebe:	4c73      	ldr	r4, [pc, #460]	; (808c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8c>)
    7ec0:	2500      	movs	r5, #0
    7ec2:	f367 0107 	bfi	r1, r7, #0, #8
    7ec6:	8065      	strh	r5, [r4, #2]
    7ec8:	7065      	strb	r5, [r4, #1]
    7eca:	7025      	strb	r5, [r4, #0]
    7ecc:	60a0      	str	r0, [r4, #8]
    7ece:	4689      	mov	r9, r1
    7ed0:	4680      	mov	r8, r0
    7ed2:	f880 70fb 	strb.w	r7, [r0, #251]	; 0xfb
    7ed6:	8800      	ldrh	r0, [r0, #0]
    7ed8:	f7fc fb5e 	bl	4598 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    7edc:	b180      	cbz	r0, 7f00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x48>
    7ede:	68a0      	ldr	r0, [r4, #8]
    7ee0:	8800      	ldrh	r0, [r0, #0]
    7ee2:	f7fc fdad 	bl	4a40 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    7ee6:	68a0      	ldr	r0, [r4, #8]
    7ee8:	8800      	ldrh	r0, [r0, #0]
    7eea:	f7fc fd51 	bl	4990 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    7eee:	68a0      	ldr	r0, [r4, #8]
    7ef0:	f8b0 10f2 	ldrh.w	r1, [r0, #242]	; 0xf2
    7ef4:	b1a9      	cbz	r1, 7f22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a>
    7ef6:	3068      	adds	r0, #104	; 0x68
    7ef8:	f006 fb77 	bl	e5ea <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    7efc:	b128      	cbz	r0, 7f0a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x52>
    7efe:	e010      	b.n	7f22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a>
    7f00:	f640 31a9 	movw	r1, #2985	; 0xba9
    7f04:	2031      	movs	r0, #49	; 0x31
    7f06:	f7fb fefd 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7f0a:	68a0      	ldr	r0, [r4, #8]
    7f0c:	f890 1170 	ldrb.w	r1, [r0, #368]	; 0x170
    7f10:	b139      	cbz	r1, 7f22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a>
    7f12:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
    7f16:	2301      	movs	r3, #1
    7f18:	4619      	mov	r1, r3
    7f1a:	3068      	adds	r0, #104	; 0x68
    7f1c:	f005 f8a0 	bl	d060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    7f20:	b180      	cbz	r0, 7f44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8c>
    7f22:	68a0      	ldr	r0, [r4, #8]
    7f24:	3068      	adds	r0, #104	; 0x68
    7f26:	f006 fb60 	bl	e5ea <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    7f2a:	b128      	cbz	r0, 7f38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80>
    7f2c:	68a0      	ldr	r0, [r4, #8]
    7f2e:	f890 00e4 	ldrb.w	r0, [r0, #228]	; 0xe4
    7f32:	bf00      	nop
    7f34:	f000 fb88 	bl	8648 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x648>
    7f38:	68a0      	ldr	r0, [r4, #8]
    7f3a:	f890 10fd 	ldrb.w	r1, [r0, #253]	; 0xfd
    7f3e:	b189      	cbz	r1, 7f64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xac>
    7f40:	80a5      	strh	r5, [r4, #4]
    7f42:	e01e      	b.n	7f82 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca>
    7f44:	68a0      	ldr	r0, [r4, #8]
    7f46:	f8a0 50a0 	strh.w	r5, [r0, #160]	; 0xa0
    7f4a:	f890 1171 	ldrb.w	r1, [r0, #369]	; 0x171
    7f4e:	f880 10e6 	strb.w	r1, [r0, #230]	; 0xe6
    7f52:	2100      	movs	r1, #0
    7f54:	2002      	movs	r0, #2
    7f56:	f000 fe03 	bl	8b60 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb60>
    7f5a:	68a0      	ldr	r0, [r4, #8]
    7f5c:	f880 50fa 	strb.w	r5, [r0, #250]	; 0xfa
    7f60:	2002      	movs	r0, #2
    7f62:	e7e7      	b.n	7f34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7c>
    7f64:	f890 11b0 	ldrb.w	r1, [r0, #432]	; 0x1b0
    7f68:	f88d 1000 	strb.w	r1, [sp]
    7f6c:	9900      	ldr	r1, [sp, #0]
    7f6e:	9100      	str	r1, [sp, #0]
    7f70:	f89d 1000 	ldrb.w	r1, [sp]
    7f74:	b919      	cbnz	r1, 7f7e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc6>
    7f76:	8b81      	ldrh	r1, [r0, #28]
    7f78:	8902      	ldrh	r2, [r0, #8]
    7f7a:	4291      	cmp	r1, r2
    7f7c:	d800      	bhi.n	7f80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc8>
    7f7e:	8901      	ldrh	r1, [r0, #8]
    7f80:	80a1      	strh	r1, [r4, #4]
    7f82:	f830 1ff6 	ldrh.w	r1, [r0, #246]!
    7f86:	1e49      	subs	r1, r1, #1
    7f88:	b28e      	uxth	r6, r1
    7f8a:	f830 1f02 	ldrh.w	r1, [r0, #2]!
    7f8e:	4431      	add	r1, r6
    7f90:	f820 195c 	strh.w	r1, [r0], #-92
    7f94:	8801      	ldrh	r1, [r0, #0]
    7f96:	4431      	add	r1, r6
    7f98:	8001      	strh	r1, [r0, #0]
    7f9a:	f001 fceb 	bl	9974 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1974>
    7f9e:	b120      	cbz	r0, 7faa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf2>
    7fa0:	68a0      	ldr	r0, [r4, #8]
    7fa2:	f850 1f90 	ldr.w	r1, [r0, #144]!
    7fa6:	4431      	add	r1, r6
    7fa8:	6001      	str	r1, [r0, #0]
    7faa:	68a0      	ldr	r0, [r4, #8]
    7fac:	f8b0 10f2 	ldrh.w	r1, [r0, #242]	; 0xf2
    7fb0:	2901      	cmp	r1, #1
    7fb2:	d802      	bhi.n	7fba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x102>
    7fb4:	1c49      	adds	r1, r1, #1
    7fb6:	f8a0 10f2 	strh.w	r1, [r0, #242]	; 0xf2
    7fba:	b10e      	cbz	r6, 7fc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x108>
    7fbc:	f880 5104 	strb.w	r5, [r0, #260]	; 0x104
    7fc0:	f880 50fa 	strb.w	r5, [r0, #250]	; 0xfa
    7fc4:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    7fc8:	290b      	cmp	r1, #11
    7fca:	d001      	beq.n	7fd0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x118>
    7fcc:	290c      	cmp	r1, #12
    7fce:	d118      	bne.n	8002 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2>
    7fd0:	f8b0 206c 	ldrh.w	r2, [r0, #108]	; 0x6c
    7fd4:	f8b0 318c 	ldrh.w	r3, [r0, #396]	; 0x18c
    7fd8:	1ad2      	subs	r2, r2, r3
    7fda:	b212      	sxth	r2, r2
    7fdc:	2a00      	cmp	r2, #0
    7fde:	db10      	blt.n	8002 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2>
    7fe0:	f8d0 118e 	ldr.w	r1, [r0, #398]	; 0x18e
    7fe4:	f8c0 107e 	str.w	r1, [r0, #126]	; 0x7e
    7fe8:	f890 1192 	ldrb.w	r1, [r0, #402]	; 0x192
    7fec:	f880 1082 	strb.w	r1, [r0, #130]	; 0x82
    7ff0:	2103      	movs	r1, #3
    7ff2:	f7fd fd99 	bl	5b28 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    7ff6:	68a0      	ldr	r0, [r4, #8]
    7ff8:	f880 5076 	strb.w	r5, [r0, #118]	; 0x76
    7ffc:	f880 70b6 	strb.w	r7, [r0, #182]	; 0xb6
    8000:	e024      	b.n	804c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4c>
    8002:	2924      	cmp	r1, #36	; 0x24
    8004:	d10f      	bne.n	8026 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x26>
    8006:	f8b0 106c 	ldrh.w	r1, [r0, #108]	; 0x6c
    800a:	f8b0 218c 	ldrh.w	r2, [r0, #396]	; 0x18c
    800e:	1a89      	subs	r1, r1, r2
    8010:	b209      	sxth	r1, r1
    8012:	2900      	cmp	r1, #0
    8014:	db07      	blt.n	8026 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x26>
    8016:	f000 fe4f 	bl	8cb8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcb8>
    801a:	68a0      	ldr	r0, [r4, #8]
    801c:	f880 5076 	strb.w	r5, [r0, #118]	; 0x76
    8020:	f880 51a6 	strb.w	r5, [r0, #422]	; 0x1a6
    8024:	e012      	b.n	804c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4c>
    8026:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
    802a:	2924      	cmp	r1, #36	; 0x24
    802c:	d001      	beq.n	8032 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x32>
    802e:	2925      	cmp	r1, #37	; 0x25
    8030:	d10c      	bne.n	804c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4c>
    8032:	f8b0 106c 	ldrh.w	r1, [r0, #108]	; 0x6c
    8036:	f8b0 018c 	ldrh.w	r0, [r0, #396]	; 0x18c
    803a:	1a08      	subs	r0, r1, r0
    803c:	b200      	sxth	r0, r0
    803e:	2800      	cmp	r0, #0
    8040:	db04      	blt.n	804c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4c>
    8042:	f000 fe39 	bl	8cb8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcb8>
    8046:	68a0      	ldr	r0, [r4, #8]
    8048:	f880 5075 	strb.w	r5, [r0, #117]	; 0x75
    804c:	68a0      	ldr	r0, [r4, #8]
    804e:	4601      	mov	r1, r0
    8050:	f8b0 20f6 	ldrh.w	r2, [r0, #246]	; 0xf6
    8054:	3068      	adds	r0, #104	; 0x68
    8056:	f005 f9db 	bl	d410 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    805a:	480d      	ldr	r0, [pc, #52]	; (8090 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x90>)
    805c:	9000      	str	r0, [sp, #0]
    805e:	4b0d      	ldr	r3, [pc, #52]	; (8094 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x94>)
    8060:	4a0d      	ldr	r2, [pc, #52]	; (8098 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x98>)
    8062:	4641      	mov	r1, r8
    8064:	4648      	mov	r0, r9
    8066:	f7fc fda1 	bl	4bac <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    806a:	68a0      	ldr	r0, [r4, #8]
    806c:	2301      	movs	r3, #1
    806e:	2105      	movs	r1, #5
    8070:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    8074:	3068      	adds	r0, #104	; 0x68
    8076:	f004 fff3 	bl	d060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    807a:	2800      	cmp	r0, #0
    807c:	d003      	beq.n	8086 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x86>
    807e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8082:	f7fc bd8d 	b.w	4ba0 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    8086:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    808a:	0000      	.short	0x0000
    808c:	20000130 	.word	0x20000130
    8090:	000087f9 	.word	0x000087f9
    8094:	00008311 	.word	0x00008311
    8098:	00008c05 	.word	0x00008c05
    809c:	b570      	push	{r4, r5, r6, lr}
    809e:	4c0f      	ldr	r4, [pc, #60]	; (80dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdc>)
    80a0:	68a5      	ldr	r5, [r4, #8]
    80a2:	f895 1075 	ldrb.w	r1, [r5, #117]	; 0x75
    80a6:	2920      	cmp	r1, #32
    80a8:	d002      	beq.n	80b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb0>
    80aa:	2926      	cmp	r1, #38	; 0x26
    80ac:	d003      	beq.n	80b6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb6>
    80ae:	e011      	b.n	80d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd4>
    80b0:	f000 fe38 	bl	8d24 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd24>
    80b4:	e008      	b.n	80c8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc8>
    80b6:	f895 2076 	ldrb.w	r2, [r5, #118]	; 0x76
    80ba:	2301      	movs	r3, #1
    80bc:	210b      	movs	r1, #11
    80be:	f105 0068 	add.w	r0, r5, #104	; 0x68
    80c2:	f004 ffcd 	bl	d060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    80c6:	b138      	cbz	r0, 80d8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd8>
    80c8:	68a1      	ldr	r1, [r4, #8]
    80ca:	2000      	movs	r0, #0
    80cc:	f881 0075 	strb.w	r0, [r1, #117]	; 0x75
    80d0:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    80d4:	2000      	movs	r0, #0
    80d6:	bd70      	pop	{r4, r5, r6, pc}
    80d8:	202a      	movs	r0, #42	; 0x2a
    80da:	e7e9      	b.n	80b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb0>
    80dc:	20000130 	.word	0x20000130
    80e0:	4804      	ldr	r0, [pc, #16]	; (80f4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf4>)
    80e2:	2100      	movs	r1, #0
    80e4:	6880      	ldr	r0, [r0, #8]
    80e6:	f820 1fa8 	strh.w	r1, [r0, #168]!
    80ea:	7881      	ldrb	r1, [r0, #2]
    80ec:	1c49      	adds	r1, r1, #1
    80ee:	7081      	strb	r1, [r0, #2]
    80f0:	4770      	bx	lr
    80f2:	0000      	.short	0x0000
    80f4:	20000130 	.word	0x20000130
    80f8:	4807      	ldr	r0, [pc, #28]	; (8118 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x118>)
    80fa:	b510      	push	{r4, lr}
    80fc:	6881      	ldr	r1, [r0, #8]
    80fe:	f811 0faa 	ldrb.w	r0, [r1, #170]!
    8102:	1e40      	subs	r0, r0, #1
    8104:	b240      	sxtb	r0, r0
    8106:	7008      	strb	r0, [r1, #0]
    8108:	2800      	cmp	r0, #0
    810a:	da04      	bge.n	8116 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x116>
    810c:	f240 118f 	movw	r1, #399	; 0x18f
    8110:	2031      	movs	r0, #49	; 0x31
    8112:	f7fb fdf7 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8116:	bd10      	pop	{r4, pc}
    8118:	20000130 	.word	0x20000130
    811c:	4917      	ldr	r1, [pc, #92]	; (817c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x17c>)
    811e:	b510      	push	{r4, lr}
    8120:	6889      	ldr	r1, [r1, #8]
    8122:	f891 2076 	ldrb.w	r2, [r1, #118]	; 0x76
    8126:	b1b8      	cbz	r0, 8158 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x158>
    8128:	2a10      	cmp	r2, #16
    812a:	d006      	beq.n	813a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13a>
    812c:	2a14      	cmp	r2, #20
    812e:	d007      	beq.n	8140 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x140>
    8130:	2a15      	cmp	r2, #21
    8132:	d008      	beq.n	8146 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x146>
    8134:	2a1b      	cmp	r2, #27
    8136:	d11c      	bne.n	8172 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x172>
    8138:	e008      	b.n	814c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14c>
    813a:	2101      	movs	r1, #1
    813c:	200b      	movs	r0, #11
    813e:	e007      	b.n	8150 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x150>
    8140:	f001 fa4a 	bl	95d8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x15d8>
    8144:	e006      	b.n	8154 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x154>
    8146:	f000 fd29 	bl	8b9c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb9c>
    814a:	e003      	b.n	8154 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x154>
    814c:	2101      	movs	r1, #1
    814e:	2006      	movs	r0, #6
    8150:	f000 fd06 	bl	8b60 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb60>
    8154:	2001      	movs	r0, #1
    8156:	bd10      	pop	{r4, pc}
    8158:	2a21      	cmp	r2, #33	; 0x21
    815a:	d10a      	bne.n	8172 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x172>
    815c:	f891 01a6 	ldrb.w	r0, [r1, #422]	; 0x1a6
    8160:	2802      	cmp	r0, #2
    8162:	d008      	beq.n	8176 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x176>
    8164:	f891 01a6 	ldrb.w	r0, [r1, #422]	; 0x1a6
    8168:	2801      	cmp	r0, #1
    816a:	d102      	bne.n	8172 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x172>
    816c:	f891 01a7 	ldrb.w	r0, [r1, #423]	; 0x1a7
    8170:	b108      	cbz	r0, 8176 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x176>
    8172:	2000      	movs	r0, #0
    8174:	bd10      	pop	{r4, pc}
    8176:	2101      	movs	r1, #1
    8178:	2017      	movs	r0, #23
    817a:	e7e9      	b.n	8150 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x150>
    817c:	20000130 	.word	0x20000130
    8180:	b510      	push	{r4, lr}
    8182:	bbe8      	cbnz	r0, 8200 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x200>
    8184:	4c31      	ldr	r4, [pc, #196]	; (824c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x24c>)
    8186:	68a0      	ldr	r0, [r4, #8]
    8188:	f890 1077 	ldrb.w	r1, [r0, #119]	; 0x77
    818c:	07ca      	lsls	r2, r1, #31
    818e:	d002      	beq.n	8196 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x196>
    8190:	2101      	movs	r1, #1
    8192:	2009      	movs	r0, #9
    8194:	e052      	b.n	823c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x23c>
    8196:	078a      	lsls	r2, r1, #30
    8198:	d50a      	bpl.n	81b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b0>
    819a:	2101      	movs	r1, #1
    819c:	200c      	movs	r0, #12
    819e:	f000 fcdf 	bl	8b60 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb60>
    81a2:	68a0      	ldr	r0, [r4, #8]
    81a4:	f810 1fae 	ldrb.w	r1, [r0, #174]!
    81a8:	f041 0101 	orr.w	r1, r1, #1
    81ac:	7001      	strb	r1, [r0, #0]
    81ae:	e047      	b.n	8240 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x240>
    81b0:	074a      	lsls	r2, r1, #29
    81b2:	d502      	bpl.n	81ba <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1ba>
    81b4:	2101      	movs	r1, #1
    81b6:	2013      	movs	r0, #19
    81b8:	e040      	b.n	823c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x23c>
    81ba:	070a      	lsls	r2, r1, #28
    81bc:	d505      	bpl.n	81ca <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1ca>
    81be:	f810 1fe1 	ldrb.w	r1, [r0, #225]!
    81c2:	7141      	strb	r1, [r0, #5]
    81c4:	2101      	movs	r1, #1
    81c6:	2007      	movs	r0, #7
    81c8:	e038      	b.n	823c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x23c>
    81ca:	f011 0f30 	tst.w	r1, #48	; 0x30
    81ce:	d03b      	beq.n	8248 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x248>
    81d0:	f890 119d 	ldrb.w	r1, [r0, #413]	; 0x19d
    81d4:	b9a1      	cbnz	r1, 8200 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x200>
    81d6:	f890 119c 	ldrb.w	r1, [r0, #412]	; 0x19c
    81da:	b1e1      	cbz	r1, 8216 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x216>
    81dc:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    81e0:	2924      	cmp	r1, #36	; 0x24
    81e2:	d02f      	beq.n	8244 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x244>
    81e4:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
    81e8:	2924      	cmp	r1, #36	; 0x24
    81ea:	d02b      	beq.n	8244 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x244>
    81ec:	f05f 0300 	movs.w	r3, #0
    81f0:	f500 72c7 	add.w	r2, r0, #398	; 0x18e
    81f4:	f500 71ce 	add.w	r1, r0, #412	; 0x19c
    81f8:	f005 fb68 	bl	d8cc <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    81fc:	68a1      	ldr	r1, [r4, #8]
    81fe:	e000      	b.n	8202 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x202>
    8200:	e022      	b.n	8248 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x248>
    8202:	f811 0f77 	ldrb.w	r0, [r1, #119]!
    8206:	f020 0020 	bic.w	r0, r0, #32
    820a:	f040 0010 	orr.w	r0, r0, #16
    820e:	7008      	strb	r0, [r1, #0]
    8210:	2000      	movs	r0, #0
    8212:	f881 0125 	strb.w	r0, [r1, #293]	; 0x125
    8216:	68a0      	ldr	r0, [r4, #8]
    8218:	f890 1077 	ldrb.w	r1, [r0, #119]	; 0x77
    821c:	06c9      	lsls	r1, r1, #27
    821e:	d513      	bpl.n	8248 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x248>
    8220:	f005 fb6f 	bl	d902 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    8224:	f000 f906 	bl	8434 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x434>
    8228:	68a1      	ldr	r1, [r4, #8]
    822a:	f101 0024 	add.w	r0, r1, #36	; 0x24
    822e:	8bc2      	ldrh	r2, [r0, #30]
    8230:	f821 2fe6 	strh.w	r2, [r1, #230]!
    8234:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    8236:	8048      	strh	r0, [r1, #2]
    8238:	2101      	movs	r1, #1
    823a:	2015      	movs	r0, #21
    823c:	f000 fc90 	bl	8b60 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb60>
    8240:	2001      	movs	r0, #1
    8242:	bd10      	pop	{r4, pc}
    8244:	2301      	movs	r3, #1
    8246:	e7d3      	b.n	81f0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1f0>
    8248:	2000      	movs	r0, #0
    824a:	bd10      	pop	{r4, pc}
    824c:	20000130 	.word	0x20000130
    8250:	b570      	push	{r4, r5, r6, lr}
    8252:	460d      	mov	r5, r1
    8254:	4606      	mov	r6, r0
    8256:	f005 f986 	bl	d566 <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    825a:	4604      	mov	r4, r0
    825c:	4630      	mov	r0, r6
    825e:	f005 f98e 	bl	d57e <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    8262:	4629      	mov	r1, r5
    8264:	f000 f81e 	bl	82a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2a4>
    8268:	b1b8      	cbz	r0, 829a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x29a>
    826a:	4620      	mov	r0, r4
    826c:	f004 ff91 	bl	d192 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    8270:	0001      	movs	r1, r0
    8272:	d00d      	beq.n	8290 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x290>
    8274:	480a      	ldr	r0, [pc, #40]	; (82a0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2a0>)
    8276:	6880      	ldr	r0, [r0, #8]
    8278:	f890 2063 	ldrb.w	r2, [r0, #99]	; 0x63
    827c:	428a      	cmp	r2, r1
    827e:	d007      	beq.n	8290 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x290>
    8280:	f890 11a6 	ldrb.w	r1, [r0, #422]	; 0x1a6
    8284:	2901      	cmp	r1, #1
    8286:	d005      	beq.n	8294 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x294>
    8288:	f890 005f 	ldrb.w	r0, [r0, #95]	; 0x5f
    828c:	4220      	tst	r0, r4
    828e:	d004      	beq.n	829a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x29a>
    8290:	2001      	movs	r0, #1
    8292:	bd70      	pop	{r4, r5, r6, pc}
    8294:	f890 01a9 	ldrb.w	r0, [r0, #425]	; 0x1a9
    8298:	e7f8      	b.n	828c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x28c>
    829a:	2000      	movs	r0, #0
    829c:	bd70      	pop	{r4, r5, r6, pc}
    829e:	0000      	.short	0x0000
    82a0:	20000130 	.word	0x20000130
    82a4:	b570      	push	{r4, r5, r6, lr}
    82a6:	460d      	mov	r5, r1
    82a8:	4604      	mov	r4, r0
    82aa:	f004 ff72 	bl	d192 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    82ae:	b350      	cbz	r0, 8306 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x306>
    82b0:	4916      	ldr	r1, [pc, #88]	; (830c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x30c>)
    82b2:	6889      	ldr	r1, [r1, #8]
    82b4:	f891 2062 	ldrb.w	r2, [r1, #98]	; 0x62
    82b8:	4282      	cmp	r2, r0
    82ba:	d024      	beq.n	8306 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x306>
    82bc:	f891 31a6 	ldrb.w	r3, [r1, #422]	; 0x1a6
    82c0:	2b01      	cmp	r3, #1
    82c2:	d005      	beq.n	82d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2d0>
    82c4:	f891 305e 	ldrb.w	r3, [r1, #94]	; 0x5e
    82c8:	4223      	tst	r3, r4
    82ca:	d013      	beq.n	82f4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2f4>
    82cc:	b11d      	cbz	r5, 82d6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2d6>
    82ce:	e01a      	b.n	8306 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x306>
    82d0:	f891 31a8 	ldrb.w	r3, [r1, #424]	; 0x1a8
    82d4:	e7f8      	b.n	82c8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2c8>
    82d6:	f891 105b 	ldrb.w	r1, [r1, #91]	; 0x5b
    82da:	4221      	tst	r1, r4
    82dc:	d113      	bne.n	8306 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x306>
    82de:	b15a      	cbz	r2, 82f8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2f8>
    82e0:	2a04      	cmp	r2, #4
    82e2:	d00e      	beq.n	8302 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x302>
    82e4:	2804      	cmp	r0, #4
    82e6:	d00c      	beq.n	8302 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x302>
    82e8:	2a08      	cmp	r2, #8
    82ea:	d00a      	beq.n	8302 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x302>
    82ec:	2808      	cmp	r0, #8
    82ee:	d008      	beq.n	8302 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x302>
    82f0:	4282      	cmp	r2, r0
    82f2:	d908      	bls.n	8306 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x306>
    82f4:	2000      	movs	r0, #0
    82f6:	bd70      	pop	{r4, r5, r6, pc}
    82f8:	f240 1165 	movw	r1, #357	; 0x165
    82fc:	2006      	movs	r0, #6
    82fe:	f7fb fd01 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8302:	4282      	cmp	r2, r0
    8304:	d3f6      	bcc.n	82f4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2f4>
    8306:	2001      	movs	r0, #1
    8308:	bd70      	pop	{r4, r5, r6, pc}
    830a:	0000      	.short	0x0000
    830c:	20000130 	.word	0x20000130
    8310:	490c      	ldr	r1, [pc, #48]	; (8344 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x344>)
    8312:	4602      	mov	r2, r0
    8314:	7848      	ldrb	r0, [r1, #1]
    8316:	b998      	cbnz	r0, 8340 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x340>
    8318:	4608      	mov	r0, r1
    831a:	6880      	ldr	r0, [r0, #8]
    831c:	b142      	cbz	r2, 8330 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x330>
    831e:	7889      	ldrb	r1, [r1, #2]
    8320:	0709      	lsls	r1, r1, #28
    8322:	d503      	bpl.n	832c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x32c>
    8324:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    8328:	2808      	cmp	r0, #8
    832a:	d009      	beq.n	8340 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x340>
    832c:	2001      	movs	r0, #1
    832e:	4770      	bx	lr
    8330:	f100 0124 	add.w	r1, r0, #36	; 0x24
    8334:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    8336:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
    8338:	428a      	cmp	r2, r1
    833a:	d801      	bhi.n	8340 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x340>
    833c:	f7fe bf06 	b.w	714c <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>
    8340:	2000      	movs	r0, #0
    8342:	4770      	bx	lr
    8344:	20000130 	.word	0x20000130
    8348:	b570      	push	{r4, r5, r6, lr}
    834a:	4c39      	ldr	r4, [pc, #228]	; (8430 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x430>)
    834c:	4605      	mov	r5, r0
    834e:	68a0      	ldr	r0, [r4, #8]
    8350:	3068      	adds	r0, #104	; 0x68
    8352:	f006 f94a 	bl	e5ea <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    8356:	2800      	cmp	r0, #0
    8358:	d169      	bne.n	842e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x42e>
    835a:	2d00      	cmp	r5, #0
    835c:	d167      	bne.n	842e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x42e>
    835e:	68a0      	ldr	r0, [r4, #8]
    8360:	2301      	movs	r3, #1
    8362:	4619      	mov	r1, r3
    8364:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
    8368:	3068      	adds	r0, #104	; 0x68
    836a:	f004 fe79 	bl	d060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    836e:	2800      	cmp	r0, #0
    8370:	d15d      	bne.n	842e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x42e>
    8372:	68a0      	ldr	r0, [r4, #8]
    8374:	f890 1170 	ldrb.w	r1, [r0, #368]	; 0x170
    8378:	b149      	cbz	r1, 838e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x38e>
    837a:	2100      	movs	r1, #0
    837c:	f8a0 10a0 	strh.w	r1, [r0, #160]	; 0xa0
    8380:	f890 1171 	ldrb.w	r1, [r0, #369]	; 0x171
    8384:	f880 10e6 	strb.w	r1, [r0, #230]	; 0xe6
    8388:	2100      	movs	r1, #0
    838a:	2002      	movs	r0, #2
    838c:	e045      	b.n	841a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x41a>
    838e:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    8392:	2301      	movs	r3, #1
    8394:	2104      	movs	r1, #4
    8396:	3068      	adds	r0, #104	; 0x68
    8398:	f004 fe62 	bl	d060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    839c:	4605      	mov	r5, r0
    839e:	f7ff feef 	bl	8180 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x180>
    83a2:	2800      	cmp	r0, #0
    83a4:	d143      	bne.n	842e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x42e>
    83a6:	4628      	mov	r0, r5
    83a8:	f7ff feb8 	bl	811c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x11c>
    83ac:	2800      	cmp	r0, #0
    83ae:	d13e      	bne.n	842e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x42e>
    83b0:	68a0      	ldr	r0, [r4, #8]
    83b2:	2301      	movs	r3, #1
    83b4:	2100      	movs	r1, #0
    83b6:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    83ba:	3068      	adds	r0, #104	; 0x68
    83bc:	f004 fe50 	bl	d060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    83c0:	b178      	cbz	r0, 83e2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3e2>
    83c2:	68a0      	ldr	r0, [r4, #8]
    83c4:	2301      	movs	r3, #1
    83c6:	2104      	movs	r1, #4
    83c8:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    83cc:	3068      	adds	r0, #104	; 0x68
    83ce:	f004 fe47 	bl	d060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    83d2:	b930      	cbnz	r0, 83e2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3e2>
    83d4:	68a0      	ldr	r0, [r4, #8]
    83d6:	f890 009a 	ldrb.w	r0, [r0, #154]	; 0x9a
    83da:	b110      	cbz	r0, 83e2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3e2>
    83dc:	2100      	movs	r1, #0
    83de:	2012      	movs	r0, #18
    83e0:	e01b      	b.n	841a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x41a>
    83e2:	68a0      	ldr	r0, [r4, #8]
    83e4:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
    83e8:	290a      	cmp	r1, #10
    83ea:	d01a      	beq.n	8422 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x422>
    83ec:	2d00      	cmp	r5, #0
    83ee:	d11e      	bne.n	842e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x42e>
    83f0:	f000 fb16 	bl	8a20 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa20>
    83f4:	2800      	cmp	r0, #0
    83f6:	d11a      	bne.n	842e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x42e>
    83f8:	68a0      	ldr	r0, [r4, #8]
    83fa:	2301      	movs	r3, #1
    83fc:	2100      	movs	r1, #0
    83fe:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    8402:	3068      	adds	r0, #104	; 0x68
    8404:	f004 fe2c 	bl	d060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8408:	2800      	cmp	r0, #0
    840a:	d010      	beq.n	842e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x42e>
    840c:	68a0      	ldr	r0, [r4, #8]
    840e:	f890 0184 	ldrb.w	r0, [r0, #388]	; 0x184
    8412:	2800      	cmp	r0, #0
    8414:	d00b      	beq.n	842e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x42e>
    8416:	2100      	movs	r1, #0
    8418:	20ff      	movs	r0, #255	; 0xff
    841a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    841e:	f000 bb9f 	b.w	8b60 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb60>
    8422:	f810 1fe2 	ldrb.w	r1, [r0, #226]!
    8426:	7101      	strb	r1, [r0, #4]
    8428:	2100      	movs	r1, #0
    842a:	2007      	movs	r0, #7
    842c:	e7f5      	b.n	841a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x41a>
    842e:	bd70      	pop	{r4, r5, r6, pc}
    8430:	20000130 	.word	0x20000130
    8434:	480a      	ldr	r0, [pc, #40]	; (8460 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x460>)
    8436:	b510      	push	{r4, lr}
    8438:	6881      	ldr	r1, [r0, #8]
    843a:	f891 0058 	ldrb.w	r0, [r1, #88]	; 0x58
    843e:	2801      	cmp	r0, #1
    8440:	d009      	beq.n	8456 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x456>
    8442:	8808      	ldrh	r0, [r1, #0]
    8444:	f501 72e9 	add.w	r2, r1, #466	; 0x1d2
    8448:	3124      	adds	r1, #36	; 0x24
    844a:	f005 fa1b 	bl	d884 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    844e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8452:	f001 bbb3 	b.w	9bbc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8456:	2002      	movs	r0, #2
    8458:	f881 0058 	strb.w	r0, [r1, #88]	; 0x58
    845c:	bd10      	pop	{r4, pc}
    845e:	0000      	.short	0x0000
    8460:	20000130 	.word	0x20000130
    8464:	b570      	push	{r4, r5, r6, lr}
    8466:	4c25      	ldr	r4, [pc, #148]	; (84fc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4fc>)
    8468:	0005      	movs	r5, r0
    846a:	d12f      	bne.n	84cc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4cc>
    846c:	f000 f8a4 	bl	85b8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5b8>
    8470:	f000 f848 	bl	8504 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x504>
    8474:	0005      	movs	r5, r0
    8476:	d129      	bne.n	84cc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4cc>
    8478:	8860      	ldrh	r0, [r4, #2]
    847a:	0741      	lsls	r1, r0, #29
    847c:	d506      	bpl.n	848c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x48c>
    847e:	68a1      	ldr	r1, [r4, #8]
    8480:	f891 1078 	ldrb.w	r1, [r1, #120]	; 0x78
    8484:	2907      	cmp	r1, #7
    8486:	d101      	bne.n	848c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x48c>
    8488:	2101      	movs	r1, #1
    848a:	7021      	strb	r1, [r4, #0]
    848c:	0780      	lsls	r0, r0, #30
    848e:	d512      	bpl.n	84b6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4b6>
    8490:	68e0      	ldr	r0, [r4, #12]
    8492:	78c0      	ldrb	r0, [r0, #3]
    8494:	2819      	cmp	r0, #25
    8496:	d205      	bcs.n	84a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4a4>
    8498:	4919      	ldr	r1, [pc, #100]	; (8500 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x500>)
    849a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    849e:	b109      	cbz	r1, 84a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4a4>
    84a0:	4788      	blx	r1
    84a2:	e008      	b.n	84b6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4b6>
    84a4:	28ff      	cmp	r0, #255	; 0xff
    84a6:	d004      	beq.n	84b2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4b2>
    84a8:	f240 713c 	movw	r1, #1852	; 0x73c
    84ac:	2031      	movs	r0, #49	; 0x31
    84ae:	f7fb fc29 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    84b2:	f001 f8c3 	bl	963c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x163c>
    84b6:	78a0      	ldrb	r0, [r4, #2]
    84b8:	06c0      	lsls	r0, r0, #27
    84ba:	d507      	bpl.n	84cc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4cc>
    84bc:	68a0      	ldr	r0, [r4, #8]
    84be:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    84c2:	290b      	cmp	r1, #11
    84c4:	d102      	bne.n	84cc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4cc>
    84c6:	210c      	movs	r1, #12
    84c8:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
    84cc:	7860      	ldrb	r0, [r4, #1]
    84ce:	0700      	lsls	r0, r0, #28
    84d0:	d511      	bpl.n	84f6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4f6>
    84d2:	68a0      	ldr	r0, [r4, #8]
    84d4:	2301      	movs	r3, #1
    84d6:	2105      	movs	r1, #5
    84d8:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    84dc:	3068      	adds	r0, #104	; 0x68
    84de:	f004 fdbf 	bl	d060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    84e2:	b128      	cbz	r0, 84f0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4f0>
    84e4:	68a1      	ldr	r1, [r4, #8]
    84e6:	2508      	movs	r5, #8
    84e8:	2000      	movs	r0, #0
    84ea:	f881 01bc 	strb.w	r0, [r1, #444]	; 0x1bc
    84ee:	e002      	b.n	84f6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4f6>
    84f0:	2000      	movs	r0, #0
    84f2:	f7fc fc15 	bl	4d20 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    84f6:	4628      	mov	r0, r5
    84f8:	bd70      	pop	{r4, r5, r6, pc}
    84fa:	0000      	.short	0x0000
    84fc:	20000130 	.word	0x20000130
    8500:	200001a8 	.word	0x200001a8
    8504:	b570      	push	{r4, r5, r6, lr}
    8506:	4c2a      	ldr	r4, [pc, #168]	; (85b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5b0>)
    8508:	2000      	movs	r0, #0
    850a:	78a1      	ldrb	r1, [r4, #2]
    850c:	07c9      	lsls	r1, r1, #31
    850e:	d015      	beq.n	853c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x53c>
    8510:	6920      	ldr	r0, [r4, #16]
    8512:	2301      	movs	r3, #1
    8514:	2105      	movs	r1, #5
    8516:	78c5      	ldrb	r5, [r0, #3]
    8518:	68a0      	ldr	r0, [r4, #8]
    851a:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    851e:	3068      	adds	r0, #104	; 0x68
    8520:	f004 fd9e 	bl	d060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8524:	b158      	cbz	r0, 853e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x53e>
    8526:	1ead      	subs	r5, r5, #2
    8528:	2d0a      	cmp	r5, #10
    852a:	d206      	bcs.n	853a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x53a>
    852c:	e8df f005 	tbb	[pc, r5]
    8530:	05050707 	.word	0x05050707
    8534:	05050707 	.word	0x05050707
    8538:	0707      	.short	0x0707
    853a:	2008      	movs	r0, #8
    853c:	bd70      	pop	{r4, r5, r6, pc}
    853e:	6920      	ldr	r0, [r4, #16]
    8540:	f7fd fbc8 	bl	5cd4 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>
    8544:	b138      	cbz	r0, 8556 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x556>
    8546:	6920      	ldr	r0, [r4, #16]
    8548:	78c5      	ldrb	r5, [r0, #3]
    854a:	b145      	cbz	r5, 855e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x55e>
    854c:	2d01      	cmp	r5, #1
    854e:	d006      	beq.n	855e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x55e>
    8550:	2d16      	cmp	r5, #22
    8552:	d118      	bne.n	8586 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x586>
    8554:	e003      	b.n	855e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x55e>
    8556:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    855a:	f000 bd0b 	b.w	8f74 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf74>
    855e:	68a0      	ldr	r0, [r4, #8]
    8560:	f890 0075 	ldrb.w	r0, [r0, #117]	; 0x75
    8564:	f004 fdca 	bl	d0fc <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    8568:	b168      	cbz	r0, 8586 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x586>
    856a:	68a1      	ldr	r1, [r4, #8]
    856c:	f891 0075 	ldrb.w	r0, [r1, #117]	; 0x75
    8570:	281f      	cmp	r0, #31
    8572:	d008      	beq.n	8586 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x586>
    8574:	2820      	cmp	r0, #32
    8576:	d003      	beq.n	8580 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x580>
    8578:	2d16      	cmp	r5, #22
    857a:	d00c      	beq.n	8596 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x596>
    857c:	2002      	movs	r0, #2
    857e:	bd70      	pop	{r4, r5, r6, pc}
    8580:	2026      	movs	r0, #38	; 0x26
    8582:	f881 0075 	strb.w	r0, [r1, #117]	; 0x75
    8586:	2d19      	cmp	r5, #25
    8588:	d207      	bcs.n	859a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x59a>
    858a:	480a      	ldr	r0, [pc, #40]	; (85b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5b4>)
    858c:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    8590:	b118      	cbz	r0, 859a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x59a>
    8592:	4780      	blx	r0
    8594:	e003      	b.n	859e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x59e>
    8596:	2020      	movs	r0, #32
    8598:	bd70      	pop	{r4, r5, r6, pc}
    859a:	f000 fceb 	bl	8f74 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf74>
    859e:	68a2      	ldr	r2, [r4, #8]
    85a0:	e9f2 1330 	ldrd	r1, r3, [r2, #192]!	; 0xc0
    85a4:	1c49      	adds	r1, r1, #1
    85a6:	f143 0300 	adc.w	r3, r3, #0
    85aa:	e9c2 1300 	strd	r1, r3, [r2]
    85ae:	bd70      	pop	{r4, r5, r6, pc}
    85b0:	20000130 	.word	0x20000130
    85b4:	20000144 	.word	0x20000144
    85b8:	b570      	push	{r4, r5, r6, lr}
    85ba:	4c22      	ldr	r4, [pc, #136]	; (8644 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x644>)
    85bc:	78a0      	ldrb	r0, [r4, #2]
    85be:	0700      	lsls	r0, r0, #28
    85c0:	d53e      	bpl.n	8640 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x640>
    85c2:	68a0      	ldr	r0, [r4, #8]
    85c4:	3068      	adds	r0, #104	; 0x68
    85c6:	f006 f810 	bl	e5ea <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    85ca:	b148      	cbz	r0, 85e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5e0>
    85cc:	68a0      	ldr	r0, [r4, #8]
    85ce:	21fe      	movs	r1, #254	; 0xfe
    85d0:	2500      	movs	r5, #0
    85d2:	f880 10e4 	strb.w	r1, [r0, #228]	; 0xe4
    85d6:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    85da:	2919      	cmp	r1, #25
    85dc:	d10c      	bne.n	85f8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5f8>
    85de:	e004      	b.n	85ea <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5ea>
    85e0:	f240 7146 	movw	r1, #1862	; 0x746
    85e4:	2031      	movs	r0, #49	; 0x31
    85e6:	f7fb fb8d 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    85ea:	f880 50ab 	strb.w	r5, [r0, #171]	; 0xab
    85ee:	f7ff fd83 	bl	80f8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf8>
    85f2:	68a0      	ldr	r0, [r4, #8]
    85f4:	f880 5076 	strb.w	r5, [r0, #118]	; 0x76
    85f8:	68a0      	ldr	r0, [r4, #8]
    85fa:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
    85fe:	291f      	cmp	r1, #31
    8600:	d002      	beq.n	8608 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x608>
    8602:	2927      	cmp	r1, #39	; 0x27
    8604:	d113      	bne.n	862e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x62e>
    8606:	e00b      	b.n	8620 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x620>
    8608:	f890 0076 	ldrb.w	r0, [r0, #118]	; 0x76
    860c:	f004 fd76 	bl	d0fc <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    8610:	b108      	cbz	r0, 8616 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x616>
    8612:	2026      	movs	r0, #38	; 0x26
    8614:	e000      	b.n	8618 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x618>
    8616:	2020      	movs	r0, #32
    8618:	68a1      	ldr	r1, [r4, #8]
    861a:	f881 0075 	strb.w	r0, [r1, #117]	; 0x75
    861e:	e006      	b.n	862e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x62e>
    8620:	2101      	movs	r1, #1
    8622:	f880 1185 	strb.w	r1, [r0, #389]	; 0x185
    8626:	f880 5075 	strb.w	r5, [r0, #117]	; 0x75
    862a:	f880 50a6 	strb.w	r5, [r0, #166]	; 0xa6
    862e:	68a0      	ldr	r0, [r4, #8]
    8630:	f890 1078 	ldrb.w	r1, [r0, #120]	; 0x78
    8634:	2908      	cmp	r1, #8
    8636:	d103      	bne.n	8640 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x640>
    8638:	2102      	movs	r1, #2
    863a:	7021      	strb	r1, [r4, #0]
    863c:	f880 10e4 	strb.w	r1, [r0, #228]	; 0xe4
    8640:	bd70      	pop	{r4, r5, r6, pc}
    8642:	0000      	.short	0x0000
    8644:	20000130 	.word	0x20000130
    8648:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    864a:	4605      	mov	r5, r0
    864c:	4668      	mov	r0, sp
    864e:	f7fc f9e1 	bl	4a14 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    8652:	b318      	cbz	r0, 869c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x69c>
    8654:	2222      	movs	r2, #34	; 0x22
    8656:	2100      	movs	r1, #0
    8658:	9800      	ldr	r0, [sp, #0]
    865a:	f003 fc03 	bl	be64 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    865e:	2103      	movs	r1, #3
    8660:	9800      	ldr	r0, [sp, #0]
    8662:	f004 ffe0 	bl	d626 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    8666:	9800      	ldr	r0, [sp, #0]
    8668:	7801      	ldrb	r1, [r0, #0]
    866a:	f021 0110 	bic.w	r1, r1, #16
    866e:	7001      	strb	r1, [r0, #0]
    8670:	4629      	mov	r1, r5
    8672:	f7fd fb5b 	bl	5d2c <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>
    8676:	2100      	movs	r1, #0
    8678:	4c5e      	ldr	r4, [pc, #376]	; (87f4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7f4>)
    867a:	f644 162f 	movw	r6, #18735	; 0x492f
    867e:	2d0e      	cmp	r5, #14
    8680:	d07e      	beq.n	8780 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x780>
    8682:	dc0e      	bgt.n	86a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6a2>
    8684:	f1a5 0502 	sub.w	r5, r5, #2
    8688:	2d0c      	cmp	r5, #12
    868a:	d21c      	bcs.n	86c6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6c6>
    868c:	e8df f005 	tbb	[pc, r5]
    8690:	a7451b1e 	.word	0xa7451b1e
    8694:	511b1ea7 	.word	0x511b1ea7
    8698:	3723a71b 	.word	0x3723a71b
    869c:	f640 116b 	movw	r1, #2411	; 0x96b
    86a0:	e0a3      	b.n	87ea <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7ea>
    86a2:	2d15      	cmp	r5, #21
    86a4:	d058      	beq.n	8758 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x758>
    86a6:	dc08      	bgt.n	86ba <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6ba>
    86a8:	2d11      	cmp	r5, #17
    86aa:	d01f      	beq.n	86ec <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6ec>
    86ac:	2d12      	cmp	r5, #18
    86ae:	d01c      	beq.n	86ea <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6ea>
    86b0:	2d13      	cmp	r5, #19
    86b2:	d01a      	beq.n	86ea <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6ea>
    86b4:	2d14      	cmp	r5, #20
    86b6:	d106      	bne.n	86c6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6c6>
    86b8:	e04e      	b.n	8758 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x758>
    86ba:	2d16      	cmp	r5, #22
    86bc:	d023      	beq.n	8706 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x706>
    86be:	2d17      	cmp	r5, #23
    86c0:	d065      	beq.n	878e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x78e>
    86c2:	2dff      	cmp	r5, #255	; 0xff
    86c4:	d07e      	beq.n	87c4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7c4>
    86c6:	f640 11dd 	movw	r1, #2525	; 0x9dd
    86ca:	e08e      	b.n	87ea <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7ea>
    86cc:	68a1      	ldr	r1, [r4, #8]
    86ce:	9800      	ldr	r0, [sp, #0]
    86d0:	f891 10e6 	ldrb.w	r1, [r1, #230]	; 0xe6
    86d4:	e015      	b.n	8702 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x702>
    86d6:	9800      	ldr	r0, [sp, #0]
    86d8:	220b      	movs	r2, #11
    86da:	7102      	strb	r2, [r0, #4]
    86dc:	2259      	movs	r2, #89	; 0x59
    86de:	7142      	strb	r2, [r0, #5]
    86e0:	7181      	strb	r1, [r0, #6]
    86e2:	215b      	movs	r1, #91	; 0x5b
    86e4:	71c1      	strb	r1, [r0, #7]
    86e6:	2112      	movs	r1, #18
    86e8:	7201      	strb	r1, [r0, #8]
    86ea:	e078      	b.n	87de <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7de>
    86ec:	2103      	movs	r1, #3
    86ee:	9800      	ldr	r0, [sp, #0]
    86f0:	f004 ff75 	bl	d5de <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>
    86f4:	2106      	movs	r1, #6
    86f6:	9800      	ldr	r0, [sp, #0]
    86f8:	f004 ff73 	bl	d5e2 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>
    86fc:	e06f      	b.n	87de <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7de>
    86fe:	9800      	ldr	r0, [sp, #0]
    8700:	2106      	movs	r1, #6
    8702:	7101      	strb	r1, [r0, #4]
    8704:	e06b      	b.n	87de <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7de>
    8706:	9800      	ldr	r0, [sp, #0]
    8708:	f8d4 1008 	ldr.w	r1, [r4, #8]
    870c:	f891 21a8 	ldrb.w	r2, [r1, #424]	; 0x1a8
    8710:	7102      	strb	r2, [r0, #4]
    8712:	f891 11a9 	ldrb.w	r1, [r1, #425]	; 0x1a9
    8716:	7141      	strb	r1, [r0, #5]
    8718:	e061      	b.n	87de <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7de>
    871a:	68a1      	ldr	r1, [r4, #8]
    871c:	9800      	ldr	r0, [sp, #0]
    871e:	f501 7188 	add.w	r1, r1, #272	; 0x110
    8722:	f004 ff71 	bl	d608 <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>
    8726:	68a1      	ldr	r1, [r4, #8]
    8728:	9800      	ldr	r0, [sp, #0]
    872a:	31dc      	adds	r1, #220	; 0xdc
    872c:	f004 ff69 	bl	d602 <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>
    8730:	e055      	b.n	87de <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7de>
    8732:	9101      	str	r1, [sp, #4]
    8734:	9102      	str	r1, [sp, #8]
    8736:	f001 fe09 	bl	a34c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    873a:	68a1      	ldr	r1, [r4, #8]
    873c:	4030      	ands	r0, r6
    873e:	f891 10b4 	ldrb.w	r1, [r1, #180]	; 0xb4
    8742:	4001      	ands	r1, r0
    8744:	f88d 1004 	strb.w	r1, [sp, #4]
    8748:	0a00      	lsrs	r0, r0, #8
    874a:	f88d 0005 	strb.w	r0, [sp, #5]
    874e:	a901      	add	r1, sp, #4
    8750:	9800      	ldr	r0, [sp, #0]
    8752:	f004 ff63 	bl	d61c <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>
    8756:	e042      	b.n	87de <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7de>
    8758:	68a0      	ldr	r0, [r4, #8]
    875a:	f8b0 1044 	ldrh.w	r1, [r0, #68]	; 0x44
    875e:	9800      	ldr	r0, [sp, #0]
    8760:	f004 ff69 	bl	d636 <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>
    8764:	68a0      	ldr	r0, [r4, #8]
    8766:	f8b0 10e8 	ldrh.w	r1, [r0, #232]	; 0xe8
    876a:	9800      	ldr	r0, [sp, #0]
    876c:	f004 ff67 	bl	d63e <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>
    8770:	68a0      	ldr	r0, [r4, #8]
    8772:	f8b0 1040 	ldrh.w	r1, [r0, #64]	; 0x40
    8776:	9800      	ldr	r0, [sp, #0]
    8778:	f004 ff65 	bl	d646 <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>
    877c:	68a0      	ldr	r0, [r4, #8]
    877e:	e000      	b.n	8782 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x782>
    8780:	e010      	b.n	87a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7a4>
    8782:	f8b0 10e6 	ldrh.w	r1, [r0, #230]	; 0xe6
    8786:	9800      	ldr	r0, [sp, #0]
    8788:	f004 ff61 	bl	d64e <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>
    878c:	e027      	b.n	87de <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7de>
    878e:	68a1      	ldr	r1, [r4, #8]
    8790:	f891 01a6 	ldrb.w	r0, [r1, #422]	; 0x1a6
    8794:	2801      	cmp	r0, #1
    8796:	9800      	ldr	r0, [sp, #0]
    8798:	d0b8      	beq.n	870c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x70c>
    879a:	f811 2f5e 	ldrb.w	r2, [r1, #94]!
    879e:	7102      	strb	r2, [r0, #4]
    87a0:	7849      	ldrb	r1, [r1, #1]
    87a2:	e7b8      	b.n	8716 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x716>
    87a4:	9101      	str	r1, [sp, #4]
    87a6:	9102      	str	r1, [sp, #8]
    87a8:	f001 fdd0 	bl	a34c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    87ac:	68a1      	ldr	r1, [r4, #8]
    87ae:	4030      	ands	r0, r6
    87b0:	f891 10b4 	ldrb.w	r1, [r1, #180]	; 0xb4
    87b4:	4001      	ands	r1, r0
    87b6:	f88d 1004 	strb.w	r1, [sp, #4]
    87ba:	0a00      	lsrs	r0, r0, #8
    87bc:	f88d 0005 	strb.w	r0, [sp, #5]
    87c0:	a901      	add	r1, sp, #4
    87c2:	e000      	b.n	87c6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7c6>
    87c4:	e003      	b.n	87ce <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7ce>
    87c6:	9800      	ldr	r0, [sp, #0]
    87c8:	f004 ff23 	bl	d612 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>
    87cc:	e007      	b.n	87de <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7de>
    87ce:	68a0      	ldr	r0, [r4, #8]
    87d0:	f890 2187 	ldrb.w	r2, [r0, #391]	; 0x187
    87d4:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
    87d8:	9800      	ldr	r0, [sp, #0]
    87da:	f004 ff04 	bl	d5e6 <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>
    87de:	f7fc f8f3 	bl	49c8 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    87e2:	2800      	cmp	r0, #0
    87e4:	d104      	bne.n	87f0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7f0>
    87e6:	f640 11e1 	movw	r1, #2529	; 0x9e1
    87ea:	2031      	movs	r0, #49	; 0x31
    87ec:	f7fb fa8a 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    87f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    87f2:	0000      	.short	0x0000
    87f4:	20000130 	.word	0x20000130
    87f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    87fc:	4c87      	ldr	r4, [pc, #540]	; (8a1c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa1c>)
    87fe:	4682      	mov	sl, r0
    8800:	4689      	mov	r9, r1
    8802:	68a0      	ldr	r0, [r4, #8]
    8804:	8800      	ldrh	r0, [r0, #0]
    8806:	f7fb fec7 	bl	4598 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    880a:	0006      	movs	r6, r0
    880c:	d00a      	beq.n	8824 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x824>
    880e:	8860      	ldrh	r0, [r4, #2]
    8810:	f04f 0500 	mov.w	r5, #0
    8814:	05c0      	lsls	r0, r0, #23
    8816:	68a0      	ldr	r0, [r4, #8]
    8818:	d509      	bpl.n	882e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x82e>
    881a:	f8a0 509c 	strh.w	r5, [r0, #156]	; 0x9c
    881e:	f880 5104 	strb.w	r5, [r0, #260]	; 0x104
    8822:	e008      	b.n	8836 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x836>
    8824:	f640 5181 	movw	r1, #3457	; 0xd81
    8828:	2031      	movs	r0, #49	; 0x31
    882a:	f7fb fa6b 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    882e:	f830 1f9c 	ldrh.w	r1, [r0, #156]!
    8832:	1c49      	adds	r1, r1, #1
    8834:	8001      	strh	r1, [r0, #0]
    8836:	f001 f89d 	bl	9974 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1974>
    883a:	f04f 0801 	mov.w	r8, #1
    883e:	b320      	cbz	r0, 888a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x88a>
    8840:	8860      	ldrh	r0, [r4, #2]
    8842:	0500      	lsls	r0, r0, #20
    8844:	d506      	bpl.n	8854 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x854>
    8846:	68a0      	ldr	r0, [r4, #8]
    8848:	f890 107b 	ldrb.w	r1, [r0, #123]	; 0x7b
    884c:	b111      	cbz	r1, 8854 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x854>
    884e:	f8c0 5090 	str.w	r5, [r0, #144]	; 0x90
    8852:	e01a      	b.n	888a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x88a>
    8854:	68a0      	ldr	r0, [r4, #8]
    8856:	f8d0 1090 	ldr.w	r1, [r0, #144]	; 0x90
    885a:	1c49      	adds	r1, r1, #1
    885c:	f8c0 1090 	str.w	r1, [r0, #144]	; 0x90
    8860:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
    8864:	428b      	cmp	r3, r1
    8866:	d301      	bcc.n	886c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x86c>
    8868:	1a5a      	subs	r2, r3, r1
    886a:	e000      	b.n	886e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x86e>
    886c:	2200      	movs	r2, #0
    886e:	88a7      	ldrh	r7, [r4, #4]
    8870:	1d7f      	adds	r7, r7, #5
    8872:	42ba      	cmp	r2, r7
    8874:	d801      	bhi.n	887a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x87a>
    8876:	f880 809a 	strb.w	r8, [r0, #154]	; 0x9a
    887a:	4299      	cmp	r1, r3
    887c:	d305      	bcc.n	888a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x88a>
    887e:	f8c0 5090 	str.w	r5, [r0, #144]	; 0x90
    8882:	f880 81f2 	strb.w	r8, [r0, #498]	; 0x1f2
    8886:	f001 f999 	bl	9bbc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    888a:	8860      	ldrh	r0, [r4, #2]
    888c:	f04f 0702 	mov.w	r7, #2
    8890:	f410 7f40 	tst.w	r0, #768	; 0x300
    8894:	d00e      	beq.n	88b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8b4>
    8896:	68a0      	ldr	r0, [r4, #8]
    8898:	f890 1079 	ldrb.w	r1, [r0, #121]	; 0x79
    889c:	b111      	cbz	r1, 88a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8a4>
    889e:	2903      	cmp	r1, #3
    88a0:	d108      	bne.n	88b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8b4>
    88a2:	e002      	b.n	88aa <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8aa>
    88a4:	f880 8079 	strb.w	r8, [r0, #121]	; 0x79
    88a8:	e001      	b.n	88ae <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8ae>
    88aa:	f880 7079 	strb.w	r7, [r0, #121]	; 0x79
    88ae:	2101      	movs	r1, #1
    88b0:	f7fe fc72 	bl	7198 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    88b4:	68a0      	ldr	r0, [r4, #8]
    88b6:	f890 1079 	ldrb.w	r1, [r0, #121]	; 0x79
    88ba:	2901      	cmp	r1, #1
    88bc:	d104      	bne.n	88c8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8c8>
    88be:	8861      	ldrh	r1, [r4, #2]
    88c0:	0549      	lsls	r1, r1, #21
    88c2:	d501      	bpl.n	88c8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8c8>
    88c4:	f880 7079 	strb.w	r7, [r0, #121]	; 0x79
    88c8:	f1ba 0f00 	cmp.w	sl, #0
    88cc:	d175      	bne.n	89ba <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9ba>
    88ce:	78a1      	ldrb	r1, [r4, #2]
    88d0:	0649      	lsls	r1, r1, #25
    88d2:	d502      	bpl.n	88da <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8da>
    88d4:	f8a0 5118 	strh.w	r5, [r0, #280]	; 0x118
    88d8:	e004      	b.n	88e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8e4>
    88da:	f8b0 1118 	ldrh.w	r1, [r0, #280]	; 0x118
    88de:	1c49      	adds	r1, r1, #1
    88e0:	f8a0 1118 	strh.w	r1, [r0, #280]	; 0x118
    88e4:	4648      	mov	r0, r9
    88e6:	f7ff fdbd 	bl	8464 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x464>
    88ea:	ea40 0009 	orr.w	r0, r0, r9
    88ee:	4681      	mov	r9, r0
    88f0:	f7ff fd2a 	bl	8348 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x348>
    88f4:	68a7      	ldr	r7, [r4, #8]
    88f6:	f8b7 00f8 	ldrh.w	r0, [r7, #248]	; 0xf8
    88fa:	1c40      	adds	r0, r0, #1
    88fc:	f8a7 00f8 	strh.w	r0, [r7, #248]	; 0xf8
    8900:	f897 00fc 	ldrb.w	r0, [r7, #252]	; 0xfc
    8904:	b128      	cbz	r0, 8912 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x912>
    8906:	f7fc fa79 	bl	4dfc <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>
    890a:	b1a8      	cbz	r0, 8938 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x938>
    890c:	f8a7 50f8 	strh.w	r5, [r7, #248]	; 0xf8
    8910:	e012      	b.n	8938 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x938>
    8912:	f7fc f901 	bl	4b18 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>
    8916:	b108      	cbz	r0, 891c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x91c>
    8918:	f8a7 50f8 	strh.w	r5, [r7, #248]	; 0xf8
    891c:	f7fc f8f6 	bl	4b0c <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>
    8920:	b150      	cbz	r0, 8938 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x938>
    8922:	f897 0104 	ldrb.w	r0, [r7, #260]	; 0x104
    8926:	1c40      	adds	r0, r0, #1
    8928:	b2c0      	uxtb	r0, r0
    892a:	f887 0104 	strb.w	r0, [r7, #260]	; 0x104
    892e:	2802      	cmp	r0, #2
    8930:	d902      	bls.n	8938 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x938>
    8932:	f827 5ff8 	strh.w	r5, [r7, #248]!
    8936:	733d      	strb	r5, [r7, #12]
    8938:	68a0      	ldr	r0, [r4, #8]
    893a:	2301      	movs	r3, #1
    893c:	2100      	movs	r1, #0
    893e:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    8942:	3068      	adds	r0, #104	; 0x68
    8944:	f004 fb8c 	bl	d060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8948:	b920      	cbnz	r0, 8954 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x954>
    894a:	68a0      	ldr	r0, [r4, #8]
    894c:	f890 0076 	ldrb.w	r0, [r0, #118]	; 0x76
    8950:	280c      	cmp	r0, #12
    8952:	d15f      	bne.n	8a14 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa14>
    8954:	68a0      	ldr	r0, [r4, #8]
    8956:	2301      	movs	r3, #1
    8958:	2100      	movs	r1, #0
    895a:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    895e:	3068      	adds	r0, #104	; 0x68
    8960:	f004 fb7e 	bl	d060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8964:	b350      	cbz	r0, 89bc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9bc>
    8966:	68a0      	ldr	r0, [r4, #8]
    8968:	2301      	movs	r3, #1
    896a:	2100      	movs	r1, #0
    896c:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
    8970:	3068      	adds	r0, #104	; 0x68
    8972:	f004 fb75 	bl	d060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8976:	b308      	cbz	r0, 89bc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9bc>
    8978:	68a0      	ldr	r0, [r4, #8]
    897a:	f890 1079 	ldrb.w	r1, [r0, #121]	; 0x79
    897e:	2902      	cmp	r1, #2
    8980:	d148      	bne.n	8a14 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa14>
    8982:	f890 0104 	ldrb.w	r0, [r0, #260]	; 0x104
    8986:	b9c8      	cbnz	r0, 89bc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9bc>
    8988:	4630      	mov	r0, r6
    898a:	f003 ff4c 	bl	c826 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    898e:	b1a8      	cbz	r0, 89bc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9bc>
    8990:	68a0      	ldr	r0, [r4, #8]
    8992:	3068      	adds	r0, #104	; 0x68
    8994:	f005 fe29 	bl	e5ea <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    8998:	b980      	cbnz	r0, 89bc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9bc>
    899a:	68a1      	ldr	r1, [r4, #8]
    899c:	f8b1 00f2 	ldrh.w	r0, [r1, #242]	; 0xf2
    89a0:	2801      	cmp	r0, #1
    89a2:	d937      	bls.n	8a14 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa14>
    89a4:	f881 80fa 	strb.w	r8, [r1, #250]	; 0xfa
    89a8:	f8b1 209e 	ldrh.w	r2, [r1, #158]	; 0x9e
    89ac:	f8b1 009c 	ldrh.w	r0, [r1, #156]	; 0x9c
    89b0:	1e93      	subs	r3, r2, #2
    89b2:	4298      	cmp	r0, r3
    89b4:	db03      	blt.n	89be <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9be>
    89b6:	2001      	movs	r0, #1
    89b8:	e004      	b.n	89c4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9c4>
    89ba:	e01d      	b.n	89f8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9f8>
    89bc:	e02a      	b.n	8a14 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa14>
    89be:	1a10      	subs	r0, r2, r0
    89c0:	1e40      	subs	r0, r0, #1
    89c2:	b280      	uxth	r0, r0
    89c4:	f8b1 20f8 	ldrh.w	r2, [r1, #248]	; 0xf8
    89c8:	88a3      	ldrh	r3, [r4, #4]
    89ca:	429a      	cmp	r2, r3
    89cc:	d301      	bcc.n	89d2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9d2>
    89ce:	2201      	movs	r2, #1
    89d0:	e002      	b.n	89d8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9d8>
    89d2:	1a9a      	subs	r2, r3, r2
    89d4:	1c52      	adds	r2, r2, #1
    89d6:	b292      	uxth	r2, r2
    89d8:	4290      	cmp	r0, r2
    89da:	d900      	bls.n	89de <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9de>
    89dc:	4610      	mov	r0, r2
    89de:	2801      	cmp	r0, #1
    89e0:	d102      	bne.n	89e8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9e8>
    89e2:	bf00      	nop
    89e4:	f881 50fa 	strb.w	r5, [r1, #250]	; 0xfa
    89e8:	68a1      	ldr	r1, [r4, #8]
    89ea:	f8b1 206c 	ldrh.w	r2, [r1, #108]	; 0x6c
    89ee:	4410      	add	r0, r2
    89f0:	f8a1 00f4 	strh.w	r0, [r1, #244]	; 0xf4
    89f4:	f001 f87e 	bl	9af4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1af4>
    89f8:	78a0      	ldrb	r0, [r4, #2]
    89fa:	464a      	mov	r2, r9
    89fc:	f3c0 1180 	ubfx	r1, r0, #6, #1
    8a00:	4650      	mov	r0, sl
    8a02:	f000 ffcb 	bl	999c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x199c>
    8a06:	68a0      	ldr	r0, [r4, #8]
    8a08:	f880 50fb 	strb.w	r5, [r0, #251]	; 0xfb
    8a0c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8a10:	f7fb bfc4 	b.w	499c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    8a14:	2001      	movs	r0, #1
    8a16:	68a1      	ldr	r1, [r4, #8]
    8a18:	e7e4      	b.n	89e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9e4>
    8a1a:	0000      	.short	0x0000
    8a1c:	20000130 	.word	0x20000130
    8a20:	b570      	push	{r4, r5, r6, lr}
    8a22:	4c4e      	ldr	r4, [pc, #312]	; (8b5c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb5c>)
    8a24:	2301      	movs	r3, #1
    8a26:	2100      	movs	r1, #0
    8a28:	68a0      	ldr	r0, [r4, #8]
    8a2a:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    8a2e:	3068      	adds	r0, #104	; 0x68
    8a30:	f004 fb16 	bl	d060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8a34:	2800      	cmp	r0, #0
    8a36:	d076      	beq.n	8b26 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb26>
    8a38:	68a0      	ldr	r0, [r4, #8]
    8a3a:	f890 11ad 	ldrb.w	r1, [r0, #429]	; 0x1ad
    8a3e:	2500      	movs	r5, #0
    8a40:	b139      	cbz	r1, 8a52 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa52>
    8a42:	2100      	movs	r1, #0
    8a44:	200e      	movs	r0, #14
    8a46:	f000 f88b 	bl	8b60 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb60>
    8a4a:	68a0      	ldr	r0, [r4, #8]
    8a4c:	f880 51ad 	strb.w	r5, [r0, #429]	; 0x1ad
    8a50:	e082      	b.n	8b58 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb58>
    8a52:	f890 11ac 	ldrb.w	r1, [r0, #428]	; 0x1ac
    8a56:	b119      	cbz	r1, 8a60 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa60>
    8a58:	f890 10ae 	ldrb.w	r1, [r0, #174]	; 0xae
    8a5c:	0789      	lsls	r1, r1, #30
    8a5e:	d00a      	beq.n	8a76 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa76>
    8a60:	f890 119c 	ldrb.w	r1, [r0, #412]	; 0x19c
    8a64:	b111      	cbz	r1, 8a6c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa6c>
    8a66:	f890 119d 	ldrb.w	r1, [r0, #413]	; 0x19d
    8a6a:	b189      	cbz	r1, 8a90 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa90>
    8a6c:	f890 11a6 	ldrb.w	r1, [r0, #422]	; 0x1a6
    8a70:	2901      	cmp	r1, #1
    8a72:	d02f      	beq.n	8ad4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xad4>
    8a74:	e06a      	b.n	8b4c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb4c>
    8a76:	2100      	movs	r1, #0
    8a78:	200c      	movs	r0, #12
    8a7a:	f000 f871 	bl	8b60 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb60>
    8a7e:	68a0      	ldr	r0, [r4, #8]
    8a80:	f810 1fae 	ldrb.w	r1, [r0, #174]!
    8a84:	f041 0101 	orr.w	r1, r1, #1
    8a88:	7001      	strb	r1, [r0, #0]
    8a8a:	f880 50fe 	strb.w	r5, [r0, #254]	; 0xfe
    8a8e:	e063      	b.n	8b58 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb58>
    8a90:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    8a94:	2924      	cmp	r1, #36	; 0x24
    8a96:	d01b      	beq.n	8ad0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xad0>
    8a98:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
    8a9c:	2924      	cmp	r1, #36	; 0x24
    8a9e:	d017      	beq.n	8ad0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xad0>
    8aa0:	f05f 0300 	movs.w	r3, #0
    8aa4:	f500 72c7 	add.w	r2, r0, #398	; 0x18e
    8aa8:	f500 71ce 	add.w	r1, r0, #412	; 0x19c
    8aac:	f004 ff0e 	bl	d8cc <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    8ab0:	68a0      	ldr	r0, [r4, #8]
    8ab2:	f880 519c 	strb.w	r5, [r0, #412]	; 0x19c
    8ab6:	2100      	movs	r1, #0
    8ab8:	2014      	movs	r0, #20
    8aba:	f000 f851 	bl	8b60 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb60>
    8abe:	68a1      	ldr	r1, [r4, #8]
    8ac0:	f101 0024 	add.w	r0, r1, #36	; 0x24
    8ac4:	8bc2      	ldrh	r2, [r0, #30]
    8ac6:	f821 2fe6 	strh.w	r2, [r1, #230]!
    8aca:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    8acc:	8048      	strh	r0, [r1, #2]
    8ace:	e043      	b.n	8b58 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb58>
    8ad0:	2301      	movs	r3, #1
    8ad2:	e7e7      	b.n	8aa4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xaa4>
    8ad4:	f890 11a7 	ldrb.w	r1, [r0, #423]	; 0x1a7
    8ad8:	bb21      	cbnz	r1, 8b24 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb24>
    8ada:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    8ade:	2301      	movs	r3, #1
    8ae0:	210b      	movs	r1, #11
    8ae2:	3068      	adds	r0, #104	; 0x68
    8ae4:	f004 fabc 	bl	d060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8ae8:	b9e0      	cbnz	r0, 8b24 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb24>
    8aea:	68a0      	ldr	r0, [r4, #8]
    8aec:	f890 0062 	ldrb.w	r0, [r0, #98]	; 0x62
    8af0:	f005 fd83 	bl	e5fa <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    8af4:	4605      	mov	r5, r0
    8af6:	68a0      	ldr	r0, [r4, #8]
    8af8:	f890 0063 	ldrb.w	r0, [r0, #99]	; 0x63
    8afc:	f005 fd7d 	bl	e5fa <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    8b00:	4606      	mov	r6, r0
    8b02:	68a0      	ldr	r0, [r4, #8]
    8b04:	f890 11a8 	ldrb.w	r1, [r0, #424]	; 0x1a8
    8b08:	4628      	mov	r0, r5
    8b0a:	f005 fd81 	bl	e610 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    8b0e:	b158      	cbz	r0, 8b28 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb28>
    8b10:	68a0      	ldr	r0, [r4, #8]
    8b12:	f890 11a9 	ldrb.w	r1, [r0, #425]	; 0x1a9
    8b16:	4630      	mov	r0, r6
    8b18:	f005 fd7a 	bl	e610 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    8b1c:	b120      	cbz	r0, 8b28 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb28>
    8b1e:	2000      	movs	r0, #0
    8b20:	f000 f900 	bl	8d24 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd24>
    8b24:	e012      	b.n	8b4c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb4c>
    8b26:	e012      	b.n	8b4e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb4e>
    8b28:	68a0      	ldr	r0, [r4, #8]
    8b2a:	2301      	movs	r3, #1
    8b2c:	2103      	movs	r1, #3
    8b2e:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    8b32:	3068      	adds	r0, #104	; 0x68
    8b34:	f004 fa94 	bl	d060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8b38:	b940      	cbnz	r0, 8b4c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb4c>
    8b3a:	68a0      	ldr	r0, [r4, #8]
    8b3c:	2301      	movs	r3, #1
    8b3e:	2102      	movs	r1, #2
    8b40:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    8b44:	3068      	adds	r0, #104	; 0x68
    8b46:	f004 fa8b 	bl	d060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8b4a:	b108      	cbz	r0, 8b50 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb50>
    8b4c:	2000      	movs	r0, #0
    8b4e:	bd70      	pop	{r4, r5, r6, pc}
    8b50:	2100      	movs	r1, #0
    8b52:	2016      	movs	r0, #22
    8b54:	f000 f804 	bl	8b60 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb60>
    8b58:	2001      	movs	r0, #1
    8b5a:	bd70      	pop	{r4, r5, r6, pc}
    8b5c:	20000130 	.word	0x20000130
    8b60:	b570      	push	{r4, r5, r6, lr}
    8b62:	4c0d      	ldr	r4, [pc, #52]	; (8b98 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb98>)
    8b64:	4606      	mov	r6, r0
    8b66:	460d      	mov	r5, r1
    8b68:	68a0      	ldr	r0, [r4, #8]
    8b6a:	3068      	adds	r0, #104	; 0x68
    8b6c:	f005 fd3d 	bl	e5ea <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    8b70:	b120      	cbz	r0, 8b7c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb7c>
    8b72:	f640 11f4 	movw	r1, #2548	; 0x9f4
    8b76:	2031      	movs	r0, #49	; 0x31
    8b78:	f7fb f8c4 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8b7c:	68a2      	ldr	r2, [r4, #8]
    8b7e:	2000      	movs	r0, #0
    8b80:	f882 60e4 	strb.w	r6, [r2, #228]	; 0xe4
    8b84:	b115      	cbz	r5, 8b8c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb8c>
    8b86:	f8a2 00a8 	strh.w	r0, [r2, #168]	; 0xa8
    8b8a:	bd70      	pop	{r4, r5, r6, pc}
    8b8c:	f822 0fa2 	strh.w	r0, [r2, #162]!
    8b90:	2001      	movs	r0, #1
    8b92:	7110      	strb	r0, [r2, #4]
    8b94:	bd70      	pop	{r4, r5, r6, pc}
    8b96:	0000      	.short	0x0000
    8b98:	20000130 	.word	0x20000130
    8b9c:	b570      	push	{r4, r5, r6, lr}
    8b9e:	4c18      	ldr	r4, [pc, #96]	; (8c00 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc00>)
    8ba0:	2500      	movs	r5, #0
    8ba2:	68a0      	ldr	r0, [r4, #8]
    8ba4:	f890 1173 	ldrb.w	r1, [r0, #371]	; 0x173
    8ba8:	2901      	cmp	r1, #1
    8baa:	d00a      	beq.n	8bc2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbc2>
    8bac:	2902      	cmp	r1, #2
    8bae:	d125      	bne.n	8bfc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbfc>
    8bb0:	f890 10ac 	ldrb.w	r1, [r0, #172]	; 0xac
    8bb4:	b1a9      	cbz	r1, 8be2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbe2>
    8bb6:	2106      	movs	r1, #6
    8bb8:	f880 10e6 	strb.w	r1, [r0, #230]	; 0xe6
    8bbc:	2101      	movs	r1, #1
    8bbe:	2002      	movs	r0, #2
    8bc0:	e017      	b.n	8bf2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbf2>
    8bc2:	f890 11bc 	ldrb.w	r1, [r0, #444]	; 0x1bc
    8bc6:	2900      	cmp	r1, #0
    8bc8:	d118      	bne.n	8bfc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbfc>
    8bca:	f100 03c8 	add.w	r3, r0, #200	; 0xc8
    8bce:	f500 7184 	add.w	r1, r0, #264	; 0x108
    8bd2:	2200      	movs	r2, #0
    8bd4:	f500 70ba 	add.w	r0, r0, #372	; 0x174
    8bd8:	f004 f9fa 	bl	cfd0 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    8bdc:	2101      	movs	r1, #1
    8bde:	2005      	movs	r0, #5
    8be0:	e007      	b.n	8bf2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbf2>
    8be2:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    8be6:	0740      	lsls	r0, r0, #29
    8be8:	d501      	bpl.n	8bee <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbee>
    8bea:	2011      	movs	r0, #17
    8bec:	e000      	b.n	8bf0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbf0>
    8bee:	200d      	movs	r0, #13
    8bf0:	2101      	movs	r1, #1
    8bf2:	f7ff ffb5 	bl	8b60 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb60>
    8bf6:	68a0      	ldr	r0, [r4, #8]
    8bf8:	f880 5173 	strb.w	r5, [r0, #371]	; 0x173
    8bfc:	bd70      	pop	{r4, r5, r6, pc}
    8bfe:	0000      	.short	0x0000
    8c00:	20000130 	.word	0x20000130
    8c04:	b570      	push	{r4, r5, r6, lr}
    8c06:	4a2b      	ldr	r2, [pc, #172]	; (8cb4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcb4>)
    8c08:	4603      	mov	r3, r0
    8c0a:	8850      	ldrh	r0, [r2, #2]
    8c0c:	4318      	orrs	r0, r3
    8c0e:	8050      	strh	r0, [r2, #2]
    8c10:	4610      	mov	r0, r2
    8c12:	2b40      	cmp	r3, #64	; 0x40
    8c14:	6880      	ldr	r0, [r0, #8]
    8c16:	d00d      	beq.n	8c34 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc34>
    8c18:	079e      	lsls	r6, r3, #30
    8c1a:	f04f 0500 	mov.w	r5, #0
    8c1e:	f04f 0401 	mov.w	r4, #1
    8c22:	ea4f 76c3 	mov.w	r6, r3, lsl #31
    8c26:	d50c      	bpl.n	8c42 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc42>
    8c28:	b14e      	cbz	r6, 8c3e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc3e>
    8c2a:	f640 41ee 	movw	r1, #3310	; 0xcee
    8c2e:	2031      	movs	r0, #49	; 0x31
    8c30:	f7fb f868 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8c34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8c38:	2104      	movs	r1, #4
    8c3a:	f7fe baad 	b.w	7198 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    8c3e:	60d1      	str	r1, [r2, #12]
    8c40:	e01c      	b.n	8c7c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc7c>
    8c42:	b1c6      	cbz	r6, 8c76 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc76>
    8c44:	6111      	str	r1, [r2, #16]
    8c46:	78c9      	ldrb	r1, [r1, #3]
    8c48:	2906      	cmp	r1, #6
    8c4a:	d002      	beq.n	8c52 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc52>
    8c4c:	290b      	cmp	r1, #11
    8c4e:	d112      	bne.n	8c76 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc76>
    8c50:	e009      	b.n	8c66 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc66>
    8c52:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    8c56:	2917      	cmp	r1, #23
    8c58:	d10d      	bne.n	8c76 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc76>
    8c5a:	2100      	movs	r1, #0
    8c5c:	e9c0 112e 	strd	r1, r1, [r0, #184]	; 0xb8
    8c60:	f880 407a 	strb.w	r4, [r0, #122]	; 0x7a
    8c64:	e007      	b.n	8c76 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc76>
    8c66:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    8c6a:	2911      	cmp	r1, #17
    8c6c:	d103      	bne.n	8c76 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc76>
    8c6e:	f880 507a 	strb.w	r5, [r0, #122]	; 0x7a
    8c72:	f880 40ac 	strb.w	r4, [r0, #172]	; 0xac
    8c76:	0799      	lsls	r1, r3, #30
    8c78:	d516      	bpl.n	8ca8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xca8>
    8c7a:	68d1      	ldr	r1, [r2, #12]
    8c7c:	78c9      	ldrb	r1, [r1, #3]
    8c7e:	2905      	cmp	r1, #5
    8c80:	d002      	beq.n	8c88 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc88>
    8c82:	290b      	cmp	r1, #11
    8c84:	d110      	bne.n	8ca8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xca8>
    8c86:	e009      	b.n	8c9c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc9c>
    8c88:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    8c8c:	2915      	cmp	r1, #21
    8c8e:	d10b      	bne.n	8ca8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xca8>
    8c90:	2100      	movs	r1, #0
    8c92:	e9e0 1130 	strd	r1, r1, [r0, #192]!	; 0xc0
    8c96:	f800 4c45 	strb.w	r4, [r0, #-69]
    8c9a:	e005      	b.n	8ca8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xca8>
    8c9c:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    8ca0:	2910      	cmp	r1, #16
    8ca2:	d101      	bne.n	8ca8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xca8>
    8ca4:	f880 507b 	strb.w	r5, [r0, #123]	; 0x7b
    8ca8:	0698      	lsls	r0, r3, #26
    8caa:	d501      	bpl.n	8cb0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcb0>
    8cac:	2008      	movs	r0, #8
    8cae:	7050      	strb	r0, [r2, #1]
    8cb0:	bd70      	pop	{r4, r5, r6, pc}
    8cb2:	0000      	.short	0x0000
    8cb4:	20000130 	.word	0x20000130
    8cb8:	b570      	push	{r4, r5, r6, lr}
    8cba:	4c19      	ldr	r4, [pc, #100]	; (8d20 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd20>)
    8cbc:	68a0      	ldr	r0, [r4, #8]
    8cbe:	f890 118e 	ldrb.w	r1, [r0, #398]	; 0x18e
    8cc2:	b109      	cbz	r1, 8cc8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcc8>
    8cc4:	2601      	movs	r6, #1
    8cc6:	e000      	b.n	8cca <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcca>
    8cc8:	2600      	movs	r6, #0
    8cca:	f890 218f 	ldrb.w	r2, [r0, #399]	; 0x18f
    8cce:	b10a      	cbz	r2, 8cd4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcd4>
    8cd0:	2501      	movs	r5, #1
    8cd2:	e000      	b.n	8cd6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcd6>
    8cd4:	2500      	movs	r5, #0
    8cd6:	b90e      	cbnz	r6, 8cdc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcdc>
    8cd8:	f890 1062 	ldrb.w	r1, [r0, #98]	; 0x62
    8cdc:	b90d      	cbnz	r5, 8ce2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xce2>
    8cde:	f890 2063 	ldrb.w	r2, [r0, #99]	; 0x63
    8ce2:	f100 035a 	add.w	r3, r0, #90	; 0x5a
    8ce6:	7219      	strb	r1, [r3, #8]
    8ce8:	725a      	strb	r2, [r3, #9]
    8cea:	2101      	movs	r1, #1
    8cec:	7299      	strb	r1, [r3, #10]
    8cee:	f890 01a6 	ldrb.w	r0, [r0, #422]	; 0x1a6
    8cf2:	2801      	cmp	r0, #1
    8cf4:	d001      	beq.n	8cfa <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcfa>
    8cf6:	b906      	cbnz	r6, 8cfa <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcfa>
    8cf8:	b115      	cbz	r5, 8d00 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd00>
    8cfa:	2000      	movs	r0, #0
    8cfc:	f000 f812 	bl	8d24 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd24>
    8d00:	68a0      	ldr	r0, [r4, #8]
    8d02:	f004 fdfe 	bl	d902 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    8d06:	2800      	cmp	r0, #0
    8d08:	d008      	beq.n	8d1c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd1c>
    8d0a:	68a1      	ldr	r1, [r4, #8]
    8d0c:	f501 72e9 	add.w	r2, r1, #466	; 0x1d2
    8d10:	8808      	ldrh	r0, [r1, #0]
    8d12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8d16:	3124      	adds	r1, #36	; 0x24
    8d18:	f004 bdb4 	b.w	d884 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    8d1c:	bd70      	pop	{r4, r5, r6, pc}
    8d1e:	0000      	.short	0x0000
    8d20:	20000130 	.word	0x20000130
    8d24:	b510      	push	{r4, lr}
    8d26:	4c10      	ldr	r4, [pc, #64]	; (8d68 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd68>)
    8d28:	68a1      	ldr	r1, [r4, #8]
    8d2a:	880a      	ldrh	r2, [r1, #0]
    8d2c:	f8a1 21fe 	strh.w	r2, [r1, #510]	; 0x1fe
    8d30:	f881 01fc 	strb.w	r0, [r1, #508]	; 0x1fc
    8d34:	f891 0062 	ldrb.w	r0, [r1, #98]	; 0x62
    8d38:	f005 fc5f 	bl	e5fa <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    8d3c:	68a1      	ldr	r1, [r4, #8]
    8d3e:	f881 0200 	strb.w	r0, [r1, #512]	; 0x200
    8d42:	f891 0063 	ldrb.w	r0, [r1, #99]	; 0x63
    8d46:	f005 fc58 	bl	e5fa <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    8d4a:	68a2      	ldr	r2, [r4, #8]
    8d4c:	f502 71fd 	add.w	r1, r2, #506	; 0x1fa
    8d50:	f882 0201 	strb.w	r0, [r2, #513]	; 0x201
    8d54:	2001      	movs	r0, #1
    8d56:	7008      	strb	r0, [r1, #0]
    8d58:	2000      	movs	r0, #0
    8d5a:	f882 01a6 	strb.w	r0, [r2, #422]	; 0x1a6
    8d5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8d62:	f000 bf2b 	b.w	9bbc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8d66:	0000      	.short	0x0000
    8d68:	20000130 	.word	0x20000130
    8d6c:	b510      	push	{r4, lr}
    8d6e:	4c15      	ldr	r4, [pc, #84]	; (8dc4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdc4>)
    8d70:	2301      	movs	r3, #1
    8d72:	2100      	movs	r1, #0
    8d74:	68a0      	ldr	r0, [r4, #8]
    8d76:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    8d7a:	3068      	adds	r0, #104	; 0x68
    8d7c:	f004 f970 	bl	d060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8d80:	b190      	cbz	r0, 8da8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xda8>
    8d82:	6920      	ldr	r0, [r4, #16]
    8d84:	f004 fbc8 	bl	d518 <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>
    8d88:	68a1      	ldr	r1, [r4, #8]
    8d8a:	f8a1 018c 	strh.w	r0, [r1, #396]	; 0x18c
    8d8e:	f8b1 106c 	ldrh.w	r1, [r1, #108]	; 0x6c
    8d92:	f005 fc4b 	bl	e62c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    8d96:	b148      	cbz	r0, 8dac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdac>
    8d98:	68a0      	ldr	r0, [r4, #8]
    8d9a:	2128      	movs	r1, #40	; 0x28
    8d9c:	f880 108d 	strb.w	r1, [r0, #141]	; 0x8d
    8da0:	306e      	adds	r0, #110	; 0x6e
    8da2:	2101      	movs	r1, #1
    8da4:	7781      	strb	r1, [r0, #30]
    8da6:	e00b      	b.n	8dc0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdc0>
    8da8:	2001      	movs	r0, #1
    8daa:	bd10      	pop	{r4, pc}
    8dac:	68a1      	ldr	r1, [r4, #8]
    8dae:	6920      	ldr	r0, [r4, #16]
    8db0:	f501 71c7 	add.w	r1, r1, #398	; 0x18e
    8db4:	f004 fbab 	bl	d50e <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>
    8db8:	68a1      	ldr	r1, [r4, #8]
    8dba:	200b      	movs	r0, #11
    8dbc:	f881 0076 	strb.w	r0, [r1, #118]	; 0x76
    8dc0:	2000      	movs	r0, #0
    8dc2:	bd10      	pop	{r4, pc}
    8dc4:	20000130 	.word	0x20000130
    8dc8:	b570      	push	{r4, r5, r6, lr}
    8dca:	4c29      	ldr	r4, [pc, #164]	; (8e70 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe70>)
    8dcc:	2301      	movs	r3, #1
    8dce:	2100      	movs	r1, #0
    8dd0:	68a0      	ldr	r0, [r4, #8]
    8dd2:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    8dd6:	3068      	adds	r0, #104	; 0x68
    8dd8:	f004 f942 	bl	d060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8ddc:	b1b8      	cbz	r0, 8e0e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe0e>
    8dde:	2100      	movs	r1, #0
    8de0:	6920      	ldr	r0, [r4, #16]
    8de2:	f004 fb6c 	bl	d4be <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>
    8de6:	b1a0      	cbz	r0, 8e12 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe12>
    8de8:	6920      	ldr	r0, [r4, #16]
    8dea:	68a1      	ldr	r1, [r4, #8]
    8dec:	f8b0 000d 	ldrh.w	r0, [r0, #13]
    8df0:	f8a1 018c 	strh.w	r0, [r1, #396]	; 0x18c
    8df4:	f8b1 106c 	ldrh.w	r1, [r1, #108]	; 0x6c
    8df8:	f005 fc18 	bl	e62c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    8dfc:	b168      	cbz	r0, 8e1a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe1a>
    8dfe:	68a0      	ldr	r0, [r4, #8]
    8e00:	2128      	movs	r1, #40	; 0x28
    8e02:	f880 108d 	strb.w	r1, [r0, #141]	; 0x8d
    8e06:	306e      	adds	r0, #110	; 0x6e
    8e08:	2101      	movs	r1, #1
    8e0a:	7781      	strb	r1, [r0, #30]
    8e0c:	e02e      	b.n	8e6c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe6c>
    8e0e:	2001      	movs	r0, #1
    8e10:	bd70      	pop	{r4, r5, r6, pc}
    8e12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8e16:	f000 b8ad 	b.w	8f74 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf74>
    8e1a:	6920      	ldr	r0, [r4, #16]
    8e1c:	f004 fb7f 	bl	d51e <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>
    8e20:	f004 f901 	bl	d026 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    8e24:	4605      	mov	r5, r0
    8e26:	68a0      	ldr	r0, [r4, #8]
    8e28:	4629      	mov	r1, r5
    8e2a:	f8c0 5194 	str.w	r5, [r0, #404]	; 0x194
    8e2e:	6920      	ldr	r0, [r4, #16]
    8e30:	7900      	ldrb	r0, [r0, #4]
    8e32:	f004 fa82 	bl	d33a <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    8e36:	68a1      	ldr	r1, [r4, #8]
    8e38:	f8a1 018e 	strh.w	r0, [r1, #398]	; 0x18e
    8e3c:	6920      	ldr	r0, [r4, #16]
    8e3e:	4629      	mov	r1, r5
    8e40:	f8b0 0005 	ldrh.w	r0, [r0, #5]
    8e44:	f004 fa75 	bl	d332 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    8e48:	68a1      	ldr	r1, [r4, #8]
    8e4a:	f8c1 0190 	str.w	r0, [r1, #400]	; 0x190
    8e4e:	6920      	ldr	r0, [r4, #16]
    8e50:	f004 fb68 	bl	d524 <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>
    8e54:	68a1      	ldr	r1, [r4, #8]
    8e56:	f8a1 0198 	strh.w	r0, [r1, #408]	; 0x198
    8e5a:	6920      	ldr	r0, [r4, #16]
    8e5c:	f004 fb65 	bl	d52a <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>
    8e60:	68a1      	ldr	r1, [r4, #8]
    8e62:	f8a1 019a 	strh.w	r0, [r1, #410]	; 0x19a
    8e66:	200d      	movs	r0, #13
    8e68:	f881 0076 	strb.w	r0, [r1, #118]	; 0x76
    8e6c:	2000      	movs	r0, #0
    8e6e:	bd70      	pop	{r4, r5, r6, pc}
    8e70:	20000130 	.word	0x20000130
    8e74:	b538      	push	{r3, r4, r5, lr}
    8e76:	4c29      	ldr	r4, [pc, #164]	; (8f1c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf1c>)
    8e78:	2301      	movs	r3, #1
    8e7a:	2100      	movs	r1, #0
    8e7c:	68a0      	ldr	r0, [r4, #8]
    8e7e:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    8e82:	3068      	adds	r0, #104	; 0x68
    8e84:	f004 f8ec 	bl	d060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8e88:	b970      	cbnz	r0, 8ea8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xea8>
    8e8a:	68a0      	ldr	r0, [r4, #8]
    8e8c:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    8e90:	2a12      	cmp	r2, #18
    8e92:	d009      	beq.n	8ea8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xea8>
    8e94:	2301      	movs	r3, #1
    8e96:	2105      	movs	r1, #5
    8e98:	3068      	adds	r0, #104	; 0x68
    8e9a:	f004 f8e1 	bl	d060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8e9e:	b108      	cbz	r0, 8ea4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xea4>
    8ea0:	2008      	movs	r0, #8
    8ea2:	bd38      	pop	{r3, r4, r5, pc}
    8ea4:	2001      	movs	r0, #1
    8ea6:	bd38      	pop	{r3, r4, r5, pc}
    8ea8:	68a0      	ldr	r0, [r4, #8]
    8eaa:	f890 00ac 	ldrb.w	r0, [r0, #172]	; 0xac
    8eae:	b908      	cbnz	r0, 8eb4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xeb4>
    8eb0:	f7ff f916 	bl	80e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe0>
    8eb4:	68a1      	ldr	r1, [r4, #8]
    8eb6:	6920      	ldr	r0, [r4, #16]
    8eb8:	f501 7184 	add.w	r1, r1, #264	; 0x108
    8ebc:	f004 fb44 	bl	d548 <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>
    8ec0:	68a1      	ldr	r1, [r4, #8]
    8ec2:	6920      	ldr	r0, [r4, #16]
    8ec4:	31d8      	adds	r1, #216	; 0xd8
    8ec6:	f004 fb36 	bl	d536 <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>
    8eca:	68a1      	ldr	r1, [r4, #8]
    8ecc:	f891 01c4 	ldrb.w	r0, [r1, #452]	; 0x1c4
    8ed0:	f88d 0000 	strb.w	r0, [sp]
    8ed4:	9800      	ldr	r0, [sp, #0]
    8ed6:	9000      	str	r0, [sp, #0]
    8ed8:	f89d 0000 	ldrb.w	r0, [sp]
    8edc:	b120      	cbz	r0, 8ee8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xee8>
    8ede:	f240 219d 	movw	r1, #669	; 0x29d
    8ee2:	2031      	movs	r0, #49	; 0x31
    8ee4:	f7fa ff0e 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8ee8:	8808      	ldrh	r0, [r1, #0]
    8eea:	f8a1 01c6 	strh.w	r0, [r1, #454]	; 0x1c6
    8eee:	f501 71e4 	add.w	r1, r1, #456	; 0x1c8
    8ef2:	6920      	ldr	r0, [r4, #16]
    8ef4:	f004 fb23 	bl	d53e <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>
    8ef8:	68a1      	ldr	r1, [r4, #8]
    8efa:	6920      	ldr	r0, [r4, #16]
    8efc:	f501 71e8 	add.w	r1, r1, #464	; 0x1d0
    8f00:	f004 fb16 	bl	d530 <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>
    8f04:	68a0      	ldr	r0, [r4, #8]
    8f06:	4601      	mov	r1, r0
    8f08:	2201      	movs	r2, #1
    8f0a:	f880 21c4 	strb.w	r2, [r0, #452]	; 0x1c4
    8f0e:	2014      	movs	r0, #20
    8f10:	f881 0076 	strb.w	r0, [r1, #118]	; 0x76
    8f14:	f000 fe52 	bl	9bbc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8f18:	2000      	movs	r0, #0
    8f1a:	bd38      	pop	{r3, r4, r5, pc}
    8f1c:	20000130 	.word	0x20000130
    8f20:	b51c      	push	{r2, r3, r4, lr}
    8f22:	4c13      	ldr	r4, [pc, #76]	; (8f70 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf70>)
    8f24:	68a0      	ldr	r0, [r4, #8]
    8f26:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
    8f2a:	07c0      	lsls	r0, r0, #31
    8f2c:	d001      	beq.n	8f32 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf32>
    8f2e:	2001      	movs	r0, #1
    8f30:	bd1c      	pop	{r2, r3, r4, pc}
    8f32:	4669      	mov	r1, sp
    8f34:	6920      	ldr	r0, [r4, #16]
    8f36:	f004 fb0d 	bl	d554 <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>
    8f3a:	f001 fa07 	bl	a34c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    8f3e:	f644 112f 	movw	r1, #18735	; 0x492f
    8f42:	4008      	ands	r0, r1
    8f44:	f89d 2000 	ldrb.w	r2, [sp]
    8f48:	68a1      	ldr	r1, [r4, #8]
    8f4a:	4002      	ands	r2, r0
    8f4c:	f801 2fb4 	strb.w	r2, [r1, #180]!
    8f50:	f89d 2001 	ldrb.w	r2, [sp, #1]
    8f54:	ea02 2010 	and.w	r0, r2, r0, lsr #8
    8f58:	7048      	strb	r0, [r1, #1]
    8f5a:	f7ff f8c1 	bl	80e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe0>
    8f5e:	68a0      	ldr	r0, [r4, #8]
    8f60:	f810 1f77 	ldrb.w	r1, [r0, #119]!
    8f64:	f041 0101 	orr.w	r1, r1, #1
    8f68:	7001      	strb	r1, [r0, #0]
    8f6a:	2000      	movs	r0, #0
    8f6c:	bd1c      	pop	{r2, r3, r4, pc}
    8f6e:	0000      	.short	0x0000
    8f70:	20000130 	.word	0x20000130
    8f74:	4a0a      	ldr	r2, [pc, #40]	; (8fa0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xfa0>)
    8f76:	b510      	push	{r4, lr}
    8f78:	6890      	ldr	r0, [r2, #8]
    8f7a:	f890 1077 	ldrb.w	r1, [r0, #119]	; 0x77
    8f7e:	070b      	lsls	r3, r1, #28
    8f80:	d501      	bpl.n	8f86 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf86>
    8f82:	2001      	movs	r0, #1
    8f84:	bd10      	pop	{r4, pc}
    8f86:	f041 0108 	orr.w	r1, r1, #8
    8f8a:	f880 1077 	strb.w	r1, [r0, #119]	; 0x77
    8f8e:	6911      	ldr	r1, [r2, #16]
    8f90:	78c9      	ldrb	r1, [r1, #3]
    8f92:	f880 10e1 	strb.w	r1, [r0, #225]	; 0xe1
    8f96:	f7ff f8a3 	bl	80e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe0>
    8f9a:	2000      	movs	r0, #0
    8f9c:	bd10      	pop	{r4, pc}
    8f9e:	0000      	.short	0x0000
    8fa0:	20000130 	.word	0x20000130
    8fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8fa6:	4c2e      	ldr	r4, [pc, #184]	; (9060 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1060>)
    8fa8:	68a0      	ldr	r0, [r4, #8]
    8faa:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
    8fae:	f010 0f30 	tst.w	r0, #48	; 0x30
    8fb2:	d001      	beq.n	8fb8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xfb8>
    8fb4:	2001      	movs	r0, #1
    8fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8fb8:	6920      	ldr	r0, [r4, #16]
    8fba:	f004 fae6 	bl	d58a <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    8fbe:	b350      	cbz	r0, 9016 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1016>
    8fc0:	6920      	ldr	r0, [r4, #16]
    8fc2:	f004 fad4 	bl	d56e <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    8fc6:	4607      	mov	r7, r0
    8fc8:	6920      	ldr	r0, [r4, #16]
    8fca:	f004 fad4 	bl	d576 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    8fce:	4606      	mov	r6, r0
    8fd0:	6920      	ldr	r0, [r4, #16]
    8fd2:	f004 faca 	bl	d56a <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    8fd6:	4605      	mov	r5, r0
    8fd8:	6920      	ldr	r0, [r4, #16]
    8fda:	f004 faca 	bl	d572 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    8fde:	4601      	mov	r1, r0
    8fe0:	9700      	str	r7, [sp, #0]
    8fe2:	68a0      	ldr	r0, [r4, #8]
    8fe4:	4633      	mov	r3, r6
    8fe6:	462a      	mov	r2, r5
    8fe8:	3024      	adds	r0, #36	; 0x24
    8fea:	f004 fd14 	bl	da16 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    8fee:	78a0      	ldrb	r0, [r4, #2]
    8ff0:	0780      	lsls	r0, r0, #30
    8ff2:	d503      	bpl.n	8ffc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xffc>
    8ff4:	68e0      	ldr	r0, [r4, #12]
    8ff6:	78c0      	ldrb	r0, [r0, #3]
    8ff8:	2814      	cmp	r0, #20
    8ffa:	d010      	beq.n	901e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x101e>
    8ffc:	68a1      	ldr	r1, [r4, #8]
    8ffe:	f891 0075 	ldrb.w	r0, [r1, #117]	; 0x75
    9002:	281c      	cmp	r0, #28
    9004:	d00b      	beq.n	901e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x101e>
    9006:	f891 0058 	ldrb.w	r0, [r1, #88]	; 0x58
    900a:	2801      	cmp	r0, #1
    900c:	d00f      	beq.n	902e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x102e>
    900e:	f891 019d 	ldrb.w	r0, [r1, #413]	; 0x19d
    9012:	b960      	cbnz	r0, 902e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x102e>
    9014:	e008      	b.n	9028 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1028>
    9016:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    901a:	f7ff bfab 	b.w	8f74 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf74>
    901e:	68a1      	ldr	r1, [r4, #8]
    9020:	2001      	movs	r0, #1
    9022:	f881 0058 	strb.w	r0, [r1, #88]	; 0x58
    9026:	e002      	b.n	902e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x102e>
    9028:	f891 019c 	ldrb.w	r0, [r1, #412]	; 0x19c
    902c:	b130      	cbz	r0, 903c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x103c>
    902e:	68a0      	ldr	r0, [r4, #8]
    9030:	f810 1f77 	ldrb.w	r1, [r0, #119]!
    9034:	f041 0110 	orr.w	r1, r1, #16
    9038:	7001      	strb	r1, [r0, #0]
    903a:	e00d      	b.n	9058 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1058>
    903c:	f891 0077 	ldrb.w	r0, [r1, #119]	; 0x77
    9040:	f501 72f0 	add.w	r2, r1, #480	; 0x1e0
    9044:	f040 0020 	orr.w	r0, r0, #32
    9048:	f881 0077 	strb.w	r0, [r1, #119]	; 0x77
    904c:	f831 0b24 	ldrh.w	r0, [r1], #36
    9050:	f004 fce8 	bl	da24 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    9054:	f000 fdb2 	bl	9bbc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9058:	f7ff f842 	bl	80e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe0>
    905c:	2000      	movs	r0, #0
    905e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9060:	20000130 	.word	0x20000130
    9064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9066:	4c1a      	ldr	r4, [pc, #104]	; (90d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x10d0>)
    9068:	2301      	movs	r3, #1
    906a:	210a      	movs	r1, #10
    906c:	68a0      	ldr	r0, [r4, #8]
    906e:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    9072:	3068      	adds	r0, #104	; 0x68
    9074:	f003 fff4 	bl	d060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9078:	b338      	cbz	r0, 90ca <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x10ca>
    907a:	6920      	ldr	r0, [r4, #16]
    907c:	f004 fa85 	bl	d58a <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    9080:	b1c8      	cbz	r0, 90b6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x10b6>
    9082:	6920      	ldr	r0, [r4, #16]
    9084:	f004 fa73 	bl	d56e <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    9088:	4607      	mov	r7, r0
    908a:	6920      	ldr	r0, [r4, #16]
    908c:	f004 fa73 	bl	d576 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    9090:	4606      	mov	r6, r0
    9092:	6920      	ldr	r0, [r4, #16]
    9094:	f004 fa69 	bl	d56a <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    9098:	4605      	mov	r5, r0
    909a:	6920      	ldr	r0, [r4, #16]
    909c:	f004 fa69 	bl	d572 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    90a0:	4601      	mov	r1, r0
    90a2:	9700      	str	r7, [sp, #0]
    90a4:	68a0      	ldr	r0, [r4, #8]
    90a6:	4633      	mov	r3, r6
    90a8:	462a      	mov	r2, r5
    90aa:	3024      	adds	r0, #36	; 0x24
    90ac:	f004 fcb3 	bl	da16 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    90b0:	68a0      	ldr	r0, [r4, #8]
    90b2:	f004 fc26 	bl	d902 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    90b6:	68a1      	ldr	r1, [r4, #8]
    90b8:	2000      	movs	r0, #0
    90ba:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    90be:	f881 0075 	strb.w	r0, [r1, #117]	; 0x75
    90c2:	f7ff f9b7 	bl	8434 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x434>
    90c6:	2000      	movs	r0, #0
    90c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    90ca:	2001      	movs	r0, #1
    90cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    90ce:	0000      	.short	0x0000
    90d0:	20000130 	.word	0x20000130
    90d4:	b510      	push	{r4, lr}
    90d6:	4c09      	ldr	r4, [pc, #36]	; (90fc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x10fc>)
    90d8:	68a0      	ldr	r0, [r4, #8]
    90da:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
    90de:	0740      	lsls	r0, r0, #29
    90e0:	d501      	bpl.n	90e6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x10e6>
    90e2:	2001      	movs	r0, #1
    90e4:	bd10      	pop	{r4, pc}
    90e6:	f7fe fffb 	bl	80e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe0>
    90ea:	68a0      	ldr	r0, [r4, #8]
    90ec:	f810 1f77 	ldrb.w	r1, [r0, #119]!
    90f0:	f041 0104 	orr.w	r1, r1, #4
    90f4:	7001      	strb	r1, [r0, #0]
    90f6:	2000      	movs	r0, #0
    90f8:	bd10      	pop	{r4, pc}
    90fa:	0000      	.short	0x0000
    90fc:	20000130 	.word	0x20000130
    9100:	b510      	push	{r4, lr}
    9102:	4c09      	ldr	r4, [pc, #36]	; (9128 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1128>)
    9104:	2301      	movs	r3, #1
    9106:	2109      	movs	r1, #9
    9108:	68a0      	ldr	r0, [r4, #8]
    910a:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    910e:	3068      	adds	r0, #104	; 0x68
    9110:	f003 ffa6 	bl	d060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9114:	2800      	cmp	r0, #0
    9116:	d006      	beq.n	9126 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1126>
    9118:	68a1      	ldr	r1, [r4, #8]
    911a:	2000      	movs	r0, #0
    911c:	f801 0f9a 	strb.w	r0, [r1, #154]!
    9120:	7308      	strb	r0, [r1, #12]
    9122:	f801 0c25 	strb.w	r0, [r1, #-37]
    9126:	bd10      	pop	{r4, pc}
    9128:	20000130 	.word	0x20000130
    912c:	b510      	push	{r4, lr}
    912e:	4c0f      	ldr	r4, [pc, #60]	; (916c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x116c>)
    9130:	2301      	movs	r3, #1
    9132:	2100      	movs	r1, #0
    9134:	68a0      	ldr	r0, [r4, #8]
    9136:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    913a:	3068      	adds	r0, #104	; 0x68
    913c:	f003 ff90 	bl	d060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9140:	b138      	cbz	r0, 9152 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1152>
    9142:	f7fe ffcd 	bl	80e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe0>
    9146:	68a1      	ldr	r1, [r4, #8]
    9148:	2010      	movs	r0, #16
    914a:	f881 0076 	strb.w	r0, [r1, #118]	; 0x76
    914e:	2000      	movs	r0, #0
    9150:	bd10      	pop	{r4, pc}
    9152:	68a0      	ldr	r0, [r4, #8]
    9154:	2301      	movs	r3, #1
    9156:	2105      	movs	r1, #5
    9158:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    915c:	3068      	adds	r0, #104	; 0x68
    915e:	f003 ff7f 	bl	d060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9162:	b108      	cbz	r0, 9168 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1168>
    9164:	2008      	movs	r0, #8
    9166:	bd10      	pop	{r4, pc}
    9168:	2001      	movs	r0, #1
    916a:	bd10      	pop	{r4, pc}
    916c:	20000130 	.word	0x20000130
    9170:	4806      	ldr	r0, [pc, #24]	; (918c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x118c>)
    9172:	6880      	ldr	r0, [r0, #8]
    9174:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    9178:	2911      	cmp	r1, #17
    917a:	d001      	beq.n	9180 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1180>
    917c:	2002      	movs	r0, #2
    917e:	4770      	bx	lr
    9180:	2112      	movs	r1, #18
    9182:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
    9186:	2000      	movs	r0, #0
    9188:	4770      	bx	lr
    918a:	0000      	.short	0x0000
    918c:	20000130 	.word	0x20000130
    9190:	b570      	push	{r4, r5, r6, lr}
    9192:	4c30      	ldr	r4, [pc, #192]	; (9254 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1254>)
    9194:	2301      	movs	r3, #1
    9196:	210b      	movs	r1, #11
    9198:	68a0      	ldr	r0, [r4, #8]
    919a:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    919e:	3068      	adds	r0, #104	; 0x68
    91a0:	f003 ff5e 	bl	d060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    91a4:	bb48      	cbnz	r0, 91fa <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x11fa>
    91a6:	68a0      	ldr	r0, [r4, #8]
    91a8:	2301      	movs	r3, #1
    91aa:	2100      	movs	r1, #0
    91ac:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    91b0:	3068      	adds	r0, #104	; 0x68
    91b2:	f003 ff55 	bl	d060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    91b6:	b1f0      	cbz	r0, 91f6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x11f6>
    91b8:	68a0      	ldr	r0, [r4, #8]
    91ba:	f890 0075 	ldrb.w	r0, [r0, #117]	; 0x75
    91be:	2824      	cmp	r0, #36	; 0x24
    91c0:	d01b      	beq.n	91fa <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x11fa>
    91c2:	6920      	ldr	r0, [r4, #16]
    91c4:	f004 f9fd 	bl	d5c2 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>
    91c8:	b1c8      	cbz	r0, 91fe <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x11fe>
    91ca:	68a0      	ldr	r0, [r4, #8]
    91cc:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    91d0:	f041 0104 	orr.w	r1, r1, #4
    91d4:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    91d8:	6921      	ldr	r1, [r4, #16]
    91da:	794a      	ldrb	r2, [r1, #5]
    91dc:	f002 0207 	and.w	r2, r2, #7
    91e0:	f880 205b 	strb.w	r2, [r0, #91]	; 0x5b
    91e4:	7909      	ldrb	r1, [r1, #4]
    91e6:	f001 0107 	and.w	r1, r1, #7
    91ea:	f880 105a 	strb.w	r1, [r0, #90]	; 0x5a
    91ee:	f890 31a7 	ldrb.w	r3, [r0, #423]	; 0x1a7
    91f2:	bb3b      	cbnz	r3, 9244 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1244>
    91f4:	e007      	b.n	9206 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1206>
    91f6:	2001      	movs	r0, #1
    91f8:	bd70      	pop	{r4, r5, r6, pc}
    91fa:	2020      	movs	r0, #32
    91fc:	bd70      	pop	{r4, r5, r6, pc}
    91fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9202:	f7ff beb7 	b.w	8f74 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf74>
    9206:	f890 31a6 	ldrb.w	r3, [r0, #422]	; 0x1a6
    920a:	2b01      	cmp	r3, #1
    920c:	d01a      	beq.n	9244 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1244>
    920e:	f100 0362 	add.w	r3, r0, #98	; 0x62
    9212:	2501      	movs	r5, #1
    9214:	785e      	ldrb	r6, [r3, #1]
    9216:	428e      	cmp	r6, r1
    9218:	d106      	bne.n	9228 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1228>
    921a:	7819      	ldrb	r1, [r3, #0]
    921c:	4291      	cmp	r1, r2
    921e:	d103      	bne.n	9228 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1228>
    9220:	2102      	movs	r1, #2
    9222:	f880 11a6 	strb.w	r1, [r0, #422]	; 0x1a6
    9226:	e00d      	b.n	9244 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1244>
    9228:	f500 71fb 	add.w	r1, r0, #502	; 0x1f6
    922c:	8802      	ldrh	r2, [r0, #0]
    922e:	f821 2902 	strh.w	r2, [r1], #-2
    9232:	f890 205a 	ldrb.w	r2, [r0, #90]	; 0x5a
    9236:	710a      	strb	r2, [r1, #4]
    9238:	f890 005b 	ldrb.w	r0, [r0, #91]	; 0x5b
    923c:	7148      	strb	r0, [r1, #5]
    923e:	700d      	strb	r5, [r1, #0]
    9240:	f000 fcbc 	bl	9bbc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9244:	68a1      	ldr	r1, [r4, #8]
    9246:	2021      	movs	r0, #33	; 0x21
    9248:	f881 0076 	strb.w	r0, [r1, #118]	; 0x76
    924c:	f7fe ff48 	bl	80e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe0>
    9250:	2000      	movs	r0, #0
    9252:	bd70      	pop	{r4, r5, r6, pc}
    9254:	20000130 	.word	0x20000130
    9258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    925c:	4c4e      	ldr	r4, [pc, #312]	; (9398 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1398>)
    925e:	68a0      	ldr	r0, [r4, #8]
    9260:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
    9264:	2920      	cmp	r1, #32
    9266:	d009      	beq.n	927c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x127c>
    9268:	f05f 0700 	movs.w	r7, #0
    926c:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    9270:	2922      	cmp	r1, #34	; 0x22
    9272:	d005      	beq.n	9280 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1280>
    9274:	b387      	cbz	r7, 92d8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x12d8>
    9276:	f100 0575 	add.w	r5, r0, #117	; 0x75
    927a:	e003      	b.n	9284 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1284>
    927c:	2701      	movs	r7, #1
    927e:	e7f5      	b.n	926c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x126c>
    9280:	f100 0576 	add.w	r5, r0, #118	; 0x76
    9284:	f810 1fb4 	ldrb.w	r1, [r0, #180]!
    9288:	f041 0104 	orr.w	r1, r1, #4
    928c:	7001      	strb	r1, [r0, #0]
    928e:	6920      	ldr	r0, [r4, #16]
    9290:	f7fc fd30 	bl	5cf4 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>
    9294:	f04f 0801 	mov.w	r8, #1
    9298:	2600      	movs	r6, #0
    929a:	b308      	cbz	r0, 92e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x12e0>
    929c:	4639      	mov	r1, r7
    929e:	6920      	ldr	r0, [r4, #16]
    92a0:	f7fe ffd6 	bl	8250 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x250>
    92a4:	b1e0      	cbz	r0, 92e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x12e0>
    92a6:	466a      	mov	r2, sp
    92a8:	6921      	ldr	r1, [r4, #16]
    92aa:	68a0      	ldr	r0, [r4, #8]
    92ac:	f003 fffb 	bl	d2a6 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>
    92b0:	b388      	cbz	r0, 9316 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1316>
    92b2:	6920      	ldr	r0, [r4, #16]
    92b4:	f004 f961 	bl	d57a <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    92b8:	68a1      	ldr	r1, [r4, #8]
    92ba:	f8a1 018c 	strh.w	r0, [r1, #396]	; 0x18c
    92be:	f8b1 106c 	ldrh.w	r1, [r1, #108]	; 0x6c
    92c2:	f005 f9b3 	bl	e62c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    92c6:	b338      	cbz	r0, 9318 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1318>
    92c8:	68a0      	ldr	r0, [r4, #8]
    92ca:	2128      	movs	r1, #40	; 0x28
    92cc:	f880 108d 	strb.w	r1, [r0, #141]	; 0x8d
    92d0:	306e      	adds	r0, #110	; 0x6e
    92d2:	f880 801e 	strb.w	r8, [r0, #30]
    92d6:	e053      	b.n	9380 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1380>
    92d8:	e7ff      	b.n	92da <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x12da>
    92da:	2002      	movs	r0, #2
    92dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    92e0:	68a0      	ldr	r0, [r4, #8]
    92e2:	f04f 0900 	mov.w	r9, #0
    92e6:	f890 11a6 	ldrb.w	r1, [r0, #422]	; 0x1a6
    92ea:	2901      	cmp	r1, #1
    92ec:	d015      	beq.n	931a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x131a>
    92ee:	f880 61a6 	strb.w	r6, [r0, #422]	; 0x1a6
    92f2:	b1f7      	cbz	r7, 9332 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1332>
    92f4:	6920      	ldr	r0, [r4, #16]
    92f6:	68a1      	ldr	r1, [r4, #8]
    92f8:	78c0      	ldrb	r0, [r0, #3]
    92fa:	f881 00e2 	strb.w	r0, [r1, #226]	; 0xe2
    92fe:	fa08 f200 	lsl.w	r2, r8, r0
    9302:	f3c2 6000 	ubfx	r0, r2, #24, #1
    9306:	b160      	cbz	r0, 9322 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1322>
    9308:	200a      	movs	r0, #10
    930a:	f881 0075 	strb.w	r0, [r1, #117]	; 0x75
    930e:	f891 00a6 	ldrb.w	r0, [r1, #166]	; 0xa6
    9312:	b9a0      	cbnz	r0, 933e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x133e>
    9314:	e008      	b.n	9328 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1328>
    9316:	e014      	b.n	9342 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1342>
    9318:	e027      	b.n	936a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x136a>
    931a:	201e      	movs	r0, #30
    931c:	f7ff fd02 	bl	8d24 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd24>
    9320:	e7e7      	b.n	92f2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x12f2>
    9322:	f44f 7172 	mov.w	r1, #968	; 0x3c8
    9326:	e001      	b.n	932c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x132c>
    9328:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    932c:	2031      	movs	r0, #49	; 0x31
    932e:	f7fa fce9 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9332:	702e      	strb	r6, [r5, #0]
    9334:	f7fe fee0 	bl	80f8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf8>
    9338:	f7ff fe1c 	bl	8f74 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf74>
    933c:	4681      	mov	r9, r0
    933e:	4648      	mov	r0, r9
    9340:	e7cc      	b.n	92dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x12dc>
    9342:	68a0      	ldr	r0, [r4, #8]
    9344:	f890 11a6 	ldrb.w	r1, [r0, #422]	; 0x1a6
    9348:	2901      	cmp	r1, #1
    934a:	d009      	beq.n	9360 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1360>
    934c:	f880 61a6 	strb.w	r6, [r0, #422]	; 0x1a6
    9350:	68a0      	ldr	r0, [r4, #8]
    9352:	f100 0176 	add.w	r1, r0, #118	; 0x76
    9356:	428d      	cmp	r5, r1
    9358:	d112      	bne.n	9380 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1380>
    935a:	f880 6076 	strb.w	r6, [r0, #118]	; 0x76
    935e:	e00f      	b.n	9380 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1380>
    9360:	2000      	movs	r0, #0
    9362:	f7ff fcdf 	bl	8d24 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd24>
    9366:	702e      	strb	r6, [r5, #0]
    9368:	e7f2      	b.n	9350 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1350>
    936a:	68a0      	ldr	r0, [r4, #8]
    936c:	f89d 1000 	ldrb.w	r1, [sp]
    9370:	f880 118e 	strb.w	r1, [r0, #398]	; 0x18e
    9374:	f89d 1001 	ldrb.w	r1, [sp, #1]
    9378:	f880 118f 	strb.w	r1, [r0, #399]	; 0x18f
    937c:	2024      	movs	r0, #36	; 0x24
    937e:	7028      	strb	r0, [r5, #0]
    9380:	68a0      	ldr	r0, [r4, #8]
    9382:	f100 0176 	add.w	r1, r0, #118	; 0x76
    9386:	428d      	cmp	r5, r1
    9388:	d102      	bne.n	9390 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1390>
    938a:	f7fe feb5 	bl	80f8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf8>
    938e:	e001      	b.n	9394 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1394>
    9390:	f880 60a6 	strb.w	r6, [r0, #166]	; 0xa6
    9394:	2000      	movs	r0, #0
    9396:	e7a1      	b.n	92dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x12dc>
    9398:	20000130 	.word	0x20000130
    939c:	b510      	push	{r4, lr}
    939e:	4c0a      	ldr	r4, [pc, #40]	; (93c8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13c8>)
    93a0:	68a0      	ldr	r0, [r4, #8]
    93a2:	f810 1fb4 	ldrb.w	r1, [r0, #180]!
    93a6:	f041 0104 	orr.w	r1, r1, #4
    93aa:	7001      	strb	r1, [r0, #0]
    93ac:	6920      	ldr	r0, [r4, #16]
    93ae:	f004 f912 	bl	d5d6 <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>
    93b2:	2816      	cmp	r0, #22
    93b4:	d001      	beq.n	93ba <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13ba>
    93b6:	2000      	movs	r0, #0
    93b8:	bd10      	pop	{r4, pc}
    93ba:	6920      	ldr	r0, [r4, #16]
    93bc:	f004 f90d 	bl	d5da <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>
    93c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    93c4:	f7fe be6a 	b.w	809c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9c>
    93c8:	20000130 	.word	0x20000130
    93cc:	4802      	ldr	r0, [pc, #8]	; (93d8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13d8>)
    93ce:	6900      	ldr	r0, [r0, #16]
    93d0:	7900      	ldrb	r0, [r0, #4]
    93d2:	f7fe be63 	b.w	809c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9c>
    93d6:	0000      	.short	0x0000
    93d8:	20000130 	.word	0x20000130
    93dc:	b510      	push	{r4, lr}
    93de:	4c08      	ldr	r4, [pc, #32]	; (9400 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1400>)
    93e0:	68a0      	ldr	r0, [r4, #8]
    93e2:	f890 0076 	ldrb.w	r0, [r0, #118]	; 0x76
    93e6:	2817      	cmp	r0, #23
    93e8:	d001      	beq.n	93ee <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13ee>
    93ea:	2002      	movs	r0, #2
    93ec:	bd10      	pop	{r4, pc}
    93ee:	f7fe fe83 	bl	80f8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf8>
    93f2:	68a1      	ldr	r1, [r4, #8]
    93f4:	201b      	movs	r0, #27
    93f6:	f881 0076 	strb.w	r0, [r1, #118]	; 0x76
    93fa:	2000      	movs	r0, #0
    93fc:	bd10      	pop	{r4, pc}
    93fe:	0000      	.short	0x0000
    9400:	20000130 	.word	0x20000130
    9404:	b510      	push	{r4, lr}
    9406:	4c0b      	ldr	r4, [pc, #44]	; (9434 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1434>)
    9408:	2301      	movs	r3, #1
    940a:	4619      	mov	r1, r3
    940c:	68a0      	ldr	r0, [r4, #8]
    940e:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
    9412:	3068      	adds	r0, #104	; 0x68
    9414:	f003 fe24 	bl	d060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9418:	b108      	cbz	r0, 941e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x141e>
    941a:	2000      	movs	r0, #0
    941c:	bd10      	pop	{r4, pc}
    941e:	6920      	ldr	r0, [r4, #16]
    9420:	f004 f8af 	bl	d582 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>
    9424:	68a1      	ldr	r1, [r4, #8]
    9426:	f881 0172 	strb.w	r0, [r1, #370]	; 0x172
    942a:	2007      	movs	r0, #7
    942c:	f881 0078 	strb.w	r0, [r1, #120]	; 0x78
    9430:	e7f3      	b.n	941a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x141a>
    9432:	0000      	.short	0x0000
    9434:	20000130 	.word	0x20000130
    9438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    943c:	4d37      	ldr	r5, [pc, #220]	; (951c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x151c>)
    943e:	2600      	movs	r6, #0
    9440:	4628      	mov	r0, r5
    9442:	68a9      	ldr	r1, [r5, #8]
    9444:	6900      	ldr	r0, [r0, #16]
    9446:	2701      	movs	r7, #1
    9448:	f891 3075 	ldrb.w	r3, [r1, #117]	; 0x75
    944c:	7900      	ldrb	r0, [r0, #4]
    944e:	2b0e      	cmp	r3, #14
    9450:	d101      	bne.n	9456 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1456>
    9452:	2812      	cmp	r0, #18
    9454:	d006      	beq.n	9464 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1464>
    9456:	4a31      	ldr	r2, [pc, #196]	; (951c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x151c>)
    9458:	2400      	movs	r4, #0
    945a:	6892      	ldr	r2, [r2, #8]
    945c:	32b4      	adds	r2, #180	; 0xb4
    945e:	2b1c      	cmp	r3, #28
    9460:	d004      	beq.n	946c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x146c>
    9462:	e005      	b.n	9470 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1470>
    9464:	f7ff fe4c 	bl	9100 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1100>
    9468:	4606      	mov	r6, r0
    946a:	e053      	b.n	9514 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1514>
    946c:	2814      	cmp	r0, #20
    946e:	d002      	beq.n	9476 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1476>
    9470:	2b04      	cmp	r3, #4
    9472:	d00b      	beq.n	948c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x148c>
    9474:	e00c      	b.n	9490 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1490>
    9476:	f881 4075 	strb.w	r4, [r1, #117]	; 0x75
    947a:	f881 40a6 	strb.w	r4, [r1, #166]	; 0xa6
    947e:	2105      	movs	r1, #5
    9480:	4610      	mov	r0, r2
    9482:	f005 f864 	bl	e54e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x4ac>
    9486:	f7fe ffd5 	bl	8434 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x434>
    948a:	e043      	b.n	9514 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1514>
    948c:	280e      	cmp	r0, #14
    948e:	d002      	beq.n	9496 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1496>
    9490:	2b20      	cmp	r3, #32
    9492:	d00f      	beq.n	94b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14b4>
    9494:	e010      	b.n	94b8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14b8>
    9496:	f881 4075 	strb.w	r4, [r1, #117]	; 0x75
    949a:	f881 40a6 	strb.w	r4, [r1, #166]	; 0xa6
    949e:	8808      	ldrh	r0, [r1, #0]
    94a0:	f8a1 0206 	strh.w	r0, [r1, #518]	; 0x206
    94a4:	201a      	movs	r0, #26
    94a6:	f881 0204 	strb.w	r0, [r1, #516]	; 0x204
    94aa:	f881 7202 	strb.w	r7, [r1, #514]	; 0x202
    94ae:	f000 fb85 	bl	9bbc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    94b2:	e02f      	b.n	9514 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1514>
    94b4:	2816      	cmp	r0, #22
    94b6:	d006      	beq.n	94c6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14c6>
    94b8:	2b26      	cmp	r3, #38	; 0x26
    94ba:	d101      	bne.n	94c0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14c0>
    94bc:	2816      	cmp	r0, #22
    94be:	d002      	beq.n	94c6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14c6>
    94c0:	2817      	cmp	r0, #23
    94c2:	d014      	beq.n	94ee <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14ee>
    94c4:	e026      	b.n	9514 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1514>
    94c6:	f801 4f75 	strb.w	r4, [r1, #117]!
    94ca:	f881 4031 	strb.w	r4, [r1, #49]	; 0x31
    94ce:	7848      	ldrb	r0, [r1, #1]
    94d0:	2821      	cmp	r0, #33	; 0x21
    94d2:	d01f      	beq.n	9514 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1514>
    94d4:	2108      	movs	r1, #8
    94d6:	4610      	mov	r0, r2
    94d8:	f005 f839 	bl	e54e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x4ac>
    94dc:	68a8      	ldr	r0, [r5, #8]
    94de:	210b      	movs	r1, #11
    94e0:	30b4      	adds	r0, #180	; 0xb4
    94e2:	f005 f834 	bl	e54e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x4ac>
    94e6:	201a      	movs	r0, #26
    94e8:	f7ff fc1c 	bl	8d24 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd24>
    94ec:	e012      	b.n	9514 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1514>
    94ee:	f891 0076 	ldrb.w	r0, [r1, #118]	; 0x76
    94f2:	2822      	cmp	r0, #34	; 0x22
    94f4:	d10e      	bne.n	9514 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1514>
    94f6:	f881 4076 	strb.w	r4, [r1, #118]	; 0x76
    94fa:	f7fe fdfd 	bl	80f8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf8>
    94fe:	68a8      	ldr	r0, [r5, #8]
    9500:	f890 01a6 	ldrb.w	r0, [r0, #422]	; 0x1a6
    9504:	2801      	cmp	r0, #1
    9506:	d102      	bne.n	950e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x150e>
    9508:	2000      	movs	r0, #0
    950a:	f7ff fc0b 	bl	8d24 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd24>
    950e:	68a8      	ldr	r0, [r5, #8]
    9510:	f880 41a6 	strb.w	r4, [r0, #422]	; 0x1a6
    9514:	4630      	mov	r0, r6
    9516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    951a:	0000      	.short	0x0000
    951c:	20000130 	.word	0x20000130
    9520:	b570      	push	{r4, r5, r6, lr}
    9522:	4c2c      	ldr	r4, [pc, #176]	; (95d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x15d4>)
    9524:	68a0      	ldr	r0, [r4, #8]
    9526:	f890 1077 	ldrb.w	r1, [r0, #119]	; 0x77
    952a:	0789      	lsls	r1, r1, #30
    952c:	d507      	bpl.n	953e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x153e>
    952e:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    9532:	2301      	movs	r3, #1
    9534:	2108      	movs	r1, #8
    9536:	3068      	adds	r0, #104	; 0x68
    9538:	f003 fd92 	bl	d060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    953c:	b1e8      	cbz	r0, 957a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x157a>
    953e:	68a0      	ldr	r0, [r4, #8]
    9540:	f890 00ae 	ldrb.w	r0, [r0, #174]	; 0xae
    9544:	0780      	lsls	r0, r0, #30
    9546:	d412      	bmi.n	956e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x156e>
    9548:	6920      	ldr	r0, [r4, #16]
    954a:	f004 f81c 	bl	d586 <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>
    954e:	68a1      	ldr	r1, [r4, #8]
    9550:	f881 00af 	strb.w	r0, [r1, #175]	; 0xaf
    9554:	6920      	ldr	r0, [r4, #16]
    9556:	f830 2f05 	ldrh.w	r2, [r0, #5]!
    955a:	f8a1 20b0 	strh.w	r2, [r1, #176]	; 0xb0
    955e:	8840      	ldrh	r0, [r0, #2]
    9560:	f8a1 00b2 	strh.w	r0, [r1, #178]	; 0xb2
    9564:	f811 0fae 	ldrb.w	r0, [r1, #174]!
    9568:	f040 0002 	orr.w	r0, r0, #2
    956c:	7008      	strb	r0, [r1, #0]
    956e:	68a0      	ldr	r0, [r4, #8]
    9570:	f890 10ae 	ldrb.w	r1, [r0, #174]	; 0xae
    9574:	07c9      	lsls	r1, r1, #31
    9576:	d002      	beq.n	957e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x157e>
    9578:	e010      	b.n	959c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x159c>
    957a:	2001      	movs	r0, #1
    957c:	bd70      	pop	{r4, r5, r6, pc}
    957e:	f890 1077 	ldrb.w	r1, [r0, #119]	; 0x77
    9582:	078a      	lsls	r2, r1, #30
    9584:	d504      	bpl.n	9590 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1590>
    9586:	f240 21d9 	movw	r1, #729	; 0x2d9
    958a:	2031      	movs	r0, #49	; 0x31
    958c:	f7fa fbba 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9590:	f041 0102 	orr.w	r1, r1, #2
    9594:	f880 1077 	strb.w	r1, [r0, #119]	; 0x77
    9598:	f7fe fda2 	bl	80e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe0>
    959c:	68a0      	ldr	r0, [r4, #8]
    959e:	2500      	movs	r5, #0
    95a0:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
    95a4:	2906      	cmp	r1, #6
    95a6:	d105      	bne.n	95b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x15b4>
    95a8:	f880 5075 	strb.w	r5, [r0, #117]	; 0x75
    95ac:	f880 50a6 	strb.w	r5, [r0, #166]	; 0xa6
    95b0:	f000 fb04 	bl	9bbc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    95b4:	68a0      	ldr	r0, [r4, #8]
    95b6:	f890 11ac 	ldrb.w	r1, [r0, #428]	; 0x1ac
    95ba:	b149      	cbz	r1, 95d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x15d0>
    95bc:	f880 51ac 	strb.w	r5, [r0, #428]	; 0x1ac
    95c0:	f000 fafc 	bl	9bbc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    95c4:	68a0      	ldr	r0, [r4, #8]
    95c6:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
    95ca:	b909      	cbnz	r1, 95d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x15d0>
    95cc:	f880 50a6 	strb.w	r5, [r0, #166]	; 0xa6
    95d0:	2000      	movs	r0, #0
    95d2:	bd70      	pop	{r4, r5, r6, pc}
    95d4:	20000130 	.word	0x20000130
    95d8:	b510      	push	{r4, lr}
    95da:	4c17      	ldr	r4, [pc, #92]	; (9638 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1638>)
    95dc:	68a3      	ldr	r3, [r4, #8]
    95de:	f893 00ea 	ldrb.w	r0, [r3, #234]	; 0xea
    95e2:	2808      	cmp	r0, #8
    95e4:	d20e      	bcs.n	9604 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1604>
    95e6:	f100 0208 	add.w	r2, r0, #8
    95ea:	f1c0 0008 	rsb	r0, r0, #8
    95ee:	b2c1      	uxtb	r1, r0
    95f0:	1898      	adds	r0, r3, r2
    95f2:	f500 7084 	add.w	r0, r0, #264	; 0x108
    95f6:	f7fa fc1d 	bl	3e34 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    95fa:	68a1      	ldr	r1, [r4, #8]
    95fc:	f811 2fea 	ldrb.w	r2, [r1, #234]!
    9600:	4410      	add	r0, r2
    9602:	7008      	strb	r0, [r1, #0]
    9604:	68a3      	ldr	r3, [r4, #8]
    9606:	f893 00ea 	ldrb.w	r0, [r3, #234]	; 0xea
    960a:	3808      	subs	r0, #8
    960c:	2804      	cmp	r0, #4
    960e:	d211      	bcs.n	9634 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1634>
    9610:	1d02      	adds	r2, r0, #4
    9612:	f1c0 0004 	rsb	r0, r0, #4
    9616:	b2c1      	uxtb	r1, r0
    9618:	1898      	adds	r0, r3, r2
    961a:	30d8      	adds	r0, #216	; 0xd8
    961c:	f7fa fc0a 	bl	3e34 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    9620:	68a0      	ldr	r0, [r4, #8]
    9622:	2100      	movs	r1, #0
    9624:	f880 10ea 	strb.w	r1, [r0, #234]	; 0xea
    9628:	2101      	movs	r1, #1
    962a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    962e:	2004      	movs	r0, #4
    9630:	f7ff ba96 	b.w	8b60 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb60>
    9634:	bd10      	pop	{r4, pc}
    9636:	0000      	.short	0x0000
    9638:	20000130 	.word	0x20000130
    963c:	4804      	ldr	r0, [pc, #16]	; (9650 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1650>)
    963e:	2127      	movs	r1, #39	; 0x27
    9640:	6880      	ldr	r0, [r0, #8]
    9642:	f880 1075 	strb.w	r1, [r0, #117]	; 0x75
    9646:	2100      	movs	r1, #0
    9648:	f880 1184 	strb.w	r1, [r0, #388]	; 0x184
    964c:	4770      	bx	lr
    964e:	0000      	.short	0x0000
    9650:	20000130 	.word	0x20000130
    9654:	4809      	ldr	r0, [pc, #36]	; (967c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x167c>)
    9656:	b510      	push	{r4, lr}
    9658:	6880      	ldr	r0, [r0, #8]
    965a:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    965e:	2914      	cmp	r1, #20
    9660:	d004      	beq.n	966c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x166c>
    9662:	f240 6189 	movw	r1, #1673	; 0x689
    9666:	2031      	movs	r0, #49	; 0x31
    9668:	f7fa fb4c 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    966c:	2101      	movs	r1, #1
    966e:	f880 10ab 	strb.w	r1, [r0, #171]	; 0xab
    9672:	2115      	movs	r1, #21
    9674:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
    9678:	bd10      	pop	{r4, pc}
    967a:	0000      	.short	0x0000
    967c:	20000130 	.word	0x20000130
    9680:	b510      	push	{r4, lr}
    9682:	4c0a      	ldr	r4, [pc, #40]	; (96ac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16ac>)
    9684:	68a0      	ldr	r0, [r4, #8]
    9686:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
    968a:	07c0      	lsls	r0, r0, #31
    968c:	d008      	beq.n	96a0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16a0>
    968e:	f7fe fd33 	bl	80f8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf8>
    9692:	68a0      	ldr	r0, [r4, #8]
    9694:	f810 1f77 	ldrb.w	r1, [r0, #119]!
    9698:	f021 0101 	bic.w	r1, r1, #1
    969c:	7001      	strb	r1, [r0, #0]
    969e:	bd10      	pop	{r4, pc}
    96a0:	f240 6172 	movw	r1, #1650	; 0x672
    96a4:	2031      	movs	r0, #49	; 0x31
    96a6:	f7fa fb2d 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    96aa:	0000      	.short	0x0000
    96ac:	20000130 	.word	0x20000130
    96b0:	b510      	push	{r4, lr}
    96b2:	4c0a      	ldr	r4, [pc, #40]	; (96dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16dc>)
    96b4:	2301      	movs	r3, #1
    96b6:	2100      	movs	r1, #0
    96b8:	68a0      	ldr	r0, [r4, #8]
    96ba:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    96be:	3068      	adds	r0, #104	; 0x68
    96c0:	f003 fcce 	bl	d060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    96c4:	b120      	cbz	r0, 96d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16d0>
    96c6:	68a1      	ldr	r1, [r4, #8]
    96c8:	201c      	movs	r0, #28
    96ca:	f881 0075 	strb.w	r0, [r1, #117]	; 0x75
    96ce:	bd10      	pop	{r4, pc}
    96d0:	f240 61f7 	movw	r1, #1783	; 0x6f7
    96d4:	2031      	movs	r0, #49	; 0x31
    96d6:	f7fa fb15 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    96da:	0000      	.short	0x0000
    96dc:	20000130 	.word	0x20000130
    96e0:	480a      	ldr	r0, [pc, #40]	; (970c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x170c>)
    96e2:	b510      	push	{r4, lr}
    96e4:	6880      	ldr	r0, [r0, #8]
    96e6:	f890 1077 	ldrb.w	r1, [r0, #119]	; 0x77
    96ea:	f3c1 1201 	ubfx	r2, r1, #4, #2
    96ee:	2a01      	cmp	r2, #1
    96f0:	d004      	beq.n	96fc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16fc>
    96f2:	f240 61fe 	movw	r1, #1790	; 0x6fe
    96f6:	2031      	movs	r0, #49	; 0x31
    96f8:	f7fa fb04 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    96fc:	f021 0110 	bic.w	r1, r1, #16
    9700:	f880 1077 	strb.w	r1, [r0, #119]	; 0x77
    9704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9708:	f7fe bcf6 	b.w	80f8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf8>
    970c:	20000130 	.word	0x20000130
    9710:	b510      	push	{r4, lr}
    9712:	4c0a      	ldr	r4, [pc, #40]	; (973c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x173c>)
    9714:	2301      	movs	r3, #1
    9716:	2100      	movs	r1, #0
    9718:	68a0      	ldr	r0, [r4, #8]
    971a:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    971e:	3068      	adds	r0, #104	; 0x68
    9720:	f003 fc9e 	bl	d060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9724:	b120      	cbz	r0, 9730 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1730>
    9726:	68a1      	ldr	r1, [r4, #8]
    9728:	200e      	movs	r0, #14
    972a:	f881 0075 	strb.w	r0, [r1, #117]	; 0x75
    972e:	bd10      	pop	{r4, pc}
    9730:	f240 61ea 	movw	r1, #1770	; 0x6ea
    9734:	2031      	movs	r0, #49	; 0x31
    9736:	f7fa fae5 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    973a:	0000      	.short	0x0000
    973c:	20000130 	.word	0x20000130
    9740:	4804      	ldr	r0, [pc, #16]	; (9754 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1754>)
    9742:	6880      	ldr	r0, [r0, #8]
    9744:	f810 1f77 	ldrb.w	r1, [r0, #119]!
    9748:	f021 0104 	bic.w	r1, r1, #4
    974c:	7001      	strb	r1, [r0, #0]
    974e:	f7fe bcd3 	b.w	80f8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf8>
    9752:	0000      	.short	0x0000
    9754:	20000130 	.word	0x20000130
    9758:	4809      	ldr	r0, [pc, #36]	; (9780 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1780>)
    975a:	b510      	push	{r4, lr}
    975c:	6880      	ldr	r0, [r0, #8]
    975e:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    9762:	2910      	cmp	r1, #16
    9764:	d004      	beq.n	9770 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1770>
    9766:	f240 6181 	movw	r1, #1665	; 0x681
    976a:	2031      	movs	r0, #49	; 0x31
    976c:	f7fa faca 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9770:	2101      	movs	r1, #1
    9772:	f880 10ab 	strb.w	r1, [r0, #171]	; 0xab
    9776:	2111      	movs	r1, #17
    9778:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
    977c:	bd10      	pop	{r4, pc}
    977e:	0000      	.short	0x0000
    9780:	20000130 	.word	0x20000130
    9784:	b510      	push	{r4, lr}
    9786:	4c0a      	ldr	r4, [pc, #40]	; (97b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x17b0>)
    9788:	2301      	movs	r3, #1
    978a:	2100      	movs	r1, #0
    978c:	68a0      	ldr	r0, [r4, #8]
    978e:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    9792:	3068      	adds	r0, #104	; 0x68
    9794:	f003 fc64 	bl	d060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9798:	b120      	cbz	r0, 97a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x17a4>
    979a:	68a1      	ldr	r1, [r4, #8]
    979c:	201f      	movs	r0, #31
    979e:	f881 0075 	strb.w	r0, [r1, #117]	; 0x75
    97a2:	bd10      	pop	{r4, pc}
    97a4:	f240 710a 	movw	r1, #1802	; 0x70a
    97a8:	2031      	movs	r0, #49	; 0x31
    97aa:	f7fa faab 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    97ae:	0000      	.short	0x0000
    97b0:	20000130 	.word	0x20000130
    97b4:	4808      	ldr	r0, [pc, #32]	; (97d8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x17d8>)
    97b6:	b510      	push	{r4, lr}
    97b8:	6880      	ldr	r0, [r0, #8]
    97ba:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    97be:	2921      	cmp	r1, #33	; 0x21
    97c0:	d005      	beq.n	97ce <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x17ce>
    97c2:	b121      	cbz	r1, 97ce <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x17ce>
    97c4:	f240 7111 	movw	r1, #1809	; 0x711
    97c8:	2031      	movs	r0, #49	; 0x31
    97ca:	f7fa fa9b 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    97ce:	2122      	movs	r1, #34	; 0x22
    97d0:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
    97d4:	bd10      	pop	{r4, pc}
    97d6:	0000      	.short	0x0000
    97d8:	20000130 	.word	0x20000130
    97dc:	4807      	ldr	r0, [pc, #28]	; (97fc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x17fc>)
    97de:	b510      	push	{r4, lr}
    97e0:	6880      	ldr	r0, [r0, #8]
    97e2:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    97e6:	2915      	cmp	r1, #21
    97e8:	d004      	beq.n	97f4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x17f4>
    97ea:	f240 6196 	movw	r1, #1686	; 0x696
    97ee:	2031      	movs	r0, #49	; 0x31
    97f0:	f7fa fa88 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    97f4:	2119      	movs	r1, #25
    97f6:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
    97fa:	bd10      	pop	{r4, pc}
    97fc:	20000130 	.word	0x20000130
    9800:	4807      	ldr	r0, [pc, #28]	; (9820 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1820>)
    9802:	b510      	push	{r4, lr}
    9804:	6880      	ldr	r0, [r0, #8]
    9806:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    980a:	2915      	cmp	r1, #21
    980c:	d004      	beq.n	9818 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1818>
    980e:	f44f 61d2 	mov.w	r1, #1680	; 0x690
    9812:	2031      	movs	r0, #49	; 0x31
    9814:	f7fa fa76 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9818:	2117      	movs	r1, #23
    981a:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
    981e:	bd10      	pop	{r4, pc}
    9820:	20000130 	.word	0x20000130
    9824:	b570      	push	{r4, r5, r6, lr}
    9826:	4d1b      	ldr	r5, [pc, #108]	; (9894 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1894>)
    9828:	68a8      	ldr	r0, [r5, #8]
    982a:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    982e:	291b      	cmp	r1, #27
    9830:	d002      	beq.n	9838 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1838>
    9832:	f44f 61d6 	mov.w	r1, #1712	; 0x6b0
    9836:	e007      	b.n	9848 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1848>
    9838:	2400      	movs	r4, #0
    983a:	f880 40ab 	strb.w	r4, [r0, #171]	; 0xab
    983e:	f890 11bc 	ldrb.w	r1, [r0, #444]	; 0x1bc
    9842:	b121      	cbz	r1, 984e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x184e>
    9844:	f240 61b4 	movw	r1, #1716	; 0x6b4
    9848:	2031      	movs	r0, #49	; 0x31
    984a:	f7fa fa5b 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    984e:	f890 10ac 	ldrb.w	r1, [r0, #172]	; 0xac
    9852:	b141      	cbz	r1, 9866 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1866>
    9854:	f880 40ac 	strb.w	r4, [r0, #172]	; 0xac
    9858:	8801      	ldrh	r1, [r0, #0]
    985a:	f8a0 11c0 	strh.w	r1, [r0, #448]	; 0x1c0
    985e:	f880 41be 	strb.w	r4, [r0, #446]	; 0x1be
    9862:	210c      	movs	r1, #12
    9864:	e008      	b.n	9878 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1878>
    9866:	8801      	ldrh	r1, [r0, #0]
    9868:	f8a0 11c0 	strh.w	r1, [r0, #448]	; 0x1c0
    986c:	f880 41be 	strb.w	r4, [r0, #446]	; 0x1be
    9870:	2101      	movs	r1, #1
    9872:	f880 11c2 	strb.w	r1, [r0, #450]	; 0x1c2
    9876:	210b      	movs	r1, #11
    9878:	f880 11bc 	strb.w	r1, [r0, #444]	; 0x1bc
    987c:	8800      	ldrh	r0, [r0, #0]
    987e:	f7fa fe75 	bl	456c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    9882:	f003 f960 	bl	cb46 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    9886:	f000 f999 	bl	9bbc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    988a:	68a8      	ldr	r0, [r5, #8]
    988c:	f880 4076 	strb.w	r4, [r0, #118]	; 0x76
    9890:	bd70      	pop	{r4, r5, r6, pc}
    9892:	0000      	.short	0x0000
    9894:	20000130 	.word	0x20000130
    9898:	b510      	push	{r4, lr}
    989a:	4c08      	ldr	r4, [pc, #32]	; (98bc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x18bc>)
    989c:	2301      	movs	r3, #1
    989e:	4619      	mov	r1, r3
    98a0:	68a0      	ldr	r0, [r4, #8]
    98a2:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
    98a6:	3068      	adds	r0, #104	; 0x68
    98a8:	f003 fbda 	bl	d060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    98ac:	2800      	cmp	r0, #0
    98ae:	d103      	bne.n	98b8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x18b8>
    98b0:	68a1      	ldr	r1, [r4, #8]
    98b2:	2008      	movs	r0, #8
    98b4:	f881 0078 	strb.w	r0, [r1, #120]	; 0x78
    98b8:	bd10      	pop	{r4, pc}
    98ba:	0000      	.short	0x0000
    98bc:	20000130 	.word	0x20000130
    98c0:	4814      	ldr	r0, [pc, #80]	; (9914 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1914>)
    98c2:	b510      	push	{r4, lr}
    98c4:	68c1      	ldr	r1, [r0, #12]
    98c6:	6880      	ldr	r0, [r0, #8]
    98c8:	7909      	ldrb	r1, [r1, #4]
    98ca:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    98ce:	2a0a      	cmp	r2, #10
    98d0:	d109      	bne.n	98e6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x18e6>
    98d2:	f890 20e2 	ldrb.w	r2, [r0, #226]	; 0xe2
    98d6:	428a      	cmp	r2, r1
    98d8:	d105      	bne.n	98e6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x18e6>
    98da:	2100      	movs	r1, #0
    98dc:	f880 1075 	strb.w	r1, [r0, #117]	; 0x75
    98e0:	f880 10a6 	strb.w	r1, [r0, #166]	; 0xa6
    98e4:	bd10      	pop	{r4, pc}
    98e6:	f890 2077 	ldrb.w	r2, [r0, #119]	; 0x77
    98ea:	0713      	lsls	r3, r2, #28
    98ec:	d507      	bpl.n	98fe <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x18fe>
    98ee:	f022 0108 	bic.w	r1, r2, #8
    98f2:	f880 1077 	strb.w	r1, [r0, #119]	; 0x77
    98f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    98fa:	f7fe bbfd 	b.w	80f8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf8>
    98fe:	29ff      	cmp	r1, #255	; 0xff
    9900:	d004      	beq.n	990c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x190c>
    9902:	f240 616c 	movw	r1, #1644	; 0x66c
    9906:	2031      	movs	r0, #49	; 0x31
    9908:	f7fa f9fc 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    990c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9910:	f7ff be94 	b.w	963c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x163c>
    9914:	20000130 	.word	0x20000130
    9918:	b510      	push	{r4, lr}
    991a:	4c15      	ldr	r4, [pc, #84]	; (9970 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1970>)
    991c:	68a0      	ldr	r0, [r4, #8]
    991e:	f890 10ae 	ldrb.w	r1, [r0, #174]	; 0xae
    9922:	0789      	lsls	r1, r1, #30
    9924:	d411      	bmi.n	994a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x194a>
    9926:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    992a:	2301      	movs	r3, #1
    992c:	2100      	movs	r1, #0
    992e:	3068      	adds	r0, #104	; 0x68
    9930:	f003 fb96 	bl	d060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9934:	b120      	cbz	r0, 9940 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1940>
    9936:	68a1      	ldr	r1, [r4, #8]
    9938:	2006      	movs	r0, #6
    993a:	f881 0075 	strb.w	r0, [r1, #117]	; 0x75
    993e:	e009      	b.n	9954 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1954>
    9940:	f240 61d6 	movw	r1, #1750	; 0x6d6
    9944:	2031      	movs	r0, #49	; 0x31
    9946:	f7fa f9dd 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    994a:	2100      	movs	r1, #0
    994c:	f880 10a6 	strb.w	r1, [r0, #166]	; 0xa6
    9950:	f880 11ac 	strb.w	r1, [r0, #428]	; 0x1ac
    9954:	68a0      	ldr	r0, [r4, #8]
    9956:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
    995a:	0780      	lsls	r0, r0, #30
    995c:	d507      	bpl.n	996e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x196e>
    995e:	f7fe fbcb 	bl	80f8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf8>
    9962:	68a0      	ldr	r0, [r4, #8]
    9964:	f810 1f77 	ldrb.w	r1, [r0, #119]!
    9968:	f021 0102 	bic.w	r1, r1, #2
    996c:	7001      	strb	r1, [r0, #0]
    996e:	bd10      	pop	{r4, pc}
    9970:	20000130 	.word	0x20000130
    9974:	4808      	ldr	r0, [pc, #32]	; (9998 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1998>)
    9976:	b510      	push	{r4, lr}
    9978:	6880      	ldr	r0, [r0, #8]
    997a:	f890 107b 	ldrb.w	r1, [r0, #123]	; 0x7b
    997e:	b941      	cbnz	r1, 9992 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1992>
    9980:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    9984:	2301      	movs	r3, #1
    9986:	2106      	movs	r1, #6
    9988:	3068      	adds	r0, #104	; 0x68
    998a:	f003 fb69 	bl	d060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    998e:	2800      	cmp	r0, #0
    9990:	d000      	beq.n	9994 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1994>
    9992:	2001      	movs	r0, #1
    9994:	bd10      	pop	{r4, pc}
    9996:	0000      	.short	0x0000
    9998:	20000130 	.word	0x20000130
    999c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    999e:	4c54      	ldr	r4, [pc, #336]	; (9af0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1af0>)
    99a0:	4606      	mov	r6, r0
    99a2:	4615      	mov	r5, r2
    99a4:	68a0      	ldr	r0, [r4, #8]
    99a6:	b109      	cbz	r1, 99ac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x19ac>
    99a8:	2100      	movs	r1, #0
    99aa:	e004      	b.n	99b6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x19b6>
    99ac:	f8b0 1106 	ldrh.w	r1, [r0, #262]	; 0x106
    99b0:	f8b0 20f6 	ldrh.w	r2, [r0, #246]	; 0xf6
    99b4:	4411      	add	r1, r2
    99b6:	f8a0 1106 	strh.w	r1, [r0, #262]	; 0x106
    99ba:	f890 1170 	ldrb.w	r1, [r0, #368]	; 0x170
    99be:	b939      	cbnz	r1, 99d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x19d0>
    99c0:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
    99c4:	2301      	movs	r3, #1
    99c6:	4619      	mov	r1, r3
    99c8:	3068      	adds	r0, #104	; 0x68
    99ca:	f003 fb49 	bl	d060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    99ce:	b130      	cbz	r0, 99de <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x19de>
    99d0:	68a0      	ldr	r0, [r4, #8]
    99d2:	f830 1fa0 	ldrh.w	r1, [r0, #160]!
    99d6:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
    99da:	4411      	add	r1, r2
    99dc:	8001      	strh	r1, [r0, #0]
    99de:	68a0      	ldr	r0, [r4, #8]
    99e0:	f890 20a6 	ldrb.w	r2, [r0, #166]	; 0xa6
    99e4:	b132      	cbz	r2, 99f4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x19f4>
    99e6:	f8b0 10a2 	ldrh.w	r1, [r0, #162]	; 0xa2
    99ea:	f8b0 30f6 	ldrh.w	r3, [r0, #246]	; 0xf6
    99ee:	4419      	add	r1, r3
    99f0:	f8a0 10a2 	strh.w	r1, [r0, #162]	; 0xa2
    99f4:	f990 70aa 	ldrsb.w	r7, [r0, #170]	; 0xaa
    99f8:	2f00      	cmp	r7, #0
    99fa:	dd06      	ble.n	9a0a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a0a>
    99fc:	f8b0 10a8 	ldrh.w	r1, [r0, #168]	; 0xa8
    9a00:	f8b0 30f6 	ldrh.w	r3, [r0, #246]	; 0xf6
    9a04:	4419      	add	r1, r3
    9a06:	f8a0 10a8 	strh.w	r1, [r0, #168]	; 0xa8
    9a0a:	2101      	movs	r1, #1
    9a0c:	233d      	movs	r3, #61	; 0x3d
    9a0e:	b116      	cbz	r6, 9a16 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a16>
    9a10:	f880 308d 	strb.w	r3, [r0, #141]	; 0x8d
    9a14:	e013      	b.n	9a3e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a3e>
    9a16:	7824      	ldrb	r4, [r4, #0]
    9a18:	2c02      	cmp	r4, #2
    9a1a:	d00a      	beq.n	9a32 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a32>
    9a1c:	2c01      	cmp	r4, #1
    9a1e:	d012      	beq.n	9a46 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a46>
    9a20:	b345      	cbz	r5, 9a74 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a74>
    9a22:	f100 028c 	add.w	r2, r0, #140	; 0x8c
    9a26:	7011      	strb	r1, [r2, #0]
    9a28:	f015 0f14 	tst.w	r5, #20
    9a2c:	d00e      	beq.n	9a4c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a4c>
    9a2e:	211e      	movs	r1, #30
    9a30:	e018      	b.n	9a64 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a64>
    9a32:	f890 20e6 	ldrb.w	r2, [r0, #230]	; 0xe6
    9a36:	2a06      	cmp	r2, #6
    9a38:	d03e      	beq.n	9ab8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1ab8>
    9a3a:	2216      	movs	r2, #22
    9a3c:	e03c      	b.n	9ab8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1ab8>
    9a3e:	f100 028c 	add.w	r2, r0, #140	; 0x8c
    9a42:	7011      	strb	r1, [r2, #0]
    9a44:	e041      	b.n	9aca <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1aca>
    9a46:	f890 2172 	ldrb.w	r2, [r0, #370]	; 0x172
    9a4a:	e035      	b.n	9ab8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1ab8>
    9a4c:	0729      	lsls	r1, r5, #28
    9a4e:	d502      	bpl.n	9a56 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a56>
    9a50:	f880 308d 	strb.w	r3, [r0, #141]	; 0x8d
    9a54:	e039      	b.n	9aca <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1aca>
    9a56:	06a9      	lsls	r1, r5, #26
    9a58:	d501      	bpl.n	9a5e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a5e>
    9a5a:	2123      	movs	r1, #35	; 0x23
    9a5c:	e002      	b.n	9a64 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a64>
    9a5e:	07a9      	lsls	r1, r5, #30
    9a60:	d003      	beq.n	9a6a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a6a>
    9a62:	212a      	movs	r1, #42	; 0x2a
    9a64:	f880 108d 	strb.w	r1, [r0, #141]	; 0x8d
    9a68:	e02f      	b.n	9aca <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1aca>
    9a6a:	f640 419b 	movw	r1, #3227	; 0xc9b
    9a6e:	2031      	movs	r0, #49	; 0x31
    9a70:	f7fa f948 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9a74:	b12a      	cbz	r2, 9a82 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a82>
    9a76:	f8b0 20a2 	ldrh.w	r2, [r0, #162]	; 0xa2
    9a7a:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
    9a7e:	429a      	cmp	r2, r3
    9a80:	d210      	bcs.n	9aa4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1aa4>
    9a82:	2f00      	cmp	r7, #0
    9a84:	dd05      	ble.n	9a92 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a92>
    9a86:	f8b0 20a8 	ldrh.w	r2, [r0, #168]	; 0xa8
    9a8a:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
    9a8e:	429a      	cmp	r2, r3
    9a90:	d208      	bcs.n	9aa4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1aa4>
    9a92:	f8b0 30a0 	ldrh.w	r3, [r0, #160]	; 0xa0
    9a96:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
    9a9a:	4293      	cmp	r3, r2
    9a9c:	d304      	bcc.n	9aa8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1aa8>
    9a9e:	f890 3170 	ldrb.w	r3, [r0, #368]	; 0x170
    9aa2:	b10b      	cbz	r3, 9aa8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1aa8>
    9aa4:	2222      	movs	r2, #34	; 0x22
    9aa6:	e007      	b.n	9ab8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1ab8>
    9aa8:	f890 3079 	ldrb.w	r3, [r0, #121]	; 0x79
    9aac:	b13b      	cbz	r3, 9abe <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1abe>
    9aae:	f8b0 309c 	ldrh.w	r3, [r0, #156]	; 0x9c
    9ab2:	4293      	cmp	r3, r2
    9ab4:	d309      	bcc.n	9aca <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1aca>
    9ab6:	2208      	movs	r2, #8
    9ab8:	f880 208d 	strb.w	r2, [r0, #141]	; 0x8d
    9abc:	e7bf      	b.n	9a3e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a3e>
    9abe:	f8b0 209c 	ldrh.w	r2, [r0, #156]	; 0x9c
    9ac2:	2a06      	cmp	r2, #6
    9ac4:	d301      	bcc.n	9aca <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1aca>
    9ac6:	223e      	movs	r2, #62	; 0x3e
    9ac8:	e7f6      	b.n	9ab8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1ab8>
    9aca:	f890 108c 	ldrb.w	r1, [r0, #140]	; 0x8c
    9ace:	f88d 1000 	strb.w	r1, [sp]
    9ad2:	9900      	ldr	r1, [sp, #0]
    9ad4:	9100      	str	r1, [sp, #0]
    9ad6:	f89d 1000 	ldrb.w	r1, [sp]
    9ada:	b119      	cbz	r1, 9ae4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1ae4>
    9adc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    9ae0:	f004 bd74 	b.w	e5cc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    9ae4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    9ae8:	2100      	movs	r1, #0
    9aea:	f7fd bb55 	b.w	7198 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    9aee:	0000      	.short	0x0000
    9af0:	20000130 	.word	0x20000130
    9af4:	b570      	push	{r4, r5, r6, lr}
    9af6:	4d2d      	ldr	r5, [pc, #180]	; (9bac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1bac>)
    9af8:	68a8      	ldr	r0, [r5, #8]
    9afa:	f890 1079 	ldrb.w	r1, [r0, #121]	; 0x79
    9afe:	b151      	cbz	r1, 9b16 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b16>
    9b00:	2901      	cmp	r1, #1
    9b02:	d008      	beq.n	9b16 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b16>
    9b04:	2902      	cmp	r1, #2
    9b06:	d009      	beq.n	9b1c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b1c>
    9b08:	2903      	cmp	r1, #3
    9b0a:	d007      	beq.n	9b1c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b1c>
    9b0c:	f640 215f 	movw	r1, #2655	; 0xa5f
    9b10:	2031      	movs	r0, #49	; 0x31
    9b12:	f7fa f8f7 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9b16:	f8b0 10f4 	ldrh.w	r1, [r0, #244]	; 0xf4
    9b1a:	e035      	b.n	9b88 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b88>
    9b1c:	f890 1078 	ldrb.w	r1, [r0, #120]	; 0x78
    9b20:	2908      	cmp	r1, #8
    9b22:	d034      	beq.n	9b8e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b8e>
    9b24:	f8b0 109c 	ldrh.w	r1, [r0, #156]	; 0x9c
    9b28:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
    9b2c:	2400      	movs	r4, #0
    9b2e:	1c8b      	adds	r3, r1, #2
    9b30:	429a      	cmp	r2, r3
    9b32:	d306      	bcc.n	9b42 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b42>
    9b34:	1a51      	subs	r1, r2, r1
    9b36:	1e89      	subs	r1, r1, #2
    9b38:	040c      	lsls	r4, r1, #16
    9b3a:	0c24      	lsrs	r4, r4, #16
    9b3c:	d001      	beq.n	9b42 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b42>
    9b3e:	1e64      	subs	r4, r4, #1
    9b40:	b2a4      	uxth	r4, r4
    9b42:	f890 109a 	ldrb.w	r1, [r0, #154]	; 0x9a
    9b46:	b139      	cbz	r1, 9b58 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b58>
    9b48:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    9b4c:	2301      	movs	r3, #1
    9b4e:	2109      	movs	r1, #9
    9b50:	3068      	adds	r0, #104	; 0x68
    9b52:	f003 fa85 	bl	d060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9b56:	b330      	cbz	r0, 9ba6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1ba6>
    9b58:	f7ff ff0c 	bl	9974 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1974>
    9b5c:	b168      	cbz	r0, 9b7a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b7a>
    9b5e:	68a9      	ldr	r1, [r5, #8]
    9b60:	2000      	movs	r0, #0
    9b62:	3190      	adds	r1, #144	; 0x90
    9b64:	c906      	ldmia	r1, {r1, r2}
    9b66:	1c8b      	adds	r3, r1, #2
    9b68:	429a      	cmp	r2, r3
    9b6a:	d303      	bcc.n	9b74 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b74>
    9b6c:	1a50      	subs	r0, r2, r1
    9b6e:	1e80      	subs	r0, r0, #2
    9b70:	d000      	beq.n	9b74 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b74>
    9b72:	1e40      	subs	r0, r0, #1
    9b74:	42a0      	cmp	r0, r4
    9b76:	d200      	bcs.n	9b7a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b7a>
    9b78:	b284      	uxth	r4, r0
    9b7a:	b10c      	cbz	r4, 9b80 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b80>
    9b7c:	1e64      	subs	r4, r4, #1
    9b7e:	b2a4      	uxth	r4, r4
    9b80:	68a8      	ldr	r0, [r5, #8]
    9b82:	f8b0 10f4 	ldrh.w	r1, [r0, #244]	; 0xf4
    9b86:	4421      	add	r1, r4
    9b88:	f8a0 10f0 	strh.w	r1, [r0, #240]	; 0xf0
    9b8c:	bd70      	pop	{r4, r5, r6, pc}
    9b8e:	f8b0 109c 	ldrh.w	r1, [r0, #156]	; 0x9c
    9b92:	2903      	cmp	r1, #3
    9b94:	d3bf      	bcc.n	9b16 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b16>
    9b96:	f830 1f6c 	ldrh.w	r1, [r0, #108]!
    9b9a:	8e42      	ldrh	r2, [r0, #50]	; 0x32
    9b9c:	4411      	add	r1, r2
    9b9e:	1c49      	adds	r1, r1, #1
    9ba0:	f8a0 1084 	strh.w	r1, [r0, #132]	; 0x84
    9ba4:	bd70      	pop	{r4, r5, r6, pc}
    9ba6:	2400      	movs	r4, #0
    9ba8:	e7ea      	b.n	9b80 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b80>
    9baa:	0000      	.short	0x0000
    9bac:	20000130 	.word	0x20000130

00009bb0 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    9bb0:	4901      	ldr	r1, [pc, #4]	; (9bb8 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    9bb2:	7008      	strb	r0, [r1, #0]
    9bb4:	4770      	bx	lr
    9bb6:	0000      	.short	0x0000
    9bb8:	200002af 	.word	0x200002af

00009bbc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>:
    9bbc:	4801      	ldr	r0, [pc, #4]	; (9bc4 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI+0x8>)
    9bbe:	7800      	ldrb	r0, [r0, #0]
    9bc0:	f7f9 beda 	b.w	3978 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    9bc4:	200002af 	.word	0x200002af

00009bc8 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    9bc8:	4903      	ldr	r1, [pc, #12]	; (9bd8 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    9bca:	888a      	ldrh	r2, [r1, #4]
    9bcc:	8002      	strh	r2, [r0, #0]
    9bce:	7889      	ldrb	r1, [r1, #2]
    9bd0:	7081      	strb	r1, [r0, #2]
    9bd2:	2000      	movs	r0, #0
    9bd4:	4770      	bx	lr
    9bd6:	0000      	.short	0x0000
    9bd8:	20000dc0 	.word	0x20000dc0

00009bdc <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    9bdc:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    9bde:	460c      	mov	r4, r1
    9be0:	4605      	mov	r5, r0
    9be2:	8800      	ldrh	r0, [r0, #0]
    9be4:	4669      	mov	r1, sp
    9be6:	f003 fa11 	bl	d00c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    9bea:	2200      	movs	r2, #0
    9bec:	b128      	cbz	r0, 9bfa <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x1e>
    9bee:	f8c4 2002 	str.w	r2, [r4, #2]
    9bf2:	71a2      	strb	r2, [r4, #6]
    9bf4:	8022      	strh	r2, [r4, #0]
    9bf6:	2002      	movs	r0, #2
    9bf8:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    9bfa:	9901      	ldr	r1, [sp, #4]
    9bfc:	f111 0168 	adds.w	r1, r1, #104	; 0x68
    9c00:	f881 204e 	strb.w	r2, [r1, #78]	; 0x4e
    9c04:	f8d1 0016 	ldr.w	r0, [r1, #22]
    9c08:	f8c4 0002 	str.w	r0, [r4, #2]
    9c0c:	7e88      	ldrb	r0, [r1, #26]
    9c0e:	71a0      	strb	r0, [r4, #6]
    9c10:	8828      	ldrh	r0, [r5, #0]
    9c12:	8020      	strh	r0, [r4, #0]
    9c14:	f891 004e 	ldrb.w	r0, [r1, #78]	; 0x4e
    9c18:	2800      	cmp	r0, #0
    9c1a:	d1f1      	bne.n	9c00 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x24>
    9c1c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
	...

00009c20 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    9c20:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    9c24:	460d      	mov	r5, r1
    9c26:	4606      	mov	r6, r0
    9c28:	f000 fb90 	bl	a34c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    9c2c:	f3c0 2000 	ubfx	r0, r0, #8, #1
    9c30:	b1e0      	cbz	r0, 9c6c <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x4c>
    9c32:	8830      	ldrh	r0, [r6, #0]
    9c34:	4669      	mov	r1, sp
    9c36:	f003 f9e9 	bl	d00c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    9c3a:	2800      	cmp	r0, #0
    9c3c:	d114      	bne.n	9c68 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>
    9c3e:	f8dd 4004 	ldr.w	r4, [sp, #4]
    9c42:	2700      	movs	r7, #0
    9c44:	f884 7064 	strb.w	r7, [r4, #100]	; 0x64
    9c48:	f814 0f62 	ldrb.w	r0, [r4, #98]!
    9c4c:	f005 fa39 	bl	f0c2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x38>
    9c50:	70a8      	strb	r0, [r5, #2]
    9c52:	7860      	ldrb	r0, [r4, #1]
    9c54:	f005 fa35 	bl	f0c2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x38>
    9c58:	70e8      	strb	r0, [r5, #3]
    9c5a:	78a0      	ldrb	r0, [r4, #2]
    9c5c:	3c62      	subs	r4, #98	; 0x62
    9c5e:	2800      	cmp	r0, #0
    9c60:	d1f0      	bne.n	9c44 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x24>
    9c62:	8830      	ldrh	r0, [r6, #0]
    9c64:	8028      	strh	r0, [r5, #0]
    9c66:	2000      	movs	r0, #0
    9c68:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    9c6c:	2001      	movs	r0, #1
    9c6e:	e7fb      	b.n	9c68 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>

00009c70 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
    9c70:	b51c      	push	{r2, r3, r4, lr}
    9c72:	8800      	ldrh	r0, [r0, #0]
    9c74:	4669      	mov	r1, sp
    9c76:	f003 f9c9 	bl	d00c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    9c7a:	2800      	cmp	r0, #0
    9c7c:	d10b      	bne.n	9c96 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x26>
    9c7e:	480b      	ldr	r0, [pc, #44]	; (9cac <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x3c>)
    9c80:	7800      	ldrb	r0, [r0, #0]
    9c82:	b188      	cbz	r0, 9ca8 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x38>
    9c84:	9801      	ldr	r0, [sp, #4]
    9c86:	f005 fb9a 	bl	f3be <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x334>
    9c8a:	b128      	cbz	r0, 9c98 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x28>
    9c8c:	9801      	ldr	r0, [sp, #4]
    9c8e:	f890 01ad 	ldrb.w	r0, [r0, #429]	; 0x1ad
    9c92:	b118      	cbz	r0, 9c9c <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2c>
    9c94:	203a      	movs	r0, #58	; 0x3a
    9c96:	bd1c      	pop	{r2, r3, r4, pc}
    9c98:	2002      	movs	r0, #2
    9c9a:	bd1c      	pop	{r2, r3, r4, pc}
    9c9c:	9901      	ldr	r1, [sp, #4]
    9c9e:	2001      	movs	r0, #1
    9ca0:	f881 01ad 	strb.w	r0, [r1, #429]	; 0x1ad
    9ca4:	2000      	movs	r0, #0
    9ca6:	bd1c      	pop	{r2, r3, r4, pc}
    9ca8:	2011      	movs	r0, #17
    9caa:	bd1c      	pop	{r2, r3, r4, pc}
    9cac:	2000020c 	.word	0x2000020c

00009cb0 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    9cb0:	b510      	push	{r4, lr}
    9cb2:	4604      	mov	r4, r0
    9cb4:	f005 fb7a 	bl	f3ac <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x322>
    9cb8:	b130      	cbz	r0, 9cc8 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x18>
    9cba:	4804      	ldr	r0, [pc, #16]	; (9ccc <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x1c>)
    9cbc:	8881      	ldrh	r1, [r0, #4]
    9cbe:	8021      	strh	r1, [r4, #0]
    9cc0:	88c0      	ldrh	r0, [r0, #6]
    9cc2:	8060      	strh	r0, [r4, #2]
    9cc4:	2000      	movs	r0, #0
    9cc6:	bd10      	pop	{r4, pc}
    9cc8:	2001      	movs	r0, #1
    9cca:	bd10      	pop	{r4, pc}
    9ccc:	20000214 	.word	0x20000214

00009cd0 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    9cd0:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    9cd2:	4605      	mov	r5, r0
    9cd4:	f000 fb3a 	bl	a34c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    9cd8:	f3c0 2000 	ubfx	r0, r0, #8, #1
    9cdc:	b310      	cbz	r0, 9d24 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x54>
    9cde:	2400      	movs	r4, #0
    9ce0:	a802      	add	r0, sp, #8
    9ce2:	f88d 4004 	strb.w	r4, [sp, #4]
    9ce6:	f88d 4008 	strb.w	r4, [sp, #8]
    9cea:	9000      	str	r0, [sp, #0]
    9cec:	78aa      	ldrb	r2, [r5, #2]
    9cee:	7869      	ldrb	r1, [r5, #1]
    9cf0:	7828      	ldrb	r0, [r5, #0]
    9cf2:	ab01      	add	r3, sp, #4
    9cf4:	f005 fbb5 	bl	f462 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3d8>
    9cf8:	2800      	cmp	r0, #0
    9cfa:	d112      	bne.n	9d22 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x52>
    9cfc:	f89d 0004 	ldrb.w	r0, [sp, #4]
    9d00:	f005 fab5 	bl	f26e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e4>
    9d04:	b180      	cbz	r0, 9d28 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
    9d06:	f89d 0008 	ldrb.w	r0, [sp, #8]
    9d0a:	f005 fab0 	bl	f26e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e4>
    9d0e:	b158      	cbz	r0, 9d28 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
    9d10:	4806      	ldr	r0, [pc, #24]	; (9d2c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x5c>)
    9d12:	f89d 1004 	ldrb.w	r1, [sp, #4]
    9d16:	7481      	strb	r1, [r0, #18]
    9d18:	f89d 1008 	ldrb.w	r1, [sp, #8]
    9d1c:	74c1      	strb	r1, [r0, #19]
    9d1e:	8284      	strh	r4, [r0, #20]
    9d20:	2000      	movs	r0, #0
    9d22:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    9d24:	2001      	movs	r0, #1
    9d26:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    9d28:	2011      	movs	r0, #17
    9d2a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    9d2c:	20000dc0 	.word	0x20000dc0

00009d30 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    9d30:	7801      	ldrb	r1, [r0, #0]
    9d32:	b179      	cbz	r1, 9d54 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    9d34:	7841      	ldrb	r1, [r0, #1]
    9d36:	b169      	cbz	r1, 9d54 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    9d38:	8841      	ldrh	r1, [r0, #2]
    9d3a:	291b      	cmp	r1, #27
    9d3c:	d30a      	bcc.n	9d54 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    9d3e:	8881      	ldrh	r1, [r0, #4]
    9d40:	291b      	cmp	r1, #27
    9d42:	d307      	bcc.n	9d54 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    9d44:	4904      	ldr	r1, [pc, #16]	; (9d58 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    9d46:	6802      	ldr	r2, [r0, #0]
    9d48:	f8c1 2002 	str.w	r2, [r1, #2]
    9d4c:	8880      	ldrh	r0, [r0, #4]
    9d4e:	80c8      	strh	r0, [r1, #6]
    9d50:	2000      	movs	r0, #0
    9d52:	4770      	bx	lr
    9d54:	2012      	movs	r0, #18
    9d56:	4770      	bx	lr
    9d58:	20000dc0 	.word	0x20000dc0

00009d5c <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    9d5c:	6800      	ldr	r0, [r0, #0]
    9d5e:	f240 41e2 	movw	r1, #1250	; 0x4e2
    9d62:	4288      	cmp	r0, r1
    9d64:	d303      	bcc.n	9d6e <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    9d66:	4903      	ldr	r1, [pc, #12]	; (9d74 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    9d68:	6088      	str	r0, [r1, #8]
    9d6a:	2000      	movs	r0, #0
    9d6c:	4770      	bx	lr
    9d6e:	2012      	movs	r0, #18
    9d70:	4770      	bx	lr
    9d72:	0000      	.short	0x0000
    9d74:	20000dc0 	.word	0x20000dc0

00009d78 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    9d78:	4a03      	ldr	r2, [pc, #12]	; (9d88 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    9d7a:	e9d2 1200 	ldrd	r1, r2, [r2]
    9d7e:	6001      	str	r1, [r0, #0]
    9d80:	6042      	str	r2, [r0, #4]
    9d82:	2000      	movs	r0, #0
    9d84:	4770      	bx	lr
    9d86:	0000      	.short	0x0000
    9d88:	0000a1ec 	.word	0x0000a1ec

00009d8c <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>:
    9d8c:	b510      	push	{r4, lr}
    9d8e:	2005      	movs	r0, #5
    9d90:	f000 fad2 	bl	a338 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    9d94:	f7fd feb4 	bl	7b00 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>
    9d98:	4902      	ldr	r1, [pc, #8]	; (9da4 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x18>)
    9d9a:	4801      	ldr	r0, [pc, #4]	; (9da0 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x14>)
    9d9c:	6048      	str	r0, [r1, #4]
    9d9e:	bd10      	pop	{r4, pc}
    9da0:	00009e2d 	.word	0x00009e2d
    9da4:	2000020c 	.word	0x2000020c

00009da8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    9da8:	b510      	push	{r4, lr}
    9daa:	f003 f883 	bl	ceb4 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    9dae:	f7fb fc55 	bl	565c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    9db2:	480f      	ldr	r0, [pc, #60]	; (9df0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x48>)
    9db4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9db8:	4b0e      	ldr	r3, [pc, #56]	; (9df4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4c>)
    9dba:	81c1      	strh	r1, [r0, #14]
    9dbc:	8201      	strh	r1, [r0, #16]
    9dbe:	2100      	movs	r1, #0
    9dc0:	75c1      	strb	r1, [r0, #23]
    9dc2:	8301      	strh	r1, [r0, #24]
    9dc4:	8001      	strh	r1, [r0, #0]
    9dc6:	221b      	movs	r2, #27
    9dc8:	801a      	strh	r2, [r3, #0]
    9dca:	f44f 74a4 	mov.w	r4, #328	; 0x148
    9dce:	805c      	strh	r4, [r3, #2]
    9dd0:	809a      	strh	r2, [r3, #4]
    9dd2:	80dc      	strh	r4, [r3, #6]
    9dd4:	7481      	strb	r1, [r0, #18]
    9dd6:	74c1      	strb	r1, [r0, #19]
    9dd8:	2303      	movs	r3, #3
    9dda:	7083      	strb	r3, [r0, #2]
    9ddc:	2302      	movs	r3, #2
    9dde:	70c3      	strb	r3, [r0, #3]
    9de0:	8082      	strh	r2, [r0, #4]
    9de2:	80c2      	strh	r2, [r0, #6]
    9de4:	f640 62a6 	movw	r2, #3750	; 0xea6
    9de8:	6082      	str	r2, [r0, #8]
    9dea:	7581      	strb	r1, [r0, #22]
    9dec:	7301      	strb	r1, [r0, #12]
    9dee:	bd10      	pop	{r4, pc}
    9df0:	20000dc0 	.word	0x20000dc0
    9df4:	20000214 	.word	0x20000214

00009df8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    9df8:	b510      	push	{r4, lr}
    9dfa:	b158      	cbz	r0, 9e14 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1c>
    9dfc:	490a      	ldr	r1, [pc, #40]	; (9e28 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x30>)
    9dfe:	780a      	ldrb	r2, [r1, #0]
    9e00:	b16a      	cbz	r2, 9e1e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x26>
    9e02:	2200      	movs	r2, #0
    9e04:	7042      	strb	r2, [r0, #1]
    9e06:	2303      	movs	r3, #3
    9e08:	7003      	strb	r3, [r0, #0]
    9e0a:	2301      	movs	r3, #1
    9e0c:	7103      	strb	r3, [r0, #4]
    9e0e:	700a      	strb	r2, [r1, #0]
    9e10:	4618      	mov	r0, r3
    9e12:	bd10      	pop	{r4, pc}
    9e14:	f44f 51be 	mov.w	r1, #6080	; 0x17c0
    9e18:	2039      	movs	r0, #57	; 0x39
    9e1a:	f7f9 ff73 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9e1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9e22:	f7fb bf97 	b.w	5d54 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA>
    9e26:	0000      	.short	0x0000
    9e28:	20000dc0 	.word	0x20000dc0
    9e2c:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9e30:	4692      	mov	sl, r2
    9e32:	460f      	mov	r7, r1
    9e34:	4681      	mov	r9, r0
    9e36:	f005 fab9 	bl	f3ac <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x322>
    9e3a:	2800      	cmp	r0, #0
    9e3c:	d063      	beq.n	9f06 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    9e3e:	4933      	ldr	r1, [pc, #204]	; (9f0c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x114>)
    9e40:	f8b9 204c 	ldrh.w	r2, [r9, #76]	; 0x4c
    9e44:	f8b9 604a 	ldrh.w	r6, [r9, #74]	; 0x4a
    9e48:	8808      	ldrh	r0, [r1, #0]
    9e4a:	4290      	cmp	r0, r2
    9e4c:	d300      	bcc.n	9e50 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x58>
    9e4e:	4610      	mov	r0, r2
    9e50:	4680      	mov	r8, r0
    9e52:	8888      	ldrh	r0, [r1, #4]
    9e54:	42b0      	cmp	r0, r6
    9e56:	d200      	bcs.n	9e5a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x62>
    9e58:	4606      	mov	r6, r0
    9e5a:	884c      	ldrh	r4, [r1, #2]
    9e5c:	f640 0048 	movw	r0, #2120	; 0x848
    9e60:	4284      	cmp	r4, r0
    9e62:	d300      	bcc.n	9e66 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x6e>
    9e64:	4604      	mov	r4, r0
    9e66:	88cd      	ldrh	r5, [r1, #6]
    9e68:	4285      	cmp	r5, r0
    9e6a:	d300      	bcc.n	9e6e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x76>
    9e6c:	4605      	mov	r5, r0
    9e6e:	4284      	cmp	r4, r0
    9e70:	d300      	bcc.n	9e74 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x7c>
    9e72:	4604      	mov	r4, r0
    9e74:	f44f 71a4 	mov.w	r1, #328	; 0x148
    9e78:	2e1b      	cmp	r6, #27
    9e7a:	d001      	beq.n	9e80 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x88>
    9e7c:	428d      	cmp	r5, r1
    9e7e:	d104      	bne.n	9e8a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x92>
    9e80:	f1b8 0f1b 	cmp.w	r8, #27
    9e84:	d03f      	beq.n	9f06 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    9e86:	428c      	cmp	r4, r1
    9e88:	d03d      	beq.n	9f06 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    9e8a:	466a      	mov	r2, sp
    9e8c:	4651      	mov	r1, sl
    9e8e:	4648      	mov	r0, r9
    9e90:	f005 fa10 	bl	f2b4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x22a>
    9e94:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    9e98:	4641      	mov	r1, r8
    9e9a:	4540      	cmp	r0, r8
    9e9c:	d900      	bls.n	9ea0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa8>
    9e9e:	4608      	mov	r0, r1
    9ea0:	80f8      	strh	r0, [r7, #6]
    9ea2:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    9ea6:	42a1      	cmp	r1, r4
    9ea8:	d800      	bhi.n	9eac <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xb4>
    9eaa:	460c      	mov	r4, r1
    9eac:	813c      	strh	r4, [r7, #8]
    9eae:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    9eb2:	42b1      	cmp	r1, r6
    9eb4:	d800      	bhi.n	9eb8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc0>
    9eb6:	460e      	mov	r6, r1
    9eb8:	807e      	strh	r6, [r7, #2]
    9eba:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    9ebe:	42a9      	cmp	r1, r5
    9ec0:	d900      	bls.n	9ec4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    9ec2:	4629      	mov	r1, r5
    9ec4:	80b9      	strh	r1, [r7, #4]
    9ec6:	2201      	movs	r2, #1
    9ec8:	703a      	strb	r2, [r7, #0]
    9eca:	381b      	subs	r0, #27
    9ecc:	28e0      	cmp	r0, #224	; 0xe0
    9ece:	d902      	bls.n	9ed6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xde>
    9ed0:	f640 419b 	movw	r1, #3227	; 0xc9b
    9ed4:	e014      	b.n	9f00 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x108>
    9ed6:	3e1b      	subs	r6, #27
    9ed8:	2ee0      	cmp	r6, #224	; 0xe0
    9eda:	d902      	bls.n	9ee2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xea>
    9edc:	f640 419d 	movw	r1, #3229	; 0xc9d
    9ee0:	e00e      	b.n	9f00 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x108>
    9ee2:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    9ee6:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    9eea:	4284      	cmp	r4, r0
    9eec:	d902      	bls.n	9ef4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xfc>
    9eee:	f640 419f 	movw	r1, #3231	; 0xc9f
    9ef2:	e005      	b.n	9f00 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x108>
    9ef4:	f5a1 71a4 	sub.w	r1, r1, #328	; 0x148
    9ef8:	4281      	cmp	r1, r0
    9efa:	d904      	bls.n	9f06 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    9efc:	f640 41a1 	movw	r1, #3233	; 0xca1
    9f00:	2039      	movs	r0, #57	; 0x39
    9f02:	f7f9 feff 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9f06:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9f0a:	0000      	.short	0x0000
    9f0c:	20000214 	.word	0x20000214

00009f10 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
    9f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9f14:	b088      	sub	sp, #32
    9f16:	460c      	mov	r4, r1
    9f18:	4606      	mov	r6, r0
    9f1a:	f003 fe88 	bl	dc2e <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    9f1e:	b198      	cbz	r0, 9f48 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x38>
    9f20:	4630      	mov	r0, r6
    9f22:	f003 fe77 	bl	dc14 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    9f26:	b130      	cbz	r0, 9f36 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x26>
    9f28:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    9f2c:	2012      	movs	r0, #18
    9f2e:	2900      	cmp	r1, #0
    9f30:	d00b      	beq.n	9f4a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    9f32:	2980      	cmp	r1, #128	; 0x80
    9f34:	d809      	bhi.n	9f4a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    9f36:	4630      	mov	r0, r6
    9f38:	f003 fe57 	bl	dbea <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>
    9f3c:	b140      	cbz	r0, 9f50 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    9f3e:	4630      	mov	r0, r6
    9f40:	f003 fdde 	bl	db00 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
    9f44:	b130      	cbz	r0, 9f54 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x44>
    9f46:	e009      	b.n	9f5c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x4c>
    9f48:	2042      	movs	r0, #66	; 0x42
    9f4a:	b008      	add	sp, #32
    9f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9f50:	200c      	movs	r0, #12
    9f52:	e7fa      	b.n	9f4a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    9f54:	4630      	mov	r0, r6
    9f56:	f003 fe57 	bl	dc08 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
    9f5a:	b3a8      	cbz	r0, 9fc8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xb8>
    9f5c:	4630      	mov	r0, r6
    9f5e:	f004 f86a 	bl	e036 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    9f62:	2800      	cmp	r0, #0
    9f64:	d1f4      	bne.n	9f50 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    9f66:	4630      	mov	r0, r6
    9f68:	f003 fde5 	bl	db36 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
    9f6c:	2800      	cmp	r0, #0
    9f6e:	d1ef      	bne.n	9f50 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    9f70:	4630      	mov	r0, r6
    9f72:	f7fc f90d 	bl	6190 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
    9f76:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    9f7a:	f242 7110 	movw	r1, #10000	; 0x2710
    9f7e:	fb00 f801 	mul.w	r8, r0, r1
    9f82:	78e1      	ldrb	r1, [r4, #3]
    9f84:	4630      	mov	r0, r6
    9f86:	f003 fe27 	bl	dbd8 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
    9f8a:	4630      	mov	r0, r6
    9f8c:	f003 fe3e 	bl	dc0c <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    9f90:	b1e8      	cbz	r0, 9fce <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xbe>
    9f92:	2200      	movs	r2, #0
    9f94:	4611      	mov	r1, r2
    9f96:	a801      	add	r0, sp, #4
    9f98:	f7fa f92c 	bl	41f4 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    9f9c:	0004      	movs	r4, r0
    9f9e:	d06a      	beq.n	a076 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x166>
    9fa0:	2100      	movs	r1, #0
    9fa2:	f7fb fdc1 	bl	5b28 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    9fa6:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    9faa:	8020      	strh	r0, [r4, #0]
    9fac:	4621      	mov	r1, r4
    9fae:	4630      	mov	r0, r6
    9fb0:	f003 fe50 	bl	dc54 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
    9fb4:	f005 f9fa 	bl	f3ac <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x322>
    9fb8:	4d3a      	ldr	r5, [pc, #232]	; (a0a4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x194>)
    9fba:	2800      	cmp	r0, #0
    9fbc:	f104 0024 	add.w	r0, r4, #36	; 0x24
    9fc0:	d00f      	beq.n	9fe2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xd2>
    9fc2:	88aa      	ldrh	r2, [r5, #4]
    9fc4:	88e9      	ldrh	r1, [r5, #6]
    9fc6:	e00e      	b.n	9fe6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xd6>
    9fc8:	e7ff      	b.n	9fca <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xba>
    9fca:	2012      	movs	r0, #18
    9fcc:	e7bd      	b.n	9f4a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    9fce:	4642      	mov	r2, r8
    9fd0:	2100      	movs	r1, #0
    9fd2:	4630      	mov	r0, r6
    9fd4:	f7fc fffc 	bl	6fd0 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA>
    9fd8:	2800      	cmp	r0, #0
    9fda:	d0b6      	beq.n	9f4a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    9fdc:	f241 31fd 	movw	r1, #5117	; 0x13fd
    9fe0:	e053      	b.n	a08a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    9fe2:	221b      	movs	r2, #27
    9fe4:	4611      	mov	r1, r2
    9fe6:	84c2      	strh	r2, [r0, #38]	; 0x26
    9fe8:	8501      	strh	r1, [r0, #40]	; 0x28
    9fea:	68a8      	ldr	r0, [r5, #8]
    9fec:	6260      	str	r0, [r4, #36]	; 0x24
    9fee:	f641 574c 	movw	r7, #7500	; 0x1d4c
    9ff2:	4630      	mov	r0, r6
    9ff4:	f003 fe12 	bl	dc1c <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    9ff8:	b910      	cbnz	r0, a000 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xf0>
    9ffa:	4630      	mov	r0, r6
    9ffc:	f003 fe28 	bl	dc50 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    a000:	6067      	str	r7, [r4, #4]
    a002:	8821      	ldrh	r1, [r4, #0]
    a004:	f8ad 1008 	strh.w	r1, [sp, #8]
    a008:	7ca9      	ldrb	r1, [r5, #18]
    a00a:	f88d 100a 	strb.w	r1, [sp, #10]
    a00e:	7ce9      	ldrb	r1, [r5, #19]
    a010:	f88d 100b 	strb.w	r1, [sp, #11]
    a014:	8aa9      	ldrh	r1, [r5, #20]
    a016:	f8ad 100c 	strh.w	r1, [sp, #12]
    a01a:	a905      	add	r1, sp, #20
    a01c:	9100      	str	r1, [sp, #0]
    a01e:	2001      	movs	r0, #1
    a020:	ab04      	add	r3, sp, #16
    a022:	aa02      	add	r2, sp, #8
    a024:	4621      	mov	r1, r4
    a026:	f005 f982 	bl	f32e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2a4>
    a02a:	b140      	cbz	r0, a03e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x12e>
    a02c:	2100      	movs	r1, #0
    a02e:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    a032:	f7fa f909 	bl	4248 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    a036:	b1f0      	cbz	r0, a076 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x166>
    a038:	f241 4148 	movw	r1, #5192	; 0x1448
    a03c:	e025      	b.n	a08a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    a03e:	f89d 0010 	ldrb.w	r0, [sp, #16]
    a042:	f88d 0018 	strb.w	r0, [sp, #24]
    a046:	f89d 0014 	ldrb.w	r0, [sp, #20]
    a04a:	f88d 0019 	strb.w	r0, [sp, #25]
    a04e:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    a052:	f8ad 001a 	strh.w	r0, [sp, #26]
    a056:	a906      	add	r1, sp, #24
    a058:	4620      	mov	r0, r4
    a05a:	f003 f896 	bl	d18a <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    a05e:	78e8      	ldrb	r0, [r5, #3]
    a060:	9000      	str	r0, [sp, #0]
    a062:	78ab      	ldrb	r3, [r5, #2]
    a064:	88ea      	ldrh	r2, [r5, #6]
    a066:	88a9      	ldrh	r1, [r5, #4]
    a068:	8820      	ldrh	r0, [r4, #0]
    a06a:	f7fa f9b9 	bl	43e0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    a06e:	b120      	cbz	r0, a07a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x16a>
    a070:	f241 4153 	movw	r1, #5203	; 0x1453
    a074:	e009      	b.n	a08a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    a076:	2009      	movs	r0, #9
    a078:	e767      	b.n	9f4a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    a07a:	4642      	mov	r2, r8
    a07c:	4621      	mov	r1, r4
    a07e:	4630      	mov	r0, r6
    a080:	f7fc ffa6 	bl	6fd0 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA>
    a084:	b120      	cbz	r0, a090 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x180>
    a086:	f241 4155 	movw	r1, #5205	; 0x1455
    a08a:	2039      	movs	r0, #57	; 0x39
    a08c:	f7f9 fe3a 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a090:	4805      	ldr	r0, [pc, #20]	; (a0a8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x198>)
    a092:	6843      	ldr	r3, [r0, #4]
    a094:	b123      	cbz	r3, a0a0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x190>
    a096:	2200      	movs	r2, #0
    a098:	f504 71ce 	add.w	r1, r4, #412	; 0x19c
    a09c:	4620      	mov	r0, r4
    a09e:	4798      	blx	r3
    a0a0:	2000      	movs	r0, #0
    a0a2:	e752      	b.n	9f4a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    a0a4:	20000dc0 	.word	0x20000dc0
    a0a8:	2000020c 	.word	0x2000020c
    a0ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a0b0:	b088      	sub	sp, #32
    a0b2:	4604      	mov	r4, r0
    a0b4:	8800      	ldrh	r0, [r0, #0]
    a0b6:	a906      	add	r1, sp, #24
    a0b8:	f002 ffa8 	bl	d00c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    a0bc:	2800      	cmp	r0, #0
    a0be:	d147      	bne.n	a150 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    a0c0:	9807      	ldr	r0, [sp, #28]
    a0c2:	2700      	movs	r7, #0
    a0c4:	f890 11e0 	ldrb.w	r1, [r0, #480]	; 0x1e0
    a0c8:	f88d 1008 	strb.w	r1, [sp, #8]
    a0cc:	9902      	ldr	r1, [sp, #8]
    a0ce:	9102      	str	r1, [sp, #8]
    a0d0:	f89d 1008 	ldrb.w	r1, [sp, #8]
    a0d4:	f88d 100c 	strb.w	r1, [sp, #12]
    a0d8:	f890 1077 	ldrb.w	r1, [r0, #119]	; 0x77
    a0dc:	3068      	adds	r0, #104	; 0x68
    a0de:	0689      	lsls	r1, r1, #26
    a0e0:	d502      	bpl.n	a0e8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1d8>
    a0e2:	f89d 100c 	ldrb.w	r1, [sp, #12]
    a0e6:	b149      	cbz	r1, a0fc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1ec>
    a0e8:	f05f 0100 	movs.w	r1, #0
    a0ec:	f88d 1004 	strb.w	r1, [sp, #4]
    a0f0:	2105      	movs	r1, #5
    a0f2:	304c      	adds	r0, #76	; 0x4c
    a0f4:	f004 faa6 	bl	e644 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    a0f8:	b110      	cbz	r0, a100 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1f0>
    a0fa:	e004      	b.n	a106 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1f6>
    a0fc:	2101      	movs	r1, #1
    a0fe:	e7f5      	b.n	a0ec <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1dc>
    a100:	f89d 0004 	ldrb.w	r0, [sp, #4]
    a104:	b318      	cbz	r0, a14e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x23e>
    a106:	8921      	ldrh	r1, [r4, #8]
    a108:	88e0      	ldrh	r0, [r4, #6]
    a10a:	f005 f8c5 	bl	f298 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20e>
    a10e:	2800      	cmp	r0, #0
    a110:	d11e      	bne.n	a150 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    a112:	88a1      	ldrh	r1, [r4, #4]
    a114:	8860      	ldrh	r0, [r4, #2]
    a116:	f005 f8bf 	bl	f298 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20e>
    a11a:	2800      	cmp	r0, #0
    a11c:	d118      	bne.n	a150 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    a11e:	8921      	ldrh	r1, [r4, #8]
    a120:	88e0      	ldrh	r0, [r4, #6]
    a122:	f005 f8af 	bl	f284 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
    a126:	2800      	cmp	r0, #0
    a128:	d112      	bne.n	a150 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    a12a:	88a1      	ldrh	r1, [r4, #4]
    a12c:	8860      	ldrh	r0, [r4, #2]
    a12e:	f005 f8a9 	bl	f284 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
    a132:	0006      	movs	r6, r0
    a134:	d10c      	bne.n	a150 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    a136:	9807      	ldr	r0, [sp, #28]
    a138:	f04f 0801 	mov.w	r8, #1
    a13c:	f500 75ce 	add.w	r5, r0, #412	; 0x19c
    a140:	f880 819d 	strb.w	r8, [r0, #413]	; 0x19d
    a144:	f89d 100c 	ldrb.w	r1, [sp, #12]
    a148:	b129      	cbz	r1, a156 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x246>
    a14a:	263a      	movs	r6, #58	; 0x3a
    a14c:	e02f      	b.n	a1ae <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x29e>
    a14e:	201a      	movs	r0, #26
    a150:	b008      	add	sp, #32
    a152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a156:	4639      	mov	r1, r7
    a158:	aa03      	add	r2, sp, #12
    a15a:	f005 f8ab 	bl	f2b4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x22a>
    a15e:	8861      	ldrh	r1, [r4, #2]
    a160:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    a164:	4281      	cmp	r1, r0
    a166:	d200      	bcs.n	a16a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x25a>
    a168:	4608      	mov	r0, r1
    a16a:	80e8      	strh	r0, [r5, #6]
    a16c:	88a1      	ldrh	r1, [r4, #4]
    a16e:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    a172:	4281      	cmp	r1, r0
    a174:	d200      	bcs.n	a178 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x268>
    a176:	4608      	mov	r0, r1
    a178:	8128      	strh	r0, [r5, #8]
    a17a:	88e2      	ldrh	r2, [r4, #6]
    a17c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    a180:	428a      	cmp	r2, r1
    a182:	d200      	bcs.n	a186 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x276>
    a184:	4611      	mov	r1, r2
    a186:	8069      	strh	r1, [r5, #2]
    a188:	8922      	ldrh	r2, [r4, #8]
    a18a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    a18e:	428a      	cmp	r2, r1
    a190:	d200      	bcs.n	a194 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x284>
    a192:	4611      	mov	r1, r2
    a194:	f640 0248 	movw	r2, #2120	; 0x848
    a198:	80a9      	strh	r1, [r5, #4]
    a19a:	4291      	cmp	r1, r2
    a19c:	d300      	bcc.n	a1a0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x290>
    a19e:	4611      	mov	r1, r2
    a1a0:	80a9      	strh	r1, [r5, #4]
    a1a2:	4290      	cmp	r0, r2
    a1a4:	d200      	bcs.n	a1a8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x298>
    a1a6:	4602      	mov	r2, r0
    a1a8:	812a      	strh	r2, [r5, #8]
    a1aa:	f885 8000 	strb.w	r8, [r5]
    a1ae:	706f      	strb	r7, [r5, #1]
    a1b0:	4630      	mov	r0, r6
    a1b2:	e7cd      	b.n	a150 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    a1b4:	b510      	push	{r4, lr}
    a1b6:	4604      	mov	r4, r0
    a1b8:	88c1      	ldrh	r1, [r0, #6]
    a1ba:	8880      	ldrh	r0, [r0, #4]
    a1bc:	f005 f86c 	bl	f298 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20e>
    a1c0:	2800      	cmp	r0, #0
    a1c2:	d10f      	bne.n	a1e4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d4>
    a1c4:	8861      	ldrh	r1, [r4, #2]
    a1c6:	8820      	ldrh	r0, [r4, #0]
    a1c8:	f005 f866 	bl	f298 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20e>
    a1cc:	2800      	cmp	r0, #0
    a1ce:	d109      	bne.n	a1e4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d4>
    a1d0:	4805      	ldr	r0, [pc, #20]	; (a1e8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d8>)
    a1d2:	88a1      	ldrh	r1, [r4, #4]
    a1d4:	8081      	strh	r1, [r0, #4]
    a1d6:	8821      	ldrh	r1, [r4, #0]
    a1d8:	8001      	strh	r1, [r0, #0]
    a1da:	88e1      	ldrh	r1, [r4, #6]
    a1dc:	80c1      	strh	r1, [r0, #6]
    a1de:	8861      	ldrh	r1, [r4, #2]
    a1e0:	8041      	strh	r1, [r0, #2]
    a1e2:	2000      	movs	r0, #0
    a1e4:	bd10      	pop	{r4, pc}
    a1e6:	0000      	.short	0x0000
    a1e8:	20000214 	.word	0x20000214
    a1ec:	0b125b0b 	.word	0x0b125b0b
    a1f0:	125b0059 	.word	0x125b0059
    a1f4:	05060708 	.word	0x05060708
    a1f8:	00020304 	.word	0x00020304
    a1fc:	f0f4f8fc 	.word	0xf0f4f8fc
    a200:	0304d8ec 	.word	0x0304d8ec
    a204:	f4f8fc00 	.word	0xf4f8fc00
    a208:	00d8ecf0 	.word	0x00d8ecf0

0000a20c <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    a20c:	b510      	push	{r4, lr}
    a20e:	f7ff fccf 	bl	9bb0 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    a212:	4804      	ldr	r0, [pc, #16]	; (a224 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x18>)
    a214:	6840      	ldr	r0, [r0, #4]
    a216:	f005 f99c 	bl	f552 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x3e>
    a21a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a21e:	f004 becd 	b.w	efbc <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    a222:	0000      	.short	0x0000
    a224:	2000021c 	.word	0x2000021c

0000a228 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    a228:	b510      	push	{r4, lr}
    a22a:	4c07      	ldr	r4, [pc, #28]	; (a248 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x20>)
    a22c:	68a0      	ldr	r0, [r4, #8]
    a22e:	f005 f990 	bl	f552 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x3e>
    a232:	68e0      	ldr	r0, [r4, #12]
    a234:	f005 f98d 	bl	f552 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x3e>
    a238:	f002 fe3c 	bl	ceb4 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    a23c:	f7fb fa0e 	bl	565c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    a240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a244:	f7ff bdb0 	b.w	9da8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    a248:	2000021c 	.word	0x2000021c

0000a24c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
    a24c:	b500      	push	{lr}
    a24e:	4905      	ldr	r1, [pc, #20]	; (a264 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
    a250:	4805      	ldr	r0, [pc, #20]	; (a268 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    a252:	f005 f95f 	bl	f514 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    a256:	4804      	ldr	r0, [pc, #16]	; (a268 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    a258:	4904      	ldr	r1, [pc, #16]	; (a26c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
    a25a:	1d00      	adds	r0, r0, #4
    a25c:	f85d eb04 	ldr.w	lr, [sp], #4
    a260:	f005 b958 	b.w	f514 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    a264:	2000022c 	.word	0x2000022c
    a268:	20000220 	.word	0x20000220
    a26c:	20000234 	.word	0x20000234

0000a270 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>:
    a270:	b500      	push	{lr}
    a272:	4908      	ldr	r1, [pc, #32]	; (a294 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x24>)
    a274:	4808      	ldr	r0, [pc, #32]	; (a298 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    a276:	f005 f94d 	bl	f514 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    a27a:	4807      	ldr	r0, [pc, #28]	; (a298 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    a27c:	4907      	ldr	r1, [pc, #28]	; (a29c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x2c>)
    a27e:	1d00      	adds	r0, r0, #4
    a280:	f005 f948 	bl	f514 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    a284:	4804      	ldr	r0, [pc, #16]	; (a298 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    a286:	4906      	ldr	r1, [pc, #24]	; (a2a0 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x30>)
    a288:	3008      	adds	r0, #8
    a28a:	f85d eb04 	ldr.w	lr, [sp], #4
    a28e:	f005 b941 	b.w	f514 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    a292:	0000      	.short	0x0000
    a294:	20000258 	.word	0x20000258
    a298:	20000220 	.word	0x20000220
    a29c:	20000260 	.word	0x20000260
    a2a0:	20000250 	.word	0x20000250

0000a2a4 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
    a2a4:	4801      	ldr	r0, [pc, #4]	; (a2ac <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
    a2a6:	7800      	ldrb	r0, [r0, #0]
    a2a8:	4770      	bx	lr
    a2aa:	0000      	.short	0x0000
    a2ac:	2000021c 	.word	0x2000021c
    a2b0:	b510      	push	{r4, lr}
    a2b2:	f7fc f8e3 	bl	647c <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
    a2b6:	f7fc ff23 	bl	7100 <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY>
    a2ba:	4805      	ldr	r0, [pc, #20]	; (a2d0 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x2c>)
    a2bc:	f7fc f8c4 	bl	6448 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
    a2c0:	4905      	ldr	r1, [pc, #20]	; (a2d8 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x34>)
    a2c2:	4804      	ldr	r0, [pc, #16]	; (a2d4 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x30>)
    a2c4:	6008      	str	r0, [r1, #0]
    a2c6:	4906      	ldr	r1, [pc, #24]	; (a2e0 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x3c>)
    a2c8:	4804      	ldr	r0, [pc, #16]	; (a2dc <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x38>)
    a2ca:	6008      	str	r0, [r1, #0]
    a2cc:	bd10      	pop	{r4, pc}
    a2ce:	0000      	.short	0x0000
    a2d0:	2000118b 	.word	0x2000118b
    a2d4:	00006251 	.word	0x00006251
    a2d8:	2000023c 	.word	0x2000023c
    a2dc:	00005df5 	.word	0x00005df5
    a2e0:	20000240 	.word	0x20000240
    a2e4:	490c      	ldr	r1, [pc, #48]	; (a318 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x74>)
    a2e6:	b510      	push	{r4, lr}
    a2e8:	2001      	movs	r0, #1
    a2ea:	7008      	strb	r0, [r1, #0]
    a2ec:	f7fc f8f6 	bl	64dc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>
    a2f0:	f7fd fd5e 	bl	7db0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>
    a2f4:	f002 fdcc 	bl	ce90 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    a2f8:	4808      	ldr	r0, [pc, #32]	; (a31c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x78>)
    a2fa:	f7fa fc3d 	bl	4b78 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
    a2fe:	2000      	movs	r0, #0
    a300:	f7f9 feea 	bl	40d8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    a304:	4907      	ldr	r1, [pc, #28]	; (a324 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x80>)
    a306:	4806      	ldr	r0, [pc, #24]	; (a320 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x7c>)
    a308:	6008      	str	r0, [r1, #0]
    a30a:	4908      	ldr	r1, [pc, #32]	; (a32c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x88>)
    a30c:	4806      	ldr	r0, [pc, #24]	; (a328 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x84>)
    a30e:	6008      	str	r0, [r1, #0]
    a310:	4908      	ldr	r1, [pc, #32]	; (a334 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x90>)
    a312:	4807      	ldr	r0, [pc, #28]	; (a330 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8c>)
    a314:	6008      	str	r0, [r1, #0]
    a316:	bd10      	pop	{r4, pc}
    a318:	2000021c 	.word	0x2000021c
    a31c:	2000118b 	.word	0x2000118b
    a320:	00004b25 	.word	0x00004b25
    a324:	2000024c 	.word	0x2000024c
    a328:	00007b31 	.word	0x00007b31
    a32c:	20000248 	.word	0x20000248
    a330:	00005e69 	.word	0x00005e69
    a334:	20000244 	.word	0x20000244

0000a338 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    a338:	2101      	movs	r1, #1
    a33a:	4081      	lsls	r1, r0
    a33c:	4802      	ldr	r0, [pc, #8]	; (a348 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x10>)
    a33e:	6802      	ldr	r2, [r0, #0]
    a340:	4311      	orrs	r1, r2
    a342:	6001      	str	r1, [r0, #0]
    a344:	4770      	bx	lr
    a346:	0000      	.short	0x0000
    a348:	20000268 	.word	0x20000268

0000a34c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    a34c:	4801      	ldr	r0, [pc, #4]	; (a354 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    a34e:	6800      	ldr	r0, [r0, #0]
    a350:	4770      	bx	lr
    a352:	0000      	.short	0x0000
    a354:	20000268 	.word	0x20000268

0000a358 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    a358:	4803      	ldr	r0, [pc, #12]	; (a368 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x10>)
    a35a:	8800      	ldrh	r0, [r0, #0]
    a35c:	f3c0 2000 	ubfx	r0, r0, #8, #1
    a360:	0040      	lsls	r0, r0, #1
    a362:	1c40      	adds	r0, r0, #1
    a364:	4770      	bx	lr
    a366:	0000      	.short	0x0000
    a368:	20000268 	.word	0x20000268

0000a36c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    a36c:	b570      	push	{r4, r5, r6, lr}
    a36e:	4605      	mov	r5, r0
    a370:	4616      	mov	r6, r2
    a372:	460c      	mov	r4, r1
    a374:	2002      	movs	r0, #2
    a376:	f000 f999 	bl	a6ac <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a37a:	4906      	ldr	r1, [pc, #24]	; (a394 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    a37c:	2001      	movs	r0, #1
    a37e:	1ef6      	subs	r6, r6, #3
    a380:	7008      	strb	r0, [r1, #0]
    a382:	4805      	ldr	r0, [pc, #20]	; (a398 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    a384:	6006      	str	r6, [r0, #0]
    a386:	4804      	ldr	r0, [pc, #16]	; (a398 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    a388:	3808      	subs	r0, #8
    a38a:	6005      	str	r5, [r0, #0]
    a38c:	1f00      	subs	r0, r0, #4
    a38e:	6004      	str	r4, [r0, #0]
    a390:	bd70      	pop	{r4, r5, r6, pc}
    a392:	0000      	.short	0x0000
    a394:	200002b0 	.word	0x200002b0
    a398:	4000f510 	.word	0x4000f510

0000a39c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    a39c:	b510      	push	{r4, lr}
    a39e:	4c0c      	ldr	r4, [pc, #48]	; (a3d0 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    a3a0:	7820      	ldrb	r0, [r4, #0]
    a3a2:	b180      	cbz	r0, a3c6 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    a3a4:	490b      	ldr	r1, [pc, #44]	; (a3d4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    a3a6:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    a3aa:	6008      	str	r0, [r1, #0]
    a3ac:	f000 f86a 	bl	a484 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    a3b0:	2100      	movs	r1, #0
    a3b2:	b120      	cbz	r0, a3be <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    a3b4:	2001      	movs	r0, #1
    a3b6:	7060      	strb	r0, [r4, #1]
    a3b8:	4807      	ldr	r0, [pc, #28]	; (a3d8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    a3ba:	6800      	ldr	r0, [r0, #0]
    a3bc:	e001      	b.n	a3c2 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    a3be:	7061      	strb	r1, [r4, #1]
    a3c0:	2010      	movs	r0, #16
    a3c2:	70a0      	strb	r0, [r4, #2]
    a3c4:	7021      	strb	r1, [r4, #0]
    a3c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a3ca:	2000      	movs	r0, #0
    a3cc:	f000 b96e 	b.w	a6ac <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a3d0:	200002b0 	.word	0x200002b0
    a3d4:	4001f508 	.word	0x4001f508
    a3d8:	4000f400 	.word	0x4000f400

0000a3dc <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    a3dc:	b510      	push	{r4, lr}
    a3de:	2002      	movs	r0, #2
    a3e0:	f000 f964 	bl	a6ac <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a3e4:	4904      	ldr	r1, [pc, #16]	; (a3f8 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    a3e6:	2001      	movs	r0, #1
    a3e8:	7008      	strb	r0, [r1, #0]
    a3ea:	f000 f859 	bl	a4a0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    a3ee:	4903      	ldr	r1, [pc, #12]	; (a3fc <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    a3f0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    a3f4:	6008      	str	r0, [r1, #0]
    a3f6:	bd10      	pop	{r4, pc}
    a3f8:	200002b0 	.word	0x200002b0
    a3fc:	4001f504 	.word	0x4001f504

0000a400 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    a400:	4803      	ldr	r0, [pc, #12]	; (a410 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    a402:	2100      	movs	r1, #0
    a404:	7001      	strb	r1, [r0, #0]
    a406:	7041      	strb	r1, [r0, #1]
    a408:	2110      	movs	r1, #16
    a40a:	7081      	strb	r1, [r0, #2]
    a40c:	4770      	bx	lr
    a40e:	0000      	.short	0x0000
    a410:	200002b0 	.word	0x200002b0

0000a414 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    a414:	4807      	ldr	r0, [pc, #28]	; (a434 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    a416:	b510      	push	{r4, lr}
    a418:	7801      	ldrb	r1, [r0, #0]
    a41a:	b141      	cbz	r1, a42e <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    a41c:	f000 f832 	bl	a484 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    a420:	b118      	cbz	r0, a42a <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    a422:	4805      	ldr	r0, [pc, #20]	; (a438 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    a424:	6800      	ldr	r0, [r0, #0]
    a426:	b2c0      	uxtb	r0, r0
    a428:	bd10      	pop	{r4, pc}
    a42a:	2010      	movs	r0, #16
    a42c:	bd10      	pop	{r4, pc}
    a42e:	7880      	ldrb	r0, [r0, #2]
    a430:	bd10      	pop	{r4, pc}
    a432:	0000      	.short	0x0000
    a434:	200002b0 	.word	0x200002b0
    a438:	4000f400 	.word	0x4000f400

0000a43c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    a43c:	4808      	ldr	r0, [pc, #32]	; (a460 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    a43e:	b510      	push	{r4, lr}
    a440:	7801      	ldrb	r1, [r0, #0]
    a442:	b159      	cbz	r1, a45c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    a444:	4807      	ldr	r0, [pc, #28]	; (a464 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    a446:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    a44a:	b128      	cbz	r0, a458 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    a44c:	f000 f80c 	bl	a468 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    a450:	2800      	cmp	r0, #0
    a452:	d000      	beq.n	a456 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    a454:	2001      	movs	r0, #1
    a456:	bd10      	pop	{r4, pc}
    a458:	2002      	movs	r0, #2
    a45a:	bd10      	pop	{r4, pc}
    a45c:	7840      	ldrb	r0, [r0, #1]
    a45e:	bd10      	pop	{r4, pc}
    a460:	200002b0 	.word	0x200002b0
    a464:	4000f000 	.word	0x4000f000
    a468:	4805      	ldr	r0, [pc, #20]	; (a480 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    a46a:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    a46e:	b111      	cbz	r1, a476 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    a470:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    a474:	b108      	cbz	r0, a47a <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    a476:	2000      	movs	r0, #0
    a478:	4770      	bx	lr
    a47a:	2001      	movs	r0, #1
    a47c:	4770      	bx	lr
    a47e:	0000      	.short	0x0000
    a480:	4000f000 	.word	0x4000f000
    a484:	4805      	ldr	r0, [pc, #20]	; (a49c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    a486:	b510      	push	{r4, lr}
    a488:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    a48c:	b120      	cbz	r0, a498 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    a48e:	f7ff ffeb 	bl	a468 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    a492:	b108      	cbz	r0, a498 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    a494:	2001      	movs	r0, #1
    a496:	bd10      	pop	{r4, pc}
    a498:	2000      	movs	r0, #0
    a49a:	bd10      	pop	{r4, pc}
    a49c:	4000f000 	.word	0x4000f000
    a4a0:	4804      	ldr	r0, [pc, #16]	; (a4b4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    a4a2:	2100      	movs	r1, #0
    a4a4:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    a4a8:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    a4ac:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    a4b0:	4770      	bx	lr
    a4b2:	0000      	.short	0x0000
    a4b4:	4000f000 	.word	0x4000f000

0000a4b8 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>:
    a4b8:	4a08      	ldr	r2, [pc, #32]	; (a4dc <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x24>)
    a4ba:	b510      	push	{r4, lr}
    a4bc:	e9c2 0102 	strd	r0, r1, [r2, #8]
    a4c0:	4907      	ldr	r1, [pc, #28]	; (a4e0 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x28>)
    a4c2:	4610      	mov	r0, r2
    a4c4:	f7f9 fb04 	bl	3ad0 <mpsl_fem_lna_configuration_set>
    a4c8:	2800      	cmp	r0, #0
    a4ca:	d005      	beq.n	a4d8 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    a4cc:	1c40      	adds	r0, r0, #1
    a4ce:	d003      	beq.n	a4d8 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    a4d0:	217d      	movs	r1, #125	; 0x7d
    a4d2:	2040      	movs	r0, #64	; 0x40
    a4d4:	f7f9 fc16 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a4d8:	bd10      	pop	{r4, pc}
    a4da:	0000      	.short	0x0000
    a4dc:	2000026c 	.word	0x2000026c
    a4e0:	0000a510 	.word	0x0000a510

0000a4e4 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>:
    a4e4:	4a08      	ldr	r2, [pc, #32]	; (a508 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x24>)
    a4e6:	b510      	push	{r4, lr}
    a4e8:	e9c2 0102 	strd	r0, r1, [r2, #8]
    a4ec:	4907      	ldr	r1, [pc, #28]	; (a50c <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x28>)
    a4ee:	4610      	mov	r0, r2
    a4f0:	f7f9 fafa 	bl	3ae8 <mpsl_fem_pa_configuration_set>
    a4f4:	2800      	cmp	r0, #0
    a4f6:	d005      	beq.n	a504 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    a4f8:	1c40      	adds	r0, r0, #1
    a4fa:	d003      	beq.n	a504 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    a4fc:	2172      	movs	r1, #114	; 0x72
    a4fe:	2040      	movs	r0, #64	; 0x40
    a500:	f7f9 fc00 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a504:	bd10      	pop	{r4, pc}
    a506:	0000      	.short	0x0000
    a508:	2000026c 	.word	0x2000026c
    a50c:	0000a510 	.word	0x0000a510
    a510:	00000001 	.word	0x00000001
    a514:	40001110 	.word	0x40001110
	...

0000a528 <sym_2A6IJT7MGQ7OBCRC2X2OJJKRLO2X7VBUN6GSTWQ>:
    a528:	b570      	push	{r4, r5, r6, lr}
    a52a:	4606      	mov	r6, r0
    a52c:	4614      	mov	r4, r2
    a52e:	460d      	mov	r5, r1
    a530:	2001      	movs	r0, #1
    a532:	f000 f8bb 	bl	a6ac <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a536:	4803      	ldr	r0, [pc, #12]	; (a544 <sym_2A6IJT7MGQ7OBCRC2X2OJJKRLO2X7VBUN6GSTWQ+0x1c>)
    a538:	6006      	str	r6, [r0, #0]
    a53a:	1d00      	adds	r0, r0, #4
    a53c:	6004      	str	r4, [r0, #0]
    a53e:	1d00      	adds	r0, r0, #4
    a540:	6005      	str	r5, [r0, #0]
    a542:	bd70      	pop	{r4, r5, r6, pc}
    a544:	4000f508 	.word	0x4000f508

0000a548 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    a548:	480a      	ldr	r0, [pc, #40]	; (a574 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x2c>)
    a54a:	7801      	ldrb	r1, [r0, #0]
    a54c:	b171      	cbz	r1, a56c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x24>
    a54e:	4a0a      	ldr	r2, [pc, #40]	; (a578 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x30>)
    a550:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
    a554:	6011      	str	r1, [r2, #0]
    a556:	4909      	ldr	r1, [pc, #36]	; (a57c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x34>)
    a558:	f8d1 2104 	ldr.w	r2, [r1, #260]	; 0x104
    a55c:	2100      	movs	r1, #0
    a55e:	b11a      	cbz	r2, a568 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x20>
    a560:	4a07      	ldr	r2, [pc, #28]	; (a580 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x38>)
    a562:	6812      	ldr	r2, [r2, #0]
    a564:	7042      	strb	r2, [r0, #1]
    a566:	e000      	b.n	a56a <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x22>
    a568:	7041      	strb	r1, [r0, #1]
    a56a:	7001      	strb	r1, [r0, #0]
    a56c:	2000      	movs	r0, #0
    a56e:	f000 b89d 	b.w	a6ac <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a572:	0000      	.short	0x0000
    a574:	200002b3 	.word	0x200002b3
    a578:	4001f508 	.word	0x4001f508
    a57c:	4000f000 	.word	0x4000f000
    a580:	4000f400 	.word	0x4000f400

0000a584 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A>:
    a584:	b570      	push	{r4, r5, r6, lr}
    a586:	4604      	mov	r4, r0
    a588:	4816      	ldr	r0, [pc, #88]	; (a5e4 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x60>)
    a58a:	460e      	mov	r6, r1
    a58c:	2501      	movs	r5, #1
    a58e:	7005      	strb	r5, [r0, #0]
    a590:	4915      	ldr	r1, [pc, #84]	; (a5e8 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x64>)
    a592:	ea44 4002 	orr.w	r0, r4, r2, lsl #16
    a596:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
    a59a:	6008      	str	r0, [r1, #0]
    a59c:	f001 fb96 	bl	bccc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    a5a0:	b930      	cbnz	r0, a5b0 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x2c>
    a5a2:	4811      	ldr	r0, [pc, #68]	; (a5e8 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x64>)
    a5a4:	3014      	adds	r0, #20
    a5a6:	6801      	ldr	r1, [r0, #0]
    a5a8:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    a5ac:	4331      	orrs	r1, r6
    a5ae:	6001      	str	r1, [r0, #0]
    a5b0:	490e      	ldr	r1, [pc, #56]	; (a5ec <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x68>)
    a5b2:	2200      	movs	r2, #0
    a5b4:	f8c1 2104 	str.w	r2, [r1, #260]	; 0x104
    a5b8:	4b0d      	ldr	r3, [pc, #52]	; (a5f0 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x6c>)
    a5ba:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    a5be:	6018      	str	r0, [r3, #0]
    a5c0:	b12c      	cbz	r4, a5ce <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x4a>
    a5c2:	2c01      	cmp	r4, #1
    a5c4:	d007      	beq.n	a5d6 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x52>
    a5c6:	2185      	movs	r1, #133	; 0x85
    a5c8:	203c      	movs	r0, #60	; 0x3c
    a5ca:	f7f9 fb9b 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a5ce:	f8c1 5200 	str.w	r5, [r1, #512]	; 0x200
    a5d2:	600d      	str	r5, [r1, #0]
    a5d4:	bd70      	pop	{r4, r5, r6, pc}
    a5d6:	f8c1 2200 	str.w	r2, [r1, #512]	; 0x200
    a5da:	600d      	str	r5, [r1, #0]
    a5dc:	4904      	ldr	r1, [pc, #16]	; (a5f0 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x6c>)
    a5de:	1f09      	subs	r1, r1, #4
    a5e0:	6008      	str	r0, [r1, #0]
    a5e2:	bd70      	pop	{r4, r5, r6, pc}
    a5e4:	200002b3 	.word	0x200002b3
    a5e8:	4000f504 	.word	0x4000f504
    a5ec:	4000f000 	.word	0x4000f000
    a5f0:	4001f508 	.word	0x4001f508

0000a5f4 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    a5f4:	4802      	ldr	r0, [pc, #8]	; (a600 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    a5f6:	2100      	movs	r1, #0
    a5f8:	7001      	strb	r1, [r0, #0]
    a5fa:	7041      	strb	r1, [r0, #1]
    a5fc:	4770      	bx	lr
    a5fe:	0000      	.short	0x0000
    a600:	200002b3 	.word	0x200002b3

0000a604 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    a604:	4806      	ldr	r0, [pc, #24]	; (a620 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1c>)
    a606:	7801      	ldrb	r1, [r0, #0]
    a608:	b141      	cbz	r1, a61c <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x18>
    a60a:	4806      	ldr	r0, [pc, #24]	; (a624 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>)
    a60c:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    a610:	2800      	cmp	r0, #0
    a612:	d002      	beq.n	a61a <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x16>
    a614:	4804      	ldr	r0, [pc, #16]	; (a628 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x24>)
    a616:	6800      	ldr	r0, [r0, #0]
    a618:	b2c0      	uxtb	r0, r0
    a61a:	4770      	bx	lr
    a61c:	7840      	ldrb	r0, [r0, #1]
    a61e:	4770      	bx	lr
    a620:	200002b3 	.word	0x200002b3
    a624:	4000f000 	.word	0x4000f000
    a628:	4000f400 	.word	0x4000f400

0000a62c <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    a62c:	4901      	ldr	r1, [pc, #4]	; (a634 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    a62e:	2001      	movs	r0, #1
    a630:	6088      	str	r0, [r1, #8]
    a632:	4770      	bx	lr
    a634:	4000f000 	.word	0x4000f000

0000a638 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    a638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a63c:	2800      	cmp	r0, #0
    a63e:	d02c      	beq.n	a69a <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x62>
    a640:	4817      	ldr	r0, [pc, #92]	; (a6a0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x68>)
    a642:	7800      	ldrb	r0, [r0, #0]
    a644:	b1b0      	cbz	r0, a674 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x3c>
    a646:	4d17      	ldr	r5, [pc, #92]	; (a6a4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6c>)
    a648:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    a64c:	2800      	cmp	r0, #0
    a64e:	d124      	bne.n	a69a <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x62>
    a650:	2702      	movs	r7, #2
    a652:	f8c5 7304 	str.w	r7, [r5, #772]	; 0x304
    a656:	4c14      	ldr	r4, [pc, #80]	; (a6a8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>)
    a658:	6820      	ldr	r0, [r4, #0]
    a65a:	43c0      	mvns	r0, r0
    a65c:	f340 1600 	sbfx	r6, r0, #4, #1
    a660:	6820      	ldr	r0, [r4, #0]
    a662:	f040 0010 	orr.w	r0, r0, #16
    a666:	6020      	str	r0, [r4, #0]
    a668:	f44f 4800 	mov.w	r8, #32768	; 0x8000
    a66c:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    a670:	1c76      	adds	r6, r6, #1
    a672:	e007      	b.n	a684 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x4c>
    a674:	21fd      	movs	r1, #253	; 0xfd
    a676:	203c      	movs	r0, #60	; 0x3c
    a678:	f7f9 fb44 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a67c:	f8c9 8280 	str.w	r8, [r9, #640]	; 0x280
    a680:	f7f9 f9d0 	bl	3a24 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    a684:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    a688:	2800      	cmp	r0, #0
    a68a:	d0f7      	beq.n	a67c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x44>
    a68c:	b91e      	cbnz	r6, a696 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x5e>
    a68e:	6820      	ldr	r0, [r4, #0]
    a690:	f020 0010 	bic.w	r0, r0, #16
    a694:	6020      	str	r0, [r4, #0]
    a696:	f8c5 7308 	str.w	r7, [r5, #776]	; 0x308
    a69a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a69e:	0000      	.short	0x0000
    a6a0:	200002b3 	.word	0x200002b3
    a6a4:	4000f000 	.word	0x4000f000
    a6a8:	e000ed10 	.word	0xe000ed10

0000a6ac <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    a6ac:	b510      	push	{r4, lr}
    a6ae:	4604      	mov	r4, r0
    a6b0:	f000 f822 	bl	a6f8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
    a6b4:	2c00      	cmp	r4, #0
    a6b6:	d017      	beq.n	a6e8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>
    a6b8:	4a0c      	ldr	r2, [pc, #48]	; (a6ec <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    a6ba:	480c      	ldr	r0, [pc, #48]	; (a6ec <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    a6bc:	490c      	ldr	r1, [pc, #48]	; (a6f0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    a6be:	3214      	adds	r2, #20
    a6c0:	4b0c      	ldr	r3, [pc, #48]	; (a6f4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>)
    a6c2:	2c01      	cmp	r4, #1
    a6c4:	d005      	beq.n	a6d2 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x26>
    a6c6:	2c02      	cmp	r4, #2
    a6c8:	d008      	beq.n	a6dc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x30>
    a6ca:	217d      	movs	r1, #125	; 0x7d
    a6cc:	203d      	movs	r0, #61	; 0x3d
    a6ce:	f7f9 fb19 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a6d2:	2402      	movs	r4, #2
    a6d4:	6004      	str	r4, [r0, #0]
    a6d6:	6011      	str	r1, [r2, #0]
    a6d8:	0620      	lsls	r0, r4, #24
    a6da:	e004      	b.n	a6e6 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3a>
    a6dc:	2403      	movs	r4, #3
    a6de:	6004      	str	r4, [r0, #0]
    a6e0:	6011      	str	r1, [r2, #0]
    a6e2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    a6e6:	6018      	str	r0, [r3, #0]
    a6e8:	bd10      	pop	{r4, pc}
    a6ea:	0000      	.short	0x0000
    a6ec:	4000f500 	.word	0x4000f500
    a6f0:	2000128d 	.word	0x2000128d
    a6f4:	4001f504 	.word	0x4001f504
    a6f8:	4804      	ldr	r0, [pc, #16]	; (a70c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    a6fa:	2100      	movs	r1, #0
    a6fc:	6001      	str	r1, [r0, #0]
    a6fe:	6001      	str	r1, [r0, #0]
    a700:	4903      	ldr	r1, [pc, #12]	; (a710 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    a702:	f04f 7020 	mov.w	r0, #41943040	; 0x2800000
    a706:	6008      	str	r0, [r1, #0]
    a708:	4770      	bx	lr
    a70a:	0000      	.short	0x0000
    a70c:	4000f500 	.word	0x4000f500
    a710:	4001f508 	.word	0x4001f508

0000a714 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    a714:	4805      	ldr	r0, [pc, #20]	; (a72c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    a716:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    a71a:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    a71e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    a722:	4903      	ldr	r1, [pc, #12]	; (a730 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x1c>)
    a724:	2000      	movs	r0, #0
    a726:	6008      	str	r0, [r1, #0]
    a728:	4770      	bx	lr
    a72a:	0000      	.short	0x0000
    a72c:	40001000 	.word	0x40001000
    a730:	40001560 	.word	0x40001560

0000a734 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    a734:	4904      	ldr	r1, [pc, #16]	; (a748 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    a736:	6008      	str	r0, [r1, #0]
    a738:	4804      	ldr	r0, [pc, #16]	; (a74c <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x18>)
    a73a:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    a73e:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    a742:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    a746:	4770      	bx	lr
    a748:	40001560 	.word	0x40001560
    a74c:	40001000 	.word	0x40001000

0000a750 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>:
    a750:	4801      	ldr	r0, [pc, #4]	; (a758 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I+0x8>)
    a752:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
    a756:	4770      	bx	lr
    a758:	20000dfc 	.word	0x20000dfc

0000a75c <sym_ZBDJ2Y5I72NG5GLPCDB32P7JVZVIRY3EZS6BW2Y>:
    a75c:	4a01      	ldr	r2, [pc, #4]	; (a764 <sym_ZBDJ2Y5I72NG5GLPCDB32P7JVZVIRY3EZS6BW2Y+0x8>)
    a75e:	7051      	strb	r1, [r2, #1]
    a760:	7010      	strb	r0, [r2, #0]
    a762:	4770      	bx	lr
    a764:	20000dfc 	.word	0x20000dfc

0000a768 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    a768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a76a:	4c1e      	ldr	r4, [pc, #120]	; (a7e4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x7c>)
    a76c:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    a770:	2710      	movs	r7, #16
    a772:	f3c0 1600 	ubfx	r6, r0, #4, #1
    a776:	f8c4 7308 	str.w	r7, [r4, #776]	; 0x308
    a77a:	2002      	movs	r0, #2
    a77c:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    a780:	4819      	ldr	r0, [pc, #100]	; (a7e8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x80>)
    a782:	2500      	movs	r5, #0
    a784:	491a      	ldr	r1, [pc, #104]	; (a7f0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x88>)
    a786:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    a78a:	4818      	ldr	r0, [pc, #96]	; (a7ec <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x84>)
    a78c:	6008      	str	r0, [r1, #0]
    a78e:	4819      	ldr	r0, [pc, #100]	; (a7f4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8c>)
    a790:	6800      	ldr	r0, [r0, #0]
    a792:	b1b0      	cbz	r0, a7c2 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5a>
    a794:	20ff      	movs	r0, #255	; 0xff
    a796:	f88d 0000 	strb.w	r0, [sp]
    a79a:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    a79e:	2001      	movs	r0, #1
    a7a0:	6120      	str	r0, [r4, #16]
    a7a2:	e004      	b.n	a7ae <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x46>
    a7a4:	f89d 0000 	ldrb.w	r0, [sp]
    a7a8:	1e40      	subs	r0, r0, #1
    a7aa:	f88d 0000 	strb.w	r0, [sp]
    a7ae:	f89d 0000 	ldrb.w	r0, [sp]
    a7b2:	b118      	cbz	r0, a7bc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x54>
    a7b4:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
    a7b8:	2800      	cmp	r0, #0
    a7ba:	d0f3      	beq.n	a7a4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x3c>
    a7bc:	f89d 0000 	ldrb.w	r0, [sp]
    a7c0:	b150      	cbz	r0, a7d8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x70>
    a7c2:	f000 fd07 	bl	b1d4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x12c>
    a7c6:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    a7ca:	f000 fe9f 	bl	b50c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x464>
    a7ce:	2e00      	cmp	r6, #0
    a7d0:	d001      	beq.n	a7d6 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6e>
    a7d2:	f8c4 7304 	str.w	r7, [r4, #772]	; 0x304
    a7d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a7d8:	f240 71c3 	movw	r1, #1987	; 0x7c3
    a7dc:	203e      	movs	r0, #62	; 0x3e
    a7de:	f7f9 fa91 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a7e2:	0000      	.short	0x0000
    a7e4:	40001000 	.word	0x40001000
    a7e8:	20000dfc 	.word	0x20000dfc
    a7ec:	0c0e0000 	.word	0x0c0e0000
    a7f0:	4001f508 	.word	0x4001f508
    a7f4:	40001550 	.word	0x40001550

0000a7f8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    a7f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a7fc:	4c1f      	ldr	r4, [pc, #124]	; (a87c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x84>)
    a7fe:	4607      	mov	r7, r0
    a800:	4688      	mov	r8, r1
    a802:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
    a806:	07c1      	lsls	r1, r0, #31
    a808:	d018      	beq.n	a83c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x44>
    a80a:	4a1d      	ldr	r2, [pc, #116]	; (a880 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x88>)
    a80c:	f04f 6140 	mov.w	r1, #201326592	; 0xc000000
    a810:	6011      	str	r1, [r2, #0]
    a812:	4d1c      	ldr	r5, [pc, #112]	; (a884 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x8c>)
    a814:	f8d5 1200 	ldr.w	r1, [r5, #512]	; 0x200
    a818:	f041 0101 	orr.w	r1, r1, #1
    a81c:	f8c5 1200 	str.w	r1, [r5, #512]	; 0x200
    a820:	f040 0002 	orr.w	r0, r0, #2
    a824:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    a828:	4640      	mov	r0, r8
    a82a:	f000 fed5 	bl	b5d8 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    a82e:	f000 fc7f 	bl	b130 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x88>
    a832:	2601      	movs	r6, #1
    a834:	b13f      	cbz	r7, a846 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x4e>
    a836:	2f01      	cmp	r7, #1
    a838:	d00e      	beq.n	a858 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x60>
    a83a:	e016      	b.n	a86a <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    a83c:	f240 6155 	movw	r1, #1621	; 0x655
    a840:	203e      	movs	r0, #62	; 0x3e
    a842:	f7f9 fa5f 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a846:	4640      	mov	r0, r8
    a848:	f000 fc92 	bl	b170 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc8>
    a84c:	4640      	mov	r0, r8
    a84e:	f000 fc53 	bl	b0f8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    a852:	72e6      	strb	r6, [r4, #11]
    a854:	602e      	str	r6, [r5, #0]
    a856:	e008      	b.n	a86a <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    a858:	f000 fcb2 	bl	b1c0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x118>
    a85c:	f000 fe20 	bl	b4a0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3f8>
    a860:	2002      	movs	r0, #2
    a862:	72e0      	strb	r0, [r4, #11]
    a864:	f000 fd28 	bl	b2b8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x210>
    a868:	606e      	str	r6, [r5, #4]
    a86a:	4807      	ldr	r0, [pc, #28]	; (a888 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x90>)
    a86c:	64c6      	str	r6, [r0, #76]	; 0x4c
    a86e:	4807      	ldr	r0, [pc, #28]	; (a88c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x94>)
    a870:	6801      	ldr	r1, [r0, #0]
    a872:	4638      	mov	r0, r7
    a874:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    a878:	f004 bf30 	b.w	f6dc <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    a87c:	20000dfc 	.word	0x20000dfc
    a880:	4001f504 	.word	0x4001f504
    a884:	40001000 	.word	0x40001000
    a888:	40008000 	.word	0x40008000
    a88c:	4000854c 	.word	0x4000854c

0000a890 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    a890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a894:	4d35      	ldr	r5, [pc, #212]	; (a96c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xdc>)
    a896:	4606      	mov	r6, r0
    a898:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    a89c:	4689      	mov	r9, r1
    a89e:	6028      	str	r0, [r5, #0]
    a8a0:	4c33      	ldr	r4, [pc, #204]	; (a970 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe0>)
    a8a2:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
    a8a6:	f040 0002 	orr.w	r0, r0, #2
    a8aa:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    a8ae:	4608      	mov	r0, r1
    a8b0:	f000 fe92 	bl	b5d8 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    a8b4:	f000 fc3c 	bl	b130 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x88>
    a8b8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; a974 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe4>
    a8bc:	2700      	movs	r7, #0
    a8be:	b116      	cbz	r6, a8c6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x36>
    a8c0:	2e01      	cmp	r6, #1
    a8c2:	d027      	beq.n	a914 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    a8c4:	e03f      	b.n	a946 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    a8c6:	4648      	mov	r0, r9
    a8c8:	f000 fc52 	bl	b170 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc8>
    a8cc:	7a60      	ldrb	r0, [r4, #9]
    a8ce:	2801      	cmp	r0, #1
    a8d0:	d105      	bne.n	a8de <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x4e>
    a8d2:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    a8d6:	f041 0108 	orr.w	r1, r1, #8
    a8da:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    a8de:	4648      	mov	r0, r9
    a8e0:	f000 fc0a 	bl	b0f8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    a8e4:	2001      	movs	r0, #1
    a8e6:	72e0      	strb	r0, [r4, #11]
    a8e8:	6b20      	ldr	r0, [r4, #48]	; 0x30
    a8ea:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    a8ee:	6320      	str	r0, [r4, #48]	; 0x30
    a8f0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    a8f4:	6028      	str	r0, [r5, #0]
    a8f6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    a8fa:	f1b9 0f02 	cmp.w	r9, #2
    a8fe:	d007      	beq.n	a910 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x80>
    a900:	f640 0034 	movw	r0, #2100	; 0x834
    a904:	f649 72ec 	movw	r2, #40940	; 0x9fec
    a908:	4410      	add	r0, r2
    a90a:	fbb0 f7f1 	udiv	r7, r0, r1
    a90e:	e01a      	b.n	a946 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    a910:	4608      	mov	r0, r1
    a912:	e7f7      	b.n	a904 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x74>
    a914:	f000 fc54 	bl	b1c0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x118>
    a918:	f000 fdc2 	bl	b4a0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3f8>
    a91c:	7a60      	ldrb	r0, [r4, #9]
    a91e:	2801      	cmp	r0, #1
    a920:	d105      	bne.n	a92e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x9e>
    a922:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    a926:	f041 0104 	orr.w	r1, r1, #4
    a92a:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    a92e:	2002      	movs	r0, #2
    a930:	72e0      	strb	r0, [r4, #11]
    a932:	6b20      	ldr	r0, [r4, #48]	; 0x30
    a934:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    a938:	6320      	str	r0, [r4, #48]	; 0x30
    a93a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    a93e:	6028      	str	r0, [r5, #0]
    a940:	2729      	movs	r7, #41	; 0x29
    a942:	f000 fcb9 	bl	b2b8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x210>
    a946:	f000 fca3 	bl	b290 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1e8>
    a94a:	f001 f88b 	bl	ba64 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>
    a94e:	6800      	ldr	r0, [r0, #0]
    a950:	2801      	cmp	r0, #1
    a952:	d006      	beq.n	a962 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xd2>
    a954:	2100      	movs	r1, #0
    a956:	4630      	mov	r0, r6
    a958:	f004 fec0 	bl	f6dc <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    a95c:	4638      	mov	r0, r7
    a95e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a962:	f7ff ff01 	bl	a768 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    a966:	2000      	movs	r0, #0
    a968:	e7f9      	b.n	a95e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xce>
    a96a:	0000      	.short	0x0000
    a96c:	4001f504 	.word	0x4001f504
    a970:	20000dfc 	.word	0x20000dfc
    a974:	40001000 	.word	0x40001000

0000a978 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>:
    a978:	4a02      	ldr	r2, [pc, #8]	; (a984 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY+0xc>)
    a97a:	6b93      	ldr	r3, [r2, #56]	; 0x38
    a97c:	6003      	str	r3, [r0, #0]
    a97e:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    a980:	6008      	str	r0, [r1, #0]
    a982:	4770      	bx	lr
    a984:	20000dfc 	.word	0x20000dfc

0000a988 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    a988:	b510      	push	{r4, lr}
    a98a:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    a98c:	4901      	ldr	r1, [pc, #4]	; (a994 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    a98e:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    a992:	bd10      	pop	{r4, pc}
    a994:	20000dec 	.word	0x20000dec

0000a998 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>:
    a998:	490e      	ldr	r1, [pc, #56]	; (a9d4 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x3c>)
    a99a:	b510      	push	{r4, lr}
    a99c:	6a4a      	ldr	r2, [r1, #36]	; 0x24
    a99e:	4282      	cmp	r2, r0
    a9a0:	d302      	bcc.n	a9a8 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x10>
    a9a2:	f640 0143 	movw	r1, #2115	; 0x843
    a9a6:	e00a      	b.n	a9be <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x26>
    a9a8:	2201      	movs	r2, #1
    a9aa:	740a      	strb	r2, [r1, #16]
    a9ac:	6148      	str	r0, [r1, #20]
    a9ae:	490a      	ldr	r1, [pc, #40]	; (a9d8 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x40>)
    a9b0:	644a      	str	r2, [r1, #68]	; 0x44
    a9b2:	4a0a      	ldr	r2, [pc, #40]	; (a9dc <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x44>)
    a9b4:	6813      	ldr	r3, [r2, #0]
    a9b6:	4283      	cmp	r3, r0
    a9b8:	d304      	bcc.n	a9c4 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x2c>
    a9ba:	f640 014c 	movw	r1, #2124	; 0x84c
    a9be:	203e      	movs	r0, #62	; 0x3e
    a9c0:	f7f9 f9a0 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a9c4:	2300      	movs	r3, #0
    a9c6:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
    a9ca:	6010      	str	r0, [r2, #0]
    a9cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a9d0:	f000 bd74 	b.w	b4bc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x414>
    a9d4:	20000dfc 	.word	0x20000dfc
    a9d8:	40008000 	.word	0x40008000
    a9dc:	40008544 	.word	0x40008544

0000a9e0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    a9e0:	b570      	push	{r4, r5, r6, lr}
    a9e2:	4c10      	ldr	r4, [pc, #64]	; (aa24 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    a9e4:	4606      	mov	r6, r0
    a9e6:	2002      	movs	r0, #2
    a9e8:	7420      	strb	r0, [r4, #16]
    a9ea:	2596      	movs	r5, #150	; 0x96
    a9ec:	f000 f86c 	bl	aac8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    a9f0:	4602      	mov	r2, r0
    a9f2:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    a9f6:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    a9fa:	2801      	cmp	r0, #1
    a9fc:	d00d      	beq.n	aa1a <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x3a>
    a9fe:	4628      	mov	r0, r5
    aa00:	f004 fe84 	bl	f70c <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    aa04:	4908      	ldr	r1, [pc, #32]	; (aa28 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x48>)
    aa06:	6160      	str	r0, [r4, #20]
    aa08:	2000      	movs	r0, #0
    aa0a:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    aa0e:	6961      	ldr	r1, [r4, #20]
    aa10:	6a60      	ldr	r0, [r4, #36]	; 0x24
    aa12:	4408      	add	r0, r1
    aa14:	4905      	ldr	r1, [pc, #20]	; (aa2c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x4c>)
    aa16:	6008      	str	r0, [r1, #0]
    aa18:	bd70      	pop	{r4, r5, r6, pc}
    aa1a:	4633      	mov	r3, r6
    aa1c:	4628      	mov	r0, r5
    aa1e:	f004 fe91 	bl	f744 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    aa22:	e7ef      	b.n	aa04 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x24>
    aa24:	20000dfc 	.word	0x20000dfc
    aa28:	40008000 	.word	0x40008000
    aa2c:	40008544 	.word	0x40008544

0000aa30 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>:
    aa30:	b510      	push	{r4, lr}
    aa32:	f001 f967 	bl	bd04 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    aa36:	2800      	cmp	r0, #0
    aa38:	d006      	beq.n	aa48 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x18>
    aa3a:	4804      	ldr	r0, [pc, #16]	; (aa4c <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x1c>)
    aa3c:	6801      	ldr	r1, [r0, #0]
    aa3e:	f021 0101 	bic.w	r1, r1, #1
    aa42:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
    aa46:	6001      	str	r1, [r0, #0]
    aa48:	bd10      	pop	{r4, pc}
    aa4a:	0000      	.short	0x0000
    aa4c:	40001774 	.word	0x40001774

0000aa50 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    aa50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    aa54:	2240      	movs	r2, #64	; 0x40
    aa56:	2100      	movs	r1, #0
    aa58:	4813      	ldr	r0, [pc, #76]	; (aaa8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    aa5a:	f001 fa03 	bl	be64 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    aa5e:	f000 fd55 	bl	b50c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x464>
    aa62:	f001 f908 	bl	bc76 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    aa66:	4d11      	ldr	r5, [pc, #68]	; (aaac <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    aa68:	4e10      	ldr	r6, [pc, #64]	; (aaac <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    aa6a:	2400      	movs	r4, #0
    aa6c:	4f0f      	ldr	r7, [pc, #60]	; (aaac <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    aa6e:	3508      	adds	r5, #8
    aa70:	3610      	adds	r6, #16
    aa72:	b928      	cbnz	r0, aa80 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    aa74:	f001 f916 	bl	bca4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    aa78:	b910      	cbnz	r0, aa80 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    aa7a:	f001 f91d 	bl	bcb8 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    aa7e:	b108      	cbz	r0, aa84 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    aa80:	2224      	movs	r2, #36	; 0x24
    aa82:	e006      	b.n	aa92 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    aa84:	f001 f958 	bl	bd38 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    aa88:	b910      	cbnz	r0, aa90 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    aa8a:	f001 f94b 	bl	bd24 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    aa8e:	b140      	cbz	r0, aaa2 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    aa90:	2240      	movs	r2, #64	; 0x40
    aa92:	21ff      	movs	r1, #255	; 0xff
    aa94:	4638      	mov	r0, r7
    aa96:	f001 f9e5 	bl	be64 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    aa9a:	602c      	str	r4, [r5, #0]
    aa9c:	6034      	str	r4, [r6, #0]
    aa9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    aaa2:	2238      	movs	r2, #56	; 0x38
    aaa4:	e7f5      	b.n	aa92 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    aaa6:	0000      	.short	0x0000
    aaa8:	20000dfc 	.word	0x20000dfc
    aaac:	40000e00 	.word	0x40000e00

0000aab0 <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA>:
    aab0:	4901      	ldr	r1, [pc, #4]	; (aab8 <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA+0x8>)
    aab2:	7008      	strb	r0, [r1, #0]
    aab4:	4770      	bx	lr
    aab6:	0000      	.short	0x0000
    aab8:	20000284 	.word	0x20000284

0000aabc <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    aabc:	4801      	ldr	r0, [pc, #4]	; (aac4 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x8>)
    aabe:	6a40      	ldr	r0, [r0, #36]	; 0x24
    aac0:	4770      	bx	lr
    aac2:	0000      	.short	0x0000
    aac4:	20000dfc 	.word	0x20000dfc

0000aac8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>:
    aac8:	4814      	ldr	r0, [pc, #80]	; (ab1c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x54>)
    aaca:	b510      	push	{r4, lr}
    aacc:	f890 1029 	ldrb.w	r1, [r0, #41]	; 0x29
    aad0:	7ac0      	ldrb	r0, [r0, #11]
    aad2:	b141      	cbz	r1, aae6 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x1e>
    aad4:	2902      	cmp	r1, #2
    aad6:	d00b      	beq.n	aaf0 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    aad8:	2802      	cmp	r0, #2
    aada:	d009      	beq.n	aaf0 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    aadc:	2901      	cmp	r1, #1
    aade:	d00b      	beq.n	aaf8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    aae0:	2801      	cmp	r0, #1
    aae2:	d009      	beq.n	aaf8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    aae4:	e015      	b.n	ab12 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4a>
    aae6:	2800      	cmp	r0, #0
    aae8:	d1f6      	bne.n	aad8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x10>
    aaea:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
    aaee:	e00d      	b.n	ab0c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x44>
    aaf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    aaf4:	f000 bc6e 	b.w	b3d4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x32c>
    aaf8:	4809      	ldr	r0, [pc, #36]	; (ab20 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x58>)
    aafa:	6800      	ldr	r0, [r0, #0]
    aafc:	f000 000f 	and.w	r0, r0, #15
    ab00:	2803      	cmp	r0, #3
    ab02:	d006      	beq.n	ab12 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4a>
    ab04:	2804      	cmp	r0, #4
    ab06:	d006      	beq.n	ab16 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4e>
    ab08:	f240 210b 	movw	r1, #523	; 0x20b
    ab0c:	203e      	movs	r0, #62	; 0x3e
    ab0e:	f7f9 f8f9 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ab12:	2001      	movs	r0, #1
    ab14:	bd10      	pop	{r4, pc}
    ab16:	2002      	movs	r0, #2
    ab18:	bd10      	pop	{r4, pc}
    ab1a:	0000      	.short	0x0000
    ab1c:	20000dfc 	.word	0x20000dfc
    ab20:	40001510 	.word	0x40001510

0000ab24 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>:
    ab24:	4801      	ldr	r0, [pc, #4]	; (ab2c <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x8>)
    ab26:	6a00      	ldr	r0, [r0, #32]
    ab28:	4770      	bx	lr
    ab2a:	0000      	.short	0x0000
    ab2c:	20000dfc 	.word	0x20000dfc

0000ab30 <sym_JG4OWOPOBDSVKYOWPCJHHMQ7GDZVMOEUZX73ZYA>:
    ab30:	4801      	ldr	r0, [pc, #4]	; (ab38 <sym_JG4OWOPOBDSVKYOWPCJHHMQ7GDZVMOEUZX73ZYA+0x8>)
    ab32:	7f40      	ldrb	r0, [r0, #29]
    ab34:	4770      	bx	lr
    ab36:	0000      	.short	0x0000
    ab38:	20000dfc 	.word	0x20000dfc

0000ab3c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    ab3c:	b510      	push	{r4, lr}
    ab3e:	f000 fccb 	bl	b4d8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x430>
    ab42:	f7ff fe11 	bl	a768 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    ab46:	f004 fd5f 	bl	f608 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>
    ab4a:	480f      	ldr	r0, [pc, #60]	; (ab88 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x4c>)
    ab4c:	4a0f      	ldr	r2, [pc, #60]	; (ab8c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x50>)
    ab4e:	6b01      	ldr	r1, [r0, #48]	; 0x30
    ab50:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    ab54:	6011      	str	r1, [r2, #0]
    ab56:	2400      	movs	r4, #0
    ab58:	6304      	str	r4, [r0, #48]	; 0x30
    ab5a:	7404      	strb	r4, [r0, #16]
    ab5c:	6244      	str	r4, [r0, #36]	; 0x24
    ab5e:	6204      	str	r4, [r0, #32]
    ab60:	f000 fcba 	bl	b4d8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x430>
    ab64:	480a      	ldr	r0, [pc, #40]	; (ab90 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x54>)
    ab66:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    ab6a:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    ab6e:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    ab72:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    ab76:	2001      	movs	r0, #1
    ab78:	f004 fd7f 	bl	f67a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    ab7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ab80:	2001      	movs	r0, #1
    ab82:	f004 bd6d 	b.w	f660 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    ab86:	0000      	.short	0x0000
    ab88:	20000dfc 	.word	0x20000dfc
    ab8c:	4001f508 	.word	0x4001f508
    ab90:	40008000 	.word	0x40008000

0000ab94 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    ab94:	b570      	push	{r4, r5, r6, lr}
    ab96:	2001      	movs	r0, #1
    ab98:	f004 fd6f 	bl	f67a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    ab9c:	4837      	ldr	r0, [pc, #220]	; (ac7c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    ab9e:	2400      	movs	r4, #0
    aba0:	6004      	str	r4, [r0, #0]
    aba2:	2601      	movs	r6, #1
    aba4:	6006      	str	r6, [r0, #0]
    aba6:	f001 f89d 	bl	bce4 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    abaa:	4d35      	ldr	r5, [pc, #212]	; (ac80 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    abac:	b118      	cbz	r0, abb6 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x22>
    abae:	6828      	ldr	r0, [r5, #0]
    abb0:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    abb4:	6028      	str	r0, [r5, #0]
    abb6:	f001 f889 	bl	bccc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    abba:	b128      	cbz	r0, abc8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x34>
    abbc:	6828      	ldr	r0, [r5, #0]
    abbe:	4931      	ldr	r1, [pc, #196]	; (ac84 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    abc0:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    abc4:	4308      	orrs	r0, r1
    abc6:	6028      	str	r0, [r5, #0]
    abc8:	f001 f89c 	bl	bd04 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    abcc:	b138      	cbz	r0, abde <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4a>
    abce:	482c      	ldr	r0, [pc, #176]	; (ac80 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    abd0:	1d00      	adds	r0, r0, #4
    abd2:	6801      	ldr	r1, [r0, #0]
    abd4:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    abd8:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    abdc:	6001      	str	r1, [r0, #0]
    abde:	4928      	ldr	r1, [pc, #160]	; (ac80 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    abe0:	4829      	ldr	r0, [pc, #164]	; (ac88 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    abe2:	313c      	adds	r1, #60	; 0x3c
    abe4:	6008      	str	r0, [r1, #0]
    abe6:	f7f8 ff8b 	bl	3b00 <mpsl_fem_device_config_254_apply_get>
    abea:	b140      	cbz	r0, abfe <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6a>
    abec:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    abf0:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    abf4:	1c41      	adds	r1, r0, #1
    abf6:	d002      	beq.n	abfe <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6a>
    abf8:	4921      	ldr	r1, [pc, #132]	; (ac80 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    abfa:	3110      	adds	r1, #16
    abfc:	6008      	str	r0, [r1, #0]
    abfe:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    ac02:	6e00      	ldr	r0, [r0, #96]	; 0x60
    ac04:	1c41      	adds	r1, r0, #1
    ac06:	d004      	beq.n	ac12 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x7e>
    ac08:	4920      	ldr	r1, [pc, #128]	; (ac8c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    ac0a:	680a      	ldr	r2, [r1, #0]
    ac0c:	f360 4217 	bfi	r2, r0, #16, #8
    ac10:	600a      	str	r2, [r1, #0]
    ac12:	491e      	ldr	r1, [pc, #120]	; (ac8c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    ac14:	f240 605b 	movw	r0, #1627	; 0x65b
    ac18:	3954      	subs	r1, #84	; 0x54
    ac1a:	6008      	str	r0, [r1, #0]
    ac1c:	1f09      	subs	r1, r1, #4
    ac1e:	f240 1003 	movw	r0, #259	; 0x103
    ac22:	6008      	str	r0, [r1, #0]
    ac24:	1f08      	subs	r0, r1, #4
    ac26:	6006      	str	r6, [r0, #0]
    ac28:	2001      	movs	r0, #1
    ac2a:	f000 fcd5 	bl	b5d8 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    ac2e:	4917      	ldr	r1, [pc, #92]	; (ac8c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    ac30:	f240 1001 	movw	r0, #257	; 0x101
    ac34:	31c4      	adds	r1, #196	; 0xc4
    ac36:	6008      	str	r0, [r1, #0]
    ac38:	4e15      	ldr	r6, [pc, #84]	; (ac90 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    ac3a:	2502      	movs	r5, #2
    ac3c:	f8c6 5200 	str.w	r5, [r6, #512]	; 0x200
    ac40:	4915      	ldr	r1, [pc, #84]	; (ac98 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    ac42:	4814      	ldr	r0, [pc, #80]	; (ac94 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    ac44:	6008      	str	r0, [r1, #0]
    ac46:	4815      	ldr	r0, [pc, #84]	; (ac9c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x108>)
    ac48:	f506 7600 	add.w	r6, r6, #512	; 0x200
    ac4c:	8704      	strh	r4, [r0, #56]	; 0x38
    ac4e:	3010      	adds	r0, #16
    ac50:	6244      	str	r4, [r0, #36]	; 0x24
    ac52:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
    ac56:	2001      	movs	r0, #1
    ac58:	f004 fd02 	bl	f660 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    ac5c:	2010      	movs	r0, #16
    ac5e:	f8c6 0104 	str.w	r0, [r6, #260]	; 0x104
    ac62:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    ac66:	f8c0 5100 	str.w	r5, [r0, #256]	; 0x100
    ac6a:	480d      	ldr	r0, [pc, #52]	; (aca0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x10c>)
    ac6c:	6840      	ldr	r0, [r0, #4]
    ac6e:	2800      	cmp	r0, #0
    ac70:	d002      	beq.n	ac78 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe4>
    ac72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ac76:	4700      	bx	r0
    ac78:	bd70      	pop	{r4, r5, r6, pc}
    ac7a:	0000      	.short	0x0000
    ac7c:	40001ffc 	.word	0x40001ffc
    ac80:	4000173c 	.word	0x4000173c
    ac84:	80000096 	.word	0x80000096
    ac88:	8900002c 	.word	0x8900002c
    ac8c:	4000158c 	.word	0x4000158c
    ac90:	40001000 	.word	0x40001000
    ac94:	0c0e0000 	.word	0x0c0e0000
    ac98:	4001f508 	.word	0x4001f508
    ac9c:	20000dec 	.word	0x20000dec
    aca0:	20000284 	.word	0x20000284

0000aca4 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    aca4:	4901      	ldr	r1, [pc, #4]	; (acac <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    aca6:	7608      	strb	r0, [r1, #24]
    aca8:	4770      	bx	lr
    acaa:	0000      	.short	0x0000
    acac:	20000dfc 	.word	0x20000dfc

0000acb0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    acb0:	4904      	ldr	r1, [pc, #16]	; (acc4 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x14>)
    acb2:	6008      	str	r0, [r1, #0]
    acb4:	4804      	ldr	r0, [pc, #16]	; (acc8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    acb6:	f810 1f34 	ldrb.w	r1, [r0, #52]!
    acba:	f041 0101 	orr.w	r1, r1, #1
    acbe:	7001      	strb	r1, [r0, #0]
    acc0:	f000 baae 	b.w	b220 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x178>
    acc4:	40001504 	.word	0x40001504
    acc8:	20000dfc 	.word	0x20000dfc

0000accc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    accc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    acd0:	4e35      	ldr	r6, [pc, #212]	; (ada8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xdc>)
    acd2:	4607      	mov	r7, r0
    acd4:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    acd8:	468a      	mov	sl, r1
    acda:	4614      	mov	r4, r2
    acdc:	6030      	str	r0, [r6, #0]
    acde:	4610      	mov	r0, r2
    ace0:	f000 fc7a 	bl	b5d8 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    ace4:	f000 fa24 	bl	b130 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x88>
    ace8:	f8df 90c0 	ldr.w	r9, [pc, #192]	; adac <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>
    acec:	4d30      	ldr	r5, [pc, #192]	; (adb0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe4>)
    acee:	f04f 0801 	mov.w	r8, #1
    acf2:	b127      	cbz	r7, acfe <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x32>
    acf4:	2f01      	cmp	r7, #1
    acf6:	d01d      	beq.n	ad34 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x68>
    acf8:	f240 7144 	movw	r1, #1860	; 0x744
    acfc:	e04a      	b.n	ad94 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>
    acfe:	4620      	mov	r0, r4
    ad00:	f000 fa36 	bl	b170 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc8>
    ad04:	4620      	mov	r0, r4
    ad06:	f000 f9f7 	bl	b0f8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    ad0a:	2c02      	cmp	r4, #2
    ad0c:	d00f      	beq.n	ad2e <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x62>
    ad0e:	f640 0034 	movw	r0, #2100	; 0x834
    ad12:	bf00      	nop
    ad14:	f649 51f8 	movw	r1, #40440	; 0x9df8
    ad18:	4401      	add	r1, r0
    ad1a:	4650      	mov	r0, sl
    ad1c:	f000 fc00 	bl	b520 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x478>
    ad20:	4604      	mov	r4, r0
    ad22:	4648      	mov	r0, r9
    ad24:	f000 fbe6 	bl	b4f4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x44c>
    ad28:	f885 800b 	strb.w	r8, [r5, #11]
    ad2c:	e014      	b.n	ad58 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x8c>
    ad2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    ad32:	e7ef      	b.n	ad14 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x48>
    ad34:	f000 fa44 	bl	b1c0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x118>
    ad38:	f000 fbb2 	bl	b4a0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3f8>
    ad3c:	f000 fabc 	bl	b2b8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x210>
    ad40:	f649 71ba 	movw	r1, #40890	; 0x9fba
    ad44:	4650      	mov	r0, sl
    ad46:	f000 fbeb 	bl	b520 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x478>
    ad4a:	4604      	mov	r4, r0
    ad4c:	4817      	ldr	r0, [pc, #92]	; (adac <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    ad4e:	1d00      	adds	r0, r0, #4
    ad50:	f000 fbd0 	bl	b4f4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x44c>
    ad54:	2002      	movs	r0, #2
    ad56:	72e8      	strb	r0, [r5, #11]
    ad58:	4816      	ldr	r0, [pc, #88]	; (adb4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe8>)
    ad5a:	6004      	str	r4, [r0, #0]
    ad5c:	4917      	ldr	r1, [pc, #92]	; (adbc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf0>)
    ad5e:	4816      	ldr	r0, [pc, #88]	; (adb8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xec>)
    ad60:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    ad64:	6b28      	ldr	r0, [r5, #48]	; 0x30
    ad66:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    ad6a:	6328      	str	r0, [r5, #48]	; 0x30
    ad6c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    ad70:	6030      	str	r0, [r6, #0]
    ad72:	2110      	movs	r1, #16
    ad74:	f8c9 1304 	str.w	r1, [r9, #772]	; 0x304
    ad78:	1200      	asrs	r0, r0, #8
    ad7a:	6030      	str	r0, [r6, #0]
    ad7c:	f000 fa88 	bl	b290 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1e8>
    ad80:	490f      	ldr	r1, [pc, #60]	; (adc0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf4>)
    ad82:	f8c1 804c 	str.w	r8, [r1, #76]	; 0x4c
    ad86:	480b      	ldr	r0, [pc, #44]	; (adb4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe8>)
    ad88:	300c      	adds	r0, #12
    ad8a:	6800      	ldr	r0, [r0, #0]
    ad8c:	42a0      	cmp	r0, r4
    ad8e:	d304      	bcc.n	ad9a <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xce>
    ad90:	f240 7169 	movw	r1, #1897	; 0x769
    ad94:	203e      	movs	r0, #62	; 0x3e
    ad96:	f7f8 ffb5 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ad9a:	4621      	mov	r1, r4
    ad9c:	4638      	mov	r0, r7
    ad9e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ada2:	f004 bc9b 	b.w	f6dc <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    ada6:	0000      	.short	0x0000
    ada8:	4001f504 	.word	0x4001f504
    adac:	40001000 	.word	0x40001000
    adb0:	20000dfc 	.word	0x20000dfc
    adb4:	40008540 	.word	0x40008540
    adb8:	40008140 	.word	0x40008140
    adbc:	4001f098 	.word	0x4001f098
    adc0:	40008000 	.word	0x40008000

0000adc4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    adc4:	b510      	push	{r4, lr}
    adc6:	b14a      	cbz	r2, addc <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x18>
    adc8:	4c12      	ldr	r4, [pc, #72]	; (ae14 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x50>)
    adca:	7260      	strb	r0, [r4, #9]
    adcc:	7363      	strb	r3, [r4, #13]
    adce:	07d0      	lsls	r0, r2, #31
    add0:	d007      	beq.n	ade2 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x1e>
    add2:	2a01      	cmp	r2, #1
    add4:	d005      	beq.n	ade2 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x1e>
    add6:	f640 113e 	movw	r1, #2366	; 0x93e
    adda:	e00c      	b.n	adf6 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x32>
    addc:	f640 1137 	movw	r1, #2359	; 0x937
    ade0:	e009      	b.n	adf6 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x32>
    ade2:	b159      	cbz	r1, adfc <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>
    ade4:	2002      	movs	r0, #2
    ade6:	72a0      	strb	r0, [r4, #10]
    ade8:	7322      	strb	r2, [r4, #12]
    adea:	2801      	cmp	r0, #1
    adec:	d008      	beq.n	ae00 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x3c>
    adee:	2802      	cmp	r0, #2
    adf0:	d00f      	beq.n	ae12 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x4e>
    adf2:	f640 1155 	movw	r1, #2389	; 0x955
    adf6:	203e      	movs	r0, #62	; 0x3e
    adf8:	f7f8 ff84 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    adfc:	2001      	movs	r0, #1
    adfe:	e7f2      	b.n	ade6 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x22>
    ae00:	7ae0      	ldrb	r0, [r4, #11]
    ae02:	2802      	cmp	r0, #2
    ae04:	d105      	bne.n	ae12 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x4e>
    ae06:	f000 f9db 	bl	b1c0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x118>
    ae0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ae0e:	f000 bb47 	b.w	b4a0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3f8>
    ae12:	bd10      	pop	{r4, pc}
    ae14:	20000dfc 	.word	0x20000dfc

0000ae18 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    ae18:	490a      	ldr	r1, [pc, #40]	; (ae44 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x2c>)
    ae1a:	b508      	push	{r3, lr}
    ae1c:	f8d1 211c 	ldr.w	r2, [r1, #284]	; 0x11c
    ae20:	2a01      	cmp	r2, #1
    ae22:	d001      	beq.n	ae28 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x10>
    ae24:	2000      	movs	r0, #0
    ae26:	bd08      	pop	{r3, pc}
    ae28:	4a07      	ldr	r2, [pc, #28]	; (ae48 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x30>)
    ae2a:	6812      	ldr	r2, [r2, #0]
    ae2c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    ae30:	4252      	negs	r2, r2
    ae32:	7002      	strb	r2, [r0, #0]
    ae34:	2000      	movs	r0, #0
    ae36:	f8c1 011c 	str.w	r0, [r1, #284]	; 0x11c
    ae3a:	4804      	ldr	r0, [pc, #16]	; (ae4c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x34>)
    ae3c:	6800      	ldr	r0, [r0, #0]
    ae3e:	9000      	str	r0, [sp, #0]
    ae40:	2001      	movs	r0, #1
    ae42:	bd08      	pop	{r3, pc}
    ae44:	40001000 	.word	0x40001000
    ae48:	40001548 	.word	0x40001548
    ae4c:	4000111c 	.word	0x4000111c

0000ae50 <sym_LZLCMBXYRGNNSS6IYQ5J2ORWQO6TGPOEG4SEIWQ>:
    ae50:	4a04      	ldr	r2, [pc, #16]	; (ae64 <sym_LZLCMBXYRGNNSS6IYQ5J2ORWQO6TGPOEG4SEIWQ+0x14>)
    ae52:	6803      	ldr	r3, [r0, #0]
    ae54:	f8c2 3012 	str.w	r3, [r2, #18]
    ae58:	8880      	ldrh	r0, [r0, #4]
    ae5a:	82d0      	strh	r0, [r2, #22]
    ae5c:	f102 0010 	add.w	r0, r2, #16
    ae60:	7201      	strb	r1, [r0, #8]
    ae62:	4770      	bx	lr
    ae64:	20000dec 	.word	0x20000dec

0000ae68 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    ae68:	4a04      	ldr	r2, [pc, #16]	; (ae7c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x14>)
    ae6a:	78c1      	ldrb	r1, [r0, #3]
    ae6c:	6011      	str	r1, [r2, #0]
    ae6e:	6800      	ldr	r0, [r0, #0]
    ae70:	4902      	ldr	r1, [pc, #8]	; (ae7c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x14>)
    ae72:	0200      	lsls	r0, r0, #8
    ae74:	3908      	subs	r1, #8
    ae76:	6008      	str	r0, [r1, #0]
    ae78:	4770      	bx	lr
    ae7a:	0000      	.short	0x0000
    ae7c:	40001524 	.word	0x40001524

0000ae80 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    ae80:	6800      	ldr	r0, [r0, #0]
    ae82:	4902      	ldr	r1, [pc, #8]	; (ae8c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0xc>)
    ae84:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ae88:	6008      	str	r0, [r1, #0]
    ae8a:	4770      	bx	lr
    ae8c:	4000153c 	.word	0x4000153c

0000ae90 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>:
    ae90:	b510      	push	{r4, lr}
    ae92:	f000 fb7d 	bl	b590 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4e8>
    ae96:	4806      	ldr	r0, [pc, #24]	; (aeb0 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x20>)
    ae98:	6800      	ldr	r0, [r0, #0]
    ae9a:	2803      	cmp	r0, #3
    ae9c:	d001      	beq.n	aea2 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x12>
    ae9e:	280b      	cmp	r0, #11
    aea0:	d104      	bne.n	aeac <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x1c>
    aea2:	f240 21a5 	movw	r1, #677	; 0x2a5
    aea6:	203e      	movs	r0, #62	; 0x3e
    aea8:	f7f8 ff2c 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aeac:	bd10      	pop	{r4, pc}
    aeae:	0000      	.short	0x0000
    aeb0:	40001550 	.word	0x40001550

0000aeb4 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    aeb4:	4901      	ldr	r1, [pc, #4]	; (aebc <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    aeb6:	7648      	strb	r0, [r1, #25]
    aeb8:	4770      	bx	lr
    aeba:	0000      	.short	0x0000
    aebc:	20000dfc 	.word	0x20000dfc

0000aec0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    aec0:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    aec4:	4d6f      	ldr	r5, [pc, #444]	; (b084 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1c4>)
    aec6:	2701      	movs	r7, #1
    aec8:	64ef      	str	r7, [r5, #76]	; 0x4c
    aeca:	486f      	ldr	r0, [pc, #444]	; (b088 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1c8>)
    aecc:	f8d0 a000 	ldr.w	sl, [r0]
    aed0:	486e      	ldr	r0, [pc, #440]	; (b08c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1cc>)
    aed2:	6800      	ldr	r0, [r0, #0]
    aed4:	4c6e      	ldr	r4, [pc, #440]	; (b090 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d0>)
    aed6:	f8df 81bc 	ldr.w	r8, [pc, #444]	; b094 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d4>
    aeda:	e9c4 0a0e 	strd	r0, sl, [r4, #56]	; 0x38
    aede:	f898 0000 	ldrb.w	r0, [r8]
    aee2:	2804      	cmp	r0, #4
    aee4:	d302      	bcc.n	aeec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2c>
    aee6:	f44f 612d 	mov.w	r1, #2768	; 0xad0
    aeea:	e0c0      	b.n	b06e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1ae>
    aeec:	f000 f972 	bl	b1d4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x12c>
    aef0:	4969      	ldr	r1, [pc, #420]	; (b098 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d8>)
    aef2:	6b20      	ldr	r0, [r4, #48]	; 0x30
    aef4:	6008      	str	r0, [r1, #0]
    aef6:	f8df b1a4 	ldr.w	fp, [pc, #420]	; b09c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1dc>
    aefa:	2600      	movs	r6, #0
    aefc:	6326      	str	r6, [r4, #48]	; 0x30
    aefe:	f8db 1200 	ldr.w	r1, [fp, #512]	; 0x200
    af02:	f240 121d 	movw	r2, #285	; 0x11d
    af06:	4391      	bics	r1, r2
    af08:	f8cb 1200 	str.w	r1, [fp, #512]	; 0x200
    af0c:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    af10:	f8db 010c 	ldr.w	r0, [fp, #268]	; 0x10c
    af14:	b900      	cbnz	r0, af18 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x58>
    af16:	64af      	str	r7, [r5, #72]	; 0x48
    af18:	f000 f9e0 	bl	b2dc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x234>
    af1c:	4605      	mov	r5, r0
    af1e:	485a      	ldr	r0, [pc, #360]	; (b088 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1c8>)
    af20:	1f00      	subs	r0, r0, #4
    af22:	6800      	ldr	r0, [r0, #0]
    af24:	6260      	str	r0, [r4, #36]	; 0x24
    af26:	f7ff fdcf 	bl	aac8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    af2a:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    af2e:	7ae0      	ldrb	r0, [r4, #11]
    af30:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    af34:	495a      	ldr	r1, [pc, #360]	; (b0a0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e0>)
    af36:	6226      	str	r6, [r4, #32]
    af38:	2802      	cmp	r0, #2
    af3a:	d107      	bne.n	af4c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x8c>
    af3c:	7860      	ldrb	r0, [r4, #1]
    af3e:	b128      	cbz	r0, af4c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x8c>
    af40:	680a      	ldr	r2, [r1, #0]
    af42:	7812      	ldrb	r2, [r2, #0]
    af44:	4002      	ands	r2, r0
    af46:	7820      	ldrb	r0, [r4, #0]
    af48:	4390      	bics	r0, r2
    af4a:	d011      	beq.n	af70 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xb0>
    af4c:	7726      	strb	r6, [r4, #28]
    af4e:	f8df 9154 	ldr.w	r9, [pc, #340]	; b0a4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e4>
    af52:	07a8      	lsls	r0, r5, #30
    af54:	d502      	bpl.n	af5c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x9c>
    af56:	f8d9 0000 	ldr.w	r0, [r9]
    af5a:	6220      	str	r0, [r4, #32]
    af5c:	0728      	lsls	r0, r5, #28
    af5e:	d502      	bpl.n	af66 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xa6>
    af60:	f8d9 0000 	ldr.w	r0, [r9]
    af64:	6220      	str	r0, [r4, #32]
    af66:	f898 0000 	ldrb.w	r0, [r8]
    af6a:	07c0      	lsls	r0, r0, #31
    af6c:	d002      	beq.n	af74 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xb4>
    af6e:	e01c      	b.n	afaa <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xea>
    af70:	7727      	strb	r7, [r4, #28]
    af72:	e7ec      	b.n	af4e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x8e>
    af74:	f8d1 8000 	ldr.w	r8, [r1]
    af78:	f898 0000 	ldrb.w	r0, [r8]
    af7c:	f000 000f 	and.w	r0, r0, #15
    af80:	2807      	cmp	r0, #7
    af82:	d211      	bcs.n	afa8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    af84:	2206      	movs	r2, #6
    af86:	f108 0109 	add.w	r1, r8, #9
    af8a:	1ca0      	adds	r0, r4, #2
    af8c:	f000 fede 	bl	bd4c <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    af90:	b938      	cbnz	r0, afa2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    af92:	7a20      	ldrb	r0, [r4, #8]
    af94:	f898 1000 	ldrb.w	r1, [r8]
    af98:	ebb0 1fd1 	cmp.w	r0, r1, lsr #7
    af9c:	d101      	bne.n	afa2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    af9e:	2001      	movs	r0, #1
    afa0:	e000      	b.n	afa4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe4>
    afa2:	2000      	movs	r0, #0
    afa4:	7760      	strb	r0, [r4, #29]
    afa6:	e000      	b.n	afaa <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xea>
    afa8:	7766      	strb	r6, [r4, #29]
    afaa:	f04f 0800 	mov.w	r8, #0
    afae:	4651      	mov	r1, sl
    afb0:	4628      	mov	r0, r5
    afb2:	f000 fa23 	bl	b3fc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x354>
    afb6:	b918      	cbnz	r0, afc0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x100>
    afb8:	f8cb 7010 	str.w	r7, [fp, #16]
    afbc:	f04f 0801 	mov.w	r8, #1
    afc0:	4e33      	ldr	r6, [pc, #204]	; (b090 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d0>)
    afc2:	07e8      	lsls	r0, r5, #31
    afc4:	f1a6 0610 	sub.w	r6, r6, #16
    afc8:	d002      	beq.n	afd0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x110>
    afca:	6830      	ldr	r0, [r6, #0]
    afcc:	4780      	blx	r0
    afce:	e031      	b.n	b034 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x174>
    afd0:	07a8      	lsls	r0, r5, #30
    afd2:	d526      	bpl.n	b022 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x162>
    afd4:	0768      	lsls	r0, r5, #29
    afd6:	d41e      	bmi.n	b016 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x156>
    afd8:	f000 fe94 	bl	bd04 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    afdc:	b9d8      	cbnz	r0, b016 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x156>
    afde:	f000 fe81 	bl	bce4 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    afe2:	b9c0      	cbnz	r0, b016 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x156>
    afe4:	482e      	ldr	r0, [pc, #184]	; (b0a0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e0>)
    afe6:	38b4      	subs	r0, #180	; 0xb4
    afe8:	6800      	ldr	r0, [r0, #0]
    afea:	f3c0 5742 	ubfx	r7, r0, #21, #3
    afee:	f3c0 6300 	ubfx	r3, r0, #24, #1
    aff2:	f000 020f 	and.w	r2, r0, #15
    aff6:	f3c0 1103 	ubfx	r1, r0, #4, #4
    affa:	f3c0 2003 	ubfx	r0, r0, #8, #4
    affe:	b153      	cbz	r3, b016 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x156>
    b000:	b10a      	cbz	r2, b006 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
    b002:	b101      	cbz	r1, b006 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
    b004:	b938      	cbnz	r0, b016 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x156>
    b006:	4826      	ldr	r0, [pc, #152]	; (b0a0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e0>)
    b008:	38b0      	subs	r0, #176	; 0xb0
    b00a:	6800      	ldr	r0, [r0, #0]
    b00c:	b118      	cbz	r0, b016 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x156>
    b00e:	2f03      	cmp	r7, #3
    b010:	d201      	bcs.n	b016 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x156>
    b012:	f045 0504 	orr.w	r5, r5, #4
    b016:	f345 0080 	sbfx	r0, r5, #2, #1
    b01a:	4641      	mov	r1, r8
    b01c:	1c40      	adds	r0, r0, #1
    b01e:	6872      	ldr	r2, [r6, #4]
    b020:	e007      	b.n	b032 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x172>
    b022:	f015 0f28 	tst.w	r5, #40	; 0x28
    b026:	d005      	beq.n	b034 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x174>
    b028:	f345 1140 	sbfx	r1, r5, #5, #1
    b02c:	68b2      	ldr	r2, [r6, #8]
    b02e:	4640      	mov	r0, r8
    b030:	1c49      	adds	r1, r1, #1
    b032:	4790      	blx	r2
    b034:	06e8      	lsls	r0, r5, #27
    b036:	d501      	bpl.n	b03c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x17c>
    b038:	68f0      	ldr	r0, [r6, #12]
    b03a:	4780      	blx	r0
    b03c:	7ae0      	ldrb	r0, [r4, #11]
    b03e:	2802      	cmp	r0, #2
    b040:	d11e      	bne.n	b080 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1c0>
    b042:	7c20      	ldrb	r0, [r4, #16]
    b044:	2800      	cmp	r0, #0
    b046:	d01b      	beq.n	b080 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1c0>
    b048:	2802      	cmp	r0, #2
    b04a:	d004      	beq.n	b056 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x196>
    b04c:	2801      	cmp	r0, #1
    b04e:	d008      	beq.n	b062 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1a2>
    b050:	f640 3166 	movw	r1, #2918	; 0xb66
    b054:	e00b      	b.n	b06e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1ae>
    b056:	6961      	ldr	r1, [r4, #20]
    b058:	6a60      	ldr	r0, [r4, #36]	; 0x24
    b05a:	4401      	add	r1, r0
    b05c:	f8c9 1000 	str.w	r1, [r9]
    b060:	e00a      	b.n	b078 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1b8>
    b062:	6a61      	ldr	r1, [r4, #36]	; 0x24
    b064:	6960      	ldr	r0, [r4, #20]
    b066:	4288      	cmp	r0, r1
    b068:	d804      	bhi.n	b074 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1b4>
    b06a:	f640 3167 	movw	r1, #2919	; 0xb67
    b06e:	203e      	movs	r0, #62	; 0x3e
    b070:	f7f8 fe48 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b074:	f8c9 0000 	str.w	r0, [r9]
    b078:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    b07c:	f000 ba1e 	b.w	b4bc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x414>
    b080:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    b084:	40008000 	.word	0x40008000
    b088:	4000854c 	.word	0x4000854c
    b08c:	4000b504 	.word	0x4000b504
    b090:	20000dfc 	.word	0x20000dfc
    b094:	20000284 	.word	0x20000284
    b098:	4001f508 	.word	0x4001f508
    b09c:	40001000 	.word	0x40001000
    b0a0:	40001504 	.word	0x40001504
    b0a4:	40008544 	.word	0x40008544

0000b0a8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    b0a8:	b570      	push	{r4, r5, r6, lr}
    b0aa:	4b11      	ldr	r3, [pc, #68]	; (b0f0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x48>)
    b0ac:	888c      	ldrh	r4, [r1, #4]
    b0ae:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    b0b2:	f8c3 4620 	str.w	r4, [r3, #1568]	; 0x620
    b0b6:	780c      	ldrb	r4, [r1, #0]
    b0b8:	f8d1 1001 	ldr.w	r1, [r1, #1]
    b0bc:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    b0c0:	f8c3 1600 	str.w	r1, [r3, #1536]	; 0x600
    b0c4:	4d0b      	ldr	r5, [pc, #44]	; (b0f4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4c>)
    b0c6:	6829      	ldr	r1, [r5, #0]
    b0c8:	f100 0608 	add.w	r6, r0, #8
    b0cc:	2401      	movs	r4, #1
    b0ce:	fa04 f306 	lsl.w	r3, r4, r6
    b0d2:	b132      	cbz	r2, b0e2 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a>
    b0d4:	2a01      	cmp	r2, #1
    b0d6:	d006      	beq.n	b0e6 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3e>
    b0d8:	f240 41f1 	movw	r1, #1265	; 0x4f1
    b0dc:	203e      	movs	r0, #62	; 0x3e
    b0de:	f7f8 fe11 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b0e2:	4399      	bics	r1, r3
    b0e4:	e000      	b.n	b0e8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x40>
    b0e6:	4319      	orrs	r1, r3
    b0e8:	4084      	lsls	r4, r0
    b0ea:	430c      	orrs	r4, r1
    b0ec:	602c      	str	r4, [r5, #0]
    b0ee:	bd70      	pop	{r4, r5, r6, pc}
    b0f0:	40001000 	.word	0x40001000
    b0f4:	40001640 	.word	0x40001640
    b0f8:	b510      	push	{r4, lr}
    b0fa:	4604      	mov	r4, r0
    b0fc:	f000 fe02 	bl	bd04 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b100:	2800      	cmp	r0, #0
    b102:	d00e      	beq.n	b122 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x7a>
    b104:	4a09      	ldr	r2, [pc, #36]	; (b12c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x84>)
    b106:	6811      	ldr	r1, [r2, #0]
    b108:	0650      	lsls	r0, r2, #25
    b10a:	2c02      	cmp	r4, #2
    b10c:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    b110:	d008      	beq.n	b124 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x7c>
    b112:	f3c0 2006 	ubfx	r0, r0, #8, #7
    b116:	bf00      	nop
    b118:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    b11c:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    b120:	6010      	str	r0, [r2, #0]
    b122:	bd10      	pop	{r4, pc}
    b124:	f3c0 6006 	ubfx	r0, r0, #24, #7
    b128:	e7f6      	b.n	b118 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x70>
    b12a:	0000      	.short	0x0000
    b12c:	40001588 	.word	0x40001588
    b130:	480d      	ldr	r0, [pc, #52]	; (b168 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc0>)
    b132:	7e40      	ldrb	r0, [r0, #25]
    b134:	2825      	cmp	r0, #37	; 0x25
    b136:	d007      	beq.n	b148 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xa0>
    b138:	2826      	cmp	r0, #38	; 0x26
    b13a:	d007      	beq.n	b14c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xa4>
    b13c:	2827      	cmp	r0, #39	; 0x27
    b13e:	d007      	beq.n	b150 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xa8>
    b140:	280a      	cmp	r0, #10
    b142:	d807      	bhi.n	b154 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xac>
    b144:	2204      	movs	r2, #4
    b146:	e006      	b.n	b156 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xae>
    b148:	2102      	movs	r1, #2
    b14a:	e007      	b.n	b15c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xb4>
    b14c:	211a      	movs	r1, #26
    b14e:	e005      	b.n	b15c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xb4>
    b150:	2150      	movs	r1, #80	; 0x50
    b152:	e003      	b.n	b15c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xb4>
    b154:	2206      	movs	r2, #6
    b156:	eb02 0140 	add.w	r1, r2, r0, lsl #1
    b15a:	b2c9      	uxtb	r1, r1
    b15c:	4a03      	ldr	r2, [pc, #12]	; (b16c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc4>)
    b15e:	6011      	str	r1, [r2, #0]
    b160:	4902      	ldr	r1, [pc, #8]	; (b16c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc4>)
    b162:	314c      	adds	r1, #76	; 0x4c
    b164:	6008      	str	r0, [r1, #0]
    b166:	4770      	bx	lr
    b168:	20000dfc 	.word	0x20000dfc
    b16c:	40001508 	.word	0x40001508
    b170:	4912      	ldr	r1, [pc, #72]	; (b1bc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x114>)
    b172:	b508      	push	{r3, lr}
    b174:	f991 2018 	ldrsb.w	r2, [r1, #24]
    b178:	7e49      	ldrb	r1, [r1, #25]
    b17a:	2801      	cmp	r0, #1
    b17c:	d00a      	beq.n	b194 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xec>
    b17e:	2802      	cmp	r0, #2
    b180:	d00a      	beq.n	b198 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xf0>
    b182:	2804      	cmp	r0, #4
    b184:	d00a      	beq.n	b19c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xf4>
    b186:	2808      	cmp	r0, #8
    b188:	d00a      	beq.n	b1a0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xf8>
    b18a:	f240 31d7 	movw	r1, #983	; 0x3d7
    b18e:	2006      	movs	r0, #6
    b190:	f7f8 fdb8 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b194:	2000      	movs	r0, #0
    b196:	e004      	b.n	b1a2 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xfa>
    b198:	2001      	movs	r0, #1
    b19a:	e002      	b.n	b1a2 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xfa>
    b19c:	2003      	movs	r0, #3
    b19e:	e000      	b.n	b1a2 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xfa>
    b1a0:	2002      	movs	r0, #2
    b1a2:	466b      	mov	r3, sp
    b1a4:	f7f5 f91e 	bl	3e4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    b1a8:	b118      	cbz	r0, b1b2 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x10a>
    b1aa:	f44f 61a4 	mov.w	r1, #1312	; 0x520
    b1ae:	203e      	movs	r0, #62	; 0x3e
    b1b0:	e7ee      	b.n	b190 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xe8>
    b1b2:	f99d 0000 	ldrsb.w	r0, [sp]
    b1b6:	f000 fa09 	bl	b5cc <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    b1ba:	bd08      	pop	{r3, pc}
    b1bc:	20000dfc 	.word	0x20000dfc
    b1c0:	4803      	ldr	r0, [pc, #12]	; (b1d0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x128>)
    b1c2:	7a81      	ldrb	r1, [r0, #10]
    b1c4:	2901      	cmp	r1, #1
    b1c6:	d102      	bne.n	b1ce <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x126>
    b1c8:	7b40      	ldrb	r0, [r0, #13]
    b1ca:	f7ff bfd1 	b.w	b170 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc8>
    b1ce:	4770      	bx	lr
    b1d0:	20000dfc 	.word	0x20000dfc
    b1d4:	4805      	ldr	r0, [pc, #20]	; (b1ec <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x144>)
    b1d6:	7ac0      	ldrb	r0, [r0, #11]
    b1d8:	2801      	cmp	r0, #1
    b1da:	d003      	beq.n	b1e4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x13c>
    b1dc:	2802      	cmp	r0, #2
    b1de:	d103      	bne.n	b1e8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x140>
    b1e0:	f004 b9fa 	b.w	f5d8 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>
    b1e4:	f004 ba04 	b.w	f5f0 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>
    b1e8:	4770      	bx	lr
    b1ea:	0000      	.short	0x0000
    b1ec:	20000dfc 	.word	0x20000dfc
    b1f0:	4809      	ldr	r0, [pc, #36]	; (b218 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x170>)
    b1f2:	b508      	push	{r3, lr}
    b1f4:	2100      	movs	r1, #0
    b1f6:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    b1fa:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    b1fe:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    b202:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    b206:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    b20a:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    b20e:	4803      	ldr	r0, [pc, #12]	; (b21c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x174>)
    b210:	6800      	ldr	r0, [r0, #0]
    b212:	9000      	str	r0, [sp, #0]
    b214:	bd08      	pop	{r3, pc}
    b216:	0000      	.short	0x0000
    b218:	40001000 	.word	0x40001000
    b21c:	40001118 	.word	0x40001118
    b220:	4816      	ldr	r0, [pc, #88]	; (b27c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1d4>)
    b222:	b510      	push	{r4, lr}
    b224:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
    b228:	07c1      	lsls	r1, r0, #31
    b22a:	d026      	beq.n	b27a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1d2>
    b22c:	0781      	lsls	r1, r0, #30
    b22e:	d513      	bpl.n	b258 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1b0>
    b230:	4813      	ldr	r0, [pc, #76]	; (b280 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1d8>)
    b232:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    b236:	f041 0101 	orr.w	r1, r1, #1
    b23a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b23e:	4811      	ldr	r0, [pc, #68]	; (b284 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1dc>)
    b240:	6800      	ldr	r0, [r0, #0]
    b242:	280b      	cmp	r0, #11
    b244:	d005      	beq.n	b252 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1aa>
    b246:	280a      	cmp	r0, #10
    b248:	d003      	beq.n	b252 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1aa>
    b24a:	2803      	cmp	r0, #3
    b24c:	d001      	beq.n	b252 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1aa>
    b24e:	2802      	cmp	r0, #2
    b250:	d113      	bne.n	b27a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1d2>
    b252:	f240 514b 	movw	r1, #1355	; 0x54b
    b256:	e00d      	b.n	b274 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1cc>
    b258:	0740      	lsls	r0, r0, #29
    b25a:	d50e      	bpl.n	b27a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1d2>
    b25c:	4808      	ldr	r0, [pc, #32]	; (b280 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1d8>)
    b25e:	490a      	ldr	r1, [pc, #40]	; (b288 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1e0>)
    b260:	3008      	adds	r0, #8
    b262:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    b266:	4809      	ldr	r0, [pc, #36]	; (b28c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1e4>)
    b268:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
    b26c:	2801      	cmp	r0, #1
    b26e:	d104      	bne.n	b27a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1d2>
    b270:	f240 5152 	movw	r1, #1362	; 0x552
    b274:	203e      	movs	r0, #62	; 0x3e
    b276:	f7f8 fd45 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b27a:	bd10      	pop	{r4, pc}
    b27c:	20000dfc 	.word	0x20000dfc
    b280:	40001000 	.word	0x40001000
    b284:	40001550 	.word	0x40001550
    b288:	4001f098 	.word	0x4001f098
    b28c:	40008000 	.word	0x40008000
    b290:	4808      	ldr	r0, [pc, #32]	; (b2b4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x20c>)
    b292:	4601      	mov	r1, r0
    b294:	7a42      	ldrb	r2, [r0, #9]
    b296:	f891 1034 	ldrb.w	r1, [r1, #52]	; 0x34
    b29a:	b112      	cbz	r2, b2a2 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1fa>
    b29c:	2a01      	cmp	r2, #1
    b29e:	d003      	beq.n	b2a8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x200>
    b2a0:	e006      	b.n	b2b0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x208>
    b2a2:	f041 0102 	orr.w	r1, r1, #2
    b2a6:	e001      	b.n	b2ac <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x204>
    b2a8:	f041 0104 	orr.w	r1, r1, #4
    b2ac:	f880 1034 	strb.w	r1, [r0, #52]	; 0x34
    b2b0:	f7ff bfb6 	b.w	b220 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x178>
    b2b4:	20000dfc 	.word	0x20000dfc
    b2b8:	b510      	push	{r4, lr}
    b2ba:	f000 fd23 	bl	bd04 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b2be:	2800      	cmp	r0, #0
    b2c0:	d108      	bne.n	b2d4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x22c>
    b2c2:	f000 fd0f 	bl	bce4 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    b2c6:	2800      	cmp	r0, #0
    b2c8:	d104      	bne.n	b2d4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x22c>
    b2ca:	4803      	ldr	r0, [pc, #12]	; (b2d8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x230>)
    b2cc:	6801      	ldr	r1, [r0, #0]
    b2ce:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    b2d2:	6001      	str	r1, [r0, #0]
    b2d4:	bd10      	pop	{r4, pc}
    b2d6:	0000      	.short	0x0000
    b2d8:	40001568 	.word	0x40001568
    b2dc:	b538      	push	{r3, r4, r5, lr}
    b2de:	4d36      	ldr	r5, [pc, #216]	; (b3b8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x310>)
    b2e0:	2400      	movs	r4, #0
    b2e2:	7c28      	ldrb	r0, [r5, #16]
    b2e4:	b120      	cbz	r0, b2f0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x248>
    b2e6:	4835      	ldr	r0, [pc, #212]	; (b3bc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x314>)
    b2e8:	f8d0 0144 	ldr.w	r0, [r0, #324]	; 0x144
    b2ec:	2801      	cmp	r0, #1
    b2ee:	d007      	beq.n	b300 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x258>
    b2f0:	2200      	movs	r2, #0
    b2f2:	7ae9      	ldrb	r1, [r5, #11]
    b2f4:	4832      	ldr	r0, [pc, #200]	; (b3c0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x318>)
    b2f6:	2901      	cmp	r1, #1
    b2f8:	d004      	beq.n	b304 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x25c>
    b2fa:	2902      	cmp	r1, #2
    b2fc:	d00a      	beq.n	b314 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x26c>
    b2fe:	e019      	b.n	b334 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x28c>
    b300:	2201      	movs	r2, #1
    b302:	e7f6      	b.n	b2f2 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x24a>
    b304:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    b308:	2901      	cmp	r1, #1
    b30a:	d001      	beq.n	b310 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x268>
    b30c:	2400      	movs	r4, #0
    b30e:	e011      	b.n	b334 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x28c>
    b310:	2408      	movs	r4, #8
    b312:	e00f      	b.n	b334 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x28c>
    b314:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    b318:	2901      	cmp	r1, #1
    b31a:	d006      	beq.n	b32a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x282>
    b31c:	2100      	movs	r1, #0
    b31e:	4b29      	ldr	r3, [pc, #164]	; (b3c4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x31c>)
    b320:	681b      	ldr	r3, [r3, #0]
    b322:	2b01      	cmp	r3, #1
    b324:	d003      	beq.n	b32e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x286>
    b326:	2404      	movs	r4, #4
    b328:	e002      	b.n	b330 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x288>
    b32a:	2102      	movs	r1, #2
    b32c:	e7f7      	b.n	b31e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x276>
    b32e:	2400      	movs	r4, #0
    b330:	430c      	orrs	r4, r1
    b332:	4314      	orrs	r4, r2
    b334:	f014 0f0b 	tst.w	r4, #11
    b338:	d105      	bne.n	b346 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x29e>
    b33a:	f8d0 1110 	ldr.w	r1, [r0, #272]	; 0x110
    b33e:	2901      	cmp	r1, #1
    b340:	d006      	beq.n	b350 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2a8>
    b342:	2100      	movs	r1, #0
    b344:	430c      	orrs	r4, r1
    b346:	4920      	ldr	r1, [pc, #128]	; (b3c8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x320>)
    b348:	7809      	ldrb	r1, [r1, #0]
    b34a:	07c9      	lsls	r1, r1, #31
    b34c:	d002      	beq.n	b354 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2ac>
    b34e:	e023      	b.n	b398 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2f0>
    b350:	2110      	movs	r1, #16
    b352:	e7f7      	b.n	b344 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x29c>
    b354:	491d      	ldr	r1, [pc, #116]	; (b3cc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x324>)
    b356:	6809      	ldr	r1, [r1, #0]
    b358:	f011 0fff 	tst.w	r1, #255	; 0xff
    b35c:	d003      	beq.n	b366 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2be>
    b35e:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    b362:	2a01      	cmp	r2, #1
    b364:	d000      	beq.n	b368 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2c0>
    b366:	2200      	movs	r2, #0
    b368:	f885 202a 	strb.w	r2, [r5, #42]	; 0x2a
    b36c:	f011 0fff 	tst.w	r1, #255	; 0xff
    b370:	d003      	beq.n	b37a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2d2>
    b372:	f8d0 0118 	ldr.w	r0, [r0, #280]	; 0x118
    b376:	2801      	cmp	r0, #1
    b378:	d000      	beq.n	b37c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2d4>
    b37a:	2000      	movs	r0, #0
    b37c:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
    b380:	4810      	ldr	r0, [pc, #64]	; (b3c4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x31c>)
    b382:	3010      	adds	r0, #16
    b384:	6800      	ldr	r0, [r0, #0]
    b386:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    b38a:	f7ff f857 	bl	a43c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
    b38e:	2801      	cmp	r0, #1
    b390:	d000      	beq.n	b394 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2ec>
    b392:	2000      	movs	r0, #0
    b394:	f885 002d 	strb.w	r0, [r5, #45]	; 0x2d
    b398:	f7ff ff2a 	bl	b1f0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x148>
    b39c:	06e0      	lsls	r0, r4, #27
    b39e:	d506      	bpl.n	b3ae <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x306>
    b3a0:	0720      	lsls	r0, r4, #28
    b3a2:	d404      	bmi.n	b3ae <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x306>
    b3a4:	7ae8      	ldrb	r0, [r5, #11]
    b3a6:	2801      	cmp	r0, #1
    b3a8:	d101      	bne.n	b3ae <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x306>
    b3aa:	f044 0420 	orr.w	r4, r4, #32
    b3ae:	4808      	ldr	r0, [pc, #32]	; (b3d0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x328>)
    b3b0:	6800      	ldr	r0, [r0, #0]
    b3b2:	9000      	str	r0, [sp, #0]
    b3b4:	4620      	mov	r0, r4
    b3b6:	bd38      	pop	{r3, r4, r5, pc}
    b3b8:	20000dfc 	.word	0x20000dfc
    b3bc:	40008000 	.word	0x40008000
    b3c0:	40001000 	.word	0x40001000
    b3c4:	40001400 	.word	0x40001400
    b3c8:	20000284 	.word	0x20000284
    b3cc:	40001640 	.word	0x40001640
    b3d0:	40008144 	.word	0x40008144
    b3d4:	4808      	ldr	r0, [pc, #32]	; (b3f8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x350>)
    b3d6:	b510      	push	{r4, lr}
    b3d8:	6800      	ldr	r0, [r0, #0]
    b3da:	f000 000f 	and.w	r0, r0, #15
    b3de:	2803      	cmp	r0, #3
    b3e0:	d006      	beq.n	b3f0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x348>
    b3e2:	2804      	cmp	r0, #4
    b3e4:	d006      	beq.n	b3f4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x34c>
    b3e6:	f240 2136 	movw	r1, #566	; 0x236
    b3ea:	203e      	movs	r0, #62	; 0x3e
    b3ec:	f7f8 fc8a 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b3f0:	2001      	movs	r0, #1
    b3f2:	bd10      	pop	{r4, pc}
    b3f4:	2002      	movs	r0, #2
    b3f6:	bd10      	pop	{r4, pc}
    b3f8:	40001510 	.word	0x40001510
    b3fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b400:	4c25      	ldr	r4, [pc, #148]	; (b498 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3f0>)
    b402:	460d      	mov	r5, r1
    b404:	7aa2      	ldrb	r2, [r4, #10]
    b406:	b19a      	cbz	r2, b430 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x388>
    b408:	7b21      	ldrb	r1, [r4, #12]
    b40a:	078b      	lsls	r3, r1, #30
    b40c:	d503      	bpl.n	b416 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x36e>
    b40e:	0783      	lsls	r3, r0, #30
    b410:	d501      	bpl.n	b416 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x36e>
    b412:	0743      	lsls	r3, r0, #29
    b414:	d41c      	bmi.n	b450 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a8>
    b416:	06cb      	lsls	r3, r1, #27
    b418:	d505      	bpl.n	b426 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x37e>
    b41a:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
    b41e:	b113      	cbz	r3, b426 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x37e>
    b420:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
    b424:	b1a3      	cbz	r3, b450 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a8>
    b426:	070b      	lsls	r3, r1, #28
    b428:	d50b      	bpl.n	b442 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x39a>
    b42a:	7f23      	ldrb	r3, [r4, #28]
    b42c:	b983      	cbnz	r3, b450 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a8>
    b42e:	e008      	b.n	b442 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x39a>
    b430:	491a      	ldr	r1, [pc, #104]	; (b49c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3f4>)
    b432:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    b436:	6008      	str	r0, [r1, #0]
    b438:	f000 f868 	bl	b50c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x464>
    b43c:	2000      	movs	r0, #0
    b43e:	7420      	strb	r0, [r4, #16]
    b440:	e028      	b.n	b494 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3ec>
    b442:	0749      	lsls	r1, r1, #29
    b444:	d501      	bpl.n	b44a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a2>
    b446:	7f61      	ldrb	r1, [r4, #29]
    b448:	b111      	cbz	r1, b450 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a8>
    b44a:	f010 0f11 	tst.w	r0, #17
    b44e:	d002      	beq.n	b456 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3ae>
    b450:	f7ff f98a 	bl	a768 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    b454:	e01e      	b.n	b494 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3ec>
    b456:	2a01      	cmp	r2, #1
    b458:	d001      	beq.n	b45e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3b6>
    b45a:	2601      	movs	r6, #1
    b45c:	e000      	b.n	b460 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3b8>
    b45e:	2600      	movs	r6, #0
    b460:	7a60      	ldrb	r0, [r4, #9]
    b462:	2801      	cmp	r0, #1
    b464:	d00e      	beq.n	b484 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3dc>
    b466:	2700      	movs	r7, #0
    b468:	f000 f850 	bl	b50c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x464>
    b46c:	2196      	movs	r1, #150	; 0x96
    b46e:	4630      	mov	r0, r6
    b470:	f000 f864 	bl	b53c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x494>
    b474:	4601      	mov	r1, r0
    b476:	b14f      	cbz	r7, b48c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3e4>
    b478:	353b      	adds	r5, #59	; 0x3b
    b47a:	428d      	cmp	r5, r1
    b47c:	d904      	bls.n	b488 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3e0>
    b47e:	2000      	movs	r0, #0
    b480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b484:	2701      	movs	r7, #1
    b486:	e7ef      	b.n	b468 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3c0>
    b488:	2001      	movs	r0, #1
    b48a:	7260      	strb	r0, [r4, #9]
    b48c:	7b62      	ldrb	r2, [r4, #13]
    b48e:	4630      	mov	r0, r6
    b490:	f7ff fc1c 	bl	accc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    b494:	2001      	movs	r0, #1
    b496:	e7f3      	b.n	b480 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3d8>
    b498:	20000dfc 	.word	0x20000dfc
    b49c:	4001f508 	.word	0x4001f508
    b4a0:	4805      	ldr	r0, [pc, #20]	; (b4b8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x410>)
    b4a2:	2100      	movs	r1, #0
    b4a4:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
    b4a8:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    b4ac:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    b4b0:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b4b4:	4770      	bx	lr
    b4b6:	0000      	.short	0x0000
    b4b8:	40001000 	.word	0x40001000
    b4bc:	4804      	ldr	r0, [pc, #16]	; (b4d0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x428>)
    b4be:	6b01      	ldr	r1, [r0, #48]	; 0x30
    b4c0:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    b4c4:	6301      	str	r1, [r0, #48]	; 0x30
    b4c6:	4903      	ldr	r1, [pc, #12]	; (b4d4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x42c>)
    b4c8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    b4cc:	6008      	str	r0, [r1, #0]
    b4ce:	4770      	bx	lr
    b4d0:	20000dfc 	.word	0x20000dfc
    b4d4:	4001f504 	.word	0x4001f504
    b4d8:	4905      	ldr	r1, [pc, #20]	; (b4f0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x448>)
    b4da:	2000      	movs	r0, #0
    b4dc:	6008      	str	r0, [r1, #0]
    b4de:	1f09      	subs	r1, r1, #4
    b4e0:	6008      	str	r0, [r1, #0]
    b4e2:	1f09      	subs	r1, r1, #4
    b4e4:	6008      	str	r0, [r1, #0]
    b4e6:	4902      	ldr	r1, [pc, #8]	; (b4f0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x448>)
    b4e8:	1d09      	adds	r1, r1, #4
    b4ea:	6008      	str	r0, [r1, #0]
    b4ec:	4770      	bx	lr
    b4ee:	0000      	.short	0x0000
    b4f0:	40008548 	.word	0x40008548
    b4f4:	4903      	ldr	r1, [pc, #12]	; (b504 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x45c>)
    b4f6:	7a49      	ldrb	r1, [r1, #9]
    b4f8:	2900      	cmp	r1, #0
    b4fa:	d102      	bne.n	b502 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x45a>
    b4fc:	4902      	ldr	r1, [pc, #8]	; (b508 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x460>)
    b4fe:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    b502:	4770      	bx	lr
    b504:	20000dfc 	.word	0x20000dfc
    b508:	4001f098 	.word	0x4001f098
    b50c:	4803      	ldr	r0, [pc, #12]	; (b51c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x474>)
    b50e:	2100      	movs	r1, #0
    b510:	7241      	strb	r1, [r0, #9]
    b512:	7281      	strb	r1, [r0, #10]
    b514:	72c1      	strb	r1, [r0, #11]
    b516:	2101      	movs	r1, #1
    b518:	7301      	strb	r1, [r0, #12]
    b51a:	4770      	bx	lr
    b51c:	20000dfc 	.word	0x20000dfc
    b520:	4a05      	ldr	r2, [pc, #20]	; (b538 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x490>)
    b522:	7a52      	ldrb	r2, [r2, #9]
    b524:	2a01      	cmp	r2, #1
    b526:	d006      	beq.n	b536 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x48e>
    b528:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b52c:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    b530:	fbb1 f1f2 	udiv	r1, r1, r2
    b534:	1a40      	subs	r0, r0, r1
    b536:	4770      	bx	lr
    b538:	20000dfc 	.word	0x20000dfc
    b53c:	b570      	push	{r4, r5, r6, lr}
    b53e:	4c13      	ldr	r4, [pc, #76]	; (b58c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4e4>)
    b540:	4603      	mov	r3, r0
    b542:	460d      	mov	r5, r1
    b544:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
    b548:	2000      	movs	r0, #0
    b54a:	b15a      	cbz	r2, b564 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4bc>
    b54c:	4621      	mov	r1, r4
    b54e:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    b552:	b163      	cbz	r3, b56e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4c6>
    b554:	2b01      	cmp	r3, #1
    b556:	d111      	bne.n	b57c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4d4>
    b558:	2a01      	cmp	r2, #1
    b55a:	4628      	mov	r0, r5
    b55c:	d012      	beq.n	b584 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4dc>
    b55e:	f004 f915 	bl	f78c <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    b562:	e009      	b.n	b578 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4d0>
    b564:	f240 7186 	movw	r1, #1926	; 0x786
    b568:	203e      	movs	r0, #62	; 0x3e
    b56a:	f7f8 fbcb 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b56e:	2a01      	cmp	r2, #1
    b570:	4628      	mov	r0, r5
    b572:	d004      	beq.n	b57e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4d6>
    b574:	f004 f918 	bl	f7a8 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    b578:	6a61      	ldr	r1, [r4, #36]	; 0x24
    b57a:	4408      	add	r0, r1
    b57c:	bd70      	pop	{r4, r5, r6, pc}
    b57e:	f004 f92d 	bl	f7dc <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    b582:	e7f9      	b.n	b578 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4d0>
    b584:	f004 f91b 	bl	f7be <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    b588:	e7f6      	b.n	b578 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4d0>
    b58a:	0000      	.short	0x0000
    b58c:	20000dfc 	.word	0x20000dfc
    b590:	b510      	push	{r4, lr}
    b592:	2200      	movs	r2, #0
    b594:	2901      	cmp	r1, #1
    b596:	d008      	beq.n	b5aa <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x502>
    b598:	2902      	cmp	r1, #2
    b59a:	d004      	beq.n	b5a6 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4fe>
    b59c:	f44f 7121 	mov.w	r1, #644	; 0x284
    b5a0:	203e      	movs	r0, #62	; 0x3e
    b5a2:	f7f8 fbaf 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b5a6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    b5aa:	4905      	ldr	r1, [pc, #20]	; (b5c0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x518>)
    b5ac:	430a      	orrs	r2, r1
    b5ae:	4905      	ldr	r1, [pc, #20]	; (b5c4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x51c>)
    b5b0:	600a      	str	r2, [r1, #0]
    b5b2:	4905      	ldr	r1, [pc, #20]	; (b5c8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x520>)
    b5b4:	4308      	orrs	r0, r1
    b5b6:	4903      	ldr	r1, [pc, #12]	; (b5c4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x51c>)
    b5b8:	1d09      	adds	r1, r1, #4
    b5ba:	6008      	str	r0, [r1, #0]
    b5bc:	bd10      	pop	{r4, pc}
    b5be:	0000      	.short	0x0000
    b5c0:	00100108 	.word	0x00100108
    b5c4:	40001514 	.word	0x40001514
    b5c8:	02030000 	.word	0x02030000

0000b5cc <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    b5cc:	4901      	ldr	r1, [pc, #4]	; (b5d4 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    b5ce:	b2c0      	uxtb	r0, r0
    b5d0:	6008      	str	r0, [r1, #0]
    b5d2:	4770      	bx	lr
    b5d4:	4000150c 	.word	0x4000150c

0000b5d8 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>:
    b5d8:	b510      	push	{r4, lr}
    b5da:	4907      	ldr	r1, [pc, #28]	; (b5f8 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x20>)
    b5dc:	2801      	cmp	r0, #1
    b5de:	d005      	beq.n	b5ec <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x14>
    b5e0:	2802      	cmp	r0, #2
    b5e2:	d005      	beq.n	b5f0 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x18>
    b5e4:	2197      	movs	r1, #151	; 0x97
    b5e6:	203f      	movs	r0, #63	; 0x3f
    b5e8:	f7f8 fb8c 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b5ec:	2003      	movs	r0, #3
    b5ee:	e000      	b.n	b5f2 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1a>
    b5f0:	2004      	movs	r0, #4
    b5f2:	6008      	str	r0, [r1, #0]
    b5f4:	bd10      	pop	{r4, pc}
    b5f6:	0000      	.short	0x0000
    b5f8:	40001510 	.word	0x40001510

0000b5fc <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>:
    b5fc:	4770      	bx	lr
    b5fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b602:	000d      	movs	r5, r1
    b604:	4604      	mov	r4, r0
    b606:	f04f 0602 	mov.w	r6, #2
    b60a:	f04f 0701 	mov.w	r7, #1
    b60e:	d008      	beq.n	b622 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x26>
    b610:	7828      	ldrb	r0, [r5, #0]
    b612:	b1d0      	cbz	r0, b64a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4e>
    b614:	2801      	cmp	r0, #1
    b616:	d007      	beq.n	b628 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2c>
    b618:	2802      	cmp	r0, #2
    b61a:	d014      	beq.n	b646 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4a>
    b61c:	2803      	cmp	r0, #3
    b61e:	d13b      	bne.n	b698 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x9c>
    b620:	e016      	b.n	b650 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x54>
    b622:	f880 7020 	strb.w	r7, [r0, #32]
    b626:	e00e      	b.n	b646 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4a>
    b628:	6868      	ldr	r0, [r5, #4]
    b62a:	28c8      	cmp	r0, #200	; 0xc8
    b62c:	d303      	bcc.n	b636 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x3a>
    b62e:	2104      	movs	r1, #4
    b630:	f7f5 ff02 	bl	1438 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    b634:	b108      	cbz	r0, b63a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x3e>
    b636:	2600      	movs	r6, #0
    b638:	e007      	b.n	b64a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4e>
    b63a:	4620      	mov	r0, r4
    b63c:	6869      	ldr	r1, [r5, #4]
    b63e:	f000 f92a 	bl	b896 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x29a>
    b642:	2601      	movs	r6, #1
    b644:	e001      	b.n	b64a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4e>
    b646:	f7f4 ff15 	bl	474 <CONFIG_BT_HCI_ECC_STACK_SIZE>
    b64a:	4630      	mov	r0, r6
    b64c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b650:	7820      	ldrb	r0, [r4, #0]
    b652:	2800      	cmp	r0, #0
    b654:	d1f7      	bne.n	b646 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4a>
    b656:	6868      	ldr	r0, [r5, #4]
    b658:	f7f4 fede 	bl	418 <CONFIG_MAIN_STACK_SIZE+0x18>
    b65c:	b1e0      	cbz	r0, b698 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x9c>
    b65e:	6869      	ldr	r1, [r5, #4]
    b660:	7808      	ldrb	r0, [r1, #0]
    b662:	b128      	cbz	r0, b670 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x74>
    b664:	78a0      	ldrb	r0, [r4, #2]
    b666:	2805      	cmp	r0, #5
    b668:	d007      	beq.n	b67a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x7e>
    b66a:	f240 1179 	movw	r1, #377	; 0x179
    b66e:	e010      	b.n	b692 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x96>
    b670:	4620      	mov	r0, r4
    b672:	f000 f918 	bl	b8a6 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2aa>
    b676:	7067      	strb	r7, [r4, #1]
    b678:	e7e5      	b.n	b646 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4a>
    b67a:	4620      	mov	r0, r4
    b67c:	f000 f92b 	bl	b8d6 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2da>
    b680:	78e0      	ldrb	r0, [r4, #3]
    b682:	f104 010c 	add.w	r1, r4, #12
    b686:	f000 f80a 	bl	b69e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xa2>
    b68a:	2800      	cmp	r0, #0
    b68c:	d1db      	bne.n	b646 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4a>
    b68e:	f240 117b 	movw	r1, #379	; 0x17b
    b692:	206a      	movs	r0, #106	; 0x6a
    b694:	f7f8 f8a0 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b698:	f884 7020 	strb.w	r7, [r4, #32]
    b69c:	e7d3      	b.n	b646 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4a>
    b69e:	f7f6 b901 	b.w	18a4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    b6a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b6a6:	460d      	mov	r5, r1
    b6a8:	0004      	movs	r4, r0
    b6aa:	d00b      	beq.n	b6c4 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xc8>
    b6ac:	7926      	ldrb	r6, [r4, #4]
    b6ae:	2700      	movs	r7, #0
    b6b0:	2002      	movs	r0, #2
    b6b2:	2d09      	cmp	r5, #9
    b6b4:	d27b      	bcs.n	b7ae <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x1b2>
    b6b6:	e8df f005 	tbb	[pc, r5]
    b6ba:	1008      	.short	0x1008
    b6bc:	645b2e2e 	.word	0x645b2e2e
    b6c0:	0086977c 	.word	0x0086977c
    b6c4:	f240 1193 	movw	r1, #403	; 0x193
    b6c8:	e0e2      	b.n	b890 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b6ca:	78a0      	ldrb	r0, [r4, #2]
    b6cc:	2804      	cmp	r0, #4
    b6ce:	d06f      	beq.n	b7b0 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x1b4>
    b6d0:	2803      	cmp	r0, #3
    b6d2:	d0fc      	beq.n	b6ce <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xd2>
    b6d4:	f44f 71cf 	mov.w	r1, #414	; 0x19e
    b6d8:	e0da      	b.n	b890 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b6da:	78a0      	ldrb	r0, [r4, #2]
    b6dc:	2804      	cmp	r0, #4
    b6de:	d004      	beq.n	b6ea <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xee>
    b6e0:	2803      	cmp	r0, #3
    b6e2:	d002      	beq.n	b6ea <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xee>
    b6e4:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
    b6e8:	e0d2      	b.n	b890 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b6ea:	2005      	movs	r0, #5
    b6ec:	70a0      	strb	r0, [r4, #2]
    b6ee:	f884 7020 	strb.w	r7, [r4, #32]
    b6f2:	7820      	ldrb	r0, [r4, #0]
    b6f4:	bb80      	cbnz	r0, b758 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x15c>
    b6f6:	2100      	movs	r1, #0
    b6f8:	4620      	mov	r0, r4
    b6fa:	f000 f8cc 	bl	b896 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x29a>
    b6fe:	7b20      	ldrb	r0, [r4, #12]
    b700:	2801      	cmp	r0, #1
    b702:	d004      	beq.n	b70e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x112>
    b704:	69a0      	ldr	r0, [r4, #24]
    b706:	61e0      	str	r0, [r4, #28]
    b708:	2100      	movs	r1, #0
    b70a:	68a2      	ldr	r2, [r4, #8]
    b70c:	e041      	b.n	b792 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x196>
    b70e:	78e0      	ldrb	r0, [r4, #3]
    b710:	f7f5 ffaa 	bl	1668 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>
    b714:	e7f7      	b.n	b706 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x10a>
    b716:	78a1      	ldrb	r1, [r4, #2]
    b718:	2904      	cmp	r1, #4
    b71a:	d004      	beq.n	b726 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x12a>
    b71c:	2903      	cmp	r1, #3
    b71e:	d002      	beq.n	b726 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x12a>
    b720:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
    b724:	e0b4      	b.n	b890 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b726:	7822      	ldrb	r2, [r4, #0]
    b728:	b122      	cbz	r2, b734 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x138>
    b72a:	4621      	mov	r1, r4
    b72c:	4630      	mov	r0, r6
    b72e:	f000 f8ee 	bl	b90e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x312>
    b732:	e0a4      	b.n	b87e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x282>
    b734:	2904      	cmp	r1, #4
    b736:	d000      	beq.n	b73a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x13e>
    b738:	2001      	movs	r0, #1
    b73a:	70a0      	strb	r0, [r4, #2]
    b73c:	68a2      	ldr	r2, [r4, #8]
    b73e:	2d02      	cmp	r5, #2
    b740:	d00b      	beq.n	b75a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x15e>
    b742:	2106      	movs	r1, #6
    b744:	4630      	mov	r0, r6
    b746:	4790      	blx	r2
    b748:	2800      	cmp	r0, #0
    b74a:	d06b      	beq.n	b824 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x228>
    b74c:	7800      	ldrb	r0, [r0, #0]
    b74e:	2800      	cmp	r0, #0
    b750:	d068      	beq.n	b824 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x228>
    b752:	f44f 71ed 	mov.w	r1, #474	; 0x1da
    b756:	e09b      	b.n	b890 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b758:	e031      	b.n	b7be <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x1c2>
    b75a:	2105      	movs	r1, #5
    b75c:	4630      	mov	r0, r6
    b75e:	4790      	blx	r2
    b760:	2800      	cmp	r0, #0
    b762:	d071      	beq.n	b848 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
    b764:	7800      	ldrb	r0, [r0, #0]
    b766:	2800      	cmp	r0, #0
    b768:	d06e      	beq.n	b848 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
    b76a:	f240 11d5 	movw	r1, #469	; 0x1d5
    b76e:	e08f      	b.n	b890 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b770:	78a0      	ldrb	r0, [r4, #2]
    b772:	2805      	cmp	r0, #5
    b774:	d002      	beq.n	b77c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x180>
    b776:	f240 11e1 	movw	r1, #481	; 0x1e1
    b77a:	e089      	b.n	b890 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b77c:	2102      	movs	r1, #2
    b77e:	68a2      	ldr	r2, [r4, #8]
    b780:	e007      	b.n	b792 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x196>
    b782:	78a0      	ldrb	r0, [r4, #2]
    b784:	2805      	cmp	r0, #5
    b786:	d002      	beq.n	b78e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x192>
    b788:	f240 11e7 	movw	r1, #487	; 0x1e7
    b78c:	e080      	b.n	b890 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b78e:	68a2      	ldr	r2, [r4, #8]
    b790:	2101      	movs	r1, #1
    b792:	4630      	mov	r0, r6
    b794:	4790      	blx	r2
    b796:	4601      	mov	r1, r0
    b798:	4620      	mov	r0, r4
    b79a:	f7ff ff30 	bl	b5fe <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2>
    b79e:	2802      	cmp	r0, #2
    b7a0:	d06d      	beq.n	b87e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x282>
    b7a2:	b3f0      	cbz	r0, b822 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x226>
    b7a4:	2801      	cmp	r0, #1
    b7a6:	d064      	beq.n	b872 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x276>
    b7a8:	f240 2127 	movw	r1, #551	; 0x227
    b7ac:	e070      	b.n	b890 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b7ae:	e05d      	b.n	b86c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x270>
    b7b0:	e067      	b.n	b882 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x286>
    b7b2:	78a0      	ldrb	r0, [r4, #2]
    b7b4:	2805      	cmp	r0, #5
    b7b6:	d002      	beq.n	b7be <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x1c2>
    b7b8:	f240 11ed 	movw	r1, #493	; 0x1ed
    b7bc:	e068      	b.n	b890 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b7be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b7c2:	f7f4 be57 	b.w	474 <CONFIG_BT_HCI_ECC_STACK_SIZE>
    b7c6:	78a0      	ldrb	r0, [r4, #2]
    b7c8:	2805      	cmp	r0, #5
    b7ca:	d002      	beq.n	b7d2 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x1d6>
    b7cc:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
    b7d0:	e05e      	b.n	b890 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b7d2:	68a2      	ldr	r2, [r4, #8]
    b7d4:	210a      	movs	r1, #10
    b7d6:	4630      	mov	r0, r6
    b7d8:	4790      	blx	r2
    b7da:	4601      	mov	r1, r0
    b7dc:	4620      	mov	r0, r4
    b7de:	f7ff ff0e 	bl	b5fe <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2>
    b7e2:	f240 11f5 	movw	r1, #501	; 0x1f5
    b7e6:	e053      	b.n	b890 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b7e8:	78a1      	ldrb	r1, [r4, #2]
    b7ea:	2905      	cmp	r1, #5
    b7ec:	d006      	beq.n	b7fc <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x200>
    b7ee:	7862      	ldrb	r2, [r4, #1]
    b7f0:	b10a      	cbz	r2, b7f6 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x1fa>
    b7f2:	2903      	cmp	r1, #3
    b7f4:	d002      	beq.n	b7fc <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x200>
    b7f6:	f240 11f9 	movw	r1, #505	; 0x1f9
    b7fa:	e049      	b.n	b890 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b7fc:	7821      	ldrb	r1, [r4, #0]
    b7fe:	b129      	cbz	r1, b80c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x210>
    b800:	4621      	mov	r1, r4
    b802:	4630      	mov	r0, r6
    b804:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b808:	f000 b881 	b.w	b90e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x312>
    b80c:	f894 1020 	ldrb.w	r1, [r4, #32]
    b810:	b189      	cbz	r1, b836 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x23a>
    b812:	f884 7020 	strb.w	r7, [r4, #32]
    b816:	70a0      	strb	r0, [r4, #2]
    b818:	68a2      	ldr	r2, [r4, #8]
    b81a:	2108      	movs	r1, #8
    b81c:	4630      	mov	r0, r6
    b81e:	4790      	blx	r2
    b820:	e001      	b.n	b826 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x22a>
    b822:	e029      	b.n	b878 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x27c>
    b824:	e02b      	b.n	b87e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x282>
    b826:	2800      	cmp	r0, #0
    b828:	d00e      	beq.n	b848 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
    b82a:	7800      	ldrb	r0, [r0, #0]
    b82c:	2800      	cmp	r0, #0
    b82e:	d00b      	beq.n	b848 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
    b830:	f240 2105 	movw	r1, #517	; 0x205
    b834:	e02c      	b.n	b890 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b836:	7861      	ldrb	r1, [r4, #1]
    b838:	b159      	cbz	r1, b852 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x256>
    b83a:	78e0      	ldrb	r0, [r4, #3]
    b83c:	f104 010c 	add.w	r1, r4, #12
    b840:	f7ff ff2d 	bl	b69e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xa2>
    b844:	b110      	cbz	r0, b84c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x250>
    b846:	7067      	strb	r7, [r4, #1]
    b848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b84c:	f240 2109 	movw	r1, #521	; 0x209
    b850:	e01e      	b.n	b890 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b852:	70a0      	strb	r0, [r4, #2]
    b854:	68a2      	ldr	r2, [r4, #8]
    b856:	2107      	movs	r1, #7
    b858:	4630      	mov	r0, r6
    b85a:	4790      	blx	r2
    b85c:	2800      	cmp	r0, #0
    b85e:	d0f3      	beq.n	b848 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
    b860:	7800      	ldrb	r0, [r0, #0]
    b862:	2800      	cmp	r0, #0
    b864:	d0f0      	beq.n	b848 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
    b866:	f240 2111 	movw	r1, #529	; 0x211
    b86a:	e011      	b.n	b890 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b86c:	f240 2116 	movw	r1, #534	; 0x216
    b870:	e00e      	b.n	b890 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b872:	2104      	movs	r1, #4
    b874:	68a2      	ldr	r2, [r4, #8]
    b876:	e78c      	b.n	b792 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x196>
    b878:	2103      	movs	r1, #3
    b87a:	68a2      	ldr	r2, [r4, #8]
    b87c:	e789      	b.n	b792 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x196>
    b87e:	2d00      	cmp	r5, #0
    b880:	d1e2      	bne.n	b848 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
    b882:	f000 f8f2 	bl	ba6a <sym_WGWJTNZTDUUYDCZS4UGNX4L4JID5HLG6XRROR3Q>
    b886:	6800      	ldr	r0, [r0, #0]
    b888:	2800      	cmp	r0, #0
    b88a:	d0dd      	beq.n	b848 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
    b88c:	f240 2131 	movw	r1, #561	; 0x231
    b890:	206a      	movs	r0, #106	; 0x6a
    b892:	f7f7 ffa1 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b896:	4602      	mov	r2, r0
    b898:	7b03      	ldrb	r3, [r0, #12]
    b89a:	6900      	ldr	r0, [r0, #16]
    b89c:	4408      	add	r0, r1
    b89e:	6110      	str	r0, [r2, #16]
    b8a0:	3859      	subs	r0, #89	; 0x59
    b8a2:	f7f6 be5d 	b.w	2560 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    b8a6:	2201      	movs	r2, #1
    b8a8:	7302      	strb	r2, [r0, #12]
    b8aa:	2200      	movs	r2, #0
    b8ac:	75c2      	strb	r2, [r0, #23]
    b8ae:	790a      	ldrb	r2, [r1, #4]
    b8b0:	b16a      	cbz	r2, b8ce <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2d2>
    b8b2:	2200      	movs	r2, #0
    b8b4:	8282      	strh	r2, [r0, #20]
    b8b6:	794a      	ldrb	r2, [r1, #5]
    b8b8:	b15a      	cbz	r2, b8d2 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2d6>
    b8ba:	2204      	movs	r2, #4
    b8bc:	7582      	strb	r2, [r0, #22]
    b8be:	688a      	ldr	r2, [r1, #8]
    b8c0:	326a      	adds	r2, #106	; 0x6a
    b8c2:	6102      	str	r2, [r0, #16]
    b8c4:	68c9      	ldr	r1, [r1, #12]
    b8c6:	6181      	str	r1, [r0, #24]
    b8c8:	2103      	movs	r1, #3
    b8ca:	7081      	strb	r1, [r0, #2]
    b8cc:	4770      	bx	lr
    b8ce:	222b      	movs	r2, #43	; 0x2b
    b8d0:	e7f0      	b.n	b8b4 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2b8>
    b8d2:	2203      	movs	r2, #3
    b8d4:	e7f2      	b.n	b8bc <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2c0>
    b8d6:	b510      	push	{r4, lr}
    b8d8:	4604      	mov	r4, r0
    b8da:	2000      	movs	r0, #0
    b8dc:	7320      	strb	r0, [r4, #12]
    b8de:	75e0      	strb	r0, [r4, #23]
    b8e0:	7908      	ldrb	r0, [r1, #4]
    b8e2:	b180      	cbz	r0, b906 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x30a>
    b8e4:	2000      	movs	r0, #0
    b8e6:	82a0      	strh	r0, [r4, #20]
    b8e8:	7948      	ldrb	r0, [r1, #5]
    b8ea:	b170      	cbz	r0, b90a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x30e>
    b8ec:	2004      	movs	r0, #4
    b8ee:	75a0      	strb	r0, [r4, #22]
    b8f0:	68c8      	ldr	r0, [r1, #12]
    b8f2:	306a      	adds	r0, #106	; 0x6a
    b8f4:	6120      	str	r0, [r4, #16]
    b8f6:	6889      	ldr	r1, [r1, #8]
    b8f8:	69e0      	ldr	r0, [r4, #28]
    b8fa:	f7f5 fe5f 	bl	15bc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    b8fe:	61a0      	str	r0, [r4, #24]
    b900:	2004      	movs	r0, #4
    b902:	70a0      	strb	r0, [r4, #2]
    b904:	bd10      	pop	{r4, pc}
    b906:	202b      	movs	r0, #43	; 0x2b
    b908:	e7ed      	b.n	b8e6 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2ea>
    b90a:	2003      	movs	r0, #3
    b90c:	e7ef      	b.n	b8ee <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2f2>
    b90e:	b570      	push	{r4, r5, r6, lr}
    b910:	4605      	mov	r5, r0
    b912:	460c      	mov	r4, r1
    b914:	78c8      	ldrb	r0, [r1, #3]
    b916:	f7f6 fbf7 	bl	2108 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    b91a:	b178      	cbz	r0, b93c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x340>
    b91c:	4620      	mov	r0, r4
    b91e:	f000 f810 	bl	b942 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x346>
    b922:	68a2      	ldr	r2, [r4, #8]
    b924:	2109      	movs	r1, #9
    b926:	4628      	mov	r0, r5
    b928:	4790      	blx	r2
    b92a:	2800      	cmp	r0, #0
    b92c:	d008      	beq.n	b940 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x344>
    b92e:	7800      	ldrb	r0, [r0, #0]
    b930:	2800      	cmp	r0, #0
    b932:	d005      	beq.n	b940 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x344>
    b934:	21db      	movs	r1, #219	; 0xdb
    b936:	206a      	movs	r0, #106	; 0x6a
    b938:	f7f7 ff4e 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b93c:	21d7      	movs	r1, #215	; 0xd7
    b93e:	e7fa      	b.n	b936 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x33a>
    b940:	bd70      	pop	{r4, r5, r6, pc}
    b942:	2100      	movs	r1, #0
    b944:	7081      	strb	r1, [r0, #2]
    b946:	7001      	strb	r1, [r0, #0]
    b948:	7041      	strb	r1, [r0, #1]
    b94a:	4770      	bx	lr

0000b94c <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    b94c:	b570      	push	{r4, r5, r6, lr}
    b94e:	f7f4 fdeb 	bl	528 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    b952:	4605      	mov	r5, r0
    b954:	2400      	movs	r4, #0
    b956:	e006      	b.n	b966 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    b958:	4620      	mov	r0, r4
    b95a:	f7f4 fdeb 	bl	534 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    b95e:	f7ff fff0 	bl	b942 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x346>
    b962:	1c64      	adds	r4, r4, #1
    b964:	b2e4      	uxtb	r4, r4
    b966:	42ac      	cmp	r4, r5
    b968:	d3f6      	bcc.n	b958 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    b96a:	bd70      	pop	{r4, r5, r6, pc}

0000b96c <mpsl_timeslot_request>:
    b96c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b970:	460d      	mov	r5, r1
    b972:	f7f4 fddf 	bl	534 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    b976:	0004      	movs	r4, r0
    b978:	d007      	beq.n	b98a <mpsl_timeslot_request+0x1e>
    b97a:	78a0      	ldrb	r0, [r4, #2]
    b97c:	f06f 0622 	mvn.w	r6, #34	; 0x22
    b980:	2801      	cmp	r0, #1
    b982:	d006      	beq.n	b992 <mpsl_timeslot_request+0x26>
    b984:	2802      	cmp	r0, #2
    b986:	d110      	bne.n	b9aa <mpsl_timeslot_request+0x3e>
    b988:	e003      	b.n	b992 <mpsl_timeslot_request+0x26>
    b98a:	f06f 0001 	mvn.w	r0, #1
    b98e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b992:	f06f 0715 	mvn.w	r7, #21
    b996:	b155      	cbz	r5, b9ae <mpsl_timeslot_request+0x42>
    b998:	4628      	mov	r0, r5
    b99a:	f7f4 fd3d 	bl	418 <CONFIG_MAIN_STACK_SIZE+0x18>
    b99e:	b130      	cbz	r0, b9ae <mpsl_timeslot_request+0x42>
    b9a0:	7828      	ldrb	r0, [r5, #0]
    b9a2:	b130      	cbz	r0, b9b2 <mpsl_timeslot_request+0x46>
    b9a4:	78a0      	ldrb	r0, [r4, #2]
    b9a6:	2802      	cmp	r0, #2
    b9a8:	d008      	beq.n	b9bc <mpsl_timeslot_request+0x50>
    b9aa:	4630      	mov	r0, r6
    b9ac:	e7ef      	b.n	b98e <mpsl_timeslot_request+0x22>
    b9ae:	4638      	mov	r0, r7
    b9b0:	e7ed      	b.n	b98e <mpsl_timeslot_request+0x22>
    b9b2:	4629      	mov	r1, r5
    b9b4:	4620      	mov	r0, r4
    b9b6:	f7ff ff76 	bl	b8a6 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2aa>
    b9ba:	e003      	b.n	b9c4 <mpsl_timeslot_request+0x58>
    b9bc:	4629      	mov	r1, r5
    b9be:	4620      	mov	r0, r4
    b9c0:	f7ff ff89 	bl	b8d6 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2da>
    b9c4:	78e0      	ldrb	r0, [r4, #3]
    b9c6:	f104 010c 	add.w	r1, r4, #12
    b9ca:	f7ff fe68 	bl	b69e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xa2>
    b9ce:	b108      	cbz	r0, b9d4 <mpsl_timeslot_request+0x68>
    b9d0:	2000      	movs	r0, #0
    b9d2:	e7dc      	b.n	b98e <mpsl_timeslot_request+0x22>
    b9d4:	f44f 712b 	mov.w	r1, #684	; 0x2ac
    b9d8:	206a      	movs	r0, #106	; 0x6a
    b9da:	f7f7 fefd 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>

0000b9de <mpsl_timeslot_session_close>:
    b9de:	b510      	push	{r4, lr}
    b9e0:	4604      	mov	r4, r0
    b9e2:	f7f4 fda7 	bl	534 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    b9e6:	0001      	movs	r1, r0
    b9e8:	d004      	beq.n	b9f4 <mpsl_timeslot_session_close+0x16>
    b9ea:	7808      	ldrb	r0, [r1, #0]
    b9ec:	f06f 0222 	mvn.w	r2, #34	; 0x22
    b9f0:	b968      	cbnz	r0, ba0e <mpsl_timeslot_session_close+0x30>
    b9f2:	e002      	b.n	b9fa <mpsl_timeslot_session_close+0x1c>
    b9f4:	f06f 0001 	mvn.w	r0, #1
    b9f8:	bd10      	pop	{r4, pc}
    b9fa:	7888      	ldrb	r0, [r1, #2]
    b9fc:	b138      	cbz	r0, ba0e <mpsl_timeslot_session_close+0x30>
    b9fe:	2802      	cmp	r0, #2
    ba00:	d007      	beq.n	ba12 <mpsl_timeslot_session_close+0x34>
    ba02:	2801      	cmp	r0, #1
    ba04:	d005      	beq.n	ba12 <mpsl_timeslot_session_close+0x34>
    ba06:	2001      	movs	r0, #1
    ba08:	7008      	strb	r0, [r1, #0]
    ba0a:	2000      	movs	r0, #0
    ba0c:	bd10      	pop	{r4, pc}
    ba0e:	4610      	mov	r0, r2
    ba10:	bd10      	pop	{r4, pc}
    ba12:	4620      	mov	r0, r4
    ba14:	f7ff ff7b 	bl	b90e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x312>
    ba18:	e7f7      	b.n	ba0a <mpsl_timeslot_session_close+0x2c>

0000ba1a <mpsl_timeslot_session_count_set>:
    ba1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ba1e:	460e      	mov	r6, r1
    ba20:	4607      	mov	r7, r0
    ba22:	f7f4 fd81 	bl	528 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    ba26:	4605      	mov	r5, r0
    ba28:	2400      	movs	r4, #0
    ba2a:	e00a      	b.n	ba42 <mpsl_timeslot_session_count_set+0x28>
    ba2c:	4620      	mov	r0, r4
    ba2e:	f7f4 fd81 	bl	534 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    ba32:	7880      	ldrb	r0, [r0, #2]
    ba34:	b118      	cbz	r0, ba3e <mpsl_timeslot_session_count_set+0x24>
    ba36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    ba3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ba3e:	1c64      	adds	r4, r4, #1
    ba40:	b2e4      	uxtb	r4, r4
    ba42:	42ac      	cmp	r4, r5
    ba44:	d3f2      	bcc.n	ba2c <mpsl_timeslot_session_count_set+0x12>
    ba46:	2e08      	cmp	r6, #8
    ba48:	d902      	bls.n	ba50 <mpsl_timeslot_session_count_set+0x36>
    ba4a:	f06f 0015 	mvn.w	r0, #21
    ba4e:	e7f4      	b.n	ba3a <mpsl_timeslot_session_count_set+0x20>
    ba50:	b117      	cbz	r7, ba58 <mpsl_timeslot_session_count_set+0x3e>
    ba52:	4631      	mov	r1, r6
    ba54:	4638      	mov	r0, r7
    ba56:	e001      	b.n	ba5c <mpsl_timeslot_session_count_set+0x42>
    ba58:	2100      	movs	r1, #0
    ba5a:	4608      	mov	r0, r1
    ba5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ba60:	f7f4 bd4e 	b.w	500 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>

0000ba64 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>:
    ba64:	2000      	movs	r0, #0
    ba66:	f7f7 baf5 	b.w	3054 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>

0000ba6a <sym_WGWJTNZTDUUYDCZS4UGNX4L4JID5HLG6XRROR3Q>:
    ba6a:	2000      	movs	r0, #0
    ba6c:	f7f7 bad8 	b.w	3020 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>

0000ba70 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>:
    ba70:	b510      	push	{r4, lr}
    ba72:	f7f6 ffc1 	bl	29f8 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    ba76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ba7a:	f000 b80b 	b.w	ba94 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>

0000ba7e <sym_BE2HGIHF5RDQALAHNCCVX54XTGKEN4KZFXFBHBQ>:
    ba7e:	0a41      	lsrs	r1, r0, #9
    ba80:	f643 5209 	movw	r2, #15625	; 0x3d09
    ba84:	4351      	muls	r1, r2
    ba86:	f3c0 0008 	ubfx	r0, r0, #0, #9
    ba8a:	fb10 f002 	smulbb	r0, r0, r2
    ba8e:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    ba92:	4770      	bx	lr

0000ba94 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
    ba94:	0a41      	lsrs	r1, r0, #9
    ba96:	f643 5209 	movw	r2, #15625	; 0x3d09
    ba9a:	4351      	muls	r1, r2
    ba9c:	f3c0 0008 	ubfx	r0, r0, #0, #9
    baa0:	fb10 f002 	smulbb	r0, r0, r2
    baa4:	f500 7080 	add.w	r0, r0, #256	; 0x100
    baa8:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    baac:	4770      	bx	lr

0000baae <MPSL_IRQ_RADIO_Handler>:
    baae:	f7f5 bdef 	b.w	1690 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>
    bab2:	2800      	cmp	r0, #0
    bab4:	db09      	blt.n	baca <MPSL_IRQ_RADIO_Handler+0x1c>
    bab6:	f000 021f 	and.w	r2, r0, #31
    baba:	2101      	movs	r1, #1
    babc:	4091      	lsls	r1, r2
    babe:	0940      	lsrs	r0, r0, #5
    bac0:	0080      	lsls	r0, r0, #2
    bac2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    bac6:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    baca:	4770      	bx	lr
    bacc:	2800      	cmp	r0, #0
    bace:	db0d      	blt.n	baec <MPSL_IRQ_RADIO_Handler+0x3e>
    bad0:	f000 021f 	and.w	r2, r0, #31
    bad4:	2101      	movs	r1, #1
    bad6:	4091      	lsls	r1, r2
    bad8:	0940      	lsrs	r0, r0, #5
    bada:	0080      	lsls	r0, r0, #2
    badc:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    bae0:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    bae4:	f3bf 8f4f 	dsb	sy
    bae8:	f3bf 8f6f 	isb	sy
    baec:	4770      	bx	lr

0000baee <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    baee:	b570      	push	{r4, r5, r6, lr}
    baf0:	4602      	mov	r2, r0
    baf2:	2000      	movs	r0, #0
    baf4:	2900      	cmp	r1, #0
    baf6:	d01d      	beq.n	bb34 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
    baf8:	fba2 0101 	umull	r0, r1, r2, r1
    bafc:	0a40      	lsrs	r0, r0, #9
    bafe:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
    bb02:	0a49      	lsrs	r1, r1, #9
    bb04:	1c40      	adds	r0, r0, #1
    bb06:	f141 0100 	adc.w	r1, r1, #0
    bb0a:	f240 72a1 	movw	r2, #1953	; 0x7a1
    bb0e:	1883      	adds	r3, r0, r2
    bb10:	f141 0100 	adc.w	r1, r1, #0
    bb14:	1c5b      	adds	r3, r3, #1
    bb16:	f141 0400 	adc.w	r4, r1, #0
    bb1a:	2100      	movs	r1, #0
    bb1c:	f1d3 33ff 	rsbs	r3, r3, #4294967295	; 0xffffffff
    bb20:	41a1      	sbcs	r1, r4
    bb22:	d203      	bcs.n	bb2c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
    bb24:	2171      	movs	r1, #113	; 0x71
    bb26:	206d      	movs	r0, #109	; 0x6d
    bb28:	f7f7 fe56 	bl	37d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bb2c:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
    bb30:	fbb0 f0f2 	udiv	r0, r0, r2
    bb34:	bd70      	pop	{r4, r5, r6, pc}
    bb36:	5840      	ldr	r0, [r0, r1]
    bb38:	2800      	cmp	r0, #0
    bb3a:	d000      	beq.n	bb3e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
    bb3c:	2001      	movs	r0, #1
    bb3e:	4770      	bx	lr
    bb40:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    bb44:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    bb48:	f002 0201 	and.w	r2, r2, #1
    bb4c:	03c0      	lsls	r0, r0, #15
    bb4e:	d503      	bpl.n	bb58 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    bb50:	428a      	cmp	r2, r1
    bb52:	d101      	bne.n	bb58 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    bb54:	2001      	movs	r0, #1
    bb56:	4770      	bx	lr
    bb58:	2000      	movs	r0, #0
    bb5a:	4770      	bx	lr

0000bb5c <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    bb5c:	b510      	push	{r4, lr}
    bb5e:	2101      	movs	r1, #1
    bb60:	0788      	lsls	r0, r1, #30
    bb62:	f7f7 fdf7 	bl	3754 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    bb66:	2800      	cmp	r0, #0
    bb68:	d000      	beq.n	bb6c <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    bb6a:	2001      	movs	r0, #1
    bb6c:	bd10      	pop	{r4, pc}

0000bb6e <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    bb6e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    bb72:	2101      	movs	r1, #1
    bb74:	6001      	str	r1, [r0, #0]
    bb76:	4770      	bx	lr

0000bb78 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    bb78:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    bb7c:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    bb80:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    bb84:	f002 0203 	and.w	r2, r2, #3
    bb88:	03c9      	lsls	r1, r1, #15
    bb8a:	d503      	bpl.n	bb94 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    bb8c:	4282      	cmp	r2, r0
    bb8e:	d101      	bne.n	bb94 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    bb90:	2001      	movs	r0, #1
    bb92:	4770      	bx	lr
    bb94:	2000      	movs	r0, #0
    bb96:	4770      	bx	lr

0000bb98 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    bb98:	b510      	push	{r4, lr}
    bb9a:	2100      	movs	r1, #0
    bb9c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    bba0:	f7f7 fdd8 	bl	3754 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    bba4:	2800      	cmp	r0, #0
    bba6:	d000      	beq.n	bbaa <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    bba8:	2001      	movs	r0, #1
    bbaa:	bd10      	pop	{r4, pc}
    bbac:	2800      	cmp	r0, #0
    bbae:	db09      	blt.n	bbc4 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    bbb0:	f000 021f 	and.w	r2, r0, #31
    bbb4:	2101      	movs	r1, #1
    bbb6:	4091      	lsls	r1, r2
    bbb8:	0940      	lsrs	r0, r0, #5
    bbba:	0080      	lsls	r0, r0, #2
    bbbc:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    bbc0:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    bbc4:	4770      	bx	lr
    bbc6:	2800      	cmp	r0, #0
    bbc8:	db0d      	blt.n	bbe6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    bbca:	f000 021f 	and.w	r2, r0, #31
    bbce:	2101      	movs	r1, #1
    bbd0:	4091      	lsls	r1, r2
    bbd2:	0940      	lsrs	r0, r0, #5
    bbd4:	0080      	lsls	r0, r0, #2
    bbd6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    bbda:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    bbde:	f3bf 8f4f 	dsb	sy
    bbe2:	f3bf 8f6f 	isb	sy
    bbe6:	4770      	bx	lr
    bbe8:	00021000 	.word	0x00021000
    bbec:	000000fa 	.word	0x000000fa
    bbf0:	cd328aac 	.word	0xcd328aac
    bbf4:	09dd6d0b 	.word	0x09dd6d0b
    bbf8:	8494d80b 	.word	0x8494d80b
    bbfc:	bff32eb7 	.word	0xbff32eb7
    bc00:	7bd81808 	.word	0x7bd81808
    bc04:	2800      	cmp	r0, #0
    bc06:	db09      	blt.n	bc1c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    bc08:	f000 021f 	and.w	r2, r0, #31
    bc0c:	2101      	movs	r1, #1
    bc0e:	4091      	lsls	r1, r2
    bc10:	0940      	lsrs	r0, r0, #5
    bc12:	0080      	lsls	r0, r0, #2
    bc14:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    bc18:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    bc1c:	4770      	bx	lr

0000bc1e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    bc1e:	f3ef 8110 	mrs	r1, PRIMASK
    bc22:	b672      	cpsid	i
    bc24:	7802      	ldrb	r2, [r0, #0]
    bc26:	2a01      	cmp	r2, #1
    bc28:	d001      	beq.n	bc2e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    bc2a:	2201      	movs	r2, #1
    bc2c:	e000      	b.n	bc30 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    bc2e:	2200      	movs	r2, #0
    bc30:	2301      	movs	r3, #1
    bc32:	7003      	strb	r3, [r0, #0]
    bc34:	b901      	cbnz	r1, bc38 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    bc36:	b662      	cpsie	i
    bc38:	b10a      	cbz	r2, bc3e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    bc3a:	2000      	movs	r0, #0
    bc3c:	4770      	bx	lr
    bc3e:	f06f 0022 	mvn.w	r0, #34	; 0x22
    bc42:	4770      	bx	lr

0000bc44 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    bc44:	2100      	movs	r1, #0
    bc46:	7001      	strb	r1, [r0, #0]
    bc48:	4608      	mov	r0, r1
    bc4a:	4770      	bx	lr

0000bc4c <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    bc4c:	f3ef 8110 	mrs	r1, PRIMASK
    bc50:	b672      	cpsid	i
    bc52:	2200      	movs	r2, #0
    bc54:	7002      	strb	r2, [r0, #0]
    bc56:	b901      	cbnz	r1, bc5a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    bc58:	b662      	cpsie	i
    bc5a:	2000      	movs	r0, #0
    bc5c:	4770      	bx	lr

0000bc5e <mpsl_low_priority_process>:
    bc5e:	f7f7 bea7 	b.w	39b0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

0000bc62 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    bc62:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    bc66:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    bc6a:	280f      	cmp	r0, #15
    bc6c:	d001      	beq.n	bc72 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    bc6e:	2000      	movs	r0, #0
    bc70:	4770      	bx	lr
    bc72:	2001      	movs	r0, #1
    bc74:	4770      	bx	lr

0000bc76 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    bc76:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    bc7a:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    bc7e:	280a      	cmp	r0, #10
    bc80:	d001      	beq.n	bc86 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    bc82:	2000      	movs	r0, #0
    bc84:	4770      	bx	lr
    bc86:	2001      	movs	r0, #1
    bc88:	4770      	bx	lr

0000bc8a <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    bc8a:	b500      	push	{lr}
    bc8c:	f7ff fff3 	bl	bc76 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    bc90:	b120      	cbz	r0, bc9c <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    bc92:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    bc96:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    bc9a:	b108      	cbz	r0, bca0 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    bc9c:	2000      	movs	r0, #0
    bc9e:	bd00      	pop	{pc}
    bca0:	2001      	movs	r0, #1
    bca2:	bd00      	pop	{pc}

0000bca4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    bca4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    bca8:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    bcac:	280e      	cmp	r0, #14
    bcae:	d001      	beq.n	bcb4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    bcb0:	2000      	movs	r0, #0
    bcb2:	4770      	bx	lr
    bcb4:	2001      	movs	r0, #1
    bcb6:	4770      	bx	lr

0000bcb8 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    bcb8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    bcbc:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    bcc0:	2810      	cmp	r0, #16
    bcc2:	d001      	beq.n	bcc8 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    bcc4:	2000      	movs	r0, #0
    bcc6:	4770      	bx	lr
    bcc8:	2001      	movs	r0, #1
    bcca:	4770      	bx	lr

0000bccc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    bccc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    bcd0:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    bcd4:	2806      	cmp	r0, #6
    bcd6:	d003      	beq.n	bce0 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    bcd8:	1c40      	adds	r0, r0, #1
    bcda:	d001      	beq.n	bce0 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    bcdc:	2000      	movs	r0, #0
    bcde:	4770      	bx	lr
    bce0:	2001      	movs	r0, #1
    bce2:	4770      	bx	lr

0000bce4 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    bce4:	b500      	push	{lr}
    bce6:	f7ff fff1 	bl	bccc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    bcea:	b148      	cbz	r0, bd00 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    bcec:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    bcf0:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    bcf4:	2806      	cmp	r0, #6
    bcf6:	d303      	bcc.n	bd00 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    bcf8:	1c40      	adds	r0, r0, #1
    bcfa:	d001      	beq.n	bd00 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    bcfc:	2001      	movs	r0, #1
    bcfe:	bd00      	pop	{pc}
    bd00:	2000      	movs	r0, #0
    bd02:	bd00      	pop	{pc}

0000bd04 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    bd04:	b500      	push	{lr}
    bd06:	f7ff ffe1 	bl	bccc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    bd0a:	b138      	cbz	r0, bd1c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    bd0c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    bd10:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    bd14:	2806      	cmp	r0, #6
    bd16:	d303      	bcc.n	bd20 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    bd18:	1c40      	adds	r0, r0, #1
    bd1a:	d001      	beq.n	bd20 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    bd1c:	2000      	movs	r0, #0
    bd1e:	bd00      	pop	{pc}
    bd20:	2001      	movs	r0, #1
    bd22:	bd00      	pop	{pc}

0000bd24 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    bd24:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    bd28:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    bd2c:	280d      	cmp	r0, #13
    bd2e:	d001      	beq.n	bd34 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    bd30:	2000      	movs	r0, #0
    bd32:	4770      	bx	lr
    bd34:	2001      	movs	r0, #1
    bd36:	4770      	bx	lr

0000bd38 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    bd38:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    bd3c:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    bd40:	2808      	cmp	r0, #8
    bd42:	d001      	beq.n	bd48 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    bd44:	2000      	movs	r0, #0
    bd46:	4770      	bx	lr
    bd48:	2001      	movs	r0, #1
    bd4a:	4770      	bx	lr

0000bd4c <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>:
    bd4c:	2a00      	cmp	r2, #0
    bd4e:	bf04      	itt	eq
    bd50:	2000      	moveq	r0, #0
    bd52:	4770      	bxeq	lr
    bd54:	1e52      	subs	r2, r2, #1
    bd56:	d007      	beq.n	bd68 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x1c>
    bd58:	7803      	ldrb	r3, [r0, #0]
    bd5a:	f891 c000 	ldrb.w	ip, [r1]
    bd5e:	4563      	cmp	r3, ip
    bd60:	bf04      	itt	eq
    bd62:	1c40      	addeq	r0, r0, #1
    bd64:	1c49      	addeq	r1, r1, #1
    bd66:	d0f5      	beq.n	bd54 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x8>
    bd68:	7800      	ldrb	r0, [r0, #0]
    bd6a:	7809      	ldrb	r1, [r1, #0]
    bd6c:	1a40      	subs	r0, r0, r1
    bd6e:	4770      	bx	lr

0000bd70 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    bd70:	b4f0      	push	{r4, r5, r6, r7}
    bd72:	ea80 0c01 	eor.w	ip, r0, r1
    bd76:	4603      	mov	r3, r0
    bd78:	f01c 0f03 	tst.w	ip, #3
    bd7c:	d13c      	bne.n	bdf8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    bd7e:	f013 0f03 	tst.w	r3, #3
    bd82:	d00b      	beq.n	bd9c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
    bd84:	2a00      	cmp	r2, #0
    bd86:	bf04      	itt	eq
    bd88:	bcf0      	popeq	{r4, r5, r6, r7}
    bd8a:	4770      	bxeq	lr
    bd8c:	f811 cb01 	ldrb.w	ip, [r1], #1
    bd90:	f803 cb01 	strb.w	ip, [r3], #1
    bd94:	1e52      	subs	r2, r2, #1
    bd96:	f013 0f03 	tst.w	r3, #3
    bd9a:	d1f3      	bne.n	bd84 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
    bd9c:	2a03      	cmp	r2, #3
    bd9e:	d94f      	bls.n	be40 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    bda0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    bda4:	d24c      	bcs.n	be40 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    bda6:	f1c2 0c00 	rsb	ip, r2, #0
    bdaa:	ea4f 74ec 	mov.w	r4, ip, asr #31
    bdae:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
    bdb2:	ea4f 0cac 	mov.w	ip, ip, asr #2
    bdb6:	f1cc 0c00 	rsb	ip, ip, #0
    bdba:	f1bc 0f00 	cmp.w	ip, #0
    bdbe:	dd1b      	ble.n	bdf8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    bdc0:	1f0d      	subs	r5, r1, #4
    bdc2:	1f1c      	subs	r4, r3, #4
    bdc4:	f01c 0f01 	tst.w	ip, #1
    bdc8:	d003      	beq.n	bdd2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
    bdca:	f855 6f04 	ldr.w	r6, [r5, #4]!
    bdce:	f844 6f04 	str.w	r6, [r4, #4]!
    bdd2:	ea5f 066c 	movs.w	r6, ip, asr #1
    bdd6:	d007      	beq.n	bde8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
    bdd8:	686f      	ldr	r7, [r5, #4]
    bdda:	6067      	str	r7, [r4, #4]
    bddc:	f855 7f08 	ldr.w	r7, [r5, #8]!
    bde0:	f844 7f08 	str.w	r7, [r4, #8]!
    bde4:	1e76      	subs	r6, r6, #1
    bde6:	d1f7      	bne.n	bdd8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
    bde8:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    bdec:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    bdf0:	f1cc 0c00 	rsb	ip, ip, #0
    bdf4:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    bdf8:	2a00      	cmp	r2, #0
    bdfa:	bf04      	itt	eq
    bdfc:	bcf0      	popeq	{r4, r5, r6, r7}
    bdfe:	4770      	bxeq	lr
    be00:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    be04:	d226      	bcs.n	be54 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    be06:	2a00      	cmp	r2, #0
    be08:	bfdc      	itt	le
    be0a:	bcf0      	pople	{r4, r5, r6, r7}
    be0c:	4770      	bxle	lr
    be0e:	1e49      	subs	r1, r1, #1
    be10:	1e5b      	subs	r3, r3, #1
    be12:	f012 0f01 	tst.w	r2, #1
    be16:	d003      	beq.n	be20 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
    be18:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    be1c:	f803 cf01 	strb.w	ip, [r3, #1]!
    be20:	1052      	asrs	r2, r2, #1
    be22:	bf04      	itt	eq
    be24:	bcf0      	popeq	{r4, r5, r6, r7}
    be26:	4770      	bxeq	lr
    be28:	f891 c001 	ldrb.w	ip, [r1, #1]
    be2c:	f883 c001 	strb.w	ip, [r3, #1]
    be30:	f811 cf02 	ldrb.w	ip, [r1, #2]!
    be34:	f803 cf02 	strb.w	ip, [r3, #2]!
    be38:	1e52      	subs	r2, r2, #1
    be3a:	d1f5      	bne.n	be28 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
    be3c:	bcf0      	pop	{r4, r5, r6, r7}
    be3e:	4770      	bx	lr
    be40:	2a04      	cmp	r2, #4
    be42:	d3d9      	bcc.n	bdf8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    be44:	f851 cb04 	ldr.w	ip, [r1], #4
    be48:	1f12      	subs	r2, r2, #4
    be4a:	f843 cb04 	str.w	ip, [r3], #4
    be4e:	2a04      	cmp	r2, #4
    be50:	d2f8      	bcs.n	be44 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
    be52:	e7d1      	b.n	bdf8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    be54:	f811 cb01 	ldrb.w	ip, [r1], #1
    be58:	f803 cb01 	strb.w	ip, [r3], #1
    be5c:	1e52      	subs	r2, r2, #1
    be5e:	d1f9      	bne.n	be54 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    be60:	bcf0      	pop	{r4, r5, r6, r7}
    be62:	4770      	bx	lr

0000be64 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    be64:	b470      	push	{r4, r5, r6}
    be66:	4603      	mov	r3, r0
    be68:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    be6c:	f010 0f03 	tst.w	r0, #3
    be70:	d009      	beq.n	be86 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    be72:	2a00      	cmp	r2, #0
    be74:	bf04      	itt	eq
    be76:	bc70      	popeq	{r4, r5, r6}
    be78:	4770      	bxeq	lr
    be7a:	f803 cb01 	strb.w	ip, [r3], #1
    be7e:	1e52      	subs	r2, r2, #1
    be80:	f013 0f03 	tst.w	r3, #3
    be84:	d1f5      	bne.n	be72 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
    be86:	b2c9      	uxtb	r1, r1
    be88:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    be8c:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
    be90:	2a03      	cmp	r2, #3
    be92:	d939      	bls.n	bf08 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    be94:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    be98:	d236      	bcs.n	bf08 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    be9a:	4251      	negs	r1, r2
    be9c:	17cc      	asrs	r4, r1, #31
    be9e:	eb01 7194 	add.w	r1, r1, r4, lsr #30
    bea2:	1089      	asrs	r1, r1, #2
    bea4:	424e      	negs	r6, r1
    bea6:	2e00      	cmp	r6, #0
    bea8:	dd11      	ble.n	bece <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    beaa:	1f19      	subs	r1, r3, #4
    beac:	f016 0f01 	tst.w	r6, #1
    beb0:	bf18      	it	ne
    beb2:	f841 5f04 	strne.w	r5, [r1, #4]!
    beb6:	1074      	asrs	r4, r6, #1
    beb8:	d004      	beq.n	bec4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
    beba:	604d      	str	r5, [r1, #4]
    bebc:	f841 5f08 	str.w	r5, [r1, #8]!
    bec0:	1e64      	subs	r4, r4, #1
    bec2:	d1fa      	bne.n	beba <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
    bec4:	4271      	negs	r1, r6
    bec6:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    beca:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    bece:	2a00      	cmp	r2, #0
    bed0:	bf04      	itt	eq
    bed2:	bc70      	popeq	{r4, r5, r6}
    bed4:	4770      	bxeq	lr
    bed6:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    beda:	d21d      	bcs.n	bf18 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    bedc:	2a00      	cmp	r2, #0
    bede:	bfdc      	itt	le
    bee0:	bc70      	pople	{r4, r5, r6}
    bee2:	4770      	bxle	lr
    bee4:	1e59      	subs	r1, r3, #1
    bee6:	f012 0f01 	tst.w	r2, #1
    beea:	bf18      	it	ne
    beec:	f801 cf01 	strbne.w	ip, [r1, #1]!
    bef0:	1052      	asrs	r2, r2, #1
    bef2:	bf04      	itt	eq
    bef4:	bc70      	popeq	{r4, r5, r6}
    bef6:	4770      	bxeq	lr
    bef8:	f881 c001 	strb.w	ip, [r1, #1]
    befc:	f801 cf02 	strb.w	ip, [r1, #2]!
    bf00:	1e52      	subs	r2, r2, #1
    bf02:	d1f9      	bne.n	bef8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
    bf04:	bc70      	pop	{r4, r5, r6}
    bf06:	4770      	bx	lr
    bf08:	2a04      	cmp	r2, #4
    bf0a:	d3e0      	bcc.n	bece <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    bf0c:	1f12      	subs	r2, r2, #4
    bf0e:	f843 5b04 	str.w	r5, [r3], #4
    bf12:	2a04      	cmp	r2, #4
    bf14:	d2fa      	bcs.n	bf0c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
    bf16:	e7da      	b.n	bece <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    bf18:	f803 cb01 	strb.w	ip, [r3], #1
    bf1c:	1e52      	subs	r2, r2, #1
    bf1e:	d1fb      	bne.n	bf18 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    bf20:	bc70      	pop	{r4, r5, r6}
    bf22:	4770      	bx	lr
    bf24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    bf28:	4770      	bx	lr
    bf2a:	2000      	movs	r0, #0
    bf2c:	4770      	bx	lr
    bf2e:	2000      	movs	r0, #0
    bf30:	4770      	bx	lr
    bf32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    bf36:	4770      	bx	lr
    bf38:	4770      	bx	lr
    bf3a:	4770      	bx	lr
    bf3c:	2000      	movs	r0, #0
    bf3e:	4770      	bx	lr
    bf40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    bf44:	4770      	bx	lr
    bf46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    bf4a:	4770      	bx	lr
    bf4c:	2100      	movs	r1, #0
    bf4e:	7001      	strb	r1, [r0, #0]
    bf50:	4770      	bx	lr
    bf52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    bf56:	4770      	bx	lr
    bf58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    bf5c:	4770      	bx	lr
    bf5e:	2000      	movs	r0, #0
    bf60:	4770      	bx	lr
    bf62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bf64:	4604      	mov	r4, r0
    bf66:	f100 0003 	add.w	r0, r0, #3
    bf6a:	f020 0003 	bic.w	r0, r0, #3
    bf6e:	0016      	movs	r6, r2
    bf70:	9000      	str	r0, [sp, #0]
    bf72:	460d      	mov	r5, r1
    bf74:	788a      	ldrb	r2, [r1, #2]
    bf76:	7849      	ldrb	r1, [r1, #1]
    bf78:	d000      	beq.n	bf7c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x118>
    bf7a:	2000      	movs	r0, #0
    bf7c:	f7f8 f8d6 	bl	412c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    bf80:	9900      	ldr	r1, [sp, #0]
    bf82:	4408      	add	r0, r1
    bf84:	9000      	str	r0, [sp, #0]
    bf86:	78a9      	ldrb	r1, [r5, #2]
    bf88:	b139      	cbz	r1, bf9a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x136>
    bf8a:	89ea      	ldrh	r2, [r5, #14]
    bf8c:	b106      	cbz	r6, bf90 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x12c>
    bf8e:	2000      	movs	r0, #0
    bf90:	f7f8 fb32 	bl	45f8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>
    bf94:	9900      	ldr	r1, [sp, #0]
    bf96:	4408      	add	r0, r1
    bf98:	9000      	str	r0, [sp, #0]
    bf9a:	4632      	mov	r2, r6
    bf9c:	4629      	mov	r1, r5
    bf9e:	4668      	mov	r0, sp
    bfa0:	f000 f807 	bl	bfb2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x14e>
    bfa4:	9800      	ldr	r0, [sp, #0]
    bfa6:	1dc0      	adds	r0, r0, #7
    bfa8:	f020 0007 	bic.w	r0, r0, #7
    bfac:	9000      	str	r0, [sp, #0]
    bfae:	1b00      	subs	r0, r0, r4
    bfb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bfb2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bfb6:	4606      	mov	r6, r0
    bfb8:	460c      	mov	r4, r1
    bfba:	7808      	ldrb	r0, [r1, #0]
    bfbc:	7849      	ldrb	r1, [r1, #1]
    bfbe:	2700      	movs	r7, #0
    bfc0:	4408      	add	r0, r1
    bfc2:	4691      	mov	r9, r2
    bfc4:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    bfc8:	463d      	mov	r5, r7
    bfca:	e00e      	b.n	bfea <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x186>
    bfcc:	79a3      	ldrb	r3, [r4, #6]
    bfce:	2b02      	cmp	r3, #2
    bfd0:	d200      	bcs.n	bfd4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x170>
    bfd2:	2302      	movs	r3, #2
    bfd4:	7962      	ldrb	r2, [r4, #5]
    bfd6:	2a03      	cmp	r2, #3
    bfd8:	d200      	bcs.n	bfdc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x178>
    bfda:	2203      	movs	r2, #3
    bfdc:	7921      	ldrb	r1, [r4, #4]
    bfde:	78e0      	ldrb	r0, [r4, #3]
    bfe0:	f000 ff01 	bl	cde6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    bfe4:	1c6d      	adds	r5, r5, #1
    bfe6:	4407      	add	r7, r0
    bfe8:	b2ed      	uxtb	r5, r5
    bfea:	4545      	cmp	r5, r8
    bfec:	d3ee      	bcc.n	bfcc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x168>
    bfee:	6830      	ldr	r0, [r6, #0]
    bff0:	1cc0      	adds	r0, r0, #3
    bff2:	f020 0003 	bic.w	r0, r0, #3
    bff6:	6030      	str	r0, [r6, #0]
    bff8:	f1b9 0f00 	cmp.w	r9, #0
    bffc:	d000      	beq.n	c000 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x19c>
    bffe:	2000      	movs	r0, #0
    c000:	463a      	mov	r2, r7
    c002:	4641      	mov	r1, r8
    c004:	f7f8 fa6a 	bl	44dc <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    c008:	6831      	ldr	r1, [r6, #0]
    c00a:	4408      	add	r0, r1
    c00c:	6030      	str	r0, [r6, #0]
    c00e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000c012 <sdc_soc_ecb_block_encrypt>:
    c012:	b530      	push	{r4, r5, lr}
    c014:	460d      	mov	r5, r1
    c016:	b08d      	sub	sp, #52	; 0x34
    c018:	4614      	mov	r4, r2
    c01a:	4601      	mov	r1, r0
    c01c:	2210      	movs	r2, #16
    c01e:	4668      	mov	r0, sp
    c020:	f7ff fea6 	bl	bd70 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c024:	2210      	movs	r2, #16
    c026:	4629      	mov	r1, r5
    c028:	a804      	add	r0, sp, #16
    c02a:	f7ff fea1 	bl	bd70 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c02e:	4668      	mov	r0, sp
    c030:	f7f8 fbd6 	bl	47e0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    c034:	b118      	cbz	r0, c03e <sdc_soc_ecb_block_encrypt+0x2c>
    c036:	f06f 0015 	mvn.w	r0, #21
    c03a:	b00d      	add	sp, #52	; 0x34
    c03c:	bd30      	pop	{r4, r5, pc}
    c03e:	2210      	movs	r2, #16
    c040:	4620      	mov	r0, r4
    c042:	a908      	add	r1, sp, #32
    c044:	f7ff fe94 	bl	bd70 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c048:	2000      	movs	r0, #0
    c04a:	e7f6      	b.n	c03a <sdc_soc_ecb_block_encrypt+0x28>

0000c04c <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>:
    c04c:	2000      	movs	r0, #0
    c04e:	4770      	bx	lr

0000c050 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>:
    c050:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    c052:	4604      	mov	r4, r0
    c054:	1d01      	adds	r1, r0, #4
    c056:	4668      	mov	r0, sp
    c058:	f7f9 ffa4 	bl	5fa4 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>
    c05c:	2800      	cmp	r0, #0
    c05e:	d004      	beq.n	c06a <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I+0x1a>
    c060:	4669      	mov	r1, sp
    c062:	4620      	mov	r0, r4
    c064:	f000 f848 	bl	c0f8 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
    c068:	2001      	movs	r0, #1
    c06a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000c06c <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    c06c:	b50e      	push	{r1, r2, r3, lr}
    c06e:	4601      	mov	r1, r0
    c070:	4668      	mov	r0, sp
    c072:	f000 f827 	bl	c0c4 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    c076:	4668      	mov	r0, sp
    c078:	f7f9 ffbe 	bl	5ff8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    c07c:	bd0e      	pop	{r1, r2, r3, pc}

0000c07e <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>:
    c07e:	b510      	push	{r4, lr}
    c080:	4604      	mov	r4, r0
    c082:	4620      	mov	r0, r4
    c084:	f7f7 ff3e 	bl	3f04 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x50>
    c088:	2800      	cmp	r0, #0
    c08a:	d006      	beq.n	c09a <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1c>
    c08c:	78a1      	ldrb	r1, [r4, #2]
    c08e:	7820      	ldrb	r0, [r4, #0]
    c090:	f000 f804 	bl	c09c <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    c094:	2800      	cmp	r0, #0
    c096:	d0f4      	beq.n	c082 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x4>
    c098:	2001      	movs	r0, #1
    c09a:	bd10      	pop	{r4, pc}
    c09c:	b570      	push	{r4, r5, r6, lr}
    c09e:	460c      	mov	r4, r1
    c0a0:	4605      	mov	r5, r0
    c0a2:	f7f7 ffa3 	bl	3fec <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    c0a6:	2800      	cmp	r0, #0
    c0a8:	d002      	beq.n	c0b0 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x32>
    c0aa:	2d3e      	cmp	r5, #62	; 0x3e
    c0ac:	d001      	beq.n	c0b2 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x34>
    c0ae:	2001      	movs	r0, #1
    c0b0:	bd70      	pop	{r4, r5, r6, pc}
    c0b2:	2c12      	cmp	r4, #18
    c0b4:	d004      	beq.n	c0c0 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x42>
    c0b6:	4620      	mov	r0, r4
    c0b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c0bc:	f7f7 bfb2 	b.w	4024 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    c0c0:	2000      	movs	r0, #0
    c0c2:	bd70      	pop	{r4, r5, r6, pc}

0000c0c4 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    c0c4:	880a      	ldrh	r2, [r1, #0]
    c0c6:	f3c2 020b 	ubfx	r2, r2, #0, #12
    c0ca:	8002      	strh	r2, [r0, #0]
    c0cc:	884a      	ldrh	r2, [r1, #2]
    c0ce:	8042      	strh	r2, [r0, #2]
    c0d0:	784a      	ldrb	r2, [r1, #1]
    c0d2:	0993      	lsrs	r3, r2, #6
    c0d4:	2200      	movs	r2, #0
    c0d6:	7142      	strb	r2, [r0, #5]
    c0d8:	784b      	ldrb	r3, [r1, #1]
    c0da:	f3c3 1301 	ubfx	r3, r3, #4, #2
    c0de:	b11b      	cbz	r3, c0e8 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    c0e0:	2b01      	cmp	r3, #1
    c0e2:	d005      	beq.n	c0f0 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    c0e4:	2b02      	cmp	r3, #2
    c0e6:	d005      	beq.n	c0f4 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    c0e8:	7102      	strb	r2, [r0, #4]
    c0ea:	1d09      	adds	r1, r1, #4
    c0ec:	6081      	str	r1, [r0, #8]
    c0ee:	4770      	bx	lr
    c0f0:	2201      	movs	r2, #1
    c0f2:	e7f9      	b.n	c0e8 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    c0f4:	2202      	movs	r2, #2
    c0f6:	e7f7      	b.n	c0e8 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000c0f8 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    c0f8:	b510      	push	{r4, lr}
    c0fa:	460c      	mov	r4, r1
    c0fc:	7809      	ldrb	r1, [r1, #0]
    c0fe:	7001      	strb	r1, [r0, #0]
    c100:	7841      	ldrb	r1, [r0, #1]
    c102:	f021 010f 	bic.w	r1, r1, #15
    c106:	7041      	strb	r1, [r0, #1]
    c108:	8822      	ldrh	r2, [r4, #0]
    c10a:	f3c2 2203 	ubfx	r2, r2, #8, #4
    c10e:	4311      	orrs	r1, r2
    c110:	7041      	strb	r1, [r0, #1]
    c112:	78a2      	ldrb	r2, [r4, #2]
    c114:	7082      	strb	r2, [r0, #2]
    c116:	8862      	ldrh	r2, [r4, #2]
    c118:	f021 0130 	bic.w	r1, r1, #48	; 0x30
    c11c:	0a12      	lsrs	r2, r2, #8
    c11e:	70c2      	strb	r2, [r0, #3]
    c120:	7041      	strb	r1, [r0, #1]
    c122:	7922      	ldrb	r2, [r4, #4]
    c124:	f002 0203 	and.w	r2, r2, #3
    c128:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    c12c:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
    c130:	7041      	strb	r1, [r0, #1]
    c132:	7962      	ldrb	r2, [r4, #5]
    c134:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    c138:	7041      	strb	r1, [r0, #1]
    c13a:	68a1      	ldr	r1, [r4, #8]
    c13c:	1d02      	adds	r2, r0, #4
    c13e:	4291      	cmp	r1, r2
    c140:	d006      	beq.n	c150 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x58>
    c142:	8862      	ldrh	r2, [r4, #2]
    c144:	2afb      	cmp	r2, #251	; 0xfb
    c146:	d300      	bcc.n	c14a <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x52>
    c148:	22fb      	movs	r2, #251	; 0xfb
    c14a:	1d00      	adds	r0, r0, #4
    c14c:	f7ff fe10 	bl	bd70 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c150:	78a0      	ldrb	r0, [r4, #2]
    c152:	1d00      	adds	r0, r0, #4
    c154:	b2c0      	uxtb	r0, r0
    c156:	bd10      	pop	{r4, pc}

0000c158 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    c158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c15c:	4604      	mov	r4, r0
    c15e:	780f      	ldrb	r7, [r1, #0]
    c160:	2000      	movs	r0, #0
    c162:	250c      	movs	r5, #12
    c164:	2605      	movs	r6, #5
    c166:	223e      	movs	r2, #62	; 0x3e
    c168:	23ff      	movs	r3, #255	; 0xff
    c16a:	2f1b      	cmp	r7, #27
    c16c:	d27d      	bcs.n	c26a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x112>
    c16e:	e8df f007 	tbb	[pc, r7]
    c172:	0eeb      	.short	0x0eeb
    c174:	632d2725 	.word	0x632d2725
    c178:	af9b816d 	.word	0xaf9b816d
    c17c:	e2c7bcb1 	.word	0xe2c7bcb1
    c180:	31ebebf5 	.word	0x31ebebf5
    c184:	f2fed5d2 	.word	0xf2fed5d2
    c188:	eeeff0f1 	.word	0xeeeff0f1
    c18c:	00ed      	.short	0x00ed
    c18e:	7025      	strb	r5, [r4, #0]
    c190:	7908      	ldrb	r0, [r1, #4]
    c192:	70a0      	strb	r0, [r4, #2]
    c194:	7948      	ldrb	r0, [r1, #5]
    c196:	70e0      	strb	r0, [r4, #3]
    c198:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    c19c:	0a00      	lsrs	r0, r0, #8
    c19e:	7120      	strb	r0, [r4, #4]
    c1a0:	79c8      	ldrb	r0, [r1, #7]
    c1a2:	7160      	strb	r0, [r4, #5]
    c1a4:	7a08      	ldrb	r0, [r1, #8]
    c1a6:	71a0      	strb	r0, [r4, #6]
    c1a8:	8908      	ldrh	r0, [r1, #8]
    c1aa:	0a00      	lsrs	r0, r0, #8
    c1ac:	71e0      	strb	r0, [r4, #7]
    c1ae:	7a88      	ldrb	r0, [r1, #10]
    c1b0:	7220      	strb	r0, [r4, #8]
    c1b2:	8948      	ldrh	r0, [r1, #10]
    c1b4:	0a00      	lsrs	r0, r0, #8
    c1b6:	7260      	strb	r0, [r4, #9]
    c1b8:	2008      	movs	r0, #8
    c1ba:	e0c2      	b.n	c342 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c1bc:	2010      	movs	r0, #16
    c1be:	e000      	b.n	c1c2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x6a>
    c1c0:	201a      	movs	r0, #26
    c1c2:	7020      	strb	r0, [r4, #0]
    c1c4:	7908      	ldrb	r0, [r1, #4]
    c1c6:	70a0      	strb	r0, [r4, #2]
    c1c8:	2001      	movs	r0, #1
    c1ca:	e0ba      	b.n	c342 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c1cc:	4620      	mov	r0, r4
    c1ce:	f000 f947 	bl	c460 <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>
    c1d2:	e0b4      	b.n	c33e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e6>
    c1d4:	7022      	strb	r2, [r4, #0]
    c1d6:	200a      	movs	r0, #10
    c1d8:	70a0      	strb	r0, [r4, #2]
    c1da:	f811 0f04 	ldrb.w	r0, [r1, #4]!
    c1de:	70e0      	strb	r0, [r4, #3]
    c1e0:	7888      	ldrb	r0, [r1, #2]
    c1e2:	7120      	strb	r0, [r4, #4]
    c1e4:	8848      	ldrh	r0, [r1, #2]
    c1e6:	0a00      	lsrs	r0, r0, #8
    c1e8:	7160      	strb	r0, [r4, #5]
    c1ea:	7908      	ldrb	r0, [r1, #4]
    c1ec:	71a0      	strb	r0, [r4, #6]
    c1ee:	7948      	ldrb	r0, [r1, #5]
    c1f0:	71e0      	strb	r0, [r4, #7]
    c1f2:	f8d1 0006 	ldr.w	r0, [r1, #6]
    c1f6:	60a0      	str	r0, [r4, #8]
    c1f8:	8948      	ldrh	r0, [r1, #10]
    c1fa:	81a0      	strh	r0, [r4, #12]
    c1fc:	68c8      	ldr	r0, [r1, #12]
    c1fe:	f8c4 000e 	str.w	r0, [r4, #14]
    c202:	8a08      	ldrh	r0, [r1, #16]
    c204:	8260      	strh	r0, [r4, #18]
    c206:	f8d1 0012 	ldr.w	r0, [r1, #18]
    c20a:	6160      	str	r0, [r4, #20]
    c20c:	8ac8      	ldrh	r0, [r1, #22]
    c20e:	8320      	strh	r0, [r4, #24]
    c210:	7e08      	ldrb	r0, [r1, #24]
    c212:	76a0      	strb	r0, [r4, #26]
    c214:	8b08      	ldrh	r0, [r1, #24]
    c216:	0a00      	lsrs	r0, r0, #8
    c218:	76e0      	strb	r0, [r4, #27]
    c21a:	7e88      	ldrb	r0, [r1, #26]
    c21c:	7720      	strb	r0, [r4, #28]
    c21e:	8b48      	ldrh	r0, [r1, #26]
    c220:	0a00      	lsrs	r0, r0, #8
    c222:	7760      	strb	r0, [r4, #29]
    c224:	7f08      	ldrb	r0, [r1, #28]
    c226:	77a0      	strb	r0, [r4, #30]
    c228:	8b88      	ldrh	r0, [r1, #28]
    c22a:	0a00      	lsrs	r0, r0, #8
    c22c:	77e0      	strb	r0, [r4, #31]
    c22e:	7f88      	ldrb	r0, [r1, #30]
    c230:	f884 0020 	strb.w	r0, [r4, #32]
    c234:	201f      	movs	r0, #31
    c236:	e084      	b.n	c342 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c238:	7022      	strb	r2, [r4, #0]
    c23a:	2014      	movs	r0, #20
    c23c:	70a0      	strb	r0, [r4, #2]
    c23e:	7908      	ldrb	r0, [r1, #4]
    c240:	70e0      	strb	r0, [r4, #3]
    c242:	8888      	ldrh	r0, [r1, #4]
    c244:	0a00      	lsrs	r0, r0, #8
    c246:	7120      	strb	r0, [r4, #4]
    c248:	7988      	ldrb	r0, [r1, #6]
    c24a:	e0a8      	b.n	c39e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x246>
    c24c:	7022      	strb	r2, [r4, #0]
    c24e:	2004      	movs	r0, #4
    c250:	70a0      	strb	r0, [r4, #2]
    c252:	7908      	ldrb	r0, [r1, #4]
    c254:	70e0      	strb	r0, [r4, #3]
    c256:	7988      	ldrb	r0, [r1, #6]
    c258:	7120      	strb	r0, [r4, #4]
    c25a:	88c8      	ldrh	r0, [r1, #6]
    c25c:	0a00      	lsrs	r0, r0, #8
    c25e:	7160      	strb	r0, [r4, #5]
    c260:	6888      	ldr	r0, [r1, #8]
    c262:	f8c4 0006 	str.w	r0, [r4, #6]
    c266:	68c8      	ldr	r0, [r1, #12]
    c268:	e000      	b.n	c26c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x114>
    c26a:	e06d      	b.n	c348 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1f0>
    c26c:	f8c4 000a 	str.w	r0, [r4, #10]
    c270:	200c      	movs	r0, #12
    c272:	e066      	b.n	c342 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c274:	7022      	strb	r2, [r4, #0]
    c276:	2003      	movs	r0, #3
    c278:	70a0      	strb	r0, [r4, #2]
    c27a:	7908      	ldrb	r0, [r1, #4]
    c27c:	70e0      	strb	r0, [r4, #3]
    c27e:	7988      	ldrb	r0, [r1, #6]
    c280:	7120      	strb	r0, [r4, #4]
    c282:	88c8      	ldrh	r0, [r1, #6]
    c284:	0a00      	lsrs	r0, r0, #8
    c286:	7160      	strb	r0, [r4, #5]
    c288:	7a08      	ldrb	r0, [r1, #8]
    c28a:	71a0      	strb	r0, [r4, #6]
    c28c:	8908      	ldrh	r0, [r1, #8]
    c28e:	0a00      	lsrs	r0, r0, #8
    c290:	71e0      	strb	r0, [r4, #7]
    c292:	7a88      	ldrb	r0, [r1, #10]
    c294:	7220      	strb	r0, [r4, #8]
    c296:	8948      	ldrh	r0, [r1, #10]
    c298:	0a00      	lsrs	r0, r0, #8
    c29a:	7260      	strb	r0, [r4, #9]
    c29c:	7b08      	ldrb	r0, [r1, #12]
    c29e:	72a0      	strb	r0, [r4, #10]
    c2a0:	8988      	ldrh	r0, [r1, #12]
    c2a2:	0a00      	lsrs	r0, r0, #8
    c2a4:	72e0      	strb	r0, [r4, #11]
    c2a6:	e0d9      	b.n	c45c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x304>
    c2a8:	7022      	strb	r2, [r4, #0]
    c2aa:	70a6      	strb	r6, [r4, #2]
    c2ac:	7908      	ldrb	r0, [r1, #4]
    c2ae:	70e0      	strb	r0, [r4, #3]
    c2b0:	8888      	ldrh	r0, [r1, #4]
    c2b2:	0a00      	lsrs	r0, r0, #8
    c2b4:	7120      	strb	r0, [r4, #4]
    c2b6:	f8d1 0006 	ldr.w	r0, [r1, #6]
    c2ba:	f8c4 0005 	str.w	r0, [r4, #5]
    c2be:	f8d1 000a 	ldr.w	r0, [r1, #10]
    c2c2:	f8c4 0009 	str.w	r0, [r4, #9]
    c2c6:	89c8      	ldrh	r0, [r1, #14]
    c2c8:	f8a4 000d 	strh.w	r0, [r4, #13]
    c2cc:	200d      	movs	r0, #13
    c2ce:	e038      	b.n	c342 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c2d0:	2011      	movs	r0, #17
    c2d2:	e044      	b.n	c35e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x206>
    c2d4:	7026      	strb	r6, [r4, #0]
    c2d6:	7908      	ldrb	r0, [r1, #4]
    c2d8:	70a0      	strb	r0, [r4, #2]
    c2da:	7948      	ldrb	r0, [r1, #5]
    c2dc:	70e0      	strb	r0, [r4, #3]
    c2de:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    c2e2:	0a00      	lsrs	r0, r0, #8
    c2e4:	7120      	strb	r0, [r4, #4]
    c2e6:	79c8      	ldrb	r0, [r1, #7]
    c2e8:	e059      	b.n	c39e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x246>
    c2ea:	2008      	movs	r0, #8
    c2ec:	7020      	strb	r0, [r4, #0]
    c2ee:	7908      	ldrb	r0, [r1, #4]
    c2f0:	70a0      	strb	r0, [r4, #2]
    c2f2:	7988      	ldrb	r0, [r1, #6]
    c2f4:	70e0      	strb	r0, [r4, #3]
    c2f6:	88c8      	ldrh	r0, [r1, #6]
    c2f8:	0a00      	lsrs	r0, r0, #8
    c2fa:	7120      	strb	r0, [r4, #4]
    c2fc:	7a08      	ldrb	r0, [r1, #8]
    c2fe:	e04e      	b.n	c39e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x246>
    c300:	2030      	movs	r0, #48	; 0x30
    c302:	7020      	strb	r0, [r4, #0]
    c304:	7908      	ldrb	r0, [r1, #4]
    c306:	70a0      	strb	r0, [r4, #2]
    c308:	7988      	ldrb	r0, [r1, #6]
    c30a:	70e0      	strb	r0, [r4, #3]
    c30c:	88c8      	ldrh	r0, [r1, #6]
    c30e:	0a00      	lsrs	r0, r0, #8
    c310:	7120      	strb	r0, [r4, #4]
    c312:	2003      	movs	r0, #3
    c314:	e015      	b.n	c342 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c316:	7022      	strb	r2, [r4, #0]
    c318:	2007      	movs	r0, #7
    c31a:	e045      	b.n	c3a8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x250>
    c31c:	7022      	strb	r2, [r4, #0]
    c31e:	70a5      	strb	r5, [r4, #2]
    c320:	7908      	ldrb	r0, [r1, #4]
    c322:	70e0      	strb	r0, [r4, #3]
    c324:	7988      	ldrb	r0, [r1, #6]
    c326:	7120      	strb	r0, [r4, #4]
    c328:	88c8      	ldrh	r0, [r1, #6]
    c32a:	0a00      	lsrs	r0, r0, #8
    c32c:	7160      	strb	r0, [r4, #5]
    c32e:	7a08      	ldrb	r0, [r1, #8]
    c330:	71a0      	strb	r0, [r4, #6]
    c332:	7a48      	ldrb	r0, [r1, #9]
    c334:	e028      	b.n	c388 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x230>
    c336:	4620      	mov	r0, r4
    c338:	1d09      	adds	r1, r1, #4
    c33a:	f7f7 fe29 	bl	3f90 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xdc>
    c33e:	2800      	cmp	r0, #0
    c340:	d002      	beq.n	c348 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1f0>
    c342:	7060      	strb	r0, [r4, #1]
    c344:	1c80      	adds	r0, r0, #2
    c346:	b2c0      	uxtb	r0, r0
    c348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c34c:	e073      	b.n	c436 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2de>
    c34e:	e047      	b.n	c3e0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x288>
    c350:	e028      	b.n	c3a4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24c>
    c352:	e053      	b.n	c3fc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2a4>
    c354:	e061      	b.n	c41a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c2>
    c356:	e01a      	b.n	c38e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x236>
    c358:	e009      	b.n	c36e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x216>
    c35a:	e7ff      	b.n	c35c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x204>
    c35c:	2057      	movs	r0, #87	; 0x57
    c35e:	7020      	strb	r0, [r4, #0]
    c360:	7908      	ldrb	r0, [r1, #4]
    c362:	70a0      	strb	r0, [r4, #2]
    c364:	8888      	ldrh	r0, [r1, #4]
    c366:	0a00      	lsrs	r0, r0, #8
    c368:	70e0      	strb	r0, [r4, #3]
    c36a:	2002      	movs	r0, #2
    c36c:	e7e9      	b.n	c342 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c36e:	7022      	strb	r2, [r4, #0]
    c370:	2012      	movs	r0, #18
    c372:	70a0      	strb	r0, [r4, #2]
    c374:	7908      	ldrb	r0, [r1, #4]
    c376:	70e0      	strb	r0, [r4, #3]
    c378:	7948      	ldrb	r0, [r1, #5]
    c37a:	7120      	strb	r0, [r4, #4]
    c37c:	7988      	ldrb	r0, [r1, #6]
    c37e:	7160      	strb	r0, [r4, #5]
    c380:	88c8      	ldrh	r0, [r1, #6]
    c382:	0a00      	lsrs	r0, r0, #8
    c384:	71a0      	strb	r0, [r4, #6]
    c386:	7a08      	ldrb	r0, [r1, #8]
    c388:	71e0      	strb	r0, [r4, #7]
    c38a:	2006      	movs	r0, #6
    c38c:	e7d9      	b.n	c342 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c38e:	7023      	strb	r3, [r4, #0]
    c390:	20a1      	movs	r0, #161	; 0xa1
    c392:	70a0      	strb	r0, [r4, #2]
    c394:	7908      	ldrb	r0, [r1, #4]
    c396:	70e0      	strb	r0, [r4, #3]
    c398:	7948      	ldrb	r0, [r1, #5]
    c39a:	7120      	strb	r0, [r4, #4]
    c39c:	2000      	movs	r0, #0
    c39e:	7160      	strb	r0, [r4, #5]
    c3a0:	2004      	movs	r0, #4
    c3a2:	e7ce      	b.n	c342 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c3a4:	7023      	strb	r3, [r4, #0]
    c3a6:	20a2      	movs	r0, #162	; 0xa2
    c3a8:	70a0      	strb	r0, [r4, #2]
    c3aa:	7908      	ldrb	r0, [r1, #4]
    c3ac:	70e0      	strb	r0, [r4, #3]
    c3ae:	8888      	ldrh	r0, [r1, #4]
    c3b0:	0a00      	lsrs	r0, r0, #8
    c3b2:	7120      	strb	r0, [r4, #4]
    c3b4:	7988      	ldrb	r0, [r1, #6]
    c3b6:	7160      	strb	r0, [r4, #5]
    c3b8:	88c8      	ldrh	r0, [r1, #6]
    c3ba:	0a00      	lsrs	r0, r0, #8
    c3bc:	71a0      	strb	r0, [r4, #6]
    c3be:	7a08      	ldrb	r0, [r1, #8]
    c3c0:	71e0      	strb	r0, [r4, #7]
    c3c2:	8908      	ldrh	r0, [r1, #8]
    c3c4:	0a00      	lsrs	r0, r0, #8
    c3c6:	7220      	strb	r0, [r4, #8]
    c3c8:	7a88      	ldrb	r0, [r1, #10]
    c3ca:	7260      	strb	r0, [r4, #9]
    c3cc:	8948      	ldrh	r0, [r1, #10]
    c3ce:	0a00      	lsrs	r0, r0, #8
    c3d0:	72a0      	strb	r0, [r4, #10]
    c3d2:	7b08      	ldrb	r0, [r1, #12]
    c3d4:	72e0      	strb	r0, [r4, #11]
    c3d6:	8988      	ldrh	r0, [r1, #12]
    c3d8:	0a00      	lsrs	r0, r0, #8
    c3da:	7320      	strb	r0, [r4, #12]
    c3dc:	200b      	movs	r0, #11
    c3de:	e7b0      	b.n	c342 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c3e0:	7023      	strb	r3, [r4, #0]
    c3e2:	20a3      	movs	r0, #163	; 0xa3
    c3e4:	70a0      	strb	r0, [r4, #2]
    c3e6:	7908      	ldrb	r0, [r1, #4]
    c3e8:	70e0      	strb	r0, [r4, #3]
    c3ea:	8888      	ldrh	r0, [r1, #4]
    c3ec:	0a00      	lsrs	r0, r0, #8
    c3ee:	7120      	strb	r0, [r4, #4]
    c3f0:	7988      	ldrb	r0, [r1, #6]
    c3f2:	7160      	strb	r0, [r4, #5]
    c3f4:	79c8      	ldrb	r0, [r1, #7]
    c3f6:	71a0      	strb	r0, [r4, #6]
    c3f8:	2005      	movs	r0, #5
    c3fa:	e7a2      	b.n	c342 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c3fc:	7022      	strb	r2, [r4, #0]
    c3fe:	2013      	movs	r0, #19
    c400:	70a0      	strb	r0, [r4, #2]
    c402:	7908      	ldrb	r0, [r1, #4]
    c404:	70e0      	strb	r0, [r4, #3]
    c406:	7948      	ldrb	r0, [r1, #5]
    c408:	7120      	strb	r0, [r4, #4]
    c40a:	f8d1 0006 	ldr.w	r0, [r1, #6]
    c40e:	f8c4 0005 	str.w	r0, [r4, #5]
    c412:	8948      	ldrh	r0, [r1, #10]
    c414:	f8a4 0009 	strh.w	r0, [r4, #9]
    c418:	e020      	b.n	c45c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x304>
    c41a:	7023      	strb	r3, [r4, #0]
    c41c:	20a4      	movs	r0, #164	; 0xa4
    c41e:	70a0      	strb	r0, [r4, #2]
    c420:	7908      	ldrb	r0, [r1, #4]
    c422:	70e0      	strb	r0, [r4, #3]
    c424:	8888      	ldrh	r0, [r1, #4]
    c426:	0a00      	lsrs	r0, r0, #8
    c428:	7120      	strb	r0, [r4, #4]
    c42a:	7988      	ldrb	r0, [r1, #6]
    c42c:	7160      	strb	r0, [r4, #5]
    c42e:	79c8      	ldrb	r0, [r1, #7]
    c430:	71a0      	strb	r0, [r4, #6]
    c432:	2007      	movs	r0, #7
    c434:	e785      	b.n	c342 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c436:	7023      	strb	r3, [r4, #0]
    c438:	2080      	movs	r0, #128	; 0x80
    c43a:	70a0      	strb	r0, [r4, #2]
    c43c:	888a      	ldrh	r2, [r1, #4]
    c43e:	f8a4 2003 	strh.w	r2, [r4, #3]
    c442:	88ca      	ldrh	r2, [r1, #6]
    c444:	f8a4 2005 	strh.w	r2, [r4, #5]
    c448:	7a0a      	ldrb	r2, [r1, #8]
    c44a:	71e2      	strb	r2, [r4, #7]
    c44c:	7a4a      	ldrb	r2, [r1, #9]
    c44e:	8122      	strh	r2, [r4, #8]
    c450:	7a8a      	ldrb	r2, [r1, #10]
    c452:	72a2      	strb	r2, [r4, #10]
    c454:	7ac9      	ldrb	r1, [r1, #11]
    c456:	f001 0101 	and.w	r1, r1, #1
    c45a:	72e1      	strb	r1, [r4, #11]
    c45c:	200a      	movs	r0, #10
    c45e:	e770      	b.n	c342 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>

0000c460 <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>:
    c460:	223e      	movs	r2, #62	; 0x3e
    c462:	7002      	strb	r2, [r0, #0]
    c464:	2201      	movs	r2, #1
    c466:	7082      	strb	r2, [r0, #2]
    c468:	790a      	ldrb	r2, [r1, #4]
    c46a:	70c2      	strb	r2, [r0, #3]
    c46c:	798a      	ldrb	r2, [r1, #6]
    c46e:	7102      	strb	r2, [r0, #4]
    c470:	88ca      	ldrh	r2, [r1, #6]
    c472:	0a12      	lsrs	r2, r2, #8
    c474:	7142      	strb	r2, [r0, #5]
    c476:	7a0a      	ldrb	r2, [r1, #8]
    c478:	7182      	strb	r2, [r0, #6]
    c47a:	7a4a      	ldrb	r2, [r1, #9]
    c47c:	71c2      	strb	r2, [r0, #7]
    c47e:	f8d1 200a 	ldr.w	r2, [r1, #10]
    c482:	6082      	str	r2, [r0, #8]
    c484:	89ca      	ldrh	r2, [r1, #14]
    c486:	8182      	strh	r2, [r0, #12]
    c488:	7c0a      	ldrb	r2, [r1, #16]
    c48a:	7382      	strb	r2, [r0, #14]
    c48c:	8a0a      	ldrh	r2, [r1, #16]
    c48e:	0a12      	lsrs	r2, r2, #8
    c490:	73c2      	strb	r2, [r0, #15]
    c492:	7c8a      	ldrb	r2, [r1, #18]
    c494:	7402      	strb	r2, [r0, #16]
    c496:	8a4a      	ldrh	r2, [r1, #18]
    c498:	0a12      	lsrs	r2, r2, #8
    c49a:	7442      	strb	r2, [r0, #17]
    c49c:	7d0a      	ldrb	r2, [r1, #20]
    c49e:	7482      	strb	r2, [r0, #18]
    c4a0:	8a8a      	ldrh	r2, [r1, #20]
    c4a2:	0a12      	lsrs	r2, r2, #8
    c4a4:	74c2      	strb	r2, [r0, #19]
    c4a6:	7d89      	ldrb	r1, [r1, #22]
    c4a8:	7501      	strb	r1, [r0, #20]
    c4aa:	2013      	movs	r0, #19
    c4ac:	4770      	bx	lr

0000c4ae <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
    c4ae:	223e      	movs	r2, #62	; 0x3e
    c4b0:	7002      	strb	r2, [r0, #0]
    c4b2:	2201      	movs	r2, #1
    c4b4:	7082      	strb	r2, [r0, #2]
    c4b6:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    c4ba:	70c2      	strb	r2, [r0, #3]
    c4bc:	788a      	ldrb	r2, [r1, #2]
    c4be:	7102      	strb	r2, [r0, #4]
    c4c0:	884a      	ldrh	r2, [r1, #2]
    c4c2:	0a12      	lsrs	r2, r2, #8
    c4c4:	7142      	strb	r2, [r0, #5]
    c4c6:	790a      	ldrb	r2, [r1, #4]
    c4c8:	7182      	strb	r2, [r0, #6]
    c4ca:	794a      	ldrb	r2, [r1, #5]
    c4cc:	71c2      	strb	r2, [r0, #7]
    c4ce:	f8d1 2006 	ldr.w	r2, [r1, #6]
    c4d2:	6082      	str	r2, [r0, #8]
    c4d4:	894a      	ldrh	r2, [r1, #10]
    c4d6:	8182      	strh	r2, [r0, #12]
    c4d8:	7e0a      	ldrb	r2, [r1, #24]
    c4da:	7382      	strb	r2, [r0, #14]
    c4dc:	8b0a      	ldrh	r2, [r1, #24]
    c4de:	0a12      	lsrs	r2, r2, #8
    c4e0:	73c2      	strb	r2, [r0, #15]
    c4e2:	7e8a      	ldrb	r2, [r1, #26]
    c4e4:	7402      	strb	r2, [r0, #16]
    c4e6:	8b4a      	ldrh	r2, [r1, #26]
    c4e8:	0a12      	lsrs	r2, r2, #8
    c4ea:	7442      	strb	r2, [r0, #17]
    c4ec:	7f0a      	ldrb	r2, [r1, #28]
    c4ee:	7482      	strb	r2, [r0, #18]
    c4f0:	8b8a      	ldrh	r2, [r1, #28]
    c4f2:	0a12      	lsrs	r2, r2, #8
    c4f4:	74c2      	strb	r2, [r0, #19]
    c4f6:	7f89      	ldrb	r1, [r1, #30]
    c4f8:	7501      	strb	r1, [r0, #20]
    c4fa:	2113      	movs	r1, #19
    c4fc:	7041      	strb	r1, [r0, #1]
    c4fe:	4608      	mov	r0, r1
    c500:	4770      	bx	lr

0000c502 <sdc_hci_data_get>:
    c502:	b510      	push	{r4, lr}
    c504:	b120      	cbz	r0, c510 <sdc_hci_data_get+0xe>
    c506:	f7ff fda3 	bl	c050 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>
    c50a:	b120      	cbz	r0, c516 <sdc_hci_data_get+0x14>
    c50c:	2000      	movs	r0, #0
    c50e:	bd10      	pop	{r4, pc}
    c510:	f06f 0015 	mvn.w	r0, #21
    c514:	bd10      	pop	{r4, pc}
    c516:	f06f 0022 	mvn.w	r0, #34	; 0x22
    c51a:	bd10      	pop	{r4, pc}

0000c51c <sdc_hci_data_put>:
    c51c:	b510      	push	{r4, lr}
    c51e:	f06f 0415 	mvn.w	r4, #21
    c522:	b120      	cbz	r0, c52e <sdc_hci_data_put+0x12>
    c524:	f7ff fda2 	bl	c06c <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    c528:	b108      	cbz	r0, c52e <sdc_hci_data_put+0x12>
    c52a:	2000      	movs	r0, #0
    c52c:	bd10      	pop	{r4, pc}
    c52e:	4620      	mov	r0, r4
    c530:	bd10      	pop	{r4, pc}

0000c532 <sdc_hci_evt_get>:
    c532:	b510      	push	{r4, lr}
    c534:	b120      	cbz	r0, c540 <sdc_hci_evt_get+0xe>
    c536:	f7ff fda2 	bl	c07e <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>
    c53a:	b120      	cbz	r0, c546 <sdc_hci_evt_get+0x14>
    c53c:	2000      	movs	r0, #0
    c53e:	bd10      	pop	{r4, pc}
    c540:	f06f 0015 	mvn.w	r0, #21
    c544:	bd10      	pop	{r4, pc}
    c546:	f06f 0022 	mvn.w	r0, #34	; 0x22
    c54a:	bd10      	pop	{r4, pc}

0000c54c <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    c54c:	f002 bcb7 	b.w	eebe <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000c550 <sdc_hci_cmd_cb_read_transmit_power_level>:
    c550:	f002 bcf9 	b.w	ef46 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000c554 <sdc_hci_cmd_cb_set_event_mask>:
    c554:	b510      	push	{r4, lr}
    c556:	f7f7 fd79 	bl	404c <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    c55a:	2000      	movs	r0, #0
    c55c:	bd10      	pop	{r4, pc}

0000c55e <sdc_hci_cmd_cb_set_event_mask_page_2>:
    c55e:	b510      	push	{r4, lr}
    c560:	f7f7 fd82 	bl	4068 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    c564:	2000      	movs	r0, #0
    c566:	bd10      	pop	{r4, pc}

0000c568 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    c568:	f002 bd09 	b.w	ef7e <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000c56c <sdc_hci_cmd_vs_conn_event_extend>:
    c56c:	b508      	push	{r3, lr}
    c56e:	7800      	ldrb	r0, [r0, #0]
    c570:	f88d 0000 	strb.w	r0, [sp]
    c574:	4668      	mov	r0, sp
    c576:	f002 fc23 	bl	edc0 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    c57a:	bd08      	pop	{r3, pc}

0000c57c <sdc_hci_cmd_vs_conn_update>:
    c57c:	2001      	movs	r0, #1
    c57e:	4770      	bx	lr

0000c580 <sdc_hci_cmd_vs_event_length_set>:
    c580:	f7fd bbec 	b.w	9d5c <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000c584 <sdc_hci_cmd_vs_llpm_mode_set>:
    c584:	2001      	movs	r0, #1
    c586:	4770      	bx	lr

0000c588 <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    c588:	7800      	ldrb	r0, [r0, #0]
    c58a:	b100      	cbz	r0, c58e <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    c58c:	2001      	movs	r0, #1
    c58e:	f002 bb7d 	b.w	ec8c <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000c592 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    c592:	b570      	push	{r4, r5, r6, lr}
    c594:	4605      	mov	r5, r0
    c596:	2210      	movs	r2, #16
    c598:	2100      	movs	r1, #0
    c59a:	f7ff fc63 	bl	be64 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    c59e:	2210      	movs	r2, #16
    c5a0:	2100      	movs	r1, #0
    c5a2:	f105 0010 	add.w	r0, r5, #16
    c5a6:	f7ff fc5d 	bl	be64 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    c5aa:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    c5ae:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    c5b2:	1c40      	adds	r0, r0, #1
    c5b4:	d10b      	bne.n	c5ce <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    c5b6:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    c5ba:	1c40      	adds	r0, r0, #1
    c5bc:	d107      	bne.n	c5ce <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    c5be:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    c5c2:	1c40      	adds	r0, r0, #1
    c5c4:	d103      	bne.n	c5ce <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    c5c6:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    c5ca:	1c40      	adds	r0, r0, #1
    c5cc:	d00b      	beq.n	c5e6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    c5ce:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    c5d2:	6128      	str	r0, [r5, #16]
    c5d4:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    c5d8:	6168      	str	r0, [r5, #20]
    c5da:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    c5de:	61a8      	str	r0, [r5, #24]
    c5e0:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    c5e4:	61e8      	str	r0, [r5, #28]
    c5e6:	2000      	movs	r0, #0
    c5e8:	f7f8 fa7a 	bl	4ae0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    c5ec:	b918      	cbnz	r0, c5f6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    c5ee:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    c5f2:	07c0      	lsls	r0, r0, #31
    c5f4:	d118      	bne.n	c628 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    c5f6:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    c5fa:	1c40      	adds	r0, r0, #1
    c5fc:	d10b      	bne.n	c616 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    c5fe:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    c602:	1c40      	adds	r0, r0, #1
    c604:	d107      	bne.n	c616 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    c606:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    c60a:	1c40      	adds	r0, r0, #1
    c60c:	d103      	bne.n	c616 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    c60e:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    c612:	1c40      	adds	r0, r0, #1
    c614:	d008      	beq.n	c628 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    c616:	f854 0f90 	ldr.w	r0, [r4, #144]!
    c61a:	6028      	str	r0, [r5, #0]
    c61c:	6860      	ldr	r0, [r4, #4]
    c61e:	6068      	str	r0, [r5, #4]
    c620:	68a0      	ldr	r0, [r4, #8]
    c622:	60a8      	str	r0, [r5, #8]
    c624:	68e0      	ldr	r0, [r4, #12]
    c626:	60e8      	str	r0, [r5, #12]
    c628:	2000      	movs	r0, #0
    c62a:	bd70      	pop	{r4, r5, r6, pc}

0000c62c <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    c62c:	b570      	push	{r4, r5, r6, lr}
    c62e:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    c632:	4604      	mov	r4, r0
    c634:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    c638:	1c40      	adds	r0, r0, #1
    c63a:	d105      	bne.n	c648 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    c63c:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    c640:	43c0      	mvns	r0, r0
    c642:	0400      	lsls	r0, r0, #16
    c644:	0c00      	lsrs	r0, r0, #16
    c646:	d03a      	beq.n	c6be <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x92>
    c648:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    c64c:	07c0      	lsls	r0, r0, #31
    c64e:	d036      	beq.n	c6be <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x92>
    c650:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    c654:	f8c4 0001 	str.w	r0, [r4, #1]
    c658:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    c65c:	f8a4 0005 	strh.w	r0, [r4, #5]
    c660:	79a0      	ldrb	r0, [r4, #6]
    c662:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    c666:	71a0      	strb	r0, [r4, #6]
    c668:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    c66c:	1c40      	adds	r0, r0, #1
    c66e:	d00f      	beq.n	c690 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    c670:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    c674:	1c40      	adds	r0, r0, #1
    c676:	d00b      	beq.n	c690 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    c678:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    c67c:	1c40      	adds	r0, r0, #1
    c67e:	d007      	beq.n	c690 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    c680:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    c684:	1c40      	adds	r0, r0, #1
    c686:	d003      	beq.n	c690 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    c688:	2000      	movs	r0, #0
    c68a:	f7f8 fa29 	bl	4ae0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    c68e:	b140      	cbz	r0, c6a2 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    c690:	2210      	movs	r2, #16
    c692:	2100      	movs	r1, #0
    c694:	1de0      	adds	r0, r4, #7
    c696:	f7ff fbe5 	bl	be64 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    c69a:	2001      	movs	r0, #1
    c69c:	7020      	strb	r0, [r4, #0]
    c69e:	2000      	movs	r0, #0
    c6a0:	bd70      	pop	{r4, r5, r6, pc}
    c6a2:	f855 0f90 	ldr.w	r0, [r5, #144]!
    c6a6:	f8c4 0007 	str.w	r0, [r4, #7]
    c6aa:	6868      	ldr	r0, [r5, #4]
    c6ac:	f8c4 000b 	str.w	r0, [r4, #11]
    c6b0:	68a8      	ldr	r0, [r5, #8]
    c6b2:	f8c4 000f 	str.w	r0, [r4, #15]
    c6b6:	68e8      	ldr	r0, [r5, #12]
    c6b8:	f8c4 0013 	str.w	r0, [r4, #19]
    c6bc:	e7ed      	b.n	c69a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6e>
    c6be:	2000      	movs	r0, #0
    c6c0:	e7ec      	b.n	c69c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x70>

0000c6c2 <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    c6c2:	f002 bb63 	b.w	ed8c <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000c6c6 <sdc_hci_cmd_ip_read_bd_addr>:
    c6c6:	f002 bc0b 	b.w	eee0 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000c6ca <sdc_hci_cmd_ip_read_local_version_information>:
    c6ca:	f7fd bb55 	b.w	9d78 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000c6ce <sdc_hci_cmd_le_add_device_to_resolving_list>:
    c6ce:	f002 b81a 	b.w	e706 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>

0000c6d2 <sdc_hci_cmd_le_add_device_to_white_list>:
    c6d2:	f002 b833 	b.w	e73c <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000c6d6 <sdc_hci_cmd_le_clear_resolving_list>:
    c6d6:	f002 b848 	b.w	e76a <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>

0000c6da <sdc_hci_cmd_le_clear_white_list>:
    c6da:	f002 b853 	b.w	e784 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000c6de <sdc_hci_cmd_le_encrypt>:
    c6de:	f002 b85b 	b.w	e798 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000c6e2 <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
    c6e2:	8802      	ldrh	r2, [r0, #0]
    c6e4:	800a      	strh	r2, [r1, #0]
    c6e6:	f002 b860 	b.w	e7aa <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

0000c6ea <sdc_hci_cmd_le_long_term_key_request_reply>:
    c6ea:	8802      	ldrh	r2, [r0, #0]
    c6ec:	800a      	strh	r2, [r1, #0]
    c6ee:	f002 b875 	b.w	e7dc <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>

0000c6f2 <sdc_hci_cmd_le_rand>:
    c6f2:	f002 b89d 	b.w	e830 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000c6f6 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
    c6f6:	f002 b8a1 	b.w	e83c <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

0000c6fa <sdc_hci_cmd_le_read_buffer_size>:
    c6fa:	f7fd ba65 	b.w	9bc8 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000c6fe <sdc_hci_cmd_le_read_channel_map>:
    c6fe:	f7fd ba6d 	b.w	9bdc <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000c702 <sdc_hci_cmd_le_read_max_data_length>:
    c702:	f002 b8a4 	b.w	e84e <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000c706 <sdc_hci_cmd_le_read_phy>:
    c706:	f7fd ba8b 	b.w	9c20 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000c70a <sdc_hci_cmd_le_read_remote_features>:
    c70a:	f7fd bab1 	b.w	9c70 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000c70e <sdc_hci_cmd_le_read_resolving_list_size>:
    c70e:	f002 b8ae 	b.w	e86e <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>

0000c712 <sdc_hci_cmd_le_read_suggested_default_data_length>:
    c712:	f7fd bacd 	b.w	9cb0 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000c716 <sdc_hci_cmd_le_read_transmit_power>:
    c716:	f002 b8ae 	b.w	e876 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000c71a <sdc_hci_cmd_le_read_white_list_size>:
    c71a:	f002 b8b5 	b.w	e888 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000c71e <sdc_hci_cmd_le_remove_device_from_resolving_list>:
    c71e:	f002 b8b7 	b.w	e890 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>

0000c722 <sdc_hci_cmd_le_remove_device_from_white_list>:
    c722:	f002 b8ce 	b.w	e8c2 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000c726 <sdc_hci_cmd_le_set_address_resolution_enable>:
    c726:	f002 b8e1 	b.w	e8ec <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>

0000c72a <sdc_hci_cmd_le_set_adv_data>:
    c72a:	f002 b8ed 	b.w	e908 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

0000c72e <sdc_hci_cmd_le_set_adv_enable>:
    c72e:	f002 b927 	b.w	e980 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

0000c732 <sdc_hci_cmd_le_set_adv_params>:
    c732:	f002 b958 	b.w	e9e6 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

0000c736 <sdc_hci_cmd_le_set_data_length>:
    c736:	f002 b9e8 	b.w	eb0a <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000c73a <sdc_hci_cmd_le_set_default_phy>:
    c73a:	f7fd bac9 	b.w	9cd0 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000c73e <sdc_hci_cmd_le_set_event_mask>:
    c73e:	b510      	push	{r4, lr}
    c740:	f7f7 fc7e 	bl	4040 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    c744:	2000      	movs	r0, #0
    c746:	bd10      	pop	{r4, pc}

0000c748 <sdc_hci_cmd_le_set_phy>:
    c748:	f002 ba06 	b.w	eb58 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000c74c <sdc_hci_cmd_le_set_privacy_mode>:
    c74c:	f002 ba24 	b.w	eb98 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>

0000c750 <sdc_hci_cmd_le_set_random_address>:
    c750:	f002 ba38 	b.w	ebc4 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000c754 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>:
    c754:	f002 ba44 	b.w	ebe0 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>

0000c758 <sdc_hci_cmd_le_set_scan_response_data>:
    c758:	f002 ba4b 	b.w	ebf2 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>

0000c75c <sdc_hci_cmd_le_write_suggested_default_data_length>:
    c75c:	f002 ba7f 	b.w	ec5e <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000c760 <sdc_hci_cmd_lc_disconnect>:
    c760:	f001 bf81 	b.w	e666 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000c764 <sdc_hci_cmd_lc_read_remote_version_information>:
    c764:	f002 bbc8 	b.w	eef8 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    c768:	b570      	push	{r4, r5, r6, lr}
    c76a:	880b      	ldrh	r3, [r1, #0]
    c76c:	7f04      	ldrb	r4, [r0, #28]
    c76e:	f100 0524 	add.w	r5, r0, #36	; 0x24
    c772:	f423 4600 	bic.w	r6, r3, #32768	; 0x8000
    c776:	8802      	ldrh	r2, [r0, #0]
    c778:	4435      	add	r5, r6
    c77a:	1da4      	adds	r4, r4, #6
    c77c:	882d      	ldrh	r5, [r5, #0]
    c77e:	4422      	add	r2, r4
    c780:	b292      	uxth	r2, r2
    c782:	4425      	add	r5, r4
    c784:	1e54      	subs	r4, r2, #1
    c786:	442c      	add	r4, r5
    c788:	fb94 f4f2 	sdiv	r4, r4, r2
    c78c:	fb02 6204 	mla	r2, r2, r4, r6
    c790:	8840      	ldrh	r0, [r0, #2]
    c792:	b292      	uxth	r2, r2
    c794:	4290      	cmp	r0, r2
    c796:	d903      	bls.n	c7a0 <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    c798:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    c79c:	4310      	orrs	r0, r2
    c79e:	e002      	b.n	c7a6 <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    c7a0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    c7a4:	4398      	bics	r0, r3
    c7a6:	8008      	strh	r0, [r1, #0]
    c7a8:	bd70      	pop	{r4, r5, r6, pc}
    c7aa:	f420 4200 	bic.w	r2, r0, #32768	; 0x8000
    c7ae:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    c7b2:	429a      	cmp	r2, r3
    c7b4:	d107      	bne.n	c7c6 <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    c7b6:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    c7ba:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    c7be:	4288      	cmp	r0, r1
    c7c0:	d001      	beq.n	c7c6 <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    c7c2:	2001      	movs	r0, #1
    c7c4:	4770      	bx	lr
    c7c6:	2000      	movs	r0, #0
    c7c8:	4770      	bx	lr

0000c7ca <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>:
    c7ca:	b570      	push	{r4, r5, r6, lr}
    c7cc:	7f00      	ldrb	r0, [r0, #28]
    c7ce:	461c      	mov	r4, r3
    c7d0:	1d80      	adds	r0, r0, #6
    c7d2:	4408      	add	r0, r1
    c7d4:	4613      	mov	r3, r2
    c7d6:	8809      	ldrh	r1, [r1, #0]
    c7d8:	9a04      	ldr	r2, [sp, #16]
    c7da:	1cc9      	adds	r1, r1, #3
    c7dc:	b289      	uxth	r1, r1
    c7de:	1915      	adds	r5, r2, r4
    c7e0:	1ec0      	subs	r0, r0, #3
    c7e2:	428d      	cmp	r5, r1
    c7e4:	d805      	bhi.n	c7f2 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x28>
    c7e6:	1881      	adds	r1, r0, r2
    c7e8:	4622      	mov	r2, r4
    c7ea:	4618      	mov	r0, r3
    c7ec:	f7ff fac0 	bl	bd70 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c7f0:	e000      	b.n	c7f4 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x2a>
    c7f2:	2400      	movs	r4, #0
    c7f4:	4620      	mov	r0, r4
    c7f6:	bd70      	pop	{r4, r5, r6, pc}

0000c7f8 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>:
    c7f8:	b570      	push	{r4, r5, r6, lr}
    c7fa:	7f00      	ldrb	r0, [r0, #28]
    c7fc:	461c      	mov	r4, r3
    c7fe:	1d80      	adds	r0, r0, #6
    c800:	4408      	add	r0, r1
    c802:	4613      	mov	r3, r2
    c804:	8809      	ldrh	r1, [r1, #0]
    c806:	9a04      	ldr	r2, [sp, #16]
    c808:	1cc9      	adds	r1, r1, #3
    c80a:	b289      	uxth	r1, r1
    c80c:	1915      	adds	r5, r2, r4
    c80e:	1ec0      	subs	r0, r0, #3
    c810:	428d      	cmp	r5, r1
    c812:	d805      	bhi.n	c820 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x28>
    c814:	4410      	add	r0, r2
    c816:	4622      	mov	r2, r4
    c818:	4619      	mov	r1, r3
    c81a:	f7ff faa9 	bl	bd70 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c81e:	e000      	b.n	c822 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x2a>
    c820:	2400      	movs	r4, #0
    c822:	4620      	mov	r0, r4
    c824:	bd70      	pop	{r4, r5, r6, pc}

0000c826 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    c826:	8881      	ldrh	r1, [r0, #4]
    c828:	88c0      	ldrh	r0, [r0, #6]
    c82a:	4288      	cmp	r0, r1
    c82c:	d101      	bne.n	c832 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    c82e:	2001      	movs	r0, #1
    c830:	4770      	bx	lr
    c832:	2000      	movs	r0, #0
    c834:	4770      	bx	lr

0000c836 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>:
    c836:	8881      	ldrh	r1, [r0, #4]
    c838:	8900      	ldrh	r0, [r0, #8]
    c83a:	4288      	cmp	r0, r1
    c83c:	d101      	bne.n	c842 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI+0xc>
    c83e:	2001      	movs	r0, #1
    c840:	4770      	bx	lr
    c842:	2000      	movs	r0, #0
    c844:	4770      	bx	lr

0000c846 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    c846:	b570      	push	{r4, r5, r6, lr}
    c848:	4604      	mov	r4, r0
    c84a:	f100 0124 	add.w	r1, r0, #36	; 0x24
    c84e:	8880      	ldrh	r0, [r0, #4]
    c850:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    c854:	4401      	add	r1, r0
    c856:	8a20      	ldrh	r0, [r4, #16]
    c858:	2800      	cmp	r0, #0
    c85a:	d01a      	beq.n	c892 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
    c85c:	89a2      	ldrh	r2, [r4, #12]
    c85e:	2500      	movs	r5, #0
    c860:	4410      	add	r0, r2
    c862:	b280      	uxth	r0, r0
    c864:	81a0      	strh	r0, [r4, #12]
    c866:	880a      	ldrh	r2, [r1, #0]
    c868:	4290      	cmp	r0, r2
    c86a:	d905      	bls.n	c878 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x32>
    c86c:	f44f 71a5 	mov.w	r1, #330	; 0x14a
    c870:	f04f 0014 	mov.w	r0, #20
    c874:	f7f7 fa46 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c878:	d109      	bne.n	c88e <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
    c87a:	69a0      	ldr	r0, [r4, #24]
    c87c:	b108      	cbz	r0, c882 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x3c>
    c87e:	7f40      	ldrb	r0, [r0, #29]
    c880:	7088      	strb	r0, [r1, #2]
    c882:	f104 0104 	add.w	r1, r4, #4
    c886:	4620      	mov	r0, r4
    c888:	f7ff ff6e 	bl	c768 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    c88c:	81a5      	strh	r5, [r4, #12]
    c88e:	8225      	strh	r5, [r4, #16]
    c890:	2001      	movs	r0, #1
    c892:	bd70      	pop	{r4, r5, r6, pc}

0000c894 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    c894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c898:	4604      	mov	r4, r0
    c89a:	f100 0324 	add.w	r3, r0, #36	; 0x24
    c89e:	88c0      	ldrh	r0, [r0, #6]
    c8a0:	460e      	mov	r6, r1
    c8a2:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    c8a6:	8a60      	ldrh	r0, [r4, #18]
    c8a8:	19d9      	adds	r1, r3, r7
    c8aa:	b108      	cbz	r0, c8b0 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1c>
    c8ac:	42b0      	cmp	r0, r6
    c8ae:	d202      	bcs.n	c8b6 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x22>
    c8b0:	2000      	movs	r0, #0
    c8b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c8b6:	89e0      	ldrh	r0, [r4, #14]
    c8b8:	2500      	movs	r5, #0
    c8ba:	b140      	cbz	r0, c8ce <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3a>
    c8bc:	f8b1 c000 	ldrh.w	ip, [r1]
    c8c0:	4560      	cmp	r0, ip
    c8c2:	d008      	beq.n	c8d6 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x42>
    c8c4:	f240 211f 	movw	r1, #543	; 0x21f
    c8c8:	2014      	movs	r0, #20
    c8ca:	f7f7 fa1b 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c8ce:	7f60      	ldrb	r0, [r4, #29]
    c8d0:	7088      	strb	r0, [r1, #2]
    c8d2:	800d      	strh	r5, [r1, #0]
    c8d4:	e00e      	b.n	c8f4 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x60>
    c8d6:	f894 c01c 	ldrb.w	ip, [r4, #28]
    c8da:	4418      	add	r0, r3
    c8dc:	f10c 0c06 	add.w	ip, ip, #6
    c8e0:	44bc      	add	ip, r7
    c8e2:	4460      	add	r0, ip
    c8e4:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    c8e8:	f820 cc03 	strh.w	ip, [r0, #-3]
    c8ec:	f894 c020 	ldrb.w	ip, [r4, #32]
    c8f0:	f800 cc01 	strb.w	ip, [r0, #-1]
    c8f4:	89e0      	ldrh	r0, [r4, #14]
    c8f6:	4430      	add	r0, r6
    c8f8:	81e0      	strh	r0, [r4, #14]
    c8fa:	8808      	ldrh	r0, [r1, #0]
    c8fc:	4430      	add	r0, r6
    c8fe:	8008      	strh	r0, [r1, #0]
    c900:	b16a      	cbz	r2, c91e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x8a>
    c902:	1da1      	adds	r1, r4, #6
    c904:	4620      	mov	r0, r4
    c906:	f7ff ff2f 	bl	c768 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    c90a:	81e5      	strh	r5, [r4, #14]
    c90c:	7f60      	ldrb	r0, [r4, #29]
    c90e:	1c40      	adds	r0, r0, #1
    c910:	7760      	strb	r0, [r4, #29]
    c912:	7da0      	ldrb	r0, [r4, #22]
    c914:	b108      	cbz	r0, c91a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x86>
    c916:	88e0      	ldrh	r0, [r4, #6]
    c918:	82a0      	strh	r0, [r4, #20]
    c91a:	75a5      	strb	r5, [r4, #22]
    c91c:	e00b      	b.n	c936 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xa2>
    c91e:	7f20      	ldrb	r0, [r4, #28]
    c920:	89e1      	ldrh	r1, [r4, #14]
    c922:	1d80      	adds	r0, r0, #6
    c924:	4438      	add	r0, r7
    c926:	4419      	add	r1, r3
    c928:	4408      	add	r0, r1
    c92a:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    c92e:	83e1      	strh	r1, [r4, #30]
    c930:	7880      	ldrb	r0, [r0, #2]
    c932:	f884 0020 	strb.w	r0, [r4, #32]
    c936:	8265      	strh	r5, [r4, #18]
    c938:	75e5      	strb	r5, [r4, #23]
    c93a:	2001      	movs	r0, #1
    c93c:	e7b9      	b.n	c8b2 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>

0000c93e <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    c93e:	b510      	push	{r4, lr}
    c940:	4604      	mov	r4, r0
    c942:	88c0      	ldrh	r0, [r0, #6]
    c944:	88a1      	ldrh	r1, [r4, #4]
    c946:	4281      	cmp	r1, r0
    c948:	d007      	beq.n	c95a <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    c94a:	89a0      	ldrh	r0, [r4, #12]
    c94c:	b928      	cbnz	r0, c95a <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    c94e:	8a20      	ldrh	r0, [r4, #16]
    c950:	b918      	cbnz	r0, c95a <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    c952:	88a0      	ldrh	r0, [r4, #4]
    c954:	8aa1      	ldrh	r1, [r4, #20]
    c956:	4288      	cmp	r0, r1
    c958:	d101      	bne.n	c95e <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x20>
    c95a:	2000      	movs	r0, #0
    c95c:	bd10      	pop	{r4, pc}
    c95e:	1d21      	adds	r1, r4, #4
    c960:	4620      	mov	r0, r4
    c962:	f7ff ff01 	bl	c768 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    c966:	2000      	movs	r0, #0
    c968:	8220      	strh	r0, [r4, #16]
    c96a:	2001      	movs	r0, #1
    c96c:	bd10      	pop	{r4, pc}

0000c96e <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    c96e:	b510      	push	{r4, lr}
    c970:	4604      	mov	r4, r0
    c972:	f100 0224 	add.w	r2, r0, #36	; 0x24
    c976:	88c0      	ldrh	r0, [r0, #6]
    c978:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    c97c:	4402      	add	r2, r0
    c97e:	8820      	ldrh	r0, [r4, #0]
    c980:	2845      	cmp	r0, #69	; 0x45
    c982:	d200      	bcs.n	c986 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    c984:	2045      	movs	r0, #69	; 0x45
    c986:	4288      	cmp	r0, r1
    c988:	d204      	bcs.n	c994 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    c98a:	f44f 7180 	mov.w	r1, #256	; 0x100
    c98e:	2014      	movs	r0, #20
    c990:	f7f7 f9b8 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c994:	7de0      	ldrb	r0, [r4, #23]
    c996:	2800      	cmp	r0, #0
    c998:	d003      	beq.n	c9a2 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    c99a:	8810      	ldrh	r0, [r2, #0]
    c99c:	4288      	cmp	r0, r1
    c99e:	d201      	bcs.n	c9a4 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    c9a0:	2000      	movs	r0, #0
    c9a2:	bd10      	pop	{r4, pc}
    c9a4:	8011      	strh	r1, [r2, #0]
    c9a6:	1da1      	adds	r1, r4, #6
    c9a8:	4620      	mov	r0, r4
    c9aa:	f7ff fedd 	bl	c768 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    c9ae:	2000      	movs	r0, #0
    c9b0:	75e0      	strb	r0, [r4, #23]
    c9b2:	2001      	movs	r0, #1
    c9b4:	bd10      	pop	{r4, pc}

0000c9b6 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>:
    c9b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c9ba:	8941      	ldrh	r1, [r0, #10]
    c9bc:	8886      	ldrh	r6, [r0, #4]
    c9be:	4604      	mov	r4, r0
    c9c0:	2500      	movs	r5, #0
    c9c2:	f100 070a 	add.w	r7, r0, #10
    c9c6:	e006      	b.n	c9d6 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x20>
    c9c8:	4639      	mov	r1, r7
    c9ca:	4620      	mov	r0, r4
    c9cc:	f7ff fecc 	bl	c768 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    c9d0:	1c6d      	adds	r5, r5, #1
    c9d2:	8961      	ldrh	r1, [r4, #10]
    c9d4:	b2ad      	uxth	r5, r5
    c9d6:	42b1      	cmp	r1, r6
    c9d8:	d1f6      	bne.n	c9c8 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x12>
    c9da:	4628      	mov	r0, r5
    c9dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c9e0 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    c9e0:	b530      	push	{r4, r5, lr}
    c9e2:	88c4      	ldrh	r4, [r0, #6]
    c9e4:	8881      	ldrh	r1, [r0, #4]
    c9e6:	f100 0224 	add.w	r2, r0, #36	; 0x24
    c9ea:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    c9ee:	4413      	add	r3, r2
    c9f0:	8882      	ldrh	r2, [r0, #4]
    c9f2:	8a85      	ldrh	r5, [r0, #20]
    c9f4:	42aa      	cmp	r2, r5
    c9f6:	d012      	beq.n	ca1e <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    c9f8:	42a1      	cmp	r1, r4
    c9fa:	d010      	beq.n	ca1e <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    c9fc:	8981      	ldrh	r1, [r0, #12]
    c9fe:	b971      	cbnz	r1, ca1e <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    ca00:	6982      	ldr	r2, [r0, #24]
    ca02:	b172      	cbz	r2, ca22 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    ca04:	4610      	mov	r0, r2
    ca06:	f7ff ff16 	bl	c836 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>
    ca0a:	b950      	cbnz	r0, ca22 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    ca0c:	8910      	ldrh	r0, [r2, #8]
    ca0e:	3224      	adds	r2, #36	; 0x24
    ca10:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    ca14:	4410      	add	r0, r2
    ca16:	7899      	ldrb	r1, [r3, #2]
    ca18:	7880      	ldrb	r0, [r0, #2]
    ca1a:	4288      	cmp	r0, r1
    ca1c:	d101      	bne.n	ca22 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    ca1e:	2000      	movs	r0, #0
    ca20:	bd30      	pop	{r4, r5, pc}
    ca22:	4618      	mov	r0, r3
    ca24:	bd30      	pop	{r4, r5, pc}

0000ca26 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    ca26:	7f00      	ldrb	r0, [r0, #28]
    ca28:	1d80      	adds	r0, r0, #6
    ca2a:	4408      	add	r0, r1
    ca2c:	1ec0      	subs	r0, r0, #3
    ca2e:	6010      	str	r0, [r2, #0]
    ca30:	8808      	ldrh	r0, [r1, #0]
    ca32:	4770      	bx	lr

0000ca34 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    ca34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ca38:	460e      	mov	r6, r1
    ca3a:	88c1      	ldrh	r1, [r0, #6]
    ca3c:	8902      	ldrh	r2, [r0, #8]
    ca3e:	4604      	mov	r4, r0
    ca40:	f100 0824 	add.w	r8, r0, #36	; 0x24
    ca44:	8800      	ldrh	r0, [r0, #0]
    ca46:	f421 4500 	bic.w	r5, r1, #32768	; 0x8000
    ca4a:	f422 4700 	bic.w	r7, r2, #32768	; 0x8000
    ca4e:	2845      	cmp	r0, #69	; 0x45
    ca50:	d200      	bcs.n	ca54 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    ca52:	2045      	movs	r0, #69	; 0x45
    ca54:	42b0      	cmp	r0, r6
    ca56:	d203      	bcs.n	ca60 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    ca58:	21c2      	movs	r1, #194	; 0xc2
    ca5a:	2014      	movs	r0, #20
    ca5c:	f7f7 f952 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ca60:	4610      	mov	r0, r2
    ca62:	f7ff fea2 	bl	c7aa <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    ca66:	b110      	cbz	r0, ca6e <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    ca68:	2000      	movs	r0, #0
    ca6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ca6e:	42af      	cmp	r7, r5
    ca70:	d908      	bls.n	ca84 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    ca72:	7f21      	ldrb	r1, [r4, #28]
    ca74:	1b78      	subs	r0, r7, r5
    ca76:	1a40      	subs	r0, r0, r1
    ca78:	1f80      	subs	r0, r0, #6
    ca7a:	4286      	cmp	r6, r0
    ca7c:	dd02      	ble.n	ca84 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    ca7e:	2000      	movs	r0, #0
    ca80:	75e0      	strb	r0, [r4, #23]
    ca82:	e7f1      	b.n	ca68 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    ca84:	eb08 0005 	add.w	r0, r8, r5
    ca88:	2101      	movs	r1, #1
    ca8a:	8006      	strh	r6, [r0, #0]
    ca8c:	75e1      	strb	r1, [r4, #23]
    ca8e:	e7ec      	b.n	ca6a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000ca90 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    ca90:	b538      	push	{r3, r4, r5, lr}
    ca92:	88c4      	ldrh	r4, [r0, #6]
    ca94:	8881      	ldrh	r1, [r0, #4]
    ca96:	f100 0224 	add.w	r2, r0, #36	; 0x24
    ca9a:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    ca9e:	441a      	add	r2, r3
    caa0:	42a1      	cmp	r1, r4
    caa2:	d010      	beq.n	cac6 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    caa4:	8983      	ldrh	r3, [r0, #12]
    caa6:	8a05      	ldrh	r5, [r0, #16]
    caa8:	8812      	ldrh	r2, [r2, #0]
    caaa:	442b      	add	r3, r5
    caac:	4293      	cmp	r3, r2
    caae:	d308      	bcc.n	cac2 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    cab0:	f8ad 1000 	strh.w	r1, [sp]
    cab4:	4669      	mov	r1, sp
    cab6:	f7ff fe57 	bl	c768 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    caba:	f8bd 0000 	ldrh.w	r0, [sp]
    cabe:	42a0      	cmp	r0, r4
    cac0:	d001      	beq.n	cac6 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    cac2:	2001      	movs	r0, #1
    cac4:	bd38      	pop	{r3, r4, r5, pc}
    cac6:	2000      	movs	r0, #0
    cac8:	bd38      	pop	{r3, r4, r5, pc}

0000caca <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    caca:	b570      	push	{r4, r5, r6, lr}
    cacc:	88c6      	ldrh	r6, [r0, #6]
    cace:	8885      	ldrh	r5, [r0, #4]
    cad0:	4603      	mov	r3, r0
    cad2:	f100 0424 	add.w	r4, r0, #36	; 0x24
    cad6:	f425 4000 	bic.w	r0, r5, #32768	; 0x8000
    cada:	4420      	add	r0, r4
    cadc:	42b5      	cmp	r5, r6
    cade:	d102      	bne.n	cae6 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    cae0:	2000      	movs	r0, #0
    cae2:	8218      	strh	r0, [r3, #16]
    cae4:	bd70      	pop	{r4, r5, r6, pc}
    cae6:	8804      	ldrh	r4, [r0, #0]
    cae8:	899d      	ldrh	r5, [r3, #12]
    caea:	7f1e      	ldrb	r6, [r3, #28]
    caec:	1b64      	subs	r4, r4, r5
    caee:	4435      	add	r5, r6
    caf0:	4428      	add	r0, r5
    caf2:	880d      	ldrh	r5, [r1, #0]
    caf4:	b2a4      	uxth	r4, r4
    caf6:	1cc0      	adds	r0, r0, #3
    caf8:	42a5      	cmp	r5, r4
    cafa:	d900      	bls.n	cafe <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    cafc:	800c      	strh	r4, [r1, #0]
    cafe:	899c      	ldrh	r4, [r3, #12]
    cb00:	b124      	cbz	r4, cb0c <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    cb02:	2400      	movs	r4, #0
    cb04:	7014      	strb	r4, [r2, #0]
    cb06:	8809      	ldrh	r1, [r1, #0]
    cb08:	8219      	strh	r1, [r3, #16]
    cb0a:	bd70      	pop	{r4, r5, r6, pc}
    cb0c:	2401      	movs	r4, #1
    cb0e:	e7f9      	b.n	cb04 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000cb10 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>:
    cb10:	b510      	push	{r4, lr}
    cb12:	8a81      	ldrh	r1, [r0, #20]
    cb14:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    cb18:	3aff      	subs	r2, #255	; 0xff
    cb1a:	d002      	beq.n	cb22 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x12>
    cb1c:	7d82      	ldrb	r2, [r0, #22]
    cb1e:	b952      	cbnz	r2, cb36 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x26>
    cb20:	e004      	b.n	cb2c <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x1c>
    cb22:	f240 3155 	movw	r1, #853	; 0x355
    cb26:	2014      	movs	r0, #20
    cb28:	f7f7 f8ec 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cb2c:	8880      	ldrh	r0, [r0, #4]
    cb2e:	4281      	cmp	r1, r0
    cb30:	d101      	bne.n	cb36 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x26>
    cb32:	2000      	movs	r0, #0
    cb34:	bd10      	pop	{r4, pc}
    cb36:	2001      	movs	r0, #1
    cb38:	bd10      	pop	{r4, pc}

0000cb3a <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>:
    cb3a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    cb3e:	8281      	strh	r1, [r0, #20]
    cb40:	2100      	movs	r1, #0
    cb42:	7581      	strb	r1, [r0, #22]
    cb44:	4770      	bx	lr

0000cb46 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>:
    cb46:	b510      	push	{r4, lr}
    cb48:	8a81      	ldrh	r1, [r0, #20]
    cb4a:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    cb4e:	3aff      	subs	r2, #255	; 0xff
    cb50:	d004      	beq.n	cb5c <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x16>
    cb52:	f44f 714e 	mov.w	r1, #824	; 0x338
    cb56:	2014      	movs	r0, #20
    cb58:	f7f7 f8d4 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cb5c:	88c1      	ldrh	r1, [r0, #6]
    cb5e:	8281      	strh	r1, [r0, #20]
    cb60:	89c1      	ldrh	r1, [r0, #14]
    cb62:	b101      	cbz	r1, cb66 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x20>
    cb64:	2101      	movs	r1, #1
    cb66:	7581      	strb	r1, [r0, #22]
    cb68:	bd10      	pop	{r4, pc}

0000cb6a <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    cb6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cb6e:	461d      	mov	r5, r3
    cb70:	4616      	mov	r6, r2
    cb72:	9f06      	ldr	r7, [sp, #24]
    cb74:	460b      	mov	r3, r1
    cb76:	4604      	mov	r4, r0
    cb78:	463a      	mov	r2, r7
    cb7a:	4629      	mov	r1, r5
    cb7c:	4630      	mov	r0, r6
    cb7e:	f000 f84f 	bl	cc20 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    cb82:	4283      	cmp	r3, r0
    cb84:	d201      	bcs.n	cb8a <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    cb86:	21a1      	movs	r1, #161	; 0xa1
    cb88:	e018      	b.n	cbbc <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    cb8a:	1ce0      	adds	r0, r4, #3
    cb8c:	f020 0103 	bic.w	r1, r0, #3
    cb90:	4620      	mov	r0, r4
    cb92:	42a1      	cmp	r1, r4
    cb94:	d001      	beq.n	cb9a <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x30>
    cb96:	21a2      	movs	r1, #162	; 0xa2
    cb98:	e010      	b.n	cbbc <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    cb9a:	2224      	movs	r2, #36	; 0x24
    cb9c:	2100      	movs	r1, #0
    cb9e:	f7ff f961 	bl	be64 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    cba2:	f64f 70ff 	movw	r0, #65535	; 0xffff
    cba6:	82a0      	strh	r0, [r4, #20]
    cba8:	19a8      	adds	r0, r5, r6
    cbaa:	1d80      	adds	r0, r0, #6
    cbac:	4378      	muls	r0, r7
    cbae:	b280      	uxth	r0, r0
    cbb0:	7725      	strb	r5, [r4, #28]
    cbb2:	8060      	strh	r0, [r4, #2]
    cbb4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    cbb8:	d903      	bls.n	cbc2 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x58>
    cbba:	21a8      	movs	r1, #168	; 0xa8
    cbbc:	2014      	movs	r0, #20
    cbbe:	f7f7 f8a1 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cbc2:	8026      	strh	r6, [r4, #0]
    cbc4:	2000      	movs	r0, #0
    cbc6:	7760      	strb	r0, [r4, #29]
    cbc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000cbcc <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>:
    cbcc:	6181      	str	r1, [r0, #24]
    cbce:	6188      	str	r0, [r1, #24]
    cbd0:	4770      	bx	lr

0000cbd2 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    cbd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cbd6:	460b      	mov	r3, r1
    cbd8:	4604      	mov	r4, r0
    cbda:	f100 0124 	add.w	r1, r0, #36	; 0x24
    cbde:	8905      	ldrh	r5, [r0, #8]
    cbe0:	8946      	ldrh	r6, [r0, #10]
    cbe2:	8880      	ldrh	r0, [r0, #4]
    cbe4:	f425 4700 	bic.w	r7, r5, #32768	; 0x8000
    cbe8:	4439      	add	r1, r7
    cbea:	460f      	mov	r7, r1
    cbec:	4285      	cmp	r5, r0
    cbee:	d102      	bne.n	cbf6 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x24>
    cbf0:	2000      	movs	r0, #0
    cbf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cbf6:	b10a      	cbz	r2, cbfc <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x2a>
    cbf8:	1cc8      	adds	r0, r1, #3
    cbfa:	6010      	str	r0, [r2, #0]
    cbfc:	b123      	cbz	r3, cc08 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x36>
    cbfe:	7f22      	ldrb	r2, [r4, #28]
    cc00:	1cf9      	adds	r1, r7, #3
    cc02:	4618      	mov	r0, r3
    cc04:	f7ff f8b4 	bl	bd70 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cc08:	883f      	ldrh	r7, [r7, #0]
    cc0a:	f104 0108 	add.w	r1, r4, #8
    cc0e:	4620      	mov	r0, r4
    cc10:	f7ff fdaa 	bl	c768 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    cc14:	42b5      	cmp	r5, r6
    cc16:	d101      	bne.n	cc1c <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x4a>
    cc18:	8920      	ldrh	r0, [r4, #8]
    cc1a:	8160      	strh	r0, [r4, #10]
    cc1c:	4638      	mov	r0, r7
    cc1e:	e7e8      	b.n	cbf2 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x20>

0000cc20 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    cc20:	4401      	add	r1, r0
    cc22:	1d89      	adds	r1, r1, #6
    cc24:	4351      	muls	r1, r2
    cc26:	b28a      	uxth	r2, r1
    cc28:	2100      	movs	r1, #0
    cc2a:	2845      	cmp	r0, #69	; 0x45
    cc2c:	d201      	bcs.n	cc32 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x12>
    cc2e:	f1c0 0145 	rsb	r1, r0, #69	; 0x45
    cc32:	3224      	adds	r2, #36	; 0x24
    cc34:	1850      	adds	r0, r2, r1
    cc36:	b280      	uxth	r0, r0
    cc38:	4770      	bx	lr

0000cc3a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    cc3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cc3e:	4688      	mov	r8, r1
    cc40:	88c1      	ldrh	r1, [r0, #6]
    cc42:	4604      	mov	r4, r0
    cc44:	8900      	ldrh	r0, [r0, #8]
    cc46:	f421 4600 	bic.w	r6, r1, #32768	; 0x8000
    cc4a:	f104 0524 	add.w	r5, r4, #36	; 0x24
    cc4e:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    cc52:	eb05 0906 	add.w	r9, r5, r6
    cc56:	f7ff fda8 	bl	c7aa <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    cc5a:	2200      	movs	r2, #0
    cc5c:	b998      	cbnz	r0, cc86 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    cc5e:	8820      	ldrh	r0, [r4, #0]
    cc60:	2845      	cmp	r0, #69	; 0x45
    cc62:	d200      	bcs.n	cc66 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    cc64:	2045      	movs	r0, #69	; 0x45
    cc66:	42b7      	cmp	r7, r6
    cc68:	d906      	bls.n	cc78 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    cc6a:	7f23      	ldrb	r3, [r4, #28]
    cc6c:	1bb9      	subs	r1, r7, r6
    cc6e:	1ac9      	subs	r1, r1, r3
    cc70:	1f89      	subs	r1, r1, #6
    cc72:	4281      	cmp	r1, r0
    cc74:	da00      	bge.n	cc78 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    cc76:	4608      	mov	r0, r1
    cc78:	89e1      	ldrh	r1, [r4, #14]
    cc7a:	b111      	cbz	r1, cc82 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    cc7c:	f8b9 3000 	ldrh.w	r3, [r9]
    cc80:	1ac0      	subs	r0, r0, r3
    cc82:	4540      	cmp	r0, r8
    cc84:	da03      	bge.n	cc8e <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    cc86:	8262      	strh	r2, [r4, #18]
    cc88:	2000      	movs	r0, #0
    cc8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cc8e:	7f20      	ldrb	r0, [r4, #28]
    cc90:	4429      	add	r1, r5
    cc92:	1d80      	adds	r0, r0, #6
    cc94:	4430      	add	r0, r6
    cc96:	4408      	add	r0, r1
    cc98:	f8a4 8012 	strh.w	r8, [r4, #18]
    cc9c:	1ec0      	subs	r0, r0, #3
    cc9e:	e7f4      	b.n	cc8a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000cca0 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>:
    cca0:	2100      	movs	r1, #0
    cca2:	81c1      	strh	r1, [r0, #14]
    cca4:	8241      	strh	r1, [r0, #18]
    cca6:	75c1      	strb	r1, [r0, #23]
    cca8:	7581      	strb	r1, [r0, #22]
    ccaa:	4770      	bx	lr

0000ccac <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    ccac:	b570      	push	{r4, r5, r6, lr}
    ccae:	2300      	movs	r3, #0
    ccb0:	2908      	cmp	r1, #8
    ccb2:	d204      	bcs.n	ccbe <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x12>
    ccb4:	f240 11cb 	movw	r1, #459	; 0x1cb
    ccb8:	2015      	movs	r0, #21
    ccba:	f7f7 f823 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ccbe:	6802      	ldr	r2, [r0, #0]
    ccc0:	b90a      	cbnz	r2, ccc6 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    ccc2:	e01e      	b.n	cd02 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    ccc4:	4610      	mov	r0, r2
    ccc6:	6802      	ldr	r2, [r0, #0]
    ccc8:	8893      	ldrh	r3, [r2, #4]
    ccca:	428b      	cmp	r3, r1
    cccc:	d002      	beq.n	ccd4 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x28>
    ccce:	6813      	ldr	r3, [r2, #0]
    ccd0:	2b00      	cmp	r3, #0
    ccd2:	d1f7      	bne.n	ccc4 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x18>
    ccd4:	8894      	ldrh	r4, [r2, #4]
    ccd6:	4613      	mov	r3, r2
    ccd8:	428c      	cmp	r4, r1
    ccda:	d101      	bne.n	cce0 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x34>
    ccdc:	6811      	ldr	r1, [r2, #0]
    ccde:	e00d      	b.n	ccfc <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x50>
    cce0:	f101 0508 	add.w	r5, r1, #8
    cce4:	b2ae      	uxth	r6, r5
    cce6:	2500      	movs	r5, #0
    cce8:	42b4      	cmp	r4, r6
    ccea:	d309      	bcc.n	cd00 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x54>
    ccec:	1a64      	subs	r4, r4, r1
    ccee:	4411      	add	r1, r2
    ccf0:	600d      	str	r5, [r1, #0]
    ccf2:	808c      	strh	r4, [r1, #4]
    ccf4:	6802      	ldr	r2, [r0, #0]
    ccf6:	6812      	ldr	r2, [r2, #0]
    ccf8:	6002      	str	r2, [r0, #0]
    ccfa:	600a      	str	r2, [r1, #0]
    ccfc:	6001      	str	r1, [r0, #0]
    ccfe:	e000      	b.n	cd02 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    cd00:	2300      	movs	r3, #0
    cd02:	4618      	mov	r0, r3
    cd04:	bd70      	pop	{r4, r5, r6, pc}

0000cd06 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    cd06:	b510      	push	{r4, lr}
    cd08:	000c      	movs	r4, r1
    cd0a:	d006      	beq.n	cd1a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x14>
    cd0c:	2c08      	cmp	r4, #8
    cd0e:	d209      	bcs.n	cd24 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1e>
    cd10:	f240 1195 	movw	r1, #405	; 0x195
    cd14:	2015      	movs	r0, #21
    cd16:	f7f6 fff5 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cd1a:	b108      	cbz	r0, cd20 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    cd1c:	2100      	movs	r1, #0
    cd1e:	6001      	str	r1, [r0, #0]
    cd20:	2000      	movs	r0, #0
    cd22:	bd10      	pop	{r4, pc}
    cd24:	b118      	cbz	r0, cd2e <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x28>
    cd26:	b2a1      	uxth	r1, r4
    cd28:	6800      	ldr	r0, [r0, #0]
    cd2a:	f000 f814 	bl	cd56 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    cd2e:	1d20      	adds	r0, r4, #4
    cd30:	bd10      	pop	{r4, pc}

0000cd32 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    cd32:	2100      	movs	r1, #0
    cd34:	6802      	ldr	r2, [r0, #0]
    cd36:	e003      	b.n	cd40 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    cd38:	8893      	ldrh	r3, [r2, #4]
    cd3a:	6812      	ldr	r2, [r2, #0]
    cd3c:	4419      	add	r1, r3
    cd3e:	b289      	uxth	r1, r1
    cd40:	2a00      	cmp	r2, #0
    cd42:	d1f9      	bne.n	cd38 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    cd44:	f000 b807 	b.w	cd56 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000cd48 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    cd48:	2300      	movs	r3, #0
    cd4a:	600b      	str	r3, [r1, #0]
    cd4c:	808a      	strh	r2, [r1, #4]
    cd4e:	6802      	ldr	r2, [r0, #0]
    cd50:	600a      	str	r2, [r1, #0]
    cd52:	6001      	str	r1, [r0, #0]
    cd54:	4770      	bx	lr
    cd56:	2300      	movs	r3, #0
    cd58:	6043      	str	r3, [r0, #4]
    cd5a:	1d02      	adds	r2, r0, #4
    cd5c:	8101      	strh	r1, [r0, #8]
    cd5e:	6002      	str	r2, [r0, #0]
    cd60:	4770      	bx	lr

0000cd62 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>:
    cd62:	f5a0 437f 	sub.w	r3, r0, #65280	; 0xff00
    cd66:	3bff      	subs	r3, #255	; 0xff
    cd68:	d001      	beq.n	cd6e <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0xc>
    cd6a:	2902      	cmp	r1, #2
    cd6c:	d301      	bcc.n	cd72 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x10>
    cd6e:	2000      	movs	r0, #0
    cd70:	4770      	bx	lr
    cd72:	f7f7 ba9b 	b.w	42ac <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>

0000cd76 <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY>:
    cd76:	b50e      	push	{r1, r2, r3, lr}
    cd78:	4669      	mov	r1, sp
    cd7a:	f000 f818 	bl	cdae <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    cd7e:	b120      	cbz	r0, cd8a <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY+0x14>
    cd80:	f44f 71b2 	mov.w	r1, #356	; 0x164
    cd84:	2017      	movs	r0, #23
    cd86:	f7f6 ffbd 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cd8a:	4668      	mov	r0, sp
    cd8c:	f7f7 fa0c 	bl	41a8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    cd90:	b108      	cbz	r0, cd96 <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY+0x20>
    cd92:	2000      	movs	r0, #0
    cd94:	bd0e      	pop	{r1, r2, r3, pc}
    cd96:	2001      	movs	r0, #1
    cd98:	bd0e      	pop	{r1, r2, r3, pc}

0000cd9a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    cd9a:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    cd9e:	3aff      	subs	r2, #255	; 0xff
    cda0:	d001      	beq.n	cda6 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xc>
    cda2:	2902      	cmp	r1, #2
    cda4:	d301      	bcc.n	cdaa <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x10>
    cda6:	2000      	movs	r0, #0
    cda8:	4770      	bx	lr
    cdaa:	f7f7 bab9 	b.w	4320 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>

0000cdae <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>:
    cdae:	b570      	push	{r4, r5, r6, lr}
    cdb0:	4605      	mov	r5, r0
    cdb2:	460c      	mov	r4, r1
    cdb4:	4608      	mov	r0, r1
    cdb6:	f000 f864 	bl	ce82 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    cdba:	b108      	cbz	r0, cdc0 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x12>
    cdbc:	2010      	movs	r0, #16
    cdbe:	bd70      	pop	{r4, r5, r6, pc}
    cdc0:	2d02      	cmp	r5, #2
    cdc2:	d301      	bcc.n	cdc8 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x1a>
    cdc4:	2007      	movs	r0, #7
    cdc6:	bd70      	pop	{r4, r5, r6, pc}
    cdc8:	7025      	strb	r5, [r4, #0]
    cdca:	2000      	movs	r0, #0
    cdcc:	8060      	strh	r0, [r4, #2]
    cdce:	bd70      	pop	{r4, r5, r6, pc}
    cdd0:	b510      	push	{r4, lr}
    cdd2:	4604      	mov	r4, r0
    cdd4:	f7f7 faf0 	bl	43b8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    cdd8:	42a0      	cmp	r0, r4
    cdda:	d901      	bls.n	cde0 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x32>
    cddc:	2001      	movs	r0, #1
    cdde:	bd10      	pop	{r4, pc}
    cde0:	2000      	movs	r0, #0
    cde2:	bd10      	pop	{r4, pc}
    cde4:	4770      	bx	lr

0000cde6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    cde6:	b570      	push	{r4, r5, r6, lr}
    cde8:	460e      	mov	r6, r1
    cdea:	461d      	mov	r5, r3
    cdec:	4611      	mov	r1, r2
    cdee:	f000 f811 	bl	ce14 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    cdf2:	4604      	mov	r4, r0
    cdf4:	4629      	mov	r1, r5
    cdf6:	4630      	mov	r0, r6
    cdf8:	f000 f803 	bl	ce02 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    cdfc:	4420      	add	r0, r4
    cdfe:	1d00      	adds	r0, r0, #4
    ce00:	bd70      	pop	{r4, r5, r6, pc}
    ce02:	b510      	push	{r4, lr}
    ce04:	460a      	mov	r2, r1
    ce06:	2101      	movs	r1, #1
    ce08:	f7ff ff0a 	bl	cc20 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    ce0c:	1cc0      	adds	r0, r0, #3
    ce0e:	f020 0003 	bic.w	r0, r0, #3
    ce12:	bd10      	pop	{r4, pc}
    ce14:	b510      	push	{r4, lr}
    ce16:	460a      	mov	r2, r1
    ce18:	2101      	movs	r1, #1
    ce1a:	f7ff ff01 	bl	cc20 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    ce1e:	1cc0      	adds	r0, r0, #3
    ce20:	f020 0003 	bic.w	r0, r0, #3
    ce24:	bd10      	pop	{r4, pc}

0000ce26 <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA>:
    ce26:	b510      	push	{r4, lr}
    ce28:	680b      	ldr	r3, [r1, #0]
    ce2a:	4604      	mov	r4, r0
    ce2c:	2b00      	cmp	r3, #0
    ce2e:	d00d      	beq.n	ce4c <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA+0x26>
    ce30:	88ca      	ldrh	r2, [r1, #6]
    ce32:	4619      	mov	r1, r3
    ce34:	6820      	ldr	r0, [r4, #0]
    ce36:	f7ff ff87 	bl	cd48 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    ce3a:	7920      	ldrb	r0, [r4, #4]
    ce3c:	2801      	cmp	r0, #1
    ce3e:	d102      	bne.n	ce46 <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA+0x20>
    ce40:	6820      	ldr	r0, [r4, #0]
    ce42:	f7ff ff76 	bl	cd32 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    ce46:	7920      	ldrb	r0, [r4, #4]
    ce48:	1e40      	subs	r0, r0, #1
    ce4a:	7120      	strb	r0, [r4, #4]
    ce4c:	bd10      	pop	{r4, pc}
    ce4e:	2800      	cmp	r0, #0
    ce50:	db09      	blt.n	ce66 <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA+0x40>
    ce52:	f000 021f 	and.w	r2, r0, #31
    ce56:	2101      	movs	r1, #1
    ce58:	4091      	lsls	r1, r2
    ce5a:	0940      	lsrs	r0, r0, #5
    ce5c:	0080      	lsls	r0, r0, #2
    ce5e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    ce62:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    ce66:	4770      	bx	lr

0000ce68 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    ce68:	f7f7 bcba 	b.w	47e0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>

0000ce6c <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>:
    ce6c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    ce70:	2000      	movs	r0, #0
    ce72:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
    ce76:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    ce7a:	2001      	movs	r0, #1
    ce7c:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    ce80:	4770      	bx	lr

0000ce82 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>:
    ce82:	b108      	cbz	r0, ce88 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI+0x6>
    ce84:	2000      	movs	r0, #0
    ce86:	4770      	bx	lr
    ce88:	2001      	movs	r0, #1
    ce8a:	4770      	bx	lr

0000ce8c <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    ce8c:	f7f7 bdee 	b.w	4a6c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000ce90 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    ce90:	f7f7 bddc 	b.w	4a4c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000ce94 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    ce94:	b510      	push	{r4, lr}
    ce96:	2900      	cmp	r1, #0
    ce98:	4604      	mov	r4, r0
    ce9a:	f04f 0106 	mov.w	r1, #6
    ce9e:	d002      	beq.n	cea6 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    cea0:	f7f6 ffc8 	bl	3e34 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    cea4:	e001      	b.n	ceaa <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    cea6:	f7f6 ffe1 	bl	3e6c <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    ceaa:	7960      	ldrb	r0, [r4, #5]
    ceac:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    ceb0:	7160      	strb	r0, [r4, #5]
    ceb2:	bd10      	pop	{r4, pc}

0000ceb4 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    ceb4:	4770      	bx	lr

0000ceb6 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    ceb6:	b530      	push	{r4, r5, lr}
    ceb8:	460c      	mov	r4, r1
    ceba:	4605      	mov	r5, r0
    cebc:	b08d      	sub	sp, #52	; 0x34
    cebe:	f04f 0103 	mov.w	r1, #3
    cec2:	f104 0003 	add.w	r0, r4, #3
    cec6:	b112      	cbz	r2, cece <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    cec8:	f7f6 ffb4 	bl	3e34 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    cecc:	e001      	b.n	ced2 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    cece:	f7f6 ffcd 	bl	3e6c <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    ced2:	7960      	ldrb	r0, [r4, #5]
    ced4:	220d      	movs	r2, #13
    ced6:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    ceda:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    cede:	7160      	strb	r0, [r4, #5]
    cee0:	2100      	movs	r1, #0
    cee2:	a804      	add	r0, sp, #16
    cee4:	f7fe ffbe 	bl	be64 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    cee8:	78e0      	ldrb	r0, [r4, #3]
    ceea:	f88d 001f 	strb.w	r0, [sp, #31]
    ceee:	7920      	ldrb	r0, [r4, #4]
    cef0:	f88d 001e 	strb.w	r0, [sp, #30]
    cef4:	7960      	ldrb	r0, [r4, #5]
    cef6:	f88d 001d 	strb.w	r0, [sp, #29]
    cefa:	2210      	movs	r2, #16
    cefc:	4629      	mov	r1, r5
    cefe:	4668      	mov	r0, sp
    cf00:	f7fe ff36 	bl	bd70 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cf04:	4668      	mov	r0, sp
    cf06:	f7ff ffaf 	bl	ce68 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    cf0a:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    cf0e:	7020      	strb	r0, [r4, #0]
    cf10:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    cf14:	7060      	strb	r0, [r4, #1]
    cf16:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    cf1a:	70a0      	strb	r0, [r4, #2]
    cf1c:	b00d      	add	sp, #52	; 0x34
    cf1e:	bd30      	pop	{r4, r5, pc}

0000cf20 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
    cf20:	f7f8 b93a 	b.w	5198 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x370>
    cf24:	07c1      	lsls	r1, r0, #31
    cf26:	d001      	beq.n	cf2c <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0xc>
    cf28:	2001      	movs	r0, #1
    cf2a:	4770      	bx	lr
    cf2c:	0780      	lsls	r0, r0, #30
    cf2e:	d501      	bpl.n	cf34 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x14>
    cf30:	2002      	movs	r0, #2
    cf32:	4770      	bx	lr
    cf34:	2000      	movs	r0, #0
    cf36:	4770      	bx	lr
    cf38:	b510      	push	{r4, lr}
    cf3a:	2801      	cmp	r0, #1
    cf3c:	d008      	beq.n	cf50 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    cf3e:	2802      	cmp	r0, #2
    cf40:	d004      	beq.n	cf4c <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x2c>
    cf42:	f240 3197 	movw	r1, #919	; 0x397
    cf46:	2006      	movs	r0, #6
    cf48:	f7f6 fedc 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cf4c:	2001      	movs	r0, #1
    cf4e:	bd10      	pop	{r4, pc}
    cf50:	2000      	movs	r0, #0
    cf52:	bd10      	pop	{r4, pc}
    cf54:	2900      	cmp	r1, #0
    cf56:	d004      	beq.n	cf62 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x42>
    cf58:	2801      	cmp	r0, #1
    cf5a:	d003      	beq.n	cf64 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    cf5c:	2901      	cmp	r1, #1
    cf5e:	d001      	beq.n	cf64 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    cf60:	2002      	movs	r0, #2
    cf62:	4770      	bx	lr
    cf64:	2001      	movs	r0, #1
    cf66:	4770      	bx	lr
    cf68:	f7ff bdaf 	b.w	caca <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000cf6c <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    cf6c:	2201      	movs	r2, #1
    cf6e:	f7f8 bcbd 	b.w	58ec <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

0000cf72 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    cf72:	b510      	push	{r4, lr}
    cf74:	f002 fb1e 	bl	f5b4 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    cf78:	b118      	cbz	r0, cf82 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    cf7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    cf7e:	f7fd ba49 	b.w	a414 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    cf82:	20ff      	movs	r0, #255	; 0xff
    cf84:	bd10      	pop	{r4, pc}

0000cf86 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    cf86:	b510      	push	{r4, lr}
    cf88:	f7f8 fcfa 	bl	5980 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x108>
    cf8c:	2810      	cmp	r0, #16
    cf8e:	d003      	beq.n	cf98 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    cf90:	f7f8 fcc6 	bl	5920 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    cf94:	2810      	cmp	r0, #16
    cf96:	d100      	bne.n	cf9a <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
    cf98:	2008      	movs	r0, #8
    cf9a:	bd10      	pop	{r4, pc}

0000cf9c <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>:
    cf9c:	b510      	push	{r4, lr}
    cf9e:	f7f8 fcef 	bl	5980 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x108>
    cfa2:	2810      	cmp	r0, #16
    cfa4:	d007      	beq.n	cfb6 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    cfa6:	f7f8 fcbb 	bl	5920 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    cfaa:	2810      	cmp	r0, #16
    cfac:	d003      	beq.n	cfb6 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    cfae:	f7f8 fd2f 	bl	5a10 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x198>
    cfb2:	2001      	movs	r0, #1
    cfb4:	bd10      	pop	{r4, pc}
    cfb6:	2000      	movs	r0, #0
    cfb8:	bd10      	pop	{r4, pc}

0000cfba <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    cfba:	b510      	push	{r4, lr}
    cfbc:	f7f8 fce0 	bl	5980 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x108>
    cfc0:	2810      	cmp	r0, #16
    cfc2:	d003      	beq.n	cfcc <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
    cfc4:	f7f8 fd6c 	bl	5aa0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x228>
    cfc8:	2001      	movs	r0, #1
    cfca:	bd10      	pop	{r4, pc}
    cfcc:	2000      	movs	r0, #0
    cfce:	bd10      	pop	{r4, pc}

0000cfd0 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    cfd0:	b570      	push	{r4, r5, r6, lr}
    cfd2:	460e      	mov	r6, r1
    cfd4:	b08c      	sub	sp, #48	; 0x30
    cfd6:	4614      	mov	r4, r2
    cfd8:	4601      	mov	r1, r0
    cfda:	461d      	mov	r5, r3
    cfdc:	2210      	movs	r2, #16
    cfde:	4668      	mov	r0, sp
    cfe0:	f000 f91a 	bl	d218 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    cfe4:	2210      	movs	r2, #16
    cfe6:	4631      	mov	r1, r6
    cfe8:	a804      	add	r0, sp, #16
    cfea:	f000 f915 	bl	d218 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    cfee:	4668      	mov	r0, sp
    cff0:	f7ff ff3a 	bl	ce68 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    cff4:	a908      	add	r1, sp, #32
    cff6:	f04f 0210 	mov.w	r2, #16
    cffa:	4628      	mov	r0, r5
    cffc:	b11c      	cbz	r4, d006 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    cffe:	f000 f90b 	bl	d218 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d002:	b00c      	add	sp, #48	; 0x30
    d004:	bd70      	pop	{r4, r5, r6, pc}
    d006:	f7fe feb3 	bl	bd70 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d00a:	e7fa      	b.n	d002 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>

0000d00c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    d00c:	b510      	push	{r4, lr}
    d00e:	460c      	mov	r4, r1
    d010:	2100      	movs	r1, #0
    d012:	f7ff fec2 	bl	cd9a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    d016:	6060      	str	r0, [r4, #4]
    d018:	b118      	cbz	r0, d022 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
    d01a:	2001      	movs	r0, #1
    d01c:	7020      	strb	r0, [r4, #0]
    d01e:	2000      	movs	r0, #0
    d020:	bd10      	pop	{r4, pc}
    d022:	2002      	movs	r0, #2
    d024:	bd10      	pop	{r4, pc}

0000d026 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    d026:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d02a:	4348      	muls	r0, r1
    d02c:	4770      	bx	lr

0000d02e <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    d02e:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d032:	fbb0 f0f1 	udiv	r0, r0, r1
    d036:	b280      	uxth	r0, r0
    d038:	4770      	bx	lr

0000d03a <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
    d03a:	b570      	push	{r4, r5, r6, lr}
    d03c:	4604      	mov	r4, r0
    d03e:	4290      	cmp	r0, r2
    d040:	d20b      	bcs.n	d05a <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x20>
    d042:	1b10      	subs	r0, r2, r4
    d044:	2864      	cmp	r0, #100	; 0x64
    d046:	d200      	bcs.n	d04a <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>
    d048:	2064      	movs	r0, #100	; 0x64
    d04a:	1825      	adds	r5, r4, r0
    d04c:	428d      	cmp	r5, r1
    d04e:	d803      	bhi.n	d058 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x1e>
    d050:	2104      	movs	r1, #4
    d052:	f7f4 f9f1 	bl	1438 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    d056:	b108      	cbz	r0, d05c <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x22>
    d058:	4620      	mov	r0, r4
    d05a:	bd70      	pop	{r4, r5, r6, pc}
    d05c:	4628      	mov	r0, r5
    d05e:	bd70      	pop	{r4, r5, r6, pc}

0000d060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    d060:	b510      	push	{r4, lr}
    d062:	f1a2 030f 	sub.w	r3, r2, #15
    d066:	290c      	cmp	r1, #12
    d068:	d244      	bcs.n	d0f4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d06a:	e8df f001 	tbb	[pc, r1]
    d06e:	0806      	.short	0x0806
    d070:	1815120d 	.word	0x1815120d
    d074:	4127241c 	.word	0x4127241c
    d078:	312a      	.short	0x312a
    d07a:	b3c2      	cbz	r2, d0ee <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x8e>
    d07c:	e03a      	b.n	d0f4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d07e:	2a07      	cmp	r2, #7
    d080:	d03a      	beq.n	d0f8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d082:	2a08      	cmp	r2, #8
    d084:	d038      	beq.n	d0f8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d086:	e035      	b.n	d0f4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d088:	2a0c      	cmp	r2, #12
    d08a:	d035      	beq.n	d0f8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d08c:	2a0b      	cmp	r2, #11
    d08e:	d033      	beq.n	d0f8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d090:	e030      	b.n	d0f4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d092:	2a0d      	cmp	r2, #13
    d094:	d030      	beq.n	d0f8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d096:	e02d      	b.n	d0f4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d098:	2b0c      	cmp	r3, #12
    d09a:	d92d      	bls.n	d0f8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d09c:	e02a      	b.n	d0f4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d09e:	3a10      	subs	r2, #16
    d0a0:	2a0b      	cmp	r2, #11
    d0a2:	d929      	bls.n	d0f8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d0a4:	e026      	b.n	d0f4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d0a6:	2b03      	cmp	r3, #3
    d0a8:	d926      	bls.n	d0f8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d0aa:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
    d0ae:	b308      	cbz	r0, d0f4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d0b0:	2a1b      	cmp	r2, #27
    d0b2:	d921      	bls.n	d0f8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d0b4:	e01e      	b.n	d0f4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d0b6:	2a04      	cmp	r2, #4
    d0b8:	d01e      	beq.n	d0f8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d0ba:	e01b      	b.n	d0f4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d0bc:	2a06      	cmp	r2, #6
    d0be:	d01b      	beq.n	d0f8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d0c0:	e018      	b.n	d0f4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d0c2:	2a1c      	cmp	r2, #28
    d0c4:	d018      	beq.n	d0f8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d0c6:	2a1d      	cmp	r2, #29
    d0c8:	d016      	beq.n	d0f8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d0ca:	2a1e      	cmp	r2, #30
    d0cc:	d014      	beq.n	d0f8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d0ce:	e011      	b.n	d0f4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d0d0:	2a1f      	cmp	r2, #31
    d0d2:	d011      	beq.n	d0f8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d0d4:	2a20      	cmp	r2, #32
    d0d6:	d00f      	beq.n	d0f8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d0d8:	2a21      	cmp	r2, #33	; 0x21
    d0da:	d00d      	beq.n	d0f8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d0dc:	2a22      	cmp	r2, #34	; 0x22
    d0de:	d00b      	beq.n	d0f8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d0e0:	2a23      	cmp	r2, #35	; 0x23
    d0e2:	d009      	beq.n	d0f8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d0e4:	2a24      	cmp	r2, #36	; 0x24
    d0e6:	d007      	beq.n	d0f8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d0e8:	2a26      	cmp	r2, #38	; 0x26
    d0ea:	d005      	beq.n	d0f8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d0ec:	e002      	b.n	d0f4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d0ee:	e003      	b.n	d0f8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d0f0:	2a0e      	cmp	r2, #14
    d0f2:	d001      	beq.n	d0f8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d0f4:	2000      	movs	r0, #0
    d0f6:	bd10      	pop	{r4, pc}
    d0f8:	2001      	movs	r0, #1
    d0fa:	bd10      	pop	{r4, pc}

0000d0fc <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    d0fc:	280c      	cmp	r0, #12
    d0fe:	d013      	beq.n	d128 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d100:	280b      	cmp	r0, #11
    d102:	d011      	beq.n	d128 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d104:	280d      	cmp	r0, #13
    d106:	d00f      	beq.n	d128 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d108:	281f      	cmp	r0, #31
    d10a:	d00d      	beq.n	d128 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d10c:	2820      	cmp	r0, #32
    d10e:	d00b      	beq.n	d128 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d110:	2821      	cmp	r0, #33	; 0x21
    d112:	d009      	beq.n	d128 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d114:	2822      	cmp	r0, #34	; 0x22
    d116:	d007      	beq.n	d128 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d118:	2823      	cmp	r0, #35	; 0x23
    d11a:	d005      	beq.n	d128 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d11c:	2824      	cmp	r0, #36	; 0x24
    d11e:	d003      	beq.n	d128 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d120:	2826      	cmp	r0, #38	; 0x26
    d122:	d001      	beq.n	d128 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d124:	2000      	movs	r0, #0
    d126:	4770      	bx	lr
    d128:	2001      	movs	r0, #1
    d12a:	4770      	bx	lr

0000d12c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    d12c:	f011 0f0c 	tst.w	r1, #12
    d130:	d016      	beq.n	d160 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    d132:	074a      	lsls	r2, r1, #29
    d134:	f44f 7116 	mov.w	r1, #600	; 0x258
    d138:	2a00      	cmp	r2, #0
    d13a:	da02      	bge.n	d142 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    d13c:	f04f 0210 	mov.w	r2, #16
    d140:	e001      	b.n	d146 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    d142:	f04f 0240 	mov.w	r2, #64	; 0x40
    d146:	da01      	bge.n	d14c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    d148:	f04f 0196 	mov.w	r1, #150	; 0x96
    d14c:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    d150:	eba0 0301 	sub.w	r3, r0, r1
    d154:	4288      	cmp	r0, r1
    d156:	d910      	bls.n	d17a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    d158:	fb93 f0f2 	sdiv	r0, r3, r2
    d15c:	b280      	uxth	r0, r0
    d15e:	4770      	bx	lr
    d160:	2902      	cmp	r1, #2
    d162:	d002      	beq.n	d16a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x3e>
    d164:	2870      	cmp	r0, #112	; 0x70
    d166:	d80a      	bhi.n	d17e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x52>
    d168:	e007      	b.n	d17a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    d16a:	283c      	cmp	r0, #60	; 0x3c
    d16c:	d905      	bls.n	d17a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    d16e:	383c      	subs	r0, #60	; 0x3c
    d170:	17c1      	asrs	r1, r0, #31
    d172:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    d176:	1080      	asrs	r0, r0, #2
    d178:	e7f0      	b.n	d15c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    d17a:	2000      	movs	r0, #0
    d17c:	e7ee      	b.n	d15c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    d17e:	3870      	subs	r0, #112	; 0x70
    d180:	17c1      	asrs	r1, r0, #31
    d182:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    d186:	10c0      	asrs	r0, r0, #3
    d188:	e7e8      	b.n	d15c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>

0000d18a <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    d18a:	6809      	ldr	r1, [r1, #0]
    d18c:	f8c0 105e 	str.w	r1, [r0, #94]	; 0x5e
    d190:	4770      	bx	lr

0000d192 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>:
    d192:	07c1      	lsls	r1, r0, #31
    d194:	d001      	beq.n	d19a <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x8>
    d196:	2001      	movs	r0, #1
    d198:	4770      	bx	lr
    d19a:	0781      	lsls	r1, r0, #30
    d19c:	d501      	bpl.n	d1a2 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x10>
    d19e:	2002      	movs	r0, #2
    d1a0:	4770      	bx	lr
    d1a2:	0740      	lsls	r0, r0, #29
    d1a4:	d501      	bpl.n	d1aa <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x18>
    d1a6:	2008      	movs	r0, #8
    d1a8:	4770      	bx	lr
    d1aa:	2000      	movs	r0, #0
    d1ac:	4770      	bx	lr

0000d1ae <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
    d1ae:	b510      	push	{r4, lr}
    d1b0:	f640 12c4 	movw	r2, #2500	; 0x9c4
    d1b4:	2901      	cmp	r1, #1
    d1b6:	d006      	beq.n	d1c6 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
    d1b8:	2902      	cmp	r1, #2
    d1ba:	d005      	beq.n	d1c8 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
    d1bc:	f240 4129 	movw	r1, #1065	; 0x429
    d1c0:	2029      	movs	r0, #41	; 0x29
    d1c2:	f7f6 fd9f 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d1c6:	b108      	cbz	r0, d1cc <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
    d1c8:	4610      	mov	r0, r2
    d1ca:	bd10      	pop	{r4, pc}
    d1cc:	f240 40e2 	movw	r0, #1250	; 0x4e2
    d1d0:	bd10      	pop	{r4, pc}

0000d1d2 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    d1d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d1d6:	460c      	mov	r4, r1
    d1d8:	4605      	mov	r5, r0
    d1da:	68c6      	ldr	r6, [r0, #12]
    d1dc:	f7f4 fd1a 	bl	1c14 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    d1e0:	b198      	cbz	r0, d20a <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x38>
    d1e2:	b1bc      	cbz	r4, d214 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    d1e4:	4630      	mov	r0, r6
    d1e6:	68e9      	ldr	r1, [r5, #12]
    d1e8:	f7f4 fa1a 	bl	1620 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    d1ec:	2800      	cmp	r0, #0
    d1ee:	dd11      	ble.n	d214 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    d1f0:	4420      	add	r0, r4
    d1f2:	1e40      	subs	r0, r0, #1
    d1f4:	fbb0 f7f4 	udiv	r7, r0, r4
    d1f8:	fb07 f104 	mul.w	r1, r7, r4
    d1fc:	4630      	mov	r0, r6
    d1fe:	f7f4 f9dd 	bl	15bc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    d202:	60e8      	str	r0, [r5, #12]
    d204:	4638      	mov	r0, r7
    d206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d20a:	f240 21ae 	movw	r1, #686	; 0x2ae
    d20e:	2029      	movs	r0, #41	; 0x29
    d210:	f7f6 fd78 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d214:	2000      	movs	r0, #0
    d216:	e7f6      	b.n	d206 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>

0000d218 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    d218:	b530      	push	{r4, r5, lr}
    d21a:	4613      	mov	r3, r2
    d21c:	e006      	b.n	d22c <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    d21e:	18cc      	adds	r4, r1, r3
    d220:	1ad5      	subs	r5, r2, r3
    d222:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    d226:	1e5b      	subs	r3, r3, #1
    d228:	5544      	strb	r4, [r0, r5]
    d22a:	b2db      	uxtb	r3, r3
    d22c:	2b00      	cmp	r3, #0
    d22e:	d1f6      	bne.n	d21e <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    d230:	bd30      	pop	{r4, r5, pc}

0000d232 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>:
    d232:	b538      	push	{r3, r4, r5, lr}
    d234:	4605      	mov	r5, r0
    d236:	460c      	mov	r4, r1
    d238:	4668      	mov	r0, sp
    d23a:	f7fd fded 	bl	ae18 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    d23e:	b308      	cbz	r0, d284 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x52>
    d240:	f99d 0000 	ldrsb.w	r0, [sp]
    d244:	7260      	strb	r0, [r4, #9]
    d246:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
    d24a:	72a1      	strb	r1, [r4, #10]
    d24c:	f994 100b 	ldrsb.w	r1, [r4, #11]
    d250:	2200      	movs	r2, #0
    d252:	1a41      	subs	r1, r0, r1
    d254:	d500      	bpl.n	d258 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x26>
    d256:	4249      	negs	r1, r1
    d258:	7feb      	ldrb	r3, [r5, #31]
    d25a:	428b      	cmp	r3, r1
    d25c:	dc10      	bgt.n	d280 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x4e>
    d25e:	2bff      	cmp	r3, #255	; 0xff
    d260:	d00e      	beq.n	d280 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x4e>
    d262:	7b21      	ldrb	r1, [r4, #12]
    d264:	1c49      	adds	r1, r1, #1
    d266:	b2c9      	uxtb	r1, r1
    d268:	7321      	strb	r1, [r4, #12]
    d26a:	f895 3020 	ldrb.w	r3, [r5, #32]
    d26e:	4299      	cmp	r1, r3
    d270:	d802      	bhi.n	d278 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x46>
    d272:	7ae1      	ldrb	r1, [r4, #11]
    d274:	297f      	cmp	r1, #127	; 0x7f
    d276:	d103      	bne.n	d280 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x4e>
    d278:	72e0      	strb	r0, [r4, #11]
    d27a:	2000      	movs	r0, #0
    d27c:	7320      	strb	r0, [r4, #12]
    d27e:	2201      	movs	r2, #1
    d280:	4610      	mov	r0, r2
    d282:	bd38      	pop	{r3, r4, r5, pc}
    d284:	207f      	movs	r0, #127	; 0x7f
    d286:	7260      	strb	r0, [r4, #9]
    d288:	2000      	movs	r0, #0
    d28a:	bd38      	pop	{r3, r4, r5, pc}

0000d28c <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    d28c:	2300      	movs	r3, #0
    d28e:	6283      	str	r3, [r0, #40]	; 0x28
    d290:	8602      	strh	r2, [r0, #48]	; 0x30
    d292:	f240 2371 	movw	r3, #625	; 0x271
    d296:	435a      	muls	r2, r3
    d298:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    d29c:	1e52      	subs	r2, r2, #1
    d29e:	fbb2 f1f1 	udiv	r1, r2, r1
    d2a2:	62c1      	str	r1, [r0, #44]	; 0x2c
    d2a4:	4770      	bx	lr

0000d2a6 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>:
    d2a6:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    d2aa:	4607      	mov	r7, r0
    d2ac:	4690      	mov	r8, r2
    d2ae:	468b      	mov	fp, r1
    d2b0:	2601      	movs	r6, #1
    d2b2:	4608      	mov	r0, r1
    d2b4:	f000 f957 	bl	d566 <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    d2b8:	4682      	mov	sl, r0
    d2ba:	4658      	mov	r0, fp
    d2bc:	f000 f95f 	bl	d57e <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    d2c0:	4681      	mov	r9, r0
    d2c2:	f7ff ff66 	bl	d192 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    d2c6:	4604      	mov	r4, r0
    d2c8:	4650      	mov	r0, sl
    d2ca:	f7ff ff62 	bl	d192 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    d2ce:	4605      	mov	r5, r0
    d2d0:	ea54 0005 	orrs.w	r0, r4, r5
    d2d4:	d100      	bne.n	d2d8 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x32>
    d2d6:	2600      	movs	r6, #0
    d2d8:	f7fd f83e 	bl	a358 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    d2dc:	ea10 0f09 	tst.w	r0, r9
    d2e0:	d100      	bne.n	d2e4 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x3e>
    d2e2:	2400      	movs	r4, #0
    d2e4:	f7fd f838 	bl	a358 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    d2e8:	ea10 0f0a 	tst.w	r0, sl
    d2ec:	d100      	bne.n	d2f0 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x4a>
    d2ee:	2500      	movs	r5, #0
    d2f0:	f897 0062 	ldrb.w	r0, [r7, #98]	; 0x62
    d2f4:	42a0      	cmp	r0, r4
    d2f6:	d100      	bne.n	d2fa <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x54>
    d2f8:	2400      	movs	r4, #0
    d2fa:	f888 4000 	strb.w	r4, [r8]
    d2fe:	f897 0063 	ldrb.w	r0, [r7, #99]	; 0x63
    d302:	42a8      	cmp	r0, r5
    d304:	d100      	bne.n	d308 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x62>
    d306:	2500      	movs	r5, #0
    d308:	f888 5001 	strb.w	r5, [r8, #1]
    d30c:	b974      	cbnz	r4, d32c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    d30e:	b96d      	cbnz	r5, d32c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    d310:	4658      	mov	r0, fp
    d312:	f000 f932 	bl	d57a <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    d316:	f8b7 106c 	ldrh.w	r1, [r7, #108]	; 0x6c
    d31a:	1a40      	subs	r0, r0, r1
    d31c:	b200      	sxth	r0, r0
    d31e:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    d322:	4288      	cmp	r0, r1
    d324:	dc01      	bgt.n	d32a <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x84>
    d326:	2800      	cmp	r0, #0
    d328:	dc00      	bgt.n	d32c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    d32a:	2600      	movs	r6, #0
    d32c:	4630      	mov	r0, r6
    d32e:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

0000d332 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
    d332:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d336:	4348      	muls	r0, r1
    d338:	4770      	bx	lr

0000d33a <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    d33a:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d33e:	fb10 f001 	smulbb	r0, r0, r1
    d342:	4770      	bx	lr

0000d344 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    d344:	b510      	push	{r4, lr}
    d346:	2300      	movs	r3, #0
    d348:	461a      	mov	r2, r3
    d34a:	e003      	b.n	d354 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    d34c:	5c84      	ldrb	r4, [r0, r2]
    d34e:	4323      	orrs	r3, r4
    d350:	1c52      	adds	r2, r2, #1
    d352:	b2d2      	uxtb	r2, r2
    d354:	428a      	cmp	r2, r1
    d356:	d3f9      	bcc.n	d34c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    d358:	b10b      	cbz	r3, d35e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    d35a:	2000      	movs	r0, #0
    d35c:	bd10      	pop	{r4, pc}
    d35e:	2001      	movs	r0, #1
    d360:	bd10      	pop	{r4, pc}

0000d362 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    d362:	b570      	push	{r4, r5, r6, lr}
    d364:	788b      	ldrb	r3, [r1, #2]
    d366:	780c      	ldrb	r4, [r1, #0]
    d368:	7ac5      	ldrb	r5, [r0, #11]
    d36a:	4063      	eors	r3, r4
    d36c:	78cc      	ldrb	r4, [r1, #3]
    d36e:	7849      	ldrb	r1, [r1, #1]
    d370:	404c      	eors	r4, r1
    d372:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    d376:	ea83 0102 	eor.w	r1, r3, r2
    d37a:	2200      	movs	r2, #0
    d37c:	b2cc      	uxtb	r4, r1
    d37e:	0a09      	lsrs	r1, r1, #8
    d380:	fa94 f4a4 	rbit	r4, r4
    d384:	fa91 f1a1 	rbit	r1, r1
    d388:	0e24      	lsrs	r4, r4, #24
    d38a:	0e09      	lsrs	r1, r1, #24
    d38c:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    d390:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    d394:	1c52      	adds	r2, r2, #1
    d396:	4419      	add	r1, r3
    d398:	b2d2      	uxtb	r2, r2
    d39a:	b289      	uxth	r1, r1
    d39c:	2a03      	cmp	r2, #3
    d39e:	d3ed      	bcc.n	d37c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x1a>
    d3a0:	4059      	eors	r1, r3
    d3a2:	2225      	movs	r2, #37	; 0x25
    d3a4:	fbb1 f3f2 	udiv	r3, r1, r2
    d3a8:	fb02 1213 	mls	r2, r2, r3, r1
    d3ac:	eb00 03d2 	add.w	r3, r0, r2, lsr #3
    d3b0:	f002 0607 	and.w	r6, r2, #7
    d3b4:	785b      	ldrb	r3, [r3, #1]
    d3b6:	2401      	movs	r4, #1
    d3b8:	fa04 f606 	lsl.w	r6, r4, r6
    d3bc:	4233      	tst	r3, r6
    d3be:	d001      	beq.n	d3c4 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x62>
    d3c0:	4610      	mov	r0, r2
    d3c2:	bd70      	pop	{r4, r5, r6, pc}
    d3c4:	434d      	muls	r5, r1
    d3c6:	0c29      	lsrs	r1, r5, #16
    d3c8:	1c49      	adds	r1, r1, #1
    d3ca:	b2c9      	uxtb	r1, r1
    d3cc:	2300      	movs	r3, #0
    d3ce:	18c5      	adds	r5, r0, r3
    d3d0:	79aa      	ldrb	r2, [r5, #6]
    d3d2:	428a      	cmp	r2, r1
    d3d4:	d311      	bcc.n	d3fa <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x98>
    d3d6:	786d      	ldrb	r5, [r5, #1]
    d3d8:	2200      	movs	r2, #0
    d3da:	fa04 f602 	lsl.w	r6, r4, r2
    d3de:	4235      	tst	r5, r6
    d3e0:	d001      	beq.n	d3e6 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x84>
    d3e2:	1e49      	subs	r1, r1, #1
    d3e4:	b2c9      	uxtb	r1, r1
    d3e6:	b121      	cbz	r1, d3f2 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x90>
    d3e8:	1c52      	adds	r2, r2, #1
    d3ea:	b2d2      	uxtb	r2, r2
    d3ec:	2a08      	cmp	r2, #8
    d3ee:	d3f4      	bcc.n	d3da <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x78>
    d3f0:	e005      	b.n	d3fe <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x9c>
    d3f2:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
    d3f6:	b2c0      	uxtb	r0, r0
    d3f8:	bd70      	pop	{r4, r5, r6, pc}
    d3fa:	1a89      	subs	r1, r1, r2
    d3fc:	b2c9      	uxtb	r1, r1
    d3fe:	1c5b      	adds	r3, r3, #1
    d400:	b2db      	uxtb	r3, r3
    d402:	2b05      	cmp	r3, #5
    d404:	d3e3      	bcc.n	d3ce <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x6c>
    d406:	f44f 7187 	mov.w	r1, #270	; 0x10e
    d40a:	2046      	movs	r0, #70	; 0x46
    d40c:	f7f6 fc7a 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000d410 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    d410:	b510      	push	{r4, lr}
    d412:	4604      	mov	r4, r0
    d414:	f890 0020 	ldrb.w	r0, [r0, #32]
    d418:	b108      	cbz	r0, d41e <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    d41a:	2825      	cmp	r0, #37	; 0x25
    d41c:	d901      	bls.n	d422 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    d41e:	2012      	movs	r0, #18
    d420:	bd10      	pop	{r4, pc}
    d422:	b12a      	cbz	r2, d430 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>
    d424:	7d60      	ldrb	r0, [r4, #21]
    d426:	b128      	cbz	r0, d434 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x24>
    d428:	2801      	cmp	r0, #1
    d42a:	d009      	beq.n	d440 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x30>
    d42c:	201f      	movs	r0, #31
    d42e:	bd10      	pop	{r4, pc}
    d430:	2000      	movs	r0, #0
    d432:	bd10      	pop	{r4, pc}
    d434:	4620      	mov	r0, r4
    d436:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d43a:	4611      	mov	r1, r2
    d43c:	f7f8 bc06 	b.w	5c4c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x124>
    d440:	88a2      	ldrh	r2, [r4, #4]
    d442:	f104 0015 	add.w	r0, r4, #21
    d446:	310c      	adds	r1, #12
    d448:	f7ff ff8b 	bl	d362 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    d44c:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    d450:	e7ee      	b.n	d430 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>

0000d452 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    d452:	b530      	push	{r4, r5, lr}
    d454:	1c42      	adds	r2, r0, #1
    d456:	428a      	cmp	r2, r1
    d458:	d004      	beq.n	d464 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x12>
    d45a:	680a      	ldr	r2, [r1, #0]
    d45c:	f8c0 2001 	str.w	r2, [r0, #1]
    d460:	7909      	ldrb	r1, [r1, #4]
    d462:	7141      	strb	r1, [r0, #5]
    d464:	7941      	ldrb	r1, [r0, #5]
    d466:	f001 011f 	and.w	r1, r1, #31
    d46a:	7141      	strb	r1, [r0, #5]
    d46c:	2100      	movs	r1, #0
    d46e:	72c1      	strb	r1, [r0, #11]
    d470:	1843      	adds	r3, r0, r1
    d472:	1c49      	adds	r1, r1, #1
    d474:	785c      	ldrb	r4, [r3, #1]
    d476:	b2c9      	uxtb	r1, r1
    d478:	f004 0201 	and.w	r2, r4, #1
    d47c:	0864      	lsrs	r4, r4, #1
    d47e:	f004 0501 	and.w	r5, r4, #1
    d482:	4415      	add	r5, r2
    d484:	0862      	lsrs	r2, r4, #1
    d486:	f002 0401 	and.w	r4, r2, #1
    d48a:	442c      	add	r4, r5
    d48c:	0852      	lsrs	r2, r2, #1
    d48e:	f002 0501 	and.w	r5, r2, #1
    d492:	442c      	add	r4, r5
    d494:	0852      	lsrs	r2, r2, #1
    d496:	f002 0501 	and.w	r5, r2, #1
    d49a:	442c      	add	r4, r5
    d49c:	0852      	lsrs	r2, r2, #1
    d49e:	f002 0501 	and.w	r5, r2, #1
    d4a2:	442c      	add	r4, r5
    d4a4:	0852      	lsrs	r2, r2, #1
    d4a6:	f002 0501 	and.w	r5, r2, #1
    d4aa:	442c      	add	r4, r5
    d4ac:	eb04 0252 	add.w	r2, r4, r2, lsr #1
    d4b0:	719a      	strb	r2, [r3, #6]
    d4b2:	7ac3      	ldrb	r3, [r0, #11]
    d4b4:	2905      	cmp	r1, #5
    d4b6:	441a      	add	r2, r3
    d4b8:	72c2      	strb	r2, [r0, #11]
    d4ba:	d3d9      	bcc.n	d470 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x1e>
    d4bc:	bd30      	pop	{r4, r5, pc}

0000d4be <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>:
    d4be:	b570      	push	{r4, r5, r6, lr}
    d4c0:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    d4c4:	f8b0 5009 	ldrh.w	r5, [r0, #9]
    d4c8:	f830 4f05 	ldrh.w	r4, [r0, #5]!
    d4cc:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    d4d0:	88c0      	ldrh	r0, [r0, #6]
    d4d2:	b131      	cbz	r1, d4e2 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x24>
    d4d4:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    d4d8:	d903      	bls.n	d4e2 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x24>
    d4da:	f640 5107 	movw	r1, #3335	; 0xd07
    d4de:	428a      	cmp	r2, r1
    d4e0:	d90b      	bls.n	d4fa <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x3c>
    d4e2:	1f91      	subs	r1, r2, #6
    d4e4:	f640 467a 	movw	r6, #3194	; 0xc7a
    d4e8:	42b1      	cmp	r1, r6
    d4ea:	d80e      	bhi.n	d50a <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d4ec:	b16b      	cbz	r3, d50a <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d4ee:	2b08      	cmp	r3, #8
    d4f0:	d80b      	bhi.n	d50a <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d4f2:	4293      	cmp	r3, r2
    d4f4:	d209      	bcs.n	d50a <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d4f6:	4294      	cmp	r4, r2
    d4f8:	d807      	bhi.n	d50a <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d4fa:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    d4fe:	d204      	bcs.n	d50a <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d500:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
    d504:	d801      	bhi.n	d50a <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d506:	2001      	movs	r0, #1
    d508:	bd70      	pop	{r4, r5, r6, pc}
    d50a:	2000      	movs	r0, #0
    d50c:	bd70      	pop	{r4, r5, r6, pc}

0000d50e <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>:
    d50e:	6842      	ldr	r2, [r0, #4]
    d510:	600a      	str	r2, [r1, #0]
    d512:	7a00      	ldrb	r0, [r0, #8]
    d514:	7108      	strb	r0, [r1, #4]
    d516:	4770      	bx	lr

0000d518 <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>:
    d518:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    d51c:	4770      	bx	lr

0000d51e <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>:
    d51e:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    d522:	4770      	bx	lr

0000d524 <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>:
    d524:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    d528:	4770      	bx	lr

0000d52a <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>:
    d52a:	f8b0 000b 	ldrh.w	r0, [r0, #11]
    d52e:	4770      	bx	lr

0000d530 <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>:
    d530:	8980      	ldrh	r0, [r0, #12]
    d532:	8008      	strh	r0, [r1, #0]
    d534:	4770      	bx	lr

0000d536 <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>:
    d536:	f8d0 0016 	ldr.w	r0, [r0, #22]
    d53a:	6008      	str	r0, [r1, #0]
    d53c:	4770      	bx	lr

0000d53e <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>:
    d53e:	6842      	ldr	r2, [r0, #4]
    d540:	600a      	str	r2, [r1, #0]
    d542:	6880      	ldr	r0, [r0, #8]
    d544:	6048      	str	r0, [r1, #4]
    d546:	4770      	bx	lr

0000d548 <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>:
    d548:	f850 2f0e 	ldr.w	r2, [r0, #14]!
    d54c:	600a      	str	r2, [r1, #0]
    d54e:	6840      	ldr	r0, [r0, #4]
    d550:	6048      	str	r0, [r1, #4]
    d552:	4770      	bx	lr

0000d554 <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>:
    d554:	6842      	ldr	r2, [r0, #4]
    d556:	600a      	str	r2, [r1, #0]
    d558:	6880      	ldr	r0, [r0, #8]
    d55a:	6048      	str	r0, [r1, #4]
    d55c:	4770      	bx	lr

0000d55e <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>:
    d55e:	7800      	ldrb	r0, [r0, #0]
    d560:	f000 0003 	and.w	r0, r0, #3
    d564:	4770      	bx	lr

0000d566 <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>:
    d566:	7900      	ldrb	r0, [r0, #4]
    d568:	4770      	bx	lr

0000d56a <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>:
    d56a:	8880      	ldrh	r0, [r0, #4]
    d56c:	4770      	bx	lr

0000d56e <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>:
    d56e:	88c0      	ldrh	r0, [r0, #6]
    d570:	4770      	bx	lr

0000d572 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>:
    d572:	8900      	ldrh	r0, [r0, #8]
    d574:	4770      	bx	lr

0000d576 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>:
    d576:	8940      	ldrh	r0, [r0, #10]
    d578:	4770      	bx	lr

0000d57a <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>:
    d57a:	88c0      	ldrh	r0, [r0, #6]
    d57c:	4770      	bx	lr

0000d57e <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>:
    d57e:	7940      	ldrb	r0, [r0, #5]
    d580:	4770      	bx	lr

0000d582 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>:
    d582:	7900      	ldrb	r0, [r0, #4]
    d584:	4770      	bx	lr

0000d586 <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>:
    d586:	7900      	ldrb	r0, [r0, #4]
    d588:	4770      	bx	lr

0000d58a <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>:
    d58a:	8901      	ldrh	r1, [r0, #8]
    d58c:	291b      	cmp	r1, #27
    d58e:	d30c      	bcc.n	d5aa <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    d590:	8941      	ldrh	r1, [r0, #10]
    d592:	f44f 72a4 	mov.w	r2, #328	; 0x148
    d596:	4291      	cmp	r1, r2
    d598:	d307      	bcc.n	d5aa <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    d59a:	8881      	ldrh	r1, [r0, #4]
    d59c:	291b      	cmp	r1, #27
    d59e:	d304      	bcc.n	d5aa <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    d5a0:	88c0      	ldrh	r0, [r0, #6]
    d5a2:	4290      	cmp	r0, r2
    d5a4:	d301      	bcc.n	d5aa <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    d5a6:	2001      	movs	r0, #1
    d5a8:	4770      	bx	lr
    d5aa:	2000      	movs	r0, #0
    d5ac:	4770      	bx	lr

0000d5ae <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>:
    d5ae:	b510      	push	{r4, lr}
    d5b0:	29fb      	cmp	r1, #251	; 0xfb
    d5b2:	d904      	bls.n	d5be <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA+0x10>
    d5b4:	f240 515b 	movw	r1, #1371	; 0x55b
    d5b8:	202a      	movs	r0, #42	; 0x2a
    d5ba:	f7f6 fba3 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d5be:	7041      	strb	r1, [r0, #1]
    d5c0:	bd10      	pop	{r4, pc}

0000d5c2 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>:
    d5c2:	7901      	ldrb	r1, [r0, #4]
    d5c4:	0749      	lsls	r1, r1, #29
    d5c6:	d004      	beq.n	d5d2 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    d5c8:	7940      	ldrb	r0, [r0, #5]
    d5ca:	0740      	lsls	r0, r0, #29
    d5cc:	d001      	beq.n	d5d2 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    d5ce:	2001      	movs	r0, #1
    d5d0:	4770      	bx	lr
    d5d2:	2000      	movs	r0, #0
    d5d4:	4770      	bx	lr

0000d5d6 <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>:
    d5d6:	7900      	ldrb	r0, [r0, #4]
    d5d8:	4770      	bx	lr

0000d5da <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>:
    d5da:	7940      	ldrb	r0, [r0, #5]
    d5dc:	4770      	bx	lr

0000d5de <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>:
    d5de:	7101      	strb	r1, [r0, #4]
    d5e0:	4770      	bx	lr

0000d5e2 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>:
    d5e2:	7141      	strb	r1, [r0, #5]
    d5e4:	4770      	bx	lr

0000d5e6 <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>:
    d5e6:	b510      	push	{r4, lr}
    d5e8:	2a1b      	cmp	r2, #27
    d5ea:	d904      	bls.n	d5f6 <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA+0x10>
    d5ec:	f240 31c2 	movw	r1, #962	; 0x3c2
    d5f0:	202a      	movs	r0, #42	; 0x2a
    d5f2:	f7f6 fb87 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d5f6:	7042      	strb	r2, [r0, #1]
    d5f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d5fc:	1cc0      	adds	r0, r0, #3
    d5fe:	f7fe bbb7 	b.w	bd70 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

0000d602 <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>:
    d602:	6809      	ldr	r1, [r1, #0]
    d604:	60c1      	str	r1, [r0, #12]
    d606:	4770      	bx	lr

0000d608 <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>:
    d608:	680a      	ldr	r2, [r1, #0]
    d60a:	6042      	str	r2, [r0, #4]
    d60c:	6849      	ldr	r1, [r1, #4]
    d60e:	6081      	str	r1, [r0, #8]
    d610:	4770      	bx	lr

0000d612 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>:
    d612:	680a      	ldr	r2, [r1, #0]
    d614:	6042      	str	r2, [r0, #4]
    d616:	6849      	ldr	r1, [r1, #4]
    d618:	6081      	str	r1, [r0, #8]
    d61a:	4770      	bx	lr

0000d61c <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>:
    d61c:	680a      	ldr	r2, [r1, #0]
    d61e:	6042      	str	r2, [r0, #4]
    d620:	6849      	ldr	r1, [r1, #4]
    d622:	6081      	str	r1, [r0, #8]
    d624:	4770      	bx	lr

0000d626 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>:
    d626:	7802      	ldrb	r2, [r0, #0]
    d628:	f001 0103 	and.w	r1, r1, #3
    d62c:	f022 0203 	bic.w	r2, r2, #3
    d630:	430a      	orrs	r2, r1
    d632:	7002      	strb	r2, [r0, #0]
    d634:	4770      	bx	lr

0000d636 <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>:
    d636:	7101      	strb	r1, [r0, #4]
    d638:	0a09      	lsrs	r1, r1, #8
    d63a:	7141      	strb	r1, [r0, #5]
    d63c:	4770      	bx	lr

0000d63e <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>:
    d63e:	7181      	strb	r1, [r0, #6]
    d640:	0a09      	lsrs	r1, r1, #8
    d642:	71c1      	strb	r1, [r0, #7]
    d644:	4770      	bx	lr

0000d646 <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>:
    d646:	7201      	strb	r1, [r0, #8]
    d648:	0a09      	lsrs	r1, r1, #8
    d64a:	7241      	strb	r1, [r0, #9]
    d64c:	4770      	bx	lr

0000d64e <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>:
    d64e:	7281      	strb	r1, [r0, #10]
    d650:	0a09      	lsrs	r1, r1, #8
    d652:	72c1      	strb	r1, [r0, #11]
    d654:	4770      	bx	lr

0000d656 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>:
    d656:	b570      	push	{r4, r5, r6, lr}
    d658:	7802      	ldrb	r2, [r0, #0]
    d65a:	f002 020f 	and.w	r2, r2, #15
    d65e:	2a03      	cmp	r2, #3
    d660:	d02c      	beq.n	d6bc <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x66>
    d662:	2a05      	cmp	r2, #5
    d664:	d12d      	bne.n	d6c2 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    d666:	f8b0 2019 	ldrh.w	r2, [r0, #25]
    d66a:	f8b0 501b 	ldrh.w	r5, [r0, #27]
    d66e:	f8b0 4017 	ldrh.w	r4, [r0, #23]
    d672:	7d83      	ldrb	r3, [r0, #22]
    d674:	b141      	cbz	r1, d688 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x32>
    d676:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    d67a:	d905      	bls.n	d688 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x32>
    d67c:	f640 5107 	movw	r1, #3335	; 0xd07
    d680:	428a      	cmp	r2, r1
    d682:	d801      	bhi.n	d688 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x32>
    d684:	2101      	movs	r1, #1
    d686:	e000      	b.n	d68a <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x34>
    d688:	2100      	movs	r1, #0
    d68a:	7846      	ldrb	r6, [r0, #1]
    d68c:	2e22      	cmp	r6, #34	; 0x22
    d68e:	d118      	bne.n	d6c2 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    d690:	b959      	cbnz	r1, d6aa <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x54>
    d692:	1f91      	subs	r1, r2, #6
    d694:	f640 467a 	movw	r6, #3194	; 0xc7a
    d698:	42b1      	cmp	r1, r6
    d69a:	d812      	bhi.n	d6c2 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    d69c:	b18b      	cbz	r3, d6c2 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    d69e:	2b08      	cmp	r3, #8
    d6a0:	d80f      	bhi.n	d6c2 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    d6a2:	4293      	cmp	r3, r2
    d6a4:	d20d      	bcs.n	d6c2 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    d6a6:	4294      	cmp	r4, r2
    d6a8:	d80b      	bhi.n	d6c2 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    d6aa:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    d6ae:	d208      	bcs.n	d6c2 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    d6b0:	f8b0 001d 	ldrh.w	r0, [r0, #29]
    d6b4:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
    d6b8:	d905      	bls.n	d6c6 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x70>
    d6ba:	e002      	b.n	d6c2 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    d6bc:	7840      	ldrb	r0, [r0, #1]
    d6be:	280c      	cmp	r0, #12
    d6c0:	d001      	beq.n	d6c6 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x70>
    d6c2:	2000      	movs	r0, #0
    d6c4:	bd70      	pop	{r4, r5, r6, pc}
    d6c6:	2001      	movs	r0, #1
    d6c8:	bd70      	pop	{r4, r5, r6, pc}

0000d6ca <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>:
    d6ca:	b570      	push	{r4, r5, r6, lr}
    d6cc:	4614      	mov	r4, r2
    d6ce:	4605      	mov	r5, r0
    d6d0:	2a1f      	cmp	r2, #31
    d6d2:	d903      	bls.n	d6dc <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I+0x12>
    d6d4:	21b2      	movs	r1, #178	; 0xb2
    d6d6:	202a      	movs	r0, #42	; 0x2a
    d6d8:	f7f6 fb14 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d6dc:	f105 0009 	add.w	r0, r5, #9
    d6e0:	f7fe fb46 	bl	bd70 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d6e4:	1da4      	adds	r4, r4, #6
    d6e6:	706c      	strb	r4, [r5, #1]
    d6e8:	bd70      	pop	{r4, r5, r6, pc}

0000d6ea <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>:
    d6ea:	b510      	push	{r4, lr}
    d6ec:	7802      	ldrb	r2, [r0, #0]
    d6ee:	f001 030f 	and.w	r3, r1, #15
    d6f2:	f022 020f 	bic.w	r2, r2, #15
    d6f6:	431a      	orrs	r2, r3
    d6f8:	7002      	strb	r2, [r0, #0]
    d6fa:	2907      	cmp	r1, #7
    d6fc:	d20c      	bcs.n	d718 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2e>
    d6fe:	e8df f001 	tbb	[pc, r1]
    d702:	0604      	.short	0x0604
    d704:	08040604 	.word	0x08040604
    d708:	0004      	.short	0x0004
    d70a:	2106      	movs	r1, #6
    d70c:	e002      	b.n	d714 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    d70e:	210c      	movs	r1, #12
    d710:	e000      	b.n	d714 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    d712:	2122      	movs	r1, #34	; 0x22
    d714:	7041      	strb	r1, [r0, #1]
    d716:	bd10      	pop	{r4, pc}
    d718:	216e      	movs	r1, #110	; 0x6e
    d71a:	202a      	movs	r0, #42	; 0x2a
    d71c:	f7f6 faf2 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000d720 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>:
    d720:	680a      	ldr	r2, [r1, #0]
    d722:	f840 2f09 	str.w	r2, [r0, #9]!
    d726:	8889      	ldrh	r1, [r1, #4]
    d728:	8081      	strh	r1, [r0, #4]
    d72a:	4770      	bx	lr

0000d72c <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>:
    d72c:	7802      	ldrb	r2, [r0, #0]
    d72e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    d732:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    d736:	7002      	strb	r2, [r0, #0]
    d738:	4770      	bx	lr

0000d73a <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>:
    d73a:	680a      	ldr	r2, [r1, #0]
    d73c:	f840 2f03 	str.w	r2, [r0, #3]!
    d740:	8889      	ldrh	r1, [r1, #4]
    d742:	8081      	strh	r1, [r0, #4]
    d744:	4770      	bx	lr

0000d746 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>:
    d746:	7802      	ldrb	r2, [r0, #0]
    d748:	2340      	movs	r3, #64	; 0x40
    d74a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    d74e:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    d752:	430a      	orrs	r2, r1
    d754:	7002      	strb	r2, [r0, #0]
    d756:	4770      	bx	lr

0000d758 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>:
    d758:	b570      	push	{r4, r5, r6, lr}
    d75a:	4614      	mov	r4, r2
    d75c:	4605      	mov	r5, r0
    d75e:	2a1f      	cmp	r2, #31
    d760:	d903      	bls.n	d76a <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY+0x12>
    d762:	21d4      	movs	r1, #212	; 0xd4
    d764:	202a      	movs	r0, #42	; 0x2a
    d766:	f7f6 facd 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d76a:	f105 0009 	add.w	r0, r5, #9
    d76e:	f7fe faff 	bl	bd70 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d772:	1da4      	adds	r4, r4, #6
    d774:	706c      	strb	r4, [r5, #1]
    d776:	bd70      	pop	{r4, r5, r6, pc}

0000d778 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>:
    d778:	2101      	movs	r1, #1
    d77a:	f000 b853 	b.w	d824 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa6>

0000d77e <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>:
    d77e:	6841      	ldr	r1, [r0, #4]
    d780:	2200      	movs	r2, #0
    d782:	f891 30fa 	ldrb.w	r3, [r1, #250]	; 0xfa
    d786:	2b00      	cmp	r3, #0
    d788:	d004      	beq.n	d794 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x16>
    d78a:	f881 20fa 	strb.w	r2, [r1, #250]	; 0xfa
    d78e:	6840      	ldr	r0, [r0, #4]
    d790:	f000 bc87 	b.w	e0a2 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY>
    d794:	4770      	bx	lr
    d796:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    d79a:	460e      	mov	r6, r1
    d79c:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    d7a0:	4617      	mov	r7, r2
    d7a2:	39ff      	subs	r1, #255	; 0xff
    d7a4:	d014      	beq.n	d7d0 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x52>
    d7a6:	8030      	strh	r0, [r6, #0]
    d7a8:	2100      	movs	r1, #0
    d7aa:	7171      	strb	r1, [r6, #5]
    d7ac:	f7f6 fede 	bl	456c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    d7b0:	4604      	mov	r4, r0
    d7b2:	f7ff f915 	bl	c9e0 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    d7b6:	0005      	movs	r5, r0
    d7b8:	d00a      	beq.n	d7d0 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x52>
    d7ba:	4620      	mov	r0, r4
    d7bc:	4629      	mov	r1, r5
    d7be:	aa01      	add	r2, sp, #4
    d7c0:	f7ff f931 	bl	ca26 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    d7c4:	8070      	strh	r0, [r6, #2]
    d7c6:	b130      	cbz	r0, d7d6 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x58>
    d7c8:	28fb      	cmp	r0, #251	; 0xfb
    d7ca:	d906      	bls.n	d7da <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x5c>
    d7cc:	21c9      	movs	r1, #201	; 0xc9
    d7ce:	e026      	b.n	d81e <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa0>
    d7d0:	2000      	movs	r0, #0
    d7d2:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    d7d6:	21c8      	movs	r1, #200	; 0xc8
    d7d8:	e021      	b.n	d81e <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa0>
    d7da:	9801      	ldr	r0, [sp, #4]
    d7dc:	f7ff febf 	bl	d55e <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>
    d7e0:	2801      	cmp	r0, #1
    d7e2:	d003      	beq.n	d7ec <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x6e>
    d7e4:	2802      	cmp	r0, #2
    d7e6:	d001      	beq.n	d7ec <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x6e>
    d7e8:	21d8      	movs	r1, #216	; 0xd8
    d7ea:	e018      	b.n	d81e <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa0>
    d7ec:	7130      	strb	r0, [r6, #4]
    d7ee:	4629      	mov	r1, r5
    d7f0:	8873      	ldrh	r3, [r6, #2]
    d7f2:	2503      	movs	r5, #3
    d7f4:	4620      	mov	r0, r4
    d7f6:	463a      	mov	r2, r7
    d7f8:	9500      	str	r5, [sp, #0]
    d7fa:	f7fe ffe6 	bl	c7ca <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>
    d7fe:	4620      	mov	r0, r4
    d800:	60b7      	str	r7, [r6, #8]
    d802:	f7ff f89c 	bl	c93e <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    d806:	b138      	cbz	r0, d818 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x9a>
    d808:	2100      	movs	r1, #0
    d80a:	4620      	mov	r0, r4
    d80c:	460a      	mov	r2, r1
    d80e:	f7ff f9e0 	bl	cbd2 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    d812:	b118      	cbz	r0, d81c <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x9e>
    d814:	2001      	movs	r0, #1
    d816:	e7dc      	b.n	d7d2 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x54>
    d818:	21e8      	movs	r1, #232	; 0xe8
    d81a:	e000      	b.n	d81e <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa0>
    d81c:	21ed      	movs	r1, #237	; 0xed
    d81e:	202b      	movs	r0, #43	; 0x2b
    d820:	f7f6 fa70 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d824:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    d828:	4604      	mov	r4, r0
    d82a:	460e      	mov	r6, r1
    d82c:	2000      	movs	r0, #0
    d82e:	f7f6 fc6f 	bl	4110 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    d832:	4605      	mov	r5, r0
    d834:	2000      	movs	r0, #0
    d836:	b916      	cbnz	r6, d83e <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xc0>
    d838:	2001      	movs	r0, #1
    d83a:	f7f6 fc69 	bl	4110 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    d83e:	2600      	movs	r6, #0
    d840:	46b0      	mov	r8, r6
    d842:	182f      	adds	r7, r5, r0
    d844:	e017      	b.n	d876 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xf8>
    d846:	8820      	ldrh	r0, [r4, #0]
    d848:	1c40      	adds	r0, r0, #1
    d84a:	b280      	uxth	r0, r0
    d84c:	8020      	strh	r0, [r4, #0]
    d84e:	42b8      	cmp	r0, r7
    d850:	d302      	bcc.n	d858 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xda>
    d852:	4640      	mov	r0, r8
    d854:	f8a4 8000 	strh.w	r8, [r4]
    d858:	b280      	uxth	r0, r0
    d85a:	42a8      	cmp	r0, r5
    d85c:	d304      	bcc.n	d868 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xea>
    d85e:	42b8      	cmp	r0, r7
    d860:	d202      	bcs.n	d868 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xea>
    d862:	2000      	movs	r0, #0
    d864:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    d868:	4669      	mov	r1, sp
    d86a:	f7ff fbcf 	bl	d00c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    d86e:	2800      	cmp	r0, #0
    d870:	d0f8      	beq.n	d864 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xe6>
    d872:	1c76      	adds	r6, r6, #1
    d874:	b2f6      	uxtb	r6, r6
    d876:	42b7      	cmp	r7, r6
    d878:	d8e5      	bhi.n	d846 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xc8>
    d87a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    d87e:	8020      	strh	r0, [r4, #0]
    d880:	2012      	movs	r0, #18
    d882:	e7ef      	b.n	d864 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xe6>

0000d884 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    d884:	b570      	push	{r4, r5, r6, lr}
    d886:	8050      	strh	r0, [r2, #2]
    d888:	890c      	ldrh	r4, [r1, #8]
    d88a:	8094      	strh	r4, [r2, #4]
    d88c:	898b      	ldrh	r3, [r1, #12]
    d88e:	80d3      	strh	r3, [r2, #6]
    d890:	8948      	ldrh	r0, [r1, #10]
    d892:	8110      	strh	r0, [r2, #8]
    d894:	89cd      	ldrh	r5, [r1, #14]
    d896:	8155      	strh	r5, [r2, #10]
    d898:	8dce      	ldrh	r6, [r1, #46]	; 0x2e
    d89a:	42ae      	cmp	r6, r5
    d89c:	d108      	bne.n	d8b0 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    d89e:	8d4d      	ldrh	r5, [r1, #42]	; 0x2a
    d8a0:	4285      	cmp	r5, r0
    d8a2:	d105      	bne.n	d8b0 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    d8a4:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
    d8a6:	429d      	cmp	r5, r3
    d8a8:	d102      	bne.n	d8b0 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    d8aa:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
    d8ac:	42a3      	cmp	r3, r4
    d8ae:	d001      	beq.n	d8b4 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x30>
    d8b0:	2301      	movs	r3, #1
    d8b2:	e000      	b.n	d8b6 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    d8b4:	2300      	movs	r3, #0
    d8b6:	7313      	strb	r3, [r2, #12]
    d8b8:	8548      	strh	r0, [r1, #42]	; 0x2a
    d8ba:	8950      	ldrh	r0, [r2, #10]
    d8bc:	85c8      	strh	r0, [r1, #46]	; 0x2e
    d8be:	8890      	ldrh	r0, [r2, #4]
    d8c0:	8588      	strh	r0, [r1, #44]	; 0x2c
    d8c2:	88d0      	ldrh	r0, [r2, #6]
    d8c4:	8608      	strh	r0, [r1, #48]	; 0x30
    d8c6:	2001      	movs	r0, #1
    d8c8:	7010      	strb	r0, [r2, #0]
    d8ca:	bd70      	pop	{r4, r5, r6, pc}

0000d8cc <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    d8cc:	b510      	push	{r4, lr}
    d8ce:	888c      	ldrh	r4, [r1, #4]
    d8d0:	890a      	ldrh	r2, [r1, #8]
    d8d2:	884b      	ldrh	r3, [r1, #2]
    d8d4:	88c9      	ldrh	r1, [r1, #6]
    d8d6:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    d8da:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
    d8de:	f8a0 4042 	strh.w	r4, [r0, #66]	; 0x42
    d8e2:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
    d8e6:	bd10      	pop	{r4, pc}

0000d8e8 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    d8e8:	b570      	push	{r4, r5, r6, lr}
    d8ea:	4615      	mov	r5, r2
    d8ec:	460c      	mov	r4, r1
    d8ee:	f000 f8c1 	bl	da74 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x50>
    d8f2:	3096      	adds	r0, #150	; 0x96
    d8f4:	4428      	add	r0, r5
    d8f6:	42a0      	cmp	r0, r4
    d8f8:	d801      	bhi.n	d8fe <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    d8fa:	1a20      	subs	r0, r4, r0
    d8fc:	bd70      	pop	{r4, r5, r6, pc}
    d8fe:	2000      	movs	r0, #0
    d900:	bd70      	pop	{r4, r5, r6, pc}

0000d902 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    d902:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d906:	4604      	mov	r4, r0
    d908:	8dc7      	ldrh	r7, [r0, #46]	; 0x2e
    d90a:	8e46      	ldrh	r6, [r0, #50]	; 0x32
    d90c:	f8b0 5044 	ldrh.w	r5, [r0, #68]	; 0x44
    d910:	8f00      	ldrh	r0, [r0, #56]	; 0x38
    d912:	4285      	cmp	r5, r0
    d914:	d300      	bcc.n	d918 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x16>
    d916:	4605      	mov	r5, r0
    d918:	4620      	mov	r0, r4
    d91a:	f894 1063 	ldrb.w	r1, [r4, #99]	; 0x63
    d91e:	f000 f89b 	bl	da58 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    d922:	4601      	mov	r1, r0
    d924:	85e5      	strh	r5, [r4, #46]	; 0x2e
    d926:	8661      	strh	r1, [r4, #50]	; 0x32
    d928:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    d92a:	f104 0024 	add.w	r0, r4, #36	; 0x24
    d92e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    d930:	4680      	mov	r8, r0
    d932:	42aa      	cmp	r2, r5
    d934:	d200      	bcs.n	d938 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x36>
    d936:	462a      	mov	r2, r5
    d938:	428b      	cmp	r3, r1
    d93a:	d200      	bcs.n	d93e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3c>
    d93c:	460b      	mov	r3, r1
    d93e:	8202      	strh	r2, [r0, #16]
    d940:	f8a8 3012 	strh.w	r3, [r8, #18]
    d944:	42bd      	cmp	r5, r7
    d946:	d101      	bne.n	d94c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4a>
    d948:	42b1      	cmp	r1, r6
    d94a:	d001      	beq.n	d950 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4e>
    d94c:	2001      	movs	r0, #1
    d94e:	e000      	b.n	d952 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x50>
    d950:	2000      	movs	r0, #0
    d952:	4681      	mov	r9, r0
    d954:	f8b4 5040 	ldrh.w	r5, [r4, #64]	; 0x40
    d958:	8f60      	ldrh	r0, [r4, #58]	; 0x3a
    d95a:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
    d95c:	8e26      	ldrh	r6, [r4, #48]	; 0x30
    d95e:	4285      	cmp	r5, r0
    d960:	d300      	bcc.n	d964 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x62>
    d962:	4605      	mov	r5, r0
    d964:	f894 1062 	ldrb.w	r1, [r4, #98]	; 0x62
    d968:	4620      	mov	r0, r4
    d96a:	f000 f87c 	bl	da66 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x42>
    d96e:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
    d972:	2902      	cmp	r1, #2
    d974:	d108      	bne.n	d988 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x86>
    d976:	42af      	cmp	r7, r5
    d978:	d200      	bcs.n	d97c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x7a>
    d97a:	463d      	mov	r5, r7
    d97c:	4286      	cmp	r6, r0
    d97e:	d200      	bcs.n	d982 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x80>
    d980:	4630      	mov	r0, r6
    d982:	2100      	movs	r1, #0
    d984:	f884 1058 	strb.w	r1, [r4, #88]	; 0x58
    d988:	f8a8 5008 	strh.w	r5, [r8, #8]
    d98c:	f8a8 000c 	strh.w	r0, [r8, #12]
    d990:	42bd      	cmp	r5, r7
    d992:	d101      	bne.n	d998 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x96>
    d994:	42b0      	cmp	r0, r6
    d996:	d001      	beq.n	d99c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9a>
    d998:	2001      	movs	r0, #1
    d99a:	e000      	b.n	d99e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9c>
    d99c:	2000      	movs	r0, #0
    d99e:	ea40 0009 	orr.w	r0, r0, r9
    d9a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000d9a6 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
    d9a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d9aa:	4616      	mov	r6, r2
    d9ac:	460f      	mov	r7, r1
    d9ae:	4604      	mov	r4, r0
    d9b0:	f000 f860 	bl	da74 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x50>
    d9b4:	4605      	mov	r5, r0
    d9b6:	463a      	mov	r2, r7
    d9b8:	6861      	ldr	r1, [r4, #4]
    d9ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
    d9bc:	f000 f847 	bl	da4e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2a>
    d9c0:	19a9      	adds	r1, r5, r6
    d9c2:	4281      	cmp	r1, r0
    d9c4:	d300      	bcc.n	d9c8 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY+0x22>
    d9c6:	4608      	mov	r0, r1
    d9c8:	62a0      	str	r0, [r4, #40]	; 0x28
    d9ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d9ce <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    d9ce:	221b      	movs	r2, #27
    d9d0:	8402      	strh	r2, [r0, #32]
    d9d2:	8382      	strh	r2, [r0, #28]
    d9d4:	82c2      	strh	r2, [r0, #22]
    d9d6:	8282      	strh	r2, [r0, #20]
    d9d8:	8142      	strh	r2, [r0, #10]
    d9da:	8202      	strh	r2, [r0, #16]
    d9dc:	8102      	strh	r2, [r0, #8]
    d9de:	8542      	strh	r2, [r0, #42]	; 0x2a
    d9e0:	8582      	strh	r2, [r0, #44]	; 0x2c
    d9e2:	8482      	strh	r2, [r0, #36]	; 0x24
    d9e4:	2900      	cmp	r1, #0
    d9e6:	d10a      	bne.n	d9fe <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    d9e8:	f44f 71a4 	mov.w	r1, #328	; 0x148
    d9ec:	8441      	strh	r1, [r0, #34]	; 0x22
    d9ee:	83c1      	strh	r1, [r0, #30]
    d9f0:	8341      	strh	r1, [r0, #26]
    d9f2:	8301      	strh	r1, [r0, #24]
    d9f4:	81c1      	strh	r1, [r0, #14]
    d9f6:	8241      	strh	r1, [r0, #18]
    d9f8:	8181      	strh	r1, [r0, #12]
    d9fa:	85c1      	strh	r1, [r0, #46]	; 0x2e
    d9fc:	8601      	strh	r1, [r0, #48]	; 0x30
    d9fe:	4770      	bx	lr

0000da00 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    da00:	6800      	ldr	r0, [r0, #0]
    da02:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    da06:	4290      	cmp	r0, r2
    da08:	d903      	bls.n	da12 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    da0a:	1a40      	subs	r0, r0, r1
    da0c:	389c      	subs	r0, #156	; 0x9c
    da0e:	0840      	lsrs	r0, r0, #1
    da10:	4770      	bx	lr
    da12:	2000      	movs	r0, #0
    da14:	4770      	bx	lr

0000da16 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    da16:	b510      	push	{r4, lr}
    da18:	9c02      	ldr	r4, [sp, #8]
    da1a:	8281      	strh	r1, [r0, #20]
    da1c:	82c2      	strh	r2, [r0, #22]
    da1e:	8303      	strh	r3, [r0, #24]
    da20:	8344      	strh	r4, [r0, #26]
    da22:	bd10      	pop	{r4, pc}

0000da24 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    da24:	8050      	strh	r0, [r2, #2]
    da26:	8a88      	ldrh	r0, [r1, #20]
    da28:	8090      	strh	r0, [r2, #4]
    da2a:	8ac8      	ldrh	r0, [r1, #22]
    da2c:	80d0      	strh	r0, [r2, #6]
    da2e:	8b08      	ldrh	r0, [r1, #24]
    da30:	8110      	strh	r0, [r2, #8]
    da32:	8b48      	ldrh	r0, [r1, #26]
    da34:	8150      	strh	r0, [r2, #10]
    da36:	2001      	movs	r0, #1
    da38:	7010      	strb	r0, [r2, #0]
    da3a:	4770      	bx	lr
    da3c:	2902      	cmp	r1, #2
    da3e:	d003      	beq.n	da48 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x24>
    da40:	00c0      	lsls	r0, r0, #3
    da42:	3070      	adds	r0, #112	; 0x70
    da44:	b280      	uxth	r0, r0
    da46:	4770      	bx	lr
    da48:	0080      	lsls	r0, r0, #2
    da4a:	303c      	adds	r0, #60	; 0x3c
    da4c:	e7fa      	b.n	da44 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x20>
    da4e:	4288      	cmp	r0, r1
    da50:	d300      	bcc.n	da54 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x30>
    da52:	4608      	mov	r0, r1
    da54:	1a80      	subs	r0, r0, r2
    da56:	4770      	bx	lr
    da58:	f8b0 1046 	ldrh.w	r1, [r0, #70]	; 0x46
    da5c:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
    da5e:	4281      	cmp	r1, r0
    da60:	d200      	bcs.n	da64 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x40>
    da62:	4608      	mov	r0, r1
    da64:	4770      	bx	lr
    da66:	f8b0 1042 	ldrh.w	r1, [r0, #66]	; 0x42
    da6a:	8fc0      	ldrh	r0, [r0, #62]	; 0x3e
    da6c:	4281      	cmp	r1, r0
    da6e:	d200      	bcs.n	da72 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x4e>
    da70:	4608      	mov	r0, r1
    da72:	4770      	bx	lr
    da74:	2196      	movs	r1, #150	; 0x96
    da76:	f890 3063 	ldrb.w	r3, [r0, #99]	; 0x63
    da7a:	f890 2062 	ldrb.w	r2, [r0, #98]	; 0x62
    da7e:	f000 b800 	b.w	da82 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x5e>
    da82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    da86:	460d      	mov	r5, r1
    da88:	4606      	mov	r6, r0
    da8a:	4698      	mov	r8, r3
    da8c:	4617      	mov	r7, r2
    da8e:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
    da90:	4611      	mov	r1, r2
    da92:	f7ff ffd3 	bl	da3c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    da96:	4604      	mov	r4, r0
    da98:	4639      	mov	r1, r7
    da9a:	4630      	mov	r0, r6
    da9c:	f7ff ffe3 	bl	da66 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x42>
    daa0:	42a0      	cmp	r0, r4
    daa2:	d200      	bcs.n	daa6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x82>
    daa4:	4604      	mov	r4, r0
    daa6:	8eb0      	ldrh	r0, [r6, #52]	; 0x34
    daa8:	4641      	mov	r1, r8
    daaa:	f7ff ffc7 	bl	da3c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    daae:	4607      	mov	r7, r0
    dab0:	4641      	mov	r1, r8
    dab2:	4630      	mov	r0, r6
    dab4:	f7ff ffd0 	bl	da58 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    dab8:	42b8      	cmp	r0, r7
    daba:	d300      	bcc.n	dabe <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x9a>
    dabc:	4638      	mov	r0, r7
    dabe:	4420      	add	r0, r4
    dac0:	4428      	add	r0, r5
    dac2:	1d80      	adds	r0, r0, #6
    dac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dac8:	2801      	cmp	r0, #1
    daca:	d102      	bne.n	dad2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xae>
    dacc:	7948      	ldrb	r0, [r1, #5]
    dace:	0980      	lsrs	r0, r0, #6
    dad0:	d001      	beq.n	dad6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb2>
    dad2:	2000      	movs	r0, #0
    dad4:	4770      	bx	lr
    dad6:	2001      	movs	r0, #1
    dad8:	4770      	bx	lr
    dada:	2801      	cmp	r0, #1
    dadc:	d106      	bne.n	daec <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xc8>
    dade:	7948      	ldrb	r0, [r1, #5]
    dae0:	2101      	movs	r1, #1
    dae2:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    dae6:	d101      	bne.n	daec <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xc8>
    dae8:	2001      	movs	r0, #1
    daea:	4770      	bx	lr
    daec:	2000      	movs	r0, #0
    daee:	4770      	bx	lr
    daf0:	2802      	cmp	r0, #2
    daf2:	d003      	beq.n	dafc <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd8>
    daf4:	2803      	cmp	r0, #3
    daf6:	d001      	beq.n	dafc <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd8>
    daf8:	2000      	movs	r0, #0
    dafa:	4770      	bx	lr
    dafc:	2001      	movs	r0, #1
    dafe:	4770      	bx	lr

0000db00 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
    db00:	b510      	push	{r4, lr}
    db02:	4604      	mov	r4, r0
    db04:	7c00      	ldrb	r0, [r0, #16]
    db06:	f7ff fff3 	bl	daf0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xcc>
    db0a:	b148      	cbz	r0, db20 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    db0c:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
    db10:	f104 0150 	add.w	r1, r4, #80	; 0x50
    db14:	f7ff fa37 	bl	cf86 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    db18:	2808      	cmp	r0, #8
    db1a:	d001      	beq.n	db20 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    db1c:	2001      	movs	r0, #1
    db1e:	bd10      	pop	{r4, pc}
    db20:	7c20      	ldrb	r0, [r4, #16]
    db22:	b118      	cbz	r0, db2c <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    db24:	2802      	cmp	r0, #2
    db26:	d001      	beq.n	db2c <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    db28:	7de0      	ldrb	r0, [r4, #23]
    db2a:	bd10      	pop	{r4, pc}
    db2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    db30:	2000      	movs	r0, #0
    db32:	f7f6 bfd5 	b.w	4ae0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>

0000db36 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>:
    db36:	b508      	push	{r3, lr}
    db38:	f890 1078 	ldrb.w	r1, [r0, #120]	; 0x78
    db3c:	f88d 1000 	strb.w	r1, [sp]
    db40:	9900      	ldr	r1, [sp, #0]
    db42:	9100      	str	r1, [sp, #0]
    db44:	f89d 1000 	ldrb.w	r1, [sp]
    db48:	b109      	cbz	r1, db4e <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x18>
    db4a:	2001      	movs	r0, #1
    db4c:	bd08      	pop	{r3, pc}
    db4e:	f890 009a 	ldrb.w	r0, [r0, #154]	; 0x9a
    db52:	f88d 0000 	strb.w	r0, [sp]
    db56:	9800      	ldr	r0, [sp, #0]
    db58:	9000      	str	r0, [sp, #0]
    db5a:	f89d 0000 	ldrb.w	r0, [sp]
    db5e:	2000      	movs	r0, #0
    db60:	bd08      	pop	{r3, pc}

0000db62 <sym_2ORNMU44KG57RJ5GYPW4FCTEFWDXBHWXYAE3J6I>:
    db62:	20ff      	movs	r0, #255	; 0xff
    db64:	7008      	strb	r0, [r1, #0]
    db66:	4770      	bx	lr

0000db68 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>:
    db68:	b570      	push	{r4, r5, r6, lr}
    db6a:	460d      	mov	r5, r1
    db6c:	4604      	mov	r4, r0
    db6e:	22e8      	movs	r2, #232	; 0xe8
    db70:	2100      	movs	r1, #0
    db72:	f7fe f977 	bl	be64 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    db76:	20ff      	movs	r0, #255	; 0xff
    db78:	7020      	strb	r0, [r4, #0]
    db7a:	207f      	movs	r0, #127	; 0x7f
    db7c:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    db80:	2013      	movs	r0, #19
    db82:	8060      	strh	r0, [r4, #2]
    db84:	4628      	mov	r0, r5
    db86:	f7f6 fd87 	bl	4698 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>
    db8a:	62e0      	str	r0, [r4, #44]	; 0x2c
    db8c:	2002      	movs	r0, #2
    db8e:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
    db92:	f884 0075 	strb.w	r0, [r4, #117]	; 0x75
    db96:	2000      	movs	r0, #0
    db98:	73a0      	strb	r0, [r4, #14]
    db9a:	f104 0020 	add.w	r0, r4, #32
    db9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    dba2:	f000 b9a0 	b.w	dee6 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>

0000dba6 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
    dba6:	7880      	ldrb	r0, [r0, #2]
    dba8:	f3c0 0080 	ubfx	r0, r0, #2, #1
    dbac:	b108      	cbz	r0, dbb2 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0xc>
    dbae:	2000      	movs	r0, #0
    dbb0:	4770      	bx	lr
    dbb2:	201f      	movs	r0, #31
    dbb4:	4770      	bx	lr

0000dbb6 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>:
    dbb6:	f7f9 b803 	b.w	6bc0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d8>

0000dbba <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
    dbba:	6880      	ldr	r0, [r0, #8]
    dbbc:	4770      	bx	lr

0000dbbe <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
    dbbe:	2001      	movs	r0, #1
    dbc0:	4770      	bx	lr

0000dbc2 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
    dbc2:	b510      	push	{r4, lr}
    dbc4:	4604      	mov	r4, r0
    dbc6:	3020      	adds	r0, #32
    dbc8:	f000 f94d 	bl	de66 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    dbcc:	8861      	ldrh	r1, [r4, #2]
    dbce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dbd2:	2228      	movs	r2, #40	; 0x28
    dbd4:	f7f9 b9b0 	b.w	6f38 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>

0000dbd8 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
    dbd8:	2200      	movs	r2, #0
    dbda:	6282      	str	r2, [r0, #40]	; 0x28
    dbdc:	8843      	ldrh	r3, [r0, #2]
    dbde:	2b1d      	cmp	r3, #29
    dbe0:	d001      	beq.n	dbe6 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y+0xe>
    dbe2:	7341      	strb	r1, [r0, #13]
    dbe4:	4770      	bx	lr
    dbe6:	7342      	strb	r2, [r0, #13]
    dbe8:	4770      	bx	lr

0000dbea <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>:
    dbea:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    dbee:	2100      	movs	r1, #0
    dbf0:	2a02      	cmp	r2, #2
    dbf2:	d104      	bne.n	dbfe <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0x14>
    dbf4:	f8b0 0070 	ldrh.w	r0, [r0, #112]	; 0x70
    dbf8:	b108      	cbz	r0, dbfe <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0x14>
    dbfa:	2001      	movs	r0, #1
    dbfc:	e000      	b.n	dc00 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0x16>
    dbfe:	2000      	movs	r0, #0
    dc00:	4381      	bics	r1, r0
    dc02:	f081 0001 	eor.w	r0, r1, #1
    dc06:	4770      	bx	lr

0000dc08 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
    dc08:	2000      	movs	r0, #0
    dc0a:	4770      	bx	lr

0000dc0c <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
    dc0c:	7880      	ldrb	r0, [r0, #2]
    dc0e:	f000 0001 	and.w	r0, r0, #1
    dc12:	4770      	bx	lr

0000dc14 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
    dc14:	7880      	ldrb	r0, [r0, #2]
    dc16:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    dc1a:	4770      	bx	lr

0000dc1c <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
    dc1c:	2001      	movs	r0, #1
    dc1e:	4770      	bx	lr

0000dc20 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
    dc20:	7880      	ldrb	r0, [r0, #2]
    dc22:	f3c0 0040 	ubfx	r0, r0, #1, #1
    dc26:	4770      	bx	lr

0000dc28 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
    dc28:	f990 000e 	ldrsb.w	r0, [r0, #14]
    dc2c:	4770      	bx	lr

0000dc2e <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
    dc2e:	7800      	ldrb	r0, [r0, #0]
    dc30:	28ff      	cmp	r0, #255	; 0xff
    dc32:	d001      	beq.n	dc38 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ+0xa>
    dc34:	2001      	movs	r0, #1
    dc36:	4770      	bx	lr
    dc38:	2000      	movs	r0, #0
    dc3a:	4770      	bx	lr

0000dc3c <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>:
    dc3c:	680a      	ldr	r2, [r1, #0]
    dc3e:	f840 2f11 	str.w	r2, [r0, #17]!
    dc42:	8889      	ldrh	r1, [r1, #4]
    dc44:	8081      	strh	r1, [r0, #4]
    dc46:	2101      	movs	r1, #1
    dc48:	7181      	strb	r1, [r0, #6]
    dc4a:	4770      	bx	lr

0000dc4c <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
    dc4c:	7b00      	ldrb	r0, [r0, #12]
    dc4e:	4770      	bx	lr

0000dc50 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
    dc50:	2001      	movs	r0, #1
    dc52:	4770      	bx	lr

0000dc54 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
    dc54:	61c1      	str	r1, [r0, #28]
    dc56:	4770      	bx	lr

0000dc58 <sym_RNI25VYXYFKWFPBZMEWKYU7T2AE36PDSHGXVMJI>:
    dc58:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
    dc5c:	b102      	cbz	r2, dc60 <sym_RNI25VYXYFKWFPBZMEWKYU7T2AE36PDSHGXVMJI+0x8>
    dc5e:	2201      	movs	r2, #1
    dc60:	2300      	movs	r3, #0
    dc62:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    dc66:	b119      	cbz	r1, dc70 <sym_RNI25VYXYFKWFPBZMEWKYU7T2AE36PDSHGXVMJI+0x18>
    dc68:	e9d0 3019 	ldrd	r3, r0, [r0, #100]	; 0x64
    dc6c:	e9c1 3000 	strd	r3, r0, [r1]
    dc70:	4610      	mov	r0, r2
    dc72:	4770      	bx	lr

0000dc74 <sym_6SMKGRHQAIZHR6JTRBTFU3LNEOI457UCNN7L2SY>:
    dc74:	2102      	movs	r1, #2
    dc76:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
    dc7a:	4770      	bx	lr

0000dc7c <sym_UVJC3XBQQLDGXNDNKXZFSW7F5OWZWJU7FTAZXEI>:
    dc7c:	e9d0 2019 	ldrd	r2, r0, [r0, #100]	; 0x64
    dc80:	e9c1 2000 	strd	r2, r0, [r1]
    dc84:	4770      	bx	lr

0000dc86 <sym_DZ4VHVOVANVDVX7ECCNFNRACUFPY2WIUPGGZ27Y>:
    dc86:	2201      	movs	r2, #1
    dc88:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
    dc8c:	e9d1 2100 	ldrd	r2, r1, [r1]
    dc90:	e9c0 2119 	strd	r2, r1, [r0, #100]	; 0x64
    dc94:	4770      	bx	lr

0000dc96 <sym_CDJCVCA2DPO4EZMIO3E74XFHRHPGT76HYWGJOCA>:
    dc96:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    dc9a:	b102      	cbz	r2, dc9e <sym_CDJCVCA2DPO4EZMIO3E74XFHRHPGT76HYWGJOCA+0x8>
    dc9c:	2201      	movs	r2, #1
    dc9e:	2300      	movs	r3, #0
    dca0:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    dca4:	b119      	cbz	r1, dcae <sym_CDJCVCA2DPO4EZMIO3E74XFHRHPGT76HYWGJOCA+0x18>
    dca6:	e9d0 301b 	ldrd	r3, r0, [r0, #108]	; 0x6c
    dcaa:	e9c1 3000 	strd	r3, r0, [r1]
    dcae:	4610      	mov	r0, r2
    dcb0:	4770      	bx	lr

0000dcb2 <sym_57N4MHGOTN6SE7ESLAUPVT5Z7CNKRRVGNPONZCI>:
    dcb2:	2102      	movs	r1, #2
    dcb4:	f880 1075 	strb.w	r1, [r0, #117]	; 0x75
    dcb8:	4770      	bx	lr

0000dcba <sym_ECJZL6MVN4B4UZUQDXL2OTZMAL25BOLWE4F7TMI>:
    dcba:	e9d0 201b 	ldrd	r2, r0, [r0, #108]	; 0x6c
    dcbe:	e9c1 2000 	strd	r2, r0, [r1]
    dcc2:	4770      	bx	lr

0000dcc4 <sym_VD45NAZNLOGGVVD5JTOGXKZNINHWZNPETQGEFXA>:
    dcc4:	2201      	movs	r2, #1
    dcc6:	f880 2075 	strb.w	r2, [r0, #117]	; 0x75
    dcca:	e9d1 2100 	ldrd	r2, r1, [r1]
    dcce:	e9c0 211b 	strd	r2, r1, [r0, #108]	; 0x6c
    dcd2:	4770      	bx	lr

0000dcd4 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
    dcd4:	f880 1060 	strb.w	r1, [r0, #96]	; 0x60
    dcd8:	4770      	bx	lr

0000dcda <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
    dcda:	b570      	push	{r4, r5, r6, lr}
    dcdc:	4604      	mov	r4, r0
    dcde:	7880      	ldrb	r0, [r0, #2]
    dce0:	2501      	movs	r5, #1
    dce2:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    dce6:	b138      	cbz	r0, dcf8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1e>
    dce8:	233c      	movs	r3, #60	; 0x3c
    dcea:	22ff      	movs	r2, #255	; 0xff
    dcec:	4620      	mov	r0, r4
    dcee:	69e1      	ldr	r1, [r4, #28]
    dcf0:	f7f8 ff8c 	bl	6c0c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x424>
    dcf4:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
    dcf8:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
    dcfc:	bd70      	pop	{r4, r5, r6, pc}

0000dcfe <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
    dcfe:	7bc0      	ldrb	r0, [r0, #15]
    dd00:	2800      	cmp	r0, #0
    dd02:	d000      	beq.n	dd06 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8>
    dd04:	2001      	movs	r0, #1
    dd06:	4770      	bx	lr
    dd08:	b510      	push	{r4, lr}
    dd0a:	f7ff f93c 	bl	cf86 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    dd0e:	4604      	mov	r4, r0
    dd10:	f7f7 fd60 	bl	57d4 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    dd14:	b138      	cbz	r0, dd26 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
    dd16:	4620      	mov	r0, r4
    dd18:	f7f7 fc94 	bl	5644 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    dd1c:	b118      	cbz	r0, dd26 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
    dd1e:	2110      	movs	r1, #16
    dd20:	f7ff fb10 	bl	d344 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    dd24:	b108      	cbz	r0, dd2a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2c>
    dd26:	2000      	movs	r0, #0
    dd28:	bd10      	pop	{r4, pc}
    dd2a:	2001      	movs	r0, #1
    dd2c:	bd10      	pop	{r4, pc}
    dd2e:	2101      	movs	r1, #1
    dd30:	f7f8 bbdc 	b.w	64ec <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    dd34:	2101      	movs	r1, #1
    dd36:	f7f8 bbd9 	b.w	64ec <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    dd3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dd3e:	4604      	mov	r4, r0
    dd40:	2700      	movs	r7, #0
    dd42:	704f      	strb	r7, [r1, #1]
    dd44:	2011      	movs	r0, #17
    dd46:	460d      	mov	r5, r1
    dd48:	7008      	strb	r0, [r1, #0]
    dd4a:	2220      	movs	r2, #32
    dd4c:	f104 017a 	add.w	r1, r4, #122	; 0x7a
    dd50:	1d28      	adds	r0, r5, #4
    dd52:	f7fe f80d 	bl	bd70 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    dd56:	2601      	movs	r6, #1
    dd58:	722e      	strb	r6, [r5, #8]
    dd5a:	f884 7078 	strb.w	r7, [r4, #120]	; 0x78
    dd5e:	7928      	ldrb	r0, [r5, #4]
    dd60:	2800      	cmp	r0, #0
    dd62:	d111      	bne.n	dd88 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8a>
    dd64:	88e8      	ldrh	r0, [r5, #6]
    dd66:	f8a4 00a4 	strh.w	r0, [r4, #164]	; 0xa4
    dd6a:	69e0      	ldr	r0, [r4, #28]
    dd6c:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    dd70:	f884 10a6 	strb.w	r1, [r4, #166]	; 0xa6
    dd74:	f884 60a2 	strb.w	r6, [r4, #162]	; 0xa2
    dd78:	8800      	ldrh	r0, [r0, #0]
    dd7a:	f7f6 fbf7 	bl	456c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    dd7e:	f7fe fedc 	bl	cb3a <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    dd82:	69e0      	ldr	r0, [r4, #28]
    dd84:	f880 6068 	strb.w	r6, [r0, #104]	; 0x68
    dd88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dd8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dd90:	4604      	mov	r4, r0
    dd92:	460f      	mov	r7, r1
    dd94:	7e40      	ldrb	r0, [r0, #25]
    dd96:	f7f7 fc15 	bl	55c4 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    dd9a:	4606      	mov	r6, r0
    dd9c:	7e20      	ldrb	r0, [r4, #24]
    dd9e:	f104 0549 	add.w	r5, r4, #73	; 0x49
    dda2:	b120      	cbz	r0, ddae <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb0>
    dda4:	b11e      	cbz	r6, ddae <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb0>
    dda6:	7e60      	ldrb	r0, [r4, #25]
    dda8:	f7f7 fc00 	bl	55ac <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    ddac:	b1a0      	cbz	r0, ddd8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xda>
    ddae:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    ddb2:	2800      	cmp	r0, #0
    ddb4:	d024      	beq.n	de00 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x102>
    ddb6:	7ea0      	ldrb	r0, [r4, #26]
    ddb8:	2800      	cmp	r0, #0
    ddba:	d021      	beq.n	de00 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x102>
    ddbc:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    ddc0:	4629      	mov	r1, r5
    ddc2:	f7ff fe8a 	bl	dada <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb6>
    ddc6:	b1a8      	cbz	r0, ddf4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf6>
    ddc8:	f7f7 fbec 	bl	55a4 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    ddcc:	463a      	mov	r2, r7
    ddce:	4629      	mov	r1, r5
    ddd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ddd4:	f7ff b86f 	b.w	ceb6 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    ddd8:	2001      	movs	r0, #1
    ddda:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
    ddde:	463a      	mov	r2, r7
    dde0:	4629      	mov	r1, r5
    dde2:	4630      	mov	r0, r6
    dde4:	f7ff f867 	bl	ceb6 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    dde8:	7e61      	ldrb	r1, [r4, #25]
    ddea:	4628      	mov	r0, r5
    ddec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ddf0:	f7f7 bbf4 	b.w	55dc <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    ddf4:	4639      	mov	r1, r7
    ddf6:	4628      	mov	r0, r5
    ddf8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ddfc:	f7ff b84a 	b.w	ce94 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    de00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    de04:	b510      	push	{r4, lr}
    de06:	4604      	mov	r4, r0
    de08:	4608      	mov	r0, r1
    de0a:	f7fd f853 	bl	aeb4 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    de0e:	7921      	ldrb	r1, [r4, #4]
    de10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    de14:	2025      	movs	r0, #37	; 0x25
    de16:	f001 bc5f 	b.w	f6d8 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>
    de1a:	b510      	push	{r4, lr}
    de1c:	4604      	mov	r4, r0
    de1e:	3026      	adds	r0, #38	; 0x26
    de20:	f7fc fffa 	bl	ae18 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    de24:	2800      	cmp	r0, #0
    de26:	d102      	bne.n	de2e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x130>
    de28:	207f      	movs	r0, #127	; 0x7f
    de2a:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    de2e:	bd10      	pop	{r4, pc}
    de30:	7802      	ldrb	r2, [r0, #0]
    de32:	2320      	movs	r3, #32
    de34:	f022 0220 	bic.w	r2, r2, #32
    de38:	ea03 1141 	and.w	r1, r3, r1, lsl #5
    de3c:	430a      	orrs	r2, r1
    de3e:	7002      	strb	r2, [r0, #0]
    de40:	4770      	bx	lr

0000de42 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
    de42:	b570      	push	{r4, r5, r6, lr}
    de44:	7001      	strb	r1, [r0, #0]
    de46:	7042      	strb	r2, [r0, #1]
    de48:	4614      	mov	r4, r2
    de4a:	460d      	mov	r5, r1
    de4c:	7880      	ldrb	r0, [r0, #2]
    de4e:	f000 f87f 	bl	df50 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    de52:	fb10 f005 	smulbb	r0, r0, r5
    de56:	4360      	muls	r0, r4
    de58:	28ff      	cmp	r0, #255	; 0xff
    de5a:	d303      	bcc.n	de64 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y+0x22>
    de5c:	215c      	movs	r1, #92	; 0x5c
    de5e:	202e      	movs	r0, #46	; 0x2e
    de60:	f7f5 ff50 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    de64:	bd70      	pop	{r4, r5, r6, pc}

0000de66 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
    de66:	b510      	push	{r4, lr}
    de68:	4604      	mov	r4, r0
    de6a:	7880      	ldrb	r0, [r0, #2]
    de6c:	f000 f870 	bl	df50 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    de70:	7861      	ldrb	r1, [r4, #1]
    de72:	7822      	ldrb	r2, [r4, #0]
    de74:	fb11 f102 	smulbb	r1, r1, r2
    de78:	4348      	muls	r0, r1
    de7a:	b2c0      	uxtb	r0, r0
    de7c:	bd10      	pop	{r4, pc}

0000de7e <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
    de7e:	b510      	push	{r4, lr}
    de80:	4604      	mov	r4, r0
    de82:	f000 f84d 	bl	df20 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x2c>
    de86:	7961      	ldrb	r1, [r4, #5]
    de88:	1c49      	adds	r1, r1, #1
    de8a:	b2c9      	uxtb	r1, r1
    de8c:	7161      	strb	r1, [r4, #5]
    de8e:	7862      	ldrb	r2, [r4, #1]
    de90:	4291      	cmp	r1, r2
    de92:	d10b      	bne.n	deac <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    de94:	2200      	movs	r2, #0
    de96:	7162      	strb	r2, [r4, #5]
    de98:	78e1      	ldrb	r1, [r4, #3]
    de9a:	4301      	orrs	r1, r0
    de9c:	70e1      	strb	r1, [r4, #3]
    de9e:	78a3      	ldrb	r3, [r4, #2]
    dea0:	4299      	cmp	r1, r3
    dea2:	d103      	bne.n	deac <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    dea4:	70e2      	strb	r2, [r4, #3]
    dea6:	7921      	ldrb	r1, [r4, #4]
    dea8:	1c49      	adds	r1, r1, #1
    deaa:	7121      	strb	r1, [r4, #4]
    deac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    deb0:	f000 b825 	b.w	defe <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0xa>

0000deb4 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
    deb4:	7081      	strb	r1, [r0, #2]
    deb6:	4770      	bx	lr

0000deb8 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
    deb8:	b570      	push	{r4, r5, r6, lr}
    deba:	4604      	mov	r4, r0
    debc:	7880      	ldrb	r0, [r0, #2]
    debe:	f000 f847 	bl	df50 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    dec2:	7861      	ldrb	r1, [r4, #1]
    dec4:	fb11 f500 	smulbb	r5, r1, r0
    dec8:	78e0      	ldrb	r0, [r4, #3]
    deca:	f000 f841 	bl	df50 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    dece:	7861      	ldrb	r1, [r4, #1]
    ded0:	7962      	ldrb	r2, [r4, #5]
    ded2:	fb10 2001 	smlabb	r0, r0, r1, r2
    ded6:	7821      	ldrb	r1, [r4, #0]
    ded8:	7922      	ldrb	r2, [r4, #4]
    deda:	1a89      	subs	r1, r1, r2
    dedc:	fb11 f105 	smulbb	r1, r1, r5
    dee0:	1a08      	subs	r0, r1, r0
    dee2:	b2c0      	uxtb	r0, r0
    dee4:	bd70      	pop	{r4, r5, r6, pc}

0000dee6 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
    dee6:	2100      	movs	r1, #0
    dee8:	6001      	str	r1, [r0, #0]
    deea:	8081      	strh	r1, [r0, #4]
    deec:	2101      	movs	r1, #1
    deee:	7041      	strb	r1, [r0, #1]
    def0:	7001      	strb	r1, [r0, #0]
    def2:	4770      	bx	lr

0000def4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
    def4:	2100      	movs	r1, #0
    def6:	70c1      	strb	r1, [r0, #3]
    def8:	7141      	strb	r1, [r0, #5]
    defa:	7101      	strb	r1, [r0, #4]
    defc:	4770      	bx	lr
    defe:	b510      	push	{r4, lr}
    df00:	2801      	cmp	r0, #1
    df02:	d007      	beq.n	df14 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x20>
    df04:	2802      	cmp	r0, #2
    df06:	d007      	beq.n	df18 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x24>
    df08:	2804      	cmp	r0, #4
    df0a:	d007      	beq.n	df1c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x28>
    df0c:	2139      	movs	r1, #57	; 0x39
    df0e:	202e      	movs	r0, #46	; 0x2e
    df10:	f7f5 fef8 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    df14:	2025      	movs	r0, #37	; 0x25
    df16:	bd10      	pop	{r4, pc}
    df18:	2026      	movs	r0, #38	; 0x26
    df1a:	bd10      	pop	{r4, pc}
    df1c:	2027      	movs	r0, #39	; 0x27
    df1e:	bd10      	pop	{r4, pc}
    df20:	4601      	mov	r1, r0
    df22:	2000      	movs	r0, #0
    df24:	788a      	ldrb	r2, [r1, #2]
    df26:	07d3      	lsls	r3, r2, #31
    df28:	d002      	beq.n	df30 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x3c>
    df2a:	78cb      	ldrb	r3, [r1, #3]
    df2c:	07db      	lsls	r3, r3, #31
    df2e:	d006      	beq.n	df3e <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4a>
    df30:	0793      	lsls	r3, r2, #30
    df32:	d506      	bpl.n	df42 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    df34:	78cb      	ldrb	r3, [r1, #3]
    df36:	079b      	lsls	r3, r3, #30
    df38:	d403      	bmi.n	df42 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    df3a:	2002      	movs	r0, #2
    df3c:	4770      	bx	lr
    df3e:	2001      	movs	r0, #1
    df40:	4770      	bx	lr
    df42:	0752      	lsls	r2, r2, #29
    df44:	d5fc      	bpl.n	df40 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    df46:	78c9      	ldrb	r1, [r1, #3]
    df48:	0749      	lsls	r1, r1, #29
    df4a:	d4f9      	bmi.n	df40 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    df4c:	2004      	movs	r0, #4
    df4e:	4770      	bx	lr
    df50:	f3c0 0180 	ubfx	r1, r0, #2, #1
    df54:	f3c0 0240 	ubfx	r2, r0, #1, #1
    df58:	4411      	add	r1, r2
    df5a:	f000 0001 	and.w	r0, r0, #1
    df5e:	4408      	add	r0, r1
    df60:	4770      	bx	lr

0000df62 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
    df62:	f240 315a 	movw	r1, #858	; 0x35a
    df66:	4348      	muls	r0, r1
    df68:	4770      	bx	lr

0000df6a <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
    df6a:	f240 20ef 	movw	r0, #751	; 0x2ef
    df6e:	4770      	bx	lr
    df70:	041c020e 	.word	0x041c020e
    df74:	0c600630 	.word	0x0c600630
    df78:	06b4035a 	.word	0x06b4035a
    df7c:	0bf505c5 	.word	0x0bf505c5
    df80:	01a31225 	.word	0x01a31225
    df84:	05bf03b1 	.word	0x05bf03b1
    df88:	064902ef 	.word	0x064902ef
    df8c:	09a3      	.short	0x09a3

0000df8e <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
    df8e:	b510      	push	{r4, lr}
    df90:	f890 10e4 	ldrb.w	r1, [r0, #228]	; 0xe4
    df94:	b109      	cbz	r1, df9a <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0xc>
    df96:	2000      	movs	r0, #0
    df98:	bd10      	pop	{r4, pc}
    df9a:	f8d0 10e0 	ldr.w	r1, [r0, #224]	; 0xe0
    df9e:	b949      	cbnz	r1, dfb4 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x26>
    dfa0:	f890 10bc 	ldrb.w	r1, [r0, #188]	; 0xbc
    dfa4:	b131      	cbz	r1, dfb4 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x26>
    dfa6:	e9d0 1230 	ldrd	r1, r2, [r0, #192]	; 0xc0
    dfaa:	428a      	cmp	r2, r1
    dfac:	d902      	bls.n	dfb4 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x26>
    dfae:	f7ff fe94 	bl	dcda <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    dfb2:	e7f0      	b.n	df96 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x8>
    dfb4:	2001      	movs	r0, #1
    dfb6:	bd10      	pop	{r4, pc}

0000dfb8 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
    dfb8:	b510      	push	{r4, lr}
    dfba:	b131      	cbz	r1, dfca <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x12>
    dfbc:	2901      	cmp	r1, #1
    dfbe:	d008      	beq.n	dfd2 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x1a>
    dfc0:	f240 71a3 	movw	r1, #1955	; 0x7a3
    dfc4:	2030      	movs	r0, #48	; 0x30
    dfc6:	f7f5 fe9d 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dfca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dfce:	f000 b999 	b.w	e304 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x262>
    dfd2:	2100      	movs	r1, #0
    dfd4:	f880 10bc 	strb.w	r1, [r0, #188]	; 0xbc
    dfd8:	f000 f95d 	bl	e296 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1f4>
    dfdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dfe0:	f7fb bdec 	b.w	9bbc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>

0000dfe4 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI>:
    dfe4:	b510      	push	{r4, lr}
    dfe6:	4604      	mov	r4, r0
    dfe8:	f890 00c8 	ldrb.w	r0, [r0, #200]	; 0xc8
    dfec:	2800      	cmp	r0, #0
    dfee:	d019      	beq.n	e024 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x40>
    dff0:	2001      	movs	r0, #1
    dff2:	f884 00e4 	strb.w	r0, [r4, #228]	; 0xe4
    dff6:	4601      	mov	r1, r0
    dff8:	4620      	mov	r0, r4
    dffa:	f7ff fe6b 	bl	dcd4 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    dffe:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    e002:	b170      	cbz	r0, e022 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x3e>
    e004:	f814 0fb4 	ldrb.w	r0, [r4, #180]!
    e008:	f7f3 ff62 	bl	1ed0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    e00c:	7820      	ldrb	r0, [r4, #0]
    e00e:	f7f4 f89d 	bl	214c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    e012:	f814 09b4 	ldrb.w	r0, [r4], #-180
    e016:	f7f4 f877 	bl	2108 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    e01a:	b120      	cbz	r0, e026 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x42>
    e01c:	2000      	movs	r0, #0
    e01e:	f884 00c8 	strb.w	r0, [r4, #200]	; 0xc8
    e022:	2000      	movs	r0, #0
    e024:	bd10      	pop	{r4, pc}
    e026:	f240 2117 	movw	r1, #535	; 0x217
    e02a:	2030      	movs	r0, #48	; 0x30
    e02c:	f7f5 fe6a 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e030 <sym_WI2RDLNIWKOV64CKFZ2EF2DRND265I3CYCBNK6A>:
    e030:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
    e034:	4770      	bx	lr

0000e036 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>:
    e036:	f890 00c8 	ldrb.w	r0, [r0, #200]	; 0xc8
    e03a:	4770      	bx	lr

0000e03c <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA>:
    e03c:	b50e      	push	{r1, r2, r3, lr}
    e03e:	4669      	mov	r1, sp
    e040:	2001      	movs	r0, #1
    e042:	f7fe feb4 	bl	cdae <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    e046:	b138      	cbz	r0, e058 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0x1c>
    e048:	f240 1145 	movw	r1, #325	; 0x145
    e04c:	2030      	movs	r0, #48	; 0x30
    e04e:	f7f5 fe59 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e052:	9802      	ldr	r0, [sp, #8]
    e054:	f7ff ffc6 	bl	dfe4 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI>
    e058:	4668      	mov	r0, sp
    e05a:	f7f6 f8a5 	bl	41a8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    e05e:	2800      	cmp	r0, #0
    e060:	d0f7      	beq.n	e052 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0x16>
    e062:	f7f9 f8f1 	bl	7248 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xb0>
    e066:	2000      	movs	r0, #0
    e068:	bd0e      	pop	{r1, r2, r3, pc}

0000e06a <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY>:
    e06a:	b50e      	push	{r1, r2, r3, lr}
    e06c:	4669      	mov	r1, sp
    e06e:	2001      	movs	r0, #1
    e070:	f7fe fe9d 	bl	cdae <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    e074:	b150      	cbz	r0, e08c <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x22>
    e076:	f240 71ae 	movw	r1, #1966	; 0x7ae
    e07a:	2030      	movs	r0, #48	; 0x30
    e07c:	f7f5 fe42 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e080:	9802      	ldr	r0, [sp, #8]
    e082:	f890 00c8 	ldrb.w	r0, [r0, #200]	; 0xc8
    e086:	b108      	cbz	r0, e08c <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x22>
    e088:	2000      	movs	r0, #0
    e08a:	bd0e      	pop	{r1, r2, r3, pc}
    e08c:	4668      	mov	r0, sp
    e08e:	f7f6 f88b 	bl	41a8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    e092:	2800      	cmp	r0, #0
    e094:	d0f4      	beq.n	e080 <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x16>
    e096:	2000      	movs	r0, #0
    e098:	f7fe fe6d 	bl	cd76 <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY>
    e09c:	f080 0001 	eor.w	r0, r0, #1
    e0a0:	bd0e      	pop	{r1, r2, r3, pc}

0000e0a2 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY>:
    e0a2:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    e0a4:	4604      	mov	r4, r0
    e0a6:	f890 00fb 	ldrb.w	r0, [r0, #251]	; 0xfb
    e0aa:	2800      	cmp	r0, #0
    e0ac:	d153      	bne.n	e156 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    e0ae:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    e0b2:	2803      	cmp	r0, #3
    e0b4:	d14f      	bne.n	e156 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    e0b6:	f7fd fcdb 	bl	ba70 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    e0ba:	4601      	mov	r1, r0
    e0bc:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
    e0c0:	f7f3 faae 	bl	1620 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    e0c4:	2800      	cmp	r0, #0
    e0c6:	dd46      	ble.n	e156 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    e0c8:	6861      	ldr	r1, [r4, #4]
    e0ca:	b111      	cbz	r1, e0d2 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x30>
    e0cc:	fbb0 f0f1 	udiv	r0, r0, r1
    e0d0:	e000      	b.n	e0d4 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x32>
    e0d2:	2000      	movs	r0, #0
    e0d4:	f8b4 106c 	ldrh.w	r1, [r4, #108]	; 0x6c
    e0d8:	1c40      	adds	r0, r0, #1
    e0da:	4408      	add	r0, r1
    e0dc:	f8a4 013c 	strh.w	r0, [r4, #316]	; 0x13c
    e0e0:	f8b4 013c 	ldrh.w	r0, [r4, #316]	; 0x13c
    e0e4:	f8b4 10f4 	ldrh.w	r1, [r4, #244]	; 0xf4
    e0e8:	1a08      	subs	r0, r1, r0
    e0ea:	b200      	sxth	r0, r0
    e0ec:	2800      	cmp	r0, #0
    e0ee:	dd32      	ble.n	e156 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    e0f0:	f894 0160 	ldrb.w	r0, [r4, #352]	; 0x160
    e0f4:	f7f3 feec 	bl	1ed0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    e0f8:	2800      	cmp	r0, #0
    e0fa:	d02c      	beq.n	e156 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    e0fc:	2001      	movs	r0, #1
    e0fe:	f884 0141 	strb.w	r0, [r4, #321]	; 0x141
    e102:	f8b4 009e 	ldrh.w	r0, [r4, #158]	; 0x9e
    e106:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
    e10a:	ae01      	add	r6, sp, #4
    e10c:	1a40      	subs	r0, r0, r1
    e10e:	f8b4 106c 	ldrh.w	r1, [r4, #108]	; 0x6c
    e112:	1e40      	subs	r0, r0, #1
    e114:	4408      	add	r0, r1
    e116:	b285      	uxth	r5, r0
    e118:	e017      	b.n	e14a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xa8>
    e11a:	9600      	str	r6, [sp, #0]
    e11c:	f8b4 113c 	ldrh.w	r1, [r4, #316]	; 0x13c
    e120:	2300      	movs	r3, #0
    e122:	2201      	movs	r2, #1
    e124:	4620      	mov	r0, r4
    e126:	f7f9 f9c1 	bl	74ac <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x314>
    e12a:	2800      	cmp	r0, #0
    e12c:	d013      	beq.n	e156 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    e12e:	2801      	cmp	r0, #1
    e130:	d004      	beq.n	e13c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x9a>
    e132:	f240 6115 	movw	r1, #1557	; 0x615
    e136:	2030      	movs	r0, #48	; 0x30
    e138:	f7f5 fde4 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e13c:	f8b4 013c 	ldrh.w	r0, [r4, #316]	; 0x13c
    e140:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    e144:	4408      	add	r0, r1
    e146:	f8a4 013c 	strh.w	r0, [r4, #316]	; 0x13c
    e14a:	f8b4 013c 	ldrh.w	r0, [r4, #316]	; 0x13c
    e14e:	1a28      	subs	r0, r5, r0
    e150:	b200      	sxth	r0, r0
    e152:	2800      	cmp	r0, #0
    e154:	dae1      	bge.n	e11a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x78>
    e156:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    e158:	2000      	movs	r0, #0
    e15a:	4770      	bx	lr
    e15c:	b570      	push	{r4, r5, r6, lr}
    e15e:	4604      	mov	r4, r0
    e160:	2601      	movs	r6, #1
    e162:	f000 f8b3 	bl	e2cc <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x22a>
    e166:	f8a4 00d4 	strh.w	r0, [r4, #212]	; 0xd4
    e16a:	2000      	movs	r0, #0
    e16c:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
    e170:	2001      	movs	r0, #1
    e172:	f884 00d7 	strb.w	r0, [r4, #215]	; 0xd7
    e176:	f894 00bc 	ldrb.w	r0, [r4, #188]	; 0xbc
    e17a:	f104 05cc 	add.w	r5, r4, #204	; 0xcc
    e17e:	b160      	cbz	r0, e19a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xf8>
    e180:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    e184:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
    e188:	f7f3 fa18 	bl	15bc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    e18c:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
    e190:	2100      	movs	r1, #0
    e192:	4628      	mov	r0, r5
    e194:	f7ff f81d 	bl	d1d2 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    e198:	e00f      	b.n	e1ba <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x118>
    e19a:	4620      	mov	r0, r4
    e19c:	f7ff fd0d 	bl	dbba <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    e1a0:	4606      	mov	r6, r0
    e1a2:	4631      	mov	r1, r6
    e1a4:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
    e1a8:	f7f3 fa08 	bl	15bc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    e1ac:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
    e1b0:	4631      	mov	r1, r6
    e1b2:	4628      	mov	r0, r5
    e1b4:	f7ff f80d 	bl	d1d2 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    e1b8:	1c46      	adds	r6, r0, #1
    e1ba:	f8b4 00dc 	ldrh.w	r0, [r4, #220]	; 0xdc
    e1be:	1c41      	adds	r1, r0, #1
    e1c0:	290a      	cmp	r1, #10
    e1c2:	d202      	bcs.n	e1ca <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x128>
    e1c4:	4430      	add	r0, r6
    e1c6:	f8a4 00dc 	strh.w	r0, [r4, #220]	; 0xdc
    e1ca:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
    e1ce:	b130      	cbz	r0, e1de <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x13c>
    e1d0:	f8b4 00dc 	ldrh.w	r0, [r4, #220]	; 0xdc
    e1d4:	1c40      	adds	r0, r0, #1
    e1d6:	280a      	cmp	r0, #10
    e1d8:	d301      	bcc.n	e1de <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x13c>
    e1da:	2002      	movs	r0, #2
    e1dc:	e000      	b.n	e1e0 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x13e>
    e1de:	2003      	movs	r0, #3
    e1e0:	f884 00d6 	strb.w	r0, [r4, #214]	; 0xd6
    e1e4:	2100      	movs	r1, #0
    e1e6:	4620      	mov	r0, r4
    e1e8:	f000 f824 	bl	e234 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x192>
    e1ec:	b130      	cbz	r0, e1fc <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x15a>
    e1ee:	4620      	mov	r0, r4
    e1f0:	f000 f811 	bl	e216 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x174>
    e1f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e1f8:	f7fb bce0 	b.w	9bbc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    e1fc:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
    e200:	4629      	mov	r1, r5
    e202:	f000 f861 	bl	e2c8 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x226>
    e206:	2800      	cmp	r0, #0
    e208:	d104      	bne.n	e214 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x172>
    e20a:	f240 61b6 	movw	r1, #1718	; 0x6b6
    e20e:	2030      	movs	r0, #48	; 0x30
    e210:	f7f5 fd78 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e214:	bd70      	pop	{r4, r5, r6, pc}
    e216:	b510      	push	{r4, lr}
    e218:	4604      	mov	r4, r0
    e21a:	f814 0fb4 	ldrb.w	r0, [r4, #180]!
    e21e:	f7f3 ff73 	bl	2108 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    e222:	2000      	movs	r0, #0
    e224:	7520      	strb	r0, [r4, #20]
    e226:	bd10      	pop	{r4, pc}
    e228:	b510      	push	{r4, lr}
    e22a:	f7ff fcca 	bl	dbc2 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    e22e:	f200 1007 	addw	r0, r0, #263	; 0x107
    e232:	bd10      	pop	{r4, pc}
    e234:	b570      	push	{r4, r5, r6, lr}
    e236:	4604      	mov	r4, r0
    e238:	f890 00e4 	ldrb.w	r0, [r0, #228]	; 0xe4
    e23c:	460d      	mov	r5, r1
    e23e:	b108      	cbz	r0, e244 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1a2>
    e240:	2001      	movs	r0, #1
    e242:	bd70      	pop	{r4, r5, r6, pc}
    e244:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
    e248:	b1a8      	cbz	r0, e276 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1d4>
    e24a:	4620      	mov	r0, r4
    e24c:	f7ff fcb5 	bl	dbba <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    e250:	4405      	add	r5, r0
    e252:	4620      	mov	r0, r4
    e254:	f7ff ffe8 	bl	e228 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x186>
    e258:	1941      	adds	r1, r0, r5
    e25a:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
    e25e:	4288      	cmp	r0, r1
    e260:	d206      	bcs.n	e270 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1ce>
    e262:	2001      	movs	r0, #1
    e264:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
    e268:	4620      	mov	r0, r4
    e26a:	f7ff fd36 	bl	dcda <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    e26e:	e7e7      	b.n	e240 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x19e>
    e270:	1b40      	subs	r0, r0, r5
    e272:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
    e276:	2000      	movs	r0, #0
    e278:	bd70      	pop	{r4, r5, r6, pc}
    e27a:	b510      	push	{r4, lr}
    e27c:	4604      	mov	r4, r0
    e27e:	f890 0063 	ldrb.w	r0, [r0, #99]	; 0x63
    e282:	f000 f94b 	bl	e51c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x47a>
    e286:	4602      	mov	r2, r0
    e288:	4620      	mov	r0, r4
    e28a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e28e:	f240 1117 	movw	r1, #279	; 0x117
    e292:	f7ff bb88 	b.w	d9a6 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    e296:	b510      	push	{r4, lr}
    e298:	f7fc fc50 	bl	ab3c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    e29c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e2a0:	f7f4 b884 	b.w	23ac <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    e2a4:	b570      	push	{r4, r5, r6, lr}
    e2a6:	460c      	mov	r4, r1
    e2a8:	4605      	mov	r5, r0
    e2aa:	f001 fa05 	bl	f6b8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    e2ae:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    e2b2:	4408      	add	r0, r1
    e2b4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    e2b8:	fbb0 f6f1 	udiv	r6, r0, r1
    e2bc:	4628      	mov	r0, r5
    e2be:	f001 f9ed 	bl	f69c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    e2c2:	4430      	add	r0, r6
    e2c4:	4420      	add	r0, r4
    e2c6:	bd70      	pop	{r4, r5, r6, pc}
    e2c8:	f7f3 baec 	b.w	18a4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    e2cc:	b510      	push	{r4, lr}
    e2ce:	4604      	mov	r4, r0
    e2d0:	f7ff fca4 	bl	dc1c <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    e2d4:	b1a0      	cbz	r0, e300 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x25e>
    e2d6:	4620      	mov	r0, r4
    e2d8:	f7ff fc98 	bl	dc0c <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    e2dc:	b918      	cbnz	r0, e2e6 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x244>
    e2de:	4620      	mov	r0, r4
    e2e0:	f7ff fc9e 	bl	dc20 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    e2e4:	b120      	cbz	r0, e2f0 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x24e>
    e2e6:	2449      	movs	r4, #73	; 0x49
    e2e8:	f001 f9a4 	bl	f634 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>
    e2ec:	b928      	cbnz	r0, e2fa <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x258>
    e2ee:	e001      	b.n	e2f4 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x252>
    e2f0:	2442      	movs	r4, #66	; 0x42
    e2f2:	e7f9      	b.n	e2e8 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x246>
    e2f4:	f001 f994 	bl	f620 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>
    e2f8:	b100      	cbz	r0, e2fc <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x25a>
    e2fa:	1de4      	adds	r4, r4, #7
    e2fc:	4620      	mov	r0, r4
    e2fe:	bd10      	pop	{r4, pc}
    e300:	206b      	movs	r0, #107	; 0x6b
    e302:	bd10      	pop	{r4, pc}
    e304:	b570      	push	{r4, r5, r6, lr}
    e306:	4604      	mov	r4, r0
    e308:	f890 00b5 	ldrb.w	r0, [r0, #181]	; 0xb5
    e30c:	2500      	movs	r5, #0
    e30e:	b118      	cbz	r0, e318 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x276>
    e310:	2001      	movs	r0, #1
    e312:	f000 f88a 	bl	e42a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x388>
    e316:	4605      	mov	r5, r0
    e318:	4620      	mov	r0, r4
    e31a:	f7ff fc4e 	bl	dbba <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    e31e:	1941      	adds	r1, r0, r5
    e320:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
    e324:	34cc      	adds	r4, #204	; 0xcc
    e326:	f7f3 f949 	bl	15bc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    e32a:	2600      	movs	r6, #0
    e32c:	60e0      	str	r0, [r4, #12]
    e32e:	f804 6b0b 	strb.w	r6, [r4], #11
    e332:	2001      	movs	r0, #1
    e334:	f804 0901 	strb.w	r0, [r4], #-1
    e338:	2003      	movs	r0, #3
    e33a:	f804 09d6 	strb.w	r0, [r4], #-214
    e33e:	4620      	mov	r0, r4
    e340:	f7ff ffc4 	bl	e2cc <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x22a>
    e344:	f8a4 00d4 	strh.w	r0, [r4, #212]	; 0xd4
    e348:	4629      	mov	r1, r5
    e34a:	4620      	mov	r0, r4
    e34c:	f7ff ff72 	bl	e234 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x192>
    e350:	b930      	cbnz	r0, e360 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2be>
    e352:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
    e356:	f104 01cc 	add.w	r1, r4, #204	; 0xcc
    e35a:	f7ff ffb5 	bl	e2c8 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x226>
    e35e:	b138      	cbz	r0, e370 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2ce>
    e360:	f8a4 60dc 	strh.w	r6, [r4, #220]	; 0xdc
    e364:	f7ff ff97 	bl	e296 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1f4>
    e368:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e36c:	f7fb bc26 	b.w	9bbc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    e370:	f240 7104 	movw	r1, #1796	; 0x704
    e374:	2030      	movs	r0, #48	; 0x30
    e376:	f7f5 fcc5 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e37a:	b510      	push	{r4, lr}
    e37c:	4604      	mov	r4, r0
    e37e:	2000      	movs	r0, #0
    e380:	f884 012c 	strb.w	r0, [r4, #300]	; 0x12c
    e384:	f894 0160 	ldrb.w	r0, [r4, #352]	; 0x160
    e388:	f7f3 febe 	bl	2108 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    e38c:	2020      	movs	r0, #32
    e38e:	f884 0160 	strb.w	r0, [r4, #352]	; 0x160
    e392:	bd10      	pop	{r4, pc}
    e394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e398:	2500      	movs	r5, #0
    e39a:	f880 50bc 	strb.w	r5, [r0, #188]	; 0xbc
    e39e:	f8d0 60d8 	ldr.w	r6, [r0, #216]	; 0xd8
    e3a2:	4688      	mov	r8, r1
    e3a4:	4604      	mov	r4, r0
    e3a6:	f880 50c8 	strb.w	r5, [r0, #200]	; 0xc8
    e3aa:	2701      	movs	r7, #1
    e3ac:	f880 70c9 	strb.w	r7, [r0, #201]	; 0xc9
    e3b0:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
    e3b4:	4639      	mov	r1, r7
    e3b6:	34b4      	adds	r4, #180	; 0xb4
    e3b8:	f7f7 fbb6 	bl	5b28 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    e3bc:	6860      	ldr	r0, [r4, #4]
    e3be:	f8c0 6154 	str.w	r6, [r0, #340]	; 0x154
    e3c2:	6861      	ldr	r1, [r4, #4]
    e3c4:	7820      	ldrb	r0, [r4, #0]
    e3c6:	f881 0160 	strb.w	r0, [r1, #352]	; 0x160
    e3ca:	6861      	ldr	r1, [r4, #4]
    e3cc:	f8c1 8164 	str.w	r8, [r1, #356]	; 0x164
    e3d0:	6860      	ldr	r0, [r4, #4]
    e3d2:	f8c0 6158 	str.w	r6, [r0, #344]	; 0x158
    e3d6:	6864      	ldr	r4, [r4, #4]
    e3d8:	f884 512c 	strb.w	r5, [r4, #300]	; 0x12c
    e3dc:	2300      	movs	r3, #0
    e3de:	f8a4 515c 	strh.w	r5, [r4, #348]	; 0x15c
    e3e2:	461a      	mov	r2, r3
    e3e4:	4619      	mov	r1, r3
    e3e6:	4620      	mov	r0, r4
    e3e8:	9500      	str	r5, [sp, #0]
    e3ea:	f7f9 f85f 	bl	74ac <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x314>
    e3ee:	b120      	cbz	r0, e3fa <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x358>
    e3f0:	f240 212b 	movw	r1, #555	; 0x22b
    e3f4:	2030      	movs	r0, #48	; 0x30
    e3f6:	f7f5 fc85 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e3fa:	f8c4 5128 	str.w	r5, [r4, #296]	; 0x128
    e3fe:	f8c4 5120 	str.w	r5, [r4, #288]	; 0x120
    e402:	f884 712c 	strb.w	r7, [r4, #300]	; 0x12c
    e406:	f8a4 513e 	strh.w	r5, [r4, #318]	; 0x13e
    e40a:	f8a4 513c 	strh.w	r5, [r4, #316]	; 0x13c
    e40e:	f884 5141 	strb.w	r5, [r4, #321]	; 0x141
    e412:	f834 0f6c 	ldrh.w	r0, [r4, #108]!
    e416:	1e40      	subs	r0, r0, #1
    e418:	f824 0bbc 	strh.w	r0, [r4], #188
    e41c:	86e5      	strh	r5, [r4, #54]	; 0x36
    e41e:	f7ff ff3a 	bl	e296 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1f4>
    e422:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e426:	f7fb bbc9 	b.w	9bbc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    e42a:	b508      	push	{r3, lr}
    e42c:	2800      	cmp	r0, #0
    e42e:	f04f 0101 	mov.w	r1, #1
    e432:	4668      	mov	r0, sp
    e434:	d002      	beq.n	e43c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x39a>
    e436:	f7f5 fcfd 	bl	3e34 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    e43a:	e001      	b.n	e440 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x39e>
    e43c:	f7f5 fd08 	bl	3e50 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>
    e440:	f89d 0000 	ldrb.w	r0, [sp]
    e444:	f242 7110 	movw	r1, #10000	; 0x2710
    e448:	0200      	lsls	r0, r0, #8
    e44a:	fbb0 f2f1 	udiv	r2, r0, r1
    e44e:	fb01 0012 	mls	r0, r1, r2, r0
    e452:	bd08      	pop	{r3, pc}
    e454:	b510      	push	{r4, lr}
    e456:	0004      	movs	r4, r0
    e458:	d008      	beq.n	e46c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x3ca>
    e45a:	2909      	cmp	r1, #9
    e45c:	d25c      	bcs.n	e518 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x476>
    e45e:	e8df f001 	tbb	[pc, r1]
    e462:	3607      	.short	0x3607
    e464:	5b3a3e3e 	.word	0x5b3a3e3e
    e468:	00574a43 	.word	0x00574a43
    e46c:	219e      	movs	r1, #158	; 0x9e
    e46e:	e050      	b.n	e512 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x470>
    e470:	2100      	movs	r1, #0
    e472:	f8c4 1168 	str.w	r1, [r4, #360]	; 0x168
    e476:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
    e47a:	4620      	mov	r0, r4
    e47c:	b189      	cbz	r1, e4a2 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x400>
    e47e:	f8b0 213e 	ldrh.w	r2, [r0, #318]	; 0x13e
    e482:	f8b0 106c 	ldrh.w	r1, [r0, #108]	; 0x6c
    e486:	428a      	cmp	r2, r1
    e488:	d106      	bne.n	e498 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x3f6>
    e48a:	f8b0 20f4 	ldrh.w	r2, [r0, #244]	; 0xf4
    e48e:	1a51      	subs	r1, r2, r1
    e490:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
    e494:	4611      	mov	r1, r2
    e496:	e00d      	b.n	e4b4 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x412>
    e498:	1a51      	subs	r1, r2, r1
    e49a:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
    e49e:	b291      	uxth	r1, r2
    e4a0:	e008      	b.n	e4b4 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x412>
    e4a2:	f8b0 113c 	ldrh.w	r1, [r0, #316]	; 0x13c
    e4a6:	f8b0 206c 	ldrh.w	r2, [r0, #108]	; 0x6c
    e4aa:	1a89      	subs	r1, r1, r2
    e4ac:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
    e4b0:	f8b0 113c 	ldrh.w	r1, [r0, #316]	; 0x13c
    e4b4:	f8a0 106c 	strh.w	r1, [r0, #108]	; 0x6c
    e4b8:	f8d0 1150 	ldr.w	r1, [r0, #336]	; 0x150
    e4bc:	f8c0 1154 	str.w	r1, [r0, #340]	; 0x154
    e4c0:	f7f9 fcfa 	bl	7eb8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>
    e4c4:	4620      	mov	r0, r4
    e4c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e4ca:	f7f9 ba5f 	b.w	798c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7f4>
    e4ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e4d2:	f000 b879 	b.w	e5c8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>
    e4d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e4da:	f7fc bcf1 	b.w	aec0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    e4de:	4620      	mov	r0, r4
    e4e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e4e4:	f7f9 ba88 	b.w	79f8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x860>
    e4e8:	2001      	movs	r0, #1
    e4ea:	f7f2 ff95 	bl	1418 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    e4ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e4f2:	f7fe bd15 	b.w	cf20 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
    e4f6:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    e4fa:	2804      	cmp	r0, #4
    e4fc:	d001      	beq.n	e502 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x460>
    e4fe:	21c0      	movs	r1, #192	; 0xc0
    e500:	e007      	b.n	e512 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x470>
    e502:	4620      	mov	r0, r4
    e504:	f7ff ff39 	bl	e37a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2d8>
    e508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e50c:	f7fb bb56 	b.w	9bbc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    e510:	21c9      	movs	r1, #201	; 0xc9
    e512:	2030      	movs	r0, #48	; 0x30
    e514:	f7f5 fbf6 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e518:	21cd      	movs	r1, #205	; 0xcd
    e51a:	e7fa      	b.n	e512 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x470>
    e51c:	b510      	push	{r4, lr}
    e51e:	f001 f8cb 	bl	f6b8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    e522:	f64d 7141 	movw	r1, #57153	; 0xdf41
    e526:	4408      	add	r0, r1
    e528:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    e52c:	fbb0 f0f1 	udiv	r0, r0, r1
    e530:	f500 70ba 	add.w	r0, r0, #372	; 0x174
    e534:	bd10      	pop	{r4, pc}
    e536:	01f4      	.short	0x01f4
    e538:	009600fa 	.word	0x009600fa
    e53c:	004b0064 	.word	0x004b0064
    e540:	001e0032 	.word	0x001e0032
    e544:	000a0014 	.word	0x000a0014
    e548:	00020005 	.word	0x00020005
    e54c:	0001      	.short	0x0001
    e54e:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    e552:	f001 0307 	and.w	r3, r1, #7
    e556:	7802      	ldrb	r2, [r0, #0]
    e558:	2101      	movs	r1, #1
    e55a:	4099      	lsls	r1, r3
    e55c:	438a      	bics	r2, r1
    e55e:	7002      	strb	r2, [r0, #0]
    e560:	4770      	bx	lr

0000e562 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>:
    e562:	b510      	push	{r4, lr}
    e564:	4604      	mov	r4, r0
    e566:	f8d0 0194 	ldr.w	r0, [r0, #404]	; 0x194
    e56a:	6861      	ldr	r1, [r4, #4]
    e56c:	4288      	cmp	r0, r1
    e56e:	d109      	bne.n	e584 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    e570:	f8b4 1198 	ldrh.w	r1, [r4, #408]	; 0x198
    e574:	8922      	ldrh	r2, [r4, #8]
    e576:	4291      	cmp	r1, r2
    e578:	d104      	bne.n	e584 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    e57a:	f8b4 119a 	ldrh.w	r1, [r4, #410]	; 0x19a
    e57e:	8962      	ldrh	r2, [r4, #10]
    e580:	4291      	cmp	r1, r2
    e582:	d013      	beq.n	e5ac <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x4a>
    e584:	8821      	ldrh	r1, [r4, #0]
    e586:	f8a4 11b4 	strh.w	r1, [r4, #436]	; 0x1b4
    e58a:	f7fe fd50 	bl	d02e <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    e58e:	f8a4 01b6 	strh.w	r0, [r4, #438]	; 0x1b6
    e592:	f8b4 0198 	ldrh.w	r0, [r4, #408]	; 0x198
    e596:	f8a4 01b8 	strh.w	r0, [r4, #440]	; 0x1b8
    e59a:	f8b4 019a 	ldrh.w	r0, [r4, #410]	; 0x19a
    e59e:	f8a4 01ba 	strh.w	r0, [r4, #442]	; 0x1ba
    e5a2:	2001      	movs	r0, #1
    e5a4:	f884 01b0 	strb.w	r0, [r4, #432]	; 0x1b0
    e5a8:	f7fb fb08 	bl	9bbc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    e5ac:	2102      	movs	r1, #2
    e5ae:	4620      	mov	r0, r4
    e5b0:	f7f7 faba 	bl	5b28 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    e5b4:	2000      	movs	r0, #0
    e5b6:	f804 0f76 	strb.w	r0, [r4, #118]!
    e5ba:	2003      	movs	r0, #3
    e5bc:	70e0      	strb	r0, [r4, #3]
    e5be:	bd10      	pop	{r4, pc}

0000e5c0 <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
    e5c0:	f7f5 bf60 	b.w	4484 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0000e5c4 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>:
    e5c4:	2000      	movs	r0, #0
    e5c6:	4770      	bx	lr

0000e5c8 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>:
    e5c8:	f7f6 bc2e 	b.w	4e28 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>

0000e5cc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>:
    e5cc:	2100      	movs	r1, #0
    e5ce:	f880 1075 	strb.w	r1, [r0, #117]	; 0x75
    e5d2:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
    e5d6:	f880 1079 	strb.w	r1, [r0, #121]	; 0x79
    e5da:	f890 10fb 	ldrb.w	r1, [r0, #251]	; 0xfb
    e5de:	b109      	cbz	r1, e5e4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x18>
    e5e0:	2102      	movs	r1, #2
    e5e2:	e000      	b.n	e5e6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a>
    e5e4:	2103      	movs	r1, #3
    e5e6:	f7f8 bdd7 	b.w	7198 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    e5ea:	f890 007c 	ldrb.w	r0, [r0, #124]	; 0x7c
    e5ee:	28fe      	cmp	r0, #254	; 0xfe
    e5f0:	d001      	beq.n	e5f6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2a>
    e5f2:	2001      	movs	r0, #1
    e5f4:	4770      	bx	lr
    e5f6:	2000      	movs	r0, #0
    e5f8:	4770      	bx	lr
    e5fa:	b510      	push	{r4, lr}
    e5fc:	2801      	cmp	r0, #1
    e5fe:	d006      	beq.n	e60e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    e600:	2802      	cmp	r0, #2
    e602:	d004      	beq.n	e60e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    e604:	f240 2173 	movw	r1, #627	; 0x273
    e608:	2006      	movs	r0, #6
    e60a:	f7f5 fb7b 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e60e:	bd10      	pop	{r4, pc}
    e610:	2801      	cmp	r0, #1
    e612:	d002      	beq.n	e61a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x4e>
    e614:	2802      	cmp	r0, #2
    e616:	d105      	bne.n	e624 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    e618:	e002      	b.n	e620 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x54>
    e61a:	2901      	cmp	r1, #1
    e61c:	d004      	beq.n	e628 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    e61e:	e001      	b.n	e624 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    e620:	2902      	cmp	r1, #2
    e622:	d001      	beq.n	e628 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    e624:	2000      	movs	r0, #0
    e626:	4770      	bx	lr
    e628:	2001      	movs	r0, #1
    e62a:	4770      	bx	lr
    e62c:	1a40      	subs	r0, r0, r1
    e62e:	b200      	sxth	r0, r0
    e630:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    e634:	4288      	cmp	r0, r1
    e636:	dc01      	bgt.n	e63c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x70>
    e638:	2800      	cmp	r0, #0
    e63a:	dc01      	bgt.n	e640 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x74>
    e63c:	2001      	movs	r0, #1
    e63e:	4770      	bx	lr
    e640:	2000      	movs	r0, #0
    e642:	4770      	bx	lr
    e644:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    e648:	f001 0107 	and.w	r1, r1, #7
    e64c:	7800      	ldrb	r0, [r0, #0]
    e64e:	2201      	movs	r2, #1
    e650:	408a      	lsls	r2, r1
    e652:	4010      	ands	r0, r2
    e654:	40c8      	lsrs	r0, r1
    e656:	4770      	bx	lr
    e658:	b118      	cbz	r0, e662 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x96>
    e65a:	2802      	cmp	r0, #2
    e65c:	d001      	beq.n	e662 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x96>
    e65e:	2001      	movs	r0, #1
    e660:	4770      	bx	lr
    e662:	2000      	movs	r0, #0
    e664:	4770      	bx	lr

0000e666 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
    e666:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    e66a:	7881      	ldrb	r1, [r0, #2]
    e66c:	4604      	mov	r4, r0
    e66e:	291a      	cmp	r1, #26
    e670:	d025      	beq.n	e6be <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x58>
    e672:	dc0e      	bgt.n	e692 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2c>
    e674:	2916      	cmp	r1, #22
    e676:	d22e      	bcs.n	e6d6 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    e678:	e8df f001 	tbb	[pc, r1]
    e67c:	2d2d2d2d 	.word	0x2d2d2d2d
    e680:	2d2d212d 	.word	0x2d2d212d
    e684:	2d2d2d2d 	.word	0x2d2d2d2d
    e688:	2d2d2d2d 	.word	0x2d2d2d2d
    e68c:	212d2d2d 	.word	0x212d2d2d
    e690:	2121      	.short	0x2121
    e692:	292a      	cmp	r1, #42	; 0x2a
    e694:	d01f      	beq.n	e6d6 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    e696:	dc0b      	bgt.n	e6b0 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x4a>
    e698:	f1a1 011e 	sub.w	r1, r1, #30
    e69c:	290c      	cmp	r1, #12
    e69e:	d21a      	bcs.n	e6d6 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    e6a0:	e8df f001 	tbb	[pc, r1]
    e6a4:	19191919 	.word	0x19191919
    e6a8:	19191919 	.word	0x19191919
    e6ac:	0d191919 	.word	0x0d191919
    e6b0:	393a      	subs	r1, #58	; 0x3a
    e6b2:	2904      	cmp	r1, #4
    e6b4:	d20f      	bcs.n	e6d6 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    e6b6:	e8df f001 	tbb	[pc, r1]
    e6ba:	020e      	.short	0x020e
    e6bc:	020e      	.short	0x020e
    e6be:	8820      	ldrh	r0, [r4, #0]
    e6c0:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
    e6c4:	d207      	bcs.n	e6d6 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    e6c6:	2701      	movs	r7, #1
    e6c8:	4669      	mov	r1, sp
    e6ca:	f7fe fc9f 	bl	d00c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    e6ce:	b120      	cbz	r0, e6da <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x74>
    e6d0:	2002      	movs	r0, #2
    e6d2:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    e6d6:	2012      	movs	r0, #18
    e6d8:	e7fb      	b.n	e6d2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    e6da:	9d01      	ldr	r5, [sp, #4]
    e6dc:	4668      	mov	r0, sp
    e6de:	462e      	mov	r6, r5
    e6e0:	f505 75b8 	add.w	r5, r5, #368	; 0x170
    e6e4:	f206 1671 	addw	r6, r6, #369	; 0x171
    e6e8:	f000 fe66 	bl	f3b8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x32e>
    e6ec:	b108      	cbz	r0, e6f2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x8c>
    e6ee:	7828      	ldrb	r0, [r5, #0]
    e6f0:	b108      	cbz	r0, e6f6 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x90>
    e6f2:	200c      	movs	r0, #12
    e6f4:	e7ed      	b.n	e6d2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    e6f6:	702f      	strb	r7, [r5, #0]
    e6f8:	78a0      	ldrb	r0, [r4, #2]
    e6fa:	7030      	strb	r0, [r6, #0]
    e6fc:	4668      	mov	r0, sp
    e6fe:	f7ff f83e 	bl	d77e <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    e702:	2000      	movs	r0, #0
    e704:	e7e5      	b.n	e6d2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>

0000e706 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>:
    e706:	b510      	push	{r4, lr}
    e708:	4604      	mov	r4, r0
    e70a:	7800      	ldrb	r0, [r0, #0]
    e70c:	b118      	cbz	r0, e716 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    e70e:	2801      	cmp	r0, #1
    e710:	d001      	beq.n	e716 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    e712:	2012      	movs	r0, #18
    e714:	bd10      	pop	{r4, pc}
    e716:	f000 fe03 	bl	f320 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x296>
    e71a:	b120      	cbz	r0, e726 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    e71c:	f7f6 ffbe 	bl	569c <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    e720:	b108      	cbz	r0, e726 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    e722:	200c      	movs	r0, #12
    e724:	bd10      	pop	{r4, pc}
    e726:	7820      	ldrb	r0, [r4, #0]
    e728:	f7ff ff96 	bl	e658 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    e72c:	1de2      	adds	r2, r4, #7
    e72e:	f104 0317 	add.w	r3, r4, #23
    e732:	1c61      	adds	r1, r4, #1
    e734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e738:	f7f6 bfe2 	b.w	5700 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>

0000e73c <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    e73c:	b510      	push	{r4, lr}
    e73e:	4604      	mov	r4, r0
    e740:	f000 fecb 	bl	f4da <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x450>
    e744:	b108      	cbz	r0, e74a <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    e746:	200c      	movs	r0, #12
    e748:	bd10      	pop	{r4, pc}
    e74a:	7820      	ldrb	r0, [r4, #0]
    e74c:	b118      	cbz	r0, e756 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    e74e:	2801      	cmp	r0, #1
    e750:	d001      	beq.n	e756 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    e752:	2012      	movs	r0, #18
    e754:	bd10      	pop	{r4, pc}
    e756:	f7ff ff7f 	bl	e658 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    e75a:	1c61      	adds	r1, r4, #1
    e75c:	f7f7 f848 	bl	57f0 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
    e760:	b108      	cbz	r0, e766 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    e762:	2000      	movs	r0, #0
    e764:	bd10      	pop	{r4, pc}
    e766:	2007      	movs	r0, #7
    e768:	bd10      	pop	{r4, pc}

0000e76a <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>:
    e76a:	b510      	push	{r4, lr}
    e76c:	f000 fdd8 	bl	f320 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x296>
    e770:	b120      	cbz	r0, e77c <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    e772:	f7f6 ff93 	bl	569c <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    e776:	b108      	cbz	r0, e77c <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    e778:	200c      	movs	r0, #12
    e77a:	bd10      	pop	{r4, pc}
    e77c:	f7f7 f806 	bl	578c <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>
    e780:	2000      	movs	r0, #0
    e782:	bd10      	pop	{r4, pc}

0000e784 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    e784:	b510      	push	{r4, lr}
    e786:	f000 fea8 	bl	f4da <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x450>
    e78a:	b108      	cbz	r0, e790 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    e78c:	200c      	movs	r0, #12
    e78e:	bd10      	pop	{r4, pc}
    e790:	f7f7 f856 	bl	5840 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
    e794:	2000      	movs	r0, #0
    e796:	bd10      	pop	{r4, pc}

0000e798 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    e798:	b510      	push	{r4, lr}
    e79a:	460b      	mov	r3, r1
    e79c:	2201      	movs	r2, #1
    e79e:	f100 0110 	add.w	r1, r0, #16
    e7a2:	f7fe fc15 	bl	cfd0 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    e7a6:	2000      	movs	r0, #0
    e7a8:	bd10      	pop	{r4, pc}

0000e7aa <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
    e7aa:	b510      	push	{r4, lr}
    e7ac:	8800      	ldrh	r0, [r0, #0]
    e7ae:	2100      	movs	r1, #0
    e7b0:	f7fe faf3 	bl	cd9a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e7b4:	b118      	cbz	r0, e7be <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
    e7b6:	f890 1173 	ldrb.w	r1, [r0, #371]	; 0x173
    e7ba:	b111      	cbz	r1, e7c2 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
    e7bc:	e007      	b.n	e7ce <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
    e7be:	2002      	movs	r0, #2
    e7c0:	bd10      	pop	{r4, pc}
    e7c2:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    e7c6:	2914      	cmp	r1, #20
    e7c8:	d003      	beq.n	e7d2 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    e7ca:	2915      	cmp	r1, #21
    e7cc:	d001      	beq.n	e7d2 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    e7ce:	200c      	movs	r0, #12
    e7d0:	bd10      	pop	{r4, pc}
    e7d2:	2102      	movs	r1, #2
    e7d4:	f880 1173 	strb.w	r1, [r0, #371]	; 0x173
    e7d8:	2000      	movs	r0, #0
    e7da:	bd10      	pop	{r4, pc}

0000e7dc <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>:
    e7dc:	b538      	push	{r3, r4, r5, lr}
    e7de:	4605      	mov	r5, r0
    e7e0:	8800      	ldrh	r0, [r0, #0]
    e7e2:	2100      	movs	r1, #0
    e7e4:	f7fe fad9 	bl	cd9a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e7e8:	0004      	movs	r4, r0
    e7ea:	d003      	beq.n	e7f4 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x18>
    e7ec:	f894 0173 	ldrb.w	r0, [r4, #371]	; 0x173
    e7f0:	b110      	cbz	r0, e7f8 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x1c>
    e7f2:	e010      	b.n	e816 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3a>
    e7f4:	2002      	movs	r0, #2
    e7f6:	bd38      	pop	{r3, r4, r5, pc}
    e7f8:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
    e7fc:	2814      	cmp	r0, #20
    e7fe:	d001      	beq.n	e804 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x28>
    e800:	2815      	cmp	r0, #21
    e802:	d108      	bne.n	e816 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3a>
    e804:	f894 01c4 	ldrb.w	r0, [r4, #452]	; 0x1c4
    e808:	f88d 0000 	strb.w	r0, [sp]
    e80c:	9800      	ldr	r0, [sp, #0]
    e80e:	9000      	str	r0, [sp, #0]
    e810:	f89d 0000 	ldrb.w	r0, [sp]
    e814:	b108      	cbz	r0, e81a <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3e>
    e816:	200c      	movs	r0, #12
    e818:	bd38      	pop	{r3, r4, r5, pc}
    e81a:	2210      	movs	r2, #16
    e81c:	1ca9      	adds	r1, r5, #2
    e81e:	f504 70ba 	add.w	r0, r4, #372	; 0x174
    e822:	f7fd faa5 	bl	bd70 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e826:	2001      	movs	r0, #1
    e828:	f884 0173 	strb.w	r0, [r4, #371]	; 0x173
    e82c:	2000      	movs	r0, #0
    e82e:	bd38      	pop	{r3, r4, r5, pc}

0000e830 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    e830:	b510      	push	{r4, lr}
    e832:	2108      	movs	r1, #8
    e834:	f7f5 fb1a 	bl	3e6c <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    e838:	2000      	movs	r0, #0
    e83a:	bd10      	pop	{r4, pc}

0000e83c <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
    e83c:	b510      	push	{r4, lr}
    e83e:	4604      	mov	r4, r0
    e840:	f000 fdd1 	bl	f3e6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x35c>
    e844:	f7ff f9f0 	bl	dc28 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    e848:	7020      	strb	r0, [r4, #0]
    e84a:	2000      	movs	r0, #0
    e84c:	bd10      	pop	{r4, pc}

0000e84e <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
    e84e:	b510      	push	{r4, lr}
    e850:	4604      	mov	r4, r0
    e852:	f000 fdab 	bl	f3ac <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x322>
    e856:	b140      	cbz	r0, e86a <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A+0x1c>
    e858:	20fb      	movs	r0, #251	; 0xfb
    e85a:	8020      	strh	r0, [r4, #0]
    e85c:	f640 0148 	movw	r1, #2120	; 0x848
    e860:	8061      	strh	r1, [r4, #2]
    e862:	80a0      	strh	r0, [r4, #4]
    e864:	80e1      	strh	r1, [r4, #6]
    e866:	2000      	movs	r0, #0
    e868:	bd10      	pop	{r4, pc}
    e86a:	2001      	movs	r0, #1
    e86c:	bd10      	pop	{r4, pc}

0000e86e <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>:
    e86e:	2108      	movs	r1, #8
    e870:	7001      	strb	r1, [r0, #0]
    e872:	2000      	movs	r0, #0
    e874:	4770      	bx	lr

0000e876 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    e876:	b510      	push	{r4, lr}
    e878:	4604      	mov	r4, r0
    e87a:	20d8      	movs	r0, #216	; 0xd8
    e87c:	7020      	strb	r0, [r4, #0]
    e87e:	f000 fd76 	bl	f36e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2e4>
    e882:	7060      	strb	r0, [r4, #1]
    e884:	2000      	movs	r0, #0
    e886:	bd10      	pop	{r4, pc}

0000e888 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    e888:	2108      	movs	r1, #8
    e88a:	7001      	strb	r1, [r0, #0]
    e88c:	2000      	movs	r0, #0
    e88e:	4770      	bx	lr

0000e890 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>:
    e890:	b510      	push	{r4, lr}
    e892:	4604      	mov	r4, r0
    e894:	7800      	ldrb	r0, [r0, #0]
    e896:	b108      	cbz	r0, e89c <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0xc>
    e898:	2801      	cmp	r0, #1
    e89a:	d110      	bne.n	e8be <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    e89c:	f000 fd40 	bl	f320 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x296>
    e8a0:	b120      	cbz	r0, e8ac <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    e8a2:	f7f6 fefb 	bl	569c <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    e8a6:	b108      	cbz	r0, e8ac <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    e8a8:	200c      	movs	r0, #12
    e8aa:	bd10      	pop	{r4, pc}
    e8ac:	7820      	ldrb	r0, [r4, #0]
    e8ae:	f7ff fed3 	bl	e658 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    e8b2:	1c61      	adds	r1, r4, #1
    e8b4:	f7fe fb72 	bl	cf9c <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>
    e8b8:	b108      	cbz	r0, e8be <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    e8ba:	2000      	movs	r0, #0
    e8bc:	bd10      	pop	{r4, pc}
    e8be:	2012      	movs	r0, #18
    e8c0:	bd10      	pop	{r4, pc}

0000e8c2 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    e8c2:	b510      	push	{r4, lr}
    e8c4:	4604      	mov	r4, r0
    e8c6:	f000 fe08 	bl	f4da <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x450>
    e8ca:	b108      	cbz	r0, e8d0 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    e8cc:	200c      	movs	r0, #12
    e8ce:	bd10      	pop	{r4, pc}
    e8d0:	7820      	ldrb	r0, [r4, #0]
    e8d2:	b108      	cbz	r0, e8d8 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    e8d4:	2801      	cmp	r0, #1
    e8d6:	d107      	bne.n	e8e8 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    e8d8:	f7ff febe 	bl	e658 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    e8dc:	1c61      	adds	r1, r4, #1
    e8de:	f7fe fb6c 	bl	cfba <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
    e8e2:	b108      	cbz	r0, e8e8 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    e8e4:	2000      	movs	r0, #0
    e8e6:	bd10      	pop	{r4, pc}
    e8e8:	2012      	movs	r0, #18
    e8ea:	bd10      	pop	{r4, pc}

0000e8ec <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>:
    e8ec:	b510      	push	{r4, lr}
    e8ee:	4604      	mov	r4, r0
    e8f0:	f000 fd16 	bl	f320 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x296>
    e8f4:	b108      	cbz	r0, e8fa <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0xe>
    e8f6:	200c      	movs	r0, #12
    e8f8:	bd10      	pop	{r4, pc}
    e8fa:	7820      	ldrb	r0, [r4, #0]
    e8fc:	f000 0001 	and.w	r0, r0, #1
    e900:	f7f6 fec6 	bl	5690 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>
    e904:	2000      	movs	r0, #0
    e906:	bd10      	pop	{r4, pc}

0000e908 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
    e908:	b570      	push	{r4, r5, r6, lr}
    e90a:	b086      	sub	sp, #24
    e90c:	4605      	mov	r5, r0
    e90e:	f000 fd6a 	bl	f3e6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x35c>
    e912:	4604      	mov	r4, r0
    e914:	4669      	mov	r1, sp
    e916:	f7ff f99f 	bl	dc58 <sym_RNI25VYXYFKWFPBZMEWKYU7T2AE36PDSHGXVMJI>
    e91a:	b118      	cbz	r0, e924 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I+0x1c>
    e91c:	4669      	mov	r1, sp
    e91e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    e920:	f7fe fa81 	bl	ce26 <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA>
    e924:	2200      	movs	r2, #0
    e926:	a804      	add	r0, sp, #16
    e928:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    e92a:	f7f5 fe4d 	bl	45c8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    e92e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    e932:	e9cd 0100 	strd	r0, r1, [sp]
    e936:	b168      	cbz	r0, e954 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I+0x4c>
    e938:	7829      	ldrb	r1, [r5, #0]
    e93a:	466a      	mov	r2, sp
    e93c:	1c68      	adds	r0, r5, #1
    e93e:	f000 fbf5 	bl	f12c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xa2>
    e942:	0006      	movs	r6, r0
    e944:	d00c      	beq.n	e960 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I+0x58>
    e946:	4669      	mov	r1, sp
    e948:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    e94a:	f7fe fa6c 	bl	ce26 <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA>
    e94e:	4630      	mov	r0, r6
    e950:	b006      	add	sp, #24
    e952:	bd70      	pop	{r4, r5, r6, pc}
    e954:	4669      	mov	r1, sp
    e956:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    e958:	f7fe fa65 	bl	ce26 <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA>
    e95c:	2007      	movs	r0, #7
    e95e:	e7f7      	b.n	e950 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I+0x48>
    e960:	4669      	mov	r1, sp
    e962:	4620      	mov	r0, r4
    e964:	f7ff f98f 	bl	dc86 <sym_DZ4VHVOVANVDVX7ECCNFNRACUFPY2WIUPGGZ27Y>
    e968:	9800      	ldr	r0, [sp, #0]
    e96a:	9003      	str	r0, [sp, #12]
    e96c:	7828      	ldrb	r0, [r5, #0]
    e96e:	f8ad 000a 	strh.w	r0, [sp, #10]
    e972:	2000      	movs	r0, #0
    e974:	f88d 0008 	strb.w	r0, [sp, #8]
    e978:	a802      	add	r0, sp, #8
    e97a:	f000 fa35 	bl	ede8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
    e97e:	e7e7      	b.n	e950 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I+0x48>

0000e980 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
    e980:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    e982:	4605      	mov	r5, r0
    e984:	f000 fd2f 	bl	f3e6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x35c>
    e988:	4606      	mov	r6, r0
    e98a:	7828      	ldrb	r0, [r5, #0]
    e98c:	2400      	movs	r4, #0
    e98e:	b160      	cbz	r0, e9aa <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    e990:	f88d 4000 	strb.w	r4, [sp]
    e994:	2001      	movs	r0, #1
    e996:	f10d 0101 	add.w	r1, sp, #1
    e99a:	f7f6 f875 	bl	4a88 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    e99e:	b120      	cbz	r0, e9aa <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    e9a0:	4668      	mov	r0, sp
    e9a2:	f000 f894 	bl	eace <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>
    e9a6:	2800      	cmp	r0, #0
    e9a8:	d112      	bne.n	e9d0 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    e9aa:	f88d 400c 	strb.w	r4, [sp, #12]
    e9ae:	4630      	mov	r0, r6
    e9b0:	f7ff f930 	bl	dc14 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    e9b4:	b118      	cbz	r0, e9be <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x3e>
    e9b6:	2080      	movs	r0, #128	; 0x80
    e9b8:	f8ad 000d 	strh.w	r0, [sp, #13]
    e9bc:	e001      	b.n	e9c2 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x42>
    e9be:	f8ad 400d 	strh.w	r4, [sp, #13]
    e9c2:	f88d 400f 	strb.w	r4, [sp, #15]
    e9c6:	7828      	ldrb	r0, [r5, #0]
    e9c8:	2801      	cmp	r0, #1
    e9ca:	d003      	beq.n	e9d4 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x54>
    e9cc:	b138      	cbz	r0, e9de <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x5e>
    e9ce:	2012      	movs	r0, #18
    e9d0:	b004      	add	sp, #16
    e9d2:	bd70      	pop	{r4, r5, r6, pc}
    e9d4:	a903      	add	r1, sp, #12
    e9d6:	4630      	mov	r0, r6
    e9d8:	f7fb fa9a 	bl	9f10 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
    e9dc:	e7f8      	b.n	e9d0 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    e9de:	4630      	mov	r0, r6
    e9e0:	f000 fd19 	bl	f416 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x38c>
    e9e4:	e7f4      	b.n	e9d0 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>

0000e9e6 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
    e9e6:	b530      	push	{r4, r5, lr}
    e9e8:	b08b      	sub	sp, #44	; 0x2c
    e9ea:	4604      	mov	r4, r0
    e9ec:	f000 fcfb 	bl	f3e6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x35c>
    e9f0:	4602      	mov	r2, r0
    e9f2:	8860      	ldrh	r0, [r4, #2]
    e9f4:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    e9f8:	d902      	bls.n	ea00 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1a>
    e9fa:	2012      	movs	r0, #18
    e9fc:	b00b      	add	sp, #44	; 0x2c
    e9fe:	bd30      	pop	{r4, r5, pc}
    ea00:	2500      	movs	r5, #0
    ea02:	f88d 5004 	strb.w	r5, [sp, #4]
    ea06:	7921      	ldrb	r1, [r4, #4]
    ea08:	9500      	str	r5, [sp, #0]
    ea0a:	f89d 0000 	ldrb.w	r0, [sp]
    ea0e:	2905      	cmp	r1, #5
    ea10:	f040 0010 	orr.w	r0, r0, #16
    ea14:	f88d 0000 	strb.w	r0, [sp]
    ea18:	d254      	bcs.n	eac4 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xde>
    ea1a:	e8df f001 	tbb	[pc, r1]
    ea1e:	0803      	.short	0x0803
    ea20:	000b1105 	.word	0x000b1105
    ea24:	f040 0001 	orr.w	r0, r0, #1
    ea28:	f040 0002 	orr.w	r0, r0, #2
    ea2c:	e006      	b.n	ea3c <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x56>
    ea2e:	f040 0009 	orr.w	r0, r0, #9
    ea32:	e001      	b.n	ea38 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x52>
    ea34:	f040 0001 	orr.w	r0, r0, #1
    ea38:	f040 0004 	orr.w	r0, r0, #4
    ea3c:	f88d 0000 	strb.w	r0, [sp]
    ea40:	f8bd 0000 	ldrh.w	r0, [sp]
    ea44:	9000      	str	r0, [sp, #0]
    ea46:	f8bd 0000 	ldrh.w	r0, [sp]
    ea4a:	f8ad 0005 	strh.w	r0, [sp, #5]
    ea4e:	8821      	ldrh	r1, [r4, #0]
    ea50:	f8dd 0006 	ldr.w	r0, [sp, #6]
    ea54:	f361 201f 	bfi	r0, r1, #8, #24
    ea58:	f8cd 0006 	str.w	r0, [sp, #6]
    ea5c:	8861      	ldrh	r1, [r4, #2]
    ea5e:	f8dd 0009 	ldr.w	r0, [sp, #9]
    ea62:	f361 201f 	bfi	r0, r1, #8, #24
    ea66:	f8cd 0009 	str.w	r0, [sp, #9]
    ea6a:	7b60      	ldrb	r0, [r4, #13]
    ea6c:	f88d 000d 	strb.w	r0, [sp, #13]
    ea70:	7960      	ldrb	r0, [r4, #5]
    ea72:	f88d 000e 	strb.w	r0, [sp, #14]
    ea76:	79a0      	ldrb	r0, [r4, #6]
    ea78:	f88d 000f 	strb.w	r0, [sp, #15]
    ea7c:	f8d4 0007 	ldr.w	r0, [r4, #7]
    ea80:	9004      	str	r0, [sp, #16]
    ea82:	f8b4 000b 	ldrh.w	r0, [r4, #11]
    ea86:	f8ad 0014 	strh.w	r0, [sp, #20]
    ea8a:	7ba0      	ldrb	r0, [r4, #14]
    ea8c:	f88d 0016 	strb.w	r0, [sp, #22]
    ea90:	207f      	movs	r0, #127	; 0x7f
    ea92:	f88d 0017 	strb.w	r0, [sp, #23]
    ea96:	2001      	movs	r0, #1
    ea98:	f88d 0018 	strb.w	r0, [sp, #24]
    ea9c:	f88d 5019 	strb.w	r5, [sp, #25]
    eaa0:	f88d 001a 	strb.w	r0, [sp, #26]
    eaa4:	f88d 501b 	strb.w	r5, [sp, #27]
    eaa8:	4610      	mov	r0, r2
    eaaa:	f7ff f8cf 	bl	dc4c <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
    eaae:	f88d 001c 	strb.w	r0, [sp, #28]
    eab2:	f88d 501d 	strb.w	r5, [sp, #29]
    eab6:	f88d 501e 	strb.w	r5, [sp, #30]
    eaba:	a909      	add	r1, sp, #36	; 0x24
    eabc:	a801      	add	r0, sp, #4
    eabe:	f000 f8ff 	bl	ecc0 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
    eac2:	e79b      	b.n	e9fc <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x16>
    eac4:	f241 01a9 	movw	r1, #4265	; 0x10a9
    eac8:	2039      	movs	r0, #57	; 0x39
    eaca:	f7f5 f91b 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000eace <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>:
    eace:	b570      	push	{r4, r5, r6, lr}
    ead0:	4604      	mov	r4, r0
    ead2:	7800      	ldrb	r0, [r0, #0]
    ead4:	2101      	movs	r1, #1
    ead6:	f7fe f960 	bl	cd9a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    eada:	0005      	movs	r5, r0
    eadc:	d007      	beq.n	eaee <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x20>
    eade:	f7ff faaa 	bl	e036 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    eae2:	b160      	cbz	r0, eafe <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    eae4:	4628      	mov	r0, r5
    eae6:	f7ff f89b 	bl	dc20 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    eaea:	b110      	cbz	r0, eaf2 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x24>
    eaec:	e005      	b.n	eafa <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x2c>
    eaee:	2042      	movs	r0, #66	; 0x42
    eaf0:	bd70      	pop	{r4, r5, r6, pc}
    eaf2:	4628      	mov	r0, r5
    eaf4:	f7ff f88a 	bl	dc0c <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    eaf8:	b108      	cbz	r0, eafe <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    eafa:	200c      	movs	r0, #12
    eafc:	bd70      	pop	{r4, r5, r6, pc}
    eafe:	1c61      	adds	r1, r4, #1
    eb00:	4628      	mov	r0, r5
    eb02:	f7ff f89b 	bl	dc3c <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>
    eb06:	2000      	movs	r0, #0
    eb08:	bd70      	pop	{r4, r5, r6, pc}

0000eb0a <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
    eb0a:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    eb0c:	460d      	mov	r5, r1
    eb0e:	4604      	mov	r4, r0
    eb10:	f000 fc4c 	bl	f3ac <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x322>
    eb14:	b130      	cbz	r0, eb24 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
    eb16:	88a2      	ldrh	r2, [r4, #4]
    eb18:	f244 2090 	movw	r0, #17040	; 0x4290
    eb1c:	4282      	cmp	r2, r0
    eb1e:	d903      	bls.n	eb28 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1e>
    eb20:	2012      	movs	r0, #18
    eb22:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    eb24:	2001      	movs	r0, #1
    eb26:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    eb28:	f640 0048 	movw	r0, #2120	; 0x848
    eb2c:	4282      	cmp	r2, r0
    eb2e:	d300      	bcc.n	eb32 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x28>
    eb30:	4602      	mov	r2, r0
    eb32:	8820      	ldrh	r0, [r4, #0]
    eb34:	f8ad 0000 	strh.w	r0, [sp]
    eb38:	8860      	ldrh	r0, [r4, #2]
    eb3a:	f8ad 0002 	strh.w	r0, [sp, #2]
    eb3e:	f8ad 2004 	strh.w	r2, [sp, #4]
    eb42:	8860      	ldrh	r0, [r4, #2]
    eb44:	f8ad 0006 	strh.w	r0, [sp, #6]
    eb48:	f8ad 2008 	strh.w	r2, [sp, #8]
    eb4c:	8820      	ldrh	r0, [r4, #0]
    eb4e:	8028      	strh	r0, [r5, #0]
    eb50:	4668      	mov	r0, sp
    eb52:	f7fb faab 	bl	a0ac <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    eb56:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000eb58 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
    eb58:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    eb5a:	4604      	mov	r4, r0
    eb5c:	f7fb fbf6 	bl	a34c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    eb60:	f3c0 2000 	ubfx	r0, r0, #8, #1
    eb64:	b1b0      	cbz	r0, eb94 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3c>
    eb66:	f10d 0007 	add.w	r0, sp, #7
    eb6a:	9000      	str	r0, [sp, #0]
    eb6c:	7922      	ldrb	r2, [r4, #4]
    eb6e:	78e1      	ldrb	r1, [r4, #3]
    eb70:	78a0      	ldrb	r0, [r4, #2]
    eb72:	f10d 0306 	add.w	r3, sp, #6
    eb76:	f000 fc74 	bl	f462 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3d8>
    eb7a:	2800      	cmp	r0, #0
    eb7c:	d109      	bne.n	eb92 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3a>
    eb7e:	8820      	ldrh	r0, [r4, #0]
    eb80:	f8ad 0004 	strh.w	r0, [sp, #4]
    eb84:	f8b4 0005 	ldrh.w	r0, [r4, #5]
    eb88:	f8ad 0008 	strh.w	r0, [sp, #8]
    eb8c:	a801      	add	r0, sp, #4
    eb8e:	f000 f97c 	bl	ee8a <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
    eb92:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    eb94:	2001      	movs	r0, #1
    eb96:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000eb98 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>:
    eb98:	b510      	push	{r4, lr}
    eb9a:	4604      	mov	r4, r0
    eb9c:	f000 fbc0 	bl	f320 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x296>
    eba0:	b120      	cbz	r0, ebac <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    eba2:	f7f6 fd7b 	bl	569c <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    eba6:	b108      	cbz	r0, ebac <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    eba8:	200c      	movs	r0, #12
    ebaa:	bd10      	pop	{r4, pc}
    ebac:	7820      	ldrb	r0, [r4, #0]
    ebae:	f7ff fd53 	bl	e658 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    ebb2:	79e2      	ldrb	r2, [r4, #7]
    ebb4:	1c61      	adds	r1, r4, #1
    ebb6:	f7f6 fd1f 	bl	55f8 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>
    ebba:	b108      	cbz	r0, ebc0 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x28>
    ebbc:	2000      	movs	r0, #0
    ebbe:	bd10      	pop	{r4, pc}
    ebc0:	2002      	movs	r0, #2
    ebc2:	bd10      	pop	{r4, pc}

0000ebc4 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    ebc4:	b510      	push	{r4, lr}
    ebc6:	4604      	mov	r4, r0
    ebc8:	2001      	movs	r0, #1
    ebca:	f000 fa9d 	bl	f108 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x7e>
    ebce:	b128      	cbz	r0, ebdc <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    ebd0:	4621      	mov	r1, r4
    ebd2:	2001      	movs	r0, #1
    ebd4:	f7f5 ff70 	bl	4ab8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    ebd8:	2000      	movs	r0, #0
    ebda:	bd10      	pop	{r4, pc}
    ebdc:	200c      	movs	r0, #12
    ebde:	bd10      	pop	{r4, pc}

0000ebe0 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>:
    ebe0:	b510      	push	{r4, lr}
    ebe2:	8800      	ldrh	r0, [r0, #0]
    ebe4:	f7f6 fde8 	bl	57b8 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>
    ebe8:	b108      	cbz	r0, ebee <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI+0xe>
    ebea:	2000      	movs	r0, #0
    ebec:	bd10      	pop	{r4, pc}
    ebee:	2030      	movs	r0, #48	; 0x30
    ebf0:	bd10      	pop	{r4, pc}

0000ebf2 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
    ebf2:	b530      	push	{r4, r5, lr}
    ebf4:	b087      	sub	sp, #28
    ebf6:	4605      	mov	r5, r0
    ebf8:	f000 fbf5 	bl	f3e6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x35c>
    ebfc:	4604      	mov	r4, r0
    ebfe:	4669      	mov	r1, sp
    ec00:	f7ff f849 	bl	dc96 <sym_CDJCVCA2DPO4EZMIO3E74XFHRHPGT76HYWGJOCA>
    ec04:	b118      	cbz	r0, ec0e <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI+0x1c>
    ec06:	4669      	mov	r1, sp
    ec08:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    ec0a:	f7fe f90c 	bl	ce26 <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA>
    ec0e:	2200      	movs	r2, #0
    ec10:	a805      	add	r0, sp, #20
    ec12:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    ec14:	f7f5 fcd8 	bl	45c8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    ec18:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
    ec1c:	e9cd 0100 	strd	r0, r1, [sp]
    ec20:	7829      	ldrb	r1, [r5, #0]
    ec22:	466a      	mov	r2, sp
    ec24:	1c68      	adds	r0, r5, #1
    ec26:	f000 fa81 	bl	f12c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xa2>
    ec2a:	0005      	movs	r5, r0
    ec2c:	d006      	beq.n	ec3c <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI+0x4a>
    ec2e:	4669      	mov	r1, sp
    ec30:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    ec32:	f7fe f8f8 	bl	ce26 <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA>
    ec36:	4628      	mov	r0, r5
    ec38:	b007      	add	sp, #28
    ec3a:	bd30      	pop	{r4, r5, pc}
    ec3c:	4669      	mov	r1, sp
    ec3e:	4620      	mov	r0, r4
    ec40:	f7ff f840 	bl	dcc4 <sym_VD45NAZNLOGGVVD5JTOGXKZNINHWZNPETQGEFXA>
    ec44:	2000      	movs	r0, #0
    ec46:	f88d 000c 	strb.w	r0, [sp, #12]
    ec4a:	9800      	ldr	r0, [sp, #0]
    ec4c:	9004      	str	r0, [sp, #16]
    ec4e:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    ec52:	f8ad 000e 	strh.w	r0, [sp, #14]
    ec56:	a803      	add	r0, sp, #12
    ec58:	f000 f8ef 	bl	ee3a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
    ec5c:	e7ec      	b.n	ec38 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI+0x46>

0000ec5e <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
    ec5e:	b51c      	push	{r2, r3, r4, lr}
    ec60:	4604      	mov	r4, r0
    ec62:	f000 fba3 	bl	f3ac <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x322>
    ec66:	b178      	cbz	r0, ec88 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y+0x2a>
    ec68:	8820      	ldrh	r0, [r4, #0]
    ec6a:	f8ad 0000 	strh.w	r0, [sp]
    ec6e:	8860      	ldrh	r0, [r4, #2]
    ec70:	f8ad 0002 	strh.w	r0, [sp, #2]
    ec74:	8820      	ldrh	r0, [r4, #0]
    ec76:	f8ad 0004 	strh.w	r0, [sp, #4]
    ec7a:	8860      	ldrh	r0, [r4, #2]
    ec7c:	f8ad 0006 	strh.w	r0, [sp, #6]
    ec80:	4668      	mov	r0, sp
    ec82:	f7fb fa97 	bl	a1b4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2a4>
    ec86:	bd1c      	pop	{r2, r3, r4, pc}
    ec88:	2001      	movs	r0, #1
    ec8a:	bd1c      	pop	{r2, r3, r4, pc}

0000ec8c <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    ec8c:	b510      	push	{r4, lr}
    ec8e:	f7f5 ff37 	bl	4b00 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
    ec92:	2000      	movs	r0, #0
    ec94:	bd10      	pop	{r4, pc}

0000ec96 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
    ec96:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    ec98:	460c      	mov	r4, r1
    ec9a:	4605      	mov	r5, r0
    ec9c:	f000 fb86 	bl	f3ac <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x322>
    eca0:	b160      	cbz	r0, ecbc <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x26>
    eca2:	4669      	mov	r1, sp
    eca4:	4628      	mov	r0, r5
    eca6:	f7fe f9b1 	bl	d00c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ecaa:	2800      	cmp	r0, #0
    ecac:	d105      	bne.n	ecba <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x24>
    ecae:	2100      	movs	r1, #0
    ecb0:	4622      	mov	r2, r4
    ecb2:	9801      	ldr	r0, [sp, #4]
    ecb4:	f000 fafe 	bl	f2b4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x22a>
    ecb8:	2000      	movs	r0, #0
    ecba:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    ecbc:	2001      	movs	r0, #1
    ecbe:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000ecc0 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
    ecc0:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    ecc4:	460f      	mov	r7, r1
    ecc6:	4605      	mov	r5, r0
    ecc8:	7806      	ldrb	r6, [r0, #0]
    ecca:	f000 fa7f 	bl	f1cc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x142>
    ecce:	2800      	cmp	r0, #0
    ecd0:	d10a      	bne.n	ece8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    ecd2:	4628      	mov	r0, r5
    ecd4:	f000 fa5e 	bl	f194 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x10a>
    ecd8:	2800      	cmp	r0, #0
    ecda:	d105      	bne.n	ece8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    ecdc:	2001      	movs	r0, #1
    ecde:	f7f5 fa17 	bl	4110 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    ece2:	4286      	cmp	r6, r0
    ece4:	d302      	bcc.n	ecec <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x2c>
    ece6:	2007      	movs	r0, #7
    ece8:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    ecec:	2101      	movs	r1, #1
    ecee:	4630      	mov	r0, r6
    ecf0:	f7fe f853 	bl	cd9a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ecf4:	0004      	movs	r4, r0
    ecf6:	d004      	beq.n	ed02 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x42>
    ecf8:	f7ff f99d 	bl	e036 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    ecfc:	b158      	cbz	r0, ed16 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x56>
    ecfe:	200c      	movs	r0, #12
    ed00:	e7f2      	b.n	ece8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    ed02:	2200      	movs	r2, #0
    ed04:	2101      	movs	r1, #1
    ed06:	4630      	mov	r0, r6
    ed08:	f7fe f82b 	bl	cd62 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    ed0c:	0004      	movs	r4, r0
    ed0e:	d010      	beq.n	ed32 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x72>
    ed10:	4631      	mov	r1, r6
    ed12:	f7fe ff29 	bl	db68 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    ed16:	4620      	mov	r0, r4
    ed18:	f7fe ff86 	bl	dc28 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    ed1c:	7038      	strb	r0, [r7, #0]
    ed1e:	74e8      	strb	r0, [r5, #19]
    ed20:	4629      	mov	r1, r5
    ed22:	4620      	mov	r0, r4
    ed24:	f7f7 faec 	bl	6300 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
    ed28:	4606      	mov	r6, r0
    ed2a:	7e68      	ldrb	r0, [r5, #25]
    ed2c:	b360      	cbz	r0, ed88 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xc8>
    ed2e:	b12e      	cbz	r6, ed3c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x7c>
    ed30:	e02a      	b.n	ed88 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xc8>
    ed32:	f241 212b 	movw	r1, #4651	; 0x122b
    ed36:	2039      	movs	r0, #57	; 0x39
    ed38:	f7f4 ffe4 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ed3c:	4669      	mov	r1, sp
    ed3e:	4620      	mov	r0, r4
    ed40:	f7fe ff8a 	bl	dc58 <sym_RNI25VYXYFKWFPBZMEWKYU7T2AE36PDSHGXVMJI>
    ed44:	b118      	cbz	r0, ed4e <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x8e>
    ed46:	4669      	mov	r1, sp
    ed48:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    ed4a:	f7fe f86c 	bl	ce26 <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA>
    ed4e:	4669      	mov	r1, sp
    ed50:	4620      	mov	r0, r4
    ed52:	f7fe ffa0 	bl	dc96 <sym_CDJCVCA2DPO4EZMIO3E74XFHRHPGT76HYWGJOCA>
    ed56:	b118      	cbz	r0, ed60 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa0>
    ed58:	4669      	mov	r1, sp
    ed5a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    ed5c:	f7fe f863 	bl	ce26 <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA>
    ed60:	2000      	movs	r0, #0
    ed62:	f8ad 0004 	strh.w	r0, [sp, #4]
    ed66:	9000      	str	r0, [sp, #0]
    ed68:	f8ad 0006 	strh.w	r0, [sp, #6]
    ed6c:	4669      	mov	r1, sp
    ed6e:	4620      	mov	r0, r4
    ed70:	f7fe ff89 	bl	dc86 <sym_DZ4VHVOVANVDVX7ECCNFNRACUFPY2WIUPGGZ27Y>
    ed74:	4669      	mov	r1, sp
    ed76:	4620      	mov	r0, r4
    ed78:	f7fe ffa4 	bl	dcc4 <sym_VD45NAZNLOGGVVD5JTOGXKZNINHWZNPETQGEFXA>
    ed7c:	4620      	mov	r0, r4
    ed7e:	f7fe ff79 	bl	dc74 <sym_6SMKGRHQAIZHR6JTRBTFU3LNEOI457UCNN7L2SY>
    ed82:	4620      	mov	r0, r4
    ed84:	f7fe ff95 	bl	dcb2 <sym_57N4MHGOTN6SE7ESLAUPVT5Z7CNKRRVGNPONZCI>
    ed88:	4630      	mov	r0, r6
    ed8a:	e7ad      	b.n	ece8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>

0000ed8c <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
    ed8c:	b510      	push	{r4, lr}
    ed8e:	4604      	mov	r4, r0
    ed90:	2000      	movs	r0, #0
    ed92:	f000 f9b9 	bl	f108 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x7e>
    ed96:	b128      	cbz	r0, eda4 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
    ed98:	4621      	mov	r1, r4
    ed9a:	2000      	movs	r0, #0
    ed9c:	f7f5 fe8c 	bl	4ab8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    eda0:	2000      	movs	r0, #0
    eda2:	bd10      	pop	{r4, pc}
    eda4:	200c      	movs	r0, #12
    eda6:	bd10      	pop	{r4, pc}

0000eda8 <sym_PYH4UVSHNWZESRWJUJ3ZT676FMQZCLVGBPGE4SY>:
    eda8:	b510      	push	{r4, lr}
    edaa:	4604      	mov	r4, r0
    edac:	f7ff f95d 	bl	e06a <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY>
    edb0:	b120      	cbz	r0, edbc <sym_PYH4UVSHNWZESRWJUJ3ZT676FMQZCLVGBPGE4SY+0x14>
    edb2:	7820      	ldrb	r0, [r4, #0]
    edb4:	f7f8 f9b0 	bl	7118 <sym_24SKLESBEZEAQ7XSDAQVJQD35IVFROKORCGBXPI>
    edb8:	2000      	movs	r0, #0
    edba:	bd10      	pop	{r4, pc}
    edbc:	200c      	movs	r0, #12
    edbe:	bd10      	pop	{r4, pc}

0000edc0 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
    edc0:	b510      	push	{r4, lr}
    edc2:	7800      	ldrb	r0, [r0, #0]
    edc4:	f000 0001 	and.w	r0, r0, #1
    edc8:	f7f8 f9ac 	bl	7124 <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A>
    edcc:	2000      	movs	r0, #0
    edce:	bd10      	pop	{r4, pc}

0000edd0 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
    edd0:	b510      	push	{r4, lr}
    edd2:	4604      	mov	r4, r0
    edd4:	f000 faea 	bl	f3ac <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x322>
    edd8:	b120      	cbz	r0, ede4 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I+0x14>
    edda:	4620      	mov	r0, r4
    eddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ede0:	f7fb b964 	b.w	a0ac <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    ede4:	2001      	movs	r0, #1
    ede6:	bd10      	pop	{r4, pc}

0000ede8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
    ede8:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    edea:	4605      	mov	r5, r0
    edec:	7800      	ldrb	r0, [r0, #0]
    edee:	2101      	movs	r1, #1
    edf0:	f7fd ffd3 	bl	cd9a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    edf4:	0006      	movs	r6, r0
    edf6:	d01e      	beq.n	ee36 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x4e>
    edf8:	2201      	movs	r2, #1
    edfa:	8869      	ldrh	r1, [r5, #2]
    edfc:	f000 f9ab 	bl	f156 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xcc>
    ee00:	2800      	cmp	r0, #0
    ee02:	d117      	bne.n	ee34 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x4c>
    ee04:	4630      	mov	r0, r6
    ee06:	f7fe fece 	bl	dba6 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
    ee0a:	4604      	mov	r4, r0
    ee0c:	8868      	ldrh	r0, [r5, #2]
    ee0e:	42a0      	cmp	r0, r4
    ee10:	d800      	bhi.n	ee14 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x2c>
    ee12:	4604      	mov	r4, r0
    ee14:	4669      	mov	r1, sp
    ee16:	4630      	mov	r0, r6
    ee18:	f7fe ff30 	bl	dc7c <sym_UVJC3XBQQLDGXNDNKXZFSW7F5OWZWJU7FTAZXEI>
    ee1c:	6868      	ldr	r0, [r5, #4]
    ee1e:	9000      	str	r0, [sp, #0]
    ee20:	f8ad 4004 	strh.w	r4, [sp, #4]
    ee24:	4669      	mov	r1, sp
    ee26:	4630      	mov	r0, r6
    ee28:	f7fe ff2d 	bl	dc86 <sym_DZ4VHVOVANVDVX7ECCNFNRACUFPY2WIUPGGZ27Y>
    ee2c:	4630      	mov	r0, r6
    ee2e:	f7fe ff21 	bl	dc74 <sym_6SMKGRHQAIZHR6JTRBTFU3LNEOI457UCNN7L2SY>
    ee32:	2000      	movs	r0, #0
    ee34:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    ee36:	2042      	movs	r0, #66	; 0x42
    ee38:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000ee3a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
    ee3a:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    ee3c:	4604      	mov	r4, r0
    ee3e:	7800      	ldrb	r0, [r0, #0]
    ee40:	2101      	movs	r1, #1
    ee42:	f7fd ffaa 	bl	cd9a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ee46:	0005      	movs	r5, r0
    ee48:	d00b      	beq.n	ee62 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x28>
    ee4a:	2201      	movs	r2, #1
    ee4c:	8861      	ldrh	r1, [r4, #2]
    ee4e:	f000 f982 	bl	f156 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xcc>
    ee52:	2800      	cmp	r0, #0
    ee54:	d106      	bne.n	ee64 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x2a>
    ee56:	8866      	ldrh	r6, [r4, #2]
    ee58:	4628      	mov	r0, r5
    ee5a:	f7fe fee1 	bl	dc20 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    ee5e:	b110      	cbz	r0, ee66 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x2c>
    ee60:	e002      	b.n	ee68 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x2e>
    ee62:	2042      	movs	r0, #66	; 0x42
    ee64:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    ee66:	2600      	movs	r6, #0
    ee68:	4669      	mov	r1, sp
    ee6a:	4628      	mov	r0, r5
    ee6c:	f7fe ff25 	bl	dcba <sym_ECJZL6MVN4B4UZUQDXL2OTZMAL25BOLWE4F7TMI>
    ee70:	6860      	ldr	r0, [r4, #4]
    ee72:	9000      	str	r0, [sp, #0]
    ee74:	f8ad 6004 	strh.w	r6, [sp, #4]
    ee78:	4669      	mov	r1, sp
    ee7a:	4628      	mov	r0, r5
    ee7c:	f7fe ff22 	bl	dcc4 <sym_VD45NAZNLOGGVVD5JTOGXKZNINHWZNPETQGEFXA>
    ee80:	4628      	mov	r0, r5
    ee82:	f7fe ff16 	bl	dcb2 <sym_57N4MHGOTN6SE7ESLAUPVT5Z7CNKRRVGNPONZCI>
    ee86:	2000      	movs	r0, #0
    ee88:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000ee8a <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
    ee8a:	b510      	push	{r4, lr}
    ee8c:	4604      	mov	r4, r0
    ee8e:	8880      	ldrh	r0, [r0, #4]
    ee90:	b128      	cbz	r0, ee9e <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    ee92:	2801      	cmp	r0, #1
    ee94:	d003      	beq.n	ee9e <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    ee96:	2802      	cmp	r0, #2
    ee98:	d001      	beq.n	ee9e <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    ee9a:	2012      	movs	r0, #18
    ee9c:	bd10      	pop	{r4, pc}
    ee9e:	78e0      	ldrb	r0, [r4, #3]
    eea0:	f000 f9e5 	bl	f26e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e4>
    eea4:	b148      	cbz	r0, eeba <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    eea6:	78a0      	ldrb	r0, [r4, #2]
    eea8:	f000 f9e1 	bl	f26e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e4>
    eeac:	b128      	cbz	r0, eeba <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    eeae:	4620      	mov	r0, r4
    eeb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eeb4:	2101      	movs	r1, #1
    eeb6:	f000 b883 	b.w	efc0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    eeba:	2011      	movs	r0, #17
    eebc:	bd10      	pop	{r4, pc}

0000eebe <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
    eebe:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    eec0:	460c      	mov	r4, r1
    eec2:	4605      	mov	r5, r0
    eec4:	8800      	ldrh	r0, [r0, #0]
    eec6:	4669      	mov	r1, sp
    eec8:	f7fe f8a0 	bl	d00c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    eecc:	2800      	cmp	r0, #0
    eece:	d106      	bne.n	eede <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
    eed0:	9801      	ldr	r0, [sp, #4]
    eed2:	8829      	ldrh	r1, [r5, #0]
    eed4:	8021      	strh	r1, [r4, #0]
    eed6:	f8b0 0098 	ldrh.w	r0, [r0, #152]	; 0x98
    eeda:	8060      	strh	r0, [r4, #2]
    eedc:	2000      	movs	r0, #0
    eede:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000eee0 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
    eee0:	b510      	push	{r4, lr}
    eee2:	4604      	mov	r4, r0
    eee4:	4601      	mov	r1, r0
    eee6:	2000      	movs	r0, #0
    eee8:	f7f5 fdce 	bl	4a88 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    eeec:	b910      	cbnz	r0, eef4 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
    eeee:	2000      	movs	r0, #0
    eef0:	6020      	str	r0, [r4, #0]
    eef2:	80a0      	strh	r0, [r4, #4]
    eef4:	2000      	movs	r0, #0
    eef6:	bd10      	pop	{r4, pc}

0000eef8 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
    eef8:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    eefa:	8800      	ldrh	r0, [r0, #0]
    eefc:	4669      	mov	r1, sp
    eefe:	f7fe f885 	bl	d00c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ef02:	b958      	cbnz	r0, ef1c <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x24>
    ef04:	4668      	mov	r0, sp
    ef06:	f000 fa57 	bl	f3b8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x32e>
    ef0a:	b138      	cbz	r0, ef1c <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x24>
    ef0c:	9c01      	ldr	r4, [sp, #4]
    ef0e:	f894 11ac 	ldrb.w	r1, [r4, #428]	; 0x1ac
    ef12:	f504 70d6 	add.w	r0, r4, #428	; 0x1ac
    ef16:	3468      	adds	r4, #104	; 0x68
    ef18:	b929      	cbnz	r1, ef26 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2e>
    ef1a:	e001      	b.n	ef20 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
    ef1c:	2002      	movs	r0, #2
    ef1e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    ef20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    ef24:	b109      	cbz	r1, ef2a <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x32>
    ef26:	203a      	movs	r0, #58	; 0x3a
    ef28:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    ef2a:	f894 1046 	ldrb.w	r1, [r4, #70]	; 0x46
    ef2e:	f04f 0501 	mov.w	r5, #1
    ef32:	0789      	lsls	r1, r1, #30
    ef34:	d103      	bne.n	ef3e <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x46>
    ef36:	7005      	strb	r5, [r0, #0]
    ef38:	4668      	mov	r0, sp
    ef3a:	f7fe fc20 	bl	d77e <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    ef3e:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
    ef42:	2000      	movs	r0, #0
    ef44:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000ef46 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
    ef46:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    ef48:	460c      	mov	r4, r1
    ef4a:	4605      	mov	r5, r0
    ef4c:	8800      	ldrh	r0, [r0, #0]
    ef4e:	4669      	mov	r1, sp
    ef50:	f7fe f85c 	bl	d00c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ef54:	b108      	cbz	r0, ef5a <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
    ef56:	2002      	movs	r0, #2
    ef58:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    ef5a:	78a8      	ldrb	r0, [r5, #2]
    ef5c:	b130      	cbz	r0, ef6c <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x26>
    ef5e:	f000 fa06 	bl	f36e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2e4>
    ef62:	70a0      	strb	r0, [r4, #2]
    ef64:	8828      	ldrh	r0, [r5, #0]
    ef66:	8020      	strh	r0, [r4, #0]
    ef68:	2000      	movs	r0, #0
    ef6a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    ef6c:	9801      	ldr	r0, [sp, #4]
    ef6e:	f890 0066 	ldrb.w	r0, [r0, #102]	; 0x66
    ef72:	e7f6      	b.n	ef62 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

0000ef74 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
    ef74:	b510      	push	{r4, lr}
    ef76:	f7fb f957 	bl	a228 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    ef7a:	2000      	movs	r0, #0
    ef7c:	bd10      	pop	{r4, pc}

0000ef7e <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
    ef7e:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    ef82:	4604      	mov	r4, r0
    ef84:	8840      	ldrh	r0, [r0, #2]
    ef86:	460d      	mov	r5, r1
    ef88:	b1b0      	cbz	r0, efb8 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3a>
    ef8a:	8820      	ldrh	r0, [r4, #0]
    ef8c:	4669      	mov	r1, sp
    ef8e:	f7fe f83d 	bl	d00c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ef92:	2800      	cmp	r0, #0
    ef94:	d10e      	bne.n	efb4 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x36>
    ef96:	8820      	ldrh	r0, [r4, #0]
    ef98:	8028      	strh	r0, [r5, #0]
    ef9a:	9e01      	ldr	r6, [sp, #4]
    ef9c:	1d35      	adds	r5, r6, #4
    ef9e:	3668      	adds	r6, #104	; 0x68
    efa0:	682f      	ldr	r7, [r5, #0]
    efa2:	8862      	ldrh	r2, [r4, #2]
    efa4:	4639      	mov	r1, r7
    efa6:	4630      	mov	r0, r6
    efa8:	f7fe f970 	bl	d28c <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
    efac:	6828      	ldr	r0, [r5, #0]
    efae:	42b8      	cmp	r0, r7
    efb0:	d1f6      	bne.n	efa0 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x22>
    efb2:	2000      	movs	r0, #0
    efb4:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    efb8:	2012      	movs	r0, #18
    efba:	e7fb      	b.n	efb4 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x36>

0000efbc <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
    efbc:	f7fa bef4 	b.w	9da8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

0000efc0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
    efc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    efc4:	b086      	sub	sp, #24
    efc6:	468a      	mov	sl, r1
    efc8:	4606      	mov	r6, r0
    efca:	8800      	ldrh	r0, [r0, #0]
    efcc:	a901      	add	r1, sp, #4
    efce:	f7fe f81d 	bl	d00c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    efd2:	2800      	cmp	r0, #0
    efd4:	d138      	bne.n	f048 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>
    efd6:	9802      	ldr	r0, [sp, #8]
    efd8:	f04f 0800 	mov.w	r8, #0
    efdc:	4601      	mov	r1, r0
    efde:	4689      	mov	r9, r1
    efe0:	f890 11f4 	ldrb.w	r1, [r0, #500]	; 0x1f4
    efe4:	f88d 1000 	strb.w	r1, [sp]
    efe8:	9900      	ldr	r1, [sp, #0]
    efea:	9100      	str	r1, [sp, #0]
    efec:	f89d 5000 	ldrb.w	r5, [sp]
    eff0:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    eff4:	3068      	adds	r0, #104	; 0x68
    eff6:	2921      	cmp	r1, #33	; 0x21
    eff8:	d100      	bne.n	effc <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3c>
    effa:	b13d      	cbz	r5, f00c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4c>
    effc:	2400      	movs	r4, #0
    effe:	304c      	adds	r0, #76	; 0x4c
    f000:	2108      	movs	r1, #8
    f002:	4607      	mov	r7, r0
    f004:	f7ff fb1e 	bl	e644 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    f008:	b110      	cbz	r0, f010 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x50>
    f00a:	e007      	b.n	f01c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
    f00c:	2401      	movs	r4, #1
    f00e:	e7f6      	b.n	effe <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3e>
    f010:	210b      	movs	r1, #11
    f012:	4638      	mov	r0, r7
    f014:	f7ff fb16 	bl	e644 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    f018:	b900      	cbnz	r0, f01c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
    f01a:	b1a4      	cbz	r4, f046 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x86>
    f01c:	a804      	add	r0, sp, #16
    f01e:	9000      	str	r0, [sp, #0]
    f020:	f89d 0004 	ldrb.w	r0, [sp, #4]
    f024:	ab03      	add	r3, sp, #12
    f026:	4632      	mov	r2, r6
    f028:	4649      	mov	r1, r9
    f02a:	f000 f980 	bl	f32e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2a4>
    f02e:	0007      	movs	r7, r0
    f030:	d10a      	bne.n	f048 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>
    f032:	f89d 0004 	ldrb.w	r0, [sp, #4]
    f036:	9c02      	ldr	r4, [sp, #8]
    f038:	b148      	cbz	r0, f04e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
    f03a:	f504 74d3 	add.w	r4, r4, #422	; 0x1a6
    f03e:	2001      	movs	r0, #1
    f040:	7060      	strb	r0, [r4, #1]
    f042:	b94d      	cbnz	r5, f058 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x98>
    f044:	e006      	b.n	f054 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x94>
    f046:	201a      	movs	r0, #26
    f048:	b006      	add	sp, #24
    f04a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f04e:	f504 7495 	add.w	r4, r4, #298	; 0x12a
    f052:	e7f4      	b.n	f03e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x7e>
    f054:	7820      	ldrb	r0, [r4, #0]
    f056:	b108      	cbz	r0, f05c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9c>
    f058:	273a      	movs	r7, #58	; 0x3a
    f05a:	e012      	b.n	f082 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xc2>
    f05c:	f884 a000 	strb.w	sl, [r4]
    f060:	f89d 000c 	ldrb.w	r0, [sp, #12]
    f064:	70a0      	strb	r0, [r4, #2]
    f066:	f89d 1010 	ldrb.w	r1, [sp, #16]
    f06a:	70e1      	strb	r1, [r4, #3]
    f06c:	f88d 0000 	strb.w	r0, [sp]
    f070:	f88d 1001 	strb.w	r1, [sp, #1]
    f074:	88b0      	ldrh	r0, [r6, #4]
    f076:	f8ad 0002 	strh.w	r0, [sp, #2]
    f07a:	4669      	mov	r1, sp
    f07c:	4648      	mov	r0, r9
    f07e:	f7fe f884 	bl	d18a <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    f082:	f884 8001 	strb.w	r8, [r4, #1]
    f086:	4638      	mov	r0, r7
    f088:	e7de      	b.n	f048 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>

0000f08a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
    f08a:	b510      	push	{r4, lr}
    f08c:	2008      	movs	r0, #8
    f08e:	f7fb f953 	bl	a338 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    f092:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f096:	f7f8 bef7 	b.w	7e88 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>
    f09a:	f44f 71a4 	mov.w	r1, #328	; 0x148
    f09e:	4288      	cmp	r0, r1
    f0a0:	d303      	bcc.n	f0aa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20>
    f0a2:	f640 0148 	movw	r1, #2120	; 0x848
    f0a6:	4288      	cmp	r0, r1
    f0a8:	d300      	bcc.n	f0ac <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x22>
    f0aa:	4608      	mov	r0, r1
    f0ac:	4770      	bx	lr
    f0ae:	07c1      	lsls	r1, r0, #31
    f0b0:	d001      	beq.n	f0b6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c>
    f0b2:	2001      	movs	r0, #1
    f0b4:	4770      	bx	lr
    f0b6:	0780      	lsls	r0, r0, #30
    f0b8:	d501      	bpl.n	f0be <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x34>
    f0ba:	2002      	movs	r0, #2
    f0bc:	4770      	bx	lr
    f0be:	2000      	movs	r0, #0
    f0c0:	4770      	bx	lr
    f0c2:	b510      	push	{r4, lr}
    f0c4:	2801      	cmp	r0, #1
    f0c6:	d006      	beq.n	f0d6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4c>
    f0c8:	2802      	cmp	r0, #2
    f0ca:	d004      	beq.n	f0d6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4c>
    f0cc:	f240 2173 	movw	r1, #627	; 0x273
    f0d0:	2006      	movs	r0, #6
    f0d2:	f7f4 fe17 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f0d6:	bd10      	pop	{r4, pc}
    f0d8:	b50e      	push	{r1, r2, r3, lr}
    f0da:	4669      	mov	r1, sp
    f0dc:	2001      	movs	r0, #1
    f0de:	f7fd fe66 	bl	cdae <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    f0e2:	b150      	cbz	r0, f0fa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x70>
    f0e4:	f240 1131 	movw	r1, #305	; 0x131
    f0e8:	2039      	movs	r0, #57	; 0x39
    f0ea:	f7f4 fe0b 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f0ee:	9802      	ldr	r0, [sp, #8]
    f0f0:	f7fe ffa1 	bl	e036 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    f0f4:	b108      	cbz	r0, f0fa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x70>
    f0f6:	2001      	movs	r0, #1
    f0f8:	bd0e      	pop	{r1, r2, r3, pc}
    f0fa:	4668      	mov	r0, sp
    f0fc:	f7f5 f854 	bl	41a8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    f100:	2800      	cmp	r0, #0
    f102:	d0f4      	beq.n	f0ee <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x64>
    f104:	2000      	movs	r0, #0
    f106:	bd0e      	pop	{r1, r2, r3, pc}
    f108:	b510      	push	{r4, lr}
    f10a:	f7ff ffe5 	bl	f0d8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4e>
    f10e:	b158      	cbz	r0, f128 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9e>
    f110:	f000 f969 	bl	f3e6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x35c>
    f114:	4604      	mov	r4, r0
    f116:	f7fe fd83 	bl	dc20 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    f11a:	b918      	cbnz	r0, f124 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9a>
    f11c:	4620      	mov	r0, r4
    f11e:	f7fe fd75 	bl	dc0c <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    f122:	b108      	cbz	r0, f128 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9e>
    f124:	2000      	movs	r0, #0
    f126:	bd10      	pop	{r4, pc}
    f128:	2001      	movs	r0, #1
    f12a:	bd10      	pop	{r4, pc}
    f12c:	b570      	push	{r4, r5, r6, lr}
    f12e:	460d      	mov	r5, r1
    f130:	4614      	mov	r4, r2
    f132:	4601      	mov	r1, r0
    f134:	8890      	ldrh	r0, [r2, #4]
    f136:	88e3      	ldrh	r3, [r4, #6]
    f138:	1942      	adds	r2, r0, r5
    f13a:	429a      	cmp	r2, r3
    f13c:	d901      	bls.n	f142 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xb8>
    f13e:	2007      	movs	r0, #7
    f140:	bd70      	pop	{r4, r5, r6, pc}
    f142:	6822      	ldr	r2, [r4, #0]
    f144:	4410      	add	r0, r2
    f146:	462a      	mov	r2, r5
    f148:	f7fc fe12 	bl	bd70 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f14c:	88a0      	ldrh	r0, [r4, #4]
    f14e:	4428      	add	r0, r5
    f150:	80a0      	strh	r0, [r4, #4]
    f152:	2000      	movs	r0, #0
    f154:	bd70      	pop	{r4, r5, r6, pc}
    f156:	b570      	push	{r4, r5, r6, lr}
    f158:	460c      	mov	r4, r1
    f15a:	4605      	mov	r5, r0
    f15c:	b112      	cbz	r2, f164 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xda>
    f15e:	291f      	cmp	r1, #31
    f160:	d807      	bhi.n	f172 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xe8>
    f162:	e011      	b.n	f188 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xfe>
    f164:	2cff      	cmp	r4, #255	; 0xff
    f166:	d804      	bhi.n	f172 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xe8>
    f168:	f7fe fd58 	bl	dc1c <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    f16c:	b118      	cbz	r0, f176 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xec>
    f16e:	2c1f      	cmp	r4, #31
    f170:	d901      	bls.n	f176 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xec>
    f172:	2012      	movs	r0, #18
    f174:	bd70      	pop	{r4, r5, r6, pc}
    f176:	4628      	mov	r0, r5
    f178:	f7fe fd59 	bl	dc2e <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    f17c:	b130      	cbz	r0, f18c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x102>
    f17e:	4621      	mov	r1, r4
    f180:	4628      	mov	r0, r5
    f182:	f7fe fd1c 	bl	dbbe <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
    f186:	b118      	cbz	r0, f190 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x106>
    f188:	2000      	movs	r0, #0
    f18a:	bd70      	pop	{r4, r5, r6, pc}
    f18c:	2042      	movs	r0, #66	; 0x42
    f18e:	bd70      	pop	{r4, r5, r6, pc}
    f190:	2045      	movs	r0, #69	; 0x45
    f192:	bd70      	pop	{r4, r5, r6, pc}
    f194:	b510      	push	{r4, lr}
    f196:	4604      	mov	r4, r0
    f198:	7840      	ldrb	r0, [r0, #1]
    f19a:	06c1      	lsls	r1, r0, #27
    f19c:	d512      	bpl.n	f1c4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x13a>
    f19e:	07c0      	lsls	r0, r0, #31
    f1a0:	d00b      	beq.n	f1ba <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x130>
    f1a2:	f7fb f87f 	bl	a2a4 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
    f1a6:	b168      	cbz	r0, f1c4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x13a>
    f1a8:	7860      	ldrb	r0, [r4, #1]
    f1aa:	06c1      	lsls	r1, r0, #27
    f1ac:	d405      	bmi.n	f1ba <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x130>
    f1ae:	0700      	lsls	r0, r0, #28
    f1b0:	d503      	bpl.n	f1ba <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x130>
    f1b2:	7d20      	ldrb	r0, [r4, #20]
    f1b4:	2802      	cmp	r0, #2
    f1b6:	d105      	bne.n	f1c4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x13a>
    f1b8:	e006      	b.n	f1c8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x13e>
    f1ba:	7d20      	ldrb	r0, [r4, #20]
    f1bc:	2802      	cmp	r0, #2
    f1be:	d003      	beq.n	f1c8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x13e>
    f1c0:	7ea0      	ldrb	r0, [r4, #26]
    f1c2:	b108      	cbz	r0, f1c8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x13e>
    f1c4:	2011      	movs	r0, #17
    f1c6:	bd10      	pop	{r4, pc}
    f1c8:	2000      	movs	r0, #0
    f1ca:	bd10      	pop	{r4, pc}
    f1cc:	b538      	push	{r3, r4, r5, lr}
    f1ce:	4604      	mov	r4, r0
    f1d0:	7800      	ldrb	r0, [r0, #0]
    f1d2:	28ef      	cmp	r0, #239	; 0xef
    f1d4:	d847      	bhi.n	f266 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1dc>
    f1d6:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    f1da:	f8ad 0000 	strh.w	r0, [sp]
    f1de:	9800      	ldr	r0, [sp, #0]
    f1e0:	f000 f956 	bl	f490 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x406>
    f1e4:	b3c0      	cbz	r0, f258 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ce>
    f1e6:	7861      	ldrb	r1, [r4, #1]
    f1e8:	0708      	lsls	r0, r1, #28
    f1ea:	d40f      	bmi.n	f20c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x182>
    f1ec:	f8d4 2002 	ldr.w	r2, [r4, #2]
    f1f0:	f8d4 0005 	ldr.w	r0, [r4, #5]
    f1f4:	0a13      	lsrs	r3, r2, #8
    f1f6:	ebb3 2f10 	cmp.w	r3, r0, lsr #8
    f1fa:	d834      	bhi.n	f266 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1dc>
    f1fc:	2320      	movs	r3, #32
    f1fe:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
    f202:	d830      	bhi.n	f266 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1dc>
    f204:	025a      	lsls	r2, r3, #9
    f206:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
    f20a:	d32c      	bcc.n	f266 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1dc>
    f20c:	7a60      	ldrb	r0, [r4, #9]
    f20e:	b318      	cbz	r0, f258 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ce>
    f210:	2807      	cmp	r0, #7
    f212:	d828      	bhi.n	f266 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1dc>
    f214:	7aa0      	ldrb	r0, [r4, #10]
    f216:	b128      	cbz	r0, f224 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x19a>
    f218:	2801      	cmp	r0, #1
    f21a:	d003      	beq.n	f224 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x19a>
    f21c:	2802      	cmp	r0, #2
    f21e:	d001      	beq.n	f224 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x19a>
    f220:	2803      	cmp	r0, #3
    f222:	d120      	bne.n	f266 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1dc>
    f224:	074a      	lsls	r2, r1, #29
    f226:	d403      	bmi.n	f230 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1a6>
    f228:	2802      	cmp	r0, #2
    f22a:	d001      	beq.n	f230 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1a6>
    f22c:	2803      	cmp	r0, #3
    f22e:	d105      	bne.n	f23c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1b2>
    f230:	7ae0      	ldrb	r0, [r4, #11]
    f232:	b108      	cbz	r0, f238 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
    f234:	2801      	cmp	r0, #1
    f236:	d116      	bne.n	f266 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1dc>
    f238:	0748      	lsls	r0, r1, #29
    f23a:	d407      	bmi.n	f24c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c2>
    f23c:	7ca0      	ldrb	r0, [r4, #18]
    f23e:	b128      	cbz	r0, f24c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c2>
    f240:	2801      	cmp	r0, #1
    f242:	d003      	beq.n	f24c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c2>
    f244:	2802      	cmp	r0, #2
    f246:	d001      	beq.n	f24c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c2>
    f248:	2803      	cmp	r0, #3
    f24a:	d10c      	bne.n	f266 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1dc>
    f24c:	06c8      	lsls	r0, r1, #27
    f24e:	7d20      	ldrb	r0, [r4, #20]
    f250:	d503      	bpl.n	f25a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
    f252:	2801      	cmp	r0, #1
    f254:	d107      	bne.n	f266 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1dc>
    f256:	e002      	b.n	f25e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d4>
    f258:	e005      	b.n	f266 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1dc>
    f25a:	2802      	cmp	r0, #2
    f25c:	d003      	beq.n	f266 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1dc>
    f25e:	7e20      	ldrb	r0, [r4, #24]
    f260:	b118      	cbz	r0, f26a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e0>
    f262:	2801      	cmp	r0, #1
    f264:	d001      	beq.n	f26a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e0>
    f266:	2012      	movs	r0, #18
    f268:	bd38      	pop	{r3, r4, r5, pc}
    f26a:	2000      	movs	r0, #0
    f26c:	bd38      	pop	{r3, r4, r5, pc}
    f26e:	b510      	push	{r4, lr}
    f270:	0004      	movs	r4, r0
    f272:	d005      	beq.n	f280 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f6>
    f274:	f7fb f870 	bl	a358 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f278:	4384      	bics	r4, r0
    f27a:	d001      	beq.n	f280 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f6>
    f27c:	2000      	movs	r0, #0
    f27e:	bd10      	pop	{r4, pc}
    f280:	2001      	movs	r0, #1
    f282:	bd10      	pop	{r4, pc}
    f284:	28fb      	cmp	r0, #251	; 0xfb
    f286:	d803      	bhi.n	f290 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x206>
    f288:	f640 0048 	movw	r0, #2120	; 0x848
    f28c:	4281      	cmp	r1, r0
    f28e:	d901      	bls.n	f294 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20a>
    f290:	2011      	movs	r0, #17
    f292:	4770      	bx	lr
    f294:	2000      	movs	r0, #0
    f296:	4770      	bx	lr
    f298:	381b      	subs	r0, #27
    f29a:	28e1      	cmp	r0, #225	; 0xe1
    f29c:	d206      	bcs.n	f2ac <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x222>
    f29e:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
    f2a2:	d303      	bcc.n	f2ac <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x222>
    f2a4:	f244 2090 	movw	r0, #17040	; 0x4290
    f2a8:	4281      	cmp	r1, r0
    f2aa:	d901      	bls.n	f2b0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x226>
    f2ac:	2012      	movs	r0, #18
    f2ae:	4770      	bx	lr
    f2b0:	2000      	movs	r0, #0
    f2b2:	4770      	bx	lr
    f2b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f2b8:	4606      	mov	r6, r0
    f2ba:	f8b0 704a 	ldrh.w	r7, [r0, #74]	; 0x4a
    f2be:	f8b0 404c 	ldrh.w	r4, [r0, #76]	; 0x4c
    f2c2:	4615      	mov	r5, r2
    f2c4:	3024      	adds	r0, #36	; 0x24
    f2c6:	f7f7 ff33 	bl	7130 <sym_2XQD73Z3W4NFFHWTLZCIS7IQ3ACFNR3KKEBKCJQ>
    f2ca:	4680      	mov	r8, r0
    f2cc:	2102      	movs	r1, #2
    f2ce:	f7fd ff2d 	bl	d12c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    f2d2:	4287      	cmp	r7, r0
    f2d4:	d200      	bcs.n	f2d8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24e>
    f2d6:	4638      	mov	r0, r7
    f2d8:	4607      	mov	r7, r0
    f2da:	2102      	movs	r1, #2
    f2dc:	4640      	mov	r0, r8
    f2de:	f7fd ff25 	bl	d12c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    f2e2:	4284      	cmp	r4, r0
    f2e4:	d200      	bcs.n	f2e8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x25e>
    f2e6:	4620      	mov	r0, r4
    f2e8:	8831      	ldrh	r1, [r6, #0]
    f2ea:	8029      	strh	r1, [r5, #0]
    f2ec:	2f1b      	cmp	r7, #27
    f2ee:	d913      	bls.n	f318 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x28e>
    f2f0:	2ffb      	cmp	r7, #251	; 0xfb
    f2f2:	d300      	bcc.n	f2f6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x26c>
    f2f4:	27fb      	movs	r7, #251	; 0xfb
    f2f6:	806f      	strh	r7, [r5, #2]
    f2f8:	281b      	cmp	r0, #27
    f2fa:	d90f      	bls.n	f31c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x292>
    f2fc:	28fb      	cmp	r0, #251	; 0xfb
    f2fe:	d300      	bcc.n	f302 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x278>
    f300:	20fb      	movs	r0, #251	; 0xfb
    f302:	80e8      	strh	r0, [r5, #6]
    f304:	4640      	mov	r0, r8
    f306:	f7ff fec8 	bl	f09a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x10>
    f30a:	80a8      	strh	r0, [r5, #4]
    f30c:	4640      	mov	r0, r8
    f30e:	f7ff fec4 	bl	f09a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x10>
    f312:	8128      	strh	r0, [r5, #8]
    f314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f318:	271b      	movs	r7, #27
    f31a:	e7ec      	b.n	f2f6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x26c>
    f31c:	201b      	movs	r0, #27
    f31e:	e7f0      	b.n	f302 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x278>
    f320:	b510      	push	{r4, lr}
    f322:	f7ff fed9 	bl	f0d8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4e>
    f326:	2800      	cmp	r0, #0
    f328:	d000      	beq.n	f32c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2a2>
    f32a:	2001      	movs	r0, #1
    f32c:	bd10      	pop	{r4, pc}
    f32e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f332:	7890      	ldrb	r0, [r2, #2]
    f334:	9e06      	ldr	r6, [sp, #24]
    f336:	461d      	mov	r5, r3
    f338:	4614      	mov	r4, r2
    f33a:	b908      	cbnz	r0, f340 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2b6>
    f33c:	f7fb f80c 	bl	a358 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f340:	78e4      	ldrb	r4, [r4, #3]
    f342:	4607      	mov	r7, r0
    f344:	b914      	cbnz	r4, f34c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c2>
    f346:	f7fb f807 	bl	a358 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f34a:	4604      	mov	r4, r0
    f34c:	b16f      	cbz	r7, f36a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2e0>
    f34e:	b164      	cbz	r4, f36a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2e0>
    f350:	4638      	mov	r0, r7
    f352:	f7ff feac 	bl	f0ae <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24>
    f356:	4620      	mov	r0, r4
    f358:	f7ff fea9 	bl	f0ae <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24>
    f35c:	b12f      	cbz	r7, f36a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2e0>
    f35e:	b124      	cbz	r4, f36a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2e0>
    f360:	702f      	strb	r7, [r5, #0]
    f362:	7034      	strb	r4, [r6, #0]
    f364:	2000      	movs	r0, #0
    f366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f36a:	2009      	movs	r0, #9
    f36c:	e7fb      	b.n	f366 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2dc>
    f36e:	b510      	push	{r4, lr}
    f370:	f7fc fca2 	bl	bcb8 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    f374:	b928      	cbnz	r0, f382 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f8>
    f376:	f7fc fcd5 	bl	bd24 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    f37a:	b910      	cbnz	r0, f382 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f8>
    f37c:	f7fc fcdc 	bl	bd38 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    f380:	b108      	cbz	r0, f386 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2fc>
    f382:	2008      	movs	r0, #8
    f384:	bd10      	pop	{r4, pc}
    f386:	f7fc fc6c 	bl	bc62 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    f38a:	b940      	cbnz	r0, f39e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x314>
    f38c:	f7fc fc73 	bl	bc76 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    f390:	b928      	cbnz	r0, f39e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x314>
    f392:	f7fc fc87 	bl	bca4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    f396:	b910      	cbnz	r0, f39e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x314>
    f398:	f7fc fc98 	bl	bccc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    f39c:	b108      	cbz	r0, f3a2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x318>
    f39e:	2004      	movs	r0, #4
    f3a0:	bd10      	pop	{r4, pc}
    f3a2:	f240 5197 	movw	r1, #1431	; 0x597
    f3a6:	2039      	movs	r0, #57	; 0x39
    f3a8:	f7f4 fcac 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f3ac:	b510      	push	{r4, lr}
    f3ae:	f7fa ffcd 	bl	a34c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f3b2:	f3c0 1040 	ubfx	r0, r0, #5, #1
    f3b6:	bd10      	pop	{r4, pc}
    f3b8:	6840      	ldr	r0, [r0, #4]
    f3ba:	f000 b800 	b.w	f3be <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x334>
    f3be:	b508      	push	{r3, lr}
    f3c0:	f890 112c 	ldrb.w	r1, [r0, #300]	; 0x12c
    f3c4:	f890 008c 	ldrb.w	r0, [r0, #140]	; 0x8c
    f3c8:	f88d 0000 	strb.w	r0, [sp]
    f3cc:	9800      	ldr	r0, [sp, #0]
    f3ce:	9000      	str	r0, [sp, #0]
    f3d0:	f89d 0000 	ldrb.w	r0, [sp]
    f3d4:	1e40      	subs	r0, r0, #1
    f3d6:	4208      	tst	r0, r1
    f3d8:	d003      	beq.n	f3e2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x358>
    f3da:	2904      	cmp	r1, #4
    f3dc:	d001      	beq.n	f3e2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x358>
    f3de:	2001      	movs	r0, #1
    f3e0:	bd08      	pop	{r3, pc}
    f3e2:	2000      	movs	r0, #0
    f3e4:	bd08      	pop	{r3, pc}
    f3e6:	b510      	push	{r4, lr}
    f3e8:	2101      	movs	r1, #1
    f3ea:	2000      	movs	r0, #0
    f3ec:	f7fd fcd5 	bl	cd9a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f3f0:	0004      	movs	r4, r0
    f3f2:	d109      	bne.n	f408 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x37e>
    f3f4:	2200      	movs	r2, #0
    f3f6:	2101      	movs	r1, #1
    f3f8:	4610      	mov	r0, r2
    f3fa:	f7fd fcb2 	bl	cd62 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    f3fe:	0004      	movs	r4, r0
    f400:	d004      	beq.n	f40c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x382>
    f402:	2100      	movs	r1, #0
    f404:	f7fe fbb0 	bl	db68 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    f408:	4620      	mov	r0, r4
    f40a:	bd10      	pop	{r4, pc}
    f40c:	f240 2126 	movw	r1, #550	; 0x226
    f410:	2039      	movs	r0, #57	; 0x39
    f412:	f7f4 fc77 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f416:	b570      	push	{r4, r5, r6, lr}
    f418:	4605      	mov	r5, r0
    f41a:	f7fe fc08 	bl	dc2e <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    f41e:	b170      	cbz	r0, f43e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3b4>
    f420:	4628      	mov	r0, r5
    f422:	f7fe fe08 	bl	e036 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    f426:	2800      	cmp	r0, #0
    f428:	d008      	beq.n	f43c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3b2>
    f42a:	4628      	mov	r0, r5
    f42c:	f7fe fe00 	bl	e030 <sym_WI2RDLNIWKOV64CKFZ2EF2DRND265I3CYCBNK6A>
    f430:	4604      	mov	r4, r0
    f432:	4628      	mov	r0, r5
    f434:	f7fe fdd6 	bl	dfe4 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI>
    f438:	b118      	cbz	r0, f442 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3b8>
    f43a:	200c      	movs	r0, #12
    f43c:	bd70      	pop	{r4, r5, r6, pc}
    f43e:	2042      	movs	r0, #66	; 0x42
    f440:	bd70      	pop	{r4, r5, r6, pc}
    f442:	b164      	cbz	r4, f45e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3d4>
    f444:	8820      	ldrh	r0, [r4, #0]
    f446:	f7fd fd21 	bl	ce8c <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    f44a:	8820      	ldrh	r0, [r4, #0]
    f44c:	2100      	movs	r1, #0
    f44e:	f7f4 fefb 	bl	4248 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    f452:	b120      	cbz	r0, f45e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3d4>
    f454:	f241 417a 	movw	r1, #5242	; 0x147a
    f458:	2039      	movs	r0, #57	; 0x39
    f45a:	f7f4 fc53 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f45e:	2000      	movs	r0, #0
    f460:	bd70      	pop	{r4, r5, r6, pc}
    f462:	b530      	push	{r4, r5, lr}
    f464:	f340 0400 	sbfx	r4, r0, #0, #1
    f468:	f340 0040 	sbfx	r0, r0, #1, #1
    f46c:	1c40      	adds	r0, r0, #1
    f46e:	9d03      	ldr	r5, [sp, #12]
    f470:	1c64      	adds	r4, r4, #1
    f472:	d000      	beq.n	f476 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3ec>
    f474:	b119      	cbz	r1, f47e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3f4>
    f476:	b100      	cbz	r0, f47a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3f0>
    f478:	b10a      	cbz	r2, f47e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3f4>
    f47a:	b91c      	cbnz	r4, f484 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3fa>
    f47c:	e001      	b.n	f482 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3f8>
    f47e:	2011      	movs	r0, #17
    f480:	bd30      	pop	{r4, r5, pc}
    f482:	2100      	movs	r1, #0
    f484:	7019      	strb	r1, [r3, #0]
    f486:	b900      	cbnz	r0, f48a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x400>
    f488:	2200      	movs	r2, #0
    f48a:	702a      	strb	r2, [r5, #0]
    f48c:	2000      	movs	r0, #0
    f48e:	bd30      	pop	{r4, r5, pc}
    f490:	b2c0      	uxtb	r0, r0
    f492:	06c1      	lsls	r1, r0, #27
    f494:	d40c      	bmi.n	f4b0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x426>
    f496:	0681      	lsls	r1, r0, #26
    f498:	ea4f 71c0 	mov.w	r1, r0, lsl #31
    f49c:	d503      	bpl.n	f4a6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x41c>
    f49e:	b9d1      	cbnz	r1, f4d6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x44c>
    f4a0:	0781      	lsls	r1, r0, #30
    f4a2:	d418      	bmi.n	f4d6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x44c>
    f4a4:	e001      	b.n	f4aa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x420>
    f4a6:	2900      	cmp	r1, #0
    f4a8:	d1fa      	bne.n	f4a0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x416>
    f4aa:	0700      	lsls	r0, r0, #28
    f4ac:	d413      	bmi.n	f4d6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x44c>
    f4ae:	e010      	b.n	f4d2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x448>
    f4b0:	0641      	lsls	r1, r0, #25
    f4b2:	d410      	bmi.n	f4d6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x44c>
    f4b4:	0681      	lsls	r1, r0, #26
    f4b6:	d40e      	bmi.n	f4d6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x44c>
    f4b8:	07c1      	lsls	r1, r0, #31
    f4ba:	ea4f 7180 	mov.w	r1, r0, lsl #30
    f4be:	d004      	beq.n	f4ca <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x440>
    f4c0:	2900      	cmp	r1, #0
    f4c2:	db02      	blt.n	f4ca <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x440>
    f4c4:	0740      	lsls	r0, r0, #29
    f4c6:	d404      	bmi.n	f4d2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x448>
    f4c8:	e005      	b.n	f4d6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x44c>
    f4ca:	0701      	lsls	r1, r0, #28
    f4cc:	d403      	bmi.n	f4d6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x44c>
    f4ce:	0740      	lsls	r0, r0, #29
    f4d0:	d401      	bmi.n	f4d6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x44c>
    f4d2:	2001      	movs	r0, #1
    f4d4:	4770      	bx	lr
    f4d6:	2000      	movs	r0, #0
    f4d8:	4770      	bx	lr
    f4da:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    f4dc:	4669      	mov	r1, sp
    f4de:	2001      	movs	r0, #1
    f4e0:	f7fd fc65 	bl	cdae <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    f4e4:	b178      	cbz	r0, f506 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x47c>
    f4e6:	f240 114f 	movw	r1, #335	; 0x14f
    f4ea:	2039      	movs	r0, #57	; 0x39
    f4ec:	f7f4 fc0a 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f4f0:	9c02      	ldr	r4, [sp, #8]
    f4f2:	4620      	mov	r0, r4
    f4f4:	f7fe fd9f 	bl	e036 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    f4f8:	b128      	cbz	r0, f506 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x47c>
    f4fa:	4620      	mov	r0, r4
    f4fc:	f7fe fbff 	bl	dcfe <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
    f500:	b108      	cbz	r0, f506 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x47c>
    f502:	2001      	movs	r0, #1
    f504:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f506:	4668      	mov	r0, sp
    f508:	f7f4 fe4e 	bl	41a8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    f50c:	2800      	cmp	r0, #0
    f50e:	d0ef      	beq.n	f4f0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x466>
    f510:	2000      	movs	r0, #0
    f512:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000f514 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>:
    f514:	6802      	ldr	r2, [r0, #0]
    f516:	b912      	cbnz	r2, f51e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xa>
    f518:	6001      	str	r1, [r0, #0]
    f51a:	4770      	bx	lr
    f51c:	4602      	mov	r2, r0
    f51e:	6850      	ldr	r0, [r2, #4]
    f520:	b108      	cbz	r0, f526 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x12>
    f522:	428a      	cmp	r2, r1
    f524:	d1fa      	bne.n	f51c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x8>
    f526:	428a      	cmp	r2, r1
    f528:	d0f7      	beq.n	f51a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x6>
    f52a:	6051      	str	r1, [r2, #4]
    f52c:	4770      	bx	lr
    f52e:	b510      	push	{r4, lr}
    f530:	f7fe fd84 	bl	e03c <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA>
    f534:	b108      	cbz	r0, f53a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x26>
    f536:	21d8      	movs	r1, #216	; 0xd8
    f538:	e003      	b.n	f542 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x2e>
    f53a:	f7f6 ffaf 	bl	649c <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    f53e:	b118      	cbz	r0, f548 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x34>
    f540:	21dd      	movs	r1, #221	; 0xdd
    f542:	2001      	movs	r0, #1
    f544:	f7f4 fbde 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f54c:	2001      	movs	r0, #1
    f54e:	f7f4 bdc3 	b.w	40d8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    f552:	b510      	push	{r4, lr}
    f554:	4604      	mov	r4, r0
    f556:	e002      	b.n	f55e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x4a>
    f558:	6820      	ldr	r0, [r4, #0]
    f55a:	4780      	blx	r0
    f55c:	6864      	ldr	r4, [r4, #4]
    f55e:	2c00      	cmp	r4, #0
    f560:	d1fa      	bne.n	f558 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x44>
    f562:	bd10      	pop	{r4, pc}
    f564:	b510      	push	{r4, lr}
    f566:	2000      	movs	r0, #0
    f568:	f7f4 fdb6 	bl	40d8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    f56c:	f7f4 ffea 	bl	4544 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
    f570:	f7f5 fa6c 	bl	4a4c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
    f574:	f7f5 fc4a 	bl	4e0c <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    f578:	2800      	cmp	r0, #0
    f57a:	d003      	beq.n	f584 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x70>
    f57c:	21b5      	movs	r1, #181	; 0xb5
    f57e:	2001      	movs	r0, #1
    f580:	f7f4 fbc0 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f584:	bd10      	pop	{r4, pc}
    f586:	b510      	push	{r4, lr}
    f588:	f7ff ffd1 	bl	f52e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x1a>
    f58c:	f7ff f81a 	bl	e5c4 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>
    f590:	2800      	cmp	r0, #0
    f592:	d003      	beq.n	f59c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x88>
    f594:	21f6      	movs	r1, #246	; 0xf6
    f596:	2001      	movs	r0, #1
    f598:	f7f4 fbb4 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f59c:	bd10      	pop	{r4, pc}

0000f59e <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
    f59e:	b510      	push	{r4, lr}
    f5a0:	f7fb fa56 	bl	aa50 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
    f5a4:	f000 f850 	bl	f648 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
    f5a8:	f7fa ff2a 	bl	a400 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
    f5ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f5b0:	f7fb b820 	b.w	a5f4 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

0000f5b4 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
    f5b4:	b510      	push	{r4, lr}
    f5b6:	24c8      	movs	r4, #200	; 0xc8
    f5b8:	1e64      	subs	r4, r4, #1
    f5ba:	b2e4      	uxtb	r4, r4
    f5bc:	f7fa ff3e 	bl	a43c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
    f5c0:	2802      	cmp	r0, #2
    f5c2:	d003      	beq.n	f5cc <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
    f5c4:	2801      	cmp	r0, #1
    f5c6:	d000      	beq.n	f5ca <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
    f5c8:	2000      	movs	r0, #0
    f5ca:	bd10      	pop	{r4, pc}
    f5cc:	2c00      	cmp	r4, #0
    f5ce:	d1f3      	bne.n	f5b8 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
    f5d0:	218f      	movs	r1, #143	; 0x8f
    f5d2:	203b      	movs	r0, #59	; 0x3b
    f5d4:	f7f4 fb96 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000f5d8 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>:
    f5d8:	b510      	push	{r4, lr}
    f5da:	f7f4 fa73 	bl	3ac4 <mpsl_fem_lna_configuration_clear>
    f5de:	2800      	cmp	r0, #0
    f5e0:	d005      	beq.n	f5ee <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
    f5e2:	1c40      	adds	r0, r0, #1
    f5e4:	d003      	beq.n	f5ee <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
    f5e6:	2150      	movs	r1, #80	; 0x50
    f5e8:	2040      	movs	r0, #64	; 0x40
    f5ea:	f7f4 fb8b 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f5ee:	bd10      	pop	{r4, pc}

0000f5f0 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>:
    f5f0:	b510      	push	{r4, lr}
    f5f2:	f7f4 fa73 	bl	3adc <mpsl_fem_pa_configuration_clear>
    f5f6:	2800      	cmp	r0, #0
    f5f8:	d005      	beq.n	f606 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
    f5fa:	1c40      	adds	r0, r0, #1
    f5fc:	d003      	beq.n	f606 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
    f5fe:	2149      	movs	r1, #73	; 0x49
    f600:	2040      	movs	r0, #64	; 0x40
    f602:	f7f4 fb7f 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f606:	bd10      	pop	{r4, pc}

0000f608 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>:
    f608:	b510      	push	{r4, lr}
    f60a:	f7f4 fa55 	bl	3ab8 <mpsl_fem_disable>
    f60e:	2800      	cmp	r0, #0
    f610:	d005      	beq.n	f61e <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI+0x16>
    f612:	1c40      	adds	r0, r0, #1
    f614:	d003      	beq.n	f61e <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI+0x16>
    f616:	2157      	movs	r1, #87	; 0x57
    f618:	2040      	movs	r0, #64	; 0x40
    f61a:	f7f4 fb73 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f61e:	bd10      	pop	{r4, pc}

0000f620 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>:
    f620:	b510      	push	{r4, lr}
    f622:	2100      	movs	r1, #0
    f624:	4608      	mov	r0, r1
    f626:	f7f4 fa53 	bl	3ad0 <mpsl_fem_lna_configuration_set>
    f62a:	b108      	cbz	r0, f630 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA+0x10>
    f62c:	2000      	movs	r0, #0
    f62e:	bd10      	pop	{r4, pc}
    f630:	2001      	movs	r0, #1
    f632:	bd10      	pop	{r4, pc}

0000f634 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>:
    f634:	b508      	push	{r3, lr}
    f636:	4668      	mov	r0, sp
    f638:	f7f4 fa5c 	bl	3af4 <mpsl_fem_pa_is_configured>
    f63c:	f89d 0000 	ldrb.w	r0, [sp]
    f640:	2800      	cmp	r0, #0
    f642:	d000      	beq.n	f646 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I+0x12>
    f644:	2001      	movs	r0, #1
    f646:	bd08      	pop	{r3, pc}

0000f648 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
    f648:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    f64c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    f650:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
    f654:	f3bf 8f4f 	dsb	sy
    f658:	f3bf 8f6f 	isb	sy
    f65c:	f7fb b84c 	b.w	a6f8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
    f660:	2800      	cmp	r0, #0
    f662:	db09      	blt.n	f678 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
    f664:	f000 021f 	and.w	r2, r0, #31
    f668:	2101      	movs	r1, #1
    f66a:	4091      	lsls	r1, r2
    f66c:	0940      	lsrs	r0, r0, #5
    f66e:	0080      	lsls	r0, r0, #2
    f670:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    f674:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    f678:	4770      	bx	lr
    f67a:	2800      	cmp	r0, #0
    f67c:	db0d      	blt.n	f69a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
    f67e:	f000 021f 	and.w	r2, r0, #31
    f682:	2101      	movs	r1, #1
    f684:	4091      	lsls	r1, r2
    f686:	0940      	lsrs	r0, r0, #5
    f688:	0080      	lsls	r0, r0, #2
    f68a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    f68e:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    f692:	f3bf 8f4f 	dsb	sy
    f696:	f3bf 8f6f 	isb	sy
    f69a:	4770      	bx	lr

0000f69c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    f69c:	b510      	push	{r4, lr}
    f69e:	2801      	cmp	r0, #1
    f6a0:	d006      	beq.n	f6b0 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x14>
    f6a2:	2802      	cmp	r0, #2
    f6a4:	d006      	beq.n	f6b4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x18>
    f6a6:	f640 31c5 	movw	r1, #3013	; 0xbc5
    f6aa:	203e      	movs	r0, #62	; 0x3e
    f6ac:	f7f4 fb2a 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f6b0:	2028      	movs	r0, #40	; 0x28
    f6b2:	bd10      	pop	{r4, pc}
    f6b4:	2018      	movs	r0, #24
    f6b6:	bd10      	pop	{r4, pc}

0000f6b8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    f6b8:	b510      	push	{r4, lr}
    f6ba:	2801      	cmp	r0, #1
    f6bc:	d006      	beq.n	f6cc <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x14>
    f6be:	2802      	cmp	r0, #2
    f6c0:	d007      	beq.n	f6d2 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x1a>
    f6c2:	f640 31d9 	movw	r1, #3033	; 0xbd9
    f6c6:	203e      	movs	r0, #62	; 0x3e
    f6c8:	f7f4 fb1c 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f6cc:	f641 6014 	movw	r0, #7700	; 0x1e14
    f6d0:	bd10      	pop	{r4, pc}
    f6d2:	f241 1030 	movw	r0, #4400	; 0x1130
    f6d6:	bd10      	pop	{r4, pc}

0000f6d8 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>:
    f6d8:	f7fb bf5a 	b.w	b590 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4e8>
    f6dc:	b510      	push	{r4, lr}
    f6de:	460a      	mov	r2, r1
    f6e0:	b130      	cbz	r0, f6f0 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x18>
    f6e2:	2801      	cmp	r0, #1
    f6e4:	d00b      	beq.n	f6fe <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x26>
    f6e6:	f240 614f 	movw	r1, #1615	; 0x64f
    f6ea:	203e      	movs	r0, #62	; 0x3e
    f6ec:	f7f4 fb0a 	bl	3d04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f6f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f6f4:	f102 0128 	add.w	r1, r2, #40	; 0x28
    f6f8:	4610      	mov	r0, r2
    f6fa:	f7fa bef3 	b.w	a4e4 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>
    f6fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f702:	f102 0129 	add.w	r1, r2, #41	; 0x29
    f706:	4610      	mov	r0, r2
    f708:	f7fa bed6 	b.w	a4b8 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>

0000f70c <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    f70c:	b570      	push	{r4, r5, r6, lr}
    f70e:	4605      	mov	r5, r0
    f710:	4614      	mov	r4, r2
    f712:	4608      	mov	r0, r1
    f714:	f7ff ffd0 	bl	f6b8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f718:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    f71c:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    f720:	ebc0 05c1 	rsb	r5, r0, r1, lsl #3
    f724:	4620      	mov	r0, r4
    f726:	f7ff ffc7 	bl	f6b8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f72a:	4428      	add	r0, r5
    f72c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f730:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    f734:	fbb0 f5f1 	udiv	r5, r0, r1
    f738:	4620      	mov	r0, r4
    f73a:	f7ff ffaf 	bl	f69c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    f73e:	4428      	add	r0, r5
    f740:	1d40      	adds	r0, r0, #5
    f742:	bd70      	pop	{r4, r5, r6, pc}

0000f744 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    f744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f748:	4607      	mov	r7, r0
    f74a:	461d      	mov	r5, r3
    f74c:	460e      	mov	r6, r1
    f74e:	4614      	mov	r4, r2
    f750:	4610      	mov	r0, r2
    f752:	f7ff ffb1 	bl	f6b8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f756:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    f75a:	ebc1 11c7 	rsb	r1, r1, r7, lsl #7
    f75e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    f762:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    f766:	2e02      	cmp	r6, #2
    f768:	d00e      	beq.n	f788 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x44>
    f76a:	f240 52dc 	movw	r2, #1500	; 0x5dc
    f76e:	4411      	add	r1, r2
    f770:	f601 31b7 	addw	r1, r1, #2999	; 0xbb7
    f774:	fbb1 f6f0 	udiv	r6, r1, r0
    f778:	4620      	mov	r0, r4
    f77a:	f7ff ff8f 	bl	f69c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    f77e:	4430      	add	r0, r6
    f780:	4428      	add	r0, r5
    f782:	1d40      	adds	r0, r0, #5
    f784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f788:	4602      	mov	r2, r0
    f78a:	e7f0      	b.n	f76e <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x2a>

0000f78c <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
    f78c:	b510      	push	{r4, lr}
    f78e:	4604      	mov	r4, r0
    f790:	4608      	mov	r0, r1
    f792:	f7ff ff91 	bl	f6b8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f796:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f79a:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    f79e:	fbb0 f0f1 	udiv	r0, r0, r1
    f7a2:	1a20      	subs	r0, r4, r0
    f7a4:	1e80      	subs	r0, r0, #2
    f7a6:	bd10      	pop	{r4, pc}

0000f7a8 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
    f7a8:	b510      	push	{r4, lr}
    f7aa:	4604      	mov	r4, r0
    f7ac:	4608      	mov	r0, r1
    f7ae:	f7ff ff83 	bl	f6b8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f7b2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f7b6:	fbb0 f0f1 	udiv	r0, r0, r1
    f7ba:	1a20      	subs	r0, r4, r0
    f7bc:	bd10      	pop	{r4, pc}

0000f7be <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    f7be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f7c2:	2902      	cmp	r1, #2
    f7c4:	d008      	beq.n	f7d8 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x1a>
    f7c6:	f240 51dc 	movw	r1, #1500	; 0x5dc
    f7ca:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    f7ce:	fbb1 f1f2 	udiv	r1, r1, r2
    f7d2:	4408      	add	r0, r1
    f7d4:	1e80      	subs	r0, r0, #2
    f7d6:	4770      	bx	lr
    f7d8:	4611      	mov	r1, r2
    f7da:	e7f6      	b.n	f7ca <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0xc>

0000f7dc <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    f7dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f7e0:	2902      	cmp	r1, #2
    f7e2:	d007      	beq.n	f7f4 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>
    f7e4:	f240 51dc 	movw	r1, #1500	; 0x5dc
    f7e8:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    f7ec:	fbb1 f1f2 	udiv	r1, r1, r2
    f7f0:	4408      	add	r0, r1
    f7f2:	4770      	bx	lr
    f7f4:	4611      	mov	r1, r2
    f7f6:	e7f7      	b.n	f7e8 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0xc>
    f7f8:	1702080c 	.word	0x1702080c
    f7fc:	0201010d 	.word	0x0201010d
    f800:	01010909 	.word	0x01010909
    f804:	18090206 	.word	0x18090206
    f808:	01010318 	.word	0x01010318
    f80c:	03030909 	.word	0x03030909
    f810:	00000005 	.word	0x00000005
    f814:	00000000 	.word	0x00000000

0000f818 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
    f818:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    f81a:	4d3f      	ldr	r5, [pc, #252]	; (f918 <bt_init+0x100>)
    f81c:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
    f820:	6899      	ldr	r1, [r3, #8]
    f822:	f011 0101 	ands.w	r1, r1, #1
    f826:	d121      	bne.n	f86c <bt_init+0x54>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    f828:	aa01      	add	r2, sp, #4
    f82a:	f640 4003 	movw	r0, #3075	; 0xc03
    f82e:	f003 fac5 	bl	12dbc <bt_hci_cmd_send_sync>
		if (err) {
    f832:	4604      	mov	r4, r0
    f834:	2800      	cmp	r0, #0
    f836:	d16c      	bne.n	f912 <bt_init+0xfa>
	uint8_t status = buf->data[0];
    f838:	9b01      	ldr	r3, [sp, #4]
    f83a:	689b      	ldr	r3, [r3, #8]
	if (status) {
    f83c:	781b      	ldrb	r3, [r3, #0]
    f83e:	b993      	cbnz	r3, f866 <bt_init+0x4e>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    f840:	f3bf 8f5b 	dmb	ish
    f844:	462b      	mov	r3, r5
    f846:	f853 2fcc 	ldr.w	r2, [r3, #204]!
    f84a:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    f84e:	f002 0205 	and.w	r2, r2, #5
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    f852:	f3bf 8f5b 	dmb	ish
    f856:	e853 1f00 	ldrex	r1, [r3]
    f85a:	e843 2000 	strex	r0, r2, [r3]
    f85e:	2800      	cmp	r0, #0
    f860:	d1f9      	bne.n	f856 <bt_init+0x3e>
    f862:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    f866:	9801      	ldr	r0, [sp, #4]
    f868:	f007 fe26 	bl	174b8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    f86c:	aa01      	add	r2, sp, #4
    f86e:	2100      	movs	r1, #0
    f870:	f241 0003 	movw	r0, #4099	; 0x1003
    f874:	f003 faa2 	bl	12dbc <bt_hci_cmd_send_sync>
	if (err) {
    f878:	4604      	mov	r4, r0
    f87a:	2800      	cmp	r0, #0
    f87c:	d149      	bne.n	f912 <bt_init+0xfa>
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    f87e:	9b01      	ldr	r3, [sp, #4]
    f880:	4826      	ldr	r0, [pc, #152]	; (f91c <bt_init+0x104>)
    f882:	6899      	ldr	r1, [r3, #8]
    f884:	2208      	movs	r2, #8
    f886:	3101      	adds	r1, #1
    f888:	f00d fa0d 	bl	1cca6 <memcpy>
	net_buf_unref(rsp);
    f88c:	9801      	ldr	r0, [sp, #4]
    f88e:	f007 fe13 	bl	174b8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    f892:	4621      	mov	r1, r4
    f894:	aa01      	add	r2, sp, #4
    f896:	f241 0001 	movw	r0, #4097	; 0x1001
    f89a:	f003 fa8f 	bl	12dbc <bt_hci_cmd_send_sync>
	if (err) {
    f89e:	4604      	mov	r4, r0
    f8a0:	2800      	cmp	r0, #0
    f8a2:	d136      	bne.n	f912 <bt_init+0xfa>
	read_local_ver_complete(rsp);
    f8a4:	9801      	ldr	r0, [sp, #4]
    f8a6:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    f8a8:	785a      	ldrb	r2, [r3, #1]
    f8aa:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    f8ae:	78d9      	ldrb	r1, [r3, #3]
    f8b0:	789a      	ldrb	r2, [r3, #2]
    f8b2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    f8b6:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
    f8ba:	791a      	ldrb	r2, [r3, #4]
    f8bc:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    f8c0:	7a19      	ldrb	r1, [r3, #8]
    f8c2:	79da      	ldrb	r2, [r3, #7]
    f8c4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    f8c8:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    f8cc:	795a      	ldrb	r2, [r3, #5]
    f8ce:	799b      	ldrb	r3, [r3, #6]
    f8d0:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    f8d4:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
    f8d8:	f007 fdee 	bl	174b8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    f8dc:	4621      	mov	r1, r4
    f8de:	aa01      	add	r2, sp, #4
    f8e0:	f241 0002 	movw	r0, #4098	; 0x1002
    f8e4:	f003 fa6a 	bl	12dbc <bt_hci_cmd_send_sync>
	if (err) {
    f8e8:	4604      	mov	r4, r0
    f8ea:	b990      	cbnz	r0, f912 <bt_init+0xfa>
	memcpy(bt_dev.supported_commands, rp->commands,
    f8ec:	9b01      	ldr	r3, [sp, #4]
    f8ee:	480c      	ldr	r0, [pc, #48]	; (f920 <bt_init+0x108>)
    f8f0:	6899      	ldr	r1, [r3, #8]
    f8f2:	2240      	movs	r2, #64	; 0x40
    f8f4:	3101      	adds	r1, #1
    f8f6:	f00d f9d6 	bl	1cca6 <memcpy>
		bt_hci_ecc_supported_commands(bt_dev.supported_commands);
    f8fa:	4809      	ldr	r0, [pc, #36]	; (f920 <bt_init+0x108>)
    f8fc:	f00d fa66 	bl	1cdcc <bt_hci_ecc_supported_commands>
	net_buf_unref(rsp);
    f900:	9801      	ldr	r0, [sp, #4]
    f902:	f007 fdd9 	bl	174b8 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    f906:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    f90a:	065a      	lsls	r2, r3, #25
    f90c:	d40a      	bmi.n	f924 <bt_init+0x10c>
		return -ENODEV;
    f90e:	f06f 0412 	mvn.w	r4, #18
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
    f912:	4620      	mov	r0, r4
    f914:	b002      	add	sp, #8
    f916:	bd70      	pop	{r4, r5, r6, pc}
    f918:	200002b8 	.word	0x200002b8
    f91c:	20000328 	.word	0x20000328
    f920:	20000330 	.word	0x20000330
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    f924:	4621      	mov	r1, r4
    f926:	aa01      	add	r2, sp, #4
    f928:	f242 0003 	movw	r0, #8195	; 0x2003
    f92c:	f003 fa46 	bl	12dbc <bt_hci_cmd_send_sync>
	if (err) {
    f930:	4604      	mov	r4, r0
    f932:	2800      	cmp	r0, #0
    f934:	d1ed      	bne.n	f912 <bt_init+0xfa>
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    f936:	9b01      	ldr	r3, [sp, #4]
    f938:	48b5      	ldr	r0, [pc, #724]	; (fc10 <bt_init+0x3f8>)
    f93a:	6899      	ldr	r1, [r3, #8]
    f93c:	2208      	movs	r2, #8
    f93e:	3101      	adds	r1, #1
    f940:	f00d f9b1 	bl	1cca6 <memcpy>
	net_buf_unref(rsp);
    f944:	9801      	ldr	r0, [sp, #4]
    f946:	f007 fdb7 	bl	174b8 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    f94a:	4621      	mov	r1, r4
    f94c:	aa01      	add	r2, sp, #4
    f94e:	f242 0002 	movw	r0, #8194	; 0x2002
    f952:	f003 fa33 	bl	12dbc <bt_hci_cmd_send_sync>
		if (err) {
    f956:	4604      	mov	r4, r0
    f958:	2800      	cmp	r0, #0
    f95a:	d1da      	bne.n	f912 <bt_init+0xfa>
		le_read_buffer_size_complete(rsp);
    f95c:	9b01      	ldr	r3, [sp, #4]
    f95e:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    f960:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    f964:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
    f968:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
    f96a:	b121      	cbz	r1, f976 <bt_init+0x15e>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    f96c:	78da      	ldrb	r2, [r3, #3]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, *(uintptr_t *)&initial_count, *(uintptr_t *)&limit, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
    f96e:	48a9      	ldr	r0, [pc, #676]	; (fc14 <bt_init+0x3fc>)
    f970:	4611      	mov	r1, r2
    f972:	f010 fcf5 	bl	20360 <z_impl_k_sem_init>
		net_buf_unref(rsp);
    f976:	9801      	ldr	r0, [sp, #4]
    f978:	f007 fd9e 	bl	174b8 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    f97c:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
    f980:	f016 0620 	ands.w	r6, r6, #32
    f984:	f000 8120 	beq.w	fbc8 <bt_init+0x3b0>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    f988:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
    f98c:	071b      	lsls	r3, r3, #28
    f98e:	d512      	bpl.n	f9b6 <bt_init+0x19e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    f990:	aa01      	add	r2, sp, #4
    f992:	2100      	movs	r1, #0
    f994:	f242 001c 	movw	r0, #8220	; 0x201c
    f998:	f003 fa10 	bl	12dbc <bt_hci_cmd_send_sync>
		if (err) {
    f99c:	4604      	mov	r4, r0
    f99e:	2800      	cmp	r0, #0
    f9a0:	d1b7      	bne.n	f912 <bt_init+0xfa>
		le_read_supp_states_complete(rsp);
    f9a2:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    f9a4:	6883      	ldr	r3, [r0, #8]
    f9a6:	f8d3 2001 	ldr.w	r2, [r3, #1]
    f9aa:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    f9ae:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
    f9b2:	f007 fd81 	bl	174b8 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    f9b6:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    f9ba:	069e      	lsls	r6, r3, #26
    f9bc:	d523      	bpl.n	fa06 <bt_init+0x1ee>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    f9be:	f10d 0102 	add.w	r1, sp, #2
    f9c2:	4668      	mov	r0, sp
    f9c4:	f00d fc71 	bl	1d2aa <hci_le_read_max_data_len>
		if (err) {
    f9c8:	4604      	mov	r4, r0
    f9ca:	2800      	cmp	r0, #0
    f9cc:	d1a1      	bne.n	f912 <bt_init+0xfa>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    f9ce:	2104      	movs	r1, #4
    f9d0:	f242 0024 	movw	r0, #8228	; 0x2024
    f9d4:	f003 f996 	bl	12d04 <bt_hci_cmd_create>
		if (!buf) {
    f9d8:	4606      	mov	r6, r0
    f9da:	2800      	cmp	r0, #0
    f9dc:	f000 80fb 	beq.w	fbd6 <bt_init+0x3be>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
    f9e0:	2104      	movs	r1, #4
    f9e2:	3008      	adds	r0, #8
    f9e4:	f010 f8b1 	bl	1fb4a <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    f9e8:	f8bd 3000 	ldrh.w	r3, [sp]
    f9ec:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    f9ee:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    f9f2:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    f9f4:	4622      	mov	r2, r4
    f9f6:	4631      	mov	r1, r6
    f9f8:	f242 0024 	movw	r0, #8228	; 0x2024
    f9fc:	f003 f9de 	bl	12dbc <bt_hci_cmd_send_sync>
		if (err) {
    fa00:	4604      	mov	r4, r0
    fa02:	2800      	cmp	r0, #0
    fa04:	d185      	bne.n	f912 <bt_init+0xfa>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
    fa06:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    fa0a:	065c      	lsls	r4, r3, #25
    fa0c:	d510      	bpl.n	fa30 <bt_init+0x218>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
    fa0e:	aa01      	add	r2, sp, #4
    fa10:	2100      	movs	r1, #0
    fa12:	f242 002a 	movw	r0, #8234	; 0x202a
    fa16:	f003 f9d1 	bl	12dbc <bt_hci_cmd_send_sync>
		if (err) {
    fa1a:	4604      	mov	r4, r0
    fa1c:	2800      	cmp	r0, #0
    fa1e:	f47f af78 	bne.w	f912 <bt_init+0xfa>
		le_read_resolving_list_size_complete(rsp);
    fa22:	9801      	ldr	r0, [sp, #4]
	bt_dev.le.rl_size = rp->rl_size;
    fa24:	6883      	ldr	r3, [r0, #8]
    fa26:	785b      	ldrb	r3, [r3, #1]
    fa28:	f885 3118 	strb.w	r3, [r5, #280]	; 0x118
		net_buf_unref(rsp);
    fa2c:	f007 fd44 	bl	174b8 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    fa30:	2108      	movs	r1, #8
    fa32:	f242 0001 	movw	r0, #8193	; 0x2001
    fa36:	f003 f965 	bl	12d04 <bt_hci_cmd_create>
	if (!buf) {
    fa3a:	4604      	mov	r4, r0
    fa3c:	2800      	cmp	r0, #0
    fa3e:	f000 80ca 	beq.w	fbd6 <bt_init+0x3be>
    fa42:	2108      	movs	r1, #8
    fa44:	4408      	add	r0, r1
    fa46:	f010 f880 	bl	1fb4a <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
    fa4a:	f895 10d0 	ldrb.w	r1, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
    fa4e:	f011 0f40 	tst.w	r1, #64	; 0x40
    fa52:	4602      	mov	r2, r0
    fa54:	f240 2302 	movw	r3, #514	; 0x202
    fa58:	bf08      	it	eq
    fa5a:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    fa5c:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    fa5e:	bf4c      	ite	mi
    fa60:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    fa64:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    fa68:	068b      	lsls	r3, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    fa6a:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    fa6e:	bf48      	it	mi
    fa70:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    fa74:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    fa78:	f895 309a 	ldrb.w	r3, [r5, #154]	; 0x9a
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    fa7c:	bf18      	it	ne
    fa7e:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    fa82:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    fa86:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
    fa88:	bf48      	it	mi
    fa8a:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    fa8e:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    fa90:	bf08      	it	eq
    fa92:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
    fa96:	2100      	movs	r1, #0
    fa98:	f00d faea 	bl	1d070 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    fa9c:	4621      	mov	r1, r4
    fa9e:	2200      	movs	r2, #0
    faa0:	f242 0001 	movw	r0, #8193	; 0x2001
    faa4:	f003 f98a 	bl	12dbc <bt_hci_cmd_send_sync>
	if (err) {
    faa8:	4604      	mov	r4, r0
    faaa:	2800      	cmp	r0, #0
    faac:	f47f af31 	bne.w	f912 <bt_init+0xfa>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    fab0:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    fab4:	0698      	lsls	r0, r3, #26
    fab6:	d41e      	bmi.n	faf6 <bt_init+0x2de>
	if (bt_dev.le.acl_mtu) {
    fab8:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
    fabc:	b9d9      	cbnz	r1, faf6 <bt_init+0x2de>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    fabe:	aa01      	add	r2, sp, #4
    fac0:	f241 0005 	movw	r0, #4101	; 0x1005
    fac4:	f003 f97a 	bl	12dbc <bt_hci_cmd_send_sync>
	if (err) {
    fac8:	4604      	mov	r4, r0
    faca:	2800      	cmp	r0, #0
    facc:	f47f af21 	bne.w	f912 <bt_init+0xfa>
	if (bt_dev.le.acl_mtu) {
    fad0:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
    fad4:	b963      	cbnz	r3, faf0 <bt_init+0x2d8>
    fad6:	9b01      	ldr	r3, [sp, #4]
    fad8:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    fada:	785a      	ldrb	r2, [r3, #1]
    fadc:	7899      	ldrb	r1, [r3, #2]
    fade:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    fae2:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    fae6:	889a      	ldrh	r2, [r3, #4]
    fae8:	484a      	ldr	r0, [pc, #296]	; (fc14 <bt_init+0x3fc>)
    faea:	4611      	mov	r1, r2
    faec:	f010 fc38 	bl	20360 <z_impl_k_sem_init>
	net_buf_unref(rsp);
    faf0:	9801      	ldr	r0, [sp, #4]
    faf2:	f007 fce1 	bl	174b8 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    faf6:	2108      	movs	r1, #8
    faf8:	f640 4001 	movw	r0, #3073	; 0xc01
    fafc:	f003 f902 	bl	12d04 <bt_hci_cmd_create>
	if (!buf) {
    fb00:	4604      	mov	r4, r0
    fb02:	2800      	cmp	r0, #0
    fb04:	d067      	beq.n	fbd6 <bt_init+0x3be>
    fb06:	2108      	movs	r1, #8
    fb08:	4408      	add	r0, r1
    fb0a:	f010 f81e 	bl	1fb4a <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    fb0e:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    fb12:	07d9      	lsls	r1, r3, #31
    fb14:	4602      	mov	r2, r0
    fb16:	d573      	bpl.n	fc00 <bt_init+0x3e8>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
    fb18:	a13b      	add	r1, pc, #236	; (adr r1, fc08 <bt_init+0x3f0>)
    fb1a:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
    fb1e:	f00d faa7 	bl	1d070 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    fb22:	4621      	mov	r1, r4
    fb24:	2200      	movs	r2, #0
    fb26:	f640 4001 	movw	r0, #3073	; 0xc01
    fb2a:	f003 f947 	bl	12dbc <bt_hci_cmd_send_sync>
	if (err) {
    fb2e:	4604      	mov	r4, r0
    fb30:	2800      	cmp	r0, #0
    fb32:	f47f aeee 	bne.w	f912 <bt_init+0xfa>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    fb36:	4601      	mov	r1, r0
    fb38:	aa01      	add	r2, sp, #4
    fb3a:	f64f 4001 	movw	r0, #64513	; 0xfc01
    fb3e:	f003 f93d 	bl	12dbc <bt_hci_cmd_send_sync>
	if (err) {
    fb42:	4604      	mov	r4, r0
    fb44:	bb48      	cbnz	r0, fb9a <bt_init+0x382>
	net_buf_unref(rsp);
    fb46:	9801      	ldr	r0, [sp, #4]
    fb48:	f007 fcb6 	bl	174b8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    fb4c:	4621      	mov	r1, r4
    fb4e:	aa01      	add	r2, sp, #4
    fb50:	f64f 4002 	movw	r0, #64514	; 0xfc02
    fb54:	f003 f932 	bl	12dbc <bt_hci_cmd_send_sync>
	if (err) {
    fb58:	4604      	mov	r4, r0
    fb5a:	b9f0      	cbnz	r0, fb9a <bt_init+0x382>
	rp.cmds = (void *)rsp->data;
    fb5c:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    fb5e:	482e      	ldr	r0, [pc, #184]	; (fc18 <bt_init+0x400>)
    fb60:	6899      	ldr	r1, [r3, #8]
    fb62:	2202      	movs	r2, #2
    fb64:	3101      	adds	r1, #1
    fb66:	f00d f89e 	bl	1cca6 <memcpy>
	net_buf_unref(rsp);
    fb6a:	9801      	ldr	r0, [sp, #4]
    fb6c:	f007 fca4 	bl	174b8 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    fb70:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
    fb74:	075b      	lsls	r3, r3, #29
    fb76:	d510      	bpl.n	fb9a <bt_init+0x382>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    fb78:	aa01      	add	r2, sp, #4
    fb7a:	4621      	mov	r1, r4
    fb7c:	f64f 4003 	movw	r0, #64515	; 0xfc03
    fb80:	f003 f91c 	bl	12dbc <bt_hci_cmd_send_sync>
		if (err) {
    fb84:	b948      	cbnz	r0, fb9a <bt_init+0x382>
		rp.feat = (void *)rsp->data;
    fb86:	9b01      	ldr	r3, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
    fb88:	4824      	ldr	r0, [pc, #144]	; (fc1c <bt_init+0x404>)
    fb8a:	6899      	ldr	r1, [r3, #8]
    fb8c:	2201      	movs	r2, #1
    fb8e:	4411      	add	r1, r2
    fb90:	f00d f889 	bl	1cca6 <memcpy>
		net_buf_unref(rsp);
    fb94:	9801      	ldr	r0, [sp, #4]
    fb96:	f007 fc8f 	bl	174b8 <net_buf_unref>
	err = bt_id_init();
    fb9a:	f00d fdbf 	bl	1d71c <bt_id_init>
	if (err) {
    fb9e:	4604      	mov	r4, r0
    fba0:	2800      	cmp	r0, #0
    fba2:	f47f aeb6 	bne.w	f912 <bt_init+0xfa>
		err = bt_conn_init();
    fba6:	f004 fed7 	bl	14958 <bt_conn_init>
		if (err) {
    fbaa:	4604      	mov	r4, r0
    fbac:	2800      	cmp	r0, #0
    fbae:	f47f aeb0 	bne.w	f912 <bt_init+0xfa>
		if (!bt_dev.id_count) {
    fbb2:	79eb      	ldrb	r3, [r5, #7]
    fbb4:	2b00      	cmp	r3, #0
    fbb6:	f43f aeac 	beq.w	f912 <bt_init+0xfa>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    fbba:	2104      	movs	r1, #4
    fbbc:	4818      	ldr	r0, [pc, #96]	; (fc20 <bt_init+0x408>)
    fbbe:	f00d f9d5 	bl	1cf6c <atomic_or>
	bt_finalize_init();
    fbc2:	f003 fb4f 	bl	13264 <bt_finalize_init>
	return 0;
    fbc6:	e6a4      	b.n	f912 <bt_init+0xfa>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    fbc8:	2102      	movs	r1, #2
    fbca:	f640 406d 	movw	r0, #3181	; 0xc6d
    fbce:	f003 f899 	bl	12d04 <bt_hci_cmd_create>
		if (!buf) {
    fbd2:	4604      	mov	r4, r0
    fbd4:	b910      	cbnz	r0, fbdc <bt_init+0x3c4>
		return -ENOBUFS;
    fbd6:	f06f 0468 	mvn.w	r4, #104	; 0x68
    fbda:	e69a      	b.n	f912 <bt_init+0xfa>
    fbdc:	2102      	movs	r1, #2
    fbde:	3008      	adds	r0, #8
    fbe0:	f00f ffb3 	bl	1fb4a <net_buf_simple_add>
		cp_le->le = 0x01;
    fbe4:	2301      	movs	r3, #1
    fbe6:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    fbe8:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    fbea:	4621      	mov	r1, r4
    fbec:	4632      	mov	r2, r6
    fbee:	f640 406d 	movw	r0, #3181	; 0xc6d
    fbf2:	f003 f8e3 	bl	12dbc <bt_hci_cmd_send_sync>
		if (err) {
    fbf6:	4604      	mov	r4, r0
    fbf8:	2800      	cmp	r0, #0
    fbfa:	f43f aec5 	beq.w	f988 <bt_init+0x170>
    fbfe:	e688      	b.n	f912 <bt_init+0xfa>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
    fc00:	4808      	ldr	r0, [pc, #32]	; (fc24 <bt_init+0x40c>)
    fc02:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    fc06:	e78a      	b.n	fb1e <bt_init+0x306>
    fc08:	02008890 	.word	0x02008890
    fc0c:	20008000 	.word	0x20008000
    fc10:	20000388 	.word	0x20000388
    fc14:	200003b8 	.word	0x200003b8
    fc18:	20000371 	.word	0x20000371
    fc1c:	20000370 	.word	0x20000370
    fc20:	20000384 	.word	0x20000384
    fc24:	02008810 	.word	0x02008810

0000fc28 <disconnected>:
}

// What happens when the device is disconnected
static void disconnected(struct bt_conn *conn, uint8_t reason)
{
	printk("Disconnected (reason %u)\n", reason);
    fc28:	4801      	ldr	r0, [pc, #4]	; (fc30 <disconnected+0x8>)
    fc2a:	f00a bdd0 	b.w	1a7ce <printk>
    fc2e:	bf00      	nop
    fc30:	00021548 	.word	0x00021548

0000fc34 <bt_addr_le_to_str.constprop.0.isra.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    fc34:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    fc36:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    fc38:	b08a      	sub	sp, #40	; 0x28
    fc3a:	4604      	mov	r4, r0
    fc3c:	460e      	mov	r6, r1
    fc3e:	ad07      	add	r5, sp, #28
	switch (addr->type) {
    fc40:	2b03      	cmp	r3, #3
    fc42:	d820      	bhi.n	fc86 <bt_addr_le_to_str.constprop.0.isra.0+0x52>
    fc44:	e8df f003 	tbb	[pc, r3]
    fc48:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    fc4c:	4911      	ldr	r1, [pc, #68]	; (fc94 <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    fc4e:	4628      	mov	r0, r5
    fc50:	f00c ffe1 	bl	1cc16 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    fc54:	7863      	ldrb	r3, [r4, #1]
    fc56:	9304      	str	r3, [sp, #16]
    fc58:	78a3      	ldrb	r3, [r4, #2]
    fc5a:	9303      	str	r3, [sp, #12]
    fc5c:	78e3      	ldrb	r3, [r4, #3]
    fc5e:	9302      	str	r3, [sp, #8]
    fc60:	7923      	ldrb	r3, [r4, #4]
    fc62:	9301      	str	r3, [sp, #4]
    fc64:	7963      	ldrb	r3, [r4, #5]
    fc66:	9300      	str	r3, [sp, #0]
    fc68:	4a0b      	ldr	r2, [pc, #44]	; (fc98 <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
    fc6a:	79a3      	ldrb	r3, [r4, #6]
    fc6c:	9505      	str	r5, [sp, #20]
    fc6e:	211e      	movs	r1, #30
    fc70:	4630      	mov	r0, r6
    fc72:	f00a fdb9 	bl	1a7e8 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    fc76:	b00a      	add	sp, #40	; 0x28
    fc78:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    fc7a:	4908      	ldr	r1, [pc, #32]	; (fc9c <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
    fc7c:	e7e7      	b.n	fc4e <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
    fc7e:	4908      	ldr	r1, [pc, #32]	; (fca0 <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
    fc80:	e7e5      	b.n	fc4e <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
    fc82:	4908      	ldr	r1, [pc, #32]	; (fca4 <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
    fc84:	e7e3      	b.n	fc4e <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    fc86:	4a08      	ldr	r2, [pc, #32]	; (fca8 <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
    fc88:	210a      	movs	r1, #10
    fc8a:	4628      	mov	r0, r5
    fc8c:	f00a fdac 	bl	1a7e8 <snprintk>
		break;
    fc90:	e7e0      	b.n	fc54 <bt_addr_le_to_str.constprop.0.isra.0+0x20>
    fc92:	bf00      	nop
    fc94:	00021562 	.word	0x00021562
    fc98:	0002158b 	.word	0x0002158b
    fc9c:	00021569 	.word	0x00021569
    fca0:	00021570 	.word	0x00021570
    fca4:	0002157a 	.word	0x0002157a
    fca8:	00021584 	.word	0x00021584

0000fcac <pairing_failed>:

	printk("Pairing completed\n");
}

static void pairing_failed(struct bt_conn *conn, enum bt_security_err reason)
{
    fcac:	b510      	push	{r4, lr}
    fcae:	b088      	sub	sp, #32
    fcb0:	460c      	mov	r4, r1
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    fcb2:	f00d fffc 	bl	1dcae <bt_conn_get_dst>
    fcb6:	4669      	mov	r1, sp
    fcb8:	f7ff ffbc 	bl	fc34 <bt_addr_le_to_str.constprop.0.isra.0>

	printk("Pairing failed, reason %d\n", reason);
    fcbc:	4802      	ldr	r0, [pc, #8]	; (fcc8 <pairing_failed+0x1c>)
    fcbe:	4621      	mov	r1, r4
    fcc0:	f00a fd85 	bl	1a7ce <printk>
}
    fcc4:	b008      	add	sp, #32
    fcc6:	bd10      	pop	{r4, pc}
    fcc8:	000215ae 	.word	0x000215ae

0000fccc <pairing_complete>:
{
    fccc:	b500      	push	{lr}
    fcce:	b089      	sub	sp, #36	; 0x24
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    fcd0:	f00d ffed 	bl	1dcae <bt_conn_get_dst>
    fcd4:	4669      	mov	r1, sp
    fcd6:	f7ff ffad 	bl	fc34 <bt_addr_le_to_str.constprop.0.isra.0>
	printk("Pairing completed\n");
    fcda:	4803      	ldr	r0, [pc, #12]	; (fce8 <pairing_complete+0x1c>)
    fcdc:	f00a fd77 	bl	1a7ce <printk>
}
    fce0:	b009      	add	sp, #36	; 0x24
    fce2:	f85d fb04 	ldr.w	pc, [sp], #4
    fce6:	bf00      	nop
    fce8:	000215c9 	.word	0x000215c9

0000fcec <auth_cancel>:
{
    fcec:	b500      	push	{lr}
    fcee:	b089      	sub	sp, #36	; 0x24
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    fcf0:	f00d ffdd 	bl	1dcae <bt_conn_get_dst>
    fcf4:	4669      	mov	r1, sp
    fcf6:	f7ff ff9d 	bl	fc34 <bt_addr_le_to_str.constprop.0.isra.0>
	printk("Pairing cancelled\n");
    fcfa:	4803      	ldr	r0, [pc, #12]	; (fd08 <auth_cancel+0x1c>)
    fcfc:	f00a fd67 	bl	1a7ce <printk>
}
    fd00:	b009      	add	sp, #36	; 0x24
    fd02:	f85d fb04 	ldr.w	pc, [sp], #4
    fd06:	bf00      	nop
    fd08:	000215dc 	.word	0x000215dc

0000fd0c <security_changed>:
{
    fd0c:	b530      	push	{r4, r5, lr}
    fd0e:	b089      	sub	sp, #36	; 0x24
    fd10:	460c      	mov	r4, r1
    fd12:	4615      	mov	r5, r2
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    fd14:	f00d ffcb 	bl	1dcae <bt_conn_get_dst>
    fd18:	4669      	mov	r1, sp
    fd1a:	f7ff ff8b 	bl	fc34 <bt_addr_le_to_str.constprop.0.isra.0>
	if (!err)
    fd1e:	b92d      	cbnz	r5, fd2c <security_changed+0x20>
		printk("Security changed: level %u\n", level);
    fd20:	4805      	ldr	r0, [pc, #20]	; (fd38 <security_changed+0x2c>)
    fd22:	4621      	mov	r1, r4
    fd24:	f00a fd53 	bl	1a7ce <printk>
}
    fd28:	b009      	add	sp, #36	; 0x24
    fd2a:	bd30      	pop	{r4, r5, pc}
		printk("Security failed: level %u err %d\n", level, err);
    fd2c:	4803      	ldr	r0, [pc, #12]	; (fd3c <security_changed+0x30>)
    fd2e:	462a      	mov	r2, r5
    fd30:	4621      	mov	r1, r4
    fd32:	f00a fd4c 	bl	1a7ce <printk>
}
    fd36:	e7f7      	b.n	fd28 <security_changed+0x1c>
    fd38:	000215ef 	.word	0x000215ef
    fd3c:	0002160b 	.word	0x0002160b

0000fd40 <le_param_updated>:
{
    fd40:	b510      	push	{r4, lr}
    fd42:	b092      	sub	sp, #72	; 0x48
	if (bt_conn_get_info(conn, &info))
    fd44:	a903      	add	r1, sp, #12
{
    fd46:	4604      	mov	r4, r0
	if (bt_conn_get_info(conn, &info))
    fd48:	f004 fc8c 	bl	14664 <bt_conn_get_info>
    fd4c:	b120      	cbz	r0, fd58 <le_param_updated+0x18>
		printk("Could not parse connection info\n");
    fd4e:	480b      	ldr	r0, [pc, #44]	; (fd7c <le_param_updated+0x3c>)
    fd50:	f00a fd3d 	bl	1a7ce <printk>
}
    fd54:	b012      	add	sp, #72	; 0x48
    fd56:	bd10      	pop	{r4, pc}
		bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    fd58:	4620      	mov	r0, r4
    fd5a:	f00d ffa8 	bl	1dcae <bt_conn_get_dst>
    fd5e:	a90a      	add	r1, sp, #40	; 0x28
    fd60:	f7ff ff68 	bl	fc34 <bt_addr_le_to_str.constprop.0.isra.0>
		printk("Connection parameters updated!	\n\
    fd64:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    fd68:	9300      	str	r3, [sp, #0]
    fd6a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
    fd6e:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
    fd72:	4803      	ldr	r0, [pc, #12]	; (fd80 <le_param_updated+0x40>)
    fd74:	a90a      	add	r1, sp, #40	; 0x28
    fd76:	f00a fd2a 	bl	1a7ce <printk>
}
    fd7a:	e7eb      	b.n	fd54 <le_param_updated+0x14>
    fd7c:	0002162d 	.word	0x0002162d
    fd80:	0002164e 	.word	0x0002164e

0000fd84 <connected>:
{
    fd84:	b510      	push	{r4, lr}
	my_connection = conn;
    fd86:	4b14      	ldr	r3, [pc, #80]	; (fdd8 <connected+0x54>)
{
    fd88:	b092      	sub	sp, #72	; 0x48
    fd8a:	4604      	mov	r4, r0
	my_connection = conn;
    fd8c:	6018      	str	r0, [r3, #0]
	if (err)
    fd8e:	b129      	cbz	r1, fd9c <connected+0x18>
		printk("Connection failed (err %u)\n", err);
    fd90:	4812      	ldr	r0, [pc, #72]	; (fddc <connected+0x58>)
}
    fd92:	b012      	add	sp, #72	; 0x48
    fd94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Connection failed (err %u)\n", err);
    fd98:	f00a bd19 	b.w	1a7ce <printk>
	else if (bt_conn_get_info(conn, &info))
    fd9c:	a903      	add	r1, sp, #12
    fd9e:	f004 fc61 	bl	14664 <bt_conn_get_info>
    fda2:	b120      	cbz	r0, fdae <connected+0x2a>
		printk("Could not parse connection info\n");
    fda4:	480e      	ldr	r0, [pc, #56]	; (fde0 <connected+0x5c>)
    fda6:	f00a fd12 	bl	1a7ce <printk>
}
    fdaa:	b012      	add	sp, #72	; 0x48
    fdac:	bd10      	pop	{r4, pc}
		bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    fdae:	4620      	mov	r0, r4
    fdb0:	f00d ff7d 	bl	1dcae <bt_conn_get_dst>
    fdb4:	a90a      	add	r1, sp, #40	; 0x28
    fdb6:	f7ff ff3d 	bl	fc34 <bt_addr_le_to_str.constprop.0.isra.0>
		printk("Connection established!		\n\
    fdba:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    fdbe:	9301      	str	r3, [sp, #4]
    fdc0:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
    fdc4:	9300      	str	r3, [sp, #0]
    fdc6:	f89d 200d 	ldrb.w	r2, [sp, #13]
    fdca:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    fdce:	4805      	ldr	r0, [pc, #20]	; (fde4 <connected+0x60>)
    fdd0:	a90a      	add	r1, sp, #40	; 0x28
    fdd2:	f00a fcfc 	bl	1a7ce <printk>
    fdd6:	e7e8      	b.n	fdaa <connected+0x26>
    fdd8:	20002440 	.word	0x20002440
    fddc:	000216f1 	.word	0x000216f1
    fde0:	0002162d 	.word	0x0002162d
    fde4:	0002170d 	.word	0x0002170d

0000fde8 <main>:
		k_sleep(K_MSEC(1000));
	}
}

void main(void)
{
    fde8:	b530      	push	{r4, r5, lr}
	int err = 0;

	printk("Starting Nordic Lightbox\n");
    fdea:	4831      	ldr	r0, [pc, #196]	; (feb0 <main+0xc8>)
{
    fdec:	b08b      	sub	sp, #44	; 0x2c
	printk("Starting Nordic Lightbox\n");
    fdee:	f00a fcee 	bl	1a7ce <printk>

	// Configure connection callbacks
	bt_conn_cb_register(&conn_callbacks);
    fdf2:	4830      	ldr	r0, [pc, #192]	; (feb4 <main+0xcc>)
    fdf4:	f004 fbd2 	bl	1459c <bt_conn_cb_register>
	// Configure security callbacks
	err = bt_conn_auth_cb_register(&conn_auth_callbacks);
    fdf8:	482f      	ldr	r0, [pc, #188]	; (feb8 <main+0xd0>)
    fdfa:	f004 fd91 	bl	14920 <bt_conn_auth_cb_register>

	if (err)
    fdfe:	b110      	cbz	r0, fe06 <main+0x1e>
	{
		printk("Failed to initalize auth callbacks\n");
    fe00:	482e      	ldr	r0, [pc, #184]	; (febc <main+0xd4>)
    fe02:	f00a fce4 	bl	1a7ce <printk>
	}

	err = bt_enable(NULL);
    fe06:	2000      	movs	r0, #0
    fe08:	f003 fa3e 	bl	13288 <bt_enable>
	if (err)
    fe0c:	b110      	cbz	r0, fe14 <main+0x2c>
	{
		printk("Failed to enable BT\n");
    fe0e:	482c      	ldr	r0, [pc, #176]	; (fec0 <main+0xd8>)
    fe10:	f00a fcdd 	bl	1a7ce <printk>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    fe14:	482b      	ldr	r0, [pc, #172]	; (fec4 <main+0xdc>)
    fe16:	f009 fc8b 	bl	19730 <z_impl_k_sem_give>

	k_sem_give(&ble_init_ok);

	if (IS_ENABLED(CONFIG_SETTINGS))
	{
		err = settings_load();
    fe1a:	f00b fba7 	bl	1b56c <settings_load>
		if (!err)
    fe1e:	b910      	cbnz	r0, fe26 <main+0x3e>
		{
			printk("Settings loaded!\n");
    fe20:	4829      	ldr	r0, [pc, #164]	; (fec8 <main+0xe0>)
    fe22:	f00a fcd4 	bl	1a7ce <printk>
		}
	}

	// Initalize services
	err = led_service_init();
    fe26:	f000 f8af 	bl	ff88 <led_service_init>

	if (err)
    fe2a:	4601      	mov	r1, r0
    fe2c:	b128      	cbz	r0, fe3a <main+0x52>
	{
		printk("Failed to init lightbox (err:%d)\n", err);
    fe2e:	4827      	ldr	r0, [pc, #156]	; (fecc <main+0xe4>)
		error(); // Catch error
	}

	int ret = bt_unpair(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
	printk("Attempting to unpair device %d\n", ret);
    fe30:	b00b      	add	sp, #44	; 0x2c
    fe32:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		printk("Failed to init lightbox (err:%d)\n", err);
    fe36:	f00a bcca 	b.w	1a7ce <printk>
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
    fe3a:	4d25      	ldr	r5, [pc, #148]	; (fed0 <main+0xe8>)
    fe3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    fe3e:	ac05      	add	r4, sp, #20
    fe40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    fe42:	682b      	ldr	r3, [r5, #0]
    fe44:	6023      	str	r3, [r4, #0]
    fe46:	2301      	movs	r3, #1
    fe48:	4922      	ldr	r1, [pc, #136]	; (fed4 <main+0xec>)
    fe4a:	9300      	str	r3, [sp, #0]
    fe4c:	2202      	movs	r2, #2
    fe4e:	4b22      	ldr	r3, [pc, #136]	; (fed8 <main+0xf0>)
    fe50:	a805      	add	r0, sp, #20
    fe52:	f003 ff35 	bl	13cc0 <bt_le_adv_start>
	if (err)
    fe56:	4601      	mov	r1, r0
    fe58:	b120      	cbz	r0, fe64 <main+0x7c>
		printk("Advertising failed to start (err %d)\n", err);
    fe5a:	4820      	ldr	r0, [pc, #128]	; (fedc <main+0xf4>)
	printk("Attempting to unpair device %d\n", ret);
    fe5c:	f00a fcb7 	bl	1a7ce <printk>
    fe60:	b00b      	add	sp, #44	; 0x2c
    fe62:	bd30      	pop	{r4, r5, pc}
	printk("Advertising successfully started\n");
    fe64:	481e      	ldr	r0, [pc, #120]	; (fee0 <main+0xf8>)
    fe66:	f00a fcb2 	bl	1a7ce <printk>
	return z_impl_k_sem_take(sem, timeout);
    fe6a:	4816      	ldr	r0, [pc, #88]	; (fec4 <main+0xdc>)
    fe6c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    fe70:	2300      	movs	r3, #0
    fe72:	f009 fc83 	bl	1977c <z_impl_k_sem_take>
	if (!err)
    fe76:	4604      	mov	r4, r0
    fe78:	b960      	cbnz	r0, fe94 <main+0xac>
		printk("Bluetooth initialized\n");
    fe7a:	481a      	ldr	r0, [pc, #104]	; (fee4 <main+0xfc>)
    fe7c:	f00a fca7 	bl	1a7ce <printk>
	int ret = bt_unpair(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
    fe80:	a903      	add	r1, sp, #12
    fe82:	4620      	mov	r0, r4
    fe84:	9403      	str	r4, [sp, #12]
    fe86:	f8cd 400f 	str.w	r4, [sp, #15]
    fe8a:	f003 f935 	bl	130f8 <bt_unpair>
    fe8e:	4601      	mov	r1, r0
	printk("Attempting to unpair device %d\n", ret);
    fe90:	4815      	ldr	r0, [pc, #84]	; (fee8 <main+0x100>)
    fe92:	e7e3      	b.n	fe5c <main+0x74>
		printk("BLE initialization did not complete in time\n");
    fe94:	4815      	ldr	r0, [pc, #84]	; (feec <main+0x104>)
		printk("Error!\n");
    fe96:	4c16      	ldr	r4, [pc, #88]	; (fef0 <main+0x108>)
		printk("BLE initialization did not complete in time\n");
    fe98:	f00a fc99 	bl	1a7ce <printk>
		printk("Error!\n");
    fe9c:	4620      	mov	r0, r4
    fe9e:	f00a fc96 	bl	1a7ce <printk>
	return z_impl_k_sleep(timeout);
    fea2:	2100      	movs	r1, #0
    fea4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    fea8:	f00a f948 	bl	1a13c <z_impl_k_sleep>
	while (true)
    feac:	e7f6      	b.n	fe9c <main+0xb4>
    feae:	bf00      	nop
    feb0:	000217af 	.word	0x000217af
    feb4:	2000044c 	.word	0x2000044c
    feb8:	20000428 	.word	0x20000428
    febc:	000217c9 	.word	0x000217c9
    fec0:	000217ed 	.word	0x000217ed
    fec4:	200006dc 	.word	0x200006dc
    fec8:	00021802 	.word	0x00021802
    fecc:	00021814 	.word	0x00021814
    fed0:	00020e10 	.word	0x00020e10
    fed4:	00020eb8 	.word	0x00020eb8
    fed8:	00020ec8 	.word	0x00020ec8
    fedc:	00021836 	.word	0x00021836
    fee0:	0002185c 	.word	0x0002185c
    fee4:	0002187e 	.word	0x0002187e
    fee8:	00021895 	.word	0x00021895
    feec:	000218b5 	.word	0x000218b5
    fef0:	000218e2 	.word	0x000218e2

0000fef4 <on_cccd_changed>:

/* This function is called whenever the CCCD register has been changed by the client*/
static void on_cccd_changed(const struct bt_gatt_attr *attr, uint16_t value)
{
    ARG_UNUSED(attr);
    switch (value)
    fef4:	2902      	cmp	r1, #2
    fef6:	d902      	bls.n	fefe <on_cccd_changed+0xa>
    case 0:
        // Stop sending stuff
        break;

    default:
        printk("Error, CCCD has been set to an invalid value");
    fef8:	4801      	ldr	r0, [pc, #4]	; (ff00 <on_cccd_changed+0xc>)
    fefa:	f00a bc68 	b.w	1a7ce <printk>
    }
}
    fefe:	4770      	bx	lr
    ff00:	000218f1 	.word	0x000218f1

0000ff04 <on_receive>:
{
    ff04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    printk("Received data, handle %d, conn %p, data: 0x", attr->handle, conn);
    ff06:	8a09      	ldrh	r1, [r1, #16]
        printk("%02X", buffer[i]);
    ff08:	4f18      	ldr	r7, [pc, #96]	; (ff6c <on_receive+0x68>)
{
    ff0a:	4614      	mov	r4, r2
    printk("Received data, handle %d, conn %p, data: 0x", attr->handle, conn);
    ff0c:	4602      	mov	r2, r0
    ff0e:	4818      	ldr	r0, [pc, #96]	; (ff70 <on_receive+0x6c>)
{
    ff10:	461d      	mov	r5, r3
    printk("Received data, handle %d, conn %p, data: 0x", attr->handle, conn);
    ff12:	f00a fc5c 	bl	1a7ce <printk>
    for (uint8_t i = 0; i < len; i++)
    ff16:	2200      	movs	r2, #0
    ff18:	b2d3      	uxtb	r3, r2
    ff1a:	42ab      	cmp	r3, r5
    ff1c:	f102 0601 	add.w	r6, r2, #1
    ff20:	d31d      	bcc.n	ff5e <on_receive+0x5a>
    printk("\n");
    ff22:	4814      	ldr	r0, [pc, #80]	; (ff74 <on_receive+0x70>)
    led_data[led_index] = color;
    ff24:	4f14      	ldr	r7, [pc, #80]	; (ff78 <on_receive+0x74>)
    printk("\n");
    ff26:	f00a fc52 	bl	1a7ce <printk>
    uint8_t led_index = buffer[0];
    ff2a:	7821      	ldrb	r1, [r4, #0]
    color.b = buffer[3];
    ff2c:	78e0      	ldrb	r0, [r4, #3]
    if (led_index == 255)
    ff2e:	29ff      	cmp	r1, #255	; 0xff
        party_mode = true;
    ff30:	bf04      	itt	eq
    ff32:	4b12      	ldreq	r3, [pc, #72]	; (ff7c <on_receive+0x78>)
    ff34:	2201      	moveq	r2, #1
    led_data[led_index] = color;
    ff36:	eb01 0641 	add.w	r6, r1, r1, lsl #1
        party_mode = true;
    ff3a:	bf08      	it	eq
    ff3c:	701a      	strbeq	r2, [r3, #0]
    color.g = buffer[2];
    ff3e:	78a3      	ldrb	r3, [r4, #2]
    color.r = buffer[1];
    ff40:	7862      	ldrb	r2, [r4, #1]
    led_data[led_index] = color;
    ff42:	55ba      	strb	r2, [r7, r6]
    ff44:	19bc      	adds	r4, r7, r6
    ff46:	7063      	strb	r3, [r4, #1]
    ff48:	70a0      	strb	r0, [r4, #2]
    printk("led number %d was set with r: %d, g: %d, b: %d \n", led_index, color.r, color.g, color.b);
    ff4a:	9000      	str	r0, [sp, #0]
    ff4c:	480c      	ldr	r0, [pc, #48]	; (ff80 <on_receive+0x7c>)
    ff4e:	f00a fc3e 	bl	1a7ce <printk>
    fresh_data = true;
    ff52:	4b0c      	ldr	r3, [pc, #48]	; (ff84 <on_receive+0x80>)
    ff54:	2201      	movs	r2, #1
}
    ff56:	4628      	mov	r0, r5
    fresh_data = true;
    ff58:	701a      	strb	r2, [r3, #0]
}
    ff5a:	b003      	add	sp, #12
    ff5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        printk("%02X", buffer[i]);
    ff5e:	5ce1      	ldrb	r1, [r4, r3]
    ff60:	4638      	mov	r0, r7
    ff62:	f00a fc34 	bl	1a7ce <printk>
    ff66:	4632      	mov	r2, r6
    ff68:	e7d6      	b.n	ff18 <on_receive+0x14>
    ff6a:	bf00      	nop
    ff6c:	0002194a 	.word	0x0002194a
    ff70:	0002191e 	.word	0x0002191e
    ff74:	000216ef 	.word	0x000216ef
    ff78:	20002a85 	.word	0x20002a85
    ff7c:	20002ad0 	.word	0x20002ad0
    ff80:	0002194f 	.word	0x0002194f
    ff84:	20002a84 	.word	0x20002a84

0000ff88 <led_service_init>:
{
    ff88:	b508      	push	{r3, lr}
    memset(&data_rx, 0, MAX_TRANSMIT_SIZE);
    ff8a:	22f0      	movs	r2, #240	; 0xf0
    ff8c:	2100      	movs	r1, #0
    ff8e:	4805      	ldr	r0, [pc, #20]	; (ffa4 <led_service_init+0x1c>)
    ff90:	f00c fe94 	bl	1ccbc <memset>
    memset(&led_data, 0x00, sizeof(led_data));
    ff94:	224b      	movs	r2, #75	; 0x4b
    ff96:	2100      	movs	r1, #0
    ff98:	4803      	ldr	r0, [pc, #12]	; (ffa8 <led_service_init+0x20>)
    ff9a:	f00c fe8f 	bl	1ccbc <memset>
}
    ff9e:	2000      	movs	r0, #0
    ffa0:	bd08      	pop	{r3, pc}
    ffa2:	bf00      	nop
    ffa4:	20002994 	.word	0x20002994
    ffa8:	20002a85 	.word	0x20002a85

0000ffac <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
    ffac:	b530      	push	{r4, r5, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    ffae:	4c0a      	ldr	r4, [pc, #40]	; (ffd8 <crc8_ccitt+0x2c>)
    ffb0:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
    ffb2:	4291      	cmp	r1, r2
    ffb4:	d100      	bne.n	ffb8 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
    ffb6:	bd30      	pop	{r4, r5, pc}
		val ^= p[i];
    ffb8:	f811 3b01 	ldrb.w	r3, [r1], #1
    ffbc:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    ffbe:	0903      	lsrs	r3, r0, #4
    ffc0:	5ce3      	ldrb	r3, [r4, r3]
    ffc2:	ea83 1300 	eor.w	r3, r3, r0, lsl #4
    ffc6:	b2dd      	uxtb	r5, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    ffc8:	f3c3 1303 	ubfx	r3, r3, #4, #4
    ffcc:	5ce0      	ldrb	r0, [r4, r3]
    ffce:	ea80 1005 	eor.w	r0, r0, r5, lsl #4
    ffd2:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
    ffd4:	e7ed      	b.n	ffb2 <crc8_ccitt+0x6>
    ffd6:	bf00      	nop
    ffd8:	00021980 	.word	0x00021980

0000ffdc <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    ffdc:	680b      	ldr	r3, [r1, #0]
    ffde:	3301      	adds	r3, #1
    ffe0:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    ffe2:	4b01      	ldr	r3, [pc, #4]	; (ffe8 <char_out+0xc>)
    ffe4:	681b      	ldr	r3, [r3, #0]
    ffe6:	4718      	bx	r3
    ffe8:	20000488 	.word	0x20000488

0000ffec <__printk_hook_install>:
	_char_out = fn;
    ffec:	4b01      	ldr	r3, [pc, #4]	; (fff4 <__printk_hook_install+0x8>)
    ffee:	6018      	str	r0, [r3, #0]
}
    fff0:	4770      	bx	lr
    fff2:	bf00      	nop
    fff4:	20000488 	.word	0x20000488

0000fff8 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    fff8:	b507      	push	{r0, r1, r2, lr}
    fffa:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    fffc:	2100      	movs	r1, #0
{
    fffe:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
   10000:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
   10002:	4803      	ldr	r0, [pc, #12]	; (10010 <CONFIG_PM_SRAM_SIZE+0x10>)
   10004:	a901      	add	r1, sp, #4
   10006:	f000 f8f9 	bl	101fc <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
   1000a:	b003      	add	sp, #12
   1000c:	f85d fb04 	ldr.w	pc, [sp], #4
   10010:	0000ffdd 	.word	0x0000ffdd

00010014 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   10014:	b530      	push	{r4, r5, lr}
   10016:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
   10018:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
   1001c:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
   1001e:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
   10020:	a901      	add	r1, sp, #4
   10022:	4805      	ldr	r0, [pc, #20]	; (10038 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
   10024:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
   10026:	f000 f8e9 	bl	101fc <cbvprintf>

	if (ctx.count < ctx.max) {
   1002a:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   1002e:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   10030:	bfb8      	it	lt
   10032:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   10034:	b005      	add	sp, #20
   10036:	bd30      	pop	{r4, r5, pc}
   10038:	0001a7a9 	.word	0x0001a7a9

0001003c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   1003c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   10040:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   10044:	f019 0808 	ands.w	r8, r9, #8
{
   10048:	4604      	mov	r4, r0
   1004a:	4693      	mov	fp, r2
	if (processing) {
   1004c:	d00d      	beq.n	1006a <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
   1004e:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   10050:	bf0c      	ite	eq
   10052:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   10056:	f049 0920 	orrne.w	r9, r9, #32
   1005a:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   1005e:	f38b 8811 	msr	BASEPRI, fp
   10062:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   10066:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1006a:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
   1006e:	2902      	cmp	r1, #2
   10070:	d107      	bne.n	10082 <process_event+0x46>
			evt = process_recheck(mgr);
   10072:	4620      	mov	r0, r4
   10074:	f00a fbc5 	bl	1a802 <process_recheck>
		if (evt == EVT_NOP) {
   10078:	2800      	cmp	r0, #0
   1007a:	d0f0      	beq.n	1005e <process_event+0x22>
		if (evt == EVT_COMPLETE) {
   1007c:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1007e:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
   10080:	d14e      	bne.n	10120 <process_event+0xe4>
			res = mgr->last_res;
   10082:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   10084:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   10086:	2f00      	cmp	r7, #0
   10088:	da15      	bge.n	100b6 <process_event+0x7a>
		*clients = mgr->clients;
   1008a:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1008c:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
   10090:	e9c4 8800 	strd	r8, r8, [r4]
   10094:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   10098:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
   1009a:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   1009c:	8b21      	ldrh	r1, [r4, #24]
   1009e:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   100a2:	45ca      	cmp	sl, r9
   100a4:	d002      	beq.n	100ac <process_event+0x70>
		if (do_monitors
   100a6:	68a3      	ldr	r3, [r4, #8]
   100a8:	2b00      	cmp	r3, #0
   100aa:	d15a      	bne.n	10162 <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
   100ac:	b90d      	cbnz	r5, 100b2 <process_event+0x76>
		    || (transit != NULL)) {
   100ae:	2e00      	cmp	r6, #0
   100b0:	d071      	beq.n	10196 <process_event+0x15a>
   100b2:	2300      	movs	r3, #0
   100b4:	e056      	b.n	10164 <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   100b6:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   100ba:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   100bc:	2a01      	cmp	r2, #1
   100be:	d81e      	bhi.n	100fe <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   100c0:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   100c4:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   100c6:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   100c8:	b289      	uxth	r1, r1
   100ca:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   100ce:	d10a      	bne.n	100e6 <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   100d0:	b13d      	cbz	r5, 100e2 <process_event+0xa6>
   100d2:	8b63      	ldrh	r3, [r4, #26]
   100d4:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
   100d6:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
   100d8:	3301      	adds	r3, #1
   100da:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   100dc:	2a00      	cmp	r2, #0
   100de:	d1fa      	bne.n	100d6 <process_event+0x9a>
   100e0:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   100e2:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   100e6:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   100e8:	4620      	mov	r0, r4
   100ea:	f00a fb8a 	bl	1a802 <process_recheck>
   100ee:	4606      	mov	r6, r0
   100f0:	2800      	cmp	r0, #0
   100f2:	d0d3      	beq.n	1009c <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   100f4:	8b23      	ldrh	r3, [r4, #24]
   100f6:	f043 0320 	orr.w	r3, r3, #32
   100fa:	8323      	strh	r3, [r4, #24]
   100fc:	e7cd      	b.n	1009a <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
   100fe:	2b04      	cmp	r3, #4
   10100:	d10c      	bne.n	1011c <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10102:	f021 0107 	bic.w	r1, r1, #7
   10106:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   10108:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   1010a:	4620      	mov	r0, r4
   1010c:	f00a fb79 	bl	1a802 <process_recheck>
   10110:	4605      	mov	r5, r0
   10112:	2800      	cmp	r0, #0
   10114:	d0c1      	beq.n	1009a <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   10116:	f041 0120 	orr.w	r1, r1, #32
   1011a:	8321      	strh	r1, [r4, #24]
   1011c:	2500      	movs	r5, #0
   1011e:	e7bc      	b.n	1009a <process_event+0x5e>
		} else if (evt == EVT_START) {
   10120:	2803      	cmp	r0, #3
   10122:	d109      	bne.n	10138 <process_event+0xfc>
			transit = mgr->transitions->start;
   10124:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10126:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
   1012a:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1012c:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
   10130:	8323      	strh	r3, [r4, #24]
}
   10132:	2500      	movs	r5, #0
		res = 0;
   10134:	462f      	mov	r7, r5
   10136:	e7b1      	b.n	1009c <process_event+0x60>
		} else if (evt == EVT_STOP) {
   10138:	2804      	cmp	r0, #4
   1013a:	d106      	bne.n	1014a <process_event+0x10e>
			transit = mgr->transitions->stop;
   1013c:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1013e:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
   10142:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10144:	f043 0304 	orr.w	r3, r3, #4
   10148:	e7f2      	b.n	10130 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
   1014a:	2805      	cmp	r0, #5
   1014c:	d106      	bne.n	1015c <process_event+0x120>
			transit = mgr->transitions->reset;
   1014e:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10150:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
   10154:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10156:	f043 0305 	orr.w	r3, r3, #5
   1015a:	e7e9      	b.n	10130 <process_event+0xf4>
   1015c:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   1015e:	462e      	mov	r6, r5
   10160:	e7e8      	b.n	10134 <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
   10162:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   10164:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   10168:	8321      	strh	r1, [r4, #24]
   1016a:	f38b 8811 	msr	BASEPRI, fp
   1016e:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   10172:	b9fb      	cbnz	r3, 101b4 <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
   10174:	bb85      	cbnz	r5, 101d8 <process_event+0x19c>
			if (transit != NULL) {
   10176:	b116      	cbz	r6, 1017e <process_event+0x142>
				transit(mgr, transition_complete);
   10178:	491f      	ldr	r1, [pc, #124]	; (101f8 <process_event+0x1bc>)
   1017a:	4620      	mov	r0, r4
   1017c:	47b0      	blx	r6
	__asm__ volatile(
   1017e:	f04f 0340 	mov.w	r3, #64	; 0x40
   10182:	f3ef 8b11 	mrs	fp, BASEPRI
   10186:	f383 8811 	msr	BASEPRI, r3
   1018a:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   1018e:	8b23      	ldrh	r3, [r4, #24]
   10190:	f023 0308 	bic.w	r3, r3, #8
   10194:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   10196:	8b23      	ldrh	r3, [r4, #24]
   10198:	06da      	lsls	r2, r3, #27
   1019a:	d525      	bpl.n	101e8 <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   1019c:	f023 0310 	bic.w	r3, r3, #16
   101a0:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
   101a2:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   101a4:	f8b4 9018 	ldrh.w	r9, [r4, #24]
   101a8:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
   101ac:	2900      	cmp	r1, #0
   101ae:	f47f af5e 	bne.w	1006e <process_event+0x32>
out:
   101b2:	e754      	b.n	1005e <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   101b4:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   101b6:	2900      	cmp	r1, #0
   101b8:	d0dc      	beq.n	10174 <process_event+0x138>
	return node->next;
   101ba:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
   101be:	f8d1 b004 	ldr.w	fp, [r1, #4]
   101c2:	463b      	mov	r3, r7
   101c4:	4652      	mov	r2, sl
   101c6:	4620      	mov	r0, r4
   101c8:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   101ca:	f1b9 0f00 	cmp.w	r9, #0
   101ce:	d0d1      	beq.n	10174 <process_event+0x138>
   101d0:	4649      	mov	r1, r9
   101d2:	f8d9 9000 	ldr.w	r9, [r9]
   101d6:	e7f2      	b.n	101be <process_event+0x182>
   101d8:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   101da:	463b      	mov	r3, r7
   101dc:	4652      	mov	r2, sl
   101de:	4620      	mov	r0, r4
   101e0:	682d      	ldr	r5, [r5, #0]
   101e2:	f00a fb2a 	bl	1a83a <notify_one>
   101e6:	e7c5      	b.n	10174 <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   101e8:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   101ec:	bf1e      	ittt	ne
   101ee:	f023 0320 	bicne.w	r3, r3, #32
   101f2:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
   101f4:	2102      	movne	r1, #2
   101f6:	e7d5      	b.n	101a4 <process_event+0x168>
   101f8:	0001a867 	.word	0x0001a867

000101fc <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   101fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10200:	b091      	sub	sp, #68	; 0x44
   10202:	468b      	mov	fp, r1
   10204:	9002      	str	r0, [sp, #8]
   10206:	4692      	mov	sl, r2
   10208:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   1020a:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   1020c:	f89a 0000 	ldrb.w	r0, [sl]
   10210:	b908      	cbnz	r0, 10216 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
   10212:	4628      	mov	r0, r5
   10214:	e35f      	b.n	108d6 <cbvprintf+0x6da>
		if (*fp != '%') {
   10216:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
   10218:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
   1021c:	d007      	beq.n	1022e <cbvprintf+0x32>
			OUTC('%');
   1021e:	9b02      	ldr	r3, [sp, #8]
   10220:	4659      	mov	r1, fp
   10222:	4798      	blx	r3
   10224:	2800      	cmp	r0, #0
   10226:	f2c0 8356 	blt.w	108d6 <cbvprintf+0x6da>
   1022a:	3501      	adds	r5, #1
			break;
   1022c:	e212      	b.n	10654 <cbvprintf+0x458>
		} state = {
   1022e:	2218      	movs	r2, #24
   10230:	2100      	movs	r1, #0
   10232:	a80a      	add	r0, sp, #40	; 0x28
   10234:	f00c fd42 	bl	1ccbc <memset>
	if (*sp == '%') {
   10238:	f89a 3001 	ldrb.w	r3, [sl, #1]
   1023c:	2b25      	cmp	r3, #37	; 0x25
   1023e:	d078      	beq.n	10332 <cbvprintf+0x136>
   10240:	2200      	movs	r2, #0
   10242:	4610      	mov	r0, r2
   10244:	4696      	mov	lr, r2
   10246:	4694      	mov	ip, r2
   10248:	4616      	mov	r6, r2
   1024a:	4639      	mov	r1, r7
		switch (*sp) {
   1024c:	f817 3b01 	ldrb.w	r3, [r7], #1
   10250:	2b2b      	cmp	r3, #43	; 0x2b
   10252:	f000 809d 	beq.w	10390 <cbvprintf+0x194>
   10256:	f200 8094 	bhi.w	10382 <cbvprintf+0x186>
   1025a:	2b20      	cmp	r3, #32
   1025c:	f000 809b 	beq.w	10396 <cbvprintf+0x19a>
   10260:	2b23      	cmp	r3, #35	; 0x23
   10262:	f000 809b 	beq.w	1039c <cbvprintf+0x1a0>
   10266:	b12e      	cbz	r6, 10274 <cbvprintf+0x78>
   10268:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
   1026c:	f046 0604 	orr.w	r6, r6, #4
   10270:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
   10274:	f1bc 0f00 	cmp.w	ip, #0
   10278:	d005      	beq.n	10286 <cbvprintf+0x8a>
   1027a:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
   1027e:	f046 0608 	orr.w	r6, r6, #8
   10282:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
   10286:	f1be 0f00 	cmp.w	lr, #0
   1028a:	d005      	beq.n	10298 <cbvprintf+0x9c>
   1028c:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
   10290:	f046 0610 	orr.w	r6, r6, #16
   10294:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
   10298:	b128      	cbz	r0, 102a6 <cbvprintf+0xaa>
   1029a:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   1029e:	f040 0020 	orr.w	r0, r0, #32
   102a2:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   102a6:	b12a      	cbz	r2, 102b4 <cbvprintf+0xb8>
   102a8:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   102ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   102b0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
   102b4:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   102b8:	f002 0044 	and.w	r0, r2, #68	; 0x44
   102bc:	2844      	cmp	r0, #68	; 0x44
   102be:	d103      	bne.n	102c8 <cbvprintf+0xcc>
		conv->flag_zero = false;
   102c0:	f36f 1286 	bfc	r2, #6, #1
   102c4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
   102c8:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
   102cc:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
   102ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   102d2:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
   102d6:	d17b      	bne.n	103d0 <cbvprintf+0x1d4>
		conv->width_star = true;
   102d8:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   102dc:	f042 0201 	orr.w	r2, r2, #1
			++sp;
   102e0:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
   102e2:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
   102e6:	781a      	ldrb	r2, [r3, #0]
   102e8:	2a2e      	cmp	r2, #46	; 0x2e
   102ea:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   102ee:	bf0c      	ite	eq
   102f0:	2101      	moveq	r1, #1
   102f2:	2100      	movne	r1, #0
   102f4:	f361 0241 	bfi	r2, r1, #1, #1
   102f8:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
   102fc:	d174      	bne.n	103e8 <cbvprintf+0x1ec>
	if (*sp == '*') {
   102fe:	785a      	ldrb	r2, [r3, #1]
   10300:	2a2a      	cmp	r2, #42	; 0x2a
   10302:	d06a      	beq.n	103da <cbvprintf+0x1de>
	++sp;
   10304:	3301      	adds	r3, #1
	size_t val = 0;
   10306:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
   10308:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1030a:	4618      	mov	r0, r3
   1030c:	f810 2b01 	ldrb.w	r2, [r0], #1
   10310:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   10314:	2f09      	cmp	r7, #9
   10316:	f240 808e 	bls.w	10436 <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
   1031a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
   1031e:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
   10320:	f3c2 0040 	ubfx	r0, r2, #1, #1
   10324:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
   10328:	f361 0241 	bfi	r2, r1, #1, #1
   1032c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
   10330:	e05a      	b.n	103e8 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
   10332:	f10a 0702 	add.w	r7, sl, #2
   10336:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
   1033a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   1033e:	07d9      	lsls	r1, r3, #31
   10340:	f140 8149 	bpl.w	105d6 <cbvprintf+0x3da>
			width = va_arg(ap, int);
   10344:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
   10348:	f1b9 0f00 	cmp.w	r9, #0
   1034c:	da07      	bge.n	1035e <cbvprintf+0x162>
				conv->flag_dash = true;
   1034e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   10352:	f042 0204 	orr.w	r2, r2, #4
   10356:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
   1035a:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
   1035e:	075a      	lsls	r2, r3, #29
   10360:	f140 8142 	bpl.w	105e8 <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
   10364:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
   10368:	f1b8 0f00 	cmp.w	r8, #0
   1036c:	f280 8141 	bge.w	105f2 <cbvprintf+0x3f6>
				conv->prec_present = false;
   10370:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   10374:	f36f 0341 	bfc	r3, #1, #1
   10378:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
   1037c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   10380:	e137      	b.n	105f2 <cbvprintf+0x3f6>
		switch (*sp) {
   10382:	2b2d      	cmp	r3, #45	; 0x2d
   10384:	d00c      	beq.n	103a0 <cbvprintf+0x1a4>
   10386:	2b30      	cmp	r3, #48	; 0x30
   10388:	f47f af6d 	bne.w	10266 <cbvprintf+0x6a>
			conv->flag_zero = true;
   1038c:	2201      	movs	r2, #1
	} while (loop);
   1038e:	e75c      	b.n	1024a <cbvprintf+0x4e>
			conv->flag_plus = true;
   10390:	f04f 0c01 	mov.w	ip, #1
   10394:	e759      	b.n	1024a <cbvprintf+0x4e>
			conv->flag_space = true;
   10396:	f04f 0e01 	mov.w	lr, #1
   1039a:	e756      	b.n	1024a <cbvprintf+0x4e>
			conv->flag_hash = true;
   1039c:	2001      	movs	r0, #1
   1039e:	e754      	b.n	1024a <cbvprintf+0x4e>
		switch (*sp) {
   103a0:	2601      	movs	r6, #1
   103a2:	e752      	b.n	1024a <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
   103a4:	fb0c 0202 	mla	r2, ip, r2, r0
   103a8:	3a30      	subs	r2, #48	; 0x30
   103aa:	4633      	mov	r3, r6
   103ac:	461e      	mov	r6, r3
   103ae:	f816 0b01 	ldrb.w	r0, [r6], #1
   103b2:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   103b6:	2f09      	cmp	r7, #9
   103b8:	d9f4      	bls.n	103a4 <cbvprintf+0x1a8>
	if (sp != wp) {
   103ba:	4299      	cmp	r1, r3
   103bc:	d093      	beq.n	102e6 <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
   103be:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
   103c2:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
   103c4:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
   103c6:	f362 0141 	bfi	r1, r2, #1, #1
   103ca:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   103ce:	e78a      	b.n	102e6 <cbvprintf+0xea>
   103d0:	460b      	mov	r3, r1
	size_t val = 0;
   103d2:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   103d4:	f04f 0c0a 	mov.w	ip, #10
   103d8:	e7e8      	b.n	103ac <cbvprintf+0x1b0>
		conv->prec_star = true;
   103da:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   103de:	f042 0204 	orr.w	r2, r2, #4
   103e2:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
   103e6:	3302      	adds	r3, #2
	switch (*sp) {
   103e8:	461f      	mov	r7, r3
   103ea:	f817 2b01 	ldrb.w	r2, [r7], #1
   103ee:	2a6c      	cmp	r2, #108	; 0x6c
   103f0:	d041      	beq.n	10476 <cbvprintf+0x27a>
   103f2:	d825      	bhi.n	10440 <cbvprintf+0x244>
   103f4:	2a68      	cmp	r2, #104	; 0x68
   103f6:	d02b      	beq.n	10450 <cbvprintf+0x254>
   103f8:	2a6a      	cmp	r2, #106	; 0x6a
   103fa:	d046      	beq.n	1048a <cbvprintf+0x28e>
   103fc:	2a4c      	cmp	r2, #76	; 0x4c
   103fe:	d04c      	beq.n	1049a <cbvprintf+0x29e>
   10400:	461f      	mov	r7, r3
	conv->specifier = *sp++;
   10402:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
   10406:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	conv->specifier = *sp++;
   1040a:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
   1040e:	2a78      	cmp	r2, #120	; 0x78
   10410:	f200 80d9 	bhi.w	105c6 <cbvprintf+0x3ca>
   10414:	2a57      	cmp	r2, #87	; 0x57
   10416:	d84d      	bhi.n	104b4 <cbvprintf+0x2b8>
   10418:	2a41      	cmp	r2, #65	; 0x41
   1041a:	d003      	beq.n	10424 <cbvprintf+0x228>
   1041c:	3a45      	subs	r2, #69	; 0x45
   1041e:	2a02      	cmp	r2, #2
   10420:	f200 80d1 	bhi.w	105c6 <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
   10424:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   10428:	2204      	movs	r2, #4
   1042a:	f362 0302 	bfi	r3, r2, #0, #3
   1042e:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
   10432:	2301      	movs	r3, #1
			break;
   10434:	e09e      	b.n	10574 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
   10436:	fb06 2101 	mla	r1, r6, r1, r2
   1043a:	3930      	subs	r1, #48	; 0x30
   1043c:	4603      	mov	r3, r0
   1043e:	e764      	b.n	1030a <cbvprintf+0x10e>
	switch (*sp) {
   10440:	2a74      	cmp	r2, #116	; 0x74
   10442:	d026      	beq.n	10492 <cbvprintf+0x296>
   10444:	2a7a      	cmp	r2, #122	; 0x7a
   10446:	d1db      	bne.n	10400 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
   10448:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   1044c:	2206      	movs	r2, #6
   1044e:	e00d      	b.n	1046c <cbvprintf+0x270>
		if (*++sp == 'h') {
   10450:	785a      	ldrb	r2, [r3, #1]
   10452:	2a68      	cmp	r2, #104	; 0x68
   10454:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   10458:	d106      	bne.n	10468 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
   1045a:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   1045c:	f361 02c6 	bfi	r2, r1, #3, #4
   10460:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
   10464:	1c9f      	adds	r7, r3, #2
   10466:	e7cc      	b.n	10402 <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
   10468:	4613      	mov	r3, r2
   1046a:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
   1046c:	f362 03c6 	bfi	r3, r2, #3, #4
   10470:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
   10474:	e7c5      	b.n	10402 <cbvprintf+0x206>
		if (*++sp == 'l') {
   10476:	785a      	ldrb	r2, [r3, #1]
   10478:	2a6c      	cmp	r2, #108	; 0x6c
   1047a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   1047e:	d101      	bne.n	10484 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
   10480:	2104      	movs	r1, #4
   10482:	e7eb      	b.n	1045c <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
   10484:	4613      	mov	r3, r2
   10486:	2203      	movs	r2, #3
   10488:	e7f0      	b.n	1046c <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
   1048a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   1048e:	2205      	movs	r2, #5
   10490:	e7ec      	b.n	1046c <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
   10492:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   10496:	2207      	movs	r2, #7
   10498:	e7e8      	b.n	1046c <cbvprintf+0x270>
		conv->unsupported = true;
   1049a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   1049e:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
   104a2:	f023 0302 	bic.w	r3, r3, #2
   104a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   104aa:	f043 0302 	orr.w	r3, r3, #2
   104ae:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
   104b2:	e7a6      	b.n	10402 <cbvprintf+0x206>
	switch (conv->specifier) {
   104b4:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
   104b8:	2920      	cmp	r1, #32
   104ba:	f200 8084 	bhi.w	105c6 <cbvprintf+0x3ca>
   104be:	a001      	add	r0, pc, #4	; (adr r0, 104c4 <cbvprintf+0x2c8>)
   104c0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   104c4:	00010589 	.word	0x00010589
   104c8:	000105c7 	.word	0x000105c7
   104cc:	000105c7 	.word	0x000105c7
   104d0:	000105c7 	.word	0x000105c7
   104d4:	000105c7 	.word	0x000105c7
   104d8:	000105c7 	.word	0x000105c7
   104dc:	000105c7 	.word	0x000105c7
   104e0:	000105c7 	.word	0x000105c7
   104e4:	000105c7 	.word	0x000105c7
   104e8:	00010425 	.word	0x00010425
   104ec:	000105c7 	.word	0x000105c7
   104f0:	00010589 	.word	0x00010589
   104f4:	00010549 	.word	0x00010549
   104f8:	00010425 	.word	0x00010425
   104fc:	00010425 	.word	0x00010425
   10500:	00010425 	.word	0x00010425
   10504:	000105c7 	.word	0x000105c7
   10508:	00010549 	.word	0x00010549
   1050c:	000105c7 	.word	0x000105c7
   10510:	000105c7 	.word	0x000105c7
   10514:	000105c7 	.word	0x000105c7
   10518:	000105c7 	.word	0x000105c7
   1051c:	00010591 	.word	0x00010591
   10520:	00010589 	.word	0x00010589
   10524:	000105ad 	.word	0x000105ad
   10528:	000105c7 	.word	0x000105c7
   1052c:	000105c7 	.word	0x000105c7
   10530:	000105ad 	.word	0x000105ad
   10534:	000105c7 	.word	0x000105c7
   10538:	00010589 	.word	0x00010589
   1053c:	000105c7 	.word	0x000105c7
   10540:	000105c7 	.word	0x000105c7
   10544:	00010589 	.word	0x00010589
		conv->specifier_cat = SPECIFIER_SINT;
   10548:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
   1054c:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
   1054e:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   10552:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   10556:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   10558:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
   1055c:	bf02      	ittt	eq
   1055e:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
   10562:	f041 0101 	orreq.w	r1, r1, #1
   10566:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
   1056a:	2a63      	cmp	r2, #99	; 0x63
   1056c:	d131      	bne.n	105d2 <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
   1056e:	3b00      	subs	r3, #0
   10570:	bf18      	it	ne
   10572:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   10574:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   10578:	f3c2 0140 	ubfx	r1, r2, #1, #1
   1057c:	430b      	orrs	r3, r1
   1057e:	f363 0241 	bfi	r2, r3, #1, #1
   10582:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
   10586:	e6d8      	b.n	1033a <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
   10588:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
   1058c:	2002      	movs	r0, #2
   1058e:	e7de      	b.n	1054e <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
   10590:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   10594:	f003 0378 	and.w	r3, r3, #120	; 0x78
   10598:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
   1059c:	2103      	movs	r1, #3
   1059e:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   105a2:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
   105a4:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   105a8:	4143      	adcs	r3, r0
   105aa:	e7e3      	b.n	10574 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
   105ac:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   105b0:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
   105b2:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   105b6:	f361 0202 	bfi	r2, r1, #0, #3
   105ba:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
   105be:	bf14      	ite	ne
   105c0:	2301      	movne	r3, #1
   105c2:	2300      	moveq	r3, #0
   105c4:	e7d6      	b.n	10574 <cbvprintf+0x378>
		conv->invalid = true;
   105c6:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   105ca:	f043 0301 	orr.w	r3, r3, #1
   105ce:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
   105d2:	2300      	movs	r3, #0
   105d4:	e7ce      	b.n	10574 <cbvprintf+0x378>
		} else if (conv->width_present) {
   105d6:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
   105da:	2a00      	cmp	r2, #0
			width = conv->width_value;
   105dc:	bfb4      	ite	lt
   105de:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
   105e2:	f04f 39ff 	movge.w	r9, #4294967295	; 0xffffffff
   105e6:	e6ba      	b.n	1035e <cbvprintf+0x162>
		} else if (conv->prec_present) {
   105e8:	079b      	lsls	r3, r3, #30
   105ea:	f57f aec7 	bpl.w	1037c <cbvprintf+0x180>
			precision = conv->prec_value;
   105ee:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
   105f2:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_value = 0;
   105f6:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   105f8:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
   105fc:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
   10600:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   10604:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   10606:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   1060a:	d138      	bne.n	1067e <cbvprintf+0x482>
			switch (length_mod) {
   1060c:	1ecb      	subs	r3, r1, #3
   1060e:	2b04      	cmp	r3, #4
   10610:	d822      	bhi.n	10658 <cbvprintf+0x45c>
   10612:	e8df f003 	tbb	[pc, r3]
   10616:	0903      	.short	0x0903
   10618:	2109      	.short	0x2109
   1061a:	21          	.byte	0x21
   1061b:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
   1061c:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
   10620:	17da      	asrs	r2, r3, #31
   10622:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
   10626:	e006      	b.n	10636 <cbvprintf+0x43a>
					(sint_value_type)va_arg(ap, intmax_t);
   10628:	3407      	adds	r4, #7
   1062a:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
   1062e:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   10632:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
   10636:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   1063a:	f013 0603 	ands.w	r6, r3, #3
   1063e:	d056      	beq.n	106ee <cbvprintf+0x4f2>
			OUTS(sp, fp);
   10640:	9802      	ldr	r0, [sp, #8]
   10642:	463b      	mov	r3, r7
   10644:	4652      	mov	r2, sl
   10646:	4659      	mov	r1, fp
   10648:	f00a fc81 	bl	1af4e <outs>
   1064c:	2800      	cmp	r0, #0
   1064e:	f2c0 8142 	blt.w	108d6 <cbvprintf+0x6da>
   10652:	4405      	add	r5, r0
			continue;
   10654:	46ba      	mov	sl, r7
   10656:	e5d9      	b.n	1020c <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   10658:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   1065c:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   1065e:	ea4f 72e3 	mov.w	r2, r3, asr #31
   10662:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
   10666:	d105      	bne.n	10674 <cbvprintf+0x478>
				value->uint = (unsigned char)value->uint;
   10668:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
   1066c:	930a      	str	r3, [sp, #40]	; 0x28
   1066e:	2300      	movs	r3, #0
   10670:	930b      	str	r3, [sp, #44]	; 0x2c
   10672:	e7e0      	b.n	10636 <cbvprintf+0x43a>
			} else if (length_mod == LENGTH_H) {
   10674:	2902      	cmp	r1, #2
   10676:	d1de      	bne.n	10636 <cbvprintf+0x43a>
				value->sint = (short)value->sint;
   10678:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   1067c:	e7d0      	b.n	10620 <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
   1067e:	2b02      	cmp	r3, #2
   10680:	d123      	bne.n	106ca <cbvprintf+0x4ce>
			switch (length_mod) {
   10682:	1ecb      	subs	r3, r1, #3
   10684:	2b04      	cmp	r3, #4
   10686:	d813      	bhi.n	106b0 <cbvprintf+0x4b4>
   10688:	e8df f003 	tbb	[pc, r3]
   1068c:	120a0a03 	.word	0x120a0a03
   10690:	12          	.byte	0x12
   10691:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
   10692:	6822      	ldr	r2, [r4, #0]
   10694:	920a      	str	r2, [sp, #40]	; 0x28
   10696:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
   10698:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
   1069a:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
   1069c:	4604      	mov	r4, r0
   1069e:	e7ca      	b.n	10636 <cbvprintf+0x43a>
					(uint_value_type)va_arg(ap,
   106a0:	1de0      	adds	r0, r4, #7
   106a2:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
   106a6:	e8f0 2302 	ldrd	r2, r3, [r0], #8
   106aa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
   106ae:	e7f5      	b.n	1069c <cbvprintf+0x4a0>
					(uint_value_type)va_arg(ap, size_t);
   106b0:	f854 3b04 	ldr.w	r3, [r4], #4
   106b4:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
   106b6:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
   106b8:	f04f 0300 	mov.w	r3, #0
   106bc:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
   106be:	d0d3      	beq.n	10668 <cbvprintf+0x46c>
			} else if (length_mod == LENGTH_H) {
   106c0:	2902      	cmp	r1, #2
   106c2:	d1b8      	bne.n	10636 <cbvprintf+0x43a>
				value->uint = (unsigned short)value->uint;
   106c4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   106c8:	e7d0      	b.n	1066c <cbvprintf+0x470>
		} else if (specifier_cat == SPECIFIER_FP) {
   106ca:	2b04      	cmp	r3, #4
   106cc:	d109      	bne.n	106e2 <cbvprintf+0x4e6>
					(sint_value_type)va_arg(ap, long long);
   106ce:	1de3      	adds	r3, r4, #7
   106d0:	f023 0307 	bic.w	r3, r3, #7
   106d4:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
   106d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   106dc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   106e0:	e7a9      	b.n	10636 <cbvprintf+0x43a>
		} else if (specifier_cat == SPECIFIER_PTR) {
   106e2:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
   106e4:	bf04      	itt	eq
   106e6:	f854 3b04 	ldreq.w	r3, [r4], #4
   106ea:	930a      	streq	r3, [sp, #40]	; 0x28
   106ec:	e7a3      	b.n	10636 <cbvprintf+0x43a>
		switch (conv->specifier) {
   106ee:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   106f2:	2878      	cmp	r0, #120	; 0x78
   106f4:	d8ae      	bhi.n	10654 <cbvprintf+0x458>
   106f6:	2862      	cmp	r0, #98	; 0x62
   106f8:	d822      	bhi.n	10740 <cbvprintf+0x544>
   106fa:	2825      	cmp	r0, #37	; 0x25
   106fc:	f43f ad8f 	beq.w	1021e <cbvprintf+0x22>
   10700:	2858      	cmp	r0, #88	; 0x58
   10702:	d1a7      	bne.n	10654 <cbvprintf+0x458>
			bps = encode_uint(value->uint, conv, buf, bpe);
   10704:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   10708:	9300      	str	r3, [sp, #0]
   1070a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1070e:	ab04      	add	r3, sp, #16
   10710:	aa0c      	add	r2, sp, #48	; 0x30
   10712:	f00a fbd6 	bl	1aec2 <encode_uint>
   10716:	4682      	mov	sl, r0
			if (precision >= 0) {
   10718:	f1b8 0f00 	cmp.w	r8, #0
   1071c:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   10720:	db0c      	blt.n	1073c <cbvprintf+0x540>
				conv->flag_zero = false;
   10722:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
   10726:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
   1072a:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   1072e:	4598      	cmp	r8, r3
				conv->flag_zero = false;
   10730:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
   10734:	d902      	bls.n	1073c <cbvprintf+0x540>
					conv->pad0_value = precision - (int)len;
   10736:	eba8 0303 	sub.w	r3, r8, r3
   1073a:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
   1073c:	4680      	mov	r8, r0
   1073e:	e03d      	b.n	107bc <cbvprintf+0x5c0>
		switch (conv->specifier) {
   10740:	3863      	subs	r0, #99	; 0x63
   10742:	2815      	cmp	r0, #21
   10744:	d886      	bhi.n	10654 <cbvprintf+0x458>
   10746:	a201      	add	r2, pc, #4	; (adr r2, 1074c <cbvprintf+0x550>)
   10748:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
   1074c:	000107cd 	.word	0x000107cd
   10750:	00010831 	.word	0x00010831
   10754:	00010655 	.word	0x00010655
   10758:	00010655 	.word	0x00010655
   1075c:	00010655 	.word	0x00010655
   10760:	00010655 	.word	0x00010655
   10764:	00010831 	.word	0x00010831
   10768:	00010655 	.word	0x00010655
   1076c:	00010655 	.word	0x00010655
   10770:	00010655 	.word	0x00010655
   10774:	00010655 	.word	0x00010655
   10778:	0001088b 	.word	0x0001088b
   1077c:	00010859 	.word	0x00010859
   10780:	0001085d 	.word	0x0001085d
   10784:	00010655 	.word	0x00010655
   10788:	00010655 	.word	0x00010655
   1078c:	000107a5 	.word	0x000107a5
   10790:	00010655 	.word	0x00010655
   10794:	00010859 	.word	0x00010859
   10798:	00010655 	.word	0x00010655
   1079c:	00010655 	.word	0x00010655
   107a0:	00010859 	.word	0x00010859
			if (precision >= 0) {
   107a4:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
   107a8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
   107ac:	db0a      	blt.n	107c4 <cbvprintf+0x5c8>
				len = strnlen(bps, precision);
   107ae:	4641      	mov	r1, r8
   107b0:	4650      	mov	r0, sl
   107b2:	f00c fa41 	bl	1cc38 <strnlen>
			bpe = bps + len;
   107b6:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
   107ba:	2600      	movs	r6, #0
		if (bps == NULL) {
   107bc:	f1ba 0f00 	cmp.w	sl, #0
   107c0:	d10c      	bne.n	107dc <cbvprintf+0x5e0>
   107c2:	e747      	b.n	10654 <cbvprintf+0x458>
				len = strlen(bps);
   107c4:	4650      	mov	r0, sl
   107c6:	f00c fa30 	bl	1cc2a <strlen>
   107ca:	e7f4      	b.n	107b6 <cbvprintf+0x5ba>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   107cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   107ce:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
   107d2:	2600      	movs	r6, #0
			bps = buf;
   107d4:	f10d 0a10 	add.w	sl, sp, #16
			bpe = buf + 1;
   107d8:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
   107dc:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
   107e0:	b106      	cbz	r6, 107e4 <cbvprintf+0x5e8>
			nj_len += 1U;
   107e2:	3301      	adds	r3, #1
		if (conv->altform_0c) {
   107e4:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   107e8:	06d0      	lsls	r0, r2, #27
   107ea:	d568      	bpl.n	108be <cbvprintf+0x6c2>
			nj_len += 2U;
   107ec:	3302      	adds	r3, #2
		if (conv->pad_fp) {
   107ee:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
   107f0:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
   107f2:	bf48      	it	mi
   107f4:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
   107f6:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
   107f8:	bf48      	it	mi
   107fa:	189b      	addmi	r3, r3, r2
		if (width > 0) {
   107fc:	f1b9 0f00 	cmp.w	r9, #0
   10800:	dd76      	ble.n	108f0 <cbvprintf+0x6f4>
			if (!conv->flag_dash) {
   10802:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
   10806:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
   1080a:	f3c2 0380 	ubfx	r3, r2, #2, #1
   1080e:	9303      	str	r3, [sp, #12]
   10810:	0753      	lsls	r3, r2, #29
   10812:	d46d      	bmi.n	108f0 <cbvprintf+0x6f4>
				if (conv->flag_zero) {
   10814:	0650      	lsls	r0, r2, #25
   10816:	d561      	bpl.n	108dc <cbvprintf+0x6e0>
					if (sign != 0) {
   10818:	b146      	cbz	r6, 1082c <cbvprintf+0x630>
						OUTC(sign);
   1081a:	9b02      	ldr	r3, [sp, #8]
   1081c:	4659      	mov	r1, fp
   1081e:	4630      	mov	r0, r6
   10820:	4798      	blx	r3
   10822:	2800      	cmp	r0, #0
   10824:	db57      	blt.n	108d6 <cbvprintf+0x6da>
						sign = 0;
   10826:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
   10828:	3501      	adds	r5, #1
						sign = 0;
   1082a:	461e      	mov	r6, r3
					pad = '0';
   1082c:	2330      	movs	r3, #48	; 0x30
   1082e:	e056      	b.n	108de <cbvprintf+0x6e2>
			if (conv->flag_plus) {
   10830:	071e      	lsls	r6, r3, #28
   10832:	d40f      	bmi.n	10854 <cbvprintf+0x658>
				sign = ' ';
   10834:	f013 0610 	ands.w	r6, r3, #16
   10838:	bf18      	it	ne
   1083a:	2620      	movne	r6, #32
			sint = value->sint;
   1083c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
   10840:	2b00      	cmp	r3, #0
   10842:	f6bf af5f 	bge.w	10704 <cbvprintf+0x508>
				value->uint = (uint_value_type)-sint;
   10846:	4252      	negs	r2, r2
   10848:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1084c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
   10850:	262d      	movs	r6, #45	; 0x2d
   10852:	e757      	b.n	10704 <cbvprintf+0x508>
				sign = '+';
   10854:	262b      	movs	r6, #43	; 0x2b
   10856:	e7f1      	b.n	1083c <cbvprintf+0x640>
		switch (conv->specifier) {
   10858:	2600      	movs	r6, #0
   1085a:	e753      	b.n	10704 <cbvprintf+0x508>
			if (value->ptr != NULL) {
   1085c:	980a      	ldr	r0, [sp, #40]	; 0x28
   1085e:	b340      	cbz	r0, 108b2 <cbvprintf+0x6b6>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   10860:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   10864:	9300      	str	r3, [sp, #0]
   10866:	aa0c      	add	r2, sp, #48	; 0x30
   10868:	ab04      	add	r3, sp, #16
   1086a:	2100      	movs	r1, #0
   1086c:	f00a fb29 	bl	1aec2 <encode_uint>
				conv->altform_0c = true;
   10870:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
   10874:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   10878:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   1087c:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
   10880:	4682      	mov	sl, r0
				conv->altform_0c = true;
   10882:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
   10886:	2600      	movs	r6, #0
				goto prec_int_pad0;
   10888:	e746      	b.n	10718 <cbvprintf+0x51c>
				store_count(conv, value->ptr, count);
   1088a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
   1088c:	2907      	cmp	r1, #7
   1088e:	f63f aee1 	bhi.w	10654 <cbvprintf+0x458>
   10892:	e8df f001 	tbb	[pc, r1]
   10896:	040c      	.short	0x040c
   10898:	08080c06 	.word	0x08080c06
   1089c:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
   1089e:	701d      	strb	r5, [r3, #0]
		break;
   108a0:	e6d8      	b.n	10654 <cbvprintf+0x458>
		*(short *)dp = (short)count;
   108a2:	801d      	strh	r5, [r3, #0]
		break;
   108a4:	e6d6      	b.n	10654 <cbvprintf+0x458>
		*(intmax_t *)dp = (intmax_t)count;
   108a6:	17ea      	asrs	r2, r5, #31
   108a8:	e9c3 5200 	strd	r5, r2, [r3]
		break;
   108ac:	e6d2      	b.n	10654 <cbvprintf+0x458>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   108ae:	601d      	str	r5, [r3, #0]
		break;
   108b0:	e6d0      	b.n	10654 <cbvprintf+0x458>
			bps = "(nil)";
   108b2:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 1097c <cbvprintf+0x780>
   108b6:	4606      	mov	r6, r0
			bpe = bps + 5;
   108b8:	f10a 0805 	add.w	r8, sl, #5
   108bc:	e78e      	b.n	107dc <cbvprintf+0x5e0>
		} else if (conv->altform_0) {
   108be:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
   108c0:	bf48      	it	mi
   108c2:	3301      	addmi	r3, #1
   108c4:	e793      	b.n	107ee <cbvprintf+0x5f2>
					OUTC(pad);
   108c6:	4618      	mov	r0, r3
   108c8:	9303      	str	r3, [sp, #12]
   108ca:	4659      	mov	r1, fp
   108cc:	9b02      	ldr	r3, [sp, #8]
   108ce:	4798      	blx	r3
   108d0:	2800      	cmp	r0, #0
   108d2:	9b03      	ldr	r3, [sp, #12]
   108d4:	da04      	bge.n	108e0 <cbvprintf+0x6e4>
#undef OUTS
#undef OUTC
}
   108d6:	b011      	add	sp, #68	; 0x44
   108d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   108dc:	2320      	movs	r3, #32
   108de:	444d      	add	r5, r9
   108e0:	464a      	mov	r2, r9
				while (width-- > 0) {
   108e2:	2a00      	cmp	r2, #0
   108e4:	eba5 0109 	sub.w	r1, r5, r9
   108e8:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   108ec:	dceb      	bgt.n	108c6 <cbvprintf+0x6ca>
   108ee:	460d      	mov	r5, r1
		if (sign != 0) {
   108f0:	b136      	cbz	r6, 10900 <cbvprintf+0x704>
			OUTC(sign);
   108f2:	9b02      	ldr	r3, [sp, #8]
   108f4:	4659      	mov	r1, fp
   108f6:	4630      	mov	r0, r6
   108f8:	4798      	blx	r3
   108fa:	2800      	cmp	r0, #0
   108fc:	dbeb      	blt.n	108d6 <cbvprintf+0x6da>
   108fe:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   10900:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   10904:	06d9      	lsls	r1, r3, #27
   10906:	d401      	bmi.n	1090c <cbvprintf+0x710>
   10908:	071a      	lsls	r2, r3, #28
   1090a:	d506      	bpl.n	1091a <cbvprintf+0x71e>
				OUTC('0');
   1090c:	9b02      	ldr	r3, [sp, #8]
   1090e:	4659      	mov	r1, fp
   10910:	2030      	movs	r0, #48	; 0x30
   10912:	4798      	blx	r3
   10914:	2800      	cmp	r0, #0
   10916:	dbde      	blt.n	108d6 <cbvprintf+0x6da>
   10918:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   1091a:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   1091e:	06db      	lsls	r3, r3, #27
   10920:	d507      	bpl.n	10932 <cbvprintf+0x736>
				OUTC(conv->specifier);
   10922:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   10926:	9b02      	ldr	r3, [sp, #8]
   10928:	4659      	mov	r1, fp
   1092a:	4798      	blx	r3
   1092c:	2800      	cmp	r0, #0
   1092e:	dbd2      	blt.n	108d6 <cbvprintf+0x6da>
   10930:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   10932:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   10934:	442e      	add	r6, r5
   10936:	1b73      	subs	r3, r6, r5
   10938:	2b00      	cmp	r3, #0
   1093a:	dc16      	bgt.n	1096a <cbvprintf+0x76e>
			OUTS(bps, bpe);
   1093c:	9802      	ldr	r0, [sp, #8]
   1093e:	4643      	mov	r3, r8
   10940:	4652      	mov	r2, sl
   10942:	4659      	mov	r1, fp
   10944:	f00a fb03 	bl	1af4e <outs>
   10948:	2800      	cmp	r0, #0
   1094a:	dbc4      	blt.n	108d6 <cbvprintf+0x6da>
   1094c:	4405      	add	r5, r0
		while (width > 0) {
   1094e:	44a9      	add	r9, r5
   10950:	eba9 0305 	sub.w	r3, r9, r5
   10954:	2b00      	cmp	r3, #0
   10956:	f77f ae7d 	ble.w	10654 <cbvprintf+0x458>
			OUTC(' ');
   1095a:	9b02      	ldr	r3, [sp, #8]
   1095c:	4659      	mov	r1, fp
   1095e:	2020      	movs	r0, #32
   10960:	4798      	blx	r3
   10962:	2800      	cmp	r0, #0
   10964:	dbb7      	blt.n	108d6 <cbvprintf+0x6da>
   10966:	3501      	adds	r5, #1
			--width;
   10968:	e7f2      	b.n	10950 <cbvprintf+0x754>
				OUTC('0');
   1096a:	9b02      	ldr	r3, [sp, #8]
   1096c:	4659      	mov	r1, fp
   1096e:	2030      	movs	r0, #48	; 0x30
   10970:	4798      	blx	r3
   10972:	2800      	cmp	r0, #0
   10974:	dbaf      	blt.n	108d6 <cbvprintf+0x6da>
   10976:	3501      	adds	r5, #1
   10978:	e7dd      	b.n	10936 <cbvprintf+0x73a>
   1097a:	bf00      	nop
   1097c:	00021990 	.word	0x00021990

00010980 <nvs_recover_last_ate>:
 *
 * addr should point to the faulty closing ate and will be updated to the last
 * valid ate. If no valid ate is found it will be left untouched.
 */
static int nvs_recover_last_ate(struct nvs_fs *fs, uint32_t *addr)
{
   10980:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   10984:	460f      	mov	r7, r1
   10986:	4606      	mov	r6, r0
	int rc;

	LOG_DBG("Recovering last ate from sector %d",
		(*addr >> ADDR_SECT_SHIFT));

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   10988:	2108      	movs	r1, #8
   1098a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c

	*addr -= ate_size;
	ate_end_addr = *addr;
	data_end_addr = *addr & ADDR_SECT_MASK;
   1098c:	f8df 9050 	ldr.w	r9, [pc, #80]	; 109e0 <nvs_recover_last_ate+0x60>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   10990:	f00a fbb9 	bl	1b106 <nvs_al_size.isra.0>
	*addr -= ate_size;
   10994:	683c      	ldr	r4, [r7, #0]
   10996:	1a24      	subs	r4, r4, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   10998:	4680      	mov	r8, r0
	*addr -= ate_size;
   1099a:	603c      	str	r4, [r7, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
   1099c:	ea04 0509 	and.w	r5, r4, r9
	while (ate_end_addr > data_end_addr) {
   109a0:	42ac      	cmp	r4, r5
   109a2:	d803      	bhi.n	109ac <nvs_recover_last_ate+0x2c>
			*addr = ate_end_addr;
		}
		ate_end_addr -= ate_size;
	}

	return 0;
   109a4:	2000      	movs	r0, #0
}
   109a6:	b003      	add	sp, #12
   109a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   109ac:	2308      	movs	r3, #8
   109ae:	466a      	mov	r2, sp
   109b0:	4621      	mov	r1, r4
   109b2:	4630      	mov	r0, r6
   109b4:	f00a fb01 	bl	1afba <nvs_flash_rd>
		if (rc) {
   109b8:	2800      	cmp	r0, #0
   109ba:	d1f4      	bne.n	109a6 <nvs_recover_last_ate+0x26>
		if (nvs_ate_valid(fs, &end_ate)) {
   109bc:	4669      	mov	r1, sp
   109be:	4630      	mov	r0, r6
   109c0:	f00a fbab 	bl	1b11a <nvs_ate_valid>
   109c4:	b140      	cbz	r0, 109d8 <nvs_recover_last_ate+0x58>
			data_end_addr += end_ate.offset + end_ate.len;
   109c6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   109ca:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			*addr = ate_end_addr;
   109ce:	603c      	str	r4, [r7, #0]
			data_end_addr &= ADDR_SECT_MASK;
   109d0:	ea05 0509 	and.w	r5, r5, r9
			data_end_addr += end_ate.offset + end_ate.len;
   109d4:	4413      	add	r3, r2
   109d6:	441d      	add	r5, r3
		ate_end_addr -= ate_size;
   109d8:	eba4 0408 	sub.w	r4, r4, r8
   109dc:	e7e0      	b.n	109a0 <nvs_recover_last_ate+0x20>
   109de:	bf00      	nop
   109e0:	ffff0000 	.word	0xffff0000

000109e4 <nvs_init>:

	return 0;
}

int nvs_init(struct nvs_fs *fs, const char *dev_name)
{
   109e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   109e8:	4604      	mov	r4, r0
   109ea:	b089      	sub	sp, #36	; 0x24
   109ec:	460d      	mov	r5, r1

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
   109ee:	f100 0714 	add.w	r7, r0, #20
	return z_impl_k_mutex_init(mutex);
   109f2:	4638      	mov	r0, r7
   109f4:	f00f fbe0 	bl	201b8 <z_impl_k_mutex_init>
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   109f8:	4628      	mov	r0, r5
   109fa:	f008 fb9d 	bl	19138 <z_impl_device_get_binding>

	fs->flash_device = device_get_binding(dev_name);
   109fe:	62a0      	str	r0, [r4, #40]	; 0x28
	if (!fs->flash_device) {
   10a00:	2800      	cmp	r0, #0
   10a02:	f000 811f 	beq.w	10c44 <nvs_init+0x260>
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
   10a06:	6883      	ldr	r3, [r0, #8]
   10a08:	691b      	ldr	r3, [r3, #16]
   10a0a:	4798      	blx	r3
		LOG_ERR("No valid flash device found");
		return -ENXIO;
	}

	fs->flash_parameters = flash_get_parameters(fs->flash_device);
   10a0c:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
   10a0e:	b928      	cbnz	r0, 10a1c <nvs_init+0x38>
		LOG_ERR("Could not obtain flash parameters");
		return -EINVAL;
   10a10:	f06f 0515 	mvn.w	r5, #21
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
   10a14:	4628      	mov	r0, r5
   10a16:	b009      	add	sp, #36	; 0x24
   10a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	write_block_size = flash_get_write_block_size(fs->flash_device);
   10a1c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->get_parameters(dev)->write_block_size;
   10a1e:	6883      	ldr	r3, [r0, #8]
   10a20:	691b      	ldr	r3, [r3, #16]
   10a22:	4798      	blx	r3
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
   10a24:	6803      	ldr	r3, [r0, #0]
   10a26:	3b01      	subs	r3, #1
   10a28:	2b1f      	cmp	r3, #31
   10a2a:	d8f1      	bhi.n	10a10 <nvs_init+0x2c>
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
   10a2c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   10a2e:	6821      	ldr	r1, [r4, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
   10a30:	aa05      	add	r2, sp, #20
   10a32:	f00f f9b1 	bl	1fd98 <z_impl_flash_get_page_info_by_offs>
	if (rc) {
   10a36:	2800      	cmp	r0, #0
   10a38:	d1ea      	bne.n	10a10 <nvs_init+0x2c>
	if (!fs->sector_size || fs->sector_size % info.size) {
   10a3a:	89a5      	ldrh	r5, [r4, #12]
   10a3c:	2d00      	cmp	r5, #0
   10a3e:	d0e7      	beq.n	10a10 <nvs_init+0x2c>
   10a40:	9b06      	ldr	r3, [sp, #24]
   10a42:	fbb5 f2f3 	udiv	r2, r5, r3
   10a46:	fb03 5512 	mls	r5, r3, r2, r5
   10a4a:	2d00      	cmp	r5, #0
   10a4c:	d1e0      	bne.n	10a10 <nvs_init+0x2c>
	if (fs->sector_count < 2) {
   10a4e:	89e3      	ldrh	r3, [r4, #14]
   10a50:	2b01      	cmp	r3, #1
   10a52:	d9dd      	bls.n	10a10 <nvs_init+0x2c>
	uint8_t erase_value = fs->flash_parameters->erase_value;
   10a54:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	uint32_t addr = 0U;
   10a56:	9500      	str	r5, [sp, #0]
	uint8_t erase_value = fs->flash_parameters->erase_value;
   10a58:	f893 8004 	ldrb.w	r8, [r3, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   10a5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10a60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   10a64:	4638      	mov	r0, r7
   10a66:	f008 fd75 	bl	19554 <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   10a6a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   10a6c:	2108      	movs	r1, #8
   10a6e:	f00a fb4a 	bl	1b106 <nvs_al_size.isra.0>
	uint16_t i, closed_sectors = 0;
   10a72:	46a9      	mov	r9, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   10a74:	4606      	mov	r6, r0
	for (i = 0; i < fs->sector_count; i++) {
   10a76:	89e3      	ldrh	r3, [r4, #14]
   10a78:	fa1f fa85 	uxth.w	sl, r5
   10a7c:	4553      	cmp	r3, sl
   10a7e:	d845      	bhi.n	10b0c <nvs_init+0x128>
	if (closed_sectors == fs->sector_count) {
   10a80:	89e3      	ldrh	r3, [r4, #14]
   10a82:	454b      	cmp	r3, r9
   10a84:	f000 80d3 	beq.w	10c2e <nvs_init+0x24a>
	if (i == fs->sector_count) {
   10a88:	4553      	cmp	r3, sl
   10a8a:	d10b      	bne.n	10aa4 <nvs_init+0xc0>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
   10a8c:	9900      	ldr	r1, [sp, #0]
   10a8e:	2308      	movs	r3, #8
   10a90:	4642      	mov	r2, r8
   10a92:	1b89      	subs	r1, r1, r6
   10a94:	4620      	mov	r0, r4
   10a96:	f00a fac8 	bl	1b02a <nvs_flash_cmp_const>
		if (!rc) {
   10a9a:	b918      	cbnz	r0, 10aa4 <nvs_init+0xc0>
			nvs_sector_advance(fs, &addr);
   10a9c:	89e0      	ldrh	r0, [r4, #14]
   10a9e:	4669      	mov	r1, sp
   10aa0:	f00a fb26 	bl	1b0f0 <nvs_sector_advance.isra.0>
	rc = nvs_recover_last_ate(fs, &addr);
   10aa4:	4669      	mov	r1, sp
   10aa6:	4620      	mov	r0, r4
   10aa8:	f7ff ff6a 	bl	10980 <nvs_recover_last_ate>
	if (rc) {
   10aac:	4605      	mov	r5, r0
   10aae:	2800      	cmp	r0, #0
   10ab0:	f040 80bf 	bne.w	10c32 <nvs_init+0x24e>
	fs->ate_wra = addr;
   10ab4:	9b00      	ldr	r3, [sp, #0]
	fs->data_wra = addr & ADDR_SECT_MASK;
   10ab6:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 10c9c <nvs_init+0x2b8>
	fs->ate_wra = addr;
   10aba:	6063      	str	r3, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
   10abc:	ea03 0309 	and.w	r3, r3, r9
   10ac0:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra >= fs->data_wra) {
   10ac2:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   10ac6:	4299      	cmp	r1, r3
   10ac8:	d30e      	bcc.n	10ae8 <nvs_init+0x104>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   10aca:	2308      	movs	r3, #8
   10acc:	aa01      	add	r2, sp, #4
   10ace:	4620      	mov	r0, r4
   10ad0:	f00a fa73 	bl	1afba <nvs_flash_rd>
		if (rc) {
   10ad4:	b9c0      	cbnz	r0, 10b08 <nvs_init+0x124>
   10ad6:	ab01      	add	r3, sp, #4
		if (data8[i] != value) {
   10ad8:	f813 2b01 	ldrb.w	r2, [r3], #1
   10adc:	4590      	cmp	r8, r2
   10ade:	f040 80c1 	bne.w	10c64 <nvs_init+0x280>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   10ae2:	3001      	adds	r0, #1
   10ae4:	2808      	cmp	r0, #8
   10ae6:	d1f7      	bne.n	10ad8 <nvs_init+0xf4>
	addr = fs->ate_wra & ADDR_SECT_MASK;
   10ae8:	6863      	ldr	r3, [r4, #4]
	nvs_sector_advance(fs, &addr);
   10aea:	89e0      	ldrh	r0, [r4, #14]
	addr = fs->ate_wra & ADDR_SECT_MASK;
   10aec:	0c1b      	lsrs	r3, r3, #16
   10aee:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &addr);
   10af0:	4669      	mov	r1, sp
	addr = fs->ate_wra & ADDR_SECT_MASK;
   10af2:	9300      	str	r3, [sp, #0]
	nvs_sector_advance(fs, &addr);
   10af4:	f00a fafc 	bl	1b0f0 <nvs_sector_advance.isra.0>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
   10af8:	89a3      	ldrh	r3, [r4, #12]
   10afa:	9900      	ldr	r1, [sp, #0]
   10afc:	4642      	mov	r2, r8
   10afe:	4620      	mov	r0, r4
   10b00:	f00a fa93 	bl	1b02a <nvs_flash_cmp_const>
	if (rc < 0) {
   10b04:	2800      	cmp	r0, #0
   10b06:	da26      	bge.n	10b56 <nvs_init+0x172>
   10b08:	4605      	mov	r5, r0
   10b0a:	e092      	b.n	10c32 <nvs_init+0x24e>
		       (uint16_t)(fs->sector_size - ate_size);
   10b0c:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
   10b0e:	042b      	lsls	r3, r5, #16
		       (uint16_t)(fs->sector_size - ate_size);
   10b10:	1b89      	subs	r1, r1, r6
		addr = (i << ADDR_SECT_SHIFT) +
   10b12:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   10b16:	4642      	mov	r2, r8
   10b18:	2308      	movs	r3, #8
   10b1a:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
   10b1c:	9100      	str	r1, [sp, #0]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   10b1e:	f00a fa84 	bl	1b02a <nvs_flash_cmp_const>
		if (rc) {
   10b22:	b178      	cbz	r0, 10b44 <nvs_init+0x160>
			nvs_sector_advance(fs, &addr);
   10b24:	89e0      	ldrh	r0, [r4, #14]
   10b26:	4669      	mov	r1, sp
   10b28:	f00a fae2 	bl	1b0f0 <nvs_sector_advance.isra.0>
			closed_sectors++;
   10b2c:	f109 0901 	add.w	r9, r9, #1
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   10b30:	9900      	ldr	r1, [sp, #0]
   10b32:	2308      	movs	r3, #8
   10b34:	4642      	mov	r2, r8
   10b36:	4620      	mov	r0, r4
			closed_sectors++;
   10b38:	fa1f f989 	uxth.w	r9, r9
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   10b3c:	f00a fa75 	bl	1b02a <nvs_flash_cmp_const>
			if (!rc) {
   10b40:	2800      	cmp	r0, #0
   10b42:	d09d      	beq.n	10a80 <nvs_init+0x9c>
	for (i = 0; i < fs->sector_count; i++) {
   10b44:	3501      	adds	r5, #1
   10b46:	e796      	b.n	10a76 <nvs_init+0x92>
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   10b48:	f1ba 0f00 	cmp.w	sl, #0
   10b4c:	f000 80a2 	beq.w	10c94 <nvs_init+0x2b0>
				rc = -ESPIPE;
   10b50:	f06f 051c 	mvn.w	r5, #28
   10b54:	e06d      	b.n	10c32 <nvs_init+0x24e>
	if (rc) {
   10b56:	d045      	beq.n	10be4 <nvs_init+0x200>
		addr = fs->ate_wra + ate_size;
   10b58:	6863      	ldr	r3, [r4, #4]
   10b5a:	4433      	add	r3, r6
   10b5c:	9300      	str	r3, [sp, #0]
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
   10b5e:	f64f 78ff 	movw	r8, #65535	; 0xffff
   10b62:	9900      	ldr	r1, [sp, #0]
   10b64:	89a3      	ldrh	r3, [r4, #12]
   10b66:	b28a      	uxth	r2, r1
   10b68:	1b9b      	subs	r3, r3, r6
   10b6a:	429a      	cmp	r2, r3
   10b6c:	d315      	bcc.n	10b9a <nvs_init+0x1b6>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   10b6e:	6861      	ldr	r1, [r4, #4]
   10b70:	4620      	mov	r0, r4
   10b72:	f00a fa7f 	bl	1b074 <nvs_flash_erase_sector>
		if (rc) {
   10b76:	2800      	cmp	r0, #0
   10b78:	d1c6      	bne.n	10b08 <nvs_init+0x124>
		fs->ate_wra &= ADDR_SECT_MASK;
   10b7a:	6863      	ldr	r3, [r4, #4]
   10b7c:	4a47      	ldr	r2, [pc, #284]	; (10c9c <nvs_init+0x2b8>)
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   10b7e:	89a1      	ldrh	r1, [r4, #12]
		fs->ate_wra &= ADDR_SECT_MASK;
   10b80:	4013      	ands	r3, r2
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   10b82:	440b      	add	r3, r1
   10b84:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
   10b88:	6063      	str	r3, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
   10b8a:	4013      	ands	r3, r2
   10b8c:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   10b8e:	4620      	mov	r0, r4
   10b90:	f00a fbb5 	bl	1b2fe <nvs_gc>
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   10b94:	2800      	cmp	r0, #0
   10b96:	d040      	beq.n	10c1a <nvs_init+0x236>
   10b98:	e7b6      	b.n	10b08 <nvs_init+0x124>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   10b9a:	2308      	movs	r3, #8
   10b9c:	aa03      	add	r2, sp, #12
   10b9e:	4620      	mov	r0, r4
   10ba0:	f00a fa0b 	bl	1afba <nvs_flash_rd>
			if (rc) {
   10ba4:	2800      	cmp	r0, #0
   10ba6:	d1af      	bne.n	10b08 <nvs_init+0x124>
			if (nvs_ate_valid(fs, &gc_done_ate) &&
   10ba8:	a903      	add	r1, sp, #12
   10baa:	4620      	mov	r0, r4
   10bac:	f00a fab5 	bl	1b11a <nvs_ate_valid>
   10bb0:	b138      	cbz	r0, 10bc2 <nvs_init+0x1de>
   10bb2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   10bb6:	4543      	cmp	r3, r8
   10bb8:	d103      	bne.n	10bc2 <nvs_init+0x1de>
			    (gc_done_ate.id == 0xffff) &&
   10bba:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   10bbe:	2b00      	cmp	r3, #0
   10bc0:	d043      	beq.n	10c4a <nvs_init+0x266>
			addr += ate_size;
   10bc2:	9b00      	ldr	r3, [sp, #0]
   10bc4:	4433      	add	r3, r6
   10bc6:	9300      	str	r3, [sp, #0]
   10bc8:	e7cb      	b.n	10b62 <nvs_init+0x17e>
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
   10bca:	1a5b      	subs	r3, r3, r1
   10bcc:	4642      	mov	r2, r8
   10bce:	4620      	mov	r0, r4
   10bd0:	f00a fa2b 	bl	1b02a <nvs_flash_cmp_const>
		if (rc < 0) {
   10bd4:	2800      	cmp	r0, #0
   10bd6:	db97      	blt.n	10b08 <nvs_init+0x124>
		if (!rc) {
   10bd8:	d008      	beq.n	10bec <nvs_init+0x208>
		fs->data_wra += fs->flash_parameters->write_block_size;
   10bda:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   10bdc:	68a3      	ldr	r3, [r4, #8]
   10bde:	6812      	ldr	r2, [r2, #0]
   10be0:	4413      	add	r3, r2
   10be2:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra > fs->data_wra) {
   10be4:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   10be8:	428b      	cmp	r3, r1
   10bea:	d8ee      	bhi.n	10bca <nvs_init+0x1e6>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   10bec:	6861      	ldr	r1, [r4, #4]
   10bee:	89a3      	ldrh	r3, [r4, #12]
   10bf0:	eb01 0246 	add.w	r2, r1, r6, lsl #1
   10bf4:	429a      	cmp	r2, r3
   10bf6:	d1cd      	bne.n	10b94 <nvs_init+0x1b0>
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   10bf8:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 10c9c <nvs_init+0x2b8>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   10bfc:	68a3      	ldr	r3, [r4, #8]
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   10bfe:	ea01 0208 	and.w	r2, r1, r8
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   10c02:	4293      	cmp	r3, r2
   10c04:	d0c6      	beq.n	10b94 <nvs_init+0x1b0>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   10c06:	4620      	mov	r0, r4
   10c08:	f00a fa34 	bl	1b074 <nvs_flash_erase_sector>
		if (rc) {
   10c0c:	2800      	cmp	r0, #0
   10c0e:	f47f af7b 	bne.w	10b08 <nvs_init+0x124>
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   10c12:	6863      	ldr	r3, [r4, #4]
   10c14:	ea03 0308 	and.w	r3, r3, r8
   10c18:	60a3      	str	r3, [r4, #8]
		      (fs->sector_size - 2 * ate_size))) {
   10c1a:	89a0      	ldrh	r0, [r4, #12]
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   10c1c:	88a3      	ldrh	r3, [r4, #4]
		      (fs->sector_size - 2 * ate_size))) {
   10c1e:	eba0 0646 	sub.w	r6, r0, r6, lsl #1
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   10c22:	42b3      	cmp	r3, r6
   10c24:	d105      	bne.n	10c32 <nvs_init+0x24e>
		rc = nvs_add_gc_done_ate(fs);
   10c26:	4620      	mov	r0, r4
   10c28:	f00a fb08 	bl	1b23c <nvs_add_gc_done_ate>
   10c2c:	e76c      	b.n	10b08 <nvs_init+0x124>
		rc = -EDEADLK;
   10c2e:	f06f 052c 	mvn.w	r5, #44	; 0x2c
	return z_impl_k_mutex_unlock(mutex);
   10c32:	4638      	mov	r0, r7
   10c34:	f008 fd06 	bl	19644 <z_impl_k_mutex_unlock>
	if (rc) {
   10c38:	2d00      	cmp	r5, #0
   10c3a:	f47f aeeb 	bne.w	10a14 <nvs_init+0x30>
	fs->ready = true;
   10c3e:	2301      	movs	r3, #1
   10c40:	7423      	strb	r3, [r4, #16]
	return 0;
   10c42:	e6e7      	b.n	10a14 <nvs_init+0x30>
		return -ENXIO;
   10c44:	f06f 0505 	mvn.w	r5, #5
   10c48:	e6e4      	b.n	10a14 <nvs_init+0x30>
			addr = fs->ate_wra & ADDR_SECT_MASK;
   10c4a:	6863      	ldr	r3, [r4, #4]
			nvs_sector_advance(fs, &addr);
   10c4c:	89e0      	ldrh	r0, [r4, #14]
			addr = fs->ate_wra & ADDR_SECT_MASK;
   10c4e:	0c1b      	lsrs	r3, r3, #16
   10c50:	041b      	lsls	r3, r3, #16
			nvs_sector_advance(fs, &addr);
   10c52:	4669      	mov	r1, sp
			addr = fs->ate_wra & ADDR_SECT_MASK;
   10c54:	9300      	str	r3, [sp, #0]
			nvs_sector_advance(fs, &addr);
   10c56:	f00a fa4b 	bl	1b0f0 <nvs_sector_advance.isra.0>
			rc = nvs_flash_erase_sector(fs, addr);
   10c5a:	9900      	ldr	r1, [sp, #0]
   10c5c:	4620      	mov	r0, r4
   10c5e:	f00a fa09 	bl	1b074 <nvs_flash_erase_sector>
			goto end;
   10c62:	e797      	b.n	10b94 <nvs_init+0x1b0>
		if (nvs_ate_valid(fs, &last_ate)) {
   10c64:	a901      	add	r1, sp, #4
   10c66:	4620      	mov	r0, r4
   10c68:	f00a fa57 	bl	1b11a <nvs_ate_valid>
   10c6c:	f8d4 b004 	ldr.w	fp, [r4, #4]
   10c70:	b180      	cbz	r0, 10c94 <nvs_init+0x2b0>
			fs->data_wra = addr & ADDR_SECT_MASK;
   10c72:	9a00      	ldr	r2, [sp, #0]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   10c74:	f8bd a008 	ldrh.w	sl, [sp, #8]
   10c78:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   10c7c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
			fs->data_wra = addr & ADDR_SECT_MASK;
   10c7e:	ea02 0209 	and.w	r2, r2, r9
   10c82:	60a2      	str	r2, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   10c84:	4451      	add	r1, sl
   10c86:	f00a fa3e 	bl	1b106 <nvs_al_size.isra.0>
   10c8a:	4402      	add	r2, r0
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   10c8c:	455a      	cmp	r2, fp
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   10c8e:	60a2      	str	r2, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   10c90:	f43f af5a 	beq.w	10b48 <nvs_init+0x164>
		fs->ate_wra -= ate_size;
   10c94:	ebab 0306 	sub.w	r3, fp, r6
   10c98:	6063      	str	r3, [r4, #4]
   10c9a:	e712      	b.n	10ac2 <nvs_init+0xde>
   10c9c:	ffff0000 	.word	0xffff0000

00010ca0 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
   10ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10ca4:	461e      	mov	r6, r3
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
   10ca6:	7c03      	ldrb	r3, [r0, #16]
{
   10ca8:	b089      	sub	sp, #36	; 0x24
   10caa:	4604      	mov	r4, r0
   10cac:	4689      	mov	r9, r1
   10cae:	4690      	mov	r8, r2
	if (!fs->ready) {
   10cb0:	2b00      	cmp	r3, #0
   10cb2:	f000 80b2 	beq.w	10e1a <nvs_write+0x17a>
		LOG_ERR("NVS not initialized");
		return -EACCES;
	}

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   10cb6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   10cb8:	2108      	movs	r1, #8
   10cba:	4610      	mov	r0, r2
   10cbc:	f00a fa23 	bl	1b106 <nvs_al_size.isra.0>
	data_size = nvs_al_size(fs, len);
   10cc0:	4631      	mov	r1, r6
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   10cc2:	4682      	mov	sl, r0
	data_size = nvs_al_size(fs, len);
   10cc4:	4610      	mov	r0, r2
   10cc6:	f00a fa1e 	bl	1b106 <nvs_al_size.isra.0>

	/* The maximum data size is sector size - 4 ate
	 * where: 1 ate for data, 1 ate for sector close, 1 ate for gc done,
	 * and 1 ate to always allow a delete.
	 */
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   10cca:	89a3      	ldrh	r3, [r4, #12]
   10ccc:	eba3 038a 	sub.w	r3, r3, sl, lsl #2
   10cd0:	429e      	cmp	r6, r3
	data_size = nvs_al_size(fs, len);
   10cd2:	4607      	mov	r7, r0
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   10cd4:	f200 80a4 	bhi.w	10e20 <nvs_write+0x180>
   10cd8:	b11e      	cbz	r6, 10ce2 <nvs_write+0x42>
	    ((len > 0) && (data == NULL))) {
   10cda:	f1b8 0f00 	cmp.w	r8, #0
   10cde:	f000 809f 	beq.w	10e20 <nvs_write+0x180>
		return -EINVAL;
	}

	/* find latest entry with same id */
	wlk_addr = fs->ate_wra;
   10ce2:	6863      	ldr	r3, [r4, #4]
   10ce4:	9303      	str	r3, [sp, #12]
	rd_addr = wlk_addr;

	while (1) {
		rd_addr = wlk_addr;
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   10ce6:	aa04      	add	r2, sp, #16
   10ce8:	a903      	add	r1, sp, #12
   10cea:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
   10cec:	f8dd b00c 	ldr.w	fp, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   10cf0:	f00a fab9 	bl	1b266 <nvs_prev_ate>
		if (rc) {
   10cf4:	4605      	mov	r5, r0
   10cf6:	2800      	cmp	r0, #0
   10cf8:	d15a      	bne.n	10db0 <nvs_write+0x110>
			return rc;
		}
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   10cfa:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   10cfe:	454b      	cmp	r3, r9
   10d00:	d005      	beq.n	10d0e <nvs_write+0x6e>
			prev_found = true;
			break;
		}
		if (wlk_addr == fs->ate_wra) {
   10d02:	6862      	ldr	r2, [r4, #4]
   10d04:	9b03      	ldr	r3, [sp, #12]
   10d06:	429a      	cmp	r2, r3
   10d08:	d1ed      	bne.n	10ce6 <nvs_write+0x46>
				return rc;
			}
		}
	} else {
		/* skip delete entry for non-existing entry */
		if (len == 0) {
   10d0a:	b9de      	cbnz	r6, 10d44 <nvs_write+0xa4>
   10d0c:	e050      	b.n	10db0 <nvs_write+0x110>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   10d0e:	a904      	add	r1, sp, #16
   10d10:	4620      	mov	r0, r4
   10d12:	f00a fa02 	bl	1b11a <nvs_ate_valid>
   10d16:	2800      	cmp	r0, #0
   10d18:	d0f3      	beq.n	10d02 <nvs_write+0x62>
			if (wlk_ate.len == 0U) {
   10d1a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
		if (len == 0) {
   10d1e:	b186      	cbz	r6, 10d42 <nvs_write+0xa2>
		} else if (len == wlk_ate.len) {
   10d20:	429e      	cmp	r6, r3
   10d22:	d10f      	bne.n	10d44 <nvs_write+0xa4>
		rd_addr += wlk_ate.offset;
   10d24:	f8bd 0012 	ldrh.w	r0, [sp, #18]
		rd_addr &= ADDR_SECT_MASK;
   10d28:	ea4f 411b 	mov.w	r1, fp, lsr #16
   10d2c:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
   10d2e:	4401      	add	r1, r0
   10d30:	4633      	mov	r3, r6
   10d32:	4642      	mov	r2, r8
   10d34:	4620      	mov	r0, r4
   10d36:	f00a f94e 	bl	1afd6 <nvs_flash_block_cmp>
			if (rc <= 0) {
   10d3a:	2800      	cmp	r0, #0
   10d3c:	dc02      	bgt.n	10d44 <nvs_write+0xa4>
   10d3e:	4605      	mov	r5, r0
   10d40:	e036      	b.n	10db0 <nvs_write+0x110>
			if (wlk_ate.len == 0U) {
   10d42:	b3ab      	cbz	r3, 10db0 <nvs_write+0x110>
			return 0;
		}
	}

	/* calculate required space if the entry contains data */
	if (data_size) {
   10d44:	2f00      	cmp	r7, #0
   10d46:	d137      	bne.n	10db8 <nvs_write+0x118>
		/* Leave space for delete ate */
		required_space = data_size + ate_size;
	}

	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
   10d48:	f104 0a14 	add.w	sl, r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   10d4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   10d50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10d54:	4650      	mov	r0, sl
   10d56:	f008 fbfd 	bl	19554 <z_impl_k_mutex_lock>
	fs->ate_wra &= ADDR_SECT_MASK;
   10d5a:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 10e28 <nvs_write+0x188>

	gc_count = 0;
	while (1) {
		if (gc_count == fs->sector_count) {
   10d5e:	89e3      	ldrh	r3, [r4, #14]
   10d60:	429d      	cmp	r5, r3
   10d62:	d057      	beq.n	10e14 <nvs_write+0x174>
			 */
			rc = -ENOSPC;
			goto end;
		}

		if (fs->ate_wra >= (fs->data_wra + required_space)) {
   10d64:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   10d68:	18f9      	adds	r1, r7, r3
   10d6a:	428a      	cmp	r2, r1
   10d6c:	d327      	bcc.n	10dbe <nvs_write+0x11e>
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   10d6e:	f8ad 301a 	strh.w	r3, [sp, #26]
	nvs_ate_crc8_update(&entry);
   10d72:	a806      	add	r0, sp, #24
	entry.part = 0xff;
   10d74:	23ff      	movs	r3, #255	; 0xff
   10d76:	f88d 301e 	strb.w	r3, [sp, #30]
	entry.id = id;
   10d7a:	f8ad 9018 	strh.w	r9, [sp, #24]
	entry.len = (uint16_t)len;
   10d7e:	f8ad 601c 	strh.w	r6, [sp, #28]
	nvs_ate_crc8_update(&entry);
   10d82:	f00a f9ac 	bl	1b0de <nvs_ate_crc8_update>
	rc = nvs_flash_data_wrt(fs, data, len);
   10d86:	4632      	mov	r2, r6
   10d88:	4641      	mov	r1, r8
   10d8a:	4620      	mov	r0, r4
   10d8c:	f00a fa32 	bl	1b1f4 <nvs_flash_data_wrt>
	if (rc) {
   10d90:	4603      	mov	r3, r0
   10d92:	b938      	cbnz	r0, 10da4 <nvs_write+0x104>
	rc = nvs_flash_ate_wrt(fs, &entry);
   10d94:	a906      	add	r1, sp, #24
   10d96:	4620      	mov	r0, r4
   10d98:	f00a fa3f 	bl	1b21a <nvs_flash_ate_wrt>
		if (rc) {
			goto end;
		}
		gc_count++;
	}
	rc = len;
   10d9c:	2800      	cmp	r0, #0
   10d9e:	bf14      	ite	ne
   10da0:	4603      	movne	r3, r0
   10da2:	4633      	moveq	r3, r6
   10da4:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
   10da6:	4650      	mov	r0, sl
   10da8:	f008 fc4c 	bl	19644 <z_impl_k_mutex_unlock>
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
   10dac:	9b01      	ldr	r3, [sp, #4]
   10dae:	461d      	mov	r5, r3
}
   10db0:	4628      	mov	r0, r5
   10db2:	b009      	add	sp, #36	; 0x24
   10db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		required_space = data_size + ate_size;
   10db8:	4457      	add	r7, sl
   10dba:	b2bf      	uxth	r7, r7
   10dbc:	e7c4      	b.n	10d48 <nvs_write+0xa8>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   10dbe:	2108      	movs	r1, #8
   10dc0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   10dc2:	f00a f9a0 	bl	1b106 <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
   10dc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   10dca:	f8ad 3018 	strh.w	r3, [sp, #24]
	close_ate.len = 0U;
   10dce:	2300      	movs	r3, #0
   10dd0:	f8ad 301c 	strh.w	r3, [sp, #28]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
   10dd4:	1813      	adds	r3, r2, r0
   10dd6:	f8ad 301a 	strh.w	r3, [sp, #26]
	fs->ate_wra += (fs->sector_size - ate_size);
   10dda:	89a3      	ldrh	r3, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
   10ddc:	ea02 020b 	and.w	r2, r2, fp
	fs->ate_wra += (fs->sector_size - ate_size);
   10de0:	441a      	add	r2, r3
   10de2:	1a12      	subs	r2, r2, r0
   10de4:	6062      	str	r2, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
   10de6:	a806      	add	r0, sp, #24
   10de8:	f00a f979 	bl	1b0de <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
   10dec:	a906      	add	r1, sp, #24
   10dee:	4620      	mov	r0, r4
   10df0:	f00a fa13 	bl	1b21a <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
   10df4:	89e0      	ldrh	r0, [r4, #14]
   10df6:	1d21      	adds	r1, r4, #4
   10df8:	f00a f97a 	bl	1b0f0 <nvs_sector_advance.isra.0>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   10dfc:	6863      	ldr	r3, [r4, #4]
   10dfe:	ea03 030b 	and.w	r3, r3, fp
   10e02:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   10e04:	4620      	mov	r0, r4
   10e06:	f00a fa7a 	bl	1b2fe <nvs_gc>
		if (rc) {
   10e0a:	4603      	mov	r3, r0
   10e0c:	2800      	cmp	r0, #0
   10e0e:	d1c9      	bne.n	10da4 <nvs_write+0x104>
		gc_count++;
   10e10:	3501      	adds	r5, #1
		if (gc_count == fs->sector_count) {
   10e12:	e7a4      	b.n	10d5e <nvs_write+0xbe>
			rc = -ENOSPC;
   10e14:	f06f 031b 	mvn.w	r3, #27
   10e18:	e7c4      	b.n	10da4 <nvs_write+0x104>
		return -EACCES;
   10e1a:	f06f 050c 	mvn.w	r5, #12
   10e1e:	e7c7      	b.n	10db0 <nvs_write+0x110>
		return -EINVAL;
   10e20:	f06f 0515 	mvn.w	r5, #21
   10e24:	e7c4      	b.n	10db0 <nvs_write+0x110>
   10e26:	bf00      	nop
   10e28:	ffff0000 	.word	0xffff0000

00010e2c <get_flash_area_from_id>:
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
   10e2c:	4b08      	ldr	r3, [pc, #32]	; (10e50 <get_flash_area_from_id+0x24>)
{
   10e2e:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < flash_map_entries; i++) {
   10e30:	681c      	ldr	r4, [r3, #0]
		if (flash_map[i].fa_id == idx) {
   10e32:	4b08      	ldr	r3, [pc, #32]	; (10e54 <get_flash_area_from_id+0x28>)
{
   10e34:	4601      	mov	r1, r0
   10e36:	681a      	ldr	r2, [r3, #0]
	for (int i = 0; i < flash_map_entries; i++) {
   10e38:	2300      	movs	r3, #0
   10e3a:	429c      	cmp	r4, r3
   10e3c:	dc01      	bgt.n	10e42 <get_flash_area_from_id+0x16>
			return &flash_map[i];
		}
	}

	return NULL;
   10e3e:	2000      	movs	r0, #0
}
   10e40:	bd30      	pop	{r4, r5, pc}
		if (flash_map[i].fa_id == idx) {
   10e42:	4610      	mov	r0, r2
   10e44:	3210      	adds	r2, #16
   10e46:	7805      	ldrb	r5, [r0, #0]
   10e48:	428d      	cmp	r5, r1
   10e4a:	d0f9      	beq.n	10e40 <get_flash_area_from_id+0x14>
	for (int i = 0; i < flash_map_entries; i++) {
   10e4c:	3301      	adds	r3, #1
   10e4e:	e7f4      	b.n	10e3a <get_flash_area_from_id+0xe>
   10e50:	00020f70 	.word	0x00020f70
   10e54:	2000048c 	.word	0x2000048c

00010e58 <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
   10e58:	4b08      	ldr	r3, [pc, #32]	; (10e7c <flash_area_open+0x24>)
   10e5a:	681b      	ldr	r3, [r3, #0]
{
   10e5c:	b510      	push	{r4, lr}
   10e5e:	460c      	mov	r4, r1
	if (flash_map == NULL) {
   10e60:	b12b      	cbz	r3, 10e6e <flash_area_open+0x16>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
   10e62:	f7ff ffe3 	bl	10e2c <get_flash_area_from_id>
	if (area == NULL) {
   10e66:	b128      	cbz	r0, 10e74 <flash_area_open+0x1c>
		return -ENOENT;
	}

	*fap = area;
   10e68:	6020      	str	r0, [r4, #0]
	return 0;
   10e6a:	2000      	movs	r0, #0
}
   10e6c:	bd10      	pop	{r4, pc}
		return -EACCES;
   10e6e:	f06f 000c 	mvn.w	r0, #12
   10e72:	e7fb      	b.n	10e6c <flash_area_open+0x14>
		return -ENOENT;
   10e74:	f06f 0001 	mvn.w	r0, #1
   10e78:	e7f8      	b.n	10e6c <flash_area_open+0x14>
   10e7a:	bf00      	nop
   10e7c:	2000048c 	.word	0x2000048c

00010e80 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
   10e80:	b530      	push	{r4, r5, lr}
   10e82:	b089      	sub	sp, #36	; 0x24
   10e84:	460c      	mov	r4, r1
   10e86:	4615      	mov	r5, r2
	cb_data->area_idx = idx;
   10e88:	9001      	str	r0, [sp, #4]
	fa = get_flash_area_from_id(idx);
   10e8a:	f7ff ffcf 	bl	10e2c <get_flash_area_from_id>
	if (fa == NULL) {
   10e8e:	b1b8      	cbz	r0, 10ec0 <flash_area_get_sectors+0x40>
	cb_data->area_off = fa->fa_off;
   10e90:	6843      	ldr	r3, [r0, #4]
   10e92:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
   10e94:	6883      	ldr	r3, [r0, #8]
	cb_data->ret_len = *cnt;
   10e96:	6822      	ldr	r2, [r4, #0]
	flash_dev = device_get_binding(fa->fa_dev_name);
   10e98:	68c0      	ldr	r0, [r0, #12]
	cb_data->ret = ret;
   10e9a:	e9cd 3503 	strd	r3, r5, [sp, #12]
	cb_data->ret_idx = 0U;
   10e9e:	2300      	movs	r3, #0
	cb_data->status = 0;
   10ea0:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
   10ea4:	9305      	str	r3, [sp, #20]
	flash_dev = device_get_binding(fa->fa_dev_name);
   10ea6:	f00a fb41 	bl	1b52c <device_get_binding>
	if (flash_dev == NULL) {
   10eaa:	b160      	cbz	r0, 10ec6 <flash_area_get_sectors+0x46>
	flash_page_foreach(flash_dev, cb, cb_data);
   10eac:	4907      	ldr	r1, [pc, #28]	; (10ecc <flash_area_get_sectors+0x4c>)
   10eae:	aa01      	add	r2, sp, #4
   10eb0:	f00e ff76 	bl	1fda0 <flash_page_foreach>
	if (cb_data->status == 0) {
   10eb4:	9807      	ldr	r0, [sp, #28]
   10eb6:	b908      	cbnz	r0, 10ebc <flash_area_get_sectors+0x3c>
		*cnt = cb_data->ret_idx;
   10eb8:	9b05      	ldr	r3, [sp, #20]
   10eba:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
   10ebc:	b009      	add	sp, #36	; 0x24
   10ebe:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   10ec0:	f06f 0015 	mvn.w	r0, #21
   10ec4:	e7fa      	b.n	10ebc <flash_area_get_sectors+0x3c>
		return -ENODEV;
   10ec6:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
   10eca:	e7f7      	b.n	10ebc <flash_area_get_sectors+0x3c>
   10ecc:	0001b531 	.word	0x0001b531

00010ed0 <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
   10ed0:	4b10      	ldr	r3, [pc, #64]	; (10f14 <settings_save_one+0x44>)
{
   10ed2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
   10ed6:	681c      	ldr	r4, [r3, #0]
{
   10ed8:	4605      	mov	r5, r0
   10eda:	460e      	mov	r6, r1
   10edc:	4617      	mov	r7, r2
	if (!cs) {
   10ede:	b1ac      	cbz	r4, 10f0c <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
   10ee0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   10ee4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10ee8:	480b      	ldr	r0, [pc, #44]	; (10f18 <settings_save_one+0x48>)
   10eea:	f008 fb33 	bl	19554 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
   10eee:	6863      	ldr	r3, [r4, #4]
   10ef0:	4632      	mov	r2, r6
   10ef2:	f8d3 8008 	ldr.w	r8, [r3, #8]
   10ef6:	4629      	mov	r1, r5
   10ef8:	463b      	mov	r3, r7
   10efa:	4620      	mov	r0, r4
   10efc:	47c0      	blx	r8
   10efe:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   10f00:	4805      	ldr	r0, [pc, #20]	; (10f18 <settings_save_one+0x48>)
   10f02:	f008 fb9f 	bl	19644 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
   10f06:	4620      	mov	r0, r4
   10f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
   10f0c:	f06f 0401 	mvn.w	r4, #1
   10f10:	e7f9      	b.n	10f06 <settings_save_one+0x36>
   10f12:	bf00      	nop
   10f14:	2000244c 	.word	0x2000244c
   10f18:	200006c8 	.word	0x200006c8

00010f1c <settings_src_register>:
	parent->next = child;
   10f1c:	2300      	movs	r3, #0
   10f1e:	6003      	str	r3, [r0, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
   10f20:	4b04      	ldr	r3, [pc, #16]	; (10f34 <settings_src_register+0x18>)
   10f22:	685a      	ldr	r2, [r3, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   10f24:	b912      	cbnz	r2, 10f2c <settings_src_register+0x10>
	list->head = node;
   10f26:	e9c3 0000 	strd	r0, r0, [r3]
}
   10f2a:	4770      	bx	lr
	parent->next = child;
   10f2c:	6010      	str	r0, [r2, #0]
	list->tail = node;
   10f2e:	6058      	str	r0, [r3, #4]
}
   10f30:	4770      	bx	lr
   10f32:	bf00      	nop
   10f34:	20002444 	.word	0x20002444

00010f38 <settings_dst_register>:
	settings_save_dst = cs;
   10f38:	4b01      	ldr	r3, [pc, #4]	; (10f40 <settings_dst_register+0x8>)
   10f3a:	6018      	str	r0, [r3, #0]
}
   10f3c:	4770      	bx	lr
   10f3e:	bf00      	nop
   10f40:	2000244c 	.word	0x2000244c

00010f44 <settings_load_subtree>:
{
   10f44:	b530      	push	{r4, r5, lr}
   10f46:	b085      	sub	sp, #20
	const struct settings_load_arg arg = {
   10f48:	2300      	movs	r3, #0
{
   10f4a:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
   10f4c:	e9cd 3302 	strd	r3, r3, [sp, #8]
   10f50:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   10f52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10f56:	480c      	ldr	r0, [pc, #48]	; (10f88 <settings_load_subtree+0x44>)
   10f58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   10f5c:	f008 fafa 	bl	19554 <z_impl_k_mutex_lock>
	return list->head;
   10f60:	4b0a      	ldr	r3, [pc, #40]	; (10f8c <settings_load_subtree+0x48>)
   10f62:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   10f64:	b134      	cbz	r4, 10f74 <settings_load_subtree+0x30>
		cs->cs_itf->csi_load(cs, &arg);
   10f66:	6863      	ldr	r3, [r4, #4]
   10f68:	4620      	mov	r0, r4
   10f6a:	681b      	ldr	r3, [r3, #0]
   10f6c:	a901      	add	r1, sp, #4
   10f6e:	4798      	blx	r3
	return node->next;
   10f70:	6824      	ldr	r4, [r4, #0]
   10f72:	e7f7      	b.n	10f64 <settings_load_subtree+0x20>
	rc = settings_commit_subtree(subtree);
   10f74:	4628      	mov	r0, r5
   10f76:	f000 f885 	bl	11084 <settings_commit_subtree>
   10f7a:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   10f7c:	4802      	ldr	r0, [pc, #8]	; (10f88 <settings_load_subtree+0x44>)
   10f7e:	f008 fb61 	bl	19644 <z_impl_k_mutex_unlock>
}
   10f82:	4620      	mov	r0, r4
   10f84:	b005      	add	sp, #20
   10f86:	bd30      	pop	{r4, r5, pc}
   10f88:	200006c8 	.word	0x200006c8
   10f8c:	20002444 	.word	0x20002444

00010f90 <settings_load_subtree_direct>:
{
   10f90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
   10f92:	e9cd 0101 	strd	r0, r1, [sp, #4]
   10f96:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
   10f98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10f9c:	480a      	ldr	r0, [pc, #40]	; (10fc8 <settings_load_subtree_direct+0x38>)
   10f9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   10fa2:	f008 fad7 	bl	19554 <z_impl_k_mutex_lock>
	return list->head;
   10fa6:	4b09      	ldr	r3, [pc, #36]	; (10fcc <settings_load_subtree_direct+0x3c>)
   10fa8:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   10faa:	b134      	cbz	r4, 10fba <settings_load_subtree_direct+0x2a>
		cs->cs_itf->csi_load(cs, &arg);
   10fac:	6863      	ldr	r3, [r4, #4]
   10fae:	4620      	mov	r0, r4
   10fb0:	681b      	ldr	r3, [r3, #0]
   10fb2:	a901      	add	r1, sp, #4
   10fb4:	4798      	blx	r3
	return node->next;
   10fb6:	6824      	ldr	r4, [r4, #0]
   10fb8:	e7f7      	b.n	10faa <settings_load_subtree_direct+0x1a>
	return z_impl_k_mutex_unlock(mutex);
   10fba:	4803      	ldr	r0, [pc, #12]	; (10fc8 <settings_load_subtree_direct+0x38>)
   10fbc:	f008 fb42 	bl	19644 <z_impl_k_mutex_unlock>
}
   10fc0:	2000      	movs	r0, #0
   10fc2:	b004      	add	sp, #16
   10fc4:	bd10      	pop	{r4, pc}
   10fc6:	bf00      	nop
   10fc8:	200006c8 	.word	0x200006c8
   10fcc:	20002444 	.word	0x20002444

00010fd0 <settings_store_init>:
	list->head = NULL;
   10fd0:	4b02      	ldr	r3, [pc, #8]	; (10fdc <settings_store_init+0xc>)
   10fd2:	2200      	movs	r2, #0
	list->tail = NULL;
   10fd4:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
   10fd8:	4770      	bx	lr
   10fda:	bf00      	nop
   10fdc:	20002444 	.word	0x20002444

00010fe0 <settings_init>:
	list->head = NULL;
   10fe0:	4b02      	ldr	r3, [pc, #8]	; (10fec <settings_init+0xc>)
   10fe2:	2200      	movs	r2, #0
	list->tail = NULL;
   10fe4:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
   10fe8:	f7ff bff2 	b.w	10fd0 <settings_store_init>
   10fec:	20002450 	.word	0x20002450

00010ff0 <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
   10ff0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   10ff4:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
   10ff6:	460e      	mov	r6, r1
   10ff8:	b109      	cbz	r1, 10ffe <settings_parse_and_lookup+0xe>
		*next = NULL;
   10ffa:	2300      	movs	r3, #0
   10ffc:	600b      	str	r3, [r1, #0]
   10ffe:	4c1e      	ldr	r4, [pc, #120]	; (11078 <settings_parse_and_lookup+0x88>)
	}

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   11000:	f8df 8078 	ldr.w	r8, [pc, #120]	; 1107c <settings_parse_and_lookup+0x8c>
   11004:	2500      	movs	r5, #0
   11006:	4544      	cmp	r4, r8
   11008:	d308      	bcc.n	1101c <settings_parse_and_lookup+0x2c>
	return list->head;
   1100a:	4b1d      	ldr	r3, [pc, #116]	; (11080 <settings_parse_and_lookup+0x90>)
   1100c:	681c      	ldr	r4, [r3, #0]
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   1100e:	b10c      	cbz	r4, 11014 <settings_parse_and_lookup+0x24>
   11010:	3c14      	subs	r4, #20
   11012:	b9c4      	cbnz	r4, 11046 <settings_parse_and_lookup+0x56>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
   11014:	4628      	mov	r0, r5
   11016:	b002      	add	sp, #8
   11018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   1101c:	6821      	ldr	r1, [r4, #0]
   1101e:	aa01      	add	r2, sp, #4
   11020:	4638      	mov	r0, r7
   11022:	f00a faaa 	bl	1b57a <settings_name_steq>
   11026:	b160      	cbz	r0, 11042 <settings_parse_and_lookup+0x52>
		if (!bestmatch) {
   11028:	b925      	cbnz	r5, 11034 <settings_parse_and_lookup+0x44>
			if (next) {
   1102a:	b10e      	cbz	r6, 11030 <settings_parse_and_lookup+0x40>
				*next = tmpnext;
   1102c:	9b01      	ldr	r3, [sp, #4]
   1102e:	6033      	str	r3, [r6, #0]
   11030:	4625      	mov	r5, r4
   11032:	e006      	b.n	11042 <settings_parse_and_lookup+0x52>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   11034:	6829      	ldr	r1, [r5, #0]
   11036:	6820      	ldr	r0, [r4, #0]
   11038:	2200      	movs	r2, #0
   1103a:	f00a fa9e 	bl	1b57a <settings_name_steq>
   1103e:	2800      	cmp	r0, #0
   11040:	d1f3      	bne.n	1102a <settings_parse_and_lookup+0x3a>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   11042:	3414      	adds	r4, #20
   11044:	e7df      	b.n	11006 <settings_parse_and_lookup+0x16>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   11046:	6821      	ldr	r1, [r4, #0]
   11048:	aa01      	add	r2, sp, #4
   1104a:	4638      	mov	r0, r7
   1104c:	f00a fa95 	bl	1b57a <settings_name_steq>
   11050:	b160      	cbz	r0, 1106c <settings_parse_and_lookup+0x7c>
		if (!bestmatch) {
   11052:	b925      	cbnz	r5, 1105e <settings_parse_and_lookup+0x6e>
			if (next) {
   11054:	b10e      	cbz	r6, 1105a <settings_parse_and_lookup+0x6a>
				*next = tmpnext;
   11056:	9b01      	ldr	r3, [sp, #4]
   11058:	6033      	str	r3, [r6, #0]
   1105a:	4625      	mov	r5, r4
   1105c:	e006      	b.n	1106c <settings_parse_and_lookup+0x7c>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   1105e:	6829      	ldr	r1, [r5, #0]
   11060:	6820      	ldr	r0, [r4, #0]
   11062:	2200      	movs	r2, #0
   11064:	f00a fa89 	bl	1b57a <settings_name_steq>
   11068:	2800      	cmp	r0, #0
   1106a:	d1f3      	bne.n	11054 <settings_parse_and_lookup+0x64>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1106c:	f114 0f14 	cmn.w	r4, #20
   11070:	d0d0      	beq.n	11014 <settings_parse_and_lookup+0x24>
	return node->next;
   11072:	6964      	ldr	r4, [r4, #20]
   11074:	e7cb      	b.n	1100e <settings_parse_and_lookup+0x1e>
   11076:	bf00      	nop
   11078:	00020d64 	.word	0x00020d64
   1107c:	00020ddc 	.word	0x00020ddc
   11080:	20002450 	.word	0x20002450

00011084 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
   11084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc;
	int rc2;

	rc = 0;

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   11086:	4c1a      	ldr	r4, [pc, #104]	; (110f0 <settings_commit_subtree+0x6c>)
   11088:	4f1a      	ldr	r7, [pc, #104]	; (110f4 <settings_commit_subtree+0x70>)
{
   1108a:	4606      	mov	r6, r0
	rc = 0;
   1108c:	2500      	movs	r5, #0
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   1108e:	42bc      	cmp	r4, r7
   11090:	d306      	bcc.n	110a0 <settings_commit_subtree+0x1c>
	return list->head;
   11092:	4b19      	ldr	r3, [pc, #100]	; (110f8 <settings_commit_subtree+0x74>)
   11094:	681c      	ldr	r4, [r3, #0]
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   11096:	b10c      	cbz	r4, 1109c <settings_commit_subtree+0x18>
   11098:	3c14      	subs	r4, #20
   1109a:	b99c      	cbnz	r4, 110c4 <settings_commit_subtree+0x40>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
   1109c:	4628      	mov	r0, r5
   1109e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   110a0:	b91e      	cbnz	r6, 110aa <settings_commit_subtree+0x26>
		if (ch->h_commit) {
   110a2:	68e3      	ldr	r3, [r4, #12]
   110a4:	b94b      	cbnz	r3, 110ba <settings_commit_subtree+0x36>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   110a6:	3414      	adds	r4, #20
   110a8:	e7f1      	b.n	1108e <settings_commit_subtree+0xa>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   110aa:	6820      	ldr	r0, [r4, #0]
   110ac:	2200      	movs	r2, #0
   110ae:	4631      	mov	r1, r6
   110b0:	f00a fa63 	bl	1b57a <settings_name_steq>
   110b4:	2800      	cmp	r0, #0
   110b6:	d1f4      	bne.n	110a2 <settings_commit_subtree+0x1e>
   110b8:	e7f5      	b.n	110a6 <settings_commit_subtree+0x22>
			rc2 = ch->h_commit();
   110ba:	4798      	blx	r3
				rc = rc2;
   110bc:	2d00      	cmp	r5, #0
   110be:	bf08      	it	eq
   110c0:	4605      	moveq	r5, r0
   110c2:	e7f0      	b.n	110a6 <settings_commit_subtree+0x22>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   110c4:	b936      	cbnz	r6, 110d4 <settings_commit_subtree+0x50>
		if (ch->h_commit) {
   110c6:	68e3      	ldr	r3, [r4, #12]
   110c8:	b963      	cbnz	r3, 110e4 <settings_commit_subtree+0x60>
Z_GENLIST_PEEK_NEXT(slist, snode)
   110ca:	f114 0f14 	cmn.w	r4, #20
   110ce:	d0e5      	beq.n	1109c <settings_commit_subtree+0x18>
	return node->next;
   110d0:	6964      	ldr	r4, [r4, #20]
   110d2:	e7e0      	b.n	11096 <settings_commit_subtree+0x12>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   110d4:	6820      	ldr	r0, [r4, #0]
   110d6:	2200      	movs	r2, #0
   110d8:	4631      	mov	r1, r6
   110da:	f00a fa4e 	bl	1b57a <settings_name_steq>
   110de:	2800      	cmp	r0, #0
   110e0:	d1f1      	bne.n	110c6 <settings_commit_subtree+0x42>
   110e2:	e7f2      	b.n	110ca <settings_commit_subtree+0x46>
			rc2 = ch->h_commit();
   110e4:	4798      	blx	r3
				rc = rc2;
   110e6:	2d00      	cmp	r5, #0
   110e8:	bf08      	it	eq
   110ea:	4605      	moveq	r5, r0
   110ec:	e7ed      	b.n	110ca <settings_commit_subtree+0x46>
   110ee:	bf00      	nop
   110f0:	00020d64 	.word	0x00020d64
   110f4:	00020ddc 	.word	0x00020ddc
   110f8:	20002450 	.word	0x20002450

000110fc <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
   110fc:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
   110fe:	4c06      	ldr	r4, [pc, #24]	; (11118 <settings_subsys_init+0x1c>)
   11100:	7823      	ldrb	r3, [r4, #0]
   11102:	b93b      	cbnz	r3, 11114 <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
   11104:	f7ff ff6c 	bl	10fe0 <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
   11108:	f000 f866 	bl	111d8 <settings_backend_init>

	if (!err) {
   1110c:	b908      	cbnz	r0, 11112 <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
   1110e:	2301      	movs	r3, #1
   11110:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
   11112:	bd10      	pop	{r4, pc}
		return 0;
   11114:	2000      	movs	r0, #0
   11116:	e7fc      	b.n	11112 <settings_subsys_init+0x16>
   11118:	20002ad1 	.word	0x20002ad1

0001111c <settings_nvs_load>:
	return 0;
}

static int settings_nvs_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
   1111c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char name[SETTINGS_MAX_NAME_LEN + SETTINGS_EXTRA_LEN + 1];
	char buf;
	ssize_t rc1, rc2;
	uint16_t name_id = NVS_NAMECNT_ID;

	name_id = cf->last_name_id + 1;
   11120:	8f04      	ldrh	r4, [r0, #56]	; 0x38
		/* Found a name, this might not include a trailing \0 */
		name[rc1] = '\0';
		read_fn_arg.fs = &cf->cf_nvs;
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;

		ret = settings_call_set_handler(
   11122:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 111d4 <settings_nvs_load+0xb8>
	name_id = cf->last_name_id + 1;
   11126:	3401      	adds	r4, #1
{
   11128:	b098      	sub	sp, #96	; 0x60
   1112a:	4680      	mov	r8, r0
   1112c:	4689      	mov	r9, r1
	name_id = cf->last_name_id + 1;
   1112e:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   11130:	f100 0608 	add.w	r6, r0, #8
		name_id--;
   11134:	1e65      	subs	r5, r4, #1
   11136:	b2ad      	uxth	r5, r5
		if (name_id == NVS_NAMECNT_ID) {
   11138:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   1113c:	d047      	beq.n	111ce <settings_nvs_load+0xb2>
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   1113e:	234a      	movs	r3, #74	; 0x4a
   11140:	aa05      	add	r2, sp, #20
   11142:	4629      	mov	r1, r5
   11144:	4630      	mov	r0, r6
   11146:	f00a f9ea 	bl	1b51e <nvs_read>
   1114a:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
   1114e:	343f      	adds	r4, #63	; 0x3f
   11150:	b2a4      	uxth	r4, r4
   11152:	4607      	mov	r7, r0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   11154:	4621      	mov	r1, r4
   11156:	2301      	movs	r3, #1
   11158:	f10d 020b 	add.w	r2, sp, #11
   1115c:	4630      	mov	r0, r6
   1115e:	f00a f9de 	bl	1b51e <nvs_read>
		if ((rc1 <= 0) && (rc2 <= 0)) {
   11162:	2f00      	cmp	r7, #0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   11164:	4601      	mov	r1, r0
		if ((rc1 <= 0) && (rc2 <= 0)) {
   11166:	dc03      	bgt.n	11170 <settings_nvs_load+0x54>
   11168:	2800      	cmp	r0, #0
   1116a:	dc03      	bgt.n	11174 <settings_nvs_load+0x58>
{
   1116c:	462c      	mov	r4, r5
   1116e:	e7e1      	b.n	11134 <settings_nvs_load+0x18>
		if ((rc1 <= 0) || (rc2 <= 0)) {
   11170:	2800      	cmp	r0, #0
   11172:	dc16      	bgt.n	111a2 <settings_nvs_load+0x86>
			if (name_id == cf->last_name_id) {
   11174:	f8b8 3038 	ldrh.w	r3, [r8, #56]	; 0x38
   11178:	42ab      	cmp	r3, r5
   1117a:	d109      	bne.n	11190 <settings_nvs_load+0x74>
				cf->last_name_id--;
   1117c:	4642      	mov	r2, r8
   1117e:	1e6b      	subs	r3, r5, #1
   11180:	f822 3f38 	strh.w	r3, [r2, #56]!
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   11184:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   11188:	2302      	movs	r3, #2
   1118a:	4630      	mov	r0, r6
   1118c:	f7ff fd88 	bl	10ca0 <nvs_write>
			nvs_delete(&cf->cf_nvs, name_id);
   11190:	4629      	mov	r1, r5
   11192:	4630      	mov	r0, r6
   11194:	f00a f968 	bl	1b468 <nvs_delete>
			nvs_delete(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET);
   11198:	4621      	mov	r1, r4
   1119a:	4630      	mov	r0, r6
   1119c:	f00a f964 	bl	1b468 <nvs_delete>
			continue;
   111a0:	e7e4      	b.n	1116c <settings_nvs_load+0x50>
		name[rc1] = '\0';
   111a2:	f107 0360 	add.w	r3, r7, #96	; 0x60
   111a6:	eb0d 0703 	add.w	r7, sp, r3
   111aa:	2300      	movs	r3, #0
   111ac:	f807 3c4c 	strb.w	r3, [r7, #-76]
		ret = settings_call_set_handler(
   111b0:	4652      	mov	r2, sl
   111b2:	f8cd 9000 	str.w	r9, [sp]
   111b6:	ab03      	add	r3, sp, #12
   111b8:	a805      	add	r0, sp, #20
		read_fn_arg.fs = &cf->cf_nvs;
   111ba:	9603      	str	r6, [sp, #12]
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;
   111bc:	f8ad 4010 	strh.w	r4, [sp, #16]
		ret = settings_call_set_handler(
   111c0:	f00a fa14 	bl	1b5ec <settings_call_set_handler>
			name, rc2,
			settings_nvs_read_fn, &read_fn_arg,
			(void *)arg);
		if (ret) {
   111c4:	2800      	cmp	r0, #0
   111c6:	d0d1      	beq.n	1116c <settings_nvs_load+0x50>
			break;
		}
	}
	return ret;
}
   111c8:	b018      	add	sp, #96	; 0x60
   111ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   111ce:	2000      	movs	r0, #0
	return ret;
   111d0:	e7fa      	b.n	111c8 <settings_nvs_load+0xac>
   111d2:	bf00      	nop
   111d4:	0001b653 	.word	0x0001b653

000111d8 <settings_backend_init>:
	LOG_DBG("Initialized");
	return 0;
}

int settings_backend_init(void)
{
   111d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc;
	uint16_t cnt = 0;
	size_t nvs_sector_size, nvs_size = 0;
	const struct flash_area *fa;
	struct flash_sector hw_flash_sector;
	uint32_t sector_cnt = 1;
   111da:	2301      	movs	r3, #1

	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
   111dc:	4669      	mov	r1, sp
   111de:	2004      	movs	r0, #4
	uint32_t sector_cnt = 1;
   111e0:	9301      	str	r3, [sp, #4]
	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
   111e2:	f7ff fe39 	bl	10e58 <flash_area_open>
	if (rc) {
   111e6:	4604      	mov	r4, r0
   111e8:	2800      	cmp	r0, #0
   111ea:	d136      	bne.n	1125a <settings_backend_init+0x82>
		return rc;
	}

	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
   111ec:	aa02      	add	r2, sp, #8
   111ee:	a901      	add	r1, sp, #4
   111f0:	2004      	movs	r0, #4
   111f2:	f7ff fe45 	bl	10e80 <flash_area_get_sectors>
				    &hw_flash_sector);
	if (rc == -ENODEV) {
   111f6:	f110 0f13 	cmn.w	r0, #19
	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
   111fa:	4604      	mov	r4, r0
	if (rc == -ENODEV) {
   111fc:	d02d      	beq.n	1125a <settings_backend_init+0x82>
		return rc;
	} else if (rc != 0 && rc != -ENOMEM) {
   111fe:	b138      	cbz	r0, 11210 <settings_backend_init+0x38>
   11200:	340c      	adds	r4, #12
   11202:	d005      	beq.n	11210 <settings_backend_init+0x38>
		k_panic();
   11204:	4040      	eors	r0, r0
   11206:	f380 8811 	msr	BASEPRI, r0
   1120a:	f04f 0004 	mov.w	r0, #4
   1120e:	df02      	svc	2
	}

	nvs_sector_size = CONFIG_SETTINGS_NVS_SECTOR_SIZE_MULT *
   11210:	9903      	ldr	r1, [sp, #12]
			  hw_flash_sector.fs_size;

	if (nvs_sector_size > UINT16_MAX) {
   11212:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   11216:	d223      	bcs.n	11260 <settings_backend_init+0x88>
		return -EDOM;
	}

	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
		nvs_size += nvs_sector_size;
		if (nvs_size > fa->fa_size) {
   11218:	9a00      	ldr	r2, [sp, #0]
   1121a:	2300      	movs	r3, #0
   1121c:	6895      	ldr	r5, [r2, #8]
	size_t nvs_sector_size, nvs_size = 0;
   1121e:	4618      	mov	r0, r3
		nvs_size += nvs_sector_size;
   11220:	4408      	add	r0, r1
		if (nvs_size > fa->fa_size) {
   11222:	4285      	cmp	r5, r0
   11224:	b29c      	uxth	r4, r3
   11226:	d303      	bcc.n	11230 <settings_backend_init+0x58>
	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
   11228:	3301      	adds	r3, #1
   1122a:	2b08      	cmp	r3, #8
   1122c:	d1f8      	bne.n	11220 <settings_backend_init+0x48>
   1122e:	461c      	mov	r4, r3
		}
		cnt++;
	}

	/* define the nvs file system using the page_info */
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
   11230:	4d0d      	ldr	r5, [pc, #52]	; (11268 <settings_backend_init+0x90>)
	default_settings_nvs.cf_nvs.sector_count = cnt;
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
   11232:	6853      	ldr	r3, [r2, #4]
   11234:	60ab      	str	r3, [r5, #8]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;

	rc = settings_nvs_backend_init(&default_settings_nvs);
   11236:	4628      	mov	r0, r5
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
   11238:	68d3      	ldr	r3, [r2, #12]
	default_settings_nvs.cf_nvs.sector_count = cnt;
   1123a:	82ec      	strh	r4, [r5, #22]
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
   1123c:	82a9      	strh	r1, [r5, #20]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
   1123e:	63eb      	str	r3, [r5, #60]	; 0x3c
	rc = settings_nvs_backend_init(&default_settings_nvs);
   11240:	f00a faa0 	bl	1b784 <settings_nvs_backend_init>
	if (rc) {
   11244:	4604      	mov	r4, r0
   11246:	b940      	cbnz	r0, 1125a <settings_backend_init+0x82>
	cf->cf_store.cs_itf = &settings_nvs_itf;
   11248:	4e08      	ldr	r6, [pc, #32]	; (1126c <settings_backend_init+0x94>)
   1124a:	606e      	str	r6, [r5, #4]
	settings_src_register(&cf->cf_store);
   1124c:	4628      	mov	r0, r5
   1124e:	f7ff fe65 	bl	10f1c <settings_src_register>
	settings_dst_register(&cf->cf_store);
   11252:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
   11254:	606e      	str	r6, [r5, #4]
	settings_dst_register(&cf->cf_store);
   11256:	f7ff fe6f 	bl	10f38 <settings_dst_register>
	}

	rc = settings_nvs_dst(&default_settings_nvs);

	return rc;
}
   1125a:	4620      	mov	r0, r4
   1125c:	b004      	add	sp, #16
   1125e:	bd70      	pop	{r4, r5, r6, pc}
		return -EDOM;
   11260:	f06f 0420 	mvn.w	r4, #32
   11264:	e7f9      	b.n	1125a <settings_backend_init+0x82>
   11266:	bf00      	nop
   11268:	20002458 	.word	0x20002458
   1126c:	20000490 	.word	0x20000490

00011270 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   11270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11272:	4605      	mov	r5, r0
   11274:	f04f 0340 	mov.w	r3, #64	; 0x40
   11278:	f3ef 8611 	mrs	r6, BASEPRI
   1127c:	f383 8811 	msr	BASEPRI, r3
   11280:	f3bf 8f6f 	isb	sy
	return list->head;
   11284:	4b09      	ldr	r3, [pc, #36]	; (112ac <pm_state_notify+0x3c>)
   11286:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   11288:	b15c      	cbz	r4, 112a2 <pm_state_notify+0x32>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_state.state);
   1128a:	4f09      	ldr	r7, [pc, #36]	; (112b0 <pm_state_notify+0x40>)
			callback = notifier->state_exit;
   1128c:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   11290:	2d00      	cmp	r5, #0
   11292:	bf08      	it	eq
   11294:	4613      	moveq	r3, r2
		if (callback) {
   11296:	b10b      	cbz	r3, 1129c <pm_state_notify+0x2c>
			callback(z_power_state.state);
   11298:	7838      	ldrb	r0, [r7, #0]
   1129a:	4798      	blx	r3
	return node->next;
   1129c:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   1129e:	2c00      	cmp	r4, #0
   112a0:	d1f4      	bne.n	1128c <pm_state_notify+0x1c>
	__asm__ volatile(
   112a2:	f386 8811 	msr	BASEPRI, r6
   112a6:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   112aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   112ac:	20002498 	.word	0x20002498
   112b0:	200024a0 	.word	0x200024a0

000112b4 <pm_system_resume>:

void pm_system_resume(void)
{
   112b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
   112b6:	4b0f      	ldr	r3, [pc, #60]	; (112f4 <pm_system_resume+0x40>)
   112b8:	681a      	ldr	r2, [r3, #0]
   112ba:	b9ba      	cbnz	r2, 112ec <pm_system_resume+0x38>
		post_ops_done = 1;
   112bc:	2201      	movs	r2, #1
   112be:	601a      	str	r2, [r3, #0]
		exit_pos_ops(z_power_state);
   112c0:	4a0d      	ldr	r2, [pc, #52]	; (112f8 <pm_system_resume+0x44>)
   112c2:	ca07      	ldmia	r2, {r0, r1, r2}
   112c4:	ab01      	add	r3, sp, #4
   112c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
   112ca:	4a0c      	ldr	r2, [pc, #48]	; (112fc <pm_system_resume+0x48>)
   112cc:	b14a      	cbz	r2, 112e2 <pm_system_resume+0x2e>
		pm_power_state_exit_post_ops(info);
   112ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   112d2:	f00b fd12 	bl	1ccfa <pm_power_state_exit_post_ops>
		pm_state_notify(false);
   112d6:	2000      	movs	r0, #0
	}
}
   112d8:	b005      	add	sp, #20
   112da:	f85d eb04 	ldr.w	lr, [sp], #4
		pm_state_notify(false);
   112de:	f7ff bfc7 	b.w	11270 <pm_state_notify>
   112e2:	f382 8811 	msr	BASEPRI, r2
   112e6:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   112ea:	e7f4      	b.n	112d6 <pm_system_resume+0x22>
}
   112ec:	b005      	add	sp, #20
   112ee:	f85d fb04 	ldr.w	pc, [sp], #4
   112f2:	bf00      	nop
   112f4:	200004a0 	.word	0x200004a0
   112f8:	200024a0 	.word	0x200024a0
   112fc:	0001ccfb 	.word	0x0001ccfb

00011300 <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
   11300:	b5f0      	push	{r4, r5, r6, r7, lr}
   11302:	b089      	sub	sp, #36	; 0x24
	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);
	z_power_state = pm_policy_next_state(ticks);
   11304:	466e      	mov	r6, sp
   11306:	4601      	mov	r1, r0
{
   11308:	4605      	mov	r5, r0
	z_power_state = pm_policy_next_state(ticks);
   1130a:	4630      	mov	r0, r6
   1130c:	f00a fa56 	bl	1b7bc <pm_policy_next_state>
   11310:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   11314:	4c17      	ldr	r4, [pc, #92]	; (11374 <pm_system_suspend+0x74>)
   11316:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
   1131a:	7820      	ldrb	r0, [r4, #0]
   1131c:	4627      	mov	r7, r4
   1131e:	b338      	cbz	r0, 11370 <pm_system_suspend+0x70>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
		return z_power_state.state;
	}
	post_ops_done = 0;
   11320:	4b15      	ldr	r3, [pc, #84]	; (11378 <pm_system_suspend+0x78>)
   11322:	2100      	movs	r1, #0
   11324:	6019      	str	r1, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
   11326:	1c6b      	adds	r3, r5, #1
   11328:	d00d      	beq.n	11346 <pm_system_suspend+0x46>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   1132a:	4814      	ldr	r0, [pc, #80]	; (1137c <pm_system_suspend+0x7c>)
   1132c:	4616      	mov	r6, r2
   1132e:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   11332:	4a13      	ldr	r2, [pc, #76]	; (11380 <pm_system_suspend+0x80>)
   11334:	2300      	movs	r3, #0
   11336:	fbe6 010c 	umlal	r0, r1, r6, ip
   1133a:	f7ee fed1 	bl	e0 <__aeabi_uldivmod>

		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   1133e:	2101      	movs	r1, #1
   11340:	1a28      	subs	r0, r5, r0
   11342:	f00f fa15 	bl	20770 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   11346:	f008 fc7b 	bl	19c40 <k_sched_lock>
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
   1134a:	2001      	movs	r0, #1
   1134c:	f7ff ff90 	bl	11270 <pm_state_notify>
	pm_state_set(z_power_state);
   11350:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
   11354:	ab05      	add	r3, sp, #20
   11356:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
   1135a:	4a0a      	ldr	r2, [pc, #40]	; (11384 <pm_system_suspend+0x84>)
   1135c:	b11a      	cbz	r2, 11366 <pm_system_suspend+0x66>
		pm_power_state_set(info);
   1135e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   11362:	f00b fcb7 	bl	1ccd4 <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
   11366:	f7ff ffa5 	bl	112b4 <pm_system_resume>
	k_sched_unlock();
   1136a:	f008 fd21 	bl	19db0 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
	return z_power_state.state;
   1136e:	7820      	ldrb	r0, [r4, #0]
}
   11370:	b009      	add	sp, #36	; 0x24
   11372:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11374:	200024a0 	.word	0x200024a0
   11378:	200004a0 	.word	0x200004a0
   1137c:	000f423f 	.word	0x000f423f
   11380:	000f4240 	.word	0x000f4240
   11384:	0001ccd5 	.word	0x0001ccd5

00011388 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   11388:	b510      	push	{r4, lr}
   1138a:	4807      	ldr	r0, [pc, #28]	; (113a8 <uart_console_init+0x20>)
	__stdout_hook_install(console_out);
   1138c:	4c07      	ldr	r4, [pc, #28]	; (113ac <uart_console_init+0x24>)
   1138e:	f007 fed3 	bl	19138 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
   11392:	4b07      	ldr	r3, [pc, #28]	; (113b0 <uart_console_init+0x28>)
   11394:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
   11396:	4620      	mov	r0, r4
   11398:	f000 ff5e 	bl	12258 <__stdout_hook_install>
	__printk_hook_install(console_out);
   1139c:	4620      	mov	r0, r4
   1139e:	f7fe fe25 	bl	ffec <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
   113a2:	2000      	movs	r0, #0
   113a4:	bd10      	pop	{r4, pc}
   113a6:	bf00      	nop
   113a8:	000219a9 	.word	0x000219a9
   113ac:	000113b5 	.word	0x000113b5
   113b0:	200024ac 	.word	0x200024ac

000113b4 <console_out>:
	if ('\n' == c) {
   113b4:	280a      	cmp	r0, #10
{
   113b6:	b538      	push	{r3, r4, r5, lr}
   113b8:	4d07      	ldr	r5, [pc, #28]	; (113d8 <console_out+0x24>)
   113ba:	4604      	mov	r4, r0
	if ('\n' == c) {
   113bc:	d104      	bne.n	113c8 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
   113be:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   113c0:	6883      	ldr	r3, [r0, #8]
   113c2:	210d      	movs	r1, #13
   113c4:	685b      	ldr	r3, [r3, #4]
   113c6:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
   113c8:	6828      	ldr	r0, [r5, #0]
   113ca:	6883      	ldr	r3, [r0, #8]
   113cc:	b2e1      	uxtb	r1, r4
   113ce:	685b      	ldr	r3, [r3, #4]
   113d0:	4798      	blx	r3
}
   113d2:	4620      	mov	r0, r4
   113d4:	bd38      	pop	{r3, r4, r5, pc}
   113d6:	bf00      	nop
   113d8:	200024ac 	.word	0x200024ac

000113dc <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   113dc:	4b08      	ldr	r3, [pc, #32]	; (11400 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   113de:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   113e0:	1ac3      	subs	r3, r0, r3
{
   113e2:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   113e4:	4907      	ldr	r1, [pc, #28]	; (11404 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   113e6:	109b      	asrs	r3, r3, #2
{
   113e8:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   113ea:	4359      	muls	r1, r3
   113ec:	4806      	ldr	r0, [pc, #24]	; (11408 <onoff_stop+0x2c>)
   113ee:	2240      	movs	r2, #64	; 0x40
   113f0:	f00a fa05 	bl	1b7fe <stop>
	notify(mgr, res);
   113f4:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   113f6:	4601      	mov	r1, r0
	notify(mgr, res);
   113f8:	4620      	mov	r0, r4
}
   113fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   113fe:	4718      	bx	r3
   11400:	200024c4 	.word	0x200024c4
   11404:	b6db6db7 	.word	0xb6db6db7
   11408:	00020b60 	.word	0x00020b60

0001140c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1140c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   1140e:	4c0c      	ldr	r4, [pc, #48]	; (11440 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   11410:	4a0c      	ldr	r2, [pc, #48]	; (11444 <onoff_start+0x38>)
   11412:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   11414:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   11416:	9300      	str	r3, [sp, #0]
{
   11418:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1141a:	460b      	mov	r3, r1
   1141c:	490a      	ldr	r1, [pc, #40]	; (11448 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
   1141e:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   11420:	4361      	muls	r1, r4
{
   11422:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   11424:	4809      	ldr	r0, [pc, #36]	; (1144c <onoff_start+0x40>)
   11426:	f00a fa16 	bl	1b856 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   1142a:	1e01      	subs	r1, r0, #0
   1142c:	da05      	bge.n	1143a <onoff_start+0x2e>
		notify(mgr, err);
   1142e:	4630      	mov	r0, r6
   11430:	462b      	mov	r3, r5
	}
}
   11432:	b002      	add	sp, #8
   11434:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   11438:	4718      	bx	r3
}
   1143a:	b002      	add	sp, #8
   1143c:	bd70      	pop	{r4, r5, r6, pc}
   1143e:	bf00      	nop
   11440:	200024c4 	.word	0x200024c4
   11444:	0001b8c7 	.word	0x0001b8c7
   11448:	b6db6db7 	.word	0xb6db6db7
   1144c:	00020b60 	.word	0x00020b60

00011450 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   11450:	2200      	movs	r2, #0
{
   11452:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   11454:	2101      	movs	r1, #1
{
   11456:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   11458:	4610      	mov	r0, r2
   1145a:	f000 fbe3 	bl	11c24 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   1145e:	2000      	movs	r0, #0
   11460:	f000 fbae 	bl	11bc0 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   11464:	480f      	ldr	r0, [pc, #60]	; (114a4 <clk_init+0x54>)
   11466:	f007 fb15 	bl	18a94 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1146a:	4b0f      	ldr	r3, [pc, #60]	; (114a8 <clk_init+0x58>)
   1146c:	4298      	cmp	r0, r3
   1146e:	d115      	bne.n	1149c <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   11470:	f00e fda7 	bl	1ffc2 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   11474:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   11476:	490d      	ldr	r1, [pc, #52]	; (114ac <clk_init+0x5c>)
   11478:	4630      	mov	r0, r6
   1147a:	f009 fa11 	bl	1a8a0 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   1147e:	2800      	cmp	r0, #0
   11480:	db0b      	blt.n	1149a <clk_init+0x4a>
	struct nrf_clock_control_data *data = dev->data;
   11482:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   11484:	4909      	ldr	r1, [pc, #36]	; (114ac <clk_init+0x5c>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   11486:	2501      	movs	r5, #1
   11488:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1148a:	f104 001c 	add.w	r0, r4, #28
   1148e:	f009 fa07 	bl	1a8a0 <onoff_manager_init>
		if (err < 0) {
   11492:	2800      	cmp	r0, #0
   11494:	db01      	blt.n	1149a <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   11496:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   11498:	2000      	movs	r0, #0
}
   1149a:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   1149c:	f06f 0004 	mvn.w	r0, #4
   114a0:	e7fb      	b.n	1149a <clk_init+0x4a>
   114a2:	bf00      	nop
   114a4:	000114e5 	.word	0x000114e5
   114a8:	0bad0000 	.word	0x0bad0000
   114ac:	00020f98 	.word	0x00020f98

000114b0 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   114b0:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   114b2:	230c      	movs	r3, #12
   114b4:	4809      	ldr	r0, [pc, #36]	; (114dc <clkstarted_handle.constprop.0+0x2c>)
   114b6:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   114b8:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   114ba:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   114bc:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
   114c0:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   114c2:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   114c4:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   114c6:	4418      	add	r0, r3
   114c8:	f00a f986 	bl	1b7d8 <set_on_state>
	if (callback) {
   114cc:	b12d      	cbz	r5, 114da <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   114ce:	4632      	mov	r2, r6
   114d0:	462b      	mov	r3, r5
   114d2:	4803      	ldr	r0, [pc, #12]	; (114e0 <clkstarted_handle.constprop.0+0x30>)
}
   114d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   114d8:	4718      	bx	r3
}
   114da:	bd70      	pop	{r4, r5, r6, pc}
   114dc:	200024c4 	.word	0x200024c4
   114e0:	00020b60 	.word	0x00020b60

000114e4 <clock_event_handler>:
	switch (event) {
   114e4:	b110      	cbz	r0, 114ec <clock_event_handler+0x8>
   114e6:	2801      	cmp	r0, #1
   114e8:	d004      	beq.n	114f4 <clock_event_handler+0x10>
   114ea:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   114ec:	4b03      	ldr	r3, [pc, #12]	; (114fc <clock_event_handler+0x18>)
   114ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   114f0:	075b      	lsls	r3, r3, #29
   114f2:	d101      	bne.n	114f8 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   114f4:	f7ff bfdc 	b.w	114b0 <clkstarted_handle.constprop.0>
}
   114f8:	4770      	bx	lr
   114fa:	bf00      	nop
   114fc:	200024c4 	.word	0x200024c4

00011500 <generic_hfclk_start>:
{
   11500:	b508      	push	{r3, lr}
	__asm__ volatile(
   11502:	f04f 0340 	mov.w	r3, #64	; 0x40
   11506:	f3ef 8111 	mrs	r1, BASEPRI
   1150a:	f383 8811 	msr	BASEPRI, r3
   1150e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   11512:	4a12      	ldr	r2, [pc, #72]	; (1155c <generic_hfclk_start+0x5c>)
   11514:	6813      	ldr	r3, [r2, #0]
   11516:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   1151a:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   1151e:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   11520:	d00c      	beq.n	1153c <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   11522:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   11526:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1152a:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1152e:	f013 0301 	ands.w	r3, r3, #1
   11532:	d003      	beq.n	1153c <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   11534:	480a      	ldr	r0, [pc, #40]	; (11560 <generic_hfclk_start+0x60>)
   11536:	f00a f94f 	bl	1b7d8 <set_on_state>
			already_started = true;
   1153a:	2301      	movs	r3, #1
	__asm__ volatile(
   1153c:	f381 8811 	msr	BASEPRI, r1
   11540:	f3bf 8f6f 	isb	sy
	if (already_started) {
   11544:	b123      	cbz	r3, 11550 <generic_hfclk_start+0x50>
}
   11546:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   1154a:	2000      	movs	r0, #0
   1154c:	f7ff bfb0 	b.w	114b0 <clkstarted_handle.constprop.0>
}
   11550:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   11554:	2001      	movs	r0, #1
   11556:	f007 ba8d 	b.w	18a74 <nrfx_clock_start>
   1155a:	bf00      	nop
   1155c:	20002514 	.word	0x20002514
   11560:	20002504 	.word	0x20002504

00011564 <api_blocking_start>:
{
   11564:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   11566:	2200      	movs	r2, #0
   11568:	2301      	movs	r3, #1
   1156a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1156e:	ab04      	add	r3, sp, #16
   11570:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   11574:	4a09      	ldr	r2, [pc, #36]	; (1159c <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   11576:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1157a:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1157c:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   11580:	f00a f99a 	bl	1b8b8 <api_start>
	if (err < 0) {
   11584:	2800      	cmp	r0, #0
   11586:	db05      	blt.n	11594 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   11588:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1158c:	2300      	movs	r3, #0
   1158e:	4668      	mov	r0, sp
   11590:	f008 f8f4 	bl	1977c <z_impl_k_sem_take>
}
   11594:	b007      	add	sp, #28
   11596:	f85d fb04 	ldr.w	pc, [sp], #4
   1159a:	bf00      	nop
   1159c:	0001b8df 	.word	0x0001b8df

000115a0 <lfclk_start>:
{
   115a0:	b510      	push	{r4, lr}
	if (!once) {
   115a2:	4c07      	ldr	r4, [pc, #28]	; (115c0 <lfclk_start+0x20>)
   115a4:	7823      	ldrb	r3, [r4, #0]
   115a6:	b92b      	cbnz	r3, 115b4 <lfclk_start+0x14>
	z_impl_k_busy_wait(usec_to_wait);
   115a8:	f44f 70a5 	mov.w	r0, #330	; 0x14a
   115ac:	f00f f8fe 	bl	207ac <z_impl_k_busy_wait>
		once = true;
   115b0:	2301      	movs	r3, #1
   115b2:	7023      	strb	r3, [r4, #0]
}
   115b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   115b8:	2000      	movs	r0, #0
   115ba:	f007 ba5b 	b.w	18a74 <nrfx_clock_start>
   115be:	bf00      	nop
   115c0:	20002ad2 	.word	0x20002ad2

000115c4 <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   115c4:	4b09      	ldr	r3, [pc, #36]	; (115ec <generic_hfclk_stop+0x28>)
   115c6:	f3bf 8f5b 	dmb	ish
   115ca:	e853 2f00 	ldrex	r2, [r3]
   115ce:	f022 0102 	bic.w	r1, r2, #2
   115d2:	e843 1000 	strex	r0, r1, [r3]
   115d6:	2800      	cmp	r0, #0
   115d8:	d1f7      	bne.n	115ca <generic_hfclk_stop+0x6>
   115da:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   115de:	07d3      	lsls	r3, r2, #31
   115e0:	d402      	bmi.n	115e8 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   115e2:	2001      	movs	r0, #1
   115e4:	f00e bce8 	b.w	1ffb8 <nrfx_clock_stop>
}
   115e8:	4770      	bx	lr
   115ea:	bf00      	nop
   115ec:	20002514 	.word	0x20002514

000115f0 <z_nrf_clock_control_lf_on>:
{
   115f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   115f4:	4939      	ldr	r1, [pc, #228]	; (116dc <z_nrf_clock_control_lf_on+0xec>)
   115f6:	f3bf 8f5b 	dmb	ish
   115fa:	4607      	mov	r7, r0
   115fc:	2201      	movs	r2, #1
   115fe:	e851 3f00 	ldrex	r3, [r1]
   11602:	e841 2000 	strex	r0, r2, [r1]
   11606:	2800      	cmp	r0, #0
   11608:	d1f9      	bne.n	115fe <z_nrf_clock_control_lf_on+0xe>
   1160a:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   1160e:	b933      	cbnz	r3, 1161e <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   11610:	4933      	ldr	r1, [pc, #204]	; (116e0 <z_nrf_clock_control_lf_on+0xf0>)
		err = onoff_request(mgr, &cli);
   11612:	4834      	ldr	r0, [pc, #208]	; (116e4 <z_nrf_clock_control_lf_on+0xf4>)
   11614:	604b      	str	r3, [r1, #4]
   11616:	60cb      	str	r3, [r1, #12]
   11618:	608a      	str	r2, [r1, #8]
   1161a:	f009 f954 	bl	1a8c6 <onoff_request>
	switch (start_mode) {
   1161e:	1e7b      	subs	r3, r7, #1
   11620:	2b01      	cmp	r3, #1
   11622:	d82f      	bhi.n	11684 <z_nrf_clock_control_lf_on+0x94>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   11624:	2f01      	cmp	r7, #1
   11626:	d107      	bne.n	11638 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   11628:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1162c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   11630:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   11634:	2b01      	cmp	r3, #1
   11636:	d025      	beq.n	11684 <z_nrf_clock_control_lf_on+0x94>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   11638:	f00e fda4 	bl	20184 <k_is_in_isr>
   1163c:	4604      	mov	r4, r0
   1163e:	b918      	cbnz	r0, 11648 <z_nrf_clock_control_lf_on+0x58>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
   11640:	4b29      	ldr	r3, [pc, #164]	; (116e8 <z_nrf_clock_control_lf_on+0xf8>)
	int key = isr_mode ? irq_lock() : 0;
   11642:	781b      	ldrb	r3, [r3, #0]
   11644:	2b00      	cmp	r3, #0
   11646:	d141      	bne.n	116cc <z_nrf_clock_control_lf_on+0xdc>
	__asm__ volatile(
   11648:	f04f 0340 	mov.w	r3, #64	; 0x40
   1164c:	f3ef 8611 	mrs	r6, BASEPRI
   11650:	f383 8811 	msr	BASEPRI, r3
   11654:	f3bf 8f6f 	isb	sy
   11658:	2401      	movs	r4, #1
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1165a:	f8df 8090 	ldr.w	r8, [pc, #144]	; 116ec <z_nrf_clock_control_lf_on+0xfc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1165e:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   11662:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   11666:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
   1166a:	03d2      	lsls	r2, r2, #15
   1166c:	d50c      	bpl.n	11688 <z_nrf_clock_control_lf_on+0x98>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   1166e:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   11672:	2b01      	cmp	r3, #1
   11674:	d001      	beq.n	1167a <z_nrf_clock_control_lf_on+0x8a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   11676:	2f01      	cmp	r7, #1
   11678:	d106      	bne.n	11688 <z_nrf_clock_control_lf_on+0x98>
	if (isr_mode) {
   1167a:	b30c      	cbz	r4, 116c0 <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
   1167c:	f386 8811 	msr	BASEPRI, r6
   11680:	f3bf 8f6f 	isb	sy
}
   11684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   11688:	b1ac      	cbz	r4, 116b6 <z_nrf_clock_control_lf_on+0xc6>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1168a:	4630      	mov	r0, r6
   1168c:	f000 fb4e 	bl	11d2c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   11690:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   11694:	2b00      	cmp	r3, #0
   11696:	d1e4      	bne.n	11662 <z_nrf_clock_control_lf_on+0x72>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   11698:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   1169c:	2a00      	cmp	r2, #0
   1169e:	d0e0      	beq.n	11662 <z_nrf_clock_control_lf_on+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   116a0:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   116a4:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   116a8:	2301      	movs	r3, #1
   116aa:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
   116ae:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   116b2:	60ab      	str	r3, [r5, #8]
}
   116b4:	e7d5      	b.n	11662 <z_nrf_clock_control_lf_on+0x72>
	return z_impl_k_sleep(timeout);
   116b6:	2100      	movs	r1, #0
   116b8:	2021      	movs	r0, #33	; 0x21
   116ba:	f008 fd3f 	bl	1a13c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   116be:	e7e7      	b.n	11690 <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENSET = mask;
   116c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   116c4:	2202      	movs	r2, #2
   116c6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   116ca:	e7db      	b.n	11684 <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENCLR = mask;
   116cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   116d0:	2202      	movs	r2, #2
   116d2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   116d6:	4606      	mov	r6, r0
}
   116d8:	e7bf      	b.n	1165a <z_nrf_clock_control_lf_on+0x6a>
   116da:	bf00      	nop
   116dc:	20002518 	.word	0x20002518
   116e0:	200024b4 	.word	0x200024b4
   116e4:	200024e0 	.word	0x200024e0
   116e8:	200036fe 	.word	0x200036fe
   116ec:	e000e100 	.word	0xe000e100

000116f0 <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(int32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
   116f0:	4a04      	ldr	r2, [pc, #16]	; (11704 <sys_clock_timeout_handler+0x14>)
   116f2:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
   116f4:	1ac8      	subs	r0, r1, r3
   116f6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
   116fa:	4403      	add	r3, r0
   116fc:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   116fe:	f008 be91 	b.w	1a424 <sys_clock_announce>
   11702:	bf00      	nop
   11704:	2000252c 	.word	0x2000252c

00011708 <set_absolute_alarm>:
{
   11708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1170c:	0086      	lsls	r6, r0, #2
   1170e:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   11712:	f100 0450 	add.w	r4, r0, #80	; 0x50
   11716:	f506 3688 	add.w	r6, r6, #69632	; 0x11000
   1171a:	00a4      	lsls	r4, r4, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_rtc_event_clear(NRF_RTC_Type * p_reg, nrf_rtc_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1171c:	b2a4      	uxth	r4, r4
   1171e:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   11722:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    return p_reg->CC[ch];
   11726:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   1172a:	f8df 806c 	ldr.w	r8, [pc, #108]	; 11798 <set_absolute_alarm+0x90>
	uint32_t cc_val = abs_val & COUNTER_MAX;
   1172e:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   11732:	f504 3488 	add.w	r4, r4, #69632	; 0x11000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   11736:	4087      	lsls	r7, r0
     return p_reg->COUNTER;
   11738:	f8d8 9504 	ldr.w	r9, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1173c:	eba3 0309 	sub.w	r3, r3, r9
   11740:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   11744:	f029 427f 	bic.w	r2, r9, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   11748:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
   1174a:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
   1174e:	d102      	bne.n	11756 <set_absolute_alarm+0x4e>
	z_impl_k_busy_wait(usec_to_wait);
   11750:	2013      	movs	r0, #19
   11752:	f00f f82b 	bl	207ac <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   11756:	f109 0202 	add.w	r2, r9, #2
	return (a - b) & COUNTER_MAX;
   1175a:	1aab      	subs	r3, r5, r2
   1175c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
   11760:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   11764:	bf88      	it	hi
   11766:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   11768:	2300      	movs	r3, #0
   1176a:	6023      	str	r3, [r4, #0]
   1176c:	6823      	ldr	r3, [r4, #0]
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1176e:	f8c8 7344 	str.w	r7, [r8, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   11772:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   11776:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
   1177a:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   1177e:	4599      	cmp	r9, r3
   11780:	d006      	beq.n	11790 <set_absolute_alarm+0x88>
	return (a - b) & COUNTER_MAX;
   11782:	1aeb      	subs	r3, r5, r3
   11784:	3b02      	subs	r3, #2
   11786:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   1178a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   1178e:	d801      	bhi.n	11794 <set_absolute_alarm+0x8c>
}
   11790:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		prev_cc = cc_val;
   11794:	462b      	mov	r3, r5
   11796:	e7cf      	b.n	11738 <set_absolute_alarm+0x30>
   11798:	40011000 	.word	0x40011000

0001179c <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
   1179c:	b570      	push	{r4, r5, r6, lr}
   1179e:	4d15      	ldr	r5, [pc, #84]	; (117f4 <rtc_nrf_isr+0x58>)
    return p_reg->INTENSET & mask;
   117a0:	4c15      	ldr	r4, [pc, #84]	; (117f8 <rtc_nrf_isr+0x5c>)
	ARG_UNUSED(arg);

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   117a2:	2600      	movs	r6, #0
   117a4:	682b      	ldr	r3, [r5, #0]
   117a6:	2000      	movs	r0, #0
   117a8:	b106      	cbz	r6, 117ac <rtc_nrf_isr+0x10>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
   117aa:	bd70      	pop	{r4, r5, r6, pc}
   117ac:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
   117b0:	03d2      	lsls	r2, r2, #15
   117b2:	d5fa      	bpl.n	117aa <rtc_nrf_isr+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   117b4:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
   117b8:	2a00      	cmp	r2, #0
   117ba:	d0f6      	beq.n	117aa <rtc_nrf_isr+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   117bc:	f8c4 6140 	str.w	r6, [r4, #320]	; 0x140
   117c0:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   117c4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   117c8:	f8c4 2348 	str.w	r2, [r4, #840]	; 0x348
    return p_reg->CC[ch];
   117cc:	f8d4 1540 	ldr.w	r1, [r4, #1344]	; 0x540
     return p_reg->COUNTER;
   117d0:	f8d4 6504 	ldr.w	r6, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   117d4:	1a72      	subs	r2, r6, r1
   117d6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
				cc_val = now;
   117da:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
   117de:	bf88      	it	hi
   117e0:	4631      	movhi	r1, r6
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   117e2:	2601      	movs	r6, #1
			if (handler) {
   117e4:	b11b      	cbz	r3, 117ee <rtc_nrf_isr+0x52>
				handler(chan, cc_val,
   117e6:	686a      	ldr	r2, [r5, #4]
   117e8:	6028      	str	r0, [r5, #0]
   117ea:	4798      	blx	r3
   117ec:	e7da      	b.n	117a4 <rtc_nrf_isr+0x8>
   117ee:	602b      	str	r3, [r5, #0]
}
   117f0:	e7db      	b.n	117aa <rtc_nrf_isr+0xe>
   117f2:	bf00      	nop
   117f4:	20002520 	.word	0x20002520
   117f8:	40011000 	.word	0x40011000

000117fc <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
   117fc:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
   117fe:	4c0f      	ldr	r4, [pc, #60]	; (1183c <sys_clock_driver_init+0x40>)
   11800:	2500      	movs	r5, #0
    p_reg->INTENSET = mask;
   11802:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
   11806:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    p_reg->INTENSET = mask;
   1180a:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   1180e:	4b0c      	ldr	r3, [pc, #48]	; (11840 <sys_clock_driver_init+0x44>)
   11810:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   11814:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   11818:	2101      	movs	r1, #1
   1181a:	462a      	mov	r2, r5
   1181c:	2011      	movs	r0, #17
   1181e:	f000 fa01 	bl	11c24 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   11822:	2011      	movs	r0, #17
   11824:	f000 f9cc 	bl	11bc0 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   11828:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1182a:	4a06      	ldr	r2, [pc, #24]	; (11844 <sys_clock_driver_init+0x48>)
   1182c:	60a3      	str	r3, [r4, #8]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
   1182e:	2002      	movs	r0, #2
   11830:	6023      	str	r3, [r4, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
   11832:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
   11834:	f7ff fedc 	bl	115f0 <z_nrf_clock_control_lf_on>

	return 0;
}
   11838:	4628      	mov	r0, r5
   1183a:	bd38      	pop	{r3, r4, r5, pc}
   1183c:	40011000 	.word	0x40011000
   11840:	e000e100 	.word	0xe000e100
   11844:	20002528 	.word	0x20002528

00011848 <sys_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   11848:	4a13      	ldr	r2, [pc, #76]	; (11898 <sys_clock_set_timeout+0x50>)
   1184a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1184e:	bf14      	ite	ne
   11850:	4603      	movne	r3, r0
   11852:	4613      	moveq	r3, r2
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   11854:	3b01      	subs	r3, #1
   11856:	2b00      	cmp	r3, #0
   11858:	dd1c      	ble.n	11894 <sys_clock_set_timeout+0x4c>
   1185a:	4293      	cmp	r3, r2
   1185c:	bfa8      	it	ge
   1185e:	4613      	movge	r3, r2
     return p_reg->COUNTER;
   11860:	4a0e      	ldr	r2, [pc, #56]	; (1189c <sys_clock_set_timeout+0x54>)
   11862:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
   11866:	4a0e      	ldr	r2, [pc, #56]	; (118a0 <sys_clock_set_timeout+0x58>)
   11868:	6811      	ldr	r1, [r2, #0]
	return (a - b) & COUNTER_MAX;
   1186a:	1a40      	subs	r0, r0, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
   1186c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
   11870:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
		ticks = 0;
   11874:	bf18      	it	ne
   11876:	2300      	movne	r3, #0
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   11878:	3201      	adds	r2, #1
   1187a:	4413      	add	r3, r2
	cc_data[chan].callback = handler;
   1187c:	4a09      	ldr	r2, [pc, #36]	; (118a4 <sys_clock_set_timeout+0x5c>)
   1187e:	480a      	ldr	r0, [pc, #40]	; (118a8 <sys_clock_set_timeout+0x60>)
   11880:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
   11882:	2000      	movs	r0, #0
   11884:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
   11886:	4a04      	ldr	r2, [pc, #16]	; (11898 <sys_clock_set_timeout+0x50>)
   11888:	4293      	cmp	r3, r2
   1188a:	bf94      	ite	ls
   1188c:	18c9      	addls	r1, r1, r3
   1188e:	1889      	addhi	r1, r1, r2
   11890:	f7ff bf3a 	b.w	11708 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   11894:	2300      	movs	r3, #0
   11896:	e7e3      	b.n	11860 <sys_clock_set_timeout+0x18>
   11898:	007fffff 	.word	0x007fffff
   1189c:	40011000 	.word	0x40011000
   118a0:	2000252c 	.word	0x2000252c
   118a4:	20002520 	.word	0x20002520
   118a8:	000116f1 	.word	0x000116f1

000118ac <sys_clock_elapsed>:
   118ac:	4b04      	ldr	r3, [pc, #16]	; (118c0 <sys_clock_elapsed+0x14>)
   118ae:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
{
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return counter_sub(counter(), last_count) / CYC_PER_TICK;
   118b2:	4b04      	ldr	r3, [pc, #16]	; (118c4 <sys_clock_elapsed+0x18>)
	return (a - b) & COUNTER_MAX;
   118b4:	681b      	ldr	r3, [r3, #0]
   118b6:	1ac0      	subs	r0, r0, r3
}
   118b8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   118bc:	4770      	bx	lr
   118be:	bf00      	nop
   118c0:	40011000 	.word	0x40011000
   118c4:	2000252c 	.word	0x2000252c

000118c8 <uECC_get_rng>:
}

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
   118c8:	4b01      	ldr	r3, [pc, #4]	; (118d0 <uECC_get_rng+0x8>)
   118ca:	6818      	ldr	r0, [r3, #0]
   118cc:	4770      	bx	lr
   118ce:	bf00      	nop
   118d0:	200004a4 	.word	0x200004a4

000118d4 <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
   118d4:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
   118d6:	2208      	movs	r2, #8
{
   118d8:	b089      	sub	sp, #36	; 0x24
	uECC_vli_set(result, product, NUM_ECC_WORDS);
   118da:	f00a f9bc 	bl	1bc56 <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
	tmp[3] = product[11];
   118de:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   118e0:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
   118e2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   118e4:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
   118e6:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   118e8:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
   118ea:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   118ec:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
   118ee:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   118f0:	9307      	str	r3, [sp, #28]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   118f2:	4613      	mov	r3, r2
   118f4:	466a      	mov	r2, sp
{
   118f6:	460c      	mov	r4, r1
   118f8:	4606      	mov	r6, r0
	tmp[0] = tmp[1] = tmp[2] = 0;
   118fa:	2700      	movs	r7, #0
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   118fc:	4611      	mov	r1, r2
   118fe:	4610      	mov	r0, r2
	tmp[0] = tmp[1] = tmp[2] = 0;
   11900:	e9cd 7701 	strd	r7, r7, [sp, #4]
   11904:	9700      	str	r7, [sp, #0]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   11906:	f00a f8b3 	bl	1ba70 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   1190a:	4631      	mov	r1, r6
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   1190c:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   1190e:	4630      	mov	r0, r6
   11910:	f00a f8ae 	bl	1ba70 <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
   11914:	6b21      	ldr	r1, [r4, #48]	; 0x30
   11916:	9103      	str	r1, [sp, #12]
	tmp[4] = product[13];
   11918:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1191a:	9104      	str	r1, [sp, #16]
	tmp[5] = product[14];
   1191c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   1191e:	9105      	str	r1, [sp, #20]
	tmp[6] = product[15];
   11920:	6be1      	ldr	r1, [r4, #60]	; 0x3c
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   11922:	4405      	add	r5, r0
	tmp[7] = 0;
   11924:	e9cd 1706 	strd	r1, r7, [sp, #24]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   11928:	4610      	mov	r0, r2
   1192a:	4611      	mov	r1, r2
   1192c:	f00a f8a0 	bl	1ba70 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   11930:	4631      	mov	r1, r6
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   11932:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   11934:	4630      	mov	r0, r6
   11936:	f00a f89b 	bl	1ba70 <uECC_vli_add>
   1193a:	4405      	add	r5, r0

	/* s3 */
	tmp[0] = product[8];
   1193c:	6a20      	ldr	r0, [r4, #32]
   1193e:	9000      	str	r0, [sp, #0]
	tmp[1] = product[9];
   11940:	6a60      	ldr	r0, [r4, #36]	; 0x24
   11942:	9001      	str	r0, [sp, #4]
	tmp[2] = product[10];
   11944:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   11946:	9002      	str	r0, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
   11948:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   1194a:	9006      	str	r0, [sp, #24]
	tmp[7] = product[15];
   1194c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1194e:	9007      	str	r0, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   11950:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
   11952:	e9cd 7704 	strd	r7, r7, [sp, #16]
   11956:	9703      	str	r7, [sp, #12]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   11958:	f00a f88a 	bl	1ba70 <uECC_vli_add>
   1195c:	4405      	add	r5, r0

	/* s4 */
	tmp[0] = product[9];
   1195e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   11960:	9000      	str	r0, [sp, #0]
	tmp[1] = product[10];
   11962:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	tmp[2] = product[11];
	tmp[3] = product[13];
	tmp[4] = product[14];
   11964:	f8d4 c038 	ldr.w	ip, [r4, #56]	; 0x38
	tmp[1] = product[10];
   11968:	9001      	str	r0, [sp, #4]
	tmp[2] = product[11];
   1196a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1196c:	9002      	str	r0, [sp, #8]
	tmp[4] = product[14];
   1196e:	f8cd c010 	str.w	ip, [sp, #16]
	tmp[3] = product[13];
   11972:	6b60      	ldr	r0, [r4, #52]	; 0x34
	tmp[5] = product[15];
   11974:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
	tmp[3] = product[13];
   11978:	9003      	str	r0, [sp, #12]
	tmp[6] = product[13];
   1197a:	e9cd c005 	strd	ip, r0, [sp, #20]
	tmp[7] = product[8];
   1197e:	6a20      	ldr	r0, [r4, #32]
   11980:	9007      	str	r0, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   11982:	4630      	mov	r0, r6
   11984:	f00a f874 	bl	1ba70 <uECC_vli_add>
   11988:	4405      	add	r5, r0

	/* d1 */
	tmp[0] = product[11];
   1198a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1198c:	9000      	str	r0, [sp, #0]
	tmp[1] = product[12];
   1198e:	6b20      	ldr	r0, [r4, #48]	; 0x30
   11990:	9001      	str	r0, [sp, #4]
	tmp[2] = product[13];
   11992:	6b60      	ldr	r0, [r4, #52]	; 0x34
   11994:	9002      	str	r0, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
   11996:	6a20      	ldr	r0, [r4, #32]
   11998:	9006      	str	r0, [sp, #24]
	tmp[7] = product[10];
   1199a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   1199c:	9007      	str	r0, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   1199e:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
   119a0:	e9cd 7704 	strd	r7, r7, [sp, #16]
   119a4:	9703      	str	r7, [sp, #12]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   119a6:	f00a f98c 	bl	1bcc2 <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
   119aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
   119ac:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
   119ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
   119b0:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
   119b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   119b4:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
   119b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   119b8:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
   119ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
   119bc:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
   119be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   119c0:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   119c2:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   119c4:	2308      	movs	r3, #8
   119c6:	4630      	mov	r0, r6
	tmp[4] = tmp[5] = 0;
   119c8:	e9cd 7704 	strd	r7, r7, [sp, #16]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   119cc:	f00a f979 	bl	1bcc2 <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
   119d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   119d2:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
   119d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   119d6:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
   119d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   119da:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
   119dc:	6a23      	ldr	r3, [r4, #32]
   119de:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
   119e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   119e2:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
   119e4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[6] = 0;
   119e6:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[12];
   119ea:	6b23      	ldr	r3, [r4, #48]	; 0x30
   119ec:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   119ee:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   119f0:	2308      	movs	r3, #8
   119f2:	4630      	mov	r0, r6
   119f4:	f00a f965 	bl	1bcc2 <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
   119f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   119fa:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
   119fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[2] = 0;
   119fe:	e9cd 3701 	strd	r3, r7, [sp, #4]
	tmp[3] = product[9];
   11a02:	6a63      	ldr	r3, [r4, #36]	; 0x24
   11a04:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
   11a06:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   11a08:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
   11a0a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[6] = 0;
   11a0c:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[13];
   11a10:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11a12:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   11a14:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   11a16:	2308      	movs	r3, #8
   11a18:	4630      	mov	r0, r6
   11a1a:	f00a f952 	bl	1bcc2 <uECC_vli_sub>

	if (carry < 0) {
   11a1e:	1a2d      	subs	r5, r5, r0
   11a20:	d410      	bmi.n	11a44 <vli_mmod_fast_secp256r1+0x170>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
		}
		while (carry < 0);
	} else  {
		while (carry || 
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
   11a22:	4c0d      	ldr	r4, [pc, #52]	; (11a58 <vli_mmod_fast_secp256r1+0x184>)
		while (carry || 
   11a24:	b935      	cbnz	r5, 11a34 <vli_mmod_fast_secp256r1+0x160>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
   11a26:	2208      	movs	r2, #8
   11a28:	4631      	mov	r1, r6
   11a2a:	4620      	mov	r0, r4
   11a2c:	f00a f91f 	bl	1bc6e <uECC_vli_cmp_unsafe>
		while (carry || 
   11a30:	2801      	cmp	r0, #1
   11a32:	d00f      	beq.n	11a54 <vli_mmod_fast_secp256r1+0x180>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   11a34:	2308      	movs	r3, #8
   11a36:	4622      	mov	r2, r4
   11a38:	4631      	mov	r1, r6
   11a3a:	4630      	mov	r0, r6
   11a3c:	f00a f941 	bl	1bcc2 <uECC_vli_sub>
   11a40:	1a2d      	subs	r5, r5, r0
   11a42:	e7ef      	b.n	11a24 <vli_mmod_fast_secp256r1+0x150>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   11a44:	4a04      	ldr	r2, [pc, #16]	; (11a58 <vli_mmod_fast_secp256r1+0x184>)
   11a46:	2308      	movs	r3, #8
   11a48:	4631      	mov	r1, r6
   11a4a:	4630      	mov	r0, r6
   11a4c:	f00a f810 	bl	1ba70 <uECC_vli_add>
		while (carry < 0);
   11a50:	182d      	adds	r5, r5, r0
   11a52:	d4f8      	bmi.n	11a46 <vli_mmod_fast_secp256r1+0x172>
		}
	}
}
   11a54:	b009      	add	sp, #36	; 0x24
   11a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11a58:	00020fa8 	.word	0x00020fa8

00011a5c <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
   11a5c:	4904      	ldr	r1, [pc, #16]	; (11a70 <sub_bytes+0x14>)
   11a5e:	1e43      	subs	r3, r0, #1
   11a60:	300f      	adds	r0, #15
   11a62:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   11a66:	5c8a      	ldrb	r2, [r1, r2]
   11a68:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   11a6a:	4283      	cmp	r3, r0
   11a6c:	d1f9      	bne.n	11a62 <sub_bytes+0x6>
	}
}
   11a6e:	4770      	bx	lr
   11a70:	000219c0 	.word	0x000219c0

00011a74 <tc_aes128_set_encrypt_key>:
{
   11a74:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   11a76:	4e26      	ldr	r6, [pc, #152]	; (11b10 <tc_aes128_set_encrypt_key+0x9c>)
{
   11a78:	4607      	mov	r7, r0
   11a7a:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   11a7c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   11a7e:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   11a80:	ad01      	add	r5, sp, #4
   11a82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   11a84:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   11a86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   11a88:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   11a8c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
   11a90:	4638      	mov	r0, r7
   11a92:	2f00      	cmp	r7, #0
   11a94:	d038      	beq.n	11b08 <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
   11a96:	2c00      	cmp	r4, #0
   11a98:	d038      	beq.n	11b0c <tc_aes128_set_encrypt_key+0x98>
   11a9a:	1f38      	subs	r0, r7, #4
   11a9c:	4621      	mov	r1, r4
   11a9e:	4602      	mov	r2, r0
   11aa0:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   11aa2:	784b      	ldrb	r3, [r1, #1]
   11aa4:	780d      	ldrb	r5, [r1, #0]
   11aa6:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   11aa8:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   11aac:	78cd      	ldrb	r5, [r1, #3]
   11aae:	432b      	orrs	r3, r5
   11ab0:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
   11ab2:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   11ab4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   11ab8:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   11aba:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   11abe:	d1f0      	bne.n	11aa2 <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   11ac0:	4c14      	ldr	r4, [pc, #80]	; (11b14 <tc_aes128_set_encrypt_key+0xa0>)
   11ac2:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   11ac4:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   11ac6:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   11ac8:	d116      	bne.n	11af8 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   11aca:	f3c3 4207 	ubfx	r2, r3, #16, #8
   11ace:	5ca5      	ldrb	r5, [r4, r2]
   11ad0:	0e1a      	lsrs	r2, r3, #24
   11ad2:	5ca2      	ldrb	r2, [r4, r2]
   11ad4:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   11ad8:	f3c3 2507 	ubfx	r5, r3, #8, #8
   11adc:	b2db      	uxtb	r3, r3
   11ade:	5d65      	ldrb	r5, [r4, r5]
   11ae0:	5ce3      	ldrb	r3, [r4, r3]
   11ae2:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   11ae6:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   11aea:	f021 0303 	bic.w	r3, r1, #3
   11aee:	3330      	adds	r3, #48	; 0x30
   11af0:	446b      	add	r3, sp
   11af2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   11af6:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
   11af8:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   11afc:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   11afe:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   11b00:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   11b02:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   11b04:	d1de      	bne.n	11ac4 <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
   11b06:	2001      	movs	r0, #1
}
   11b08:	b00d      	add	sp, #52	; 0x34
   11b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   11b0c:	4620      	mov	r0, r4
   11b0e:	e7fb      	b.n	11b08 <tc_aes128_set_encrypt_key+0x94>
   11b10:	00020e24 	.word	0x00020e24
   11b14:	000219c0 	.word	0x000219c0

00011b18 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   11b18:	4a09      	ldr	r2, [pc, #36]	; (11b40 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   11b1a:	490a      	ldr	r1, [pc, #40]	; (11b44 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   11b1c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   11b1e:	6809      	ldr	r1, [r1, #0]
   11b20:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   11b22:	4909      	ldr	r1, [pc, #36]	; (11b48 <arch_swap+0x30>)
	_current->arch.basepri = key;
   11b24:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   11b26:	684b      	ldr	r3, [r1, #4]
   11b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   11b2c:	604b      	str	r3, [r1, #4]
   11b2e:	2300      	movs	r3, #0
   11b30:	f383 8811 	msr	BASEPRI, r3
   11b34:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   11b38:	6893      	ldr	r3, [r2, #8]
}
   11b3a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   11b3c:	4770      	bx	lr
   11b3e:	bf00      	nop
   11b40:	20002918 	.word	0x20002918
   11b44:	00021544 	.word	0x00021544
   11b48:	e000ed00 	.word	0xe000ed00

00011b4c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   11b4c:	4912      	ldr	r1, [pc, #72]	; (11b98 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   11b4e:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   11b50:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   11b54:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   11b56:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   11b5a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   11b5e:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   11b60:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   11b64:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   11b68:	4f0c      	ldr	r7, [pc, #48]	; (11b9c <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   11b6a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   11b6e:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
   11b70:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   11b72:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   11b74:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   11b76:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   11b78:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   11b7a:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   11b7e:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   11b80:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   11b82:	f000 faaf 	bl	120e4 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   11b86:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   11b8a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   11b8e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   11b92:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   11b96:	4770      	bx	lr
    ldr r1, =_kernel
   11b98:	20002918 	.word	0x20002918
    ldr v4, =_SCS_ICSR
   11b9c:	e000ed04 	.word	0xe000ed04

00011ba0 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
   11ba0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   11ba4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   11ba6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   11baa:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   11bae:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   11bb0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   11bb4:	2902      	cmp	r1, #2
    beq _oops
   11bb6:	d0ff      	beq.n	11bb8 <_oops>

00011bb8 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   11bb8:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   11bba:	f00a ffad 	bl	1cb18 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   11bbe:	bd01      	pop	{r0, pc}

00011bc0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   11bc0:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   11bc2:	2b00      	cmp	r3, #0
   11bc4:	db08      	blt.n	11bd8 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11bc6:	2201      	movs	r2, #1
   11bc8:	f000 001f 	and.w	r0, r0, #31
   11bcc:	fa02 f000 	lsl.w	r0, r2, r0
   11bd0:	095b      	lsrs	r3, r3, #5
   11bd2:	4a02      	ldr	r2, [pc, #8]	; (11bdc <arch_irq_enable+0x1c>)
   11bd4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   11bd8:	4770      	bx	lr
   11bda:	bf00      	nop
   11bdc:	e000e100 	.word	0xe000e100

00011be0 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   11be0:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   11be2:	2b00      	cmp	r3, #0
   11be4:	db0d      	blt.n	11c02 <arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11be6:	2201      	movs	r2, #1
   11be8:	095b      	lsrs	r3, r3, #5
   11bea:	f000 001f 	and.w	r0, r0, #31
   11bee:	fa02 f000 	lsl.w	r0, r2, r0
   11bf2:	3320      	adds	r3, #32
   11bf4:	4a03      	ldr	r2, [pc, #12]	; (11c04 <arch_irq_disable+0x24>)
   11bf6:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   11bfa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11bfe:	f3bf 8f6f 	isb	sy
}
   11c02:	4770      	bx	lr
   11c04:	e000e100 	.word	0xe000e100

00011c08 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   11c08:	4b05      	ldr	r3, [pc, #20]	; (11c20 <arch_irq_is_enabled+0x18>)
   11c0a:	0942      	lsrs	r2, r0, #5
   11c0c:	f000 001f 	and.w	r0, r0, #31
   11c10:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   11c14:	2301      	movs	r3, #1
   11c16:	fa03 f000 	lsl.w	r0, r3, r0
}
   11c1a:	4010      	ands	r0, r2
   11c1c:	4770      	bx	lr
   11c1e:	bf00      	nop
   11c20:	e000e100 	.word	0xe000e100

00011c24 <z_arm_irq_priority_set>:
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   11c24:	07d3      	lsls	r3, r2, #31
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   11c26:	b242      	sxtb	r2, r0
		prio += _IRQ_PRIO_OFFSET;
   11c28:	bf54      	ite	pl
   11c2a:	1c8b      	addpl	r3, r1, #2
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   11c2c:	2300      	movmi	r3, #0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   11c2e:	2a00      	cmp	r2, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11c30:	bfac      	ite	ge
   11c32:	f102 4260 	addge.w	r2, r2, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11c36:	4a07      	ldrlt	r2, [pc, #28]	; (11c54 <z_arm_irq_priority_set+0x30>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11c38:	ea4f 1343 	mov.w	r3, r3, lsl #5
   11c3c:	bfac      	ite	ge
   11c3e:	f502 4261 	addge.w	r2, r2, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11c42:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11c46:	b2db      	uxtb	r3, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11c48:	bfb4      	ite	lt
   11c4a:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11c4c:	f882 3300 	strbge.w	r3, [r2, #768]	; 0x300
}
   11c50:	4770      	bx	lr
   11c52:	bf00      	nop
   11c54:	e000ed14 	.word	0xe000ed14

00011c58 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   11c58:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   11c5a:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   11c5c:	4b04      	ldr	r3, [pc, #16]	; (11c70 <_arch_isr_direct_pm+0x18>)
   11c5e:	6a18      	ldr	r0, [r3, #32]
   11c60:	b118      	cbz	r0, 11c6a <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
   11c62:	2200      	movs	r2, #0
   11c64:	621a      	str	r2, [r3, #32]
		z_pm_save_idle_exit(idle_val);
   11c66:	f00e fa98 	bl	2019a <z_pm_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   11c6a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   11c6c:	bd08      	pop	{r3, pc}
   11c6e:	bf00      	nop
   11c70:	20002918 	.word	0x20002918

00011c74 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   11c74:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   11c78:	9b00      	ldr	r3, [sp, #0]
   11c7a:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   11c7e:	490a      	ldr	r1, [pc, #40]	; (11ca8 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   11c80:	9b01      	ldr	r3, [sp, #4]
   11c82:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   11c86:	9b02      	ldr	r3, [sp, #8]
   11c88:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   11c8c:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   11c90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   11c94:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   11c98:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   11c9c:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   11c9e:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   11ca0:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   11ca2:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   11ca4:	4770      	bx	lr
   11ca6:	bf00      	nop
   11ca8:	0001a959 	.word	0x0001a959

00011cac <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   11cac:	4a09      	ldr	r2, [pc, #36]	; (11cd4 <z_check_thread_stack_fail+0x28>)
{
   11cae:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
   11cb0:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
   11cb2:	b170      	cbz	r0, 11cd2 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   11cb4:	f113 0f16 	cmn.w	r3, #22
   11cb8:	6e80      	ldr	r0, [r0, #104]	; 0x68
   11cba:	d005      	beq.n	11cc8 <z_check_thread_stack_fail+0x1c>
   11cbc:	f1a0 0220 	sub.w	r2, r0, #32
   11cc0:	429a      	cmp	r2, r3
   11cc2:	d805      	bhi.n	11cd0 <z_check_thread_stack_fail+0x24>
   11cc4:	4283      	cmp	r3, r0
   11cc6:	d203      	bcs.n	11cd0 <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
   11cc8:	4281      	cmp	r1, r0
   11cca:	bf28      	it	cs
   11ccc:	2000      	movcs	r0, #0
   11cce:	4770      	bx	lr
   11cd0:	2000      	movs	r0, #0
}
   11cd2:	4770      	bx	lr
   11cd4:	20002918 	.word	0x20002918

00011cd8 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   11cd8:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   11cda:	4b09      	ldr	r3, [pc, #36]	; (11d00 <arch_switch_to_main_thread+0x28>)
   11cdc:	6098      	str	r0, [r3, #8]
{
   11cde:	460d      	mov	r5, r1
   11ce0:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   11ce2:	f000 f9ff 	bl	120e4 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   11ce6:	4620      	mov	r0, r4
   11ce8:	f385 8809 	msr	PSP, r5
   11cec:	2100      	movs	r1, #0
   11cee:	b663      	cpsie	if
   11cf0:	f381 8811 	msr	BASEPRI, r1
   11cf4:	f3bf 8f6f 	isb	sy
   11cf8:	2200      	movs	r2, #0
   11cfa:	2300      	movs	r3, #0
   11cfc:	f008 fe2c 	bl	1a958 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   11d00:	20002918 	.word	0x20002918

00011d04 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   11d04:	4901      	ldr	r1, [pc, #4]	; (11d0c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   11d06:	2210      	movs	r2, #16
	str	r2, [r1]
   11d08:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   11d0a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   11d0c:	e000ed10 	.word	0xe000ed10

00011d10 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   11d10:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   11d12:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   11d14:	f380 8811 	msr	BASEPRI, r0
	isb
   11d18:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   11d1c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   11d20:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   11d22:	b662      	cpsie	i
	isb
   11d24:	f3bf 8f6f 	isb	sy

	bx	lr
   11d28:	4770      	bx	lr
   11d2a:	bf00      	nop

00011d2c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   11d2c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   11d2e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   11d30:	f381 8811 	msr	BASEPRI, r1

	wfe
   11d34:	bf20      	wfe

	msr	BASEPRI, r0
   11d36:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   11d3a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   11d3c:	4770      	bx	lr
   11d3e:	bf00      	nop

00011d40 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   11d40:	bf30      	wfi
    b z_SysNmiOnReset
   11d42:	f7ff bffd 	b.w	11d40 <z_SysNmiOnReset>
   11d46:	bf00      	nop

00011d48 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   11d48:	4a0b      	ldr	r2, [pc, #44]	; (11d78 <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   11d4a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   11d4c:	4b0b      	ldr	r3, [pc, #44]	; (11d7c <z_arm_prep_c+0x34>)
   11d4e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   11d52:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   11d54:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11d58:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   11d5c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   11d60:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   11d64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   11d68:	f007 fa16 	bl	19198 <z_bss_zero>
	z_data_copy();
   11d6c:	f008 fa7a 	bl	1a264 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   11d70:	f000 f98e 	bl	12090 <z_arm_interrupt_init>
	z_cstart();
   11d74:	f007 fa34 	bl	191e0 <z_cstart>
   11d78:	00000000 	.word	0x00000000
   11d7c:	e000ed00 	.word	0xe000ed00

00011d80 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   11d80:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   11d82:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   11d84:	4a0b      	ldr	r2, [pc, #44]	; (11db4 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   11d86:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
   11d88:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   11d8a:	bf1e      	ittt	ne
	movne	r1, #0
   11d8c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   11d8e:	6211      	strne	r1, [r2, #32]
		blne	z_pm_save_idle_exit
   11d90:	f00e fa03 	blne	2019a <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   11d94:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   11d96:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   11d9a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   11d9e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   11da2:	4905      	ldr	r1, [pc, #20]	; (11db8 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   11da4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   11da6:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   11da8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   11daa:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   11dae:	4903      	ldr	r1, [pc, #12]	; (11dbc <_isr_wrapper+0x3c>)
	bx r1
   11db0:	4708      	bx	r1
   11db2:	0000      	.short	0x0000
	ldr r2, =_kernel
   11db4:	20002918 	.word	0x20002918
	ldr r1, =_sw_isr_table
   11db8:	00020bf0 	.word	0x00020bf0
	ldr r1, =z_arm_int_exit
   11dbc:	00011fed 	.word	0x00011fed

00011dc0 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   11dc0:	2000      	movs	r0, #0
    msr CONTROL, r0
   11dc2:	f380 8814 	msr	CONTROL, r0
    isb
   11dc6:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   11dca:	f00e fe87 	bl	20adc <z_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   11dce:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   11dd0:	490d      	ldr	r1, [pc, #52]	; (11e08 <__start+0x48>)
    str r0, [r1]
   11dd2:	6008      	str	r0, [r1, #0]
    dsb
   11dd4:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   11dd8:	480c      	ldr	r0, [pc, #48]	; (11e0c <__start+0x4c>)
    msr msp, r0
   11dda:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   11dde:	f000 f925 	bl	1202c <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   11de2:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   11de4:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   11de8:	4809      	ldr	r0, [pc, #36]	; (11e10 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   11dea:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
   11dee:	1840      	adds	r0, r0, r1
    msr PSP, r0
   11df0:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   11df4:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   11df8:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   11dfa:	4308      	orrs	r0, r1
    msr CONTROL, r0
   11dfc:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   11e00:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   11e04:	f7ff ffa0 	bl	11d48 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   11e08:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   11e0c:	200056c0 	.word	0x200056c0
    ldr r0, =z_interrupt_stacks
   11e10:	20005840 	.word	0x20005840

00011e14 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   11e14:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   11e18:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   11e1c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   11e1e:	4672      	mov	r2, lr
	bl z_arm_fault
   11e20:	f000 f856 	bl	11ed0 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   11e24:	bd01      	pop	{r0, pc}
   11e26:	bf00      	nop

00011e28 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
   11e28:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   11e2a:	4b19      	ldr	r3, [pc, #100]	; (11e90 <mem_manage_fault+0x68>)
{
   11e2c:	4614      	mov	r4, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   11e2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   11e30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   11e32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
   11e34:	4605      	mov	r5, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   11e36:	0790      	lsls	r0, r2, #30
   11e38:	d519      	bpl.n	11e6e <mem_manage_fault+0x46>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
   11e3a:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   11e3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11e3e:	0612      	lsls	r2, r2, #24
   11e40:	d515      	bpl.n	11e6e <mem_manage_fault+0x46>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
   11e42:	b119      	cbz	r1, 11e4c <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   11e44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11e46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   11e4a:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   11e4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   11e4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   11e50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11e52:	06d1      	lsls	r1, r2, #27
   11e54:	d40e      	bmi.n	11e74 <mem_manage_fault+0x4c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   11e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   11e58:	079a      	lsls	r2, r3, #30
   11e5a:	d40b      	bmi.n	11e74 <mem_manage_fault+0x4c>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   11e5c:	2000      	movs	r0, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   11e5e:	4a0c      	ldr	r2, [pc, #48]	; (11e90 <mem_manage_fault+0x68>)
   11e60:	6a93      	ldr	r3, [r2, #40]	; 0x28
   11e62:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   11e66:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   11e68:	2300      	movs	r3, #0
   11e6a:	7023      	strb	r3, [r4, #0]

	return reason;
}
   11e6c:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t mmfar = -EINVAL;
   11e6e:	f06f 0015 	mvn.w	r0, #21
   11e72:	e7eb      	b.n	11e4c <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   11e74:	4b06      	ldr	r3, [pc, #24]	; (11e90 <mem_manage_fault+0x68>)
   11e76:	685b      	ldr	r3, [r3, #4]
   11e78:	051b      	lsls	r3, r3, #20
   11e7a:	d5ef      	bpl.n	11e5c <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   11e7c:	4629      	mov	r1, r5
   11e7e:	f7ff ff15 	bl	11cac <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   11e82:	2800      	cmp	r0, #0
   11e84:	d0ea      	beq.n	11e5c <mem_manage_fault+0x34>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   11e86:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   11e8a:	2002      	movs	r0, #2
   11e8c:	e7e7      	b.n	11e5e <mem_manage_fault+0x36>
   11e8e:	bf00      	nop
   11e90:	e000ed00 	.word	0xe000ed00

00011e94 <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   11e94:	4b0d      	ldr	r3, [pc, #52]	; (11ecc <bus_fault.constprop.0+0x38>)
   11e96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   11e98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   11e9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11e9c:	0592      	lsls	r2, r2, #22
   11e9e:	d508      	bpl.n	11eb2 <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   11ea0:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   11ea2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11ea4:	0412      	lsls	r2, r2, #16
   11ea6:	d504      	bpl.n	11eb2 <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
   11ea8:	b118      	cbz	r0, 11eb2 <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   11eaa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11eac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   11eb0:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   11eb2:	4b06      	ldr	r3, [pc, #24]	; (11ecc <bus_fault.constprop.0+0x38>)
   11eb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   11eb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11eb8:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   11eba:	bf58      	it	pl
   11ebc:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   11ebe:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
   11ec0:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   11ec2:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
   11ec6:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   11ec8:	7008      	strb	r0, [r1, #0]

	return reason;
}
   11eca:	4770      	bx	lr
   11ecc:	e000ed00 	.word	0xe000ed00

00011ed0 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   11ed0:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   11ed2:	4b41      	ldr	r3, [pc, #260]	; (11fd8 <z_arm_fault+0x108>)
   11ed4:	685b      	ldr	r3, [r3, #4]
{
   11ed6:	b08a      	sub	sp, #40	; 0x28
   11ed8:	460e      	mov	r6, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   11eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
   11ede:	2500      	movs	r5, #0
   11ee0:	f385 8811 	msr	BASEPRI, r5
   11ee4:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   11ee8:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
   11eec:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
   11ef0:	d111      	bne.n	11f16 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   11ef2:	f002 010c 	and.w	r1, r2, #12
   11ef6:	2908      	cmp	r1, #8
   11ef8:	d00d      	beq.n	11f16 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   11efa:	0711      	lsls	r1, r2, #28
   11efc:	d401      	bmi.n	11f02 <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
   11efe:	4606      	mov	r6, r0
			*nested_exc = true;
   11f00:	2501      	movs	r5, #1
	*recoverable = false;
   11f02:	2200      	movs	r2, #0
	switch (fault) {
   11f04:	3b03      	subs	r3, #3
	*recoverable = false;
   11f06:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
   11f0a:	2b03      	cmp	r3, #3
   11f0c:	d85d      	bhi.n	11fca <z_arm_fault+0xfa>
   11f0e:	e8df f003 	tbb	[pc, r3]
   11f12:	4704      	.short	0x4704
   11f14:	4f4b      	.short	0x4f4b
		return NULL;
   11f16:	462e      	mov	r6, r5
   11f18:	e7f3      	b.n	11f02 <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   11f1a:	4b2f      	ldr	r3, [pc, #188]	; (11fd8 <z_arm_fault+0x108>)
   11f1c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   11f1e:	f014 0402 	ands.w	r4, r4, #2
   11f22:	d152      	bne.n	11fca <z_arm_fault+0xfa>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   11f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   11f26:	0052      	lsls	r2, r2, #1
   11f28:	d522      	bpl.n	11f70 <z_arm_fault+0xa0>
		if (SCB_MMFSR != 0) {
   11f2a:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   11f2e:	b13a      	cbz	r2, 11f40 <z_arm_fault+0x70>
			reason = mem_manage_fault(esf, 1, recoverable);
   11f30:	f10d 0207 	add.w	r2, sp, #7
   11f34:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   11f36:	4630      	mov	r0, r6
   11f38:	f7ff ff76 	bl	11e28 <mem_manage_fault>
		reason = bus_fault(esf, 0, recoverable);
   11f3c:	4604      	mov	r4, r0
		break;
   11f3e:	e017      	b.n	11f70 <z_arm_fault+0xa0>
		} else if (SCB_BFSR != 0) {
   11f40:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
   11f44:	b12a      	cbz	r2, 11f52 <z_arm_fault+0x82>
			reason = bus_fault(esf, 1, recoverable);
   11f46:	f10d 0107 	add.w	r1, sp, #7
   11f4a:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   11f4c:	f7ff ffa2 	bl	11e94 <bus_fault.constprop.0>
   11f50:	e7f4      	b.n	11f3c <z_arm_fault+0x6c>
		} else if (SCB_UFSR != 0) {
   11f52:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
   11f54:	b292      	uxth	r2, r2
   11f56:	b15a      	cbz	r2, 11f70 <z_arm_fault+0xa0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   11f58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   11f5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   11f5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   11f5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   11f60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   11f62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   11f64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11f66:	ea6f 4202 	mvn.w	r2, r2, lsl #16
   11f6a:	ea6f 4212 	mvn.w	r2, r2, lsr #16
   11f6e:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   11f70:	f89d 3007 	ldrb.w	r3, [sp, #7]
   11f74:	b993      	cbnz	r3, 11f9c <z_arm_fault+0xcc>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   11f76:	2220      	movs	r2, #32
   11f78:	4631      	mov	r1, r6
   11f7a:	a802      	add	r0, sp, #8
   11f7c:	f00a fe93 	bl	1cca6 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   11f80:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11f82:	b325      	cbz	r5, 11fce <z_arm_fault+0xfe>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   11f84:	f3c3 0208 	ubfx	r2, r3, #0, #9
   11f88:	b922      	cbnz	r2, 11f94 <z_arm_fault+0xc4>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   11f8a:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   11f8e:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   11f92:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   11f94:	a902      	add	r1, sp, #8
   11f96:	4620      	mov	r0, r4
   11f98:	f00a fdbc 	bl	1cb14 <z_arm_fatal_error>
}
   11f9c:	b00a      	add	sp, #40	; 0x28
   11f9e:	bd70      	pop	{r4, r5, r6, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   11fa0:	f10d 0207 	add.w	r2, sp, #7
   11fa4:	2100      	movs	r1, #0
   11fa6:	e7c6      	b.n	11f36 <z_arm_fault+0x66>
		reason = bus_fault(esf, 0, recoverable);
   11fa8:	f10d 0107 	add.w	r1, sp, #7
   11fac:	2000      	movs	r0, #0
   11fae:	e7cd      	b.n	11f4c <z_arm_fault+0x7c>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   11fb0:	4b09      	ldr	r3, [pc, #36]	; (11fd8 <z_arm_fault+0x108>)
   11fb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   11fb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   11fb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   11fb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   11fba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   11fbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   11fbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11fc0:	ea6f 4202 	mvn.w	r2, r2, lsl #16
   11fc4:	ea6f 4212 	mvn.w	r2, r2, lsr #16
   11fc8:	629a      	str	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   11fca:	2400      	movs	r4, #0
   11fcc:	e7d0      	b.n	11f70 <z_arm_fault+0xa0>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   11fce:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   11fd2:	f023 0301 	bic.w	r3, r3, #1
   11fd6:	e7dc      	b.n	11f92 <z_arm_fault+0xc2>
   11fd8:	e000ed00 	.word	0xe000ed00

00011fdc <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   11fdc:	4a02      	ldr	r2, [pc, #8]	; (11fe8 <z_arm_fault_init+0xc>)
   11fde:	6953      	ldr	r3, [r2, #20]
   11fe0:	f043 0310 	orr.w	r3, r3, #16
   11fe4:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   11fe6:	4770      	bx	lr
   11fe8:	e000ed00 	.word	0xe000ed00

00011fec <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   11fec:	4b04      	ldr	r3, [pc, #16]	; (12000 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   11fee:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   11ff0:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
   11ff2:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   11ff4:	d003      	beq.n	11ffe <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   11ff6:	4903      	ldr	r1, [pc, #12]	; (12004 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   11ff8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   11ffc:	600a      	str	r2, [r1, #0]

00011ffe <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   11ffe:	4770      	bx	lr
	ldr r3, =_kernel
   12000:	20002918 	.word	0x20002918
	ldr r1, =_SCS_ICSR
   12004:	e000ed04 	.word	0xe000ed04

00012008 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   12008:	4907      	ldr	r1, [pc, #28]	; (12028 <z_arm_clear_arm_mpu_config+0x20>)
   1200a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
   1200e:	2300      	movs	r3, #0
	int num_regions =
   12010:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
   12014:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
   12016:	4293      	cmp	r3, r2
   12018:	d100      	bne.n	1201c <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   1201a:	4770      	bx	lr
  MPU->RNR = rnr;
   1201c:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
   12020:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   12024:	3301      	adds	r3, #1
   12026:	e7f6      	b.n	12016 <z_arm_clear_arm_mpu_config+0xe>
   12028:	e000ed00 	.word	0xe000ed00

0001202c <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
   1202c:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   1202e:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   12030:	2300      	movs	r3, #0
   12032:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   12036:	f7ff ffe7 	bl	12008 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   1203a:	4b14      	ldr	r3, [pc, #80]	; (1208c <z_arm_init_arch_hw_at_boot+0x60>)
   1203c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12040:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   12044:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   12048:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   1204c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   12050:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   12054:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   12058:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   1205c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   12060:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   12064:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   12068:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
   1206c:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
   12070:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
   12074:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
   12078:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
   1207c:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
   12080:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   12082:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   12086:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   1208a:	bd08      	pop	{r3, pc}
   1208c:	e000e100 	.word	0xe000e100

00012090 <z_arm_interrupt_init>:
   12090:	4804      	ldr	r0, [pc, #16]	; (120a4 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   12092:	2300      	movs	r3, #0
   12094:	2140      	movs	r1, #64	; 0x40
   12096:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   12098:	3301      	adds	r3, #1
   1209a:	2b27      	cmp	r3, #39	; 0x27
   1209c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   120a0:	d1f9      	bne.n	12096 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   120a2:	4770      	bx	lr
   120a4:	e000e100 	.word	0xe000e100

000120a8 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   120a8:	4b06      	ldr	r3, [pc, #24]	; (120c4 <z_impl_k_thread_abort+0x1c>)
   120aa:	689b      	ldr	r3, [r3, #8]
   120ac:	4283      	cmp	r3, r0
   120ae:	d107      	bne.n	120c0 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   120b0:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   120b4:	b123      	cbz	r3, 120c0 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   120b6:	4a04      	ldr	r2, [pc, #16]	; (120c8 <z_impl_k_thread_abort+0x20>)
   120b8:	6853      	ldr	r3, [r2, #4]
   120ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   120be:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
   120c0:	f008 b86c 	b.w	1a19c <z_thread_abort>
   120c4:	20002918 	.word	0x20002918
   120c8:	e000ed00 	.word	0xe000ed00

000120cc <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   120cc:	4b02      	ldr	r3, [pc, #8]	; (120d8 <z_arm_configure_static_mpu_regions+0xc>)
   120ce:	4a03      	ldr	r2, [pc, #12]	; (120dc <z_arm_configure_static_mpu_regions+0x10>)
   120d0:	4803      	ldr	r0, [pc, #12]	; (120e0 <z_arm_configure_static_mpu_regions+0x14>)
   120d2:	2101      	movs	r1, #1
   120d4:	f000 b86e 	b.w	121b4 <arm_core_mpu_configure_static_mpu_regions>
   120d8:	20010000 	.word	0x20010000
   120dc:	20000000 	.word	0x20000000
   120e0:	00021054 	.word	0x00021054

000120e4 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   120e4:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   120e6:	4b05      	ldr	r3, [pc, #20]	; (120fc <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
   120e8:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
   120ea:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   120ec:	4a04      	ldr	r2, [pc, #16]	; (12100 <z_arm_configure_dynamic_mpu_regions+0x1c>)
   120ee:	2120      	movs	r1, #32
   120f0:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   120f4:	4618      	mov	r0, r3
   120f6:	2101      	movs	r1, #1
   120f8:	f000 b866 	b.w	121c8 <arm_core_mpu_configure_dynamic_mpu_regions>
   120fc:	20002530 	.word	0x20002530
   12100:	150b0000 	.word	0x150b0000

00012104 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   12104:	b5f0      	push	{r4, r5, r6, r7, lr}
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
   12106:	4f1f      	ldr	r7, [pc, #124]	; (12184 <mpu_configure_regions+0x80>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   12108:	2600      	movs	r6, #0
   1210a:	428e      	cmp	r6, r1
   1210c:	db01      	blt.n	12112 <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   1210e:	4610      	mov	r0, r2
   12110:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
   12112:	6844      	ldr	r4, [r0, #4]
   12114:	b39c      	cbz	r4, 1217e <mpu_configure_regions+0x7a>
		if (do_sanity_check &&
   12116:	b153      	cbz	r3, 1212e <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   12118:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   1211c:	ea14 0f0c 	tst.w	r4, ip
   12120:	d118      	bne.n	12154 <mpu_configure_regions+0x50>
		&&
   12122:	2c1f      	cmp	r4, #31
   12124:	d916      	bls.n	12154 <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
   12126:	6805      	ldr	r5, [r0, #0]
		&&
   12128:	ea1c 0f05 	tst.w	ip, r5
   1212c:	d112      	bne.n	12154 <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   1212e:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
   12130:	6805      	ldr	r5, [r0, #0]
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   12132:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   12136:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
   12138:	d90f      	bls.n	1215a <mpu_configure_regions+0x56>
	if (size > (1UL << 31)) {
   1213a:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   1213e:	d80e      	bhi.n	1215e <mpu_configure_regions+0x5a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   12140:	3c01      	subs	r4, #1
   12142:	fab4 f484 	clz	r4, r4
   12146:	f1c4 041f 	rsb	r4, r4, #31
   1214a:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   1214c:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   1214e:	ea4c 0404 	orr.w	r4, ip, r4
   12152:	d906      	bls.n	12162 <mpu_configure_regions+0x5e>
			return -EINVAL;
   12154:	f06f 0215 	mvn.w	r2, #21
   12158:	e7d9      	b.n	1210e <mpu_configure_regions+0xa>
		return REGION_32B;
   1215a:	2408      	movs	r4, #8
   1215c:	e7f6      	b.n	1214c <mpu_configure_regions+0x48>
		return REGION_4G;
   1215e:	243e      	movs	r4, #62	; 0x3e
   12160:	e7f4      	b.n	1214c <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   12162:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
   12166:	4315      	orrs	r5, r2
   12168:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   1216c:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
   12170:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   12174:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
		reg_index++;
   12178:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   1217a:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
   1217e:	3601      	adds	r6, #1
   12180:	300c      	adds	r0, #12
   12182:	e7c2      	b.n	1210a <mpu_configure_regions+0x6>
   12184:	e000ed00 	.word	0xe000ed00

00012188 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   12188:	4b04      	ldr	r3, [pc, #16]	; (1219c <arm_core_mpu_enable+0x14>)
   1218a:	2205      	movs	r2, #5
   1218c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   12190:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   12194:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   12198:	4770      	bx	lr
   1219a:	bf00      	nop
   1219c:	e000ed00 	.word	0xe000ed00

000121a0 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   121a0:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   121a4:	4b02      	ldr	r3, [pc, #8]	; (121b0 <arm_core_mpu_disable+0x10>)
   121a6:	2200      	movs	r2, #0
   121a8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   121ac:	4770      	bx	lr
   121ae:	bf00      	nop
   121b0:	e000ed00 	.word	0xe000ed00

000121b4 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   121b4:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   121b6:	4c03      	ldr	r4, [pc, #12]	; (121c4 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   121b8:	2301      	movs	r3, #1
   121ba:	7822      	ldrb	r2, [r4, #0]
   121bc:	f7ff ffa2 	bl	12104 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   121c0:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   121c2:	bd10      	pop	{r4, pc}
   121c4:	20002ad3 	.word	0x20002ad3

000121c8 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
   121c8:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   121ca:	4a09      	ldr	r2, [pc, #36]	; (121f0 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
   121cc:	2300      	movs	r3, #0
   121ce:	7812      	ldrb	r2, [r2, #0]
   121d0:	f7ff ff98 	bl	12104 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   121d4:	f110 0f16 	cmn.w	r0, #22
   121d8:	d002      	beq.n	121e0 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
  MPU->RNR = rnr;
   121da:	4a06      	ldr	r2, [pc, #24]	; (121f4 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   121dc:	2807      	cmp	r0, #7
   121de:	dd00      	ble.n	121e2 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
   121e0:	bd08      	pop	{r3, pc}
   121e2:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
   121e6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
   121ea:	3001      	adds	r0, #1
   121ec:	e7f6      	b.n	121dc <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
   121ee:	bf00      	nop
   121f0:	20002ad3 	.word	0x20002ad3
   121f4:	e000ed00 	.word	0xe000ed00

000121f8 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   121f8:	4914      	ldr	r1, [pc, #80]	; (1224c <z_arm_mpu_init+0x54>)
   121fa:	6808      	ldr	r0, [r1, #0]
   121fc:	2808      	cmp	r0, #8
{
   121fe:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   12200:	d821      	bhi.n	12246 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   12202:	f7ff ffcd 	bl	121a0 <arm_core_mpu_disable>
	MPU->RNR = index;
   12206:	4c12      	ldr	r4, [pc, #72]	; (12250 <z_arm_mpu_init+0x58>)
   12208:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1220a:	2200      	movs	r2, #0
   1220c:	4290      	cmp	r0, r2
   1220e:	f101 010c 	add.w	r1, r1, #12
   12212:	d105      	bne.n	12220 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   12214:	4b0f      	ldr	r3, [pc, #60]	; (12254 <z_arm_mpu_init+0x5c>)
   12216:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
   12218:	f7ff ffb6 	bl	12188 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   1221c:	2000      	movs	r0, #0
}
   1221e:	bd10      	pop	{r4, pc}
   12220:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   12224:	f851 3c0c 	ldr.w	r3, [r1, #-12]
   12228:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   1222c:	4313      	orrs	r3, r2
   1222e:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   12232:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   12236:	f851 3c04 	ldr.w	r3, [r1, #-4]
   1223a:	f043 0301 	orr.w	r3, r3, #1
   1223e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   12242:	3201      	adds	r2, #1
   12244:	e7e2      	b.n	1220c <z_arm_mpu_init+0x14>
		return -1;
   12246:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1224a:	e7e8      	b.n	1221e <z_arm_mpu_init+0x26>
   1224c:	00021060 	.word	0x00021060
   12250:	e000ed00 	.word	0xe000ed00
   12254:	20002ad3 	.word	0x20002ad3

00012258 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   12258:	4b01      	ldr	r3, [pc, #4]	; (12260 <__stdout_hook_install+0x8>)
   1225a:	6018      	str	r0, [r3, #0]
}
   1225c:	4770      	bx	lr
   1225e:	bf00      	nop
   12260:	200004a8 	.word	0x200004a8

00012264 <nordicsemi_nrf52_init>:
	__asm__ volatile(
   12264:	f04f 0340 	mov.w	r3, #64	; 0x40
   12268:	f3ef 8211 	mrs	r2, BASEPRI
   1226c:	f383 8811 	msr	BASEPRI, r3
   12270:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   12274:	4906      	ldr	r1, [pc, #24]	; (12290 <nordicsemi_nrf52_init+0x2c>)
   12276:	2301      	movs	r3, #1
   12278:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   1227c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   12280:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
   12284:	f382 8811 	msr	BASEPRI, r2
   12288:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   1228c:	2000      	movs	r0, #0
   1228e:	4770      	bx	lr
   12290:	4001e000 	.word	0x4001e000

00012294 <sys_arch_reboot>:
    *p_gpregret = val;
   12294:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   12298:	b2c0      	uxtb	r0, r0
   1229a:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   1229e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   122a2:	4905      	ldr	r1, [pc, #20]	; (122b8 <sys_arch_reboot+0x24>)
   122a4:	4b05      	ldr	r3, [pc, #20]	; (122bc <sys_arch_reboot+0x28>)
   122a6:	68ca      	ldr	r2, [r1, #12]
   122a8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   122ac:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   122ae:	60cb      	str	r3, [r1, #12]
   122b0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   122b4:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   122b6:	e7fd      	b.n	122b4 <sys_arch_reboot+0x20>
   122b8:	e000ed00 	.word	0xe000ed00
   122bc:	05fa0004 	.word	0x05fa0004

000122c0 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   122c0:	b120      	cbz	r0, 122cc <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   122c2:	4b03      	ldr	r3, [pc, #12]	; (122d0 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   122c4:	0180      	lsls	r0, r0, #6
   122c6:	f043 0301 	orr.w	r3, r3, #1
   122ca:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   122cc:	4770      	bx	lr
   122ce:	bf00      	nop
   122d0:	00020eb0 	.word	0x00020eb0

000122d4 <le_gen_dhkey>:
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
}

static uint8_t le_gen_dhkey(uint8_t *key, uint8_t key_type)
{
   122d4:	b570      	push	{r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   122d6:	4c21      	ldr	r4, [pc, #132]	; (1235c <le_gen_dhkey+0x88>)
   122d8:	f3bf 8f5b 	dmb	ish
   122dc:	6823      	ldr	r3, [r4, #0]
   122de:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   122e2:	07da      	lsls	r2, r3, #31
{
   122e4:	4606      	mov	r6, r0
   122e6:	460d      	mov	r5, r1
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   122e8:	d501      	bpl.n	122ee <le_gen_dhkey+0x1a>
		return BT_HCI_ERR_CMD_DISALLOWED;
   122ea:	200c      	movs	r0, #12
			  key_type == BT_HCI_LE_KEY_TYPE_DEBUG);

	k_sem_give(&cmd_sem);

	return BT_HCI_ERR_SUCCESS;
}
   122ec:	bd70      	pop	{r4, r5, r6, pc}
	if (key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
   122ee:	2901      	cmp	r1, #1
   122f0:	d831      	bhi.n	12356 <le_gen_dhkey+0x82>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   122f2:	f3bf 8f5b 	dmb	ish
   122f6:	e854 3f00 	ldrex	r3, [r4]
   122fa:	f043 0202 	orr.w	r2, r3, #2
   122fe:	e844 2100 	strex	r1, r2, [r4]
   12302:	2900      	cmp	r1, #0
   12304:	d1f7      	bne.n	122f6 <le_gen_dhkey+0x22>
   12306:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
   1230a:	079b      	lsls	r3, r3, #30
   1230c:	d4ed      	bmi.n	122ea <le_gen_dhkey+0x16>
	sys_memcpy_swap(ecc.public_key_be, key, BT_PUB_KEY_COORD_LEN);
   1230e:	4814      	ldr	r0, [pc, #80]	; (12360 <le_gen_dhkey+0x8c>)
   12310:	4631      	mov	r1, r6
   12312:	f00a fd51 	bl	1cdb8 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecc.public_key_be[BT_PUB_KEY_COORD_LEN], &key[BT_PUB_KEY_COORD_LEN],
   12316:	4813      	ldr	r0, [pc, #76]	; (12364 <le_gen_dhkey+0x90>)
   12318:	f106 0120 	add.w	r1, r6, #32
   1231c:	f00a fd4c 	bl	1cdb8 <sys_memcpy_swap.constprop.0>
   12320:	f3bf 8f5b 	dmb	ish
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	if (val) {
   12324:	b175      	cbz	r5, 12344 <le_gen_dhkey+0x70>
   12326:	e854 3f00 	ldrex	r3, [r4]
   1232a:	f043 0304 	orr.w	r3, r3, #4
   1232e:	e844 3200 	strex	r2, r3, [r4]
   12332:	2a00      	cmp	r2, #0
   12334:	d1f7      	bne.n	12326 <le_gen_dhkey+0x52>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12336:	f3bf 8f5b 	dmb	ish
	z_impl_k_sem_give(sem);
   1233a:	480b      	ldr	r0, [pc, #44]	; (12368 <le_gen_dhkey+0x94>)
   1233c:	f007 f9f8 	bl	19730 <z_impl_k_sem_give>
   12340:	2000      	movs	r0, #0
   12342:	e7d3      	b.n	122ec <le_gen_dhkey+0x18>
   12344:	e854 3f00 	ldrex	r3, [r4]
   12348:	f023 0304 	bic.w	r3, r3, #4
   1234c:	e844 3200 	strex	r2, r3, [r4]
   12350:	2a00      	cmp	r2, #0
   12352:	d0f0      	beq.n	12336 <le_gen_dhkey+0x62>
   12354:	e7f6      	b.n	12344 <le_gen_dhkey+0x70>
		return BT_HCI_ERR_INVALID_PARAM;
   12356:	2012      	movs	r0, #18
   12358:	e7c8      	b.n	122ec <le_gen_dhkey+0x18>
   1235a:	bf00      	nop
   1235c:	2000253c 	.word	0x2000253c
   12360:	20002af4 	.word	0x20002af4
   12364:	20002b14 	.word	0x20002b14
   12368:	200006f4 	.word	0x200006f4

0001236c <ecc_thread>:
{
   1236c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12370:	4f60      	ldr	r7, [pc, #384]	; (124f4 <ecc_thread+0x188>)
	return z_impl_k_sem_take(sem, timeout);
   12372:	f8df 8184 	ldr.w	r8, [pc, #388]	; 124f8 <ecc_thread+0x18c>
   12376:	463e      	mov	r6, r7
   12378:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1237c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12380:	4640      	mov	r0, r8
   12382:	f007 f9fb 	bl	1977c <z_impl_k_sem_take>
   12386:	f3bf 8f5b 	dmb	ish
   1238a:	683c      	ldr	r4, [r7, #0]
   1238c:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   12390:	f014 0401 	ands.w	r4, r4, #1
   12394:	d055      	beq.n	12442 <ecc_thread+0xd6>
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
   12396:	f8df 9164 	ldr.w	r9, [pc, #356]	; 124fc <ecc_thread+0x190>
   1239a:	4c59      	ldr	r4, [pc, #356]	; (12500 <ecc_thread+0x194>)
	} while (memcmp(ecc.private_key_be, debug_private_key_be, BT_PRIV_KEY_LEN) == 0);
   1239c:	4d59      	ldr	r5, [pc, #356]	; (12504 <ecc_thread+0x198>)
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
   1239e:	485a      	ldr	r0, [pc, #360]	; (12508 <ecc_thread+0x19c>)
   123a0:	464a      	mov	r2, r9
   123a2:	4621      	mov	r1, r4
   123a4:	f009 fab8 	bl	1b918 <uECC_make_key>
		if (rc == TC_CRYPTO_FAIL) {
   123a8:	2800      	cmp	r0, #0
   123aa:	d03e      	beq.n	1242a <ecc_thread+0xbe>
	} while (memcmp(ecc.private_key_be, debug_private_key_be, BT_PRIV_KEY_LEN) == 0);
   123ac:	2220      	movs	r2, #32
   123ae:	4629      	mov	r1, r5
   123b0:	4620      	mov	r0, r4
   123b2:	f00a fc67 	bl	1cc84 <memcmp>
   123b6:	2800      	cmp	r0, #0
   123b8:	d0f1      	beq.n	1239e <ecc_thread+0x32>
	return 0;
   123ba:	f04f 0900 	mov.w	r9, #0
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   123be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   123c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   123c6:	2001      	movs	r0, #1
   123c8:	f000 fa0e 	bl	127e8 <bt_buf_get_rx>
   123cc:	f100 0508 	add.w	r5, r0, #8
   123d0:	2102      	movs	r1, #2
   123d2:	4604      	mov	r4, r0
   123d4:	4628      	mov	r0, r5
   123d6:	f00d fbb8 	bl	1fb4a <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   123da:	233e      	movs	r3, #62	; 0x3e
   123dc:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   123de:	2342      	movs	r3, #66	; 0x42
   123e0:	7043      	strb	r3, [r0, #1]
   123e2:	2101      	movs	r1, #1
   123e4:	4628      	mov	r0, r5
   123e6:	f00d fbb0 	bl	1fb4a <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   123ea:	2308      	movs	r3, #8
   123ec:	7003      	strb	r3, [r0, #0]
   123ee:	2141      	movs	r1, #65	; 0x41
   123f0:	4628      	mov	r0, r5
   123f2:	f00d fbaa 	bl	1fb4a <net_buf_simple_add>
   123f6:	4605      	mov	r5, r0
	evt->status = status;
   123f8:	f800 9b01 	strb.w	r9, [r0], #1
	if (status) {
   123fc:	f1b9 0f00 	cmp.w	r9, #0
   12400:	d016      	beq.n	12430 <ecc_thread+0xc4>
		(void)memset(evt->key, 0, sizeof(evt->key));
   12402:	2240      	movs	r2, #64	; 0x40
   12404:	2100      	movs	r1, #0
   12406:	f00a fc59 	bl	1ccbc <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1240a:	f3bf 8f5b 	dmb	ish
   1240e:	e856 3f00 	ldrex	r3, [r6]
   12412:	f023 0301 	bic.w	r3, r3, #1
   12416:	e846 3200 	strex	r2, r3, [r6]
   1241a:	2a00      	cmp	r2, #0
   1241c:	d1f7      	bne.n	1240e <ecc_thread+0xa2>
   1241e:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
   12422:	4620      	mov	r0, r4
	bt_recv(buf);
   12424:	f000 fee8 	bl	131f8 <bt_recv>
	while (true) {
   12428:	e7a6      	b.n	12378 <ecc_thread+0xc>
			return BT_HCI_ERR_UNSPECIFIED;
   1242a:	f04f 091f 	mov.w	r9, #31
   1242e:	e7c6      	b.n	123be <ecc_thread+0x52>
		sys_memcpy_swap(evt->key, ecc.public_key_be, BT_PUB_KEY_COORD_LEN);
   12430:	4935      	ldr	r1, [pc, #212]	; (12508 <ecc_thread+0x19c>)
   12432:	f00a fcc1 	bl	1cdb8 <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[BT_PUB_KEY_COORD_LEN],
   12436:	3120      	adds	r1, #32
   12438:	f105 0021 	add.w	r0, r5, #33	; 0x21
   1243c:	f00a fcbc 	bl	1cdb8 <sys_memcpy_swap.constprop.0>
   12440:	e7e3      	b.n	1240a <ecc_thread+0x9e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12442:	f3bf 8f5b 	dmb	ish
   12446:	683b      	ldr	r3, [r7, #0]
   12448:	f3bf 8f5b 	dmb	ish
		} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
   1244c:	079b      	lsls	r3, r3, #30
   1244e:	d593      	bpl.n	12378 <ecc_thread+0xc>
	ret = uECC_valid_public_key(ecc.public_key_be, &curve_secp256r1);
   12450:	492a      	ldr	r1, [pc, #168]	; (124fc <ecc_thread+0x190>)
   12452:	482d      	ldr	r0, [pc, #180]	; (12508 <ecc_thread+0x19c>)
   12454:	f00a f925 	bl	1c6a2 <uECC_valid_public_key>
	if (ret < 0) {
   12458:	2800      	cmp	r0, #0
   1245a:	db11      	blt.n	12480 <ecc_thread+0x114>
   1245c:	f3bf 8f5b 	dmb	ish
   12460:	683b      	ldr	r3, [r7, #0]
		ret = uECC_shared_secret(ecc.public_key_be,
   12462:	4927      	ldr	r1, [pc, #156]	; (12500 <ecc_thread+0x194>)
   12464:	4827      	ldr	r0, [pc, #156]	; (12504 <ecc_thread+0x198>)
   12466:	f3bf 8f5b 	dmb	ish
   1246a:	f013 0f04 	tst.w	r3, #4
   1246e:	f101 0220 	add.w	r2, r1, #32
   12472:	4b22      	ldr	r3, [pc, #136]	; (124fc <ecc_thread+0x190>)
   12474:	bf18      	it	ne
   12476:	4601      	movne	r1, r0
   12478:	4610      	mov	r0, r2
   1247a:	f009 fa9c 	bl	1b9b6 <uECC_shared_secret>
   1247e:	4604      	mov	r4, r0
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   12480:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12484:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12488:	2001      	movs	r0, #1
   1248a:	f000 f9ad 	bl	127e8 <bt_buf_get_rx>
   1248e:	f100 0908 	add.w	r9, r0, #8
   12492:	2102      	movs	r1, #2
   12494:	4605      	mov	r5, r0
   12496:	4648      	mov	r0, r9
   12498:	f00d fb57 	bl	1fb4a <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   1249c:	233e      	movs	r3, #62	; 0x3e
   1249e:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   124a0:	2322      	movs	r3, #34	; 0x22
   124a2:	7043      	strb	r3, [r0, #1]
   124a4:	2101      	movs	r1, #1
   124a6:	4648      	mov	r0, r9
   124a8:	f00d fb4f 	bl	1fb4a <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   124ac:	2309      	movs	r3, #9
   124ae:	7003      	strb	r3, [r0, #0]
   124b0:	2121      	movs	r1, #33	; 0x21
   124b2:	4648      	mov	r0, r9
   124b4:	f00d fb49 	bl	1fb4a <net_buf_simple_add>
   124b8:	4603      	mov	r3, r0
	if (ret == TC_CRYPTO_FAIL) {
   124ba:	3001      	adds	r0, #1
   124bc:	b99c      	cbnz	r4, 124e6 <ecc_thread+0x17a>
		evt->status = BT_HCI_ERR_UNSPECIFIED;
   124be:	221f      	movs	r2, #31
   124c0:	701a      	strb	r2, [r3, #0]
		(void)memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
   124c2:	21ff      	movs	r1, #255	; 0xff
   124c4:	2220      	movs	r2, #32
   124c6:	f00a fbf9 	bl	1ccbc <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   124ca:	f3bf 8f5b 	dmb	ish
   124ce:	e856 3f00 	ldrex	r3, [r6]
   124d2:	f023 0302 	bic.w	r3, r3, #2
   124d6:	e846 3200 	strex	r2, r3, [r6]
   124da:	2a00      	cmp	r2, #0
   124dc:	d1f7      	bne.n	124ce <ecc_thread+0x162>
   124de:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
   124e2:	4628      	mov	r0, r5
   124e4:	e79e      	b.n	12424 <ecc_thread+0xb8>
		evt->status = 0U;
   124e6:	2200      	movs	r2, #0
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
   124e8:	4907      	ldr	r1, [pc, #28]	; (12508 <ecc_thread+0x19c>)
		evt->status = 0U;
   124ea:	701a      	strb	r2, [r3, #0]
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
   124ec:	f00a fc64 	bl	1cdb8 <sys_memcpy_swap.constprop.0>
   124f0:	e7eb      	b.n	124ca <ecc_thread+0x15e>
   124f2:	bf00      	nop
   124f4:	2000253c 	.word	0x2000253c
   124f8:	200006f4 	.word	0x200006f4
   124fc:	00021080 	.word	0x00021080
   12500:	20002ad4 	.word	0x20002ad4
   12504:	00021ad6 	.word	0x00021ad6
   12508:	20002af4 	.word	0x20002af4

0001250c <bt_hci_ecc_send>:

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
}

int bt_hci_ecc_send(struct net_buf *buf)
{
   1250c:	b570      	push	{r4, r5, r6, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   1250e:	7d06      	ldrb	r6, [r0, #20]
   12510:	4604      	mov	r4, r0
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
   12512:	b976      	cbnz	r6, 12532 <bt_hci_ecc_send+0x26>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
   12514:	6883      	ldr	r3, [r0, #8]

		switch (sys_le16_to_cpu(chdr->opcode)) {
   12516:	881d      	ldrh	r5, [r3, #0]
   12518:	f242 0226 	movw	r2, #8230	; 0x2026
   1251c:	4295      	cmp	r5, r2
   1251e:	d045      	beq.n	125ac <bt_hci_ecc_send+0xa0>
   12520:	d80f      	bhi.n	12542 <bt_hci_ecc_send+0x36>
   12522:	f242 0201 	movw	r2, #8193	; 0x2001
   12526:	4295      	cmp	r5, r2
   12528:	d04f      	beq.n	125ca <bt_hci_ecc_send+0xbe>
   1252a:	f242 0325 	movw	r3, #8229	; 0x2025
   1252e:	429d      	cmp	r5, r3
   12530:	d013      	beq.n	1255a <bt_hci_ecc_send+0x4e>
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
   12532:	4b2a      	ldr	r3, [pc, #168]	; (125dc <bt_hci_ecc_send+0xd0>)
   12534:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
   12538:	4620      	mov	r0, r4
   1253a:	691b      	ldr	r3, [r3, #16]
}
   1253c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_dev.drv->send(buf);
   12540:	4718      	bx	r3
		switch (sys_le16_to_cpu(chdr->opcode)) {
   12542:	f242 035e 	movw	r3, #8286	; 0x205e
   12546:	429d      	cmp	r5, r3
   12548:	d1f3      	bne.n	12532 <bt_hci_ecc_send+0x26>
 *
 * @return New beginning of the buffer data.
 */
static inline void *net_buf_pull(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull(&buf->b, len);
   1254a:	2103      	movs	r1, #3
   1254c:	3008      	adds	r0, #8
   1254e:	f00d fb1b 	bl	1fb88 <net_buf_simple_pull>
	cmd = (void *)buf->data;
   12552:	68a0      	ldr	r0, [r4, #8]
	status = le_gen_dhkey(cmd->key, cmd->key_type);
   12554:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   12558:	e02e      	b.n	125b8 <bt_hci_ecc_send+0xac>
   1255a:	2103      	movs	r1, #3
   1255c:	3008      	adds	r0, #8
   1255e:	f00d fb13 	bl	1fb88 <net_buf_simple_pull>
	net_buf_unref(buf);
   12562:	4620      	mov	r0, r4
   12564:	f004 ffa8 	bl	174b8 <net_buf_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12568:	f3bf 8f5b 	dmb	ish
   1256c:	4b1c      	ldr	r3, [pc, #112]	; (125e0 <bt_hci_ecc_send+0xd4>)
   1256e:	681a      	ldr	r2, [r3, #0]
   12570:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_DHKEY)) {
   12574:	0792      	lsls	r2, r2, #30
   12576:	d507      	bpl.n	12588 <bt_hci_ecc_send+0x7c>
		status = BT_HCI_ERR_CMD_DISALLOWED;
   12578:	260c      	movs	r6, #12
	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
   1257a:	4631      	mov	r1, r6
   1257c:	f242 0025 	movw	r0, #8229	; 0x2025
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
   12580:	f00a fbf6 	bl	1cd70 <send_cmd_status>
}
   12584:	2000      	movs	r0, #0
   12586:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12588:	f3bf 8f5b 	dmb	ish
   1258c:	e853 2f00 	ldrex	r2, [r3]
   12590:	f042 0101 	orr.w	r1, r2, #1
   12594:	e843 1000 	strex	r0, r1, [r3]
   12598:	2800      	cmp	r0, #0
   1259a:	d1f7      	bne.n	1258c <bt_hci_ecc_send+0x80>
   1259c:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
   125a0:	07d3      	lsls	r3, r2, #31
   125a2:	d4e9      	bmi.n	12578 <bt_hci_ecc_send+0x6c>
	z_impl_k_sem_give(sem);
   125a4:	480f      	ldr	r0, [pc, #60]	; (125e4 <bt_hci_ecc_send+0xd8>)
   125a6:	f007 f8c3 	bl	19730 <z_impl_k_sem_give>
}
   125aa:	e7e6      	b.n	1257a <bt_hci_ecc_send+0x6e>
   125ac:	2103      	movs	r1, #3
   125ae:	3008      	adds	r0, #8
   125b0:	f00d faea 	bl	1fb88 <net_buf_simple_pull>
	status = le_gen_dhkey(cmd->key, BT_HCI_LE_KEY_TYPE_GENERATED);
   125b4:	68a0      	ldr	r0, [r4, #8]
   125b6:	4631      	mov	r1, r6
	status = le_gen_dhkey(cmd->key, cmd->key_type);
   125b8:	f7ff fe8c 	bl	122d4 <le_gen_dhkey>
   125bc:	4606      	mov	r6, r0
	net_buf_unref(buf);
   125be:	4620      	mov	r0, r4
   125c0:	f004 ff7a 	bl	174b8 <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
   125c4:	4631      	mov	r1, r6
   125c6:	4628      	mov	r0, r5
   125c8:	e7da      	b.n	12580 <bt_hci_ecc_send+0x74>
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
   125ca:	78da      	ldrb	r2, [r3, #3]
   125cc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   125d0:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
   125d2:	791a      	ldrb	r2, [r3, #4]
   125d4:	f022 0201 	bic.w	r2, r2, #1
   125d8:	711a      	strb	r2, [r3, #4]
}
   125da:	e7aa      	b.n	12532 <bt_hci_ecc_send+0x26>
   125dc:	200002b8 	.word	0x200002b8
   125e0:	2000253c 	.word	0x2000253c
   125e4:	200006f4 	.word	0x200006f4

000125e8 <bt_hci_ecc_init>:
{
	return !bt_rand(dst, len);
}

void bt_hci_ecc_init(void)
{
   125e8:	b510      	push	{r4, lr}
   125ea:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   125ec:	4c0c      	ldr	r4, [pc, #48]	; (12620 <bt_hci_ecc_init+0x38>)
   125ee:	490d      	ldr	r1, [pc, #52]	; (12624 <bt_hci_ecc_init+0x3c>)
   125f0:	2200      	movs	r2, #0
   125f2:	2300      	movs	r3, #0
   125f4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   125f8:	2300      	movs	r3, #0
   125fa:	220a      	movs	r2, #10
   125fc:	e9cd 2303 	strd	r2, r3, [sp, #12]
   12600:	e9cd 3301 	strd	r3, r3, [sp, #4]
   12604:	9300      	str	r3, [sp, #0]
   12606:	f44f 628f 	mov.w	r2, #1144	; 0x478
   1260a:	4b07      	ldr	r3, [pc, #28]	; (12628 <bt_hci_ecc_init+0x40>)
   1260c:	4620      	mov	r0, r4
   1260e:	f006 ff03 	bl	19418 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   12612:	4906      	ldr	r1, [pc, #24]	; (1262c <bt_hci_ecc_init+0x44>)
   12614:	4620      	mov	r0, r4
	k_thread_create(&ecc_thread_data, ecc_thread_stack,
			K_KERNEL_STACK_SIZEOF(ecc_thread_stack), ecc_thread,
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecc_thread_data, "BT ECC");
}
   12616:	b008      	add	sp, #32
   12618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1261c:	f00d bdb8 	b.w	20190 <z_impl_k_thread_name_set>
   12620:	20001398 	.word	0x20001398
   12624:	20003700 	.word	0x20003700
   12628:	0001236d 	.word	0x0001236d
   1262c:	00021acf 	.word	0x00021acf

00012630 <save_id>:
static void save_id(struct k_work *work)
{
	int err;
	BT_INFO("Saving ID");
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
   12630:	4903      	ldr	r1, [pc, #12]	; (12640 <save_id+0x10>)
	err = settings_save_one("bt/id", &bt_dev.id_addr,
   12632:	4804      	ldr	r0, [pc, #16]	; (12644 <save_id+0x14>)
   12634:	79ca      	ldrb	r2, [r1, #7]
   12636:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   1263a:	f7fe bc49 	b.w	10ed0 <settings_save_one>
   1263e:	bf00      	nop
   12640:	200002b8 	.word	0x200002b8
   12644:	00021af6 	.word	0x00021af6

00012648 <set>:
{
   12648:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1264a:	4616      	mov	r6, r2
   1264c:	461f      	mov	r7, r3
	if (!name) {
   1264e:	4604      	mov	r4, r0
   12650:	b920      	cbnz	r0, 1265c <set+0x14>
		return -ENOENT;
   12652:	f06f 0401 	mvn.w	r4, #1
}
   12656:	4620      	mov	r0, r4
   12658:	b003      	add	sp, #12
   1265a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	len = settings_name_next(name, &next);
   1265c:	a901      	add	r1, sp, #4
   1265e:	f008 ffaf 	bl	1b5c0 <settings_name_next>
	if (!strncmp(name, "id", len)) {
   12662:	4911      	ldr	r1, [pc, #68]	; (126a8 <set+0x60>)
	len = settings_name_next(name, &next);
   12664:	4602      	mov	r2, r0
	if (!strncmp(name, "id", len)) {
   12666:	4620      	mov	r0, r4
   12668:	f00a fafb 	bl	1cc62 <strncmp>
   1266c:	4604      	mov	r4, r0
   1266e:	2800      	cmp	r0, #0
   12670:	d1ef      	bne.n	12652 <set+0xa>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12672:	f3bf 8f5b 	dmb	ish
   12676:	4d0d      	ldr	r5, [pc, #52]	; (126ac <set+0x64>)
   12678:	682b      	ldr	r3, [r5, #0]
   1267a:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
   1267e:	075b      	lsls	r3, r3, #29
   12680:	d4e9      	bmi.n	12656 <set+0xe>
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
   12682:	3dcc      	subs	r5, #204	; 0xcc
   12684:	2207      	movs	r2, #7
   12686:	4629      	mov	r1, r5
   12688:	4638      	mov	r0, r7
   1268a:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
   1268c:	2806      	cmp	r0, #6
   1268e:	d806      	bhi.n	1269e <set+0x56>
			(void)memset(bt_dev.id_addr, 0,
   12690:	2207      	movs	r2, #7
   12692:	4621      	mov	r1, r4
   12694:	4628      	mov	r0, r5
   12696:	f00a fb11 	bl	1ccbc <memset>
			bt_dev.id_count = 0U;
   1269a:	71ec      	strb	r4, [r5, #7]
   1269c:	e7db      	b.n	12656 <set+0xe>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
   1269e:	2307      	movs	r3, #7
   126a0:	fbb0 f0f3 	udiv	r0, r0, r3
   126a4:	71e8      	strb	r0, [r5, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
   126a6:	e7d6      	b.n	12656 <set+0xe>
   126a8:	00021577 	.word	0x00021577
   126ac:	20000384 	.word	0x20000384

000126b0 <bt_settings_encode_key>:
{
   126b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   126b4:	b088      	sub	sp, #32
		snprintk(path, path_size,
   126b6:	799c      	ldrb	r4, [r3, #6]
{
   126b8:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		snprintk(path, path_size,
   126bc:	795d      	ldrb	r5, [r3, #5]
   126be:	791e      	ldrb	r6, [r3, #4]
   126c0:	78df      	ldrb	r7, [r3, #3]
   126c2:	f893 c002 	ldrb.w	ip, [r3, #2]
   126c6:	f893 e001 	ldrb.w	lr, [r3, #1]
   126ca:	781b      	ldrb	r3, [r3, #0]
	if (key) {
   126cc:	f1b8 0f00 	cmp.w	r8, #0
   126d0:	d00e      	beq.n	126f0 <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
   126d2:	e9cd 3806 	strd	r3, r8, [sp, #24]
   126d6:	e9cd ce04 	strd	ip, lr, [sp, #16]
   126da:	4613      	mov	r3, r2
   126dc:	e9cd 6702 	strd	r6, r7, [sp, #8]
   126e0:	e9cd 4500 	strd	r4, r5, [sp]
   126e4:	4a08      	ldr	r2, [pc, #32]	; (12708 <bt_settings_encode_key+0x58>)
   126e6:	f008 f87f 	bl	1a7e8 <snprintk>
}
   126ea:	b008      	add	sp, #32
   126ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
   126f0:	e9cd e305 	strd	lr, r3, [sp, #20]
   126f4:	e9cd 7c03 	strd	r7, ip, [sp, #12]
   126f8:	4613      	mov	r3, r2
   126fa:	e9cd 5601 	strd	r5, r6, [sp, #4]
   126fe:	4a03      	ldr	r2, [pc, #12]	; (1270c <bt_settings_encode_key+0x5c>)
   12700:	9400      	str	r4, [sp, #0]
   12702:	f008 f871 	bl	1a7e8 <snprintk>
}
   12706:	e7f0      	b.n	126ea <bt_settings_encode_key+0x3a>
   12708:	00021afc 	.word	0x00021afc
   1270c:	00021b20 	.word	0x00021b20

00012710 <bt_settings_save_id>:

K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
   12710:	4801      	ldr	r0, [pc, #4]	; (12718 <bt_settings_save_id+0x8>)
   12712:	f007 b99b 	b.w	19a4c <k_work_submit>
   12716:	bf00      	nop
   12718:	200004ac 	.word	0x200004ac

0001271c <commit>:
}

static int commit(void)
{
   1271c:	b510      	push	{r4, lr}
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
		bt_set_name(CONFIG_BT_DEVICE_NAME);
	}
#endif
	if (!bt_dev.id_count) {
   1271e:	4c15      	ldr	r4, [pc, #84]	; (12774 <commit+0x58>)
   12720:	79e3      	ldrb	r3, [r4, #7]
   12722:	b1e3      	cbz	r3, 1275e <commit+0x42>
   12724:	f3bf 8f5b 	dmb	ish
   12728:	4c13      	ldr	r4, [pc, #76]	; (12778 <commit+0x5c>)
   1272a:	6823      	ldr	r3, [r4, #0]
   1272c:	f3bf 8f5b 	dmb	ish
			BT_ERR("Unable to setup an identity address");
			return err;
		}
	}

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   12730:	079b      	lsls	r3, r3, #30
   12732:	d401      	bmi.n	12738 <commit+0x1c>
		bt_finalize_init();
   12734:	f000 fd96 	bl	13264 <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12738:	f3bf 8f5b 	dmb	ish
   1273c:	e854 0f00 	ldrex	r0, [r4]
   12740:	f420 4380 	bic.w	r3, r0, #16384	; 0x4000
   12744:	e844 3200 	strex	r2, r3, [r4]
   12748:	2a00      	cmp	r2, #0
   1274a:	d1f7      	bne.n	1273c <commit+0x20>
   1274c:	f3bf 8f5b 	dmb	ish
	}

	/* If any part of the Identity Information of the device has been
	 * generated this Identity needs to be saved persistently.
	 */
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
   12750:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
   12754:	d00c      	beq.n	12770 <commit+0x54>
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
   12756:	f7ff ffdb 	bl	12710 <bt_settings_save_id>
	}

	return 0;
   1275a:	2000      	movs	r0, #0
   1275c:	e008      	b.n	12770 <commit+0x54>
		bt_setup_public_id_addr();
   1275e:	f001 f83d 	bl	137dc <bt_setup_public_id_addr>
	if (!bt_dev.id_count) {
   12762:	79e3      	ldrb	r3, [r4, #7]
   12764:	2b00      	cmp	r3, #0
   12766:	d1dd      	bne.n	12724 <commit+0x8>
		err = bt_setup_random_id_addr();
   12768:	f001 f878 	bl	1385c <bt_setup_random_id_addr>
		if (err) {
   1276c:	2800      	cmp	r0, #0
   1276e:	d0d9      	beq.n	12724 <commit+0x8>
}
   12770:	bd10      	pop	{r4, pc}
   12772:	bf00      	nop
   12774:	200002b8 	.word	0x200002b8
   12778:	20000384 	.word	0x20000384

0001277c <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   1277c:	b430      	push	{r4, r5}
   1277e:	4603      	mov	r3, r0
   12780:	4608      	mov	r0, r1
	switch (src->type) {
   12782:	781a      	ldrb	r2, [r3, #0]
   12784:	2a01      	cmp	r2, #1
   12786:	d013      	beq.n	127b0 <uuid_to_uuid128+0x34>
   12788:	2a02      	cmp	r2, #2
   1278a:	d026      	beq.n	127da <uuid_to_uuid128+0x5e>
   1278c:	b972      	cbnz	r2, 127ac <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   1278e:	4a15      	ldr	r2, [pc, #84]	; (127e4 <uuid_to_uuid128+0x68>)
   12790:	f102 0410 	add.w	r4, r2, #16
   12794:	f852 5b04 	ldr.w	r5, [r2], #4
   12798:	f841 5b04 	str.w	r5, [r1], #4
   1279c:	42a2      	cmp	r2, r4
   1279e:	d1f9      	bne.n	12794 <uuid_to_uuid128+0x18>
		sys_put_le16(BT_UUID_16(src)->val,
   127a0:	885b      	ldrh	r3, [r3, #2]
		*dst = uuid128_base;
   127a2:	7812      	ldrb	r2, [r2, #0]
   127a4:	700a      	strb	r2, [r1, #0]
	dst[0] = val;
   127a6:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
   127a8:	0a1b      	lsrs	r3, r3, #8
   127aa:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   127ac:	bc30      	pop	{r4, r5}
   127ae:	4770      	bx	lr
		*dst = uuid128_base;
   127b0:	4a0c      	ldr	r2, [pc, #48]	; (127e4 <uuid_to_uuid128+0x68>)
   127b2:	f102 0410 	add.w	r4, r2, #16
   127b6:	f852 5b04 	ldr.w	r5, [r2], #4
   127ba:	f841 5b04 	str.w	r5, [r1], #4
   127be:	42a2      	cmp	r2, r4
   127c0:	d1f9      	bne.n	127b6 <uuid_to_uuid128+0x3a>
		sys_put_le32(BT_UUID_32(src)->val,
   127c2:	685b      	ldr	r3, [r3, #4]
		*dst = uuid128_base;
   127c4:	7812      	ldrb	r2, [r2, #0]
   127c6:	700a      	strb	r2, [r1, #0]
   127c8:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
   127cc:	7343      	strb	r3, [r0, #13]
	sys_put_le16(val >> 16, &dst[2]);
   127ce:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   127d0:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
   127d2:	0a1b      	lsrs	r3, r3, #8
   127d4:	7382      	strb	r2, [r0, #14]
   127d6:	7403      	strb	r3, [r0, #16]
}
   127d8:	e7e8      	b.n	127ac <uuid_to_uuid128+0x30>
}
   127da:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
   127dc:	2211      	movs	r2, #17
   127de:	4619      	mov	r1, r3
   127e0:	f00a ba61 	b.w	1cca6 <memcpy>
   127e4:	00021b44 	.word	0x00021b44

000127e8 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   127e8:	b538      	push	{r3, r4, r5, lr}
   127ea:	4605      	mov	r5, r0
	return net_buf_alloc_fixed(pool, timeout);
   127ec:	4805      	ldr	r0, [pc, #20]	; (12804 <bt_buf_get_rx+0x1c>)
   127ee:	f00d f956 	bl	1fa9e <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   127f2:	4604      	mov	r4, r0
   127f4:	b120      	cbz	r0, 12800 <bt_buf_get_rx+0x18>
	net_buf_simple_reserve(&buf->b, reserve);
   127f6:	2100      	movs	r1, #0
   127f8:	3008      	adds	r0, #8
   127fa:	f00d f96f 	bl	1fadc <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   127fe:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   12800:	4620      	mov	r0, r4
   12802:	bd38      	pop	{r3, r4, r5, pc}
   12804:	2000080c 	.word	0x2000080c

00012808 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   12808:	b570      	push	{r4, r5, r6, lr}
   1280a:	4602      	mov	r2, r0
   1280c:	460b      	mov	r3, r1
	__asm__ volatile(
   1280e:	f04f 0140 	mov.w	r1, #64	; 0x40
   12812:	f3ef 8511 	mrs	r5, BASEPRI
   12816:	f381 8811 	msr	BASEPRI, r1
   1281a:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
   1281e:	480c      	ldr	r0, [pc, #48]	; (12850 <bt_buf_get_cmd_complete+0x48>)
	bt_dev.sent_cmd = NULL;
   12820:	2100      	movs	r1, #0
	buf = bt_dev.sent_cmd;
   12822:	f8d0 4138 	ldr.w	r4, [r0, #312]	; 0x138
	bt_dev.sent_cmd = NULL;
   12826:	f8c0 1138 	str.w	r1, [r0, #312]	; 0x138
	__asm__ volatile(
   1282a:	f385 8811 	msr	BASEPRI, r5
   1282e:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
   12832:	b924      	cbnz	r4, 1283e <bt_buf_get_cmd_complete+0x36>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   12834:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   12838:	2001      	movs	r0, #1
   1283a:	f7ff bfd5 	b.w	127e8 <bt_buf_get_rx>
   1283e:	2301      	movs	r3, #1
   12840:	f104 0008 	add.w	r0, r4, #8
   12844:	7523      	strb	r3, [r4, #20]
		buf->len = 0U;
   12846:	81a1      	strh	r1, [r4, #12]
   12848:	f00d f948 	bl	1fadc <net_buf_simple_reserve>
}
   1284c:	4620      	mov	r0, r4
   1284e:	bd70      	pop	{r4, r5, r6, pc}
   12850:	200002b8 	.word	0x200002b8

00012854 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   12854:	b570      	push	{r4, r5, r6, lr}
   12856:	4604      	mov	r4, r0
	switch (evt) {
   12858:	2c0f      	cmp	r4, #15
{
   1285a:	460d      	mov	r5, r1
   1285c:	4610      	mov	r0, r2
   1285e:	4619      	mov	r1, r3
	switch (evt) {
   12860:	d805      	bhi.n	1286e <bt_buf_get_evt+0x1a>
   12862:	2c0d      	cmp	r4, #13
   12864:	d912      	bls.n	1288c <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   12866:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   1286a:	f7ff bfcd 	b.w	12808 <bt_buf_get_cmd_complete>
	switch (evt) {
   1286e:	2c13      	cmp	r4, #19
   12870:	d10c      	bne.n	1288c <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
   12872:	480b      	ldr	r0, [pc, #44]	; (128a0 <bt_buf_get_evt+0x4c>)
   12874:	f00d f913 	bl	1fa9e <net_buf_alloc_fixed>
			if (buf) {
   12878:	4604      	mov	r4, r0
   1287a:	b128      	cbz	r0, 12888 <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
   1287c:	2100      	movs	r1, #0
   1287e:	3008      	adds	r0, #8
   12880:	f00d f92c 	bl	1fadc <net_buf_simple_reserve>
   12884:	2301      	movs	r3, #1
   12886:	7523      	strb	r3, [r4, #20]
}
   12888:	4620      	mov	r0, r4
   1288a:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
   1288c:	4602      	mov	r2, r0
   1288e:	460b      	mov	r3, r1
		if (discardable) {
   12890:	b10d      	cbz	r5, 12896 <bt_buf_get_evt+0x42>
   12892:	4804      	ldr	r0, [pc, #16]	; (128a4 <bt_buf_get_evt+0x50>)
   12894:	e7ee      	b.n	12874 <bt_buf_get_evt+0x20>
}
   12896:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   1289a:	2001      	movs	r0, #1
   1289c:	f7ff bfa4 	b.w	127e8 <bt_buf_get_rx>
   128a0:	20000834 	.word	0x20000834
   128a4:	20000794 	.word	0x20000794

000128a8 <unpair>:
{
   128a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   128ac:	4606      	mov	r6, r0
   128ae:	460f      	mov	r7, r1
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, addr);
   128b0:	f001 fe98 	bl	145e4 <bt_conn_lookup_addr_le>
	if (conn) {
   128b4:	4604      	mov	r4, r0
   128b6:	b9b0      	cbnz	r0, 128e6 <unpair+0x3e>
			keys = bt_keys_find_addr(id, addr);
   128b8:	4639      	mov	r1, r7
   128ba:	4630      	mov	r0, r6
   128bc:	f004 fcd8 	bl	17270 <bt_keys_find_addr>
		if (keys) {
   128c0:	4605      	mov	r5, r0
   128c2:	b110      	cbz	r0, 128ca <unpair+0x22>
			bt_keys_clear(keys);
   128c4:	4628      	mov	r0, r5
   128c6:	f004 fcf1 	bl	172ac <bt_keys_clear>
	bt_gatt_clear(id, addr);
   128ca:	4639      	mov	r1, r7
   128cc:	4630      	mov	r0, r6
   128ce:	f003 fc75 	bl	161bc <bt_gatt_clear>
	if (bt_auth && bt_auth->bond_deleted) {
   128d2:	4b10      	ldr	r3, [pc, #64]	; (12914 <unpair+0x6c>)
   128d4:	681b      	ldr	r3, [r3, #0]
   128d6:	b1db      	cbz	r3, 12910 <unpair+0x68>
   128d8:	6a1b      	ldr	r3, [r3, #32]
   128da:	b1cb      	cbz	r3, 12910 <unpair+0x68>
		bt_auth->bond_deleted(id, addr);
   128dc:	4639      	mov	r1, r7
   128de:	4630      	mov	r0, r6
}
   128e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_auth->bond_deleted(id, addr);
   128e4:	4718      	bx	r3
		if (conn->type == BT_CONN_TYPE_LE) {
   128e6:	7883      	ldrb	r3, [r0, #2]
   128e8:	2b01      	cmp	r3, #1
   128ea:	f04f 0300 	mov.w	r3, #0
			keys = conn->le.keys;
   128ee:	bf04      	itt	eq
   128f0:	f8d0 50b4 	ldreq.w	r5, [r0, #180]	; 0xb4
			conn->le.keys = NULL;
   128f4:	f8c0 30b4 	streq.w	r3, [r0, #180]	; 0xb4
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
   128f8:	f04f 0113 	mov.w	r1, #19
	struct bt_keys *keys = NULL;
   128fc:	bf18      	it	ne
   128fe:	461d      	movne	r5, r3
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
   12900:	f00b f957 	bl	1dbb2 <bt_conn_disconnect>
		bt_conn_unref(conn);
   12904:	4620      	mov	r0, r4
   12906:	f00b f90f 	bl	1db28 <bt_conn_unref>
		if (!keys) {
   1290a:	2d00      	cmp	r5, #0
   1290c:	d1da      	bne.n	128c4 <unpair+0x1c>
   1290e:	e7d3      	b.n	128b8 <unpair+0x10>
}
   12910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12914:	20002568 	.word	0x20002568

00012918 <hci_disconn_complete_prio>:
{
   12918:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   1291a:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
   1291c:	781a      	ldrb	r2, [r3, #0]
   1291e:	b972      	cbnz	r2, 1293e <hci_disconn_complete_prio+0x26>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   12920:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   12924:	4620      	mov	r0, r4
   12926:	f001 fcfb 	bl	14320 <bt_conn_lookup_handle>
	if (!conn) {
   1292a:	4605      	mov	r5, r0
   1292c:	b940      	cbnz	r0, 12940 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   1292e:	4b08      	ldr	r3, [pc, #32]	; (12950 <hci_disconn_complete_prio+0x38>)
   12930:	881a      	ldrh	r2, [r3, #0]
   12932:	b922      	cbnz	r2, 1293e <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   12934:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   12938:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   1293c:	8018      	strh	r0, [r3, #0]
}
   1293e:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   12940:	2101      	movs	r1, #1
   12942:	f001 fcf5 	bl	14330 <bt_conn_set_state>
	bt_conn_unref(conn);
   12946:	4628      	mov	r0, r5
}
   12948:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   1294c:	f00b b8ec 	b.w	1db28 <bt_conn_unref>
   12950:	20002960 	.word	0x20002960

00012954 <hci_le_meta_event>:
{
   12954:	b510      	push	{r4, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   12956:	2101      	movs	r1, #1
   12958:	4604      	mov	r4, r0
   1295a:	3008      	adds	r0, #8
   1295c:	f00d f91c 	bl	1fb98 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   12960:	4621      	mov	r1, r4
   12962:	4a03      	ldr	r2, [pc, #12]	; (12970 <hci_le_meta_event+0x1c>)
   12964:	7800      	ldrb	r0, [r0, #0]
}
   12966:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   1296a:	230a      	movs	r3, #10
   1296c:	f00a bad1 	b.w	1cf12 <handle_event>
   12970:	00021160 	.word	0x00021160

00012974 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   12974:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   12976:	4c0c      	ldr	r4, [pc, #48]	; (129a8 <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   12978:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   1297a:	2205      	movs	r2, #5
   1297c:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   12980:	f001 fe4e 	bl	14620 <bt_conn_lookup_state_le>
		if (!conn) {
   12984:	b970      	cbnz	r0, 129a4 <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
   12986:	4b09      	ldr	r3, [pc, #36]	; (129ac <find_pending_connect.part.0+0x38>)
   12988:	6818      	ldr	r0, [r3, #0]
   1298a:	889a      	ldrh	r2, [r3, #4]
   1298c:	9000      	str	r0, [sp, #0]
   1298e:	799b      	ldrb	r3, [r3, #6]
   12990:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   12994:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
						       BT_ADDR_LE_NONE,
   12998:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   1299c:	2204      	movs	r2, #4
   1299e:	4669      	mov	r1, sp
   129a0:	f001 fe3e 	bl	14620 <bt_conn_lookup_state_le>
}
   129a4:	b002      	add	sp, #8
   129a6:	bd10      	pop	{r4, pc}
   129a8:	200002b8 	.word	0x200002b8
   129ac:	00020e64 	.word	0x00020e64

000129b0 <hci_rx_thread>:
	}
}

#if !defined(CONFIG_BT_RECV_IS_RX_THREAD)
static void hci_rx_thread(void)
{
   129b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	BT_DBG("started");

	while (1) {
		BT_DBG("calling fifo_get_wait");
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   129b4:	4f3b      	ldr	r7, [pc, #236]	; (12aa4 <hci_rx_thread+0xf4>)
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   129b6:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 12aa8 <hci_rx_thread+0xf8>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   129ba:	4e3c      	ldr	r6, [pc, #240]	; (12aac <hci_rx_thread+0xfc>)
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   129bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   129c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   129c4:	4638      	mov	r0, r7
   129c6:	f00d f86f 	bl	1faa8 <net_buf_get>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   129ca:	7d03      	ldrb	r3, [r0, #20]

		BT_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf),
		       buf->len);

		switch (bt_buf_get_type(buf)) {
   129cc:	2b01      	cmp	r3, #1
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   129ce:	4604      	mov	r4, r0
		switch (bt_buf_get_type(buf)) {
   129d0:	d039      	beq.n	12a46 <hci_rx_thread+0x96>
   129d2:	2b03      	cmp	r3, #3
   129d4:	d120      	bne.n	12a18 <hci_rx_thread+0x68>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   129d6:	8983      	ldrh	r3, [r0, #12]
   129d8:	2b03      	cmp	r3, #3
   129da:	d80c      	bhi.n	129f6 <hci_rx_thread+0x46>
   129dc:	4934      	ldr	r1, [pc, #208]	; (12ab0 <hci_rx_thread+0x100>)
   129de:	4835      	ldr	r0, [pc, #212]	; (12ab4 <hci_rx_thread+0x104>)
   129e0:	f240 1377 	movw	r3, #375	; 0x177
   129e4:	4632      	mov	r2, r6
   129e6:	f007 fef2 	bl	1a7ce <printk>
   129ea:	4040      	eors	r0, r0
   129ec:	f380 8811 	msr	BASEPRI, r0
   129f0:	f04f 0003 	mov.w	r0, #3
   129f4:	df02      	svc	2
   129f6:	2104      	movs	r1, #4
   129f8:	f104 0008 	add.w	r0, r4, #8
   129fc:	f00d f8cc 	bl	1fb98 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   12a00:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
   12a02:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   12a04:	f8b0 9000 	ldrh.w	r9, [r0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   12a08:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
   12a0a:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
   12a0c:	f3c9 000b 	ubfx	r0, r9, #0, #12
	if (buf->len != len) {
   12a10:	429a      	cmp	r2, r3
	acl(buf)->handle = bt_acl_handle(handle);
   12a12:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
   12a14:	d003      	beq.n	12a1e <hci_rx_thread+0x6e>
	net_buf_unref(buf);
   12a16:	4620      	mov	r0, r4
		case BT_BUF_EVT:
			hci_event(buf);
			break;
		default:
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
			net_buf_unref(buf);
   12a18:	f004 fd4e 	bl	174b8 <net_buf_unref>
			break;
   12a1c:	e010      	b.n	12a40 <hci_rx_thread+0x90>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   12a1e:	f001 fc7f 	bl	14320 <bt_conn_lookup_handle>
	if (!conn) {
   12a22:	4605      	mov	r5, r0
   12a24:	2800      	cmp	r0, #0
   12a26:	d0f6      	beq.n	12a16 <hci_rx_thread+0x66>
	acl(buf)->index = bt_conn_index(conn);
   12a28:	f001 fd2c 	bl	14484 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   12a2c:	ea4f 3219 	mov.w	r2, r9, lsr #12
	acl(buf)->index = bt_conn_index(conn);
   12a30:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   12a32:	4621      	mov	r1, r4
   12a34:	4628      	mov	r0, r5
   12a36:	f00b f818 	bl	1da6a <bt_conn_recv>
	bt_conn_unref(conn);
   12a3a:	4628      	mov	r0, r5
   12a3c:	f00b f874 	bl	1db28 <bt_conn_unref>
	z_impl_k_yield();
   12a40:	f007 faf4 	bl	1a02c <z_impl_k_yield>
	while (1) {
   12a44:	e7ba      	b.n	129bc <hci_rx_thread+0xc>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   12a46:	8983      	ldrh	r3, [r0, #12]
   12a48:	2b01      	cmp	r3, #1
   12a4a:	d80c      	bhi.n	12a66 <hci_rx_thread+0xb6>
   12a4c:	4918      	ldr	r1, [pc, #96]	; (12ab0 <hci_rx_thread+0x100>)
   12a4e:	4819      	ldr	r0, [pc, #100]	; (12ab4 <hci_rx_thread+0x104>)
   12a50:	f640 1309 	movw	r3, #2313	; 0x909
   12a54:	4632      	mov	r2, r6
   12a56:	f007 feba 	bl	1a7ce <printk>
   12a5a:	4040      	eors	r0, r0
   12a5c:	f380 8811 	msr	BASEPRI, r0
   12a60:	f04f 0003 	mov.w	r0, #3
   12a64:	df02      	svc	2
   12a66:	2102      	movs	r1, #2
   12a68:	f104 0008 	add.w	r0, r4, #8
   12a6c:	f00d f894 	bl	1fb98 <net_buf_simple_pull_mem>
   12a70:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   12a72:	7800      	ldrb	r0, [r0, #0]
   12a74:	f00a fa3b 	bl	1ceee <bt_hci_evt_get_flags>
   12a78:	0783      	lsls	r3, r0, #30
   12a7a:	d40c      	bmi.n	12a96 <hci_rx_thread+0xe6>
   12a7c:	490e      	ldr	r1, [pc, #56]	; (12ab8 <hci_rx_thread+0x108>)
   12a7e:	480d      	ldr	r0, [pc, #52]	; (12ab4 <hci_rx_thread+0x104>)
   12a80:	f640 130d 	movw	r3, #2317	; 0x90d
   12a84:	4632      	mov	r2, r6
   12a86:	f007 fea2 	bl	1a7ce <printk>
   12a8a:	4040      	eors	r0, r0
   12a8c:	f380 8811 	msr	BASEPRI, r0
   12a90:	f04f 0003 	mov.w	r0, #3
   12a94:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   12a96:	7828      	ldrb	r0, [r5, #0]
   12a98:	2306      	movs	r3, #6
   12a9a:	4642      	mov	r2, r8
   12a9c:	4621      	mov	r1, r4
   12a9e:	f00a fa38 	bl	1cf12 <handle_event>
   12aa2:	e7b8      	b.n	12a16 <hci_rx_thread+0x66>
   12aa4:	200003f4 	.word	0x200003f4
   12aa8:	000211c0 	.word	0x000211c0
   12aac:	00021b55 	.word	0x00021b55
   12ab0:	00021b89 	.word	0x00021b89
   12ab4:	00021ba2 	.word	0x00021ba2
   12ab8:	00021bbf 	.word	0x00021bbf

00012abc <hci_cmd_done.constprop.0>:
static void hci_cmd_done(uint16_t opcode, uint8_t status, struct net_buf *buf)
   12abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12abe:	4606      	mov	r6, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   12ac0:	7988      	ldrb	r0, [r1, #6]
static void hci_cmd_done(uint16_t opcode, uint8_t status, struct net_buf *buf)
   12ac2:	460c      	mov	r4, r1
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   12ac4:	f004 fc3a 	bl	1733c <net_buf_pool_get>
   12ac8:	4b24      	ldr	r3, [pc, #144]	; (12b5c <hci_cmd_done.constprop.0+0xa0>)
   12aca:	4283      	cmp	r3, r0
   12acc:	d145      	bne.n	12b5a <hci_cmd_done.constprop.0+0x9e>
	if (cmd(buf)->opcode != opcode) {
   12ace:	4620      	mov	r0, r4
   12ad0:	f004 fc3c 	bl	1734c <net_buf_id>
	if (cmd(buf)->state && !status) {
   12ad4:	4620      	mov	r0, r4
   12ad6:	f004 fc39 	bl	1734c <net_buf_id>
   12ada:	4d21      	ldr	r5, [pc, #132]	; (12b60 <hci_cmd_done.constprop.0+0xa4>)
   12adc:	270c      	movs	r7, #12
   12ade:	fb07 5000 	mla	r0, r7, r0, r5
   12ae2:	6843      	ldr	r3, [r0, #4]
   12ae4:	b19b      	cbz	r3, 12b0e <hci_cmd_done.constprop.0+0x52>
   12ae6:	b996      	cbnz	r6, 12b0e <hci_cmd_done.constprop.0+0x52>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   12ae8:	4620      	mov	r0, r4
   12aea:	f004 fc2f 	bl	1734c <net_buf_id>
   12aee:	fb07 5000 	mla	r0, r7, r0, r5
	atomic_val_t mask = ATOMIC_MASK(bit);
   12af2:	2101      	movs	r1, #1
   12af4:	6842      	ldr	r2, [r0, #4]
   12af6:	e9d2 3000 	ldrd	r3, r0, [r2]
	if (val) {
   12afa:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   12afc:	f000 071f 	and.w	r7, r0, #31
   12b00:	40b9      	lsls	r1, r7
	if (val) {
   12b02:	0940      	lsrs	r0, r0, #5
   12b04:	b1d2      	cbz	r2, 12b3c <hci_cmd_done.constprop.0+0x80>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   12b06:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   12b0a:	f00a fa2f 	bl	1cf6c <atomic_or>
	if (cmd(buf)->sync) {
   12b0e:	4620      	mov	r0, r4
   12b10:	f004 fc1c 	bl	1734c <net_buf_id>
   12b14:	270c      	movs	r7, #12
   12b16:	fb07 5000 	mla	r0, r7, r0, r5
   12b1a:	6883      	ldr	r3, [r0, #8]
   12b1c:	b1eb      	cbz	r3, 12b5a <hci_cmd_done.constprop.0+0x9e>
		cmd(buf)->status = status;
   12b1e:	4620      	mov	r0, r4
   12b20:	f004 fc14 	bl	1734c <net_buf_id>
   12b24:	4378      	muls	r0, r7
   12b26:	542e      	strb	r6, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   12b28:	4620      	mov	r0, r4
   12b2a:	f004 fc0f 	bl	1734c <net_buf_id>
   12b2e:	fb07 5500 	mla	r5, r7, r0, r5
   12b32:	68a8      	ldr	r0, [r5, #8]
}
   12b34:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_impl_k_sem_give(sem);
   12b38:	f006 bdfa 	b.w	19730 <z_impl_k_sem_give>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   12b3c:	43c9      	mvns	r1, r1
   12b3e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   12b42:	f3bf 8f5b 	dmb	ish
   12b46:	e853 2f00 	ldrex	r2, [r3]
   12b4a:	400a      	ands	r2, r1
   12b4c:	e843 2000 	strex	r0, r2, [r3]
   12b50:	2800      	cmp	r0, #0
   12b52:	d1f8      	bne.n	12b46 <hci_cmd_done.constprop.0+0x8a>
   12b54:	f3bf 8f5b 	dmb	ish
   12b58:	e7d9      	b.n	12b0e <hci_cmd_done.constprop.0+0x52>
   12b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12b5c:	200007e4 	.word	0x200007e4
   12b60:	20002540 	.word	0x20002540

00012b64 <hci_tx_thread>:
{
   12b64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   12b68:	f8df 8100 	ldr.w	r8, [pc, #256]	; 12c6c <hci_tx_thread+0x108>
		BT_ASSERT(err == 0);
   12b6c:	f8df a100 	ldr.w	sl, [pc, #256]	; 12c70 <hci_tx_thread+0x10c>
		events[0].state = K_POLL_STATE_NOT_READY;
   12b70:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   12b74:	483f      	ldr	r0, [pc, #252]	; (12c74 <hci_tx_thread+0x110>)
		events[0].state = K_POLL_STATE_NOT_READY;
   12b76:	f36f 3352 	bfc	r3, #13, #6
   12b7a:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   12b7e:	f001 fb99 	bl	142b4 <bt_conn_prepare_events>
   12b82:	1c45      	adds	r5, r0, #1
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   12b84:	4839      	ldr	r0, [pc, #228]	; (12c6c <hci_tx_thread+0x108>)
   12b86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12b8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12b8e:	4629      	mov	r1, r5
   12b90:	f007 fcbc 	bl	1a50c <z_impl_k_poll>
		BT_ASSERT(err == 0);
   12b94:	b160      	cbz	r0, 12bb0 <hci_tx_thread+0x4c>
   12b96:	4938      	ldr	r1, [pc, #224]	; (12c78 <hci_tx_thread+0x114>)
   12b98:	4838      	ldr	r0, [pc, #224]	; (12c7c <hci_tx_thread+0x118>)
   12b9a:	f640 137f 	movw	r3, #2431	; 0x97f
   12b9e:	4652      	mov	r2, sl
   12ba0:	f007 fe15 	bl	1a7ce <printk>
   12ba4:	4040      	eors	r0, r0
   12ba6:	f380 8811 	msr	BASEPRI, r0
   12baa:	f04f 0003 	mov.w	r0, #3
   12bae:	df02      	svc	2
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   12bb0:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 12c80 <hci_tx_thread+0x11c>
{
   12bb4:	4e2d      	ldr	r6, [pc, #180]	; (12c6c <hci_tx_thread+0x108>)
	return z_impl_k_sem_take(sem, timeout);
   12bb6:	f5a9 77aa 	sub.w	r7, r9, #340	; 0x154
   12bba:	f1a9 0b34 	sub.w	fp, r9, #52	; 0x34
	for (; count; ev++, count--) {
   12bbe:	b915      	cbnz	r5, 12bc6 <hci_tx_thread+0x62>
	z_impl_k_yield();
   12bc0:	f007 fa34 	bl	1a02c <z_impl_k_yield>
	while (1) {
   12bc4:	e7d4      	b.n	12b70 <hci_tx_thread+0xc>
		switch (ev->state) {
   12bc6:	68f3      	ldr	r3, [r6, #12]
   12bc8:	f3c3 3345 	ubfx	r3, r3, #13, #6
   12bcc:	2b04      	cmp	r3, #4
   12bce:	d142      	bne.n	12c56 <hci_tx_thread+0xf2>
			if (ev->tag == BT_EVENT_CMD_TX) {
   12bd0:	7b33      	ldrb	r3, [r6, #12]
   12bd2:	2b00      	cmp	r3, #0
   12bd4:	d142      	bne.n	12c5c <hci_tx_thread+0xf8>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   12bd6:	2200      	movs	r2, #0
   12bd8:	2300      	movs	r3, #0
   12bda:	4648      	mov	r0, r9
   12bdc:	f00c ff64 	bl	1faa8 <net_buf_get>
	BT_ASSERT(buf);
   12be0:	4604      	mov	r4, r0
   12be2:	b960      	cbnz	r0, 12bfe <hci_tx_thread+0x9a>
   12be4:	4927      	ldr	r1, [pc, #156]	; (12c84 <hci_tx_thread+0x120>)
   12be6:	4825      	ldr	r0, [pc, #148]	; (12c7c <hci_tx_thread+0x118>)
   12be8:	f640 131c 	movw	r3, #2332	; 0x91c
   12bec:	4652      	mov	r2, sl
   12bee:	f007 fdee 	bl	1a7ce <printk>
   12bf2:	4040      	eors	r0, r0
   12bf4:	f380 8811 	msr	BASEPRI, r0
   12bf8:	f04f 0003 	mov.w	r0, #3
   12bfc:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   12bfe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12c02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12c06:	4658      	mov	r0, fp
   12c08:	f006 fdb8 	bl	1977c <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   12c0c:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
   12c10:	b120      	cbz	r0, 12c1c <hci_tx_thread+0xb8>
		net_buf_unref(bt_dev.sent_cmd);
   12c12:	f004 fc51 	bl	174b8 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   12c16:	2300      	movs	r3, #0
   12c18:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	bt_dev.sent_cmd = net_buf_ref(buf);
   12c1c:	4620      	mov	r0, r4
   12c1e:	f00c ff6e 	bl	1fafe <net_buf_ref>
   12c22:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
		return bt_hci_ecc_send(buf);
   12c26:	4620      	mov	r0, r4
   12c28:	f7ff fc70 	bl	1250c <bt_hci_ecc_send>
	if (err) {
   12c2c:	b198      	cbz	r0, 12c56 <hci_tx_thread+0xf2>
	z_impl_k_sem_give(sem);
   12c2e:	4816      	ldr	r0, [pc, #88]	; (12c88 <hci_tx_thread+0x124>)
   12c30:	f006 fd7e 	bl	19730 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   12c34:	4620      	mov	r0, r4
   12c36:	f004 fb89 	bl	1734c <net_buf_id>
   12c3a:	4621      	mov	r1, r4
   12c3c:	201f      	movs	r0, #31
   12c3e:	f7ff ff3d 	bl	12abc <hci_cmd_done.constprop.0>
		net_buf_unref(bt_dev.sent_cmd);
   12c42:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
   12c46:	f004 fc37 	bl	174b8 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   12c4a:	2300      	movs	r3, #0
		net_buf_unref(buf);
   12c4c:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
   12c4e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
		net_buf_unref(buf);
   12c52:	f004 fc31 	bl	174b8 <net_buf_unref>
	for (; count; ev++, count--) {
   12c56:	3614      	adds	r6, #20
   12c58:	3d01      	subs	r5, #1
   12c5a:	e7b0      	b.n	12bbe <hci_tx_thread+0x5a>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   12c5c:	2b01      	cmp	r3, #1
   12c5e:	d1fa      	bne.n	12c56 <hci_tx_thread+0xf2>
					conn = CONTAINER_OF(ev->fifo,
   12c60:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   12c62:	3838      	subs	r0, #56	; 0x38
   12c64:	f001 fdfc 	bl	14860 <bt_conn_process_tx>
   12c68:	e7f5      	b.n	12c56 <hci_tx_thread+0xf2>
   12c6a:	bf00      	nop
   12c6c:	200004bc 	.word	0x200004bc
   12c70:	00021b55 	.word	0x00021b55
   12c74:	200004d0 	.word	0x200004d0
   12c78:	00021bed 	.word	0x00021bed
   12c7c:	00021ba2 	.word	0x00021ba2
   12c80:	2000040c 	.word	0x2000040c
   12c84:	00021bf6 	.word	0x00021bf6
   12c88:	200003d8 	.word	0x200003d8

00012c8c <hci_cmd_complete>:
{
   12c8c:	b538      	push	{r3, r4, r5, lr}
   12c8e:	2103      	movs	r1, #3
   12c90:	4604      	mov	r4, r0
   12c92:	3008      	adds	r0, #8
   12c94:	f00c ff80 	bl	1fb98 <net_buf_simple_pull_mem>
	status = buf->data[0];
   12c98:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
   12c9a:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   12c9c:	7818      	ldrb	r0, [r3, #0]
   12c9e:	4621      	mov	r1, r4
   12ca0:	f7ff ff0c 	bl	12abc <hci_cmd_done.constprop.0>
	if (ncmd) {
   12ca4:	b125      	cbz	r5, 12cb0 <hci_cmd_complete+0x24>
   12ca6:	4803      	ldr	r0, [pc, #12]	; (12cb4 <hci_cmd_complete+0x28>)
}
   12ca8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12cac:	f006 bd40 	b.w	19730 <z_impl_k_sem_give>
   12cb0:	bd38      	pop	{r3, r4, r5, pc}
   12cb2:	bf00      	nop
   12cb4:	200003d8 	.word	0x200003d8

00012cb8 <hci_cmd_status>:
{
   12cb8:	b538      	push	{r3, r4, r5, lr}
   12cba:	2104      	movs	r1, #4
   12cbc:	4604      	mov	r4, r0
   12cbe:	3008      	adds	r0, #8
   12cc0:	f00c ff6a 	bl	1fb98 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   12cc4:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   12cc6:	7800      	ldrb	r0, [r0, #0]
   12cc8:	4621      	mov	r1, r4
   12cca:	f7ff fef7 	bl	12abc <hci_cmd_done.constprop.0>
	if (ncmd) {
   12cce:	b125      	cbz	r5, 12cda <hci_cmd_status+0x22>
   12cd0:	4802      	ldr	r0, [pc, #8]	; (12cdc <hci_cmd_status+0x24>)
}
   12cd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12cd6:	f006 bd2b 	b.w	19730 <z_impl_k_sem_give>
   12cda:	bd38      	pop	{r3, r4, r5, pc}
   12cdc:	200003d8 	.word	0x200003d8

00012ce0 <bt_hci_cmd_state_set_init>:
{
   12ce0:	b510      	push	{r4, lr}
	state->bit = bit;
   12ce2:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   12ce6:	f89d 3008 	ldrb.w	r3, [sp, #8]
   12cea:	720b      	strb	r3, [r1, #8]
{
   12cec:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   12cee:	f004 fb2d 	bl	1734c <net_buf_id>
   12cf2:	4b03      	ldr	r3, [pc, #12]	; (12d00 <bt_hci_cmd_state_set_init+0x20>)
   12cf4:	220c      	movs	r2, #12
   12cf6:	fb02 3300 	mla	r3, r2, r0, r3
   12cfa:	605c      	str	r4, [r3, #4]
}
   12cfc:	bd10      	pop	{r4, pc}
   12cfe:	bf00      	nop
   12d00:	20002540 	.word	0x20002540

00012d04 <bt_hci_cmd_create>:
{
   12d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
   12d08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12d0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12d10:	4606      	mov	r6, r0
   12d12:	4817      	ldr	r0, [pc, #92]	; (12d70 <bt_hci_cmd_create+0x6c>)
	cmd(buf)->opcode = opcode;
   12d14:	4d17      	ldr	r5, [pc, #92]	; (12d74 <bt_hci_cmd_create+0x70>)
{
   12d16:	460f      	mov	r7, r1
   12d18:	f00c fec1 	bl	1fa9e <net_buf_alloc_fixed>
   12d1c:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   12d1e:	f100 0a08 	add.w	sl, r0, #8
   12d22:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   12d24:	f04f 0800 	mov.w	r8, #0
   12d28:	4650      	mov	r0, sl
   12d2a:	f00c fed7 	bl	1fadc <net_buf_simple_reserve>
   12d2e:	f884 8014 	strb.w	r8, [r4, #20]
	cmd(buf)->opcode = opcode;
   12d32:	4620      	mov	r0, r4
   12d34:	f004 fb0a 	bl	1734c <net_buf_id>
   12d38:	f04f 090c 	mov.w	r9, #12
   12d3c:	fb09 5000 	mla	r0, r9, r0, r5
   12d40:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   12d42:	4620      	mov	r0, r4
   12d44:	f004 fb02 	bl	1734c <net_buf_id>
   12d48:	fb09 5000 	mla	r0, r9, r0, r5
   12d4c:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
   12d50:	4620      	mov	r0, r4
   12d52:	f004 fafb 	bl	1734c <net_buf_id>
   12d56:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
   12d5a:	2103      	movs	r1, #3
   12d5c:	f8c5 8004 	str.w	r8, [r5, #4]
   12d60:	4650      	mov	r0, sl
   12d62:	f00c fef2 	bl	1fb4a <net_buf_simple_add>
	hdr->param_len = param_len;
   12d66:	7087      	strb	r7, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
   12d68:	8006      	strh	r6, [r0, #0]
}
   12d6a:	4620      	mov	r0, r4
   12d6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12d70:	200007e4 	.word	0x200007e4
   12d74:	20002540 	.word	0x20002540

00012d78 <bt_hci_cmd_send>:
{
   12d78:	b538      	push	{r3, r4, r5, lr}
   12d7a:	4605      	mov	r5, r0
	if (!buf) {
   12d7c:	460c      	mov	r4, r1
   12d7e:	b919      	cbnz	r1, 12d88 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
   12d80:	f7ff ffc0 	bl	12d04 <bt_hci_cmd_create>
		if (!buf) {
   12d84:	4604      	mov	r4, r0
   12d86:	b198      	cbz	r0, 12db0 <bt_hci_cmd_send+0x38>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   12d88:	f640 4335 	movw	r3, #3125	; 0xc35
   12d8c:	429d      	cmp	r5, r3
   12d8e:	d109      	bne.n	12da4 <bt_hci_cmd_send+0x2c>
		return bt_hci_ecc_send(buf);
   12d90:	4620      	mov	r0, r4
   12d92:	f7ff fbbb 	bl	1250c <bt_hci_ecc_send>
		if (err) {
   12d96:	4605      	mov	r5, r0
   12d98:	b110      	cbz	r0, 12da0 <bt_hci_cmd_send+0x28>
			net_buf_unref(buf);
   12d9a:	4620      	mov	r0, r4
   12d9c:	f004 fb8c 	bl	174b8 <net_buf_unref>
}
   12da0:	4628      	mov	r0, r5
   12da2:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   12da4:	4804      	ldr	r0, [pc, #16]	; (12db8 <bt_hci_cmd_send+0x40>)
   12da6:	4621      	mov	r1, r4
   12da8:	f00c fe9c 	bl	1fae4 <net_buf_put>
	return 0;
   12dac:	2500      	movs	r5, #0
   12dae:	e7f7      	b.n	12da0 <bt_hci_cmd_send+0x28>
			return -ENOBUFS;
   12db0:	f06f 0568 	mvn.w	r5, #104	; 0x68
   12db4:	e7f4      	b.n	12da0 <bt_hci_cmd_send+0x28>
   12db6:	bf00      	nop
   12db8:	2000040c 	.word	0x2000040c

00012dbc <bt_hci_cmd_send_sync>:
{
   12dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
   12dbe:	4615      	mov	r5, r2
   12dc0:	b087      	sub	sp, #28
	if (!buf) {
   12dc2:	460c      	mov	r4, r1
   12dc4:	b921      	cbnz	r1, 12dd0 <bt_hci_cmd_send_sync+0x14>
		buf = bt_hci_cmd_create(opcode, 0);
   12dc6:	f7ff ff9d 	bl	12d04 <bt_hci_cmd_create>
		if (!buf) {
   12dca:	4604      	mov	r4, r0
   12dcc:	2800      	cmp	r0, #0
   12dce:	d048      	beq.n	12e62 <bt_hci_cmd_send_sync+0xa6>
	return z_impl_k_sem_init(sem, initial_count, limit);
   12dd0:	2201      	movs	r2, #1
   12dd2:	2100      	movs	r1, #0
   12dd4:	4668      	mov	r0, sp
   12dd6:	f00d fac3 	bl	20360 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   12dda:	4620      	mov	r0, r4
   12ddc:	f004 fab6 	bl	1734c <net_buf_id>
   12de0:	4f21      	ldr	r7, [pc, #132]	; (12e68 <bt_hci_cmd_send_sync+0xac>)
   12de2:	230c      	movs	r3, #12
   12de4:	fb03 7000 	mla	r0, r3, r0, r7
   12de8:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   12dec:	4620      	mov	r0, r4
   12dee:	f00c fe86 	bl	1fafe <net_buf_ref>
   12df2:	4601      	mov	r1, r0
   12df4:	481d      	ldr	r0, [pc, #116]	; (12e6c <bt_hci_cmd_send_sync+0xb0>)
   12df6:	f00c fe75 	bl	1fae4 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   12dfa:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   12dfe:	2300      	movs	r3, #0
   12e00:	4668      	mov	r0, sp
   12e02:	f006 fcbb 	bl	1977c <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   12e06:	4606      	mov	r6, r0
   12e08:	b180      	cbz	r0, 12e2c <bt_hci_cmd_send_sync+0x70>
   12e0a:	4a19      	ldr	r2, [pc, #100]	; (12e70 <bt_hci_cmd_send_sync+0xb4>)
   12e0c:	4919      	ldr	r1, [pc, #100]	; (12e74 <bt_hci_cmd_send_sync+0xb8>)
   12e0e:	481a      	ldr	r0, [pc, #104]	; (12e78 <bt_hci_cmd_send_sync+0xbc>)
   12e10:	f240 1331 	movw	r3, #305	; 0x131
   12e14:	f007 fcdb 	bl	1a7ce <printk>
   12e18:	4818      	ldr	r0, [pc, #96]	; (12e7c <bt_hci_cmd_send_sync+0xc0>)
   12e1a:	4631      	mov	r1, r6
   12e1c:	f007 fcd7 	bl	1a7ce <printk>
   12e20:	4040      	eors	r0, r0
   12e22:	f380 8811 	msr	BASEPRI, r0
   12e26:	f04f 0003 	mov.w	r0, #3
   12e2a:	df02      	svc	2
	status = cmd(buf)->status;
   12e2c:	4620      	mov	r0, r4
   12e2e:	f004 fa8d 	bl	1734c <net_buf_id>
   12e32:	230c      	movs	r3, #12
   12e34:	4358      	muls	r0, r3
   12e36:	5c3e      	ldrb	r6, [r7, r0]
	if (status) {
   12e38:	b156      	cbz	r6, 12e50 <bt_hci_cmd_send_sync+0x94>
		net_buf_unref(buf);
   12e3a:	4620      	mov	r0, r4
   12e3c:	f004 fb3c 	bl	174b8 <net_buf_unref>
			return -EIO;
   12e40:	2e09      	cmp	r6, #9
   12e42:	bf0c      	ite	eq
   12e44:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
   12e48:	f06f 0004 	mvnne.w	r0, #4
}
   12e4c:	b007      	add	sp, #28
   12e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
   12e50:	b115      	cbz	r5, 12e58 <bt_hci_cmd_send_sync+0x9c>
		*rsp = buf;
   12e52:	602c      	str	r4, [r5, #0]
	return 0;
   12e54:	4630      	mov	r0, r6
   12e56:	e7f9      	b.n	12e4c <bt_hci_cmd_send_sync+0x90>
		net_buf_unref(buf);
   12e58:	4620      	mov	r0, r4
   12e5a:	f004 fb2d 	bl	174b8 <net_buf_unref>
	return 0;
   12e5e:	4628      	mov	r0, r5
   12e60:	e7f4      	b.n	12e4c <bt_hci_cmd_send_sync+0x90>
			return -ENOBUFS;
   12e62:	f06f 0068 	mvn.w	r0, #104	; 0x68
   12e66:	e7f1      	b.n	12e4c <bt_hci_cmd_send_sync+0x90>
   12e68:	20002540 	.word	0x20002540
   12e6c:	2000040c 	.word	0x2000040c
   12e70:	00021b55 	.word	0x00021b55
   12e74:	00021bed 	.word	0x00021bed
   12e78:	00021ba2 	.word	0x00021ba2
   12e7c:	00021bfa 	.word	0x00021bfa

00012e80 <conn_auto_initiate>:
{
   12e80:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   12e82:	7b43      	ldrb	r3, [r0, #13]
   12e84:	2b07      	cmp	r3, #7
{
   12e86:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   12e88:	d157      	bne.n	12f3a <conn_auto_initiate+0xba>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12e8a:	f3bf 8f5b 	dmb	ish
   12e8e:	6843      	ldr	r3, [r0, #4]
   12e90:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   12e94:	049b      	lsls	r3, r3, #18
   12e96:	f100 0604 	add.w	r6, r0, #4
   12e9a:	d41b      	bmi.n	12ed4 <conn_auto_initiate+0x54>
   12e9c:	78c3      	ldrb	r3, [r0, #3]
   12e9e:	b123      	cbz	r3, 12eaa <conn_auto_initiate+0x2a>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
   12ea0:	4b27      	ldr	r3, [pc, #156]	; (12f40 <conn_auto_initiate+0xc0>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
   12ea2:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   12ea6:	071d      	lsls	r5, r3, #28
   12ea8:	d514      	bpl.n	12ed4 <conn_auto_initiate+0x54>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   12eaa:	2102      	movs	r1, #2
   12eac:	f242 0016 	movw	r0, #8214	; 0x2016
   12eb0:	f7ff ff28 	bl	12d04 <bt_hci_cmd_create>
	if (!buf) {
   12eb4:	4605      	mov	r5, r0
   12eb6:	b168      	cbz	r0, 12ed4 <conn_auto_initiate+0x54>
   12eb8:	2102      	movs	r1, #2
   12eba:	3008      	adds	r0, #8
   12ebc:	f00c fe45 	bl	1fb4a <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   12ec0:	8823      	ldrh	r3, [r4, #0]
   12ec2:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   12ec4:	4629      	mov	r1, r5
   12ec6:	f242 0016 	movw	r0, #8214	; 0x2016
}
   12eca:	b004      	add	sp, #16
   12ecc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   12ed0:	f7ff bf52 	b.w	12d78 <bt_hci_cmd_send>
   12ed4:	f3bf 8f5b 	dmb	ish
   12ed8:	6863      	ldr	r3, [r4, #4]
   12eda:	4d19      	ldr	r5, [pc, #100]	; (12f40 <conn_auto_initiate+0xc0>)
   12edc:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   12ee0:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   12ee4:	f3c3 3100 	ubfx	r1, r3, #12, #1
   12ee8:	d111      	bne.n	12f0e <conn_auto_initiate+0x8e>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
   12eea:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
   12eee:	07d8      	lsls	r0, r3, #31
   12ef0:	d50d      	bpl.n	12f0e <conn_auto_initiate+0x8e>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   12ef2:	2302      	movs	r3, #2
   12ef4:	9100      	str	r1, [sp, #0]
   12ef6:	461a      	mov	r2, r3
   12ef8:	4620      	mov	r0, r4
   12efa:	f00a fa26 	bl	1d34a <bt_le_set_phy>
		if (!err) {
   12efe:	b930      	cbnz	r0, 12f0e <conn_auto_initiate+0x8e>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   12f00:	2180      	movs	r1, #128	; 0x80
   12f02:	4630      	mov	r0, r6
}
   12f04:	b004      	add	sp, #16
   12f06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12f0a:	f00a b82f 	b.w	1cf6c <atomic_or>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   12f0e:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   12f12:	069a      	lsls	r2, r3, #26
   12f14:	d511      	bpl.n	12f3a <conn_auto_initiate+0xba>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   12f16:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
   12f1a:	689b      	ldr	r3, [r3, #8]
   12f1c:	079b      	lsls	r3, r3, #30
   12f1e:	d50c      	bpl.n	12f3a <conn_auto_initiate+0xba>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   12f20:	f10d 010e 	add.w	r1, sp, #14
   12f24:	a803      	add	r0, sp, #12
   12f26:	f00a f9c0 	bl	1d2aa <hci_le_read_max_data_len>
			if (!err) {
   12f2a:	b930      	cbnz	r0, 12f3a <conn_auto_initiate+0xba>
				err = bt_le_set_data_len(conn,
   12f2c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   12f30:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   12f34:	4620      	mov	r0, r4
   12f36:	f00a f9eb 	bl	1d310 <bt_le_set_data_len>
}
   12f3a:	b004      	add	sp, #16
   12f3c:	bd70      	pop	{r4, r5, r6, pc}
   12f3e:	bf00      	nop
   12f40:	200002b8 	.word	0x200002b8

00012f44 <bt_hci_le_enh_conn_complete>:
{
   12f44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   12f48:	f8b0 7001 	ldrh.w	r7, [r0, #1]
		if (disconnected_handles[i] == handle) {
   12f4c:	4a68      	ldr	r2, [pc, #416]	; (130f0 <bt_hci_le_enh_conn_complete+0x1ac>)
	handle |= ~BT_ACL_HANDLE_MASK;
   12f4e:	ea6f 5307 	mvn.w	r3, r7, lsl #20
		if (disconnected_handles[i] == handle) {
   12f52:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
   12f54:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
   12f58:	b29b      	uxth	r3, r3
   12f5a:	4299      	cmp	r1, r3
{
   12f5c:	4605      	mov	r5, r0
   12f5e:	f04f 0600 	mov.w	r6, #0
			disconnected_handles[i] = 0;
   12f62:	bf08      	it	eq
   12f64:	8016      	strheq	r6, [r2, #0]
{
   12f66:	b085      	sub	sp, #20
			return true;
   12f68:	bf08      	it	eq
   12f6a:	2601      	moveq	r6, #1
	bt_id_pending_keys_update();
   12f6c:	f000 fa84 	bl	13478 <bt_id_pending_keys_update>
	if (evt->status) {
   12f70:	782c      	ldrb	r4, [r5, #0]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   12f72:	fa1f f887 	uxth.w	r8, r7
	if (evt->status) {
   12f76:	b304      	cbz	r4, 12fba <bt_hci_le_enh_conn_complete+0x76>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   12f78:	2c3c      	cmp	r4, #60	; 0x3c
   12f7a:	d156      	bne.n	1302a <bt_hci_le_enh_conn_complete+0xe6>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   12f7c:	f000 fd7c 	bl	13a78 <bt_le_adv_lookup_legacy>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12f80:	f3bf 8f5b 	dmb	ish
   12f84:	3010      	adds	r0, #16
   12f86:	e850 3f00 	ldrex	r3, [r0]
   12f8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   12f8e:	e840 3200 	strex	r2, r3, [r0]
   12f92:	2a00      	cmp	r2, #0
   12f94:	d1f7      	bne.n	12f86 <bt_hci_le_enh_conn_complete+0x42>
   12f96:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
   12f9a:	2000      	movs	r0, #0
   12f9c:	f7ff fcea 	bl	12974 <find_pending_connect.part.0>
		if (!conn) {
   12fa0:	4605      	mov	r5, r0
   12fa2:	2800      	cmp	r0, #0
   12fa4:	d041      	beq.n	1302a <bt_hci_le_enh_conn_complete+0xe6>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   12fa6:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   12fa8:	2100      	movs	r1, #0
   12faa:	f001 f9c1 	bl	14330 <bt_conn_set_state>
		bt_conn_unref(conn);
   12fae:	4628      	mov	r0, r5
}
   12fb0:	b005      	add	sp, #20
   12fb2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		bt_conn_unref(conn);
   12fb6:	f00a bdb7 	b.w	1db28 <bt_conn_unref>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   12fba:	792b      	ldrb	r3, [r5, #4]
   12fbc:	3b02      	subs	r3, #2
   12fbe:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   12fc0:	f105 0904 	add.w	r9, r5, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   12fc4:	d834      	bhi.n	13030 <bt_hci_le_enh_conn_complete+0xec>
	memcpy(dst, src, sizeof(*dst));
   12fc6:	2207      	movs	r2, #7
   12fc8:	4649      	mov	r1, r9
   12fca:	a802      	add	r0, sp, #8
   12fcc:	f009 fe6b 	bl	1cca6 <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   12fd0:	f89d 3008 	ldrb.w	r3, [sp, #8]
	memcpy(dst, src, sizeof(*dst));
   12fd4:	2206      	movs	r2, #6
   12fd6:	3b02      	subs	r3, #2
   12fd8:	f105 0111 	add.w	r1, r5, #17
   12fdc:	f10d 0001 	add.w	r0, sp, #1
   12fe0:	f88d 3008 	strb.w	r3, [sp, #8]
   12fe4:	f009 fe5f 	bl	1cca6 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   12fe8:	2301      	movs	r3, #1
   12fea:	f88d 3000 	strb.w	r3, [sp]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
   12fee:	78eb      	ldrb	r3, [r5, #3]
   12ff0:	2b01      	cmp	r3, #1
   12ff2:	d116      	bne.n	13022 <bt_hci_le_enh_conn_complete+0xde>
   12ff4:	a802      	add	r0, sp, #8
   12ff6:	f7ff fcbd 	bl	12974 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   12ffa:	78eb      	ldrb	r3, [r5, #3]
   12ffc:	2b01      	cmp	r3, #1
   12ffe:	4604      	mov	r4, r0
   13000:	d10e      	bne.n	13020 <bt_hci_le_enh_conn_complete+0xdc>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   13002:	f000 fd39 	bl	13a78 <bt_le_adv_lookup_legacy>
   13006:	f3bf 8f5b 	dmb	ish
   1300a:	3010      	adds	r0, #16
   1300c:	e850 3f00 	ldrex	r3, [r0]
   13010:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   13014:	e840 3200 	strex	r2, r3, [r0]
   13018:	2a00      	cmp	r2, #0
   1301a:	d1f7      	bne.n	1300c <bt_hci_le_enh_conn_complete+0xc8>
   1301c:	f3bf 8f5b 	dmb	ish
	if (!conn) {
   13020:	b9dc      	cbnz	r4, 1305a <bt_hci_le_enh_conn_complete+0x116>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   13022:	211f      	movs	r1, #31
   13024:	4640      	mov	r0, r8
   13026:	f00a f958 	bl	1d2da <bt_hci_disconnect>
}
   1302a:	b005      	add	sp, #20
   1302c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		uint8_t id = evt->role == BT_HCI_ROLE_SLAVE ? bt_dev.adv_conn_id :
   13030:	78eb      	ldrb	r3, [r5, #3]
   13032:	2b01      	cmp	r3, #1
   13034:	bf04      	itt	eq
   13036:	4b2f      	ldreq	r3, [pc, #188]	; (130f4 <bt_hci_le_enh_conn_complete+0x1b0>)
   13038:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
   1303c:	4649      	mov	r1, r9
   1303e:	4620      	mov	r0, r4
   13040:	f00a fb40 	bl	1d6c4 <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
   13044:	2207      	movs	r2, #7
   13046:	4601      	mov	r1, r0
   13048:	a802      	add	r0, sp, #8
   1304a:	f009 fe2c 	bl	1cca6 <memcpy>
   1304e:	2207      	movs	r2, #7
   13050:	4649      	mov	r1, r9
   13052:	4668      	mov	r0, sp
   13054:	f009 fe27 	bl	1cca6 <memcpy>
}
   13058:	e7c9      	b.n	12fee <bt_hci_le_enh_conn_complete+0xaa>
	conn->handle = handle;
   1305a:	4620      	mov	r0, r4
	memcpy(dst, src, sizeof(*dst));
   1305c:	2207      	movs	r2, #7
   1305e:	f820 7b88 	strh.w	r7, [r0], #136
   13062:	a902      	add	r1, sp, #8
   13064:	f009 fe1f 	bl	1cca6 <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   13068:	7e2a      	ldrb	r2, [r5, #24]
   1306a:	7deb      	ldrb	r3, [r5, #23]
   1306c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   13070:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   13074:	7eaa      	ldrb	r2, [r5, #26]
   13076:	7e6b      	ldrb	r3, [r5, #25]
   13078:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1307c:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   13080:	7f2a      	ldrb	r2, [r5, #28]
   13082:	7eeb      	ldrb	r3, [r5, #27]
   13084:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   13088:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
   1308c:	78eb      	ldrb	r3, [r5, #3]
   1308e:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
   13090:	2200      	movs	r2, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   13092:	2b01      	cmp	r3, #1
	conn->err = 0U;
   13094:	7322      	strb	r2, [r4, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   13096:	d117      	bne.n	130c8 <bt_hci_le_enh_conn_complete+0x184>
   13098:	2207      	movs	r2, #7
   1309a:	4669      	mov	r1, sp
   1309c:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   130a0:	f009 fe01 	bl	1cca6 <memcpy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   130a4:	f000 fce8 	bl	13a78 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   130a8:	7a21      	ldrb	r1, [r4, #8]
   130aa:	4d12      	ldr	r5, [pc, #72]	; (130f4 <bt_hci_le_enh_conn_complete+0x1b0>)
   130ac:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   130b0:	2207      	movs	r2, #7
   130b2:	4429      	add	r1, r5
   130b4:	f104 0096 	add.w	r0, r4, #150	; 0x96
   130b8:	f009 fdf5 	bl	1cca6 <memcpy>
		if (BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
   130bc:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
   130c0:	065b      	lsls	r3, r3, #25
   130c2:	d501      	bpl.n	130c8 <bt_hci_le_enh_conn_complete+0x184>
			bt_le_adv_resume();
   130c4:	f000 fe7e 	bl	13dc4 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   130c8:	2107      	movs	r1, #7
   130ca:	4620      	mov	r0, r4
   130cc:	f001 f930 	bl	14330 <bt_conn_set_state>
	if (is_disconnected) {
   130d0:	b11e      	cbz	r6, 130da <bt_hci_le_enh_conn_complete+0x196>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   130d2:	2101      	movs	r1, #1
   130d4:	4620      	mov	r0, r4
   130d6:	f001 f92b 	bl	14330 <bt_conn_set_state>
	bt_conn_connected(conn);
   130da:	4620      	mov	r0, r4
   130dc:	f00a fd60 	bl	1dba0 <bt_conn_connected>
	conn_auto_initiate(conn);
   130e0:	4620      	mov	r0, r4
   130e2:	f7ff fecd 	bl	12e80 <conn_auto_initiate>
	bt_conn_unref(conn);
   130e6:	4620      	mov	r0, r4
   130e8:	f00a fd1e 	bl	1db28 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   130ec:	e79d      	b.n	1302a <bt_hci_le_enh_conn_complete+0xe6>
   130ee:	bf00      	nop
   130f0:	20002960 	.word	0x20002960
   130f4:	200002b8 	.word	0x200002b8

000130f8 <bt_unpair>:
{
   130f8:	b530      	push	{r4, r5, lr}
   130fa:	b085      	sub	sp, #20
   130fc:	460d      	mov	r5, r1
   130fe:	f88d 0007 	strb.w	r0, [sp, #7]
	if (id >= CONFIG_BT_ID_MAX) {
   13102:	b9d0      	cbnz	r0, 1313a <bt_unpair+0x42>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   13104:	b949      	cbnz	r1, 1311a <bt_unpair+0x22>
		bt_foreach_bond(id, unpair_remote, &id);
   13106:	490e      	ldr	r1, [pc, #56]	; (13140 <bt_unpair+0x48>)
   13108:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1310c:	f10d 0207 	add.w	r2, sp, #7
   13110:	f003 fffa 	bl	17108 <bt_foreach_bond>
		return 0;
   13114:	2000      	movs	r0, #0
}
   13116:	b005      	add	sp, #20
   13118:	bd30      	pop	{r4, r5, pc}
	    (!addr || !bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   1311a:	9002      	str	r0, [sp, #8]
	return memcmp(a, b, sizeof(*a));
   1311c:	2207      	movs	r2, #7
   1311e:	f8cd 000b 	str.w	r0, [sp, #11]
   13122:	a902      	add	r1, sp, #8
   13124:	4628      	mov	r0, r5
   13126:	f009 fdad 	bl	1cc84 <memcmp>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   1312a:	2800      	cmp	r0, #0
   1312c:	d0eb      	beq.n	13106 <bt_unpair+0xe>
	unpair(id, addr);
   1312e:	f89d 0007 	ldrb.w	r0, [sp, #7]
   13132:	4629      	mov	r1, r5
   13134:	f7ff fbb8 	bl	128a8 <unpair>
	return 0;
   13138:	e7ec      	b.n	13114 <bt_unpair+0x1c>
		return -EINVAL;
   1313a:	f06f 0015 	mvn.w	r0, #21
   1313e:	e7ea      	b.n	13116 <bt_unpair+0x1e>
   13140:	0001cf8b 	.word	0x0001cf8b

00013144 <bt_security_err_get>:
	switch (hci_err) {
   13144:	2829      	cmp	r0, #41	; 0x29
   13146:	bf9a      	itte	ls
   13148:	4b01      	ldrls	r3, [pc, #4]	; (13150 <bt_security_err_get+0xc>)
   1314a:	5c18      	ldrbls	r0, [r3, r0]
{
   1314c:	2008      	movhi	r0, #8
}
   1314e:	4770      	bx	lr
   13150:	00021c3f 	.word	0x00021c3f

00013154 <hci_event_prio>:
{
   13154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13158:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   1315a:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   1315e:	4630      	mov	r0, r6
   13160:	f00c fd2a 	bl	1fbb8 <net_buf_simple_headroom>
	state->len = buf->len;
   13164:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   13168:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   1316c:	4605      	mov	r5, r0
   1316e:	d80c      	bhi.n	1318a <hci_event_prio+0x36>
   13170:	4a1c      	ldr	r2, [pc, #112]	; (131e4 <hci_event_prio+0x90>)
   13172:	491d      	ldr	r1, [pc, #116]	; (131e8 <hci_event_prio+0x94>)
   13174:	481d      	ldr	r0, [pc, #116]	; (131ec <hci_event_prio+0x98>)
   13176:	f640 530c 	movw	r3, #3340	; 0xd0c
   1317a:	f007 fb28 	bl	1a7ce <printk>
   1317e:	4040      	eors	r0, r0
   13180:	f380 8811 	msr	BASEPRI, r0
   13184:	f04f 0003 	mov.w	r0, #3
   13188:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   1318a:	4630      	mov	r0, r6
   1318c:	2102      	movs	r1, #2
   1318e:	f00c fd03 	bl	1fb98 <net_buf_simple_pull_mem>
   13192:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   13194:	7800      	ldrb	r0, [r0, #0]
   13196:	f009 feaa 	bl	1ceee <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   1319a:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1319c:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   1319e:	d40c      	bmi.n	131ba <hci_event_prio+0x66>
   131a0:	4a10      	ldr	r2, [pc, #64]	; (131e4 <hci_event_prio+0x90>)
   131a2:	4913      	ldr	r1, [pc, #76]	; (131f0 <hci_event_prio+0x9c>)
   131a4:	4811      	ldr	r0, [pc, #68]	; (131ec <hci_event_prio+0x98>)
   131a6:	f44f 6351 	mov.w	r3, #3344	; 0xd10
   131aa:	f007 fb10 	bl	1a7ce <printk>
   131ae:	4040      	eors	r0, r0
   131b0:	f380 8811 	msr	BASEPRI, r0
   131b4:	f04f 0003 	mov.w	r0, #3
   131b8:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   131ba:	2305      	movs	r3, #5
   131bc:	4a0d      	ldr	r2, [pc, #52]	; (131f4 <hci_event_prio+0xa0>)
   131be:	7838      	ldrb	r0, [r7, #0]
   131c0:	4621      	mov	r1, r4
   131c2:	f009 fea6 	bl	1cf12 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   131c6:	07b3      	lsls	r3, r6, #30
   131c8:	d507      	bpl.n	131da <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   131ca:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   131cc:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   131d0:	fa10 f585 	uxtah	r5, r0, r5
   131d4:	60a5      	str	r5, [r4, #8]
}
   131d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   131da:	4620      	mov	r0, r4
}
   131dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   131e0:	f004 b96a 	b.w	174b8 <net_buf_unref>
   131e4:	00021b55 	.word	0x00021b55
   131e8:	00021b89 	.word	0x00021b89
   131ec:	00021ba2 	.word	0x00021ba2
   131f0:	00021c1a 	.word	0x00021c1a
   131f4:	000211f0 	.word	0x000211f0

000131f8 <bt_recv>:
{
   131f8:	b538      	push	{r3, r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   131fa:	7d03      	ldrb	r3, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   131fc:	2b01      	cmp	r3, #1
{
   131fe:	4605      	mov	r5, r0
	switch (bt_buf_get_type(buf)) {
   13200:	d007      	beq.n	13212 <bt_recv+0x1a>
   13202:	2b03      	cmp	r3, #3
   13204:	d113      	bne.n	1322e <bt_recv+0x36>
			net_buf_put(&bt_dev.rx_queue, buf);
   13206:	480c      	ldr	r0, [pc, #48]	; (13238 <bt_recv+0x40>)
   13208:	4629      	mov	r1, r5
   1320a:	f00c fc6b 	bl	1fae4 <net_buf_put>
		return 0;
   1320e:	2000      	movs	r0, #0
   13210:	e00c      	b.n	1322c <bt_recv+0x34>
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   13212:	6883      	ldr	r3, [r0, #8]
   13214:	7818      	ldrb	r0, [r3, #0]
   13216:	f009 fe6a 	bl	1ceee <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   1321a:	07c3      	lsls	r3, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1321c:	4604      	mov	r4, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   1321e:	d502      	bpl.n	13226 <bt_recv+0x2e>
			hci_event_prio(buf);
   13220:	4628      	mov	r0, r5
   13222:	f7ff ff97 	bl	13154 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   13226:	f014 0002 	ands.w	r0, r4, #2
   1322a:	d1ec      	bne.n	13206 <bt_recv+0xe>
}
   1322c:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_unref(buf);
   1322e:	f004 f943 	bl	174b8 <net_buf_unref>
		return -EINVAL;
   13232:	f06f 0015 	mvn.w	r0, #21
   13236:	e7f9      	b.n	1322c <bt_recv+0x34>
   13238:	200003f4 	.word	0x200003f4

0001323c <bt_hci_driver_register>:
	if (bt_dev.drv) {
   1323c:	4a08      	ldr	r2, [pc, #32]	; (13260 <bt_hci_driver_register+0x24>)
{
   1323e:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   13240:	f8d2 016c 	ldr.w	r0, [r2, #364]	; 0x16c
   13244:	b930      	cbnz	r0, 13254 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   13246:	68d9      	ldr	r1, [r3, #12]
   13248:	b139      	cbz	r1, 1325a <bt_hci_driver_register+0x1e>
   1324a:	6919      	ldr	r1, [r3, #16]
   1324c:	b129      	cbz	r1, 1325a <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   1324e:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
	return 0;
   13252:	4770      	bx	lr
		return -EALREADY;
   13254:	f06f 0077 	mvn.w	r0, #119	; 0x77
   13258:	4770      	bx	lr
		return -EINVAL;
   1325a:	f06f 0015 	mvn.w	r0, #21
}
   1325e:	4770      	bx	lr
   13260:	200002b8 	.word	0x200002b8

00013264 <bt_finalize_init>:
   13264:	4801      	ldr	r0, [pc, #4]	; (1326c <bt_finalize_init+0x8>)
   13266:	2102      	movs	r1, #2
   13268:	f009 be80 	b.w	1cf6c <atomic_or>
   1326c:	20000384 	.word	0x20000384

00013270 <init_work>:
{
   13270:	b510      	push	{r4, lr}
	err = bt_init();
   13272:	f7fc fad1 	bl	f818 <bt_init>
	if (ready_cb) {
   13276:	4b03      	ldr	r3, [pc, #12]	; (13284 <init_work+0x14>)
   13278:	681b      	ldr	r3, [r3, #0]
   1327a:	b113      	cbz	r3, 13282 <init_work+0x12>
}
   1327c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   13280:	4718      	bx	r3
}
   13282:	bd10      	pop	{r4, pc}
   13284:	20002558 	.word	0x20002558

00013288 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
   13288:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
	int err;

	if (!bt_dev.drv) {
   1328c:	4d2e      	ldr	r5, [pc, #184]	; (13348 <bt_enable+0xc0>)
   1328e:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
{
   13292:	b088      	sub	sp, #32
   13294:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   13296:	2b00      	cmp	r3, #0
   13298:	d04f      	beq.n	1333a <bt_enable+0xb2>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1329a:	2101      	movs	r1, #1
   1329c:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
   132a0:	f009 fe64 	bl	1cf6c <atomic_or>
		BT_ERR("No HCI driver registered");
		return -ENODEV;
	}

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   132a4:	07c3      	lsls	r3, r0, #31
   132a6:	d44b      	bmi.n	13340 <bt_enable+0xb8>
		return -EALREADY;
	}

	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		err = bt_settings_init();
   132a8:	f009 fdc8 	bl	1ce3c <bt_settings_init>
		if (err) {
   132ac:	4604      	mov	r4, r0
   132ae:	2800      	cmp	r0, #0
   132b0:	d13f      	bne.n	13332 <bt_enable+0xaa>
		}
	} else {
		bt_set_name(CONFIG_BT_DEVICE_NAME);
	}

	ready_cb = cb;
   132b2:	4b26      	ldr	r3, [pc, #152]	; (1334c <bt_enable+0xc4>)
   132b4:	f04f 0800 	mov.w	r8, #0
   132b8:	601e      	str	r6, [r3, #0]

	/* TX thread */
	k_thread_create(&tx_thread_data, tx_thread_stack,
   132ba:	f04f 0900 	mov.w	r9, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   132be:	f06f 0308 	mvn.w	r3, #8
   132c2:	e9cd 0302 	strd	r0, r3, [sp, #8]
   132c6:	e9cd 0000 	strd	r0, r0, [sp]
   132ca:	9004      	str	r0, [sp, #16]
   132cc:	e9cd 8906 	strd	r8, r9, [sp, #24]
   132d0:	4b1f      	ldr	r3, [pc, #124]	; (13350 <bt_enable+0xc8>)
   132d2:	4920      	ldr	r1, [pc, #128]	; (13354 <bt_enable+0xcc>)
   132d4:	4820      	ldr	r0, [pc, #128]	; (13358 <bt_enable+0xd0>)
   132d6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   132da:	f006 f89d 	bl	19418 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   132de:	491f      	ldr	r1, [pc, #124]	; (1335c <bt_enable+0xd4>)
   132e0:	481d      	ldr	r0, [pc, #116]	; (13358 <bt_enable+0xd0>)
   132e2:	f00c ff55 	bl	20190 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   132e6:	f06f 0307 	mvn.w	r3, #7
   132ea:	e9cd 4302 	strd	r4, r3, [sp, #8]
   132ee:	e9cd 8906 	strd	r8, r9, [sp, #24]
   132f2:	e9cd 4400 	strd	r4, r4, [sp]
   132f6:	4b1a      	ldr	r3, [pc, #104]	; (13360 <bt_enable+0xd8>)
   132f8:	491a      	ldr	r1, [pc, #104]	; (13364 <bt_enable+0xdc>)
   132fa:	9404      	str	r4, [sp, #16]
   132fc:	f640 0298 	movw	r2, #2200	; 0x898
   13300:	4819      	ldr	r0, [pc, #100]	; (13368 <bt_enable+0xe0>)
   13302:	f006 f889 	bl	19418 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   13306:	4919      	ldr	r1, [pc, #100]	; (1336c <bt_enable+0xe4>)
   13308:	4817      	ldr	r0, [pc, #92]	; (13368 <bt_enable+0xe0>)
   1330a:	f00c ff41 	bl	20190 <z_impl_k_thread_name_set>
			0, K_NO_WAIT);
	k_thread_name_set(&rx_thread_data, "BT RX");
#endif

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		bt_hci_ecc_init();
   1330e:	f7ff f96b 	bl	125e8 <bt_hci_ecc_init>
	}

	err = bt_dev.drv->open();
   13312:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
   13316:	68db      	ldr	r3, [r3, #12]
   13318:	4798      	blx	r3
	if (err) {
   1331a:	4604      	mov	r4, r0
   1331c:	b948      	cbnz	r0, 13332 <bt_enable+0xaa>
		return err;
	}

	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);

	if (!cb) {
   1331e:	b926      	cbnz	r6, 1332a <bt_enable+0xa2>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   13320:	b008      	add	sp, #32
   13322:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
		return bt_init();
   13326:	f7fc ba77 	b.w	f818 <bt_init>
	k_work_submit(&bt_dev.init);
   1332a:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   1332e:	f006 fb8d 	bl	19a4c <k_work_submit>
}
   13332:	4620      	mov	r0, r4
   13334:	b008      	add	sp, #32
   13336:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
		return -ENODEV;
   1333a:	f06f 0412 	mvn.w	r4, #18
   1333e:	e7f8      	b.n	13332 <bt_enable+0xaa>
		return -EALREADY;
   13340:	f06f 0477 	mvn.w	r4, #119	; 0x77
   13344:	e7f5      	b.n	13332 <bt_enable+0xaa>
   13346:	bf00      	nop
   13348:	200002b8 	.word	0x200002b8
   1334c:	20002558 	.word	0x20002558
   13350:	00012b65 	.word	0x00012b65
   13354:	20004460 	.word	0x20004460
   13358:	20001498 	.word	0x20001498
   1335c:	00021c33 	.word	0x00021c33
   13360:	000129b1 	.word	0x000129b1
   13364:	20003ba0 	.word	0x20003ba0
   13368:	20001418 	.word	0x20001418
   1336c:	00021c39 	.word	0x00021c39

00013370 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   13370:	4800      	ldr	r0, [pc, #0]	; (13374 <bt_get_name+0x4>)
   13372:	4770      	bx	lr
   13374:	000218ea 	.word	0x000218ea

00013378 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   13378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   1337a:	4f0b      	ldr	r7, [pc, #44]	; (133a8 <id_find+0x30>)
{
   1337c:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   1337e:	2500      	movs	r5, #0
   13380:	79fb      	ldrb	r3, [r7, #7]
   13382:	b2ec      	uxtb	r4, r5
   13384:	42a3      	cmp	r3, r4
   13386:	d802      	bhi.n	1338e <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   13388:	f06f 0401 	mvn.w	r4, #1
   1338c:	e009      	b.n	133a2 <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   1338e:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   13392:	2207      	movs	r2, #7
   13394:	4439      	add	r1, r7
   13396:	4630      	mov	r0, r6
   13398:	f009 fc74 	bl	1cc84 <memcmp>
   1339c:	3501      	adds	r5, #1
   1339e:	2800      	cmp	r0, #0
   133a0:	d1ee      	bne.n	13380 <id_find+0x8>
}
   133a2:	4620      	mov	r0, r4
   133a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   133a6:	bf00      	nop
   133a8:	200002b8 	.word	0x200002b8

000133ac <set_random_address>:
{
   133ac:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   133ae:	4914      	ldr	r1, [pc, #80]	; (13400 <set_random_address+0x54>)
   133b0:	2206      	movs	r2, #6
   133b2:	4605      	mov	r5, r0
   133b4:	f009 fc66 	bl	1cc84 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   133b8:	4604      	mov	r4, r0
   133ba:	b1e0      	cbz	r0, 133f6 <set_random_address+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   133bc:	2106      	movs	r1, #6
   133be:	f242 0005 	movw	r0, #8197	; 0x2005
   133c2:	f7ff fc9f 	bl	12d04 <bt_hci_cmd_create>
	if (!buf) {
   133c6:	4604      	mov	r4, r0
   133c8:	b1b8      	cbz	r0, 133fa <set_random_address+0x4e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   133ca:	2206      	movs	r2, #6
   133cc:	4629      	mov	r1, r5
   133ce:	3008      	adds	r0, #8
   133d0:	f00c fbc1 	bl	1fb56 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   133d4:	4621      	mov	r1, r4
   133d6:	2200      	movs	r2, #0
   133d8:	f242 0005 	movw	r0, #8197	; 0x2005
   133dc:	f7ff fcee 	bl	12dbc <bt_hci_cmd_send_sync>
	if (err) {
   133e0:	4604      	mov	r4, r0
   133e2:	b940      	cbnz	r0, 133f6 <set_random_address+0x4a>
	memcpy(dst, src, sizeof(*dst));
   133e4:	2206      	movs	r2, #6
   133e6:	4806      	ldr	r0, [pc, #24]	; (13400 <set_random_address+0x54>)
   133e8:	4629      	mov	r1, r5
   133ea:	f009 fc5c 	bl	1cca6 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   133ee:	4b05      	ldr	r3, [pc, #20]	; (13404 <set_random_address+0x58>)
   133f0:	2201      	movs	r2, #1
   133f2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
   133f6:	4620      	mov	r0, r4
   133f8:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   133fa:	f06f 0468 	mvn.w	r4, #104	; 0x68
   133fe:	e7fa      	b.n	133f6 <set_random_address+0x4a>
   13400:	20000319 	.word	0x20000319
   13404:	200002b8 	.word	0x200002b8

00013408 <id_create.constprop.0>:

static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   13408:	b530      	push	{r4, r5, lr}
		do {
			bt_addr_le_create_static(&new_addr);
			/* Make sure we didn't generate a duplicate */
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   1340a:	4c19      	ldr	r4, [pc, #100]	; (13470 <id_create.constprop.0+0x68>)
   1340c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   13410:	b085      	sub	sp, #20
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   13412:	4404      	add	r4, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   13414:	460d      	mov	r5, r1
   13416:	b1b9      	cbz	r1, 13448 <id_create.constprop.0+0x40>
   13418:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   1341a:	2207      	movs	r2, #7
   1341c:	a902      	add	r1, sp, #8
   1341e:	4628      	mov	r0, r5
   13420:	9302      	str	r3, [sp, #8]
   13422:	f8cd 300b 	str.w	r3, [sp, #11]
   13426:	f009 fc2d 	bl	1cc84 <memcmp>
   1342a:	b168      	cbz	r0, 13448 <id_create.constprop.0+0x40>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   1342c:	4629      	mov	r1, r5
   1342e:	4620      	mov	r0, r4

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   13430:	f00a f8c5 	bl	1d5be <bt_addr_le_copy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   13434:	480f      	ldr	r0, [pc, #60]	; (13474 <id_create.constprop.0+0x6c>)
   13436:	f00a f8c5 	bl	1d5c4 <atomic_get>
#endif
	/* Only store if stack was already initialized. Before initialization
	 * we don't know the flash content, so it's potentially harmful to
	 * try to write anything there.
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   1343a:	0783      	lsls	r3, r0, #30
   1343c:	d515      	bpl.n	1346a <id_create.constprop.0+0x62>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}
}
   1343e:	b005      	add	sp, #20
   13440:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		bt_settings_save_id();
   13444:	f7ff b964 	b.w	12710 <bt_settings_save_id>
			bt_addr_le_create_static(&new_addr);
   13448:	4668      	mov	r0, sp
   1344a:	f009 fd42 	bl	1ced2 <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
   1344e:	4668      	mov	r0, sp
   13450:	f7ff ff92 	bl	13378 <id_find>
   13454:	2800      	cmp	r0, #0
   13456:	daf7      	bge.n	13448 <id_create.constprop.0+0x40>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   13458:	4669      	mov	r1, sp
   1345a:	4620      	mov	r0, r4
   1345c:	f00a f8af 	bl	1d5be <bt_addr_le_copy>
		if (addr) {
   13460:	2d00      	cmp	r5, #0
   13462:	d0e7      	beq.n	13434 <id_create.constprop.0+0x2c>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   13464:	4621      	mov	r1, r4
   13466:	4628      	mov	r0, r5
   13468:	e7e2      	b.n	13430 <id_create.constprop.0+0x28>
}
   1346a:	b005      	add	sp, #20
   1346c:	bd30      	pop	{r4, r5, pc}
   1346e:	bf00      	nop
   13470:	200002b8 	.word	0x200002b8
   13474:	20000384 	.word	0x20000384

00013478 <bt_id_pending_keys_update>:
   13478:	4b0a      	ldr	r3, [pc, #40]	; (134a4 <bt_id_pending_keys_update+0x2c>)
   1347a:	f3bf 8f5b 	dmb	ish
   1347e:	e853 2f00 	ldrex	r2, [r3]
   13482:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   13486:	e843 1000 	strex	r0, r1, [r3]
   1348a:	2800      	cmp	r0, #0
   1348c:	d1f7      	bne.n	1347e <bt_id_pending_keys_update+0x6>
   1348e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   13492:	0493      	lsls	r3, r2, #18
   13494:	d504      	bpl.n	134a0 <bt_id_pending_keys_update+0x28>
			bt_keys_foreach(BT_KEYS_IRK, pending_id_update, NULL);
   13496:	4904      	ldr	r1, [pc, #16]	; (134a8 <bt_id_pending_keys_update+0x30>)
   13498:	2200      	movs	r2, #0
   1349a:	2002      	movs	r0, #2
   1349c:	f003 be54 	b.w	17148 <bt_keys_foreach>
}
   134a0:	4770      	bx	lr
   134a2:	bf00      	nop
   134a4:	20000384 	.word	0x20000384
   134a8:	0001d6fd 	.word	0x0001d6fd

000134ac <bt_id_add>:
{
   134ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   134ae:	4c46      	ldr	r4, [pc, #280]	; (135c8 <bt_id_add+0x11c>)
   134b0:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
   134b4:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
{
   134b8:	4605      	mov	r5, r0
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   134ba:	b10a      	cbz	r2, 134c0 <bt_id_add+0x14>
   134bc:	429a      	cmp	r2, r3
   134be:	d208      	bcs.n	134d2 <bt_id_add+0x26>
		bt_dev.le.rl_entries++;
   134c0:	3301      	adds	r3, #1
   134c2:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   134c6:	7a2b      	ldrb	r3, [r5, #8]
   134c8:	f043 0304 	orr.w	r3, r3, #4
   134cc:	722b      	strb	r3, [r5, #8]
}
   134ce:	b003      	add	sp, #12
   134d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
   134d2:	2100      	movs	r1, #0
   134d4:	2206      	movs	r2, #6
   134d6:	4608      	mov	r0, r1
   134d8:	f001 f8a2 	bl	14620 <bt_conn_lookup_state_le>
	if (conn) {
   134dc:	4606      	mov	r6, r0
   134de:	b1a8      	cbz	r0, 1350c <bt_id_add+0x60>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   134e0:	f3bf 8f5b 	dmb	ish
   134e4:	34cc      	adds	r4, #204	; 0xcc
   134e6:	e854 3f00 	ldrex	r3, [r4]
   134ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   134ee:	e844 3200 	strex	r2, r3, [r4]
   134f2:	2a00      	cmp	r2, #0
   134f4:	d1f7      	bne.n	134e6 <bt_id_add+0x3a>
   134f6:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
   134fa:	7a2b      	ldrb	r3, [r5, #8]
   134fc:	f043 0301 	orr.w	r3, r3, #1
   13500:	722b      	strb	r3, [r5, #8]
}
   13502:	b003      	add	sp, #12
   13504:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   13508:	f00a bb0e 	b.w	1db28 <bt_conn_unref>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   1350c:	4601      	mov	r1, r0
   1350e:	482f      	ldr	r0, [pc, #188]	; (135cc <bt_id_add+0x120>)
   13510:	f000 faac 	bl	13a6c <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries) {
   13514:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   13518:	b9b3      	cbnz	r3, 13548 <bt_id_add+0x9c>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
   1351a:	f894 2119 	ldrb.w	r2, [r4, #281]	; 0x119
   1351e:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
   13522:	429a      	cmp	r2, r3
   13524:	d11f      	bne.n	13566 <bt_id_add+0xba>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
   13526:	2200      	movs	r2, #0
   13528:	4611      	mov	r1, r2
   1352a:	f242 0029 	movw	r0, #8233	; 0x2029
   1352e:	f7ff fc45 	bl	12dbc <bt_hci_cmd_send_sync>
		if (err) {
   13532:	b970      	cbnz	r0, 13552 <bt_id_add+0xa6>
		bt_dev.le.rl_entries++;
   13534:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   13538:	3301      	adds	r3, #1
   1353a:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   1353e:	7a2b      	ldrb	r3, [r5, #8]
   13540:	f043 0304 	orr.w	r3, r3, #4
   13544:	722b      	strb	r3, [r5, #8]
		goto done;
   13546:	e004      	b.n	13552 <bt_id_add+0xa6>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   13548:	4630      	mov	r0, r6
   1354a:	f00a f887 	bl	1d65c <addr_res_enable>
		if (err) {
   1354e:	2800      	cmp	r0, #0
   13550:	d0e3      	beq.n	1351a <bt_id_add+0x6e>
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   13552:	2001      	movs	r0, #1
   13554:	f00a f882 	bl	1d65c <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   13558:	481d      	ldr	r0, [pc, #116]	; (135d0 <bt_id_add+0x124>)
   1355a:	2100      	movs	r1, #0
}
   1355c:	b003      	add	sp, #12
   1355e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   13562:	f000 ba83 	b.w	13a6c <bt_le_ext_adv_foreach>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
   13566:	1c6f      	adds	r7, r5, #1
   13568:	f105 012a 	add.w	r1, r5, #42	; 0x2a
   1356c:	4638      	mov	r0, r7
   1356e:	f00a f82f 	bl	1d5d0 <hci_id_add.constprop.0>
	if (err) {
   13572:	4606      	mov	r6, r0
   13574:	2800      	cmp	r0, #0
   13576:	d1ec      	bne.n	13552 <bt_id_add+0xa6>
	bt_dev.le.rl_entries++;
   13578:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   1357c:	3301      	adds	r3, #1
   1357e:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	keys->state |= BT_KEYS_ID_ADDED;
   13582:	7a2b      	ldrb	r3, [r5, #8]
   13584:	f043 0304 	orr.w	r3, r3, #4
   13588:	722b      	strb	r3, [r5, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
   1358a:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
   1358e:	075b      	lsls	r3, r3, #29
   13590:	d5df      	bpl.n	13552 <bt_id_add+0xa6>
	bt_addr_le_copy(&cp.id_addr, addr);
   13592:	4639      	mov	r1, r7
   13594:	4668      	mov	r0, sp
   13596:	f00a f812 	bl	1d5be <bt_addr_le_copy>
	cp.mode = mode;
   1359a:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   1359c:	2108      	movs	r1, #8
   1359e:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
   135a2:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   135a6:	f7ff fbad 	bl	12d04 <bt_hci_cmd_create>
	if (!buf) {
   135aa:	4604      	mov	r4, r0
   135ac:	2800      	cmp	r0, #0
   135ae:	d0d0      	beq.n	13552 <bt_id_add+0xa6>
   135b0:	2208      	movs	r2, #8
   135b2:	4669      	mov	r1, sp
   135b4:	4410      	add	r0, r2
   135b6:	f00c face 	bl	1fb56 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
   135ba:	4632      	mov	r2, r6
   135bc:	4621      	mov	r1, r4
   135be:	f242 004e 	movw	r0, #8270	; 0x204e
   135c2:	f7ff fbfb 	bl	12dbc <bt_hci_cmd_send_sync>
	if (err) {
   135c6:	e7c4      	b.n	13552 <bt_id_add+0xa6>
   135c8:	200002b8 	.word	0x200002b8
   135cc:	0001d68d 	.word	0x0001d68d
   135d0:	0001d633 	.word	0x0001d633

000135d4 <bt_id_del>:
{
   135d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!bt_dev.le.rl_size ||
   135d8:	4c3c      	ldr	r4, [pc, #240]	; (136cc <bt_id_del+0xf8>)
   135da:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   135de:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
{
   135e2:	4605      	mov	r5, r0
	if (!bt_dev.le.rl_size ||
   135e4:	b112      	cbz	r2, 135ec <bt_id_del+0x18>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   135e6:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
   135e8:	4293      	cmp	r3, r2
   135ea:	dd08      	ble.n	135fe <bt_id_del+0x2a>
		bt_dev.le.rl_entries--;
   135ec:	3b01      	subs	r3, #1
   135ee:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   135f2:	7a2b      	ldrb	r3, [r5, #8]
   135f4:	f023 0304 	bic.w	r3, r3, #4
   135f8:	722b      	strb	r3, [r5, #8]
}
   135fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
   135fe:	2100      	movs	r1, #0
   13600:	2206      	movs	r2, #6
   13602:	4608      	mov	r0, r1
   13604:	f001 f80c 	bl	14620 <bt_conn_lookup_state_le>
	if (conn) {
   13608:	4606      	mov	r6, r0
   1360a:	b1a0      	cbz	r0, 13636 <bt_id_del+0x62>
   1360c:	f3bf 8f5b 	dmb	ish
   13610:	34cc      	adds	r4, #204	; 0xcc
   13612:	e854 3f00 	ldrex	r3, [r4]
   13616:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   1361a:	e844 3200 	strex	r2, r3, [r4]
   1361e:	2a00      	cmp	r2, #0
   13620:	d1f7      	bne.n	13612 <bt_id_del+0x3e>
   13622:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
   13626:	7a2b      	ldrb	r3, [r5, #8]
   13628:	f043 0302 	orr.w	r3, r3, #2
   1362c:	722b      	strb	r3, [r5, #8]
}
   1362e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
   13632:	f00a ba79 	b.w	1db28 <bt_conn_unref>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   13636:	4601      	mov	r1, r0
   13638:	4825      	ldr	r0, [pc, #148]	; (136d0 <bt_id_del+0xfc>)
   1363a:	f000 fa17 	bl	13a6c <bt_le_ext_adv_foreach>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   1363e:	4630      	mov	r0, r6
   13640:	f00a f80c 	bl	1d65c <addr_res_enable>
	if (err) {
   13644:	4607      	mov	r7, r0
   13646:	b988      	cbnz	r0, 1366c <bt_id_del+0x98>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   13648:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   1364c:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
   13650:	429a      	cmp	r2, r3
   13652:	d217      	bcs.n	13684 <bt_id_del+0xb0>
		bt_dev.le.rl_entries--;
   13654:	3b01      	subs	r3, #1
   13656:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   1365a:	7a2b      	ldrb	r3, [r5, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   1365c:	491d      	ldr	r1, [pc, #116]	; (136d4 <bt_id_del+0x100>)
		keys->state &= ~BT_KEYS_ID_ADDED;
   1365e:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   13662:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
   13664:	722b      	strb	r3, [r5, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   13666:	2002      	movs	r0, #2
   13668:	f003 fd6e 	bl	17148 <bt_keys_foreach>
	if (bt_dev.le.rl_entries) {
   1366c:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   13670:	b113      	cbz	r3, 13678 <bt_id_del+0xa4>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   13672:	2001      	movs	r0, #1
   13674:	f009 fff2 	bl	1d65c <addr_res_enable>
}
   13678:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   1367c:	4816      	ldr	r0, [pc, #88]	; (136d8 <bt_id_del+0x104>)
   1367e:	2100      	movs	r1, #0
   13680:	f000 b9f4 	b.w	13a6c <bt_le_ext_adv_foreach>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
   13684:	2107      	movs	r1, #7
   13686:	f242 0028 	movw	r0, #8232	; 0x2028
   1368a:	f7ff fb3b 	bl	12d04 <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
   1368e:	f105 0801 	add.w	r8, r5, #1
	if (!buf) {
   13692:	4606      	mov	r6, r0
   13694:	2800      	cmp	r0, #0
   13696:	d0e9      	beq.n	1366c <bt_id_del+0x98>
	return net_buf_simple_add(&buf->b, len);
   13698:	2107      	movs	r1, #7
   1369a:	3008      	adds	r0, #8
   1369c:	f00c fa55 	bl	1fb4a <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   136a0:	4641      	mov	r1, r8
   136a2:	f009 ff8c 	bl	1d5be <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
   136a6:	463a      	mov	r2, r7
   136a8:	4631      	mov	r1, r6
   136aa:	f242 0028 	movw	r0, #8232	; 0x2028
   136ae:	f7ff fb85 	bl	12dbc <bt_hci_cmd_send_sync>
	if (err) {
   136b2:	2800      	cmp	r0, #0
   136b4:	d1da      	bne.n	1366c <bt_id_del+0x98>
	bt_dev.le.rl_entries--;
   136b6:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   136ba:	3b01      	subs	r3, #1
   136bc:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	keys->state &= ~BT_KEYS_ID_ADDED;
   136c0:	7a2b      	ldrb	r3, [r5, #8]
   136c2:	f023 0304 	bic.w	r3, r3, #4
   136c6:	722b      	strb	r3, [r5, #8]
   136c8:	e7d0      	b.n	1366c <bt_id_del+0x98>
   136ca:	bf00      	nop
   136cc:	200002b8 	.word	0x200002b8
   136d0:	0001d68d 	.word	0x0001d68d
   136d4:	0001d621 	.word	0x0001d621
   136d8:	0001d633 	.word	0x0001d633

000136dc <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   136dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   136de:	460c      	mov	r4, r1
	int new_id;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   136e0:	4605      	mov	r5, r0
   136e2:	b918      	cbnz	r0, 136ec <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   136e4:	b1f4      	cbz	r4, 13724 <bt_id_create+0x48>
		return -EINVAL;
   136e6:	f06f 0415 	mvn.w	r4, #21
   136ea:	e018      	b.n	1371e <bt_id_create+0x42>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   136ec:	2300      	movs	r3, #0
   136ee:	2207      	movs	r2, #7
   136f0:	4669      	mov	r1, sp
   136f2:	9300      	str	r3, [sp, #0]
   136f4:	f8cd 3003 	str.w	r3, [sp, #3]
   136f8:	f009 fac4 	bl	1cc84 <memcmp>
   136fc:	2800      	cmp	r0, #0
   136fe:	d0f1      	beq.n	136e4 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   13700:	782b      	ldrb	r3, [r5, #0]
   13702:	2b01      	cmp	r3, #1
   13704:	d1ef      	bne.n	136e6 <bt_id_create+0xa>
   13706:	79ab      	ldrb	r3, [r5, #6]
   13708:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1370c:	2bc0      	cmp	r3, #192	; 0xc0
   1370e:	d1ea      	bne.n	136e6 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   13710:	4628      	mov	r0, r5
   13712:	f7ff fe31 	bl	13378 <id_find>
   13716:	2800      	cmp	r0, #0
   13718:	dbe4      	blt.n	136e4 <bt_id_create+0x8>
			return -EALREADY;
   1371a:	f06f 0477 	mvn.w	r4, #119	; 0x77

	new_id = bt_dev.id_count++;
	id_create(new_id, addr, irk);

	return new_id;
}
   1371e:	4620      	mov	r0, r4
   13720:	b002      	add	sp, #8
   13722:	bd70      	pop	{r4, r5, r6, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   13724:	4e10      	ldr	r6, [pc, #64]	; (13768 <bt_id_create+0x8c>)
   13726:	79f3      	ldrb	r3, [r6, #7]
   13728:	2b01      	cmp	r3, #1
   1372a:	d019      	beq.n	13760 <bt_id_create+0x84>
   1372c:	f106 00cc 	add.w	r0, r6, #204	; 0xcc
   13730:	f009 ff48 	bl	1d5c4 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   13734:	07c3      	lsls	r3, r0, #31
   13736:	d40b      	bmi.n	13750 <bt_id_create+0x74>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   13738:	2d00      	cmp	r5, #0
   1373a:	d0d4      	beq.n	136e6 <bt_id_create+0xa>
   1373c:	2207      	movs	r2, #7
   1373e:	4669      	mov	r1, sp
   13740:	4628      	mov	r0, r5
   13742:	9400      	str	r4, [sp, #0]
   13744:	f8cd 4003 	str.w	r4, [sp, #3]
   13748:	f009 fa9c 	bl	1cc84 <memcmp>
   1374c:	2800      	cmp	r0, #0
   1374e:	d0ca      	beq.n	136e6 <bt_id_create+0xa>
	new_id = bt_dev.id_count++;
   13750:	79f4      	ldrb	r4, [r6, #7]
	id_create(new_id, addr, irk);
   13752:	4629      	mov	r1, r5
	new_id = bt_dev.id_count++;
   13754:	1c63      	adds	r3, r4, #1
	id_create(new_id, addr, irk);
   13756:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
   13758:	71f3      	strb	r3, [r6, #7]
	id_create(new_id, addr, irk);
   1375a:	f7ff fe55 	bl	13408 <id_create.constprop.0>
	return new_id;
   1375e:	e7de      	b.n	1371e <bt_id_create+0x42>
		return -ENOMEM;
   13760:	f06f 040b 	mvn.w	r4, #11
   13764:	e7db      	b.n	1371e <bt_id_create+0x42>
   13766:	bf00      	nop
   13768:	200002b8 	.word	0x200002b8

0001376c <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   1376c:	b570      	push	{r4, r5, r6, lr}
   1376e:	b086      	sub	sp, #24
   13770:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   13772:	aa01      	add	r2, sp, #4
   13774:	2100      	movs	r1, #0
   13776:	f241 0009 	movw	r0, #4105	; 0x1009
   1377a:	f7ff fb1f 	bl	12dbc <bt_hci_cmd_send_sync>
	if (err) {
   1377e:	4604      	mov	r4, r0
   13780:	b970      	cbnz	r0, 137a0 <bt_id_read_public_addr+0x34>
		BT_WARN("Failed to read public address");
		return 0U;
	}

	rp = (void *)rsp->data;
   13782:	9b01      	ldr	r3, [sp, #4]

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   13784:	9002      	str	r0, [sp, #8]
   13786:	689d      	ldr	r5, [r3, #8]
   13788:	f8ad 000c 	strh.w	r0, [sp, #12]
   1378c:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
   1378e:	2206      	movs	r2, #6
   13790:	a902      	add	r1, sp, #8
   13792:	4628      	mov	r0, r5
   13794:	f009 fa76 	bl	1cc84 <memcmp>
   13798:	b920      	cbnz	r0, 137a4 <bt_id_read_public_addr+0x38>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
   1379a:	9801      	ldr	r0, [sp, #4]
   1379c:	f003 fe8c 	bl	174b8 <net_buf_unref>
		return 0U;
   137a0:	2000      	movs	r0, #0
   137a2:	e016      	b.n	137d2 <bt_id_read_public_addr+0x66>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   137a4:	4b0c      	ldr	r3, [pc, #48]	; (137d8 <bt_id_read_public_addr+0x6c>)
   137a6:	6818      	ldr	r0, [r3, #0]
   137a8:	9004      	str	r0, [sp, #16]
   137aa:	889b      	ldrh	r3, [r3, #4]
   137ac:	f8ad 3014 	strh.w	r3, [sp, #20]
   137b0:	2206      	movs	r2, #6
   137b2:	a904      	add	r1, sp, #16
   137b4:	4628      	mov	r0, r5
   137b6:	f009 fa65 	bl	1cc84 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   137ba:	2800      	cmp	r0, #0
   137bc:	d0ed      	beq.n	1379a <bt_id_read_public_addr+0x2e>
	memcpy(dst, src, sizeof(*dst));
   137be:	2206      	movs	r2, #6
   137c0:	4629      	mov	r1, r5
   137c2:	1c70      	adds	r0, r6, #1
   137c4:	f009 fa6f 	bl	1cca6 <memcpy>
	}

	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
   137c8:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   137ca:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
   137cc:	f003 fe74 	bl	174b8 <net_buf_unref>
	return 1U;
   137d0:	2001      	movs	r0, #1
}
   137d2:	b006      	add	sp, #24
   137d4:	bd70      	pop	{r4, r5, r6, pc}
   137d6:	bf00      	nop
   137d8:	00020e6b 	.word	0x00020e6b

000137dc <bt_setup_public_id_addr>:

void bt_setup_public_id_addr(void)
{
   137dc:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   137de:	4668      	mov	r0, sp
   137e0:	f7ff ffc4 	bl	1376c <bt_id_read_public_addr>
   137e4:	4b04      	ldr	r3, [pc, #16]	; (137f8 <bt_setup_public_id_addr+0x1c>)
   137e6:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   137e8:	b118      	cbz	r0, 137f2 <bt_setup_public_id_addr+0x16>
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	id_create(BT_ID_DEFAULT, &addr, irk);
   137ea:	4669      	mov	r1, sp
   137ec:	2000      	movs	r0, #0
   137ee:	f7ff fe0b 	bl	13408 <id_create.constprop.0>
}
   137f2:	b003      	add	sp, #12
   137f4:	f85d fb04 	ldr.w	pc, [sp], #4
   137f8:	200002b8 	.word	0x200002b8

000137fc <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   137fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   13800:	4b15      	ldr	r3, [pc, #84]	; (13858 <bt_read_static_addr+0x5c>)
   13802:	f893 40ba 	ldrb.w	r4, [r3, #186]	; 0xba
   13806:	f014 0401 	ands.w	r4, r4, #1
{
   1380a:	4607      	mov	r7, r0
   1380c:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   1380e:	d015      	beq.n	1383c <bt_read_static_addr+0x40>
		BT_WARN("Read Static Addresses command not available");
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   13810:	aa01      	add	r2, sp, #4
   13812:	2100      	movs	r1, #0
   13814:	f64f 4009 	movw	r0, #64521	; 0xfc09
   13818:	f7ff fad0 	bl	12dbc <bt_hci_cmd_send_sync>
	if (err) {
   1381c:	4605      	mov	r5, r0
   1381e:	b9c8      	cbnz	r0, 13854 <bt_read_static_addr+0x58>
		BT_WARN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	rp = (void *)rsp->data;
   13820:	9b01      	ldr	r3, [sp, #4]
   13822:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   13824:	785c      	ldrb	r4, [r3, #1]
   13826:	42b4      	cmp	r4, r6
   13828:	bf28      	it	cs
   1382a:	4634      	movcs	r4, r6
		net_buf_unref(rsp);
		return 0;
	}

	for (i = 0; i < cnt; i++) {
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   1382c:	f04f 0816 	mov.w	r8, #22
   13830:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
   13832:	42a5      	cmp	r5, r4
   13834:	db06      	blt.n	13844 <bt_read_static_addr+0x48>
	}

	net_buf_unref(rsp);
   13836:	9801      	ldr	r0, [sp, #4]
   13838:	f003 fe3e 	bl	174b8 <net_buf_unref>
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
	}

	return cnt;
}
   1383c:	4620      	mov	r0, r4
   1383e:	b002      	add	sp, #8
   13840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   13844:	fb08 7005 	mla	r0, r8, r5, r7
   13848:	2216      	movs	r2, #22
   1384a:	4631      	mov	r1, r6
   1384c:	f009 fa2b 	bl	1cca6 <memcpy>
	for (i = 0; i < cnt; i++) {
   13850:	3501      	adds	r5, #1
   13852:	e7ee      	b.n	13832 <bt_read_static_addr+0x36>
		return 0;
   13854:	2400      	movs	r4, #0
   13856:	e7f1      	b.n	1383c <bt_read_static_addr+0x40>
   13858:	200002b8 	.word	0x200002b8

0001385c <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   1385c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   1385e:	4d15      	ldr	r5, [pc, #84]	; (138b4 <bt_setup_random_id_addr+0x58>)
   13860:	79ec      	ldrb	r4, [r5, #7]
{
   13862:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
   13864:	b9f4      	cbnz	r4, 138a4 <bt_setup_random_id_addr+0x48>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   13866:	2101      	movs	r1, #1
   13868:	a802      	add	r0, sp, #8
   1386a:	f7ff ffc7 	bl	137fc <bt_read_static_addr>
   1386e:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
   13870:	b1c0      	cbz	r0, 138a4 <bt_setup_random_id_addr+0x48>
					atomic_set_bit(bt_dev.flags,
						       BT_DEV_STORE_ID);
				}
#endif /* CONFIG_BT_PRIVACY */

				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   13872:	2716      	movs	r7, #22
   13874:	b2e6      	uxtb	r6, r4
   13876:	ab02      	add	r3, sp, #8
   13878:	2206      	movs	r2, #6
   1387a:	fb07 3106 	mla	r1, r7, r6, r3
   1387e:	f10d 0001 	add.w	r0, sp, #1
   13882:	f009 fa10 	bl	1cca6 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   13886:	2301      	movs	r3, #1

				id_create(i, &addr, irk);
   13888:	4669      	mov	r1, sp
   1388a:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
   1388c:	f88d 3000 	strb.w	r3, [sp]
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   13890:	3401      	adds	r4, #1
				id_create(i, &addr, irk);
   13892:	f7ff fdb9 	bl	13408 <id_create.constprop.0>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   13896:	79ea      	ldrb	r2, [r5, #7]
   13898:	b2e3      	uxtb	r3, r4
   1389a:	429a      	cmp	r2, r3
   1389c:	d8ea      	bhi.n	13874 <bt_setup_random_id_addr+0x18>
	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
}
   1389e:	2000      	movs	r0, #0
   138a0:	b009      	add	sp, #36	; 0x24
   138a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_id_create(NULL, NULL);
   138a4:	2100      	movs	r1, #0
   138a6:	4608      	mov	r0, r1
}
   138a8:	b009      	add	sp, #36	; 0x24
   138aa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
   138ae:	f7ff bf15 	b.w	136dc <bt_id_create>
   138b2:	bf00      	nop
   138b4:	200002b8 	.word	0x200002b8

000138b8 <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   138b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int err = 0;

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   138bc:	f011 0401 	ands.w	r4, r1, #1
	id_addr = &bt_dev.id_addr[adv->id];
   138c0:	7805      	ldrb	r5, [r0, #0]
{
   138c2:	460e      	mov	r6, r1
   138c4:	4690      	mov	r8, r2
   138c6:	461f      	mov	r7, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   138c8:	d026      	beq.n	13918 <bt_id_set_adv_own_addr+0x60>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   138ca:	4c23      	ldr	r4, [pc, #140]	; (13958 <bt_id_set_adv_own_addr+0xa0>)
   138cc:	b12a      	cbz	r2, 138da <bt_id_set_adv_own_addr+0x22>
   138ce:	0688      	lsls	r0, r1, #26
   138d0:	d503      	bpl.n	138da <bt_id_set_adv_own_addr+0x22>
   138d2:	f894 30d0 	ldrb.w	r3, [r4, #208]	; 0xd0
   138d6:	0659      	lsls	r1, r3, #25
   138d8:	d53a      	bpl.n	13950 <bt_id_set_adv_own_addr+0x98>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   138da:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
   138de:	ea4f 09c5 	mov.w	r9, r5, lsl #3
   138e2:	5ce3      	ldrb	r3, [r4, r3]
   138e4:	2b01      	cmp	r3, #1
   138e6:	d008      	beq.n	138fa <bt_id_set_adv_own_addr+0x42>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   138e8:	eba9 0505 	sub.w	r5, r9, r5
   138ec:	5d63      	ldrb	r3, [r4, r5]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   138ee:	f1b8 0f00 	cmp.w	r8, #0
   138f2:	d10c      	bne.n	1390e <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   138f4:	703b      	strb	r3, [r7, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   138f6:	2000      	movs	r0, #0
   138f8:	e007      	b.n	1390a <bt_id_set_adv_own_addr+0x52>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   138fa:	2007      	movs	r0, #7
   138fc:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
   13900:	4420      	add	r0, r4
   13902:	f7ff fd53 	bl	133ac <set_random_address>
				if (err) {
   13906:	2800      	cmp	r0, #0
   13908:	d0ee      	beq.n	138e8 <bt_id_set_adv_own_addr+0x30>
}
   1390a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   1390e:	06b2      	lsls	r2, r6, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   13910:	bf48      	it	mi
   13912:	f043 0302 	orrmi.w	r3, r3, #2
   13916:	e7ed      	b.n	138f4 <bt_id_set_adv_own_addr+0x3c>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   13918:	074b      	lsls	r3, r1, #29
   1391a:	d515      	bpl.n	13948 <bt_id_set_adv_own_addr+0x90>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   1391c:	f8df 8038 	ldr.w	r8, [pc, #56]	; 13958 <bt_id_set_adv_own_addr+0xa0>
   13920:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
   13924:	00ee      	lsls	r6, r5, #3
   13926:	f818 3003 	ldrb.w	r3, [r8, r3]
   1392a:	2b01      	cmp	r3, #1
   1392c:	d10a      	bne.n	13944 <bt_id_set_adv_own_addr+0x8c>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   1392e:	2007      	movs	r0, #7
   13930:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
   13934:	4440      	add	r0, r8
   13936:	f7ff fd39 	bl	133ac <set_random_address>
			*own_addr_type = id_addr->type;
   1393a:	1b75      	subs	r5, r6, r5
   1393c:	f818 3005 	ldrb.w	r3, [r8, r5]
			*own_addr_type = BT_ADDR_LE_RANDOM;
   13940:	703b      	strb	r3, [r7, #0]
		if (err) {
   13942:	e7e2      	b.n	1390a <bt_id_set_adv_own_addr+0x52>
	int err = 0;
   13944:	4620      	mov	r0, r4
   13946:	e7f8      	b.n	1393a <bt_id_set_adv_own_addr+0x82>
			err = bt_id_set_adv_private_addr(adv);
   13948:	f009 fec4 	bl	1d6d4 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   1394c:	2301      	movs	r3, #1
   1394e:	e7f7      	b.n	13940 <bt_id_set_adv_own_addr+0x88>
			return -ENOTSUP;
   13950:	f06f 0085 	mvn.w	r0, #133	; 0x85
   13954:	e7d9      	b.n	1390a <bt_id_set_adv_own_addr+0x52>
   13956:	bf00      	nop
   13958:	200002b8 	.word	0x200002b8

0001395c <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   1395c:	6843      	ldr	r3, [r0, #4]
{
   1395e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   13960:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   13962:	0558      	lsls	r0, r3, #21
   13964:	d502      	bpl.n	1396c <valid_adv_param+0x10>
		return false;
   13966:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
   13968:	b003      	add	sp, #12
   1396a:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   1396c:	6922      	ldr	r2, [r4, #16]
   1396e:	b10a      	cbz	r2, 13974 <valid_adv_param+0x18>
   13970:	07d9      	lsls	r1, r3, #31
   13972:	d5f8      	bpl.n	13966 <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   13974:	4d1a      	ldr	r5, [pc, #104]	; (139e0 <valid_adv_param+0x84>)
   13976:	7820      	ldrb	r0, [r4, #0]
   13978:	79eb      	ldrb	r3, [r5, #7]
   1397a:	4283      	cmp	r3, r0
   1397c:	d9f3      	bls.n	13966 <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   1397e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   13982:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   13984:	2207      	movs	r2, #7
   13986:	4669      	mov	r1, sp
   13988:	4428      	add	r0, r5
   1398a:	9300      	str	r3, [sp, #0]
   1398c:	f8cd 3003 	str.w	r3, [sp, #3]
   13990:	f009 f978 	bl	1cc84 <memcmp>
	if (param->id >= bt_dev.id_count ||
   13994:	2800      	cmp	r0, #0
   13996:	d0e6      	beq.n	13966 <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   13998:	6860      	ldr	r0, [r4, #4]
   1399a:	07c2      	lsls	r2, r0, #31
   1399c:	d406      	bmi.n	139ac <valid_adv_param+0x50>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   1399e:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
   139a2:	2b08      	cmp	r3, #8
   139a4:	d802      	bhi.n	139ac <valid_adv_param+0x50>
   139a6:	68a3      	ldr	r3, [r4, #8]
   139a8:	2b9f      	cmp	r3, #159	; 0x9f
   139aa:	d9dc      	bls.n	13966 <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   139ac:	f010 0f30 	tst.w	r0, #48	; 0x30
   139b0:	d002      	beq.n	139b8 <valid_adv_param+0x5c>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   139b2:	6923      	ldr	r3, [r4, #16]
   139b4:	2b00      	cmp	r3, #0
   139b6:	d0d6      	beq.n	13966 <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   139b8:	06c3      	lsls	r3, r0, #27
   139ba:	d401      	bmi.n	139c0 <valid_adv_param+0x64>
   139bc:	6923      	ldr	r3, [r4, #16]
   139be:	b943      	cbnz	r3, 139d2 <valid_adv_param+0x76>
		if (param->interval_min > param->interval_max ||
   139c0:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   139c4:	429a      	cmp	r2, r3
   139c6:	d8ce      	bhi.n	13966 <valid_adv_param+0xa>
   139c8:	2a1f      	cmp	r2, #31
   139ca:	d9cc      	bls.n	13966 <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   139cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   139d0:	d8c9      	bhi.n	13966 <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   139d2:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   139d6:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   139da:	bf18      	it	ne
   139dc:	2001      	movne	r0, #1
   139de:	e7c3      	b.n	13968 <valid_adv_param+0xc>
   139e0:	200002b8 	.word	0x200002b8

000139e4 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   139e4:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   139e6:	4606      	mov	r6, r0
   139e8:	4b1e      	ldr	r3, [pc, #120]	; (13a64 <le_adv_start_add_conn+0x80>)
   139ea:	f816 2b09 	ldrb.w	r2, [r6], #9
   139ee:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
   139f2:	b085      	sub	sp, #20

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   139f4:	2300      	movs	r3, #0
{
   139f6:	4605      	mov	r5, r0
   139f8:	2207      	movs	r2, #7
   139fa:	460f      	mov	r7, r1
   139fc:	4630      	mov	r0, r6
   139fe:	4669      	mov	r1, sp
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   13a00:	9300      	str	r3, [sp, #0]
   13a02:	f8cd 3003 	str.w	r3, [sp, #3]
   13a06:	f009 f93d 	bl	1cc84 <memcmp>
   13a0a:	782a      	ldrb	r2, [r5, #0]
   13a0c:	4604      	mov	r4, r0
   13a0e:	b9a8      	cbnz	r0, 13a3c <le_adv_start_add_conn+0x58>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   13a10:	4b15      	ldr	r3, [pc, #84]	; (13a68 <le_adv_start_add_conn+0x84>)
   13a12:	6818      	ldr	r0, [r3, #0]
   13a14:	8899      	ldrh	r1, [r3, #4]
   13a16:	9002      	str	r0, [sp, #8]
   13a18:	799b      	ldrb	r3, [r3, #6]
   13a1a:	f8ad 100c 	strh.w	r1, [sp, #12]
   13a1e:	4610      	mov	r0, r2
   13a20:	a902      	add	r1, sp, #8
   13a22:	f88d 300e 	strb.w	r3, [sp, #14]
   13a26:	f000 fdc1 	bl	145ac <bt_conn_add_le>
		if (!conn) {
   13a2a:	4605      	mov	r5, r0
   13a2c:	b1b8      	cbz	r0, 13a5e <le_adv_start_add_conn+0x7a>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
   13a2e:	2104      	movs	r1, #4
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
	if (!conn) {
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
   13a30:	f000 fc7e 	bl	14330 <bt_conn_set_state>
	*out_conn = conn;
   13a34:	603d      	str	r5, [r7, #0]
	return 0;
}
   13a36:	4620      	mov	r0, r4
   13a38:	b005      	add	sp, #20
   13a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   13a3c:	4631      	mov	r1, r6
   13a3e:	4610      	mov	r0, r2
   13a40:	f00a f92d 	bl	1dc9e <bt_conn_exists_le>
   13a44:	4604      	mov	r4, r0
   13a46:	b938      	cbnz	r0, 13a58 <le_adv_start_add_conn+0x74>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   13a48:	7828      	ldrb	r0, [r5, #0]
   13a4a:	4631      	mov	r1, r6
   13a4c:	f000 fdae 	bl	145ac <bt_conn_add_le>
	if (!conn) {
   13a50:	4605      	mov	r5, r0
   13a52:	b120      	cbz	r0, 13a5e <le_adv_start_add_conn+0x7a>
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
   13a54:	2105      	movs	r1, #5
   13a56:	e7eb      	b.n	13a30 <le_adv_start_add_conn+0x4c>
		return -EINVAL;
   13a58:	f06f 0415 	mvn.w	r4, #21
   13a5c:	e7eb      	b.n	13a36 <le_adv_start_add_conn+0x52>
		return -ENOMEM;
   13a5e:	f06f 040b 	mvn.w	r4, #11
   13a62:	e7e8      	b.n	13a36 <le_adv_start_add_conn+0x52>
   13a64:	200002b8 	.word	0x200002b8
   13a68:	00020e71 	.word	0x00020e71

00013a6c <bt_le_ext_adv_foreach>:
{
   13a6c:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
   13a6e:	4801      	ldr	r0, [pc, #4]	; (13a74 <bt_le_ext_adv_foreach+0x8>)
   13a70:	4718      	bx	r3
   13a72:	bf00      	nop
   13a74:	200002d0 	.word	0x200002d0

00013a78 <bt_le_adv_lookup_legacy>:
}
   13a78:	4800      	ldr	r0, [pc, #0]	; (13a7c <bt_le_adv_lookup_legacy+0x4>)
   13a7a:	4770      	bx	lr
   13a7c:	200002d0 	.word	0x200002d0

00013a80 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   13a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable;
   13a84:	690e      	ldr	r6, [r1, #16]
{
   13a86:	b08f      	sub	sp, #60	; 0x3c
   13a88:	469a      	mov	sl, r3
	struct bt_conn *conn = NULL;
   13a8a:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable;
   13a8c:	ebb6 0b03 	subs.w	fp, r6, r3
{
   13a90:	4605      	mov	r5, r0
   13a92:	4889      	ldr	r0, [pc, #548]	; (13cb8 <bt_le_adv_start_legacy+0x238>)
	struct bt_conn *conn = NULL;
   13a94:	9307      	str	r3, [sp, #28]
	bool dir_adv = (param->peer != NULL), scannable;
   13a96:	bf18      	it	ne
   13a98:	f04f 0b01 	movne.w	fp, #1
   13a9c:	f009 fe4f 	bl	1d73e <atomic_get>
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   13aa0:	0787      	lsls	r7, r0, #30
{
   13aa2:	460c      	mov	r4, r1
   13aa4:	4691      	mov	r9, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   13aa6:	f140 80fc 	bpl.w	13ca2 <bt_le_adv_start_legacy+0x222>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   13aaa:	4608      	mov	r0, r1
   13aac:	f7ff ff56 	bl	1395c <valid_adv_param>
   13ab0:	b928      	cbnz	r0, 13abe <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
   13ab2:	f06f 0b15 	mvn.w	fp, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   13ab6:	4658      	mov	r0, fp
   13ab8:	b00f      	add	sp, #60	; 0x3c
   13aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
   13abe:	4620      	mov	r0, r4
   13ac0:	f009 fe1a 	bl	1d6f8 <bt_id_adv_random_addr_check>
   13ac4:	4680      	mov	r8, r0
   13ac6:	2800      	cmp	r0, #0
   13ac8:	d0f3      	beq.n	13ab2 <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   13aca:	f105 0710 	add.w	r7, r5, #16
   13ace:	4638      	mov	r0, r7
   13ad0:	f009 fe35 	bl	1d73e <atomic_get>
   13ad4:	f3c0 1180 	ubfx	r1, r0, #6, #1
   13ad8:	0640      	lsls	r0, r0, #25
   13ada:	f100 80e5 	bmi.w	13ca8 <bt_le_adv_start_legacy+0x228>
	(void)memset(&set_param, 0, sizeof(set_param));
   13ade:	220f      	movs	r2, #15
   13ae0:	a80a      	add	r0, sp, #40	; 0x28
   13ae2:	9105      	str	r1, [sp, #20]
   13ae4:	f009 f8ea 	bl	1ccbc <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   13ae8:	68a3      	ldr	r3, [r4, #8]
   13aea:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	set_param.channel_map  = get_adv_channel_map(param->options);
   13aee:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   13af0:	68e3      	ldr	r3, [r4, #12]
   13af2:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	set_param.channel_map  = get_adv_channel_map(param->options);
   13af6:	f009 fe13 	bl	1d720 <get_adv_channel_map>
	if (adv->id != param->id) {
   13afa:	782a      	ldrb	r2, [r5, #0]
   13afc:	7823      	ldrb	r3, [r4, #0]
	set_param.filter_policy = get_filter_policy(param->options);
   13afe:	9905      	ldr	r1, [sp, #20]
	set_param.channel_map  = get_adv_channel_map(param->options);
   13b00:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
	if (adv->id != param->id) {
   13b04:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
   13b06:	f88d 1036 	strb.w	r1, [sp, #54]	; 0x36
	if (adv->id != param->id) {
   13b0a:	d004      	beq.n	13b16 <bt_le_adv_start_legacy+0x96>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13b0c:	486a      	ldr	r0, [pc, #424]	; (13cb8 <bt_le_adv_start_legacy+0x238>)
   13b0e:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   13b12:	f009 fe1a 	bl	1d74a <atomic_and>
	bt_dev.adv_conn_id = adv->id;
   13b16:	4a69      	ldr	r2, [pc, #420]	; (13cbc <bt_le_adv_start_legacy+0x23c>)
	adv->id = param->id;
   13b18:	7823      	ldrb	r3, [r4, #0]
   13b1a:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
   13b1c:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   13b20:	6861      	ldr	r1, [r4, #4]
   13b22:	465a      	mov	r2, fp
   13b24:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
   13b28:	4628      	mov	r0, r5
   13b2a:	f7ff fec5 	bl	138b8 <bt_id_set_adv_own_addr>
	if (err) {
   13b2e:	4683      	mov	fp, r0
   13b30:	2800      	cmp	r0, #0
   13b32:	d1c0      	bne.n	13ab6 <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   13b34:	f105 0009 	add.w	r0, r5, #9
	if (dir_adv) {
   13b38:	2e00      	cmp	r6, #0
   13b3a:	d042      	beq.n	13bc2 <bt_le_adv_start_legacy+0x142>
	memcpy(dst, src, sizeof(*dst));
   13b3c:	6921      	ldr	r1, [r4, #16]
   13b3e:	2207      	movs	r2, #7
   13b40:	f009 f8b1 	bl	1cca6 <memcpy>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   13b44:	6860      	ldr	r0, [r4, #4]
   13b46:	07c1      	lsls	r1, r0, #31
   13b48:	d544      	bpl.n	13bd4 <bt_le_adv_start_legacy+0x154>
		if (dir_adv) {
   13b4a:	2e00      	cmp	r6, #0
   13b4c:	d03f      	beq.n	13bce <bt_le_adv_start_legacy+0x14e>
				set_param.type = BT_HCI_ADV_DIRECT_IND;
   13b4e:	f010 0f10 	tst.w	r0, #16
   13b52:	bf14      	ite	ne
   13b54:	2304      	movne	r3, #4
   13b56:	2301      	moveq	r3, #1
   13b58:	6921      	ldr	r1, [r4, #16]
   13b5a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   13b5e:	2207      	movs	r2, #7
   13b60:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   13b64:	f009 f89f 	bl	1cca6 <memcpy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   13b68:	210f      	movs	r1, #15
   13b6a:	f242 0006 	movw	r0, #8198	; 0x2006
   13b6e:	f7ff f8c9 	bl	12d04 <bt_hci_cmd_create>
	if (!buf) {
   13b72:	4683      	mov	fp, r0
   13b74:	2800      	cmp	r0, #0
   13b76:	f000 809a 	beq.w	13cae <bt_le_adv_start_legacy+0x22e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   13b7a:	220f      	movs	r2, #15
   13b7c:	a90a      	add	r1, sp, #40	; 0x28
   13b7e:	3008      	adds	r0, #8
   13b80:	f00b ffe9 	bl	1fb56 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   13b84:	2200      	movs	r2, #0
   13b86:	4659      	mov	r1, fp
   13b88:	f242 0006 	movw	r0, #8198	; 0x2006
   13b8c:	f7ff f916 	bl	12dbc <bt_hci_cmd_send_sync>
	if (err) {
   13b90:	2800      	cmp	r0, #0
   13b92:	f040 808f 	bne.w	13cb4 <bt_le_adv_start_legacy+0x234>
	if (!dir_adv) {
   13b96:	b34e      	cbz	r6, 13bec <bt_le_adv_start_legacy+0x16c>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   13b98:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   13b9a:	07da      	lsls	r2, r3, #31
   13b9c:	d43a      	bmi.n	13c14 <bt_le_adv_start_legacy+0x194>
	return bt_le_adv_set_enable_legacy(adv, enable);
   13b9e:	2101      	movs	r1, #1
   13ba0:	4628      	mov	r0, r5
   13ba2:	f009 feda 	bl	1d95a <bt_le_adv_set_enable_legacy>
	if (err) {
   13ba6:	4683      	mov	fp, r0
   13ba8:	9807      	ldr	r0, [sp, #28]
   13baa:	f1bb 0f00 	cmp.w	fp, #0
   13bae:	d072      	beq.n	13c96 <bt_le_adv_start_legacy+0x216>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   13bb0:	2800      	cmp	r0, #0
   13bb2:	d080      	beq.n	13ab6 <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   13bb4:	2100      	movs	r1, #0
   13bb6:	f000 fbbb 	bl	14330 <bt_conn_set_state>
			bt_conn_unref(conn);
   13bba:	9807      	ldr	r0, [sp, #28]
   13bbc:	f009 ffb4 	bl	1db28 <bt_conn_unref>
   13bc0:	e779      	b.n	13ab6 <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   13bc2:	9608      	str	r6, [sp, #32]
   13bc4:	2207      	movs	r2, #7
   13bc6:	f8cd 6023 	str.w	r6, [sp, #35]	; 0x23
   13bca:	a908      	add	r1, sp, #32
   13bcc:	e7b8      	b.n	13b40 <bt_le_adv_start_legacy+0xc0>
			set_param.type = BT_HCI_ADV_IND;
   13bce:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
   13bd2:	e7c9      	b.n	13b68 <bt_le_adv_start_legacy+0xe8>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
   13bd4:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13bd6:	b933      	cbnz	r3, 13be6 <bt_le_adv_start_legacy+0x166>
   13bd8:	f3c0 08c0 	ubfx	r8, r0, #3, #1
		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
   13bdc:	f1c8 0303 	rsb	r3, r8, #3
   13be0:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   13be4:	e7c0      	b.n	13b68 <bt_le_adv_start_legacy+0xe8>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
   13be6:	f04f 0801 	mov.w	r8, #1
   13bea:	e7f7      	b.n	13bdc <bt_le_adv_start_legacy+0x15c>
				    param->options & BT_LE_ADV_OPT_USE_NAME,
   13bec:	6863      	ldr	r3, [r4, #4]
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   13bee:	f3c3 4280 	ubfx	r2, r3, #18, #1
   13bf2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   13bf6:	e9cd 8301 	strd	r8, r3, [sp, #4]
   13bfa:	9b19      	ldr	r3, [sp, #100]	; 0x64
   13bfc:	9203      	str	r2, [sp, #12]
   13bfe:	9300      	str	r3, [sp, #0]
   13c00:	4652      	mov	r2, sl
   13c02:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13c04:	4649      	mov	r1, r9
   13c06:	4628      	mov	r0, r5
   13c08:	f009 fe26 	bl	1d858 <le_adv_update.constprop.0>
		if (err) {
   13c0c:	4683      	mov	fp, r0
   13c0e:	2800      	cmp	r0, #0
   13c10:	d0c2      	beq.n	13b98 <bt_le_adv_start_legacy+0x118>
   13c12:	e750      	b.n	13ab6 <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
   13c14:	a907      	add	r1, sp, #28
   13c16:	4628      	mov	r0, r5
   13c18:	f7ff fee4 	bl	139e4 <le_adv_start_add_conn>
		if (err) {
   13c1c:	4683      	mov	fp, r0
   13c1e:	2800      	cmp	r0, #0
   13c20:	d0bd      	beq.n	13b9e <bt_le_adv_start_legacy+0x11e>
			if (err == -ENOMEM && !dir_adv &&
   13c22:	f110 0f0c 	cmn.w	r0, #12
   13c26:	f47f af46 	bne.w	13ab6 <bt_le_adv_start_legacy+0x36>
   13c2a:	2e00      	cmp	r6, #0
   13c2c:	f47f af43 	bne.w	13ab6 <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   13c30:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
   13c32:	079b      	lsls	r3, r3, #30
   13c34:	f53f af3f 	bmi.w	13ab6 <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   13c38:	6860      	ldr	r0, [r4, #4]
   13c3a:	f080 0002 	eor.w	r0, r0, #2
   13c3e:	f3c0 0b40 	ubfx	fp, r0, #1, #1
   13c42:	f00b 0201 	and.w	r2, fp, #1
   13c46:	210c      	movs	r1, #12
   13c48:	4638      	mov	r0, r7
   13c4a:	f009 fdee 	bl	1d82a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME,
   13c4e:	6862      	ldr	r2, [r4, #4]
   13c50:	2107      	movs	r1, #7
   13c52:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   13c56:	4638      	mov	r0, r7
   13c58:	f009 fde7 	bl	1d82a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_FORCE_NAME_IN_AD,
   13c5c:	6862      	ldr	r2, [r4, #4]
   13c5e:	2112      	movs	r1, #18
   13c60:	f3c2 4280 	ubfx	r2, r2, #18, #1
   13c64:	4638      	mov	r0, r7
   13c66:	f009 fde0 	bl	1d82a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   13c6a:	6862      	ldr	r2, [r4, #4]
   13c6c:	2108      	movs	r1, #8
   13c6e:	f002 0201 	and.w	r2, r2, #1
   13c72:	4638      	mov	r0, r7
   13c74:	f009 fdd9 	bl	1d82a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   13c78:	4642      	mov	r2, r8
   13c7a:	2109      	movs	r1, #9
   13c7c:	4638      	mov	r0, r7
   13c7e:	f009 fdd4 	bl	1d82a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   13c82:	6862      	ldr	r2, [r4, #4]
   13c84:	210b      	movs	r1, #11
   13c86:	f3c2 0280 	ubfx	r2, r2, #2, #1
   13c8a:	4638      	mov	r0, r7
   13c8c:	f009 fdcd 	bl	1d82a <atomic_set_bit_to>
	return 0;
   13c90:	f04f 0b00 	mov.w	fp, #0
   13c94:	e70f      	b.n	13ab6 <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   13c96:	b108      	cbz	r0, 13c9c <bt_le_adv_start_legacy+0x21c>
		bt_conn_unref(conn);
   13c98:	f009 ff46 	bl	1db28 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   13c9c:	2e00      	cmp	r6, #0
   13c9e:	d1d0      	bne.n	13c42 <bt_le_adv_start_legacy+0x1c2>
   13ca0:	e7ca      	b.n	13c38 <bt_le_adv_start_legacy+0x1b8>
		return -EAGAIN;
   13ca2:	f06f 0b0a 	mvn.w	fp, #10
   13ca6:	e706      	b.n	13ab6 <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
   13ca8:	f06f 0b77 	mvn.w	fp, #119	; 0x77
   13cac:	e703      	b.n	13ab6 <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
   13cae:	f06f 0b68 	mvn.w	fp, #104	; 0x68
   13cb2:	e700      	b.n	13ab6 <bt_le_adv_start_legacy+0x36>
   13cb4:	4683      	mov	fp, r0
   13cb6:	e6fe      	b.n	13ab6 <bt_le_adv_start_legacy+0x36>
   13cb8:	20000384 	.word	0x20000384
   13cbc:	200002b8 	.word	0x200002b8

00013cc0 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   13cc0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   13cc2:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   13cc4:	9a06      	ldr	r2, [sp, #24]
{
   13cc6:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   13cc8:	e9cd 3200 	strd	r3, r2, [sp]
   13ccc:	462b      	mov	r3, r5
   13cce:	460a      	mov	r2, r1
   13cd0:	4601      	mov	r1, r0
   13cd2:	4811      	ldr	r0, [pc, #68]	; (13d18 <bt_le_adv_start+0x58>)
   13cd4:	f7ff fed4 	bl	13a80 <bt_le_adv_start_legacy>
   13cd8:	4621      	mov	r1, r4
   13cda:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
   13cdc:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
   13cde:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
   13ce2:	429d      	cmp	r5, r3
   13ce4:	d102      	bne.n	13cec <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   13ce6:	4630      	mov	r0, r6
   13ce8:	b002      	add	sp, #8
   13cea:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
   13cec:	880a      	ldrh	r2, [r1, #0]
   13cee:	4282      	cmp	r2, r0
   13cf0:	d104      	bne.n	13cfc <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
   13cf2:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   13cf4:	b112      	cbz	r2, 13cfc <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   13cf6:	7812      	ldrb	r2, [r2, #0]
   13cf8:	07d2      	lsls	r2, r2, #31
   13cfa:	d402      	bmi.n	13d02 <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
   13cfc:	3301      	adds	r3, #1
   13cfe:	3108      	adds	r1, #8
   13d00:	e7ef      	b.n	13ce2 <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   13d02:	4906      	ldr	r1, [pc, #24]	; (13d1c <bt_le_adv_start+0x5c>)
   13d04:	4806      	ldr	r0, [pc, #24]	; (13d20 <bt_le_adv_start+0x60>)
   13d06:	f00c fbd1 	bl	204ac <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   13d0a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   13d0e:	2300      	movs	r3, #0
   13d10:	4803      	ldr	r0, [pc, #12]	; (13d20 <bt_le_adv_start+0x60>)
   13d12:	f005 ff37 	bl	19b84 <k_work_reschedule>
   13d16:	e7e6      	b.n	13ce6 <bt_le_adv_start+0x26>
   13d18:	200002d0 	.word	0x200002d0
   13d1c:	0001d9af 	.word	0x0001d9af
   13d20:	200002e8 	.word	0x200002e8

00013d24 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   13d24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
	int err;

	(void)bt_le_lim_adv_cancel_timeout(adv);
   13d26:	4822      	ldr	r0, [pc, #136]	; (13db0 <bt_le_adv_stop+0x8c>)
   13d28:	f009 fe3e 	bl	1d9a8 <bt_le_lim_adv_cancel_timeout>
   13d2c:	4821      	ldr	r0, [pc, #132]	; (13db4 <bt_le_adv_stop+0x90>)
   13d2e:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   13d32:	f009 fd0a 	bl	1d74a <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   13d36:	481f      	ldr	r0, [pc, #124]	; (13db4 <bt_le_adv_stop+0x90>)
   13d38:	f009 fd01 	bl	1d73e <atomic_get>
   13d3c:	4603      	mov	r3, r0
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   13d3e:	065a      	lsls	r2, r3, #25
   13d40:	f3c0 1080 	ubfx	r0, r0, #6, #1
   13d44:	d531      	bpl.n	13daa <bt_le_adv_stop+0x86>
   13d46:	481b      	ldr	r0, [pc, #108]	; (13db4 <bt_le_adv_stop+0x90>)
   13d48:	f009 fcf9 	bl	1d73e <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   13d4c:	05c3      	lsls	r3, r0, #23
   13d4e:	d521      	bpl.n	13d94 <bt_le_adv_stop+0x70>
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   13d50:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   13d52:	4819      	ldr	r0, [pc, #100]	; (13db8 <bt_le_adv_stop+0x94>)
   13d54:	9300      	str	r3, [sp, #0]
   13d56:	2207      	movs	r2, #7
   13d58:	4669      	mov	r1, sp
   13d5a:	f8cd 3003 	str.w	r3, [sp, #3]
   13d5e:	f008 ff91 	bl	1cc84 <memcmp>
   13d62:	4b16      	ldr	r3, [pc, #88]	; (13dbc <bt_le_adv_stop+0x98>)
   13d64:	b9e8      	cbnz	r0, 13da2 <bt_le_adv_stop+0x7e>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   13d66:	4a16      	ldr	r2, [pc, #88]	; (13dc0 <bt_le_adv_stop+0x9c>)
   13d68:	8891      	ldrh	r1, [r2, #4]
   13d6a:	6810      	ldr	r0, [r2, #0]
   13d6c:	7992      	ldrb	r2, [r2, #6]
   13d6e:	f8ad 100c 	strh.w	r1, [sp, #12]
   13d72:	f88d 200e 	strb.w	r2, [sp, #14]
   13d76:	9002      	str	r0, [sp, #8]
   13d78:	2204      	movs	r2, #4
   13d7a:	a902      	add	r1, sp, #8
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   13d7c:	7e18      	ldrb	r0, [r3, #24]
   13d7e:	f000 fc4f 	bl	14620 <bt_conn_lookup_state_le>
   13d82:	4604      	mov	r4, r0
	if (conn) {
   13d84:	b130      	cbz	r0, 13d94 <bt_le_adv_stop+0x70>
		conn->err = status;
   13d86:	2100      	movs	r1, #0
   13d88:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   13d8a:	f000 fad1 	bl	14330 <bt_conn_set_state>
		bt_conn_unref(conn);
   13d8e:	4620      	mov	r0, r4
   13d90:	f009 feca 	bl	1db28 <bt_conn_unref>
		err = bt_le_adv_set_enable_ext(adv, false, NULL);
		if (err) {
			return err;
		}
	} else {
		err = bt_le_adv_set_enable_legacy(adv, false);
   13d94:	4806      	ldr	r0, [pc, #24]	; (13db0 <bt_le_adv_stop+0x8c>)
   13d96:	2100      	movs	r1, #0
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   13d98:	b004      	add	sp, #16
   13d9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = bt_le_adv_set_enable_legacy(adv, false);
   13d9e:	f009 bddc 	b.w	1d95a <bt_le_adv_set_enable_legacy>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   13da2:	2205      	movs	r2, #5
   13da4:	f103 0121 	add.w	r1, r3, #33	; 0x21
   13da8:	e7e8      	b.n	13d7c <bt_le_adv_stop+0x58>
}
   13daa:	b004      	add	sp, #16
   13dac:	bd10      	pop	{r4, pc}
   13dae:	bf00      	nop
   13db0:	200002d0 	.word	0x200002d0
   13db4:	200002e0 	.word	0x200002e0
   13db8:	200002d9 	.word	0x200002d9
   13dbc:	200002b8 	.word	0x200002b8
   13dc0:	00020e71 	.word	0x00020e71

00013dc4 <bt_le_adv_resume>:

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
   13dc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   13dc6:	481e      	ldr	r0, [pc, #120]	; (13e40 <bt_le_adv_resume+0x7c>)
   13dc8:	4c1d      	ldr	r4, [pc, #116]	; (13e40 <bt_le_adv_resume+0x7c>)
   13dca:	f009 fcb8 	bl	1d73e <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   13dce:	f410 5f80 	tst.w	r0, #4096	; 0x1000
   13dd2:	d032      	beq.n	13e3a <bt_le_adv_resume+0x76>
   13dd4:	4620      	mov	r0, r4
   13dd6:	f009 fcb2 	bl	1d73e <atomic_get>
   13dda:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   13ddc:	f3c0 1580 	ubfx	r5, r0, #6, #1
   13de0:	d42b      	bmi.n	13e3a <bt_le_adv_resume+0x76>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   13de2:	4620      	mov	r0, r4
   13de4:	f009 fcab 	bl	1d73e <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   13de8:	05c3      	lsls	r3, r0, #23
   13dea:	d526      	bpl.n	13e3a <bt_le_adv_resume+0x76>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
   13dec:	a901      	add	r1, sp, #4
   13dee:	f1a4 0010 	sub.w	r0, r4, #16
   13df2:	f7ff fdf7 	bl	139e4 <le_adv_start_add_conn>
	if (err) {
   13df6:	bb00      	cbnz	r0, 13e3a <bt_le_adv_resume+0x76>
	return bt_le_adv_set_enable_legacy(adv, enable);
   13df8:	2101      	movs	r1, #1
   13dfa:	f1a4 0010 	sub.w	r0, r4, #16
   13dfe:	f009 fdac 	bl	1d95a <bt_le_adv_set_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		bt_id_set_adv_private_addr(adv);
	}

	err = bt_le_adv_set_enable(adv, true);
	if (err) {
   13e02:	b150      	cbz	r0, 13e1a <bt_le_adv_resume+0x56>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   13e04:	4629      	mov	r1, r5
   13e06:	9801      	ldr	r0, [sp, #4]
   13e08:	f000 fa92 	bl	14330 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13e0c:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   13e10:	4620      	mov	r0, r4
   13e12:	f009 fc9a 	bl	1d74a <atomic_and>
	return (old & mask) != 0;
   13e16:	f3c0 3500 	ubfx	r5, r0, #12, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
   13e1a:	9801      	ldr	r0, [sp, #4]
   13e1c:	f009 fe84 	bl	1db28 <bt_conn_unref>
	if (persist_paused) {
   13e20:	b15d      	cbz	r5, 13e3a <bt_le_adv_resume+0x76>
   13e22:	f3bf 8f5b 	dmb	ish
   13e26:	e854 3f00 	ldrex	r3, [r4]
   13e2a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   13e2e:	e844 3200 	strex	r2, r3, [r4]
   13e32:	2a00      	cmp	r2, #0
   13e34:	d1f7      	bne.n	13e26 <bt_le_adv_resume+0x62>
   13e36:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
   13e3a:	b003      	add	sp, #12
   13e3c:	bd30      	pop	{r4, r5, pc}
   13e3e:	bf00      	nop
   13e40:	200002e0 	.word	0x200002e0

00013e44 <bt_pub_key_is_debug>:
	0x5c, 0x15, 0x52, 0x5a, 0xbf, 0x9a, 0x32, 0x63,
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
   13e44:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   13e46:	4904      	ldr	r1, [pc, #16]	; (13e58 <bt_pub_key_is_debug+0x14>)
   13e48:	2240      	movs	r2, #64	; 0x40
   13e4a:	f008 ff1b 	bl	1cc84 <memcmp>
}
   13e4e:	fab0 f080 	clz	r0, r0
   13e52:	0940      	lsrs	r0, r0, #5
   13e54:	bd08      	pop	{r3, pc}
   13e56:	bf00      	nop
   13e58:	00021c69 	.word	0x00021c69

00013e5c <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   13e5c:	b570      	push	{r4, r5, r6, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   13e5e:	4b35      	ldr	r3, [pc, #212]	; (13f34 <bt_pub_key_gen+0xd8>)
   13e60:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   13e64:	f003 0306 	and.w	r3, r3, #6
   13e68:	2b06      	cmp	r3, #6
   13e6a:	d159      	bne.n	13f20 <bt_pub_key_gen+0xc4>
			new_cb->func(debug_public_key);
			return 0;
		}
	}

	if (!new_cb) {
   13e6c:	2800      	cmp	r0, #0
   13e6e:	d05a      	beq.n	13f26 <bt_pub_key_gen+0xca>
	return list->head;
   13e70:	4e31      	ldr	r6, [pc, #196]	; (13f38 <bt_pub_key_gen+0xdc>)
   13e72:	6832      	ldr	r2, [r6, #0]
		return -EINVAL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   13e74:	b10a      	cbz	r2, 13e7a <bt_pub_key_gen+0x1e>
   13e76:	1f13      	subs	r3, r2, #4
   13e78:	b9c3      	cbnz	r3, 13eac <bt_pub_key_gen+0x50>
	parent->next = child;
   13e7a:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
   13e7c:	6872      	ldr	r2, [r6, #4]
			BT_WARN("Callback already registered");
			return -EALREADY;
		}
	}

	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
   13e7e:	1d03      	adds	r3, r0, #4
	list->head = node;
   13e80:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   13e82:	b902      	cbnz	r2, 13e86 <bt_pub_key_gen+0x2a>
	list->tail = node;
   13e84:	6073      	str	r3, [r6, #4]
   13e86:	4c2d      	ldr	r4, [pc, #180]	; (13f3c <bt_pub_key_gen+0xe0>)
   13e88:	f3bf 8f5b 	dmb	ish
   13e8c:	e854 2f00 	ldrex	r2, [r4]
   13e90:	f042 0310 	orr.w	r3, r2, #16
   13e94:	e844 3100 	strex	r1, r3, [r4]
   13e98:	2900      	cmp	r1, #0
   13e9a:	d1f7      	bne.n	13e8c <bt_pub_key_gen+0x30>
   13e9c:	f3bf 8f5b 	dmb	ish

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   13ea0:	f012 0210 	ands.w	r2, r2, #16
   13ea4:	d00b      	beq.n	13ebe <bt_pub_key_gen+0x62>
		return 0;
   13ea6:	2500      	movs	r5, #0
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
   13ea8:	4628      	mov	r0, r5
   13eaa:	bd70      	pop	{r4, r5, r6, pc}
		if (cb == new_cb) {
   13eac:	4298      	cmp	r0, r3
   13eae:	d03d      	beq.n	13f2c <bt_pub_key_gen+0xd0>
Z_GENLIST_PEEK_NEXT(slist, snode)
   13eb0:	1d19      	adds	r1, r3, #4
   13eb2:	d0e2      	beq.n	13e7a <bt_pub_key_gen+0x1e>
	return node->next;
   13eb4:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   13eb6:	2b00      	cmp	r3, #0
   13eb8:	d0df      	beq.n	13e7a <bt_pub_key_gen+0x1e>
   13eba:	3b04      	subs	r3, #4
   13ebc:	e7dc      	b.n	13e78 <bt_pub_key_gen+0x1c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13ebe:	f3bf 8f5b 	dmb	ish
   13ec2:	e854 3f00 	ldrex	r3, [r4]
   13ec6:	f023 0308 	bic.w	r3, r3, #8
   13eca:	e844 3100 	strex	r1, r3, [r4]
   13ece:	2900      	cmp	r1, #0
   13ed0:	d1f7      	bne.n	13ec2 <bt_pub_key_gen+0x66>
   13ed2:	f3bf 8f5b 	dmb	ish
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   13ed6:	4611      	mov	r1, r2
   13ed8:	f242 0025 	movw	r0, #8229	; 0x2025
   13edc:	f7fe ff6e 	bl	12dbc <bt_hci_cmd_send_sync>
	if (err) {
   13ee0:	4605      	mov	r5, r0
   13ee2:	2800      	cmp	r0, #0
   13ee4:	d0df      	beq.n	13ea6 <bt_pub_key_gen+0x4a>
   13ee6:	f3bf 8f5b 	dmb	ish
   13eea:	e854 3f00 	ldrex	r3, [r4]
   13eee:	f023 0310 	bic.w	r3, r3, #16
   13ef2:	e844 3200 	strex	r2, r3, [r4]
   13ef6:	2a00      	cmp	r2, #0
   13ef8:	d1f7      	bne.n	13eea <bt_pub_key_gen+0x8e>
   13efa:	f3bf 8f5b 	dmb	ish
	return list->head;
   13efe:	6834      	ldr	r4, [r6, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   13f00:	b91c      	cbnz	r4, 13f0a <bt_pub_key_gen+0xae>
	list->head = NULL;
   13f02:	2300      	movs	r3, #0
	list->tail = NULL;
   13f04:	e9c6 3300 	strd	r3, r3, [r6]
		return err;
   13f08:	e7ce      	b.n	13ea8 <bt_pub_key_gen+0x4c>
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   13f0a:	3c04      	subs	r4, #4
   13f0c:	2c00      	cmp	r4, #0
   13f0e:	d0f8      	beq.n	13f02 <bt_pub_key_gen+0xa6>
			if (cb->func) {
   13f10:	6823      	ldr	r3, [r4, #0]
   13f12:	b10b      	cbz	r3, 13f18 <bt_pub_key_gen+0xbc>
				cb->func(NULL);
   13f14:	2000      	movs	r0, #0
   13f16:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   13f18:	1d23      	adds	r3, r4, #4
   13f1a:	d0f2      	beq.n	13f02 <bt_pub_key_gen+0xa6>
	return node->next;
   13f1c:	6864      	ldr	r4, [r4, #4]
   13f1e:	e7ef      	b.n	13f00 <bt_pub_key_gen+0xa4>
		return -ENOTSUP;
   13f20:	f06f 0585 	mvn.w	r5, #133	; 0x85
   13f24:	e7c0      	b.n	13ea8 <bt_pub_key_gen+0x4c>
		return -EINVAL;
   13f26:	f06f 0515 	mvn.w	r5, #21
   13f2a:	e7bd      	b.n	13ea8 <bt_pub_key_gen+0x4c>
			return -EALREADY;
   13f2c:	f06f 0577 	mvn.w	r5, #119	; 0x77
   13f30:	e7ba      	b.n	13ea8 <bt_pub_key_gen+0x4c>
   13f32:	bf00      	nop
   13f34:	200002b8 	.word	0x200002b8
   13f38:	20002560 	.word	0x20002560
   13f3c:	20000384 	.word	0x20000384

00013f40 <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   13f40:	4b05      	ldr	r3, [pc, #20]	; (13f58 <bt_pub_key_get+0x18>)
   13f42:	f3bf 8f5b 	dmb	ish
   13f46:	681b      	ldr	r3, [r3, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
}
   13f48:	4804      	ldr	r0, [pc, #16]	; (13f5c <bt_pub_key_get+0x1c>)
   13f4a:	f3bf 8f5b 	dmb	ish
		return pub_key;
   13f4e:	f013 0f08 	tst.w	r3, #8
}
   13f52:	bf08      	it	eq
   13f54:	2000      	moveq	r0, #0
   13f56:	4770      	bx	lr
   13f58:	20000384 	.word	0x20000384
   13f5c:	20002b34 	.word	0x20002b34

00013f60 <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[BT_PUB_KEY_LEN], bt_dh_key_cb_t cb)
{
   13f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	if (dh_key_cb == cb) {
   13f62:	4d1f      	ldr	r5, [pc, #124]	; (13fe0 <bt_dh_key_gen+0x80>)
   13f64:	682b      	ldr	r3, [r5, #0]
   13f66:	428b      	cmp	r3, r1
{
   13f68:	4606      	mov	r6, r0
	if (dh_key_cb == cb) {
   13f6a:	d032      	beq.n	13fd2 <bt_dh_key_gen+0x72>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   13f6c:	b113      	cbz	r3, 13f74 <bt_dh_key_gen+0x14>
		return -EBUSY;
   13f6e:	f06f 000f 	mvn.w	r0, #15
		BT_WARN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
   13f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13f74:	4b1b      	ldr	r3, [pc, #108]	; (13fe4 <bt_dh_key_gen+0x84>)
   13f76:	f3bf 8f5b 	dmb	ish
   13f7a:	681a      	ldr	r2, [r3, #0]
   13f7c:	f3bf 8f5b 	dmb	ish
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   13f80:	f3c2 1700 	ubfx	r7, r2, #4, #1
   13f84:	06d2      	lsls	r2, r2, #27
   13f86:	d4f2      	bmi.n	13f6e <bt_dh_key_gen+0xe>
   13f88:	f3bf 8f5b 	dmb	ish
   13f8c:	681b      	ldr	r3, [r3, #0]
   13f8e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   13f92:	071b      	lsls	r3, r3, #28
   13f94:	d520      	bpl.n	13fd8 <bt_dh_key_gen+0x78>
	dh_key_cb = cb;
   13f96:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   13f98:	f242 0026 	movw	r0, #8230	; 0x2026
   13f9c:	2140      	movs	r1, #64	; 0x40
   13f9e:	f7fe feb1 	bl	12d04 <bt_hci_cmd_create>
	if (!buf) {
   13fa2:	4604      	mov	r4, r0
   13fa4:	b190      	cbz	r0, 13fcc <bt_dh_key_gen+0x6c>
	return net_buf_simple_add(&buf->b, len);
   13fa6:	2140      	movs	r1, #64	; 0x40
   13fa8:	3008      	adds	r0, #8
   13faa:	f00b fdce 	bl	1fb4a <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
   13fae:	2240      	movs	r2, #64	; 0x40
   13fb0:	4631      	mov	r1, r6
   13fb2:	f008 fe78 	bl	1cca6 <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   13fb6:	463a      	mov	r2, r7
   13fb8:	4621      	mov	r1, r4
   13fba:	f242 0026 	movw	r0, #8230	; 0x2026
   13fbe:	f7fe fefd 	bl	12dbc <bt_hci_cmd_send_sync>
	if (err) {
   13fc2:	2800      	cmp	r0, #0
   13fc4:	d0d5      	beq.n	13f72 <bt_dh_key_gen+0x12>
		dh_key_cb = NULL;
   13fc6:	2300      	movs	r3, #0
   13fc8:	602b      	str	r3, [r5, #0]
		return err;
   13fca:	e7d2      	b.n	13f72 <bt_dh_key_gen+0x12>
		return -ENOBUFS;
   13fcc:	f06f 0068 	mvn.w	r0, #104	; 0x68
   13fd0:	e7f9      	b.n	13fc6 <bt_dh_key_gen+0x66>
		return -EALREADY;
   13fd2:	f06f 0077 	mvn.w	r0, #119	; 0x77
   13fd6:	e7cc      	b.n	13f72 <bt_dh_key_gen+0x12>
		return -EADDRNOTAVAIL;
   13fd8:	f06f 007c 	mvn.w	r0, #124	; 0x7c
   13fdc:	e7c9      	b.n	13f72 <bt_dh_key_gen+0x12>
   13fde:	bf00      	nop
   13fe0:	2000255c 	.word	0x2000255c
   13fe4:	20000384 	.word	0x20000384

00013fe8 <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
   13fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13fea:	4c1d      	ldr	r4, [pc, #116]	; (14060 <bt_hci_evt_le_pkey_complete+0x78>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
   13fec:	6886      	ldr	r6, [r0, #8]
   13fee:	f3bf 8f5b 	dmb	ish
   13ff2:	e854 3f00 	ldrex	r3, [r4]
   13ff6:	f023 0310 	bic.w	r3, r3, #16
   13ffa:	e844 3200 	strex	r2, r3, [r4]
   13ffe:	2a00      	cmp	r2, #0
   14000:	d1f7      	bne.n	13ff2 <bt_hci_evt_le_pkey_complete+0xa>
   14002:	f3bf 8f5b 	dmb	ish

	BT_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
   14006:	7833      	ldrb	r3, [r6, #0]
   14008:	b983      	cbnz	r3, 1402c <bt_hci_evt_le_pkey_complete+0x44>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
   1400a:	4816      	ldr	r0, [pc, #88]	; (14064 <bt_hci_evt_le_pkey_complete+0x7c>)
   1400c:	2240      	movs	r2, #64	; 0x40
   1400e:	1c71      	adds	r1, r6, #1
   14010:	f008 fe49 	bl	1cca6 <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14014:	f3bf 8f5b 	dmb	ish
   14018:	e854 3f00 	ldrex	r3, [r4]
   1401c:	f043 0308 	orr.w	r3, r3, #8
   14020:	e844 3200 	strex	r2, r3, [r4]
   14024:	2a00      	cmp	r2, #0
   14026:	d1f7      	bne.n	14018 <bt_hci_evt_le_pkey_complete+0x30>
   14028:	f3bf 8f5b 	dmb	ish
	return list->head;
   1402c:	4d0e      	ldr	r5, [pc, #56]	; (14068 <bt_hci_evt_le_pkey_complete+0x80>)
   1402e:	682c      	ldr	r4, [r5, #0]
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   14030:	b91c      	cbnz	r4, 1403a <bt_hci_evt_le_pkey_complete+0x52>
	list->head = NULL;
   14032:	2300      	movs	r3, #0
	list->tail = NULL;
   14034:	e9c5 3300 	strd	r3, r3, [r5]
			cb->func(evt->status ? NULL : pub_key);
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
   14038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			cb->func(evt->status ? NULL : pub_key);
   1403a:	4f0a      	ldr	r7, [pc, #40]	; (14064 <bt_hci_evt_le_pkey_complete+0x7c>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1403c:	3c04      	subs	r4, #4
   1403e:	2c00      	cmp	r4, #0
   14040:	d0f7      	beq.n	14032 <bt_hci_evt_le_pkey_complete+0x4a>
		if (cb->func) {
   14042:	6823      	ldr	r3, [r4, #0]
   14044:	b12b      	cbz	r3, 14052 <bt_hci_evt_le_pkey_complete+0x6a>
			cb->func(evt->status ? NULL : pub_key);
   14046:	7832      	ldrb	r2, [r6, #0]
   14048:	2a00      	cmp	r2, #0
   1404a:	bf0c      	ite	eq
   1404c:	4638      	moveq	r0, r7
   1404e:	2000      	movne	r0, #0
   14050:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   14052:	1d23      	adds	r3, r4, #4
   14054:	d0ed      	beq.n	14032 <bt_hci_evt_le_pkey_complete+0x4a>
	return node->next;
   14056:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   14058:	2c00      	cmp	r4, #0
   1405a:	d0ea      	beq.n	14032 <bt_hci_evt_le_pkey_complete+0x4a>
   1405c:	3c04      	subs	r4, #4
   1405e:	e7ee      	b.n	1403e <bt_hci_evt_le_pkey_complete+0x56>
   14060:	20000384 	.word	0x20000384
   14064:	20002b34 	.word	0x20002b34
   14068:	20002560 	.word	0x20002560

0001406c <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	BT_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
   1406c:	4905      	ldr	r1, [pc, #20]	; (14084 <bt_hci_evt_le_dhkey_complete+0x18>)
   1406e:	680b      	ldr	r3, [r1, #0]
   14070:	b133      	cbz	r3, 14080 <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
   14072:	6882      	ldr	r2, [r0, #8]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
   14074:	2000      	movs	r0, #0
   14076:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
   14078:	7811      	ldrb	r1, [r2, #0]
   1407a:	b901      	cbnz	r1, 1407e <bt_hci_evt_le_dhkey_complete+0x12>
   1407c:	1c50      	adds	r0, r2, #1
   1407e:	4718      	bx	r3
	}
}
   14080:	4770      	bx	lr
   14082:	bf00      	nop
   14084:	2000255c 	.word	0x2000255c

00014088 <tx_free>:
	}
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
   14088:	2300      	movs	r3, #0
	tx->user_data = NULL;
   1408a:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
   1408e:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
   14090:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   14092:	4801      	ldr	r0, [pc, #4]	; (14098 <tx_free+0x10>)
   14094:	f00c b913 	b.w	202be <k_queue_append>
   14098:	20000754 	.word	0x20000754

0001409c <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
   1409c:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   1409e:	4b09      	ldr	r3, [pc, #36]	; (140c4 <notify_connected+0x28>)
   140a0:	681d      	ldr	r5, [r3, #0]
{
   140a2:	4604      	mov	r4, r0
		if (cb->connected) {
			cb->connected(conn, conn->err);
   140a4:	7b21      	ldrb	r1, [r4, #12]
	for (cb = callback_list; cb; cb = cb->_next) {
   140a6:	b92d      	cbnz	r5, 140b4 <notify_connected+0x18>
		}
	}

	if (!conn->err) {
   140a8:	b951      	cbnz	r1, 140c0 <notify_connected+0x24>
		bt_gatt_connected(conn);
   140aa:	4620      	mov	r0, r4
	}
}
   140ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
   140b0:	f001 bfc2 	b.w	16038 <bt_gatt_connected>
		if (cb->connected) {
   140b4:	682b      	ldr	r3, [r5, #0]
   140b6:	b10b      	cbz	r3, 140bc <notify_connected+0x20>
			cb->connected(conn, conn->err);
   140b8:	4620      	mov	r0, r4
   140ba:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   140bc:	69ad      	ldr	r5, [r5, #24]
   140be:	e7f1      	b.n	140a4 <notify_connected+0x8>
}
   140c0:	bd38      	pop	{r3, r4, r5, pc}
   140c2:	bf00      	nop
   140c4:	2000256c 	.word	0x2000256c

000140c8 <send_frag>:
{
   140c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   140cc:	694d      	ldr	r5, [r1, #20]
{
   140ce:	4604      	mov	r4, r0
   140d0:	460e      	mov	r6, r1
   140d2:	4690      	mov	r8, r2
   140d4:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
   140d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   140da:	483e      	ldr	r0, [pc, #248]	; (141d4 <send_frag+0x10c>)
   140dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   140e0:	f005 fb4c 	bl	1977c <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   140e4:	7b63      	ldrb	r3, [r4, #13]
   140e6:	2b07      	cmp	r3, #7
   140e8:	d146      	bne.n	14178 <send_frag+0xb0>
	__asm__ volatile(
   140ea:	f04f 0340 	mov.w	r3, #64	; 0x40
   140ee:	f3ef 8211 	mrs	r2, BASEPRI
   140f2:	f383 8811 	msr	BASEPRI, r3
   140f6:	f3bf 8f6f 	isb	sy
	if (tx) {
   140fa:	69a3      	ldr	r3, [r4, #24]
   140fc:	2d00      	cmp	r5, #0
   140fe:	d04d      	beq.n	1419c <send_frag+0xd4>
	parent->next = child;
   14100:	2100      	movs	r1, #0
   14102:	6029      	str	r1, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
   14104:	2b00      	cmp	r3, #0
   14106:	d146      	bne.n	14196 <send_frag+0xce>
	list->head = node;
   14108:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   1410c:	f382 8811 	msr	BASEPRI, r2
   14110:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   14114:	2104      	movs	r1, #4
   14116:	f106 0008 	add.w	r0, r6, #8
   1411a:	f00b fd2d 	bl	1fb78 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   1411e:	8823      	ldrh	r3, [r4, #0]
   14120:	f008 08fd 	and.w	r8, r8, #253	; 0xfd
   14124:	ea43 3808 	orr.w	r8, r3, r8, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   14128:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   1412a:	f8a0 8000 	strh.w	r8, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1412e:	3b04      	subs	r3, #4
   14130:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   14132:	2302      	movs	r3, #2
   14134:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
   14136:	4630      	mov	r0, r6
   14138:	f009 fa36 	bl	1d5a8 <bt_send>
	if (err) {
   1413c:	2800      	cmp	r0, #0
   1413e:	d047      	beq.n	141d0 <send_frag+0x108>
	__asm__ volatile(
   14140:	f04f 0340 	mov.w	r3, #64	; 0x40
   14144:	f3ef 8011 	mrs	r0, BASEPRI
   14148:	f383 8811 	msr	BASEPRI, r3
   1414c:	f3bf 8f6f 	isb	sy
		if (tx) {
   14150:	2d00      	cmp	r5, #0
   14152:	d037      	beq.n	141c4 <send_frag+0xfc>
	return list->head;
   14154:	6963      	ldr	r3, [r4, #20]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   14156:	2200      	movs	r2, #0
   14158:	b153      	cbz	r3, 14170 <send_frag+0xa8>
   1415a:	429d      	cmp	r5, r3
   1415c:	d12f      	bne.n	141be <send_frag+0xf6>
	return node->next;
   1415e:	682b      	ldr	r3, [r5, #0]
	return list->tail;
   14160:	69a1      	ldr	r1, [r4, #24]
Z_GENLIST_REMOVE(slist, snode)
   14162:	bb3a      	cbnz	r2, 141b4 <send_frag+0xec>
   14164:	42a9      	cmp	r1, r5
	list->head = node;
   14166:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   14168:	d100      	bne.n	1416c <send_frag+0xa4>
	list->tail = node;
   1416a:	61a3      	str	r3, [r4, #24]
	parent->next = child;
   1416c:	2300      	movs	r3, #0
   1416e:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   14170:	f380 8811 	msr	BASEPRI, r0
   14174:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   14178:	4816      	ldr	r0, [pc, #88]	; (141d4 <send_frag+0x10c>)
   1417a:	f005 fad9 	bl	19730 <z_impl_k_sem_give>
	if (tx) {
   1417e:	b115      	cbz	r5, 14186 <send_frag+0xbe>
		tx_free(tx);
   14180:	4628      	mov	r0, r5
   14182:	f7ff ff81 	bl	14088 <tx_free>
	if (always_consume) {
   14186:	b11f      	cbz	r7, 14190 <send_frag+0xc8>
		net_buf_unref(buf);
   14188:	4630      	mov	r0, r6
   1418a:	f003 f995 	bl	174b8 <net_buf_unref>
	return false;
   1418e:	2700      	movs	r7, #0
}
   14190:	4638      	mov	r0, r7
   14192:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   14196:	601d      	str	r5, [r3, #0]
	list->tail = node;
   14198:	61a5      	str	r5, [r4, #24]
}
   1419a:	e7b7      	b.n	1410c <send_frag+0x44>
		if (tail_tx) {
   1419c:	b133      	cbz	r3, 141ac <send_frag+0xe4>
			pending_no_cb = &tail_tx->pending_no_cb;
   1419e:	f103 090c 	add.w	r9, r3, #12
   141a2:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   141a4:	3301      	adds	r3, #1
   141a6:	f8c9 3000 	str.w	r3, [r9]
   141aa:	e7af      	b.n	1410c <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   141ac:	69e3      	ldr	r3, [r4, #28]
   141ae:	f104 091c 	add.w	r9, r4, #28
   141b2:	e7f7      	b.n	141a4 <send_frag+0xdc>
Z_GENLIST_REMOVE(slist, snode)
   141b4:	42a9      	cmp	r1, r5
	parent->next = child;
   141b6:	6013      	str	r3, [r2, #0]
	list->tail = node;
   141b8:	bf08      	it	eq
   141ba:	61a2      	streq	r2, [r4, #24]
}
   141bc:	e7d6      	b.n	1416c <send_frag+0xa4>
	return node->next;
   141be:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   141c0:	681b      	ldr	r3, [r3, #0]
   141c2:	e7c9      	b.n	14158 <send_frag+0x90>
			(*pending_no_cb)--;
   141c4:	f8d9 3000 	ldr.w	r3, [r9]
   141c8:	3b01      	subs	r3, #1
   141ca:	f8c9 3000 	str.w	r3, [r9]
   141ce:	e7cf      	b.n	14170 <send_frag+0xa8>
	return true;
   141d0:	2701      	movs	r7, #1
   141d2:	e7dd      	b.n	14190 <send_frag+0xc8>
   141d4:	200003b8 	.word	0x200003b8

000141d8 <bt_conn_get_pkts>:
}
   141d8:	4800      	ldr	r0, [pc, #0]	; (141dc <bt_conn_get_pkts+0x4>)
   141da:	4770      	bx	lr
   141dc:	200003b8 	.word	0x200003b8

000141e0 <bt_conn_new>:
{
   141e0:	b538      	push	{r3, r4, r5, lr}
   141e2:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   141e4:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   141e6:	2501      	movs	r5, #1
   141e8:	428b      	cmp	r3, r1
   141ea:	d102      	bne.n	141f2 <bt_conn_new+0x12>
		return NULL;
   141ec:	2400      	movs	r4, #0
}
   141ee:	4620      	mov	r0, r4
   141f0:	bd38      	pop	{r3, r4, r5, pc}
   141f2:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
   141f6:	f3bf 8f5b 	dmb	ish
   141fa:	e852 0f00 	ldrex	r0, [r2]
   141fe:	2800      	cmp	r0, #0
   14200:	d104      	bne.n	1420c <bt_conn_new+0x2c>
   14202:	e842 5c00 	strex	ip, r5, [r2]
   14206:	f1bc 0f00 	cmp.w	ip, #0
   1420a:	d1f6      	bne.n	141fa <bt_conn_new+0x1a>
   1420c:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   14210:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   14214:	d002      	beq.n	1421c <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
   14216:	3301      	adds	r3, #1
   14218:	4604      	mov	r4, r0
   1421a:	e7e5      	b.n	141e8 <bt_conn_new+0x8>
	if (!conn) {
   1421c:	2c00      	cmp	r4, #0
   1421e:	d0e6      	beq.n	141ee <bt_conn_new+0xe>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   14220:	22b8      	movs	r2, #184	; 0xb8
   14222:	2100      	movs	r1, #0
   14224:	4620      	mov	r0, r4
   14226:	f008 fd49 	bl	1ccbc <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   1422a:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1422e:	4904      	ldr	r1, [pc, #16]	; (14240 <bt_conn_new+0x60>)
   14230:	f00c f93c 	bl	204ac <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   14234:	4903      	ldr	r1, [pc, #12]	; (14244 <bt_conn_new+0x64>)
   14236:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1423a:	f00c f911 	bl	20460 <k_work_init>
	return conn;
   1423e:	e7d6      	b.n	141ee <bt_conn_new+0xe>
   14240:	0001471d 	.word	0x0001471d
   14244:	0001da17 	.word	0x0001da17

00014248 <bt_conn_send_cb>:
{
   14248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1424a:	461f      	mov	r7, r3
	if (conn->state != BT_CONN_CONNECTED) {
   1424c:	7b43      	ldrb	r3, [r0, #13]
   1424e:	2b07      	cmp	r3, #7
{
   14250:	4604      	mov	r4, r0
   14252:	460d      	mov	r5, r1
   14254:	4616      	mov	r6, r2
	if (conn->state != BT_CONN_CONNECTED) {
   14256:	d114      	bne.n	14282 <bt_conn_send_cb+0x3a>
	if (cb) {
   14258:	b312      	cbz	r2, 142a0 <bt_conn_send_cb+0x58>
	return z_impl_k_current_get();
   1425a:	f005 ff89 	bl	1a170 <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   1425e:	4b13      	ldr	r3, [pc, #76]	; (142ac <bt_conn_send_cb+0x64>)
   14260:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   14262:	4813      	ldr	r0, [pc, #76]	; (142b0 <bt_conn_send_cb+0x68>)
   14264:	bf07      	ittee	eq
   14266:	2200      	moveq	r2, #0
   14268:	2300      	moveq	r3, #0
   1426a:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
   1426e:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
   14272:	f005 fa29 	bl	196c8 <z_impl_k_queue_get>
		if (!tx) {
   14276:	b1a8      	cbz	r0, 142a4 <bt_conn_send_cb+0x5c>
		if (conn->state != BT_CONN_CONNECTED) {
   14278:	7b63      	ldrb	r3, [r4, #13]
   1427a:	2b07      	cmp	r3, #7
   1427c:	d004      	beq.n	14288 <bt_conn_send_cb+0x40>
			tx_free(tx);
   1427e:	f7ff ff03 	bl	14088 <tx_free>
		return -ENOTCONN;
   14282:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   14286:	e00a      	b.n	1429e <bt_conn_send_cb+0x56>
		tx->pending_no_cb = 0U;
   14288:	2300      	movs	r3, #0
		tx->user_data = user_data;
   1428a:	e9c0 6701 	strd	r6, r7, [r0, #4]
		tx->pending_no_cb = 0U;
   1428e:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   14290:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
   14292:	f104 0038 	add.w	r0, r4, #56	; 0x38
   14296:	4629      	mov	r1, r5
   14298:	f00b fc24 	bl	1fae4 <net_buf_put>
	return 0;
   1429c:	2000      	movs	r0, #0
}
   1429e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx_data(buf)->tx = NULL;
   142a0:	614a      	str	r2, [r1, #20]
   142a2:	e7f6      	b.n	14292 <bt_conn_send_cb+0x4a>
			return -ENOBUFS;
   142a4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   142a8:	e7f9      	b.n	1429e <bt_conn_send_cb+0x56>
   142aa:	bf00      	nop
   142ac:	20001b98 	.word	0x20001b98
   142b0:	20000754 	.word	0x20000754

000142b4 <bt_conn_prepare_events>:
{
   142b4:	b570      	push	{r4, r5, r6, lr}
	conn_change.signaled = 0U;
   142b6:	4b17      	ldr	r3, [pc, #92]	; (14314 <bt_conn_prepare_events+0x60>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   142b8:	4c17      	ldr	r4, [pc, #92]	; (14318 <bt_conn_prepare_events+0x64>)
   142ba:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   142bc:	2101      	movs	r1, #1
{
   142be:	4605      	mov	r5, r0
	conn_change.signaled = 0U;
   142c0:	609a      	str	r2, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   142c2:	f00c fbd4 	bl	20a6e <k_poll_event_init>
   142c6:	f3bf 8f5b 	dmb	ish
   142ca:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   142ce:	f3bf 8f5b 	dmb	ish
		if (!conn_prepare_events(conn, &events[ev_count])) {
   142d2:	f105 0614 	add.w	r6, r5, #20
	if (!atomic_get(&conn->ref)) {
   142d6:	b90b      	cbnz	r3, 142dc <bt_conn_prepare_events+0x28>
		conn_cleanup(conn);
   142d8:	2001      	movs	r0, #1
}
   142da:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   142dc:	7b63      	ldrb	r3, [r4, #13]
   142de:	b953      	cbnz	r3, 142f6 <bt_conn_prepare_events+0x42>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   142e0:	f06f 0140 	mvn.w	r1, #64	; 0x40
   142e4:	1d20      	adds	r0, r4, #4
   142e6:	f009 fb64 	bl	1d9b2 <atomic_and>
   142ea:	0643      	lsls	r3, r0, #25
   142ec:	d503      	bpl.n	142f6 <bt_conn_prepare_events+0x42>
		conn_cleanup(conn);
   142ee:	4620      	mov	r0, r4
   142f0:	f009 fb9d 	bl	1da2e <conn_cleanup>
   142f4:	e7f0      	b.n	142d8 <bt_conn_prepare_events+0x24>
	if (conn->state != BT_CONN_CONNECTED) {
   142f6:	7b63      	ldrb	r3, [r4, #13]
   142f8:	2b07      	cmp	r3, #7
   142fa:	d1ed      	bne.n	142d8 <bt_conn_prepare_events+0x24>
	k_poll_event_init(&events[0],
   142fc:	4b07      	ldr	r3, [pc, #28]	; (1431c <bt_conn_prepare_events+0x68>)
   142fe:	4630      	mov	r0, r6
   14300:	2200      	movs	r2, #0
   14302:	2104      	movs	r1, #4
   14304:	f00c fbb3 	bl	20a6e <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   14308:	2301      	movs	r3, #1
   1430a:	f885 3020 	strb.w	r3, [r5, #32]
			ev_count++;
   1430e:	2002      	movs	r0, #2
	return ev_count;
   14310:	e7e3      	b.n	142da <bt_conn_prepare_events+0x26>
   14312:	bf00      	nop
   14314:	200004f8 	.word	0x200004f8
   14318:	20001518 	.word	0x20001518
   1431c:	20001550 	.word	0x20001550

00014320 <bt_conn_lookup_handle>:
{
   14320:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   14322:	2101      	movs	r1, #1
   14324:	4801      	ldr	r0, [pc, #4]	; (1432c <bt_conn_lookup_handle+0xc>)
   14326:	f009 bc19 	b.w	1db5c <conn_lookup_handle>
   1432a:	bf00      	nop
   1432c:	20001518 	.word	0x20001518

00014330 <bt_conn_set_state>:
{
   14330:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
   14332:	7b45      	ldrb	r5, [r0, #13]
   14334:	428d      	cmp	r5, r1
{
   14336:	4604      	mov	r4, r0
	if (conn->state == state) {
   14338:	f000 809f 	beq.w	1447a <bt_conn_set_state+0x14a>
	conn->state = state;
   1433c:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   1433e:	b925      	cbnz	r5, 1434a <bt_conn_set_state+0x1a>
		if (conn->type != BT_CONN_TYPE_ISO) {
   14340:	7883      	ldrb	r3, [r0, #2]
   14342:	2b08      	cmp	r3, #8
   14344:	d001      	beq.n	1434a <bt_conn_set_state+0x1a>
			bt_conn_ref(conn);
   14346:	f009 fbd4 	bl	1daf2 <bt_conn_ref>
	switch (conn->state) {
   1434a:	7b63      	ldrb	r3, [r4, #13]
   1434c:	2b01      	cmp	r3, #1
   1434e:	d116      	bne.n	1437e <bt_conn_set_state+0x4e>
	z_impl_k_sem_give(sem);
   14350:	4d4a      	ldr	r5, [pc, #296]	; (1447c <bt_conn_set_state+0x14c>)
		tx->pending_no_cb = 0U;
   14352:	2600      	movs	r6, #0
	__asm__ volatile(
   14354:	f04f 0340 	mov.w	r3, #64	; 0x40
   14358:	f3ef 8211 	mrs	r2, BASEPRI
   1435c:	f383 8811 	msr	BASEPRI, r3
   14360:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   14364:	69e3      	ldr	r3, [r4, #28]
   14366:	2b00      	cmp	r3, #0
   14368:	d068      	beq.n	1443c <bt_conn_set_state+0x10c>
			conn->pending_no_cb--;
   1436a:	3b01      	subs	r3, #1
   1436c:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   1436e:	f382 8811 	msr	BASEPRI, r2
   14372:	f3bf 8f6f 	isb	sy
   14376:	4628      	mov	r0, r5
   14378:	f005 f9da 	bl	19730 <z_impl_k_sem_give>
}
   1437c:	e7ea      	b.n	14354 <bt_conn_set_state+0x24>
	switch (conn->state) {
   1437e:	2b07      	cmp	r3, #7
   14380:	d00b      	beq.n	1439a <bt_conn_set_state+0x6a>
   14382:	2b00      	cmp	r3, #0
   14384:	d179      	bne.n	1447a <bt_conn_set_state+0x14a>
		if (conn->type == BT_CONN_TYPE_ISO) {
   14386:	78a3      	ldrb	r3, [r4, #2]
   14388:	2b08      	cmp	r3, #8
   1438a:	d076      	beq.n	1447a <bt_conn_set_state+0x14a>
		if (conn->type == BT_CONN_TYPE_SCO) {
   1438c:	2b04      	cmp	r3, #4
   1438e:	d11e      	bne.n	143ce <bt_conn_set_state+0x9e>
			bt_conn_unref(conn);
   14390:	4620      	mov	r0, r4
}
   14392:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   14396:	f009 bbc7 	b.w	1db28 <bt_conn_unref>
		if (conn->type == BT_CONN_TYPE_SCO) {
   1439a:	78a3      	ldrb	r3, [r4, #2]
   1439c:	2b04      	cmp	r3, #4
   1439e:	d06c      	beq.n	1447a <bt_conn_set_state+0x14a>
	z_impl_k_queue_init(queue);
   143a0:	f104 0038 	add.w	r0, r4, #56	; 0x38
   143a4:	f00b ff7f 	bl	202a6 <z_impl_k_queue_init>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   143a8:	4835      	ldr	r0, [pc, #212]	; (14480 <bt_conn_set_state+0x150>)
   143aa:	2100      	movs	r1, #0
   143ac:	f006 f90a 	bl	1a5c4 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   143b0:	2300      	movs	r3, #0
	list->tail = NULL;
   143b2:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   143b6:	78e3      	ldrb	r3, [r4, #3]
   143b8:	2b01      	cmp	r3, #1
   143ba:	d15e      	bne.n	1447a <bt_conn_set_state+0x14a>
			k_work_schedule(&conn->deferred_work,
   143bc:	f104 0058 	add.w	r0, r4, #88	; 0x58
   143c0:	f44f 3220 	mov.w	r2, #163840	; 0x28000
}
   143c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
   143c8:	2300      	movs	r3, #0
   143ca:	f005 bba7 	b.w	19b1c <k_work_schedule>
		switch (old_state) {
   143ce:	3d01      	subs	r5, #1
   143d0:	2d05      	cmp	r5, #5
   143d2:	d852      	bhi.n	1447a <bt_conn_set_state+0x14a>
   143d4:	a301      	add	r3, pc, #4	; (adr r3, 143dc <bt_conn_set_state+0xac>)
   143d6:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
   143da:	bf00      	nop
   143dc:	000143f5 	.word	0x000143f5
   143e0:	0001442f 	.word	0x0001442f
   143e4:	00014391 	.word	0x00014391
   143e8:	00014391 	.word	0x00014391
   143ec:	0001442f 	.word	0x0001442f
   143f0:	0001442f 	.word	0x0001442f
			tx_notify(conn);
   143f4:	4620      	mov	r0, r4
   143f6:	f009 faeb 	bl	1d9d0 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
   143fa:	78a3      	ldrb	r3, [r4, #2]
   143fc:	2b01      	cmp	r3, #1
   143fe:	d103      	bne.n	14408 <bt_conn_set_state+0xd8>
				k_work_cancel_delayable(&conn->deferred_work);
   14400:	f104 0058 	add.w	r0, r4, #88	; 0x58
   14404:	f00c f85e 	bl	204c4 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14408:	f3bf 8f5b 	dmb	ish
   1440c:	3404      	adds	r4, #4
   1440e:	e854 3f00 	ldrex	r3, [r4]
   14412:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14416:	e844 3200 	strex	r2, r3, [r4]
   1441a:	2a00      	cmp	r2, #0
   1441c:	d1f7      	bne.n	1440e <bt_conn_set_state+0xde>
   1441e:	f3bf 8f5b 	dmb	ish
   14422:	4817      	ldr	r0, [pc, #92]	; (14480 <bt_conn_set_state+0x150>)
}
   14424:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   14428:	2100      	movs	r1, #0
   1442a:	f006 b8cb 	b.w	1a5c4 <z_impl_k_poll_signal_raise>
			if (conn->err) {
   1442e:	7b23      	ldrb	r3, [r4, #12]
   14430:	2b00      	cmp	r3, #0
   14432:	d0ad      	beq.n	14390 <bt_conn_set_state+0x60>
				notify_connected(conn);
   14434:	4620      	mov	r0, r4
   14436:	f7ff fe31 	bl	1409c <notify_connected>
   1443a:	e7a9      	b.n	14390 <bt_conn_set_state+0x60>
	return list->head;
   1443c:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   1443e:	b128      	cbz	r0, 1444c <bt_conn_set_state+0x11c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   14440:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   14442:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   14444:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   14446:	4288      	cmp	r0, r1
	list->tail = node;
   14448:	bf08      	it	eq
   1444a:	61a3      	streq	r3, [r4, #24]
   1444c:	f382 8811 	msr	BASEPRI, r2
   14450:	f3bf 8f6f 	isb	sy
		if (!node) {
   14454:	b188      	cbz	r0, 1447a <bt_conn_set_state+0x14a>
	__asm__ volatile(
   14456:	f04f 0240 	mov.w	r2, #64	; 0x40
   1445a:	f3ef 8311 	mrs	r3, BASEPRI
   1445e:	f382 8811 	msr	BASEPRI, r2
   14462:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   14466:	68c2      	ldr	r2, [r0, #12]
   14468:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   1446a:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
   1446c:	f383 8811 	msr	BASEPRI, r3
   14470:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   14474:	f7ff fe08 	bl	14088 <tx_free>
   14478:	e77d      	b.n	14376 <bt_conn_set_state+0x46>
}
   1447a:	bd70      	pop	{r4, r5, r6, pc}
   1447c:	200003b8 	.word	0x200003b8
   14480:	200004f8 	.word	0x200004f8

00014484 <bt_conn_index>:
		index = conn - acl_conns;
   14484:	4b03      	ldr	r3, [pc, #12]	; (14494 <bt_conn_index+0x10>)
   14486:	1ac0      	subs	r0, r0, r3
   14488:	4b03      	ldr	r3, [pc, #12]	; (14498 <bt_conn_index+0x14>)
   1448a:	1180      	asrs	r0, r0, #6
   1448c:	4358      	muls	r0, r3
}
   1448e:	b2c0      	uxtb	r0, r0
   14490:	4770      	bx	lr
   14492:	bf00      	nop
   14494:	20001518 	.word	0x20001518
   14498:	aaaaaaab 	.word	0xaaaaaaab

0001449c <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   1449c:	b570      	push	{r4, r5, r6, lr}
   1449e:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   144a0:	f3bf 8f5b 	dmb	ish
   144a4:	6863      	ldr	r3, [r4, #4]
   144a6:	f3bf 8f5b 	dmb	ish
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send slave conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   144aa:	059b      	lsls	r3, r3, #22
   144ac:	f100 0004 	add.w	r0, r0, #4
   144b0:	d511      	bpl.n	144d6 <notify_le_param_updated+0x3a>
	    conn->le.interval >= conn->le.interval_min &&
   144b2:	f8b4 309e 	ldrh.w	r3, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   144b6:	f8b4 20a0 	ldrh.w	r2, [r4, #160]	; 0xa0
   144ba:	429a      	cmp	r2, r3
   144bc:	d80b      	bhi.n	144d6 <notify_le_param_updated+0x3a>
	    conn->le.interval >= conn->le.interval_min &&
   144be:	f8b4 20a2 	ldrh.w	r2, [r4, #162]	; 0xa2
   144c2:	429a      	cmp	r2, r3
   144c4:	d307      	bcc.n	144d6 <notify_le_param_updated+0x3a>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   144c6:	e9d4 2329 	ldrd	r2, r3, [r4, #164]	; 0xa4
   144ca:	429a      	cmp	r2, r3
   144cc:	d103      	bne.n	144d6 <notify_le_param_updated+0x3a>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   144ce:	f46f 7100 	mvn.w	r1, #512	; 0x200
   144d2:	f009 fa6e 	bl	1d9b2 <atomic_and>
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   144d6:	4b08      	ldr	r3, [pc, #32]	; (144f8 <notify_le_param_updated+0x5c>)
   144d8:	681d      	ldr	r5, [r3, #0]
   144da:	b905      	cbnz	r5, 144de <notify_le_param_updated+0x42>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   144dc:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
   144de:	68ee      	ldr	r6, [r5, #12]
   144e0:	b13e      	cbz	r6, 144f2 <notify_le_param_updated+0x56>
			cb->le_param_updated(conn, conn->le.interval,
   144e2:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   144e6:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   144ea:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   144ee:	4620      	mov	r0, r4
   144f0:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   144f2:	69ad      	ldr	r5, [r5, #24]
   144f4:	e7f1      	b.n	144da <notify_le_param_updated+0x3e>
   144f6:	bf00      	nop
   144f8:	2000256c 	.word	0x2000256c

000144fc <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   144fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   144fe:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   14500:	4608      	mov	r0, r1
{
   14502:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   14504:	f008 ffc8 	bl	1d498 <bt_le_conn_params_valid>
   14508:	4604      	mov	r4, r0
   1450a:	b910      	cbnz	r0, 14512 <le_param_req+0x16>
		return false;
   1450c:	2400      	movs	r4, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   1450e:	4620      	mov	r0, r4
   14510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   14512:	4b09      	ldr	r3, [pc, #36]	; (14538 <le_param_req+0x3c>)
   14514:	681e      	ldr	r6, [r3, #0]
   14516:	2e00      	cmp	r6, #0
   14518:	d0f9      	beq.n	1450e <le_param_req+0x12>
		if (!cb->le_param_req) {
   1451a:	68b3      	ldr	r3, [r6, #8]
   1451c:	b90b      	cbnz	r3, 14522 <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
   1451e:	69b6      	ldr	r6, [r6, #24]
   14520:	e7f9      	b.n	14516 <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
   14522:	4629      	mov	r1, r5
   14524:	4638      	mov	r0, r7
   14526:	4798      	blx	r3
   14528:	2800      	cmp	r0, #0
   1452a:	d0ef      	beq.n	1450c <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
   1452c:	4628      	mov	r0, r5
   1452e:	f008 ffb3 	bl	1d498 <bt_le_conn_params_valid>
   14532:	2800      	cmp	r0, #0
   14534:	d1f3      	bne.n	1451e <le_param_req+0x22>
   14536:	e7e9      	b.n	1450c <le_param_req+0x10>
   14538:	2000256c 	.word	0x2000256c

0001453c <bt_conn_identity_resolved>:

#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_SMP)
void bt_conn_identity_resolved(struct bt_conn *conn)
{
   1453c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_MASTER) {
   1453e:	78c3      	ldrb	r3, [r0, #3]
{
   14540:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_MASTER) {
   14542:	b93b      	cbnz	r3, 14554 <bt_conn_identity_resolved+0x18>
		rpa = &conn->le.resp_addr;
   14544:	f100 0696 	add.w	r6, r0, #150	; 0x96
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   14548:	4b08      	ldr	r3, [pc, #32]	; (1456c <bt_conn_identity_resolved+0x30>)
   1454a:	681d      	ldr	r5, [r3, #0]
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   1454c:	f104 0788 	add.w	r7, r4, #136	; 0x88
	for (cb = callback_list; cb; cb = cb->_next) {
   14550:	b91d      	cbnz	r5, 1455a <bt_conn_identity_resolved+0x1e>
		}
	}
}
   14552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rpa = &conn->le.init_addr;
   14554:	f100 068f 	add.w	r6, r0, #143	; 0x8f
   14558:	e7f6      	b.n	14548 <bt_conn_identity_resolved+0xc>
		if (cb->identity_resolved) {
   1455a:	692b      	ldr	r3, [r5, #16]
   1455c:	b11b      	cbz	r3, 14566 <bt_conn_identity_resolved+0x2a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   1455e:	463a      	mov	r2, r7
   14560:	4631      	mov	r1, r6
   14562:	4620      	mov	r0, r4
   14564:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   14566:	69ad      	ldr	r5, [r5, #24]
   14568:	e7f2      	b.n	14550 <bt_conn_identity_resolved+0x14>
   1456a:	bf00      	nop
   1456c:	2000256c 	.word	0x2000256c

00014570 <bt_conn_security_changed>:
	conn->required_sec_level = conn->sec_level;
}

void bt_conn_security_changed(struct bt_conn *conn, uint8_t hci_err,
			      enum bt_security_err err)
{
   14570:	b570      	push	{r4, r5, r6, lr}
	conn->required_sec_level = conn->sec_level;
   14572:	7a43      	ldrb	r3, [r0, #9]
   14574:	7283      	strb	r3, [r0, #10]
{
   14576:	4604      	mov	r4, r0
   14578:	4616      	mov	r6, r2
	struct bt_conn_cb *cb;

	reset_pairing(conn);
	bt_l2cap_security_changed(conn, hci_err);
   1457a:	f009 fc35 	bl	1dde8 <bt_l2cap_security_changed>

	for (cb = callback_list; cb; cb = cb->_next) {
   1457e:	4b06      	ldr	r3, [pc, #24]	; (14598 <bt_conn_security_changed+0x28>)
   14580:	681d      	ldr	r5, [r3, #0]
   14582:	b905      	cbnz	r5, 14586 <bt_conn_security_changed+0x16>
		}
#endif /* CONFIG_BT_BREDR */

	}
#endif
}
   14584:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->security_changed) {
   14586:	696b      	ldr	r3, [r5, #20]
   14588:	b11b      	cbz	r3, 14592 <bt_conn_security_changed+0x22>
			cb->security_changed(conn, conn->sec_level, err);
   1458a:	7a61      	ldrb	r1, [r4, #9]
   1458c:	4632      	mov	r2, r6
   1458e:	4620      	mov	r0, r4
   14590:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   14592:	69ad      	ldr	r5, [r5, #24]
   14594:	e7f5      	b.n	14582 <bt_conn_security_changed+0x12>
   14596:	bf00      	nop
   14598:	2000256c 	.word	0x2000256c

0001459c <bt_conn_cb_register>:
}
#endif /* CONFIG_BT_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
   1459c:	4b02      	ldr	r3, [pc, #8]	; (145a8 <bt_conn_cb_register+0xc>)
   1459e:	681a      	ldr	r2, [r3, #0]
   145a0:	6182      	str	r2, [r0, #24]
	callback_list = cb;
   145a2:	6018      	str	r0, [r3, #0]
}
   145a4:	4770      	bx	lr
   145a6:	bf00      	nop
   145a8:	2000256c 	.word	0x2000256c

000145ac <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   145ac:	b570      	push	{r4, r5, r6, lr}
   145ae:	4606      	mov	r6, r0
   145b0:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   145b2:	480a      	ldr	r0, [pc, #40]	; (145dc <bt_conn_add_le+0x30>)
   145b4:	2101      	movs	r1, #1
   145b6:	f7ff fe13 	bl	141e0 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   145ba:	4604      	mov	r4, r0
   145bc:	b160      	cbz	r0, 145d8 <bt_conn_add_le+0x2c>
		return NULL;
	}

	conn->id = id;
   145be:	7206      	strb	r6, [r0, #8]
	memcpy(dst, src, sizeof(*dst));
   145c0:	2207      	movs	r2, #7
   145c2:	4629      	mov	r1, r5
   145c4:	3088      	adds	r0, #136	; 0x88
   145c6:	f008 fb6e 	bl	1cca6 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
   145ca:	2301      	movs	r3, #1
   145cc:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
   145ce:	72a3      	strb	r3, [r4, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   145d0:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   145d2:	4b03      	ldr	r3, [pc, #12]	; (145e0 <bt_conn_add_le+0x34>)
   145d4:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   145d8:	4620      	mov	r0, r4
   145da:	bd70      	pop	{r4, r5, r6, pc}
   145dc:	20001518 	.word	0x20001518
   145e0:	00280018 	.word	0x00280018

000145e4 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   145e4:	b570      	push	{r4, r5, r6, lr}
   145e6:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   145e8:	480c      	ldr	r0, [pc, #48]	; (1461c <bt_conn_lookup_addr_le+0x38>)
{
   145ea:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   145ec:	f009 fa81 	bl	1daf2 <bt_conn_ref>

		if (!conn) {
   145f0:	4604      	mov	r4, r0
   145f2:	b128      	cbz	r0, 14600 <bt_conn_lookup_addr_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   145f4:	7883      	ldrb	r3, [r0, #2]
   145f6:	2b01      	cmp	r3, #1
   145f8:	d004      	beq.n	14604 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
   145fa:	f009 fa95 	bl	1db28 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   145fe:	2400      	movs	r4, #0
}
   14600:	4620      	mov	r0, r4
   14602:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   14604:	4629      	mov	r1, r5
   14606:	4632      	mov	r2, r6
   14608:	f009 fb29 	bl	1dc5e <bt_conn_is_peer_addr_le>
   1460c:	4605      	mov	r5, r0
   1460e:	2800      	cmp	r0, #0
   14610:	d1f6      	bne.n	14600 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   14612:	4620      	mov	r0, r4
   14614:	f009 fa88 	bl	1db28 <bt_conn_unref>
	return NULL;
   14618:	462c      	mov	r4, r5
			continue;
   1461a:	e7f1      	b.n	14600 <bt_conn_lookup_addr_le+0x1c>
   1461c:	20001518 	.word	0x20001518

00014620 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   14620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14622:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   14624:	480e      	ldr	r0, [pc, #56]	; (14660 <bt_conn_lookup_state_le+0x40>)
{
   14626:	460e      	mov	r6, r1
   14628:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1462a:	f009 fa62 	bl	1daf2 <bt_conn_ref>

		if (!conn) {
   1462e:	4604      	mov	r4, r0
   14630:	b1a0      	cbz	r0, 1465c <bt_conn_lookup_state_le+0x3c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   14632:	7883      	ldrb	r3, [r0, #2]
   14634:	2b01      	cmp	r3, #1
   14636:	d003      	beq.n	14640 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   14638:	f009 fa76 	bl	1db28 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   1463c:	2400      	movs	r4, #0
			continue;
   1463e:	e00d      	b.n	1465c <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   14640:	b136      	cbz	r6, 14650 <bt_conn_lookup_state_le+0x30>
   14642:	4632      	mov	r2, r6
   14644:	4629      	mov	r1, r5
   14646:	f009 fb0a 	bl	1dc5e <bt_conn_is_peer_addr_le>
   1464a:	b908      	cbnz	r0, 14650 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   1464c:	4620      	mov	r0, r4
   1464e:	e7f3      	b.n	14638 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   14650:	7b63      	ldrb	r3, [r4, #13]
   14652:	42bb      	cmp	r3, r7
   14654:	d1fa      	bne.n	1464c <bt_conn_lookup_state_le+0x2c>
   14656:	7a23      	ldrb	r3, [r4, #8]
   14658:	42ab      	cmp	r3, r5
   1465a:	d1f7      	bne.n	1464c <bt_conn_lookup_state_le+0x2c>
}
   1465c:	4620      	mov	r0, r4
   1465e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14660:	20001518 	.word	0x20001518

00014664 <bt_conn_get_info>:
{
	return &conn->le.dst;
}

int bt_conn_get_info(const struct bt_conn *conn, struct bt_conn_info *info)
{
   14664:	b510      	push	{r4, lr}
	info->type = conn->type;
   14666:	7882      	ldrb	r2, [r0, #2]
   14668:	700a      	strb	r2, [r1, #0]
	info->role = conn->role;
   1466a:	78c4      	ldrb	r4, [r0, #3]
   1466c:	704c      	strb	r4, [r1, #1]
	info->id = conn->id;
   1466e:	7a03      	ldrb	r3, [r0, #8]
   14670:	708b      	strb	r3, [r1, #2]

	switch (conn->type) {
   14672:	2a01      	cmp	r2, #1
   14674:	d11c      	bne.n	146b0 <bt_conn_get_info+0x4c>
	case BT_CONN_TYPE_LE:
		info->le.dst = &conn->le.dst;
   14676:	f100 0288 	add.w	r2, r0, #136	; 0x88
   1467a:	608a      	str	r2, [r1, #8]
		info->le.src = &bt_dev.id_addr[conn->id];
   1467c:	4a0e      	ldr	r2, [pc, #56]	; (146b8 <bt_conn_get_info+0x54>)
   1467e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   14682:	4413      	add	r3, r2
   14684:	604b      	str	r3, [r1, #4]
		if (conn->role == BT_HCI_ROLE_MASTER) {
			info->le.local = &conn->le.init_addr;
			info->le.remote = &conn->le.resp_addr;
   14686:	f100 0296 	add.w	r2, r0, #150	; 0x96
			info->le.local = &conn->le.init_addr;
   1468a:	f100 038f 	add.w	r3, r0, #143	; 0x8f
		if (conn->role == BT_HCI_ROLE_MASTER) {
   1468e:	b964      	cbnz	r4, 146aa <bt_conn_get_info+0x46>
			info->le.remote = &conn->le.resp_addr;
   14690:	e9c1 3203 	strd	r3, r2, [r1, #12]
		} else {
			info->le.local = &conn->le.resp_addr;
			info->le.remote = &conn->le.init_addr;
		}
		info->le.interval = conn->le.interval;
   14694:	f8b0 309e 	ldrh.w	r3, [r0, #158]	; 0x9e
   14698:	828b      	strh	r3, [r1, #20]
		info->le.latency = conn->le.latency;
   1469a:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
   1469e:	82cb      	strh	r3, [r1, #22]
		info->le.timeout = conn->le.timeout;
   146a0:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
   146a4:	830b      	strh	r3, [r1, #24]
		info->le.phy = &conn->le.phy;
#endif
#if defined(CONFIG_BT_USER_DATA_LEN_UPDATE)
		info->le.data_len = &conn->le.data_len;
#endif
		return 0;
   146a6:	2000      	movs	r0, #0
		return 0;
#endif
	}

	return -EINVAL;
}
   146a8:	bd10      	pop	{r4, pc}
			info->le.remote = &conn->le.init_addr;
   146aa:	e9c1 2303 	strd	r2, r3, [r1, #12]
   146ae:	e7f1      	b.n	14694 <bt_conn_get_info+0x30>
	return -EINVAL;
   146b0:	f06f 0015 	mvn.w	r0, #21
   146b4:	e7f8      	b.n	146a8 <bt_conn_get_info+0x44>
   146b6:	bf00      	nop
   146b8:	200002b8 	.word	0x200002b8

000146bc <send_conn_le_param_update>:
{
   146bc:	b538      	push	{r3, r4, r5, lr}
   146be:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   146c0:	4608      	mov	r0, r1
{
   146c2:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   146c4:	f008 fee8 	bl	1d498 <bt_le_conn_params_valid>
   146c8:	b318      	cbz	r0, 14712 <send_conn_le_param_update+0x56>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   146ca:	4b13      	ldr	r3, [pc, #76]	; (14718 <send_conn_le_param_update+0x5c>)
   146cc:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   146d0:	0799      	lsls	r1, r3, #30
   146d2:	d407      	bmi.n	146e4 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
   146d4:	78e3      	ldrb	r3, [r4, #3]
   146d6:	b183      	cbz	r3, 146fa <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
   146d8:	4629      	mov	r1, r5
   146da:	4620      	mov	r0, r4
}
   146dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   146e0:	f000 b9c0 	b.w	14a64 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   146e4:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
   146e8:	079a      	lsls	r2, r3, #30
   146ea:	d5f3      	bpl.n	146d4 <send_conn_le_param_update+0x18>
   146ec:	f3bf 8f5b 	dmb	ish
   146f0:	6863      	ldr	r3, [r4, #4]
   146f2:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   146f6:	055b      	lsls	r3, r3, #21
   146f8:	d4ec      	bmi.n	146d4 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   146fa:	4629      	mov	r1, r5
   146fc:	4620      	mov	r0, r4
   146fe:	f009 fad8 	bl	1dcb2 <bt_conn_le_conn_update>
		if (rc == 0) {
   14702:	b928      	cbnz	r0, 14710 <send_conn_le_param_update+0x54>
			conn->le.pending_latency = param->latency;
   14704:	88ab      	ldrh	r3, [r5, #4]
   14706:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   1470a:	88eb      	ldrh	r3, [r5, #6]
   1470c:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   14710:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   14712:	f06f 0015 	mvn.w	r0, #21
   14716:	e7fb      	b.n	14710 <send_conn_le_param_update+0x54>
   14718:	200002b8 	.word	0x200002b8

0001471c <deferred_work>:
{
   1471c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   1471e:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
{
   14722:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
   14724:	f1a0 0558 	sub.w	r5, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   14728:	b99b      	cbnz	r3, 14752 <deferred_work+0x36>
		bt_l2cap_disconnected(conn);
   1472a:	4628      	mov	r0, r5
   1472c:	f009 fb46 	bl	1ddbc <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   14730:	4b22      	ldr	r3, [pc, #136]	; (147bc <deferred_work+0xa0>)
   14732:	681e      	ldr	r6, [r3, #0]
   14734:	b92e      	cbnz	r6, 14742 <deferred_work+0x26>
		bt_conn_unref(conn);
   14736:	4628      	mov	r0, r5
}
   14738:	b002      	add	sp, #8
   1473a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_unref(conn);
   1473e:	f009 b9f3 	b.w	1db28 <bt_conn_unref>
		if (cb->disconnected) {
   14742:	6873      	ldr	r3, [r6, #4]
   14744:	b11b      	cbz	r3, 1474e <deferred_work+0x32>
			cb->disconnected(conn, conn->err);
   14746:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
   1474a:	4628      	mov	r0, r5
   1474c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1474e:	69b6      	ldr	r6, [r6, #24]
   14750:	e7f0      	b.n	14734 <deferred_work+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
   14752:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   14756:	2b01      	cmp	r3, #1
   14758:	d128      	bne.n	147ac <deferred_work+0x90>
	if (atomic_test_and_clear_bit(conn->flags,
   1475a:	f1a0 0654 	sub.w	r6, r0, #84	; 0x54
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1475e:	f46f 7100 	mvn.w	r1, #512	; 0x200
   14762:	4630      	mov	r0, r6
   14764:	f009 f925 	bl	1d9b2 <atomic_and>
   14768:	0583      	lsls	r3, r0, #22
   1476a:	d521      	bpl.n	147b0 <deferred_work+0x94>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   1476c:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   14770:	f8ad 3000 	strh.w	r3, [sp]
   14774:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
   14778:	f8ad 3002 	strh.w	r3, [sp, #2]
   1477c:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
   14780:	f8ad 3004 	strh.w	r3, [sp, #4]
   14784:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
   14788:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
   1478c:	4669      	mov	r1, sp
   1478e:	4628      	mov	r0, r5
   14790:	f7ff ff94 	bl	146bc <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14794:	f3bf 8f5b 	dmb	ish
   14798:	e856 3f00 	ldrex	r3, [r6]
   1479c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   147a0:	e846 3200 	strex	r2, r3, [r6]
   147a4:	2a00      	cmp	r2, #0
   147a6:	d1f7      	bne.n	14798 <deferred_work+0x7c>
   147a8:	f3bf 8f5b 	dmb	ish
}
   147ac:	b002      	add	sp, #8
   147ae:	bd70      	pop	{r4, r5, r6, pc}
		param = BT_LE_CONN_PARAM(
   147b0:	4a03      	ldr	r2, [pc, #12]	; (147c0 <deferred_work+0xa4>)
   147b2:	6810      	ldr	r0, [r2, #0]
   147b4:	6851      	ldr	r1, [r2, #4]
   147b6:	466b      	mov	r3, sp
   147b8:	c303      	stmia	r3!, {r0, r1}
   147ba:	e7e7      	b.n	1478c <deferred_work+0x70>
   147bc:	2000256c 	.word	0x2000256c
   147c0:	00020e5c 	.word	0x00020e5c

000147c4 <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
   147c4:	b538      	push	{r3, r4, r5, lr}
   147c6:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
   147c8:	4906      	ldr	r1, [pc, #24]	; (147e4 <bt_conn_create_pdu_timeout+0x20>)
   147ca:	2800      	cmp	r0, #0
   147cc:	bf08      	it	eq
   147ce:	4608      	moveq	r0, r1
   147d0:	f00b f965 	bl	1fa9e <net_buf_alloc_fixed>
#else
		buf = net_buf_alloc(pool, timeout);
#endif
	}

	if (!buf) {
   147d4:	4604      	mov	r4, r0
   147d6:	b118      	cbz	r0, 147e0 <bt_conn_create_pdu_timeout+0x1c>
	net_buf_simple_reserve(&buf->b, reserve);
   147d8:	1d29      	adds	r1, r5, #4
   147da:	3008      	adds	r0, #8
   147dc:	f00b f97e 	bl	1fadc <net_buf_simple_reserve>

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);

	return buf;
}
   147e0:	4620      	mov	r0, r4
   147e2:	bd38      	pop	{r3, r4, r5, pc}
   147e4:	2000076c 	.word	0x2000076c

000147e8 <bt_conn_create_frag_timeout>:
{
   147e8:	4601      	mov	r1, r0
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   147ea:	4801      	ldr	r0, [pc, #4]	; (147f0 <bt_conn_create_frag_timeout+0x8>)
   147ec:	f7ff bfea 	b.w	147c4 <bt_conn_create_pdu_timeout>
   147f0:	200007bc 	.word	0x200007bc

000147f4 <create_frag>:
{
   147f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   147f8:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   147fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   147fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14802:	2000      	movs	r0, #0
{
   14804:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   14806:	f7ff ffef 	bl	147e8 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   1480a:	7b73      	ldrb	r3, [r6, #13]
   1480c:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   1480e:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   14810:	f04f 0600 	mov.w	r6, #0
   14814:	d005      	beq.n	14822 <create_frag+0x2e>
		net_buf_unref(frag);
   14816:	f002 fe4f 	bl	174b8 <net_buf_unref>
		return NULL;
   1481a:	4635      	mov	r5, r6
}
   1481c:	4628      	mov	r0, r5
   1481e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   14822:	6146      	str	r6, [r0, #20]
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   14824:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   14828:	4e0c      	ldr	r6, [pc, #48]	; (1485c <create_frag+0x68>)
   1482a:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   1482c:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
   14830:	f00b f9c6 	bl	1fbc0 <net_buf_simple_tailroom>
   14834:	4580      	cmp	r8, r0
   14836:	d20c      	bcs.n	14852 <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
   14838:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1483c:	f854 1f08 	ldr.w	r1, [r4, #8]!
   14840:	4632      	mov	r2, r6
   14842:	4638      	mov	r0, r7
   14844:	f00b f987 	bl	1fb56 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   14848:	4631      	mov	r1, r6
   1484a:	4620      	mov	r0, r4
   1484c:	f00b f99c 	bl	1fb88 <net_buf_simple_pull>
   14850:	e7e4      	b.n	1481c <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
   14852:	4638      	mov	r0, r7
   14854:	f00b f9b4 	bl	1fbc0 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   14858:	b286      	uxth	r6, r0
   1485a:	e7ef      	b.n	1483c <create_frag+0x48>
   1485c:	200002b8 	.word	0x200002b8

00014860 <bt_conn_process_tx>:
{
   14860:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   14862:	7b43      	ldrb	r3, [r0, #13]
{
   14864:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   14866:	b95b      	cbnz	r3, 14880 <bt_conn_process_tx+0x20>
   14868:	f06f 0140 	mvn.w	r1, #64	; 0x40
   1486c:	3004      	adds	r0, #4
   1486e:	f009 f8a0 	bl	1d9b2 <atomic_and>
   14872:	0643      	lsls	r3, r0, #25
   14874:	d504      	bpl.n	14880 <bt_conn_process_tx+0x20>
		conn_cleanup(conn);
   14876:	4620      	mov	r0, r4
}
   14878:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
   1487c:	f009 b8d7 	b.w	1da2e <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   14880:	2200      	movs	r2, #0
   14882:	2300      	movs	r3, #0
   14884:	f104 0038 	add.w	r0, r4, #56	; 0x38
   14888:	f00b f90e 	bl	1faa8 <net_buf_get>
	BT_ASSERT(buf);
   1488c:	4605      	mov	r5, r0
   1488e:	b960      	cbnz	r0, 148aa <bt_conn_process_tx+0x4a>
   14890:	4a1f      	ldr	r2, [pc, #124]	; (14910 <bt_conn_process_tx+0xb0>)
   14892:	4920      	ldr	r1, [pc, #128]	; (14914 <bt_conn_process_tx+0xb4>)
   14894:	4820      	ldr	r0, [pc, #128]	; (14918 <bt_conn_process_tx+0xb8>)
   14896:	f240 23c6 	movw	r3, #710	; 0x2c6
   1489a:	f005 ff98 	bl	1a7ce <printk>
   1489e:	4040      	eors	r0, r0
   148a0:	f380 8811 	msr	BASEPRI, r0
   148a4:	f04f 0003 	mov.w	r0, #3
   148a8:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   148aa:	4e1c      	ldr	r6, [pc, #112]	; (1491c <bt_conn_process_tx+0xbc>)
	if (buf->len <= conn_mtu(conn)) {
   148ac:	89aa      	ldrh	r2, [r5, #12]
   148ae:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   148b2:	429a      	cmp	r2, r3
   148b4:	d807      	bhi.n	148c6 <bt_conn_process_tx+0x66>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   148b6:	2300      	movs	r3, #0
   148b8:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   148ba:	4629      	mov	r1, r5
   148bc:	4620      	mov	r0, r4
   148be:	f7ff fc03 	bl	140c8 <send_frag>
	if (!send_buf(conn, buf)) {
   148c2:	b130      	cbz	r0, 148d2 <bt_conn_process_tx+0x72>
}
   148c4:	bd70      	pop	{r4, r5, r6, pc}
	frag = create_frag(conn, buf);
   148c6:	4629      	mov	r1, r5
   148c8:	4620      	mov	r0, r4
   148ca:	f7ff ff93 	bl	147f4 <create_frag>
	if (!frag) {
   148ce:	4601      	mov	r1, r0
   148d0:	b920      	cbnz	r0, 148dc <bt_conn_process_tx+0x7c>
		net_buf_unref(buf);
   148d2:	4628      	mov	r0, r5
}
   148d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
   148d8:	f002 bdee 	b.w	174b8 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   148dc:	2301      	movs	r3, #1
   148de:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   148e0:	4620      	mov	r0, r4
   148e2:	f7ff fbf1 	bl	140c8 <send_frag>
   148e6:	2800      	cmp	r0, #0
   148e8:	d0f3      	beq.n	148d2 <bt_conn_process_tx+0x72>
	while (buf->len > conn_mtu(conn)) {
   148ea:	89aa      	ldrh	r2, [r5, #12]
   148ec:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   148f0:	429a      	cmp	r2, r3
   148f2:	d802      	bhi.n	148fa <bt_conn_process_tx+0x9a>
	return send_frag(conn, buf, FRAG_END, false);
   148f4:	2300      	movs	r3, #0
   148f6:	2203      	movs	r2, #3
   148f8:	e7df      	b.n	148ba <bt_conn_process_tx+0x5a>
		frag = create_frag(conn, buf);
   148fa:	4629      	mov	r1, r5
   148fc:	4620      	mov	r0, r4
   148fe:	f7ff ff79 	bl	147f4 <create_frag>
		if (!frag) {
   14902:	4601      	mov	r1, r0
   14904:	2800      	cmp	r0, #0
   14906:	d0e4      	beq.n	148d2 <bt_conn_process_tx+0x72>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   14908:	2301      	movs	r3, #1
   1490a:	461a      	mov	r2, r3
   1490c:	e7e8      	b.n	148e0 <bt_conn_process_tx+0x80>
   1490e:	bf00      	nop
   14910:	00021ca9 	.word	0x00021ca9
   14914:	00021bf6 	.word	0x00021bf6
   14918:	00021ba2 	.word	0x00021ba2
   1491c:	200002b8 	.word	0x200002b8

00014920 <bt_conn_auth_cb_register>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
   14920:	4b0c      	ldr	r3, [pc, #48]	; (14954 <bt_conn_auth_cb_register+0x34>)
   14922:	b908      	cbnz	r0, 14928 <bt_conn_auth_cb_register+0x8>
		bt_auth = NULL;
   14924:	6018      	str	r0, [r3, #0]
		return 0;
   14926:	4770      	bx	lr
	}

	if (bt_auth) {
   14928:	681a      	ldr	r2, [r3, #0]
   1492a:	b962      	cbnz	r2, 14946 <bt_conn_auth_cb_register+0x26>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
   1492c:	6902      	ldr	r2, [r0, #16]
   1492e:	b93a      	cbnz	r2, 14940 <bt_conn_auth_cb_register+0x20>
   14930:	6802      	ldr	r2, [r0, #0]
   14932:	b95a      	cbnz	r2, 1494c <bt_conn_auth_cb_register+0x2c>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
   14934:	6842      	ldr	r2, [r0, #4]
   14936:	b94a      	cbnz	r2, 1494c <bt_conn_auth_cb_register+0x2c>
   14938:	6882      	ldr	r2, [r0, #8]
   1493a:	b93a      	cbnz	r2, 1494c <bt_conn_auth_cb_register+0x2c>
   1493c:	6942      	ldr	r2, [r0, #20]
   1493e:	b92a      	cbnz	r2, 1494c <bt_conn_auth_cb_register+0x2c>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
   14940:	6018      	str	r0, [r3, #0]
	return 0;
   14942:	2000      	movs	r0, #0
   14944:	4770      	bx	lr
		return -EALREADY;
   14946:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1494a:	4770      	bx	lr
		return -EINVAL;
   1494c:	f06f 0015 	mvn.w	r0, #21
}
   14950:	4770      	bx	lr
   14952:	bf00      	nop
   14954:	20002568 	.word	0x20002568

00014958 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   14958:	b570      	push	{r4, r5, r6, lr}
   1495a:	4d0b      	ldr	r5, [pc, #44]	; (14988 <bt_conn_init+0x30>)
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   1495c:	4e0b      	ldr	r6, [pc, #44]	; (1498c <bt_conn_init+0x34>)
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
   1495e:	2400      	movs	r4, #0
		k_fifo_put(&free_tx, &conn_tx[i]);
   14960:	4629      	mov	r1, r5
   14962:	4630      	mov	r0, r6
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
   14964:	3401      	adds	r4, #1
		k_fifo_put(&free_tx, &conn_tx[i]);
   14966:	f00b fcaa 	bl	202be <k_queue_append>
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
   1496a:	2c05      	cmp	r4, #5
   1496c:	f105 0510 	add.w	r5, r5, #16
   14970:	d1f6      	bne.n	14960 <bt_conn_init+0x8>
	}

	bt_att_init();
   14972:	f009 ff40 	bl	1e7f6 <bt_att_init>

	err = bt_smp_init();
   14976:	f002 fb67 	bl	17048 <bt_smp_init>
	if (err) {
   1497a:	4604      	mov	r4, r0
   1497c:	b908      	cbnz	r0, 14982 <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
   1497e:	f009 fad5 	bl	1df2c <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   14982:	4620      	mov	r0, r4
   14984:	bd70      	pop	{r4, r5, r6, pc}
   14986:	bf00      	nop
   14988:	20002570 	.word	0x20002570
   1498c:	20000754 	.word	0x20000754

00014990 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   14990:	4b04      	ldr	r3, [pc, #16]	; (149a4 <l2cap_accept+0x14>)
   14992:	6818      	ldr	r0, [r3, #0]
   14994:	b918      	cbnz	r0, 1499e <l2cap_accept+0xe>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
   14996:	4a04      	ldr	r2, [pc, #16]	; (149a8 <l2cap_accept+0x18>)
   14998:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
   1499a:	600b      	str	r3, [r1, #0]

		return 0;
   1499c:	4770      	bx	lr
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
   1499e:	f06f 000b 	mvn.w	r0, #11
}
   149a2:	4770      	bx	lr
   149a4:	200015d8 	.word	0x200015d8
   149a8:	00021238 	.word	0x00021238

000149ac <bt_l2cap_connected>:
{
   149ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   149b0:	4e29      	ldr	r6, [pc, #164]	; (14a58 <bt_l2cap_connected+0xac>)
   149b2:	4f2a      	ldr	r7, [pc, #168]	; (14a5c <bt_l2cap_connected+0xb0>)
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   149b4:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 14a60 <bt_l2cap_connected+0xb4>
{
   149b8:	4604      	mov	r4, r0
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   149ba:	42be      	cmp	r6, r7
   149bc:	d302      	bcc.n	149c4 <bt_l2cap_connected+0x18>
}
   149be:	b003      	add	sp, #12
   149c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
   149c4:	6873      	ldr	r3, [r6, #4]
   149c6:	a901      	add	r1, sp, #4
   149c8:	4620      	mov	r0, r4
   149ca:	4798      	blx	r3
   149cc:	2800      	cmp	r0, #0
   149ce:	db3d      	blt.n	14a4c <bt_l2cap_connected+0xa0>
		ch = BT_L2CAP_LE_CHAN(chan);
   149d0:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
   149d2:	8833      	ldrh	r3, [r6, #0]
   149d4:	f8a5 3070 	strh.w	r3, [r5, #112]	; 0x70
		ch->tx.cid = fchan->cid;
   149d8:	f8a5 307c 	strh.w	r3, [r5, #124]	; 0x7c
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   149dc:	4641      	mov	r1, r8
   149de:	f105 0010 	add.w	r0, r5, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   149e2:	f8d6 9008 	ldr.w	r9, [r6, #8]
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   149e6:	f00b fd61 	bl	204ac <k_work_init_delayable>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   149ea:	f3bf 8f5b 	dmb	ish
   149ee:	f105 0368 	add.w	r3, r5, #104	; 0x68
   149f2:	2200      	movs	r2, #0
   149f4:	e853 1f00 	ldrex	r1, [r3]
   149f8:	e843 2000 	strex	r0, r2, [r3]
   149fc:	2800      	cmp	r0, #0
   149fe:	d1f9      	bne.n	149f4 <bt_l2cap_connected+0x48>
   14a00:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   14a04:	60aa      	str	r2, [r5, #8]
	return list->tail;
   14a06:	6d62      	ldr	r2, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
   14a08:	f105 0308 	add.w	r3, r5, #8
Z_GENLIST_APPEND(slist, snode)
   14a0c:	bb02      	cbnz	r2, 14a50 <bt_l2cap_connected+0xa4>
	list->head = node;
   14a0e:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (chan->ops->connected) {
   14a12:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
   14a14:	602c      	str	r4, [r5, #0]
		if (chan->ops->connected) {
   14a16:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
   14a18:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
   14a1c:	681b      	ldr	r3, [r3, #0]
   14a1e:	b103      	cbz	r3, 14a22 <bt_l2cap_connected+0x76>
			chan->ops->connected(chan);
   14a20:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14a22:	9b01      	ldr	r3, [sp, #4]
   14a24:	f3bf 8f5b 	dmb	ish
   14a28:	3368      	adds	r3, #104	; 0x68
   14a2a:	e853 2f00 	ldrex	r2, [r3]
   14a2e:	f042 0201 	orr.w	r2, r2, #1
   14a32:	e843 2100 	strex	r1, r2, [r3]
   14a36:	2900      	cmp	r1, #0
   14a38:	d1f7      	bne.n	14a2a <bt_l2cap_connected+0x7e>
   14a3a:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   14a3e:	9801      	ldr	r0, [sp, #4]
   14a40:	6843      	ldr	r3, [r0, #4]
   14a42:	699b      	ldr	r3, [r3, #24]
   14a44:	b113      	cbz	r3, 14a4c <bt_l2cap_connected+0xa0>
			chan->ops->status(chan, chan->status);
   14a46:	f100 0168 	add.w	r1, r0, #104	; 0x68
   14a4a:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   14a4c:	360c      	adds	r6, #12
   14a4e:	e7b4      	b.n	149ba <bt_l2cap_connected+0xe>
	parent->next = child;
   14a50:	6013      	str	r3, [r2, #0]
	list->tail = node;
   14a52:	6563      	str	r3, [r4, #84]	; 0x54
}
   14a54:	e7dd      	b.n	14a12 <bt_l2cap_connected+0x66>
   14a56:	bf00      	nop
   14a58:	00020d28 	.word	0x00020d28
   14a5c:	00020d4c 	.word	0x00020d4c
   14a60:	0001dda3 	.word	0x0001dda3

00014a64 <bt_l2cap_update_conn_param>:
{
   14a64:	b573      	push	{r0, r1, r4, r5, r6, lr}
   14a66:	460d      	mov	r5, r1
	ident++;
   14a68:	4916      	ldr	r1, [pc, #88]	; (14ac4 <bt_l2cap_update_conn_param+0x60>)
   14a6a:	780b      	ldrb	r3, [r1, #0]
   14a6c:	3301      	adds	r3, #1
	if (!ident) {
   14a6e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		ident++;
   14a72:	bf08      	it	eq
   14a74:	2301      	moveq	r3, #1
   14a76:	700b      	strb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   14a78:	7809      	ldrb	r1, [r1, #0]
{
   14a7a:	4606      	mov	r6, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   14a7c:	2208      	movs	r2, #8
   14a7e:	2012      	movs	r0, #18
   14a80:	f009 f943 	bl	1dd0a <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   14a84:	4604      	mov	r4, r0
   14a86:	b1d0      	cbz	r0, 14abe <bt_l2cap_update_conn_param+0x5a>
	return net_buf_simple_add(&buf->b, len);
   14a88:	2108      	movs	r1, #8
   14a8a:	4408      	add	r0, r1
   14a8c:	f00b f85d 	bl	1fb4a <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   14a90:	882b      	ldrh	r3, [r5, #0]
   14a92:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   14a94:	886b      	ldrh	r3, [r5, #2]
   14a96:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   14a98:	88ab      	ldrh	r3, [r5, #4]
   14a9a:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   14a9c:	88eb      	ldrh	r3, [r5, #6]
   14a9e:	80c3      	strh	r3, [r0, #6]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   14aa0:	2300      	movs	r3, #0
   14aa2:	9300      	str	r3, [sp, #0]
   14aa4:	4622      	mov	r2, r4
   14aa6:	2105      	movs	r1, #5
   14aa8:	4630      	mov	r0, r6
   14aaa:	f009 f9ba 	bl	1de22 <bt_l2cap_send_cb>
	if (err) {
   14aae:	4605      	mov	r5, r0
   14ab0:	b110      	cbz	r0, 14ab8 <bt_l2cap_update_conn_param+0x54>
		net_buf_unref(buf);
   14ab2:	4620      	mov	r0, r4
   14ab4:	f002 fd00 	bl	174b8 <net_buf_unref>
}
   14ab8:	4628      	mov	r0, r5
   14aba:	b002      	add	sp, #8
   14abc:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   14abe:	f06f 050b 	mvn.w	r5, #11
   14ac2:	e7f9      	b.n	14ab8 <bt_l2cap_update_conn_param+0x54>
   14ac4:	20002b74 	.word	0x20002b74

00014ac8 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   14ac8:	4b02      	ldr	r3, [pc, #8]	; (14ad4 <att_cfm_sent+0xc>)
   14aca:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   14ace:	f009 ba40 	b.w	1df52 <att_sent>
   14ad2:	bf00      	nop
   14ad4:	0001e4b3 	.word	0x0001e4b3

00014ad8 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   14ad8:	4b02      	ldr	r3, [pc, #8]	; (14ae4 <att_rsp_sent+0xc>)
   14ada:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   14ade:	f009 ba38 	b.w	1df52 <att_sent>
   14ae2:	bf00      	nop
   14ae4:	0001e497 	.word	0x0001e497

00014ae8 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   14ae8:	4b02      	ldr	r3, [pc, #8]	; (14af4 <att_req_sent+0xc>)
   14aea:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   14aee:	f009 ba30 	b.w	1df52 <att_sent>
   14af2:	bf00      	nop
   14af4:	0001e275 	.word	0x0001e275

00014af8 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   14af8:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   14afa:	3808      	subs	r0, #8
   14afc:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   14afe:	a901      	add	r1, sp, #4
   14b00:	4802      	ldr	r0, [pc, #8]	; (14b0c <bt_att_released+0x14>)
   14b02:	f00b fb16 	bl	20132 <k_mem_slab_free>
}
   14b06:	b003      	add	sp, #12
   14b08:	f85d fb04 	ldr.w	pc, [sp], #4
   14b0c:	20000668 	.word	0x20000668

00014b10 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   14b10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   14b12:	2300      	movs	r3, #0
{
   14b14:	4607      	mov	r7, r0
   14b16:	460e      	mov	r6, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   14b18:	481e      	ldr	r0, [pc, #120]	; (14b94 <bt_att_accept+0x84>)
   14b1a:	2200      	movs	r2, #0
   14b1c:	4669      	mov	r1, sp
   14b1e:	f004 fc1b 	bl	19358 <k_mem_slab_alloc>
   14b22:	4604      	mov	r4, r0
   14b24:	b120      	cbz	r0, 14b30 <bt_att_accept+0x20>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
   14b26:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   14b2a:	4620      	mov	r0, r4
   14b2c:	b003      	add	sp, #12
   14b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
   14b30:	4601      	mov	r1, r0
   14b32:	222c      	movs	r2, #44	; 0x2c
   14b34:	9800      	ldr	r0, [sp, #0]
   14b36:	f008 f8c1 	bl	1ccbc <memset>
	att->conn = conn;
   14b3a:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   14b3c:	4816      	ldr	r0, [pc, #88]	; (14b98 <bt_att_accept+0x88>)
	list->tail = NULL;
   14b3e:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
   14b40:	e9c5 7400 	strd	r7, r4, [r5]
	list->tail = NULL;
   14b44:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
   14b48:	2200      	movs	r2, #0
   14b4a:	2300      	movs	r3, #0
   14b4c:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   14b4e:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   14b50:	f004 fc02 	bl	19358 <k_mem_slab_alloc>
   14b54:	4604      	mov	r4, r0
   14b56:	2800      	cmp	r0, #0
   14b58:	d1e5      	bne.n	14b26 <bt_att_accept+0x16>
	(void)memset(chan, 0, sizeof(*chan));
   14b5a:	4601      	mov	r1, r0
   14b5c:	f44f 72a4 	mov.w	r2, #328	; 0x148
   14b60:	9801      	ldr	r0, [sp, #4]
   14b62:	f008 f8ab 	bl	1ccbc <memset>
	chan->chan.chan.ops = &ops;
   14b66:	9801      	ldr	r0, [sp, #4]
   14b68:	4b0c      	ldr	r3, [pc, #48]	; (14b9c <bt_att_accept+0x8c>)
   14b6a:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
   14b6c:	30f8      	adds	r0, #248	; 0xf8
   14b6e:	f00b fb9a 	bl	202a6 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   14b72:	9b01      	ldr	r3, [sp, #4]
   14b74:	f3bf 8f5b 	dmb	ish
   14b78:	33f0      	adds	r3, #240	; 0xf0
   14b7a:	e853 2f00 	ldrex	r2, [r3]
   14b7e:	e843 4100 	strex	r1, r4, [r3]
   14b82:	2900      	cmp	r1, #0
   14b84:	d1f9      	bne.n	14b7a <bt_att_accept+0x6a>
   14b86:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   14b8a:	9b01      	ldr	r3, [sp, #4]
   14b8c:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
   14b90:	6033      	str	r3, [r6, #0]
	return 0;
   14b92:	e7ca      	b.n	14b2a <bt_att_accept+0x1a>
   14b94:	2000064c 	.word	0x2000064c
   14b98:	20000668 	.word	0x20000668
   14b9c:	20000508 	.word	0x20000508

00014ba0 <read_group_cb>:
{
   14ba0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   14ba4:	4605      	mov	r5, r0
   14ba6:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   14ba8:	f04f 0800 	mov.w	r8, #0
   14bac:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   14bb0:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   14bb2:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   14bb4:	f88d 8008 	strb.w	r8, [sp, #8]
   14bb8:	a902      	add	r1, sp, #8
{
   14bba:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   14bbc:	f8ad 300a 	strh.w	r3, [sp, #10]
   14bc0:	f008 f93e 	bl	1ce40 <bt_uuid_cmp>
   14bc4:	b1a0      	cbz	r0, 14bf0 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   14bc6:	f642 0301 	movw	r3, #10241	; 0x2801
   14bca:	6828      	ldr	r0, [r5, #0]
   14bcc:	f88d 800c 	strb.w	r8, [sp, #12]
   14bd0:	a903      	add	r1, sp, #12
   14bd2:	f8ad 300e 	strh.w	r3, [sp, #14]
   14bd6:	f008 f933 	bl	1ce40 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   14bda:	b148      	cbz	r0, 14bf0 <read_group_cb+0x50>
		if (data->group &&
   14bdc:	6923      	ldr	r3, [r4, #16]
   14bde:	b11b      	cbz	r3, 14be8 <read_group_cb+0x48>
   14be0:	885a      	ldrh	r2, [r3, #2]
   14be2:	42b2      	cmp	r2, r6
   14be4:	d200      	bcs.n	14be8 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   14be6:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   14be8:	2001      	movs	r0, #1
}
   14bea:	b004      	add	sp, #16
   14bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   14bf0:	6861      	ldr	r1, [r4, #4]
   14bf2:	6828      	ldr	r0, [r5, #0]
   14bf4:	f008 f924 	bl	1ce40 <bt_uuid_cmp>
   14bf8:	b110      	cbz	r0, 14c00 <read_group_cb+0x60>
		data->group = NULL;
   14bfa:	2300      	movs	r3, #0
   14bfc:	6123      	str	r3, [r4, #16]
   14bfe:	e7f3      	b.n	14be8 <read_group_cb+0x48>
	if (data->rsp->len &&
   14c00:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   14c02:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   14c04:	781a      	ldrb	r2, [r3, #0]
   14c06:	b13a      	cbz	r2, 14c18 <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   14c08:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
   14c0c:	8981      	ldrh	r1, [r0, #12]
   14c0e:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   14c10:	4293      	cmp	r3, r2
   14c12:	da01      	bge.n	14c18 <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
   14c14:	2000      	movs	r0, #0
   14c16:	e7e8      	b.n	14bea <read_group_cb+0x4a>
   14c18:	2104      	movs	r1, #4
   14c1a:	3008      	adds	r0, #8
   14c1c:	f00a ff95 	bl	1fb4a <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   14c20:	4b09      	ldr	r3, [pc, #36]	; (14c48 <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   14c22:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   14c24:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   14c26:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   14c28:	8046      	strh	r6, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   14c2a:	4629      	mov	r1, r5
   14c2c:	9300      	str	r3, [sp, #0]
   14c2e:	9401      	str	r4, [sp, #4]
   14c30:	2300      	movs	r3, #0
   14c32:	4638      	mov	r0, r7
   14c34:	f009 fb57 	bl	1e2e6 <att_chan_read>
	if (read < 0) {
   14c38:	2800      	cmp	r0, #0
   14c3a:	dbeb      	blt.n	14c14 <read_group_cb+0x74>
	if (!data->group) {
   14c3c:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   14c3e:	3800      	subs	r0, #0
   14c40:	bf18      	it	ne
   14c42:	2001      	movne	r0, #1
   14c44:	e7d1      	b.n	14bea <read_group_cb+0x4a>
   14c46:	bf00      	nop
   14c48:	0001e229 	.word	0x0001e229

00014c4c <chan_send>:
{
   14c4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   14c50:	688b      	ldr	r3, [r1, #8]
   14c52:	781b      	ldrb	r3, [r3, #0]
   14c54:	2bd2      	cmp	r3, #210	; 0xd2
{
   14c56:	4606      	mov	r6, r0
   14c58:	460c      	mov	r4, r1
   14c5a:	4617      	mov	r7, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   14c5c:	d10c      	bne.n	14c78 <chan_send+0x2c>
		err = bt_smp_sign(chan->att->conn, buf);
   14c5e:	6803      	ldr	r3, [r0, #0]
   14c60:	6818      	ldr	r0, [r3, #0]
   14c62:	f00a fd1c 	bl	1f69e <bt_smp_sign>
		if (err) {
   14c66:	4605      	mov	r5, r0
   14c68:	b130      	cbz	r0, 14c78 <chan_send+0x2c>
			net_buf_unref(buf);
   14c6a:	4620      	mov	r0, r4
   14c6c:	f002 fc24 	bl	174b8 <net_buf_unref>
}
   14c70:	4628      	mov	r0, r5
   14c72:	b003      	add	sp, #12
   14c74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   14c78:	f104 0008 	add.w	r0, r4, #8
   14c7c:	f00a ff9c 	bl	1fbb8 <net_buf_simple_headroom>
	state->len = buf->len;
   14c80:	f8b4 900c 	ldrh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   14c84:	4680      	mov	r8, r0
	chan->sent = cb ? cb : chan_cb(buf);
   14c86:	b957      	cbnz	r7, 14c9e <chan_send+0x52>
	switch (att_op_get_type(buf->data[0])) {
   14c88:	68a3      	ldr	r3, [r4, #8]
   14c8a:	7818      	ldrb	r0, [r3, #0]
   14c8c:	f009 f979 	bl	1df82 <att_op_get_type>
   14c90:	3801      	subs	r0, #1
   14c92:	b2c0      	uxtb	r0, r0
   14c94:	2804      	cmp	r0, #4
   14c96:	bf9c      	itt	ls
   14c98:	4b13      	ldrls	r3, [pc, #76]	; (14ce8 <chan_send+0x9c>)
   14c9a:	f853 7020 	ldrls.w	r7, [r3, r0, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   14c9e:	6833      	ldr	r3, [r6, #0]
	chan->sent = cb ? cb : chan_cb(buf);
   14ca0:	f8c6 7140 	str.w	r7, [r6, #320]	; 0x140
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   14ca4:	6818      	ldr	r0, [r3, #0]
	if (cb == chan_rsp_sent) {
   14ca6:	4b11      	ldr	r3, [pc, #68]	; (14cec <chan_send+0xa0>)
   14ca8:	429f      	cmp	r7, r3
   14caa:	d018      	beq.n	14cde <chan_send+0x92>
	} else if (cb == chan_cfm_sent) {
   14cac:	4b10      	ldr	r3, [pc, #64]	; (14cf0 <chan_send+0xa4>)
   14cae:	429f      	cmp	r7, r3
   14cb0:	d017      	beq.n	14ce2 <chan_send+0x96>
		return att_sent;
   14cb2:	4910      	ldr	r1, [pc, #64]	; (14cf4 <chan_send+0xa8>)
   14cb4:	4b10      	ldr	r3, [pc, #64]	; (14cf8 <chan_send+0xac>)
   14cb6:	4a11      	ldr	r2, [pc, #68]	; (14cfc <chan_send+0xb0>)
   14cb8:	428f      	cmp	r7, r1
   14cba:	bf18      	it	ne
   14cbc:	4613      	movne	r3, r2
			       &chan->chan.chan);
   14cbe:	3608      	adds	r6, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   14cc0:	9600      	str	r6, [sp, #0]
   14cc2:	4622      	mov	r2, r4
   14cc4:	2104      	movs	r1, #4
   14cc6:	f009 f8ac 	bl	1de22 <bt_l2cap_send_cb>
	if (err) {
   14cca:	4605      	mov	r5, r0
   14ccc:	2800      	cmp	r0, #0
   14cce:	d0cf      	beq.n	14c70 <chan_send+0x24>
	buf->data = buf->__buf + state->offset;
   14cd0:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   14cd2:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
   14cd6:	fa10 f088 	uxtah	r0, r0, r8
   14cda:	60a0      	str	r0, [r4, #8]
}
   14cdc:	e7c8      	b.n	14c70 <chan_send+0x24>
		return att_rsp_sent;
   14cde:	4b08      	ldr	r3, [pc, #32]	; (14d00 <chan_send+0xb4>)
   14ce0:	e7ed      	b.n	14cbe <chan_send+0x72>
		return att_cfm_sent;
   14ce2:	4b08      	ldr	r3, [pc, #32]	; (14d04 <chan_send+0xb8>)
   14ce4:	e7eb      	b.n	14cbe <chan_send+0x72>
   14ce6:	bf00      	nop
   14ce8:	00021258 	.word	0x00021258
   14cec:	0001e497 	.word	0x0001e497
   14cf0:	0001e4b3 	.word	0x0001e4b3
   14cf4:	0001e275 	.word	0x0001e275
   14cf8:	00014ae9 	.word	0x00014ae9
   14cfc:	0001df53 	.word	0x0001df53
   14d00:	00014ad9 	.word	0x00014ad9
   14d04:	00014ac9 	.word	0x00014ac9

00014d08 <bt_att_chan_send_rsp.constprop.0>:
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
   14d08:	b538      	push	{r3, r4, r5, lr}
	return chan_send(chan, buf, cb);
   14d0a:	4a07      	ldr	r2, [pc, #28]	; (14d28 <bt_att_chan_send_rsp.constprop.0+0x20>)
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
   14d0c:	4604      	mov	r4, r0
   14d0e:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
   14d10:	f7ff ff9c 	bl	14c4c <chan_send>
	if (err) {
   14d14:	b130      	cbz	r0, 14d24 <bt_att_chan_send_rsp.constprop.0+0x1c>
		net_buf_put(&chan->tx_queue, buf);
   14d16:	4629      	mov	r1, r5
   14d18:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
}
   14d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   14d20:	f00a bee0 	b.w	1fae4 <net_buf_put>
}
   14d24:	bd38      	pop	{r3, r4, r5, pc}
   14d26:	bf00      	nop
   14d28:	0001e497 	.word	0x0001e497

00014d2c <read_type_cb>:
{
   14d2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   14d30:	f8d2 8000 	ldr.w	r8, [r2]
{
   14d34:	4606      	mov	r6, r0
   14d36:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   14d38:	6800      	ldr	r0, [r0, #0]
   14d3a:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   14d3c:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
   14d40:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   14d42:	f008 f87d 	bl	1ce40 <bt_uuid_cmp>
   14d46:	4607      	mov	r7, r0
   14d48:	2800      	cmp	r0, #0
   14d4a:	d13e      	bne.n	14dca <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   14d4c:	4628      	mov	r0, r5
   14d4e:	2215      	movs	r2, #21
   14d50:	4631      	mov	r1, r6
   14d52:	f00a f99c 	bl	1f08e <bt_gatt_check_perm>
   14d56:	4605      	mov	r5, r0
   14d58:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   14d5a:	b148      	cbz	r0, 14d70 <read_type_cb+0x44>
		if (data->rsp->len) {
   14d5c:	68e3      	ldr	r3, [r4, #12]
   14d5e:	781b      	ldrb	r3, [r3, #0]
   14d60:	b923      	cbnz	r3, 14d6c <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
   14d62:	2500      	movs	r5, #0
}
   14d64:	4628      	mov	r0, r5
   14d66:	b003      	add	sp, #12
   14d68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
   14d6c:	7527      	strb	r7, [r4, #20]
   14d6e:	e7f8      	b.n	14d62 <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   14d70:	68a0      	ldr	r0, [r4, #8]
   14d72:	f00a fec8 	bl	1fb06 <net_buf_frag_last>
	return net_buf_simple_add(&buf->b, len);
   14d76:	2102      	movs	r1, #2
   14d78:	3008      	adds	r0, #8
   14d7a:	f00a fee6 	bl	1fb4a <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   14d7e:	4b14      	ldr	r3, [pc, #80]	; (14dd0 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   14d80:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   14d82:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
   14d84:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   14d88:	4631      	mov	r1, r6
   14d8a:	9300      	str	r3, [sp, #0]
   14d8c:	9401      	str	r4, [sp, #4]
   14d8e:	462b      	mov	r3, r5
   14d90:	4640      	mov	r0, r8
   14d92:	f009 faa8 	bl	1e2e6 <att_chan_read>
	if (read < 0) {
   14d96:	2800      	cmp	r0, #0
   14d98:	da07      	bge.n	14daa <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   14d9a:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   14d9e:	bf26      	itte	cs
   14da0:	4240      	negcs	r0, r0
   14da2:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   14da4:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   14da6:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   14da8:	e7dc      	b.n	14d64 <read_type_cb+0x38>
	if (!data->item) {
   14daa:	6923      	ldr	r3, [r4, #16]
   14dac:	2b00      	cmp	r3, #0
   14dae:	d0d8      	beq.n	14d62 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   14db0:	68a0      	ldr	r0, [r4, #8]
   14db2:	f009 f8c6 	bl	1df42 <net_buf_frags_len>
   14db6:	f8b8 5086 	ldrh.w	r5, [r8, #134]	; 0x86
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   14dba:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   14dbc:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   14dbe:	7818      	ldrb	r0, [r3, #0]
   14dc0:	4285      	cmp	r5, r0
   14dc2:	bf94      	ite	ls
   14dc4:	2500      	movls	r5, #0
   14dc6:	2501      	movhi	r5, #1
   14dc8:	e7cc      	b.n	14d64 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   14dca:	2501      	movs	r5, #1
   14dcc:	e7ca      	b.n	14d64 <read_type_cb+0x38>
   14dce:	bf00      	nop
   14dd0:	0001df5f 	.word	0x0001df5f

00014dd4 <bt_att_connected>:
{
   14dd4:	b570      	push	{r4, r5, r6, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   14dd6:	4606      	mov	r6, r0
{
   14dd8:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   14dda:	2104      	movs	r1, #4
   14ddc:	f856 0908 	ldr.w	r0, [r6], #-8
   14de0:	f009 f869 	bl	1deb6 <bt_l2cap_le_lookup_tx_cid>
	struct bt_att *att = att_chan->att;
   14de4:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (sys_slist_is_empty(&att->chans)) {
   14de8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   14dea:	b91b      	cbnz	r3, 14df4 <bt_att_connected+0x20>
   14dec:	f105 000c 	add.w	r0, r5, #12
   14df0:	f00b fa59 	bl	202a6 <z_impl_k_queue_init>
	parent->next = child;
   14df4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   14df6:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
Z_GENLIST_PREPEND(slist, snode)
   14dfa:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   14dfc:	f504 739e 	add.w	r3, r4, #316	; 0x13c
	list->head = node;
   14e00:	626b      	str	r3, [r5, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
   14e02:	b902      	cbnz	r2, 14e06 <bt_att_connected+0x32>
	list->tail = node;
   14e04:	62ab      	str	r3, [r5, #40]	; 0x28
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14e06:	f3bf 8f5b 	dmb	ish
   14e0a:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
   14e0e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   14e12:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   14e14:	bf58      	it	pl
   14e16:	2317      	movpl	r3, #23
	att_chan_mtu_updated(att_chan);
   14e18:	4630      	mov	r0, r6
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   14e1a:	bf5c      	itt	pl
   14e1c:	f8a4 307e 	strhpl.w	r3, [r4, #126]	; 0x7e
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   14e20:	f8a4 3072 	strhpl.w	r3, [r4, #114]	; 0x72
	att_chan_mtu_updated(att_chan);
   14e24:	f009 f9c5 	bl	1e1b2 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   14e28:	f504 7084 	add.w	r0, r4, #264	; 0x108
   14e2c:	4902      	ldr	r1, [pc, #8]	; (14e38 <bt_att_connected+0x64>)
}
   14e2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   14e32:	f00b bb3b 	b.w	204ac <k_work_init_delayable>
   14e36:	bf00      	nop
   14e38:	0001e887 	.word	0x0001e887

00014e3c <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
   14e3c:	898b      	ldrh	r3, [r1, #12]
{
   14e3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14e42:	4604      	mov	r4, r0
   14e44:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   14e46:	2b00      	cmp	r3, #0
   14e48:	d05e      	beq.n	14f08 <bt_att_recv+0xcc>
	return net_buf_simple_pull_mem(&buf->b, len);
   14e4a:	2101      	movs	r1, #1
   14e4c:	f105 0008 	add.w	r0, r5, #8
   14e50:	f00a fea2 	bl	1fb98 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   14e54:	f854 3c08 	ldr.w	r3, [r4, #-8]
   14e58:	4607      	mov	r7, r0
   14e5a:	2b00      	cmp	r3, #0
   14e5c:	d054      	beq.n	14f08 <bt_att_recv+0xcc>
		if (hdr->code == handlers[i].op) {
   14e5e:	7801      	ldrb	r1, [r0, #0]
   14e60:	4a2d      	ldr	r2, [pc, #180]	; (14f18 <bt_att_recv+0xdc>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   14e62:	f1a4 0608 	sub.w	r6, r4, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   14e66:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   14e68:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
   14e6c:	4288      	cmp	r0, r1
   14e6e:	d11b      	bne.n	14ea8 <bt_att_recv+0x6c>
		if (handler->type == ATT_REQUEST &&
   14e70:	00d9      	lsls	r1, r3, #3
   14e72:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   14e76:	f893 8002 	ldrb.w	r8, [r3, #2]
   14e7a:	f1b8 0f01 	cmp.w	r8, #1
   14e7e:	d021      	beq.n	14ec4 <bt_att_recv+0x88>
		} else if (handler->type == ATT_INDICATION &&
   14e80:	f1b8 0f05 	cmp.w	r8, #5
   14e84:	d12f      	bne.n	14ee6 <bt_att_recv+0xaa>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14e86:	f3bf 8f5b 	dmb	ish
   14e8a:	34e8      	adds	r4, #232	; 0xe8
   14e8c:	e854 3f00 	ldrex	r3, [r4]
   14e90:	f043 0002 	orr.w	r0, r3, #2
   14e94:	e844 0c00 	strex	ip, r0, [r4]
   14e98:	f1bc 0f00 	cmp.w	ip, #0
   14e9c:	d1f6      	bne.n	14e8c <bt_att_recv+0x50>
   14e9e:	f3bf 8f5b 	dmb	ish
   14ea2:	f013 0f02 	tst.w	r3, #2
   14ea6:	e01d      	b.n	14ee4 <bt_att_recv+0xa8>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   14ea8:	3301      	adds	r3, #1
   14eaa:	2b0d      	cmp	r3, #13
   14eac:	d1dc      	bne.n	14e68 <bt_att_recv+0x2c>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
   14eae:	4608      	mov	r0, r1
   14eb0:	f009 f867 	bl	1df82 <att_op_get_type>
   14eb4:	b340      	cbz	r0, 14f08 <bt_att_recv+0xcc>
	if (!req) {
   14eb6:	b339      	cbz	r1, 14f08 <bt_att_recv+0xcc>
   14eb8:	2306      	movs	r3, #6
   14eba:	2200      	movs	r2, #0
   14ebc:	4630      	mov	r0, r6
   14ebe:	f009 fbe2 	bl	1e686 <send_err_rsp.part.0>
   14ec2:	e021      	b.n	14f08 <bt_att_recv+0xcc>
   14ec4:	34e8      	adds	r4, #232	; 0xe8
   14ec6:	f3bf 8f5b 	dmb	ish
   14eca:	e854 3f00 	ldrex	r3, [r4]
   14ece:	f043 0001 	orr.w	r0, r3, #1
   14ed2:	e844 0c00 	strex	ip, r0, [r4]
   14ed6:	f1bc 0f00 	cmp.w	ip, #0
   14eda:	d1f6      	bne.n	14eca <bt_att_recv+0x8e>
   14edc:	f3bf 8f5b 	dmb	ish
		if (handler->type == ATT_REQUEST &&
   14ee0:	f013 0f01 	tst.w	r3, #1
   14ee4:	d110      	bne.n	14f08 <bt_att_recv+0xcc>
	if (buf->len < handler->expect_len) {
   14ee6:	440a      	add	r2, r1
   14ee8:	89a9      	ldrh	r1, [r5, #12]
   14eea:	7853      	ldrb	r3, [r2, #1]
   14eec:	4299      	cmp	r1, r3
   14eee:	d30e      	bcc.n	14f0e <bt_att_recv+0xd2>
		err = handler->func(att_chan, buf);
   14ef0:	6853      	ldr	r3, [r2, #4]
   14ef2:	4629      	mov	r1, r5
   14ef4:	4630      	mov	r0, r6
   14ef6:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   14ef8:	f1b8 0f01 	cmp.w	r8, #1
		err = handler->func(att_chan, buf);
   14efc:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   14efe:	d103      	bne.n	14f08 <bt_att_recv+0xcc>
   14f00:	b110      	cbz	r0, 14f08 <bt_att_recv+0xcc>
		send_err_rsp(att_chan, hdr->code, 0, err);
   14f02:	7839      	ldrb	r1, [r7, #0]
	if (!req) {
   14f04:	2900      	cmp	r1, #0
   14f06:	d1d8      	bne.n	14eba <bt_att_recv+0x7e>
}
   14f08:	2000      	movs	r0, #0
   14f0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (handler->type == ATT_REQUEST && err) {
   14f0e:	f1b8 0f01 	cmp.w	r8, #1
   14f12:	d1f9      	bne.n	14f08 <bt_att_recv+0xcc>
		err = BT_ATT_ERR_INVALID_PDU;
   14f14:	2304      	movs	r3, #4
   14f16:	e7f4      	b.n	14f02 <bt_att_recv+0xc6>
   14f18:	0002126c 	.word	0x0002126c

00014f1c <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   14f1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14f20:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   14f22:	6803      	ldr	r3, [r0, #0]
   14f24:	460e      	mov	r6, r1
   14f26:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   14f28:	b087      	sub	sp, #28
   14f2a:	4605      	mov	r5, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   14f2c:	bf18      	it	ne
   14f2e:	2101      	movne	r1, #1
   14f30:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   14f32:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   14f34:	f00a f909 	bl	1f14a <bt_gatt_change_aware>
   14f38:	2800      	cmp	r0, #0
   14f3a:	d04a      	beq.n	14fd2 <att_write_rsp.constprop.0+0xb6>
	if (!handle) {
   14f3c:	2f00      	cmp	r7, #0
   14f3e:	d04a      	beq.n	14fd6 <att_write_rsp.constprop.0+0xba>
	(void)memset(&data, 0, sizeof(data));
   14f40:	2218      	movs	r2, #24
   14f42:	2100      	movs	r1, #0
   14f44:	4668      	mov	r0, sp
   14f46:	f007 feb9 	bl	1ccbc <memset>
	if (rsp) {
   14f4a:	f1b8 0f00 	cmp.w	r8, #0
   14f4e:	d122      	bne.n	14f96 <att_write_rsp.constprop.0+0x7a>
	data.conn = chan->att->conn;
   14f50:	682b      	ldr	r3, [r5, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   14f52:	4a22      	ldr	r2, [pc, #136]	; (14fdc <att_write_rsp.constprop.0+0xc0>)
	data.conn = chan->att->conn;
   14f54:	681b      	ldr	r3, [r3, #0]
   14f56:	9300      	str	r3, [sp, #0]
	data.value = value;
   14f58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   14f5a:	9303      	str	r3, [sp, #12]
	data.len = len;
   14f5c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
   14f60:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   14f64:	2301      	movs	r3, #1
   14f66:	f88d 3014 	strb.w	r3, [sp, #20]
	data.offset = offset;
   14f6a:	f04f 0900 	mov.w	r9, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   14f6e:	466b      	mov	r3, sp
   14f70:	4639      	mov	r1, r7
   14f72:	4638      	mov	r0, r7
	data.req = req;
   14f74:	f88d 6008 	strb.w	r6, [sp, #8]
	data.offset = offset;
   14f78:	f8ad 9012 	strh.w	r9, [sp, #18]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   14f7c:	f009 f82e 	bl	1dfdc <bt_gatt_foreach_attr>
	if (data.err) {
   14f80:	f89d 4014 	ldrb.w	r4, [sp, #20]
   14f84:	b1f4      	cbz	r4, 14fc4 <att_write_rsp.constprop.0+0xa8>
		if (rsp) {
   14f86:	f1b8 0f00 	cmp.w	r8, #0
   14f8a:	d10e      	bne.n	14faa <att_write_rsp.constprop.0+0x8e>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   14f8c:	2400      	movs	r4, #0
}
   14f8e:	4620      	mov	r0, r4
   14f90:	b007      	add	sp, #28
   14f92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   14f96:	2200      	movs	r2, #0
   14f98:	4641      	mov	r1, r8
   14f9a:	4628      	mov	r0, r5
   14f9c:	f009 fb4e 	bl	1e63c <bt_att_chan_create_pdu>
   14fa0:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   14fa2:	2800      	cmp	r0, #0
   14fa4:	d1d4      	bne.n	14f50 <att_write_rsp.constprop.0+0x34>
			return BT_ATT_ERR_UNLIKELY;
   14fa6:	240e      	movs	r4, #14
   14fa8:	e7f1      	b.n	14f8e <att_write_rsp.constprop.0+0x72>
			net_buf_unref(data.buf);
   14faa:	9801      	ldr	r0, [sp, #4]
   14fac:	f002 fa84 	bl	174b8 <net_buf_unref>
	if (!req) {
   14fb0:	2e00      	cmp	r6, #0
   14fb2:	d0eb      	beq.n	14f8c <att_write_rsp.constprop.0+0x70>
   14fb4:	f89d 3014 	ldrb.w	r3, [sp, #20]
   14fb8:	463a      	mov	r2, r7
   14fba:	4631      	mov	r1, r6
   14fbc:	4628      	mov	r0, r5
   14fbe:	f009 fb62 	bl	1e686 <send_err_rsp.part.0>
   14fc2:	e7e3      	b.n	14f8c <att_write_rsp.constprop.0+0x70>
	if (data.buf) {
   14fc4:	9901      	ldr	r1, [sp, #4]
   14fc6:	2900      	cmp	r1, #0
   14fc8:	d0e0      	beq.n	14f8c <att_write_rsp.constprop.0+0x70>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   14fca:	4628      	mov	r0, r5
   14fcc:	f7ff fe9c 	bl	14d08 <bt_att_chan_send_rsp.constprop.0>
   14fd0:	e7dd      	b.n	14f8e <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   14fd2:	2412      	movs	r4, #18
   14fd4:	e7db      	b.n	14f8e <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_INVALID_HANDLE;
   14fd6:	2401      	movs	r4, #1
   14fd8:	e7d9      	b.n	14f8e <att_write_rsp.constprop.0+0x72>
   14fda:	bf00      	nop
   14fdc:	0001e28b 	.word	0x0001e28b

00014fe0 <att_read_group_req>:
{
   14fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   14fe4:	898c      	ldrh	r4, [r1, #12]
   14fe6:	3c04      	subs	r4, #4
   14fe8:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   14fea:	2c02      	cmp	r4, #2
{
   14fec:	4605      	mov	r5, r0
   14fee:	b08c      	sub	sp, #48	; 0x30
   14ff0:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   14ff2:	d001      	beq.n	14ff8 <att_read_group_req+0x18>
   14ff4:	2c10      	cmp	r4, #16
   14ff6:	d16e      	bne.n	150d6 <att_read_group_req+0xf6>
   14ff8:	2104      	movs	r1, #4
   14ffa:	3008      	adds	r0, #8
   14ffc:	f00a fdcc 	bl	1fb98 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   15000:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   15004:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   15006:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   15008:	1d01      	adds	r1, r0, #4
   1500a:	4622      	mov	r2, r4
   1500c:	4640      	mov	r0, r8
   1500e:	f007 ff45 	bl	1ce9c <bt_uuid_create>
   15012:	2800      	cmp	r0, #0
   15014:	d061      	beq.n	150da <att_read_group_req+0xfa>
	if (!start || !end) {
   15016:	2e00      	cmp	r6, #0
   15018:	d03a      	beq.n	15090 <att_read_group_req+0xb0>
   1501a:	2400      	movs	r4, #0
   1501c:	2f00      	cmp	r7, #0
   1501e:	d036      	beq.n	1508e <att_read_group_req+0xae>
	if (start > end) {
   15020:	42be      	cmp	r6, r7
   15022:	d835      	bhi.n	15090 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   15024:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   15028:	a901      	add	r1, sp, #4
   1502a:	4640      	mov	r0, r8
   1502c:	f88d 4004 	strb.w	r4, [sp, #4]
   15030:	f8ad 3006 	strh.w	r3, [sp, #6]
   15034:	f007 ff04 	bl	1ce40 <bt_uuid_cmp>
   15038:	2800      	cmp	r0, #0
   1503a:	d134      	bne.n	150a6 <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
   1503c:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   1503e:	2214      	movs	r2, #20
   15040:	2100      	movs	r1, #0
   15042:	a807      	add	r0, sp, #28
   15044:	f007 fe3a 	bl	1ccbc <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   15048:	2201      	movs	r2, #1
   1504a:	2111      	movs	r1, #17
   1504c:	4620      	mov	r0, r4
   1504e:	f009 fb5d 	bl	1e70c <bt_att_create_pdu>
   15052:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   15054:	2800      	cmp	r0, #0
   15056:	d040      	beq.n	150da <att_read_group_req+0xfa>
	return net_buf_simple_add(&buf->b, len);
   15058:	2101      	movs	r1, #1
   1505a:	3008      	adds	r0, #8
	data.uuid = uuid;
   1505c:	e9cd 5807 	strd	r5, r8, [sp, #28]
   15060:	f00a fd73 	bl	1fb4a <net_buf_simple_add>
	data.rsp->len = 0U;
   15064:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   15068:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1506a:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
   1506c:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   15070:	4a1b      	ldr	r2, [pc, #108]	; (150e0 <att_read_group_req+0x100>)
	data.group = NULL;
   15072:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   15076:	4639      	mov	r1, r7
   15078:	4630      	mov	r0, r6
   1507a:	f008 ffaf 	bl	1dfdc <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   1507e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15080:	781c      	ldrb	r4, [r3, #0]
   15082:	bb1c      	cbnz	r4, 150cc <att_read_group_req+0xec>
		net_buf_unref(data.buf);
   15084:	9809      	ldr	r0, [sp, #36]	; 0x24
   15086:	f002 fa17 	bl	174b8 <net_buf_unref>
	if (!req) {
   1508a:	230a      	movs	r3, #10
   1508c:	e018      	b.n	150c0 <att_read_group_req+0xe0>
			*err = 0U;
   1508e:	463e      	mov	r6, r7
	if (!req) {
   15090:	2301      	movs	r3, #1
   15092:	4632      	mov	r2, r6
   15094:	2110      	movs	r1, #16
   15096:	4628      	mov	r0, r5
   15098:	f009 faf5 	bl	1e686 <send_err_rsp.part.0>
		return 0;
   1509c:	2400      	movs	r4, #0
}
   1509e:	4620      	mov	r0, r4
   150a0:	b00c      	add	sp, #48	; 0x30
   150a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   150a6:	f642 0301 	movw	r3, #10241	; 0x2801
   150aa:	a907      	add	r1, sp, #28
   150ac:	4640      	mov	r0, r8
   150ae:	f88d 401c 	strb.w	r4, [sp, #28]
   150b2:	f8ad 301e 	strh.w	r3, [sp, #30]
   150b6:	f007 fec3 	bl	1ce40 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   150ba:	2800      	cmp	r0, #0
   150bc:	d0be      	beq.n	1503c <att_read_group_req+0x5c>
	if (!req) {
   150be:	2310      	movs	r3, #16
   150c0:	4632      	mov	r2, r6
   150c2:	2110      	movs	r1, #16
   150c4:	4628      	mov	r0, r5
   150c6:	f009 fade 	bl	1e686 <send_err_rsp.part.0>
		return 0;
   150ca:	e7e8      	b.n	1509e <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   150cc:	9909      	ldr	r1, [sp, #36]	; 0x24
   150ce:	4628      	mov	r0, r5
   150d0:	f7ff fe1a 	bl	14d08 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   150d4:	e7e2      	b.n	1509c <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
   150d6:	2404      	movs	r4, #4
   150d8:	e7e1      	b.n	1509e <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
   150da:	240e      	movs	r4, #14
   150dc:	e7df      	b.n	1509e <att_read_group_req+0xbe>
   150de:	bf00      	nop
   150e0:	00014ba1 	.word	0x00014ba1

000150e4 <att_read_mult_req>:
{
   150e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   150e8:	6886      	ldr	r6, [r0, #8]
{
   150ea:	b085      	sub	sp, #20
   150ec:	4604      	mov	r4, r0
   150ee:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   150f0:	4630      	mov	r0, r6
   150f2:	2101      	movs	r1, #1
   150f4:	f00a f829 	bl	1f14a <bt_gatt_change_aware>
   150f8:	b3b8      	cbz	r0, 1516a <att_read_mult_req+0x86>
	(void)memset(&data, 0, sizeof(data));
   150fa:	2210      	movs	r2, #16
   150fc:	2100      	movs	r1, #0
   150fe:	4668      	mov	r0, sp
   15100:	f007 fddc 	bl	1ccbc <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   15104:	2200      	movs	r2, #0
   15106:	210f      	movs	r1, #15
   15108:	4630      	mov	r0, r6
   1510a:	f009 faff 	bl	1e70c <bt_att_create_pdu>
   1510e:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   15110:	b368      	cbz	r0, 1516e <att_read_mult_req+0x8a>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   15112:	f8df 9060 	ldr.w	r9, [pc, #96]	; 15174 <att_read_mult_req+0x90>
	data.chan = chan;
   15116:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   15118:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1511c:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   15120:	89ab      	ldrh	r3, [r5, #12]
   15122:	2b01      	cmp	r3, #1
   15124:	d804      	bhi.n	15130 <att_read_mult_req+0x4c>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   15126:	9902      	ldr	r1, [sp, #8]
   15128:	4620      	mov	r0, r4
   1512a:	f7ff fded 	bl	14d08 <bt_att_chan_send_rsp.constprop.0>
   1512e:	e018      	b.n	15162 <att_read_mult_req+0x7e>
   15130:	4638      	mov	r0, r7
   15132:	f00a fd39 	bl	1fba8 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   15136:	466b      	mov	r3, sp
   15138:	464a      	mov	r2, r9
   1513a:	4601      	mov	r1, r0
   1513c:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1513e:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   15142:	f008 ff4b 	bl	1dfdc <bt_gatt_foreach_attr>
		if (data.err) {
   15146:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1514a:	2b00      	cmp	r3, #0
   1514c:	d0e8      	beq.n	15120 <att_read_mult_req+0x3c>
			net_buf_unref(data.buf);
   1514e:	9802      	ldr	r0, [sp, #8]
   15150:	f002 f9b2 	bl	174b8 <net_buf_unref>
	if (!req) {
   15154:	f89d 300c 	ldrb.w	r3, [sp, #12]
   15158:	4632      	mov	r2, r6
   1515a:	210e      	movs	r1, #14
   1515c:	4620      	mov	r0, r4
   1515e:	f009 fa92 	bl	1e686 <send_err_rsp.part.0>
	return 0;
   15162:	2000      	movs	r0, #0
}
   15164:	b005      	add	sp, #20
   15166:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1516a:	2012      	movs	r0, #18
   1516c:	e7fa      	b.n	15164 <att_read_mult_req+0x80>
		return BT_ATT_ERR_UNLIKELY;
   1516e:	200e      	movs	r0, #14
   15170:	e7f8      	b.n	15164 <att_read_mult_req+0x80>
   15172:	bf00      	nop
   15174:	0001e4cf 	.word	0x0001e4cf

00015178 <att_read_rsp>:
{
   15178:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1517c:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
   15180:	4605      	mov	r5, r0
   15182:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
   15184:	4640      	mov	r0, r8
   15186:	2101      	movs	r1, #1
{
   15188:	4614      	mov	r4, r2
   1518a:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
   1518c:	f009 ffdd 	bl	1f14a <bt_gatt_change_aware>
   15190:	b388      	cbz	r0, 151f6 <att_read_rsp+0x7e>
	if (!handle) {
   15192:	b396      	cbz	r6, 151fa <att_read_rsp+0x82>
	(void)memset(&data, 0, sizeof(data));
   15194:	2210      	movs	r2, #16
   15196:	2100      	movs	r1, #0
   15198:	4668      	mov	r0, sp
   1519a:	f007 fd8f 	bl	1ccbc <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   1519e:	2200      	movs	r2, #0
   151a0:	4621      	mov	r1, r4
   151a2:	4640      	mov	r0, r8
   151a4:	f009 fab2 	bl	1e70c <bt_att_create_pdu>
   151a8:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   151aa:	b340      	cbz	r0, 151fe <att_read_rsp+0x86>
	data.offset = offset;
   151ac:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   151b0:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   151b4:	2301      	movs	r3, #1
   151b6:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   151ba:	4a12      	ldr	r2, [pc, #72]	; (15204 <att_read_rsp+0x8c>)
	data.chan = chan;
   151bc:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   151be:	466b      	mov	r3, sp
   151c0:	4631      	mov	r1, r6
   151c2:	4630      	mov	r0, r6
   151c4:	f008 ff0a 	bl	1dfdc <bt_gatt_foreach_attr>
	if (data.err) {
   151c8:	f89d 400c 	ldrb.w	r4, [sp, #12]
   151cc:	b174      	cbz	r4, 151ec <att_read_rsp+0x74>
		net_buf_unref(data.buf);
   151ce:	9802      	ldr	r0, [sp, #8]
   151d0:	f002 f972 	bl	174b8 <net_buf_unref>
	if (!req) {
   151d4:	f89d 300c 	ldrb.w	r3, [sp, #12]
   151d8:	4632      	mov	r2, r6
   151da:	4639      	mov	r1, r7
   151dc:	4628      	mov	r0, r5
   151de:	f009 fa52 	bl	1e686 <send_err_rsp.part.0>
		return 0;
   151e2:	2400      	movs	r4, #0
}
   151e4:	4620      	mov	r0, r4
   151e6:	b004      	add	sp, #16
   151e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   151ec:	9902      	ldr	r1, [sp, #8]
   151ee:	4628      	mov	r0, r5
   151f0:	f7ff fd8a 	bl	14d08 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   151f4:	e7f6      	b.n	151e4 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   151f6:	2412      	movs	r4, #18
   151f8:	e7f4      	b.n	151e4 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
   151fa:	2401      	movs	r4, #1
   151fc:	e7f2      	b.n	151e4 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   151fe:	240e      	movs	r4, #14
   15200:	e7f0      	b.n	151e4 <att_read_rsp+0x6c>
   15202:	bf00      	nop
   15204:	0001e4cf 	.word	0x0001e4cf

00015208 <att_read_type_req>:
{
   15208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   1520c:	898c      	ldrh	r4, [r1, #12]
   1520e:	3c04      	subs	r4, #4
   15210:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   15212:	2c02      	cmp	r4, #2
{
   15214:	4605      	mov	r5, r0
   15216:	b08c      	sub	sp, #48	; 0x30
   15218:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   1521a:	d001      	beq.n	15220 <att_read_type_req+0x18>
   1521c:	2c10      	cmp	r4, #16
   1521e:	d14f      	bne.n	152c0 <att_read_type_req+0xb8>
	return net_buf_simple_pull_mem(&buf->b, len);
   15220:	2104      	movs	r1, #4
   15222:	3008      	adds	r0, #8
   15224:	f00a fcb8 	bl	1fb98 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   15228:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   1522c:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1522e:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   15230:	1d01      	adds	r1, r0, #4
   15232:	4622      	mov	r2, r4
   15234:	4640      	mov	r0, r8
   15236:	f007 fe31 	bl	1ce9c <bt_uuid_create>
   1523a:	b188      	cbz	r0, 15260 <att_read_type_req+0x58>
	if (!start || !end) {
   1523c:	b19e      	cbz	r6, 15266 <att_read_type_req+0x5e>
   1523e:	b18f      	cbz	r7, 15264 <att_read_type_req+0x5c>
	if (start > end) {
   15240:	42b7      	cmp	r7, r6
   15242:	d310      	bcc.n	15266 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   15244:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   15246:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   15248:	2100      	movs	r1, #0
   1524a:	eb0d 0002 	add.w	r0, sp, r2
   1524e:	f007 fd35 	bl	1ccbc <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   15252:	2201      	movs	r2, #1
   15254:	2109      	movs	r1, #9
   15256:	4620      	mov	r0, r4
   15258:	f009 fa58 	bl	1e70c <bt_att_create_pdu>
   1525c:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   1525e:	b968      	cbnz	r0, 1527c <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
   15260:	240e      	movs	r4, #14
   15262:	e007      	b.n	15274 <att_read_type_req+0x6c>
			*err = 0U;
   15264:	463e      	mov	r6, r7
	if (!req) {
   15266:	2301      	movs	r3, #1
   15268:	4632      	mov	r2, r6
   1526a:	2108      	movs	r1, #8
   1526c:	4628      	mov	r0, r5
   1526e:	f009 fa0a 	bl	1e686 <send_err_rsp.part.0>
		return 0;
   15272:	2400      	movs	r4, #0
}
   15274:	4620      	mov	r0, r4
   15276:	b00c      	add	sp, #48	; 0x30
   15278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   1527c:	2101      	movs	r1, #1
   1527e:	3008      	adds	r0, #8
	data.uuid = uuid;
   15280:	e9cd 5806 	strd	r5, r8, [sp, #24]
   15284:	f00a fc61 	bl	1fb4a <net_buf_simple_add>
	data.rsp->len = 0U;
   15288:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1528c:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1528e:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   15290:	4a0c      	ldr	r2, [pc, #48]	; (152c4 <att_read_type_req+0xbc>)
	data.rsp->len = 0U;
   15292:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   15296:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   15298:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   1529c:	4630      	mov	r0, r6
   1529e:	ab06      	add	r3, sp, #24
   152a0:	f008 fe9c 	bl	1dfdc <bt_gatt_foreach_attr>
	if (data.err) {
   152a4:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   152a8:	b12c      	cbz	r4, 152b6 <att_read_type_req+0xae>
		net_buf_unref(data.buf);
   152aa:	9808      	ldr	r0, [sp, #32]
   152ac:	f002 f904 	bl	174b8 <net_buf_unref>
	if (!req) {
   152b0:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   152b4:	e7d8      	b.n	15268 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   152b6:	9908      	ldr	r1, [sp, #32]
   152b8:	4628      	mov	r0, r5
   152ba:	f7ff fd25 	bl	14d08 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   152be:	e7d9      	b.n	15274 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
   152c0:	2404      	movs	r4, #4
   152c2:	e7d7      	b.n	15274 <att_read_type_req+0x6c>
   152c4:	00014d2d 	.word	0x00014d2d

000152c8 <att_find_type_req>:
{
   152c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   152cc:	4688      	mov	r8, r1
   152ce:	b086      	sub	sp, #24
   152d0:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   152d2:	2106      	movs	r1, #6
   152d4:	f108 0008 	add.w	r0, r8, #8
   152d8:	f00a fc5e 	bl	1fb98 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   152dc:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
   152de:	b317      	cbz	r7, 15326 <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
   152e0:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
   152e4:	f1b9 0f00 	cmp.w	r9, #0
   152e8:	d01c      	beq.n	15324 <att_find_type_req+0x5c>
	if (start > end) {
   152ea:	454f      	cmp	r7, r9
   152ec:	d81b      	bhi.n	15326 <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
   152ee:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   152f0:	f8ad 3002 	strh.w	r3, [sp, #2]
   152f4:	2400      	movs	r4, #0
   152f6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   152fa:	a901      	add	r1, sp, #4
   152fc:	4668      	mov	r0, sp
	value = buf->data;
   152fe:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   15302:	f88d 4000 	strb.w	r4, [sp]
   15306:	f88d 4004 	strb.w	r4, [sp, #4]
   1530a:	f8ad 3006 	strh.w	r3, [sp, #6]
   1530e:	f007 fd97 	bl	1ce40 <bt_uuid_cmp>
   15312:	4606      	mov	r6, r0
   15314:	b190      	cbz	r0, 1533c <att_find_type_req+0x74>
	if (!req) {
   15316:	230a      	movs	r3, #10
   15318:	463a      	mov	r2, r7
   1531a:	2106      	movs	r1, #6
   1531c:	4628      	mov	r0, r5
   1531e:	f009 f9b2 	bl	1e686 <send_err_rsp.part.0>
		return 0;
   15322:	e007      	b.n	15334 <att_find_type_req+0x6c>
			*err = 0U;
   15324:	464f      	mov	r7, r9
	if (!req) {
   15326:	2301      	movs	r3, #1
   15328:	463a      	mov	r2, r7
   1532a:	2106      	movs	r1, #6
   1532c:	4628      	mov	r0, r5
   1532e:	f009 f9aa 	bl	1e686 <send_err_rsp.part.0>
		return 0;
   15332:	2400      	movs	r4, #0
}
   15334:	4620      	mov	r0, r4
   15336:	b006      	add	sp, #24
   15338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   1533c:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
   15340:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   15344:	4601      	mov	r1, r0
   15346:	2214      	movs	r2, #20
   15348:	a801      	add	r0, sp, #4
   1534a:	f007 fcb7 	bl	1ccbc <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   1534e:	4632      	mov	r2, r6
   15350:	2107      	movs	r1, #7
   15352:	4640      	mov	r0, r8
   15354:	f009 f9da 	bl	1e70c <bt_att_create_pdu>
   15358:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1535a:	b1d8      	cbz	r0, 15394 <att_find_type_req+0xcc>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1535c:	230a      	movs	r3, #10
   1535e:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   15362:	4a0d      	ldr	r2, [pc, #52]	; (15398 <att_find_type_req+0xd0>)
	data.value_len = value_len;
   15364:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   15368:	ab01      	add	r3, sp, #4
   1536a:	4649      	mov	r1, r9
   1536c:	4638      	mov	r0, r7
	data.value = value;
   1536e:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
   15372:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   15374:	f008 fe32 	bl	1dfdc <bt_gatt_foreach_attr>
	if (data.err) {
   15378:	f89d 4015 	ldrb.w	r4, [sp, #21]
   1537c:	b12c      	cbz	r4, 1538a <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
   1537e:	9802      	ldr	r0, [sp, #8]
   15380:	f002 f89a 	bl	174b8 <net_buf_unref>
	if (!req) {
   15384:	f89d 3015 	ldrb.w	r3, [sp, #21]
   15388:	e7ce      	b.n	15328 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1538a:	9902      	ldr	r1, [sp, #8]
   1538c:	4628      	mov	r0, r5
   1538e:	f7ff fcbb 	bl	14d08 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   15392:	e7cf      	b.n	15334 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   15394:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   15396:	e7cd      	b.n	15334 <att_find_type_req+0x6c>
   15398:	0001dff3 	.word	0x0001dff3

0001539c <att_find_info_req>:
{
   1539c:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   1539e:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   153a0:	881e      	ldrh	r6, [r3, #0]
{
   153a2:	b085      	sub	sp, #20
   153a4:	4605      	mov	r5, r0
	if (!start || !end) {
   153a6:	b19e      	cbz	r6, 153d0 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
   153a8:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
   153aa:	b184      	cbz	r4, 153ce <att_find_info_req+0x32>
	if (start > end) {
   153ac:	42b4      	cmp	r4, r6
   153ae:	d30f      	bcc.n	153d0 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   153b0:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   153b2:	2210      	movs	r2, #16
   153b4:	2100      	movs	r1, #0
   153b6:	4668      	mov	r0, sp
   153b8:	f007 fc80 	bl	1ccbc <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   153bc:	2200      	movs	r2, #0
   153be:	2105      	movs	r1, #5
   153c0:	4638      	mov	r0, r7
   153c2:	f009 f9a3 	bl	1e70c <bt_att_create_pdu>
   153c6:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   153c8:	b958      	cbnz	r0, 153e2 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   153ca:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   153cc:	e007      	b.n	153de <att_find_info_req+0x42>
			*err = 0U;
   153ce:	4626      	mov	r6, r4
	if (!req) {
   153d0:	2301      	movs	r3, #1
   153d2:	4632      	mov	r2, r6
   153d4:	2104      	movs	r1, #4
   153d6:	4628      	mov	r0, r5
   153d8:	f009 f955 	bl	1e686 <send_err_rsp.part.0>
	return 0;
   153dc:	2000      	movs	r0, #0
}
   153de:	b005      	add	sp, #20
   153e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   153e2:	4621      	mov	r1, r4
   153e4:	4a08      	ldr	r2, [pc, #32]	; (15408 <att_find_info_req+0x6c>)
	data.chan = chan;
   153e6:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   153e8:	466b      	mov	r3, sp
   153ea:	4630      	mov	r0, r6
   153ec:	f008 fdf6 	bl	1dfdc <bt_gatt_foreach_attr>
	if (!data.rsp) {
   153f0:	9c02      	ldr	r4, [sp, #8]
   153f2:	b924      	cbnz	r4, 153fe <att_find_info_req+0x62>
		net_buf_unref(data.buf);
   153f4:	9801      	ldr	r0, [sp, #4]
   153f6:	f002 f85f 	bl	174b8 <net_buf_unref>
	if (!req) {
   153fa:	230a      	movs	r3, #10
   153fc:	e7e9      	b.n	153d2 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   153fe:	9901      	ldr	r1, [sp, #4]
   15400:	4628      	mov	r0, r5
   15402:	f7ff fc81 	bl	14d08 <bt_att_chan_send_rsp.constprop.0>
   15406:	e7e9      	b.n	153dc <att_find_info_req+0x40>
   15408:	0001e11b 	.word	0x0001e11b

0001540c <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   1540c:	b513      	push	{r0, r1, r4, lr}
   1540e:	4602      	mov	r2, r0
   15410:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   15412:	4808      	ldr	r0, [pc, #32]	; (15434 <bt_att_req_alloc+0x28>)
   15414:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
   15416:	2400      	movs	r4, #0
   15418:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   1541a:	f003 ff9d 	bl	19358 <k_mem_slab_alloc>
   1541e:	4601      	mov	r1, r0
   15420:	b930      	cbnz	r0, 15430 <bt_att_req_alloc+0x24>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   15422:	9801      	ldr	r0, [sp, #4]
   15424:	221c      	movs	r2, #28
   15426:	f007 fc49 	bl	1ccbc <memset>

	return req;
   1542a:	9801      	ldr	r0, [sp, #4]
}
   1542c:	b002      	add	sp, #8
   1542e:	bd10      	pop	{r4, pc}
		return NULL;
   15430:	4620      	mov	r0, r4
   15432:	e7fb      	b.n	1542c <bt_att_req_alloc+0x20>
   15434:	20000684 	.word	0x20000684

00015438 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   15438:	b507      	push	{r0, r1, r2, lr}
   1543a:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
   1543c:	6880      	ldr	r0, [r0, #8]
   1543e:	b120      	cbz	r0, 1544a <bt_att_req_free+0x12>
		net_buf_unref(req->buf);
   15440:	f002 f83a 	bl	174b8 <net_buf_unref>
		req->buf = NULL;
   15444:	9b01      	ldr	r3, [sp, #4]
   15446:	2200      	movs	r2, #0
   15448:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   1544a:	4803      	ldr	r0, [pc, #12]	; (15458 <bt_att_req_free+0x20>)
   1544c:	a901      	add	r1, sp, #4
   1544e:	f00a fe70 	bl	20132 <k_mem_slab_free>
}
   15452:	b003      	add	sp, #12
   15454:	f85d fb04 	ldr.w	pc, [sp], #4
   15458:	20000684 	.word	0x20000684

0001545c <att_handle_rsp>:
{
   1545c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   15460:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
   15462:	f500 7088 	add.w	r0, r0, #272	; 0x110
{
   15466:	4688      	mov	r8, r1
   15468:	4691      	mov	r9, r2
   1546a:	461f      	mov	r7, r3
	k_work_cancel_delayable(&chan->timeout_work);
   1546c:	f00b f82a 	bl	204c4 <k_work_cancel_delayable>
	if (!chan->req) {
   15470:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
   15474:	2600      	movs	r6, #0
   15476:	b1f0      	cbz	r0, 154b6 <att_handle_rsp+0x5a>
	if (chan->req == &cancel) {
   15478:	4b10      	ldr	r3, [pc, #64]	; (154bc <att_handle_rsp+0x60>)
   1547a:	4298      	cmp	r0, r3
   1547c:	d112      	bne.n	154a4 <att_handle_rsp+0x48>
		chan->req = NULL;
   1547e:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
	bt_att_func_t func = NULL;
   15482:	4635      	mov	r5, r6
	att_req_send_process(chan->att);
   15484:	6820      	ldr	r0, [r4, #0]
   15486:	f009 f889 	bl	1e59c <att_req_send_process>
	if (func) {
   1548a:	b13d      	cbz	r5, 1549c <att_handle_rsp+0x40>
		func(chan->att->conn, err, pdu, len, params);
   1548c:	6820      	ldr	r0, [r4, #0]
   1548e:	f8cd a000 	str.w	sl, [sp]
   15492:	6800      	ldr	r0, [r0, #0]
   15494:	464b      	mov	r3, r9
   15496:	4642      	mov	r2, r8
   15498:	4639      	mov	r1, r7
   1549a:	47a8      	blx	r5
}
   1549c:	2000      	movs	r0, #0
   1549e:	b002      	add	sp, #8
   154a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	func = chan->req->func;
   154a4:	6845      	ldr	r5, [r0, #4]
	chan->req->func = NULL;
   154a6:	6046      	str	r6, [r0, #4]
	params = chan->req->user_data;
   154a8:	f8d0 a018 	ldr.w	sl, [r0, #24]
	bt_att_req_free(chan->req);
   154ac:	f7ff ffc4 	bl	15438 <bt_att_req_free>
	chan->req = NULL;
   154b0:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
   154b4:	e7e6      	b.n	15484 <att_handle_rsp+0x28>
	bt_att_func_t func = NULL;
   154b6:	4605      	mov	r5, r0
   154b8:	e7e4      	b.n	15484 <att_handle_rsp+0x28>
   154ba:	bf00      	nop
   154bc:	200025c0 	.word	0x200025c0

000154c0 <bt_att_disconnected>:
{
   154c0:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
   154c2:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
   154c6:	b085      	sub	sp, #20
   154c8:	4604      	mov	r4, r0
	if (!att_chan->att) {
   154ca:	2d00      	cmp	r5, #0
   154cc:	d04b      	beq.n	15566 <bt_att_disconnected+0xa6>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   154ce:	f500 719e 	add.w	r1, r0, #316	; 0x13c
   154d2:	f105 0024 	add.w	r0, r5, #36	; 0x24
   154d6:	f008 ffc4 	bl	1e462 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   154da:	f1a4 0608 	sub.w	r6, r4, #8
   154de:	f104 07f0 	add.w	r7, r4, #240	; 0xf0
   154e2:	2200      	movs	r2, #0
   154e4:	2300      	movs	r3, #0
   154e6:	4638      	mov	r0, r7
   154e8:	f00a fade 	bl	1faa8 <net_buf_get>
   154ec:	4602      	mov	r2, r0
   154ee:	bb10      	cbnz	r0, 15536 <bt_att_disconnected+0x76>
	if (chan->req) {
   154f0:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   154f4:	b123      	cbz	r3, 15500 <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   154f6:	4601      	mov	r1, r0
   154f8:	230e      	movs	r3, #14
   154fa:	4630      	mov	r0, r6
   154fc:	f7ff ffae 	bl	1545c <att_handle_rsp>
	chan->att = NULL;
   15500:	2300      	movs	r3, #0
   15502:	f844 3c08 	str.w	r3, [r4, #-8]
	if (!sys_slist_is_empty(&att->chans)) {
   15506:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   15508:	bb6b      	cbnz	r3, 15566 <bt_att_disconnected+0xa6>
	att_reset(att);
   1550a:	9503      	str	r5, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   1550c:	9803      	ldr	r0, [sp, #12]
   1550e:	2200      	movs	r2, #0
   15510:	2300      	movs	r3, #0
   15512:	300c      	adds	r0, #12
   15514:	f00a fac8 	bl	1faa8 <net_buf_get>
   15518:	b980      	cbnz	r0, 1553c <bt_att_disconnected+0x7c>
	att->conn = NULL;
   1551a:	9a03      	ldr	r2, [sp, #12]
	return list->head;
   1551c:	6855      	ldr	r5, [r2, #4]
   1551e:	6010      	str	r0, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   15520:	b97d      	cbnz	r5, 15542 <bt_att_disconnected+0x82>
	k_mem_slab_free(&att_slab, (void **)&att);
   15522:	4812      	ldr	r0, [pc, #72]	; (1556c <bt_att_disconnected+0xac>)
   15524:	a903      	add	r1, sp, #12
   15526:	f00a fe04 	bl	20132 <k_mem_slab_free>
	bt_gatt_disconnected(ch->chan.conn);
   1552a:	6820      	ldr	r0, [r4, #0]
}
   1552c:	b005      	add	sp, #20
   1552e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_gatt_disconnected(ch->chan.conn);
   15532:	f000 be91 	b.w	16258 <bt_gatt_disconnected>
		net_buf_unref(buf);
   15536:	f001 ffbf 	bl	174b8 <net_buf_unref>
   1553a:	e7d2      	b.n	154e2 <bt_att_disconnected+0x22>
		net_buf_unref(buf);
   1553c:	f001 ffbc 	bl	174b8 <net_buf_unref>
   15540:	e7e4      	b.n	1550c <bt_att_disconnected+0x4c>
	return node->next;
   15542:	682e      	ldr	r6, [r5, #0]
		if (req->func) {
   15544:	686f      	ldr	r7, [r5, #4]
   15546:	b137      	cbz	r7, 15556 <bt_att_disconnected+0x96>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
   15548:	69ab      	ldr	r3, [r5, #24]
   1554a:	9300      	str	r3, [sp, #0]
   1554c:	2300      	movs	r3, #0
   1554e:	461a      	mov	r2, r3
   15550:	210e      	movs	r1, #14
   15552:	4618      	mov	r0, r3
   15554:	47b8      	blx	r7
		bt_att_req_free(req);
   15556:	4628      	mov	r0, r5
   15558:	f7ff ff6e 	bl	15438 <bt_att_req_free>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   1555c:	2e00      	cmp	r6, #0
   1555e:	d0e0      	beq.n	15522 <bt_att_disconnected+0x62>
   15560:	4635      	mov	r5, r6
   15562:	6836      	ldr	r6, [r6, #0]
   15564:	e7ee      	b.n	15544 <bt_att_disconnected+0x84>
}
   15566:	b005      	add	sp, #20
   15568:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1556a:	bf00      	nop
   1556c:	2000064c 	.word	0x2000064c

00015570 <db_hash_set>:

SETTINGS_STATIC_HANDLER_DEFINE(bt_cf, "bt/cf", NULL, cf_set, NULL, NULL);

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
   15570:	b510      	push	{r4, lr}
	ssize_t len;

	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   15572:	4904      	ldr	r1, [pc, #16]	; (15584 <db_hash_set+0x14>)
{
   15574:	4614      	mov	r4, r2
	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   15576:	4618      	mov	r0, r3
   15578:	2210      	movs	r2, #16
   1557a:	47a0      	blx	r4

	BT_HEXDUMP_DBG(db_hash.stored_hash, sizeof(db_hash.stored_hash),
		       "Stored Hash: ");

	return 0;
}
   1557c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   15580:	bd10      	pop	{r4, pc}
   15582:	bf00      	nop
   15584:	200016d0 	.word	0x200016d0

00015588 <find_cf_cfg>:
{
   15588:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1558a:	4d0f      	ldr	r5, [pc, #60]	; (155c8 <find_cf_cfg+0x40>)
   1558c:	4604      	mov	r4, r0
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1558e:	2600      	movs	r6, #0
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   15590:	462f      	mov	r7, r5
		if (!conn) {
   15592:	1c68      	adds	r0, r5, #1
   15594:	b954      	cbnz	r4, 155ac <find_cf_cfg+0x24>
	return memcmp(a, b, sizeof(*a));
   15596:	2207      	movs	r2, #7
   15598:	4669      	mov	r1, sp
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1559a:	9400      	str	r4, [sp, #0]
   1559c:	f8cd 4003 	str.w	r4, [sp, #3]
   155a0:	f007 fb70 	bl	1cc84 <memcmp>
   155a4:	b948      	cbnz	r0, 155ba <find_cf_cfg+0x32>
}
   155a6:	4638      	mov	r0, r7
   155a8:	b003      	add	sp, #12
   155aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   155ac:	4602      	mov	r2, r0
   155ae:	7829      	ldrb	r1, [r5, #0]
   155b0:	4620      	mov	r0, r4
   155b2:	f008 fb54 	bl	1dc5e <bt_conn_is_peer_addr_le>
   155b6:	2800      	cmp	r0, #0
   155b8:	d1f5      	bne.n	155a6 <find_cf_cfg+0x1e>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   155ba:	3601      	adds	r6, #1
   155bc:	2e04      	cmp	r6, #4
   155be:	f105 0510 	add.w	r5, r5, #16
   155c2:	d1e5      	bne.n	15590 <find_cf_cfg+0x8>
	return NULL;
   155c4:	2700      	movs	r7, #0
   155c6:	e7ee      	b.n	155a6 <find_cf_cfg+0x1e>
   155c8:	200025e4 	.word	0x200025e4

000155cc <sc_store>:
{
   155cc:	b570      	push	{r4, r5, r6, lr}
	if (cfg->id) {
   155ce:	4605      	mov	r5, r0
{
   155d0:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
   155d2:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   155d6:	4604      	mov	r4, r0
	if (cfg->id) {
   155d8:	b19a      	cbz	r2, 15602 <sc_store+0x36>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
   155da:	ae02      	add	r6, sp, #8
   155dc:	2104      	movs	r1, #4
   155de:	4630      	mov	r0, r6
   155e0:	f005 f83f 	bl	1a662 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
   155e4:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
   155e6:	462b      	mov	r3, r5
   155e8:	a803      	add	r0, sp, #12
   155ea:	4a07      	ldr	r2, [pc, #28]	; (15608 <sc_store+0x3c>)
   155ec:	2124      	movs	r1, #36	; 0x24
   155ee:	f7fd f85f 	bl	126b0 <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
   155f2:	2204      	movs	r2, #4
   155f4:	f104 0108 	add.w	r1, r4, #8
   155f8:	a803      	add	r0, sp, #12
   155fa:	f7fb fc69 	bl	10ed0 <settings_save_one>
}
   155fe:	b00c      	add	sp, #48	; 0x30
   15600:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
   15602:	9200      	str	r2, [sp, #0]
   15604:	e7ef      	b.n	155e6 <sc_store+0x1a>
   15606:	bf00      	nop
   15608:	00021cf1 	.word	0x00021cf1

0001560c <db_hash_commit>:

static int db_hash_commit(void)
{
   1560c:	b508      	push	{r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1560e:	2108      	movs	r1, #8
   15610:	4804      	ldr	r0, [pc, #16]	; (15624 <db_hash_commit+0x18>)
   15612:	f009 fa1b 	bl	1ea4c <atomic_or>
	atomic_set_bit(gatt_sc.flags, DB_HASH_LOAD);
	/* Reschedule work to calculate and compare against the Hash value
	 * loaded from flash.
	 */
	k_work_reschedule(&db_hash.work, K_NO_WAIT);
   15616:	2200      	movs	r2, #0
   15618:	2300      	movs	r3, #0
   1561a:	4803      	ldr	r0, [pc, #12]	; (15628 <db_hash_commit+0x1c>)
   1561c:	f004 fab2 	bl	19b84 <k_work_reschedule>

	return 0;
}
   15620:	2000      	movs	r0, #0
   15622:	bd08      	pop	{r3, pc}
   15624:	20001788 	.word	0x20001788
   15628:	200016e0 	.word	0x200016e0

0001562c <sc_commit>:
{
   1562c:	b508      	push	{r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1562e:	4809      	ldr	r0, [pc, #36]	; (15654 <sc_commit+0x28>)
   15630:	f06f 0102 	mvn.w	r1, #2
   15634:	f009 fa38 	bl	1eaa8 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   15638:	4806      	ldr	r0, [pc, #24]	; (15654 <sc_commit+0x28>)
   1563a:	f009 f9ab 	bl	1e994 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1563e:	07c3      	lsls	r3, r0, #31
   15640:	d505      	bpl.n	1564e <sc_commit+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   15642:	4805      	ldr	r0, [pc, #20]	; (15658 <sc_commit+0x2c>)
   15644:	f44f 72a4 	mov.w	r2, #328	; 0x148
   15648:	2300      	movs	r3, #0
   1564a:	f004 fa9b 	bl	19b84 <k_work_reschedule>
}
   1564e:	2000      	movs	r0, #0
   15650:	bd08      	pop	{r3, pc}
   15652:	bf00      	nop
   15654:	20001788 	.word	0x20001788
   15658:	20001758 	.word	0x20001758

0001565c <find_cf_cfg_by_addr>:
{
   1565c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1565e:	4d0c      	ldr	r5, [pc, #48]	; (15690 <find_cf_cfg_by_addr+0x34>)
   15660:	4606      	mov	r6, r0
   15662:	460f      	mov	r7, r1
   15664:	2400      	movs	r4, #0
			if (id == cf_cfg[i].id &&
   15666:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   1566a:	42b3      	cmp	r3, r6
   1566c:	d108      	bne.n	15680 <find_cf_cfg_by_addr+0x24>
   1566e:	2207      	movs	r2, #7
   15670:	4629      	mov	r1, r5
   15672:	4638      	mov	r0, r7
   15674:	f007 fb06 	bl	1cc84 <memcmp>
   15678:	b910      	cbnz	r0, 15680 <find_cf_cfg_by_addr+0x24>
				return &cf_cfg[i];
   1567a:	4806      	ldr	r0, [pc, #24]	; (15694 <find_cf_cfg_by_addr+0x38>)
   1567c:	4420      	add	r0, r4
}
   1567e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   15680:	3410      	adds	r4, #16
   15682:	2c40      	cmp	r4, #64	; 0x40
   15684:	f105 0510 	add.w	r5, r5, #16
   15688:	d1ed      	bne.n	15666 <find_cf_cfg_by_addr+0xa>
	return NULL;
   1568a:	2000      	movs	r0, #0
   1568c:	e7f7      	b.n	1567e <find_cf_cfg_by_addr+0x22>
   1568e:	bf00      	nop
   15690:	200025e5 	.word	0x200025e5
   15694:	200025e4 	.word	0x200025e4

00015698 <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
   15698:	b508      	push	{r3, lr}
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
   1569a:	6881      	ldr	r1, [r0, #8]
{
   1569c:	4613      	mov	r3, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1569e:	4a07      	ldr	r2, [pc, #28]	; (156bc <remove_peer_from_attr+0x24>)
   156a0:	4291      	cmp	r1, r2
   156a2:	d109      	bne.n	156b8 <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
   156a4:	791a      	ldrb	r2, [r3, #4]
   156a6:	6819      	ldr	r1, [r3, #0]
   156a8:	68c0      	ldr	r0, [r0, #12]
   156aa:	f009 fb14 	bl	1ecd6 <ccc_find_cfg>
	if (cfg) {
   156ae:	b118      	cbz	r0, 156b8 <remove_peer_from_attr+0x20>
		memset(cfg, 0, sizeof(*cfg));
   156b0:	220a      	movs	r2, #10
   156b2:	2100      	movs	r1, #0
   156b4:	f007 fb02 	bl	1ccbc <memset>
	}

	return BT_GATT_ITER_CONTINUE;
}
   156b8:	2001      	movs	r0, #1
   156ba:	bd08      	pop	{r3, pc}
   156bc:	0001ed29 	.word	0x0001ed29

000156c0 <ccc_load>:
{
   156c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   156c2:	4b21      	ldr	r3, [pc, #132]	; (15748 <ccc_load+0x88>)
{
   156c4:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   156c6:	6882      	ldr	r2, [r0, #8]
   156c8:	429a      	cmp	r2, r3
   156ca:	d002      	beq.n	156d2 <ccc_load+0x12>
		return BT_GATT_ITER_CONTINUE;
   156cc:	2001      	movs	r0, #1
}
   156ce:	b002      	add	sp, #8
   156d0:	bd70      	pop	{r4, r5, r6, pc}
	if (!load->entry) {
   156d2:	68a3      	ldr	r3, [r4, #8]
   156d4:	68c6      	ldr	r6, [r0, #12]
   156d6:	b94b      	cbnz	r3, 156ec <ccc_load+0x2c>
	cfg = ccc_find_cfg(ccc, addr, id);
   156d8:	7922      	ldrb	r2, [r4, #4]
   156da:	6821      	ldr	r1, [r4, #0]
   156dc:	4630      	mov	r0, r6
   156de:	f009 fafa 	bl	1ecd6 <ccc_find_cfg>
	if (!cfg) {
   156e2:	2800      	cmp	r0, #0
   156e4:	d0f2      	beq.n	156cc <ccc_load+0xc>
	clear_ccc_cfg(cfg);
   156e6:	f009 f9d1 	bl	1ea8c <clear_ccc_cfg>
   156ea:	e7ef      	b.n	156cc <ccc_load+0xc>
	} else if (!load->count) {
   156ec:	68e0      	ldr	r0, [r4, #12]
   156ee:	2800      	cmp	r0, #0
   156f0:	d0ed      	beq.n	156ce <ccc_load+0xe>
	if (load->entry->handle != handle) {
   156f2:	881b      	ldrh	r3, [r3, #0]
   156f4:	4299      	cmp	r1, r3
   156f6:	d00a      	beq.n	1570e <ccc_load+0x4e>
		if (load->entry->handle < handle) {
   156f8:	d9e8      	bls.n	156cc <ccc_load+0xc>
	load->count--;
   156fa:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
   156fc:	68a3      	ldr	r3, [r4, #8]
	load->count--;
   156fe:	3801      	subs	r0, #1
	load->entry++;
   15700:	3304      	adds	r3, #4
	load->count--;
   15702:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   15704:	3800      	subs	r0, #0
	load->entry++;
   15706:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   15708:	bf18      	it	ne
   1570a:	2001      	movne	r0, #1
   1570c:	e7df      	b.n	156ce <ccc_load+0xe>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
   1570e:	7922      	ldrb	r2, [r4, #4]
   15710:	6821      	ldr	r1, [r4, #0]
   15712:	4630      	mov	r0, r6
   15714:	f009 fadf 	bl	1ecd6 <ccc_find_cfg>
	if (!cfg) {
   15718:	4605      	mov	r5, r0
   1571a:	b980      	cbnz	r0, 1573e <ccc_load+0x7e>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
   1571c:	9000      	str	r0, [sp, #0]
   1571e:	4602      	mov	r2, r0
   15720:	f8cd 0003 	str.w	r0, [sp, #3]
   15724:	4669      	mov	r1, sp
   15726:	4630      	mov	r0, r6
   15728:	f009 fad5 	bl	1ecd6 <ccc_find_cfg>
		if (!cfg) {
   1572c:	4605      	mov	r5, r0
   1572e:	2800      	cmp	r0, #0
   15730:	d0e3      	beq.n	156fa <ccc_load+0x3a>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
   15732:	6821      	ldr	r1, [r4, #0]
   15734:	3001      	adds	r0, #1
   15736:	f009 f9a6 	bl	1ea86 <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
   1573a:	7923      	ldrb	r3, [r4, #4]
   1573c:	702b      	strb	r3, [r5, #0]
	cfg->value = load->entry->value;
   1573e:	68a3      	ldr	r3, [r4, #8]
   15740:	885b      	ldrh	r3, [r3, #2]
   15742:	812b      	strh	r3, [r5, #8]
   15744:	e7d9      	b.n	156fa <ccc_load+0x3a>
   15746:	bf00      	nop
   15748:	0001ed29 	.word	0x0001ed29

0001574c <ccc_save>:
{
   1574c:	b538      	push	{r3, r4, r5, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1574e:	4b0c      	ldr	r3, [pc, #48]	; (15780 <ccc_save+0x34>)
{
   15750:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   15752:	6882      	ldr	r2, [r0, #8]
   15754:	429a      	cmp	r2, r3
{
   15756:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
   15758:	d10f      	bne.n	1577a <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
   1575a:	7922      	ldrb	r2, [r4, #4]
   1575c:	6821      	ldr	r1, [r4, #0]
   1575e:	68c0      	ldr	r0, [r0, #12]
   15760:	f009 fab9 	bl	1ecd6 <ccc_find_cfg>
	if (!cfg) {
   15764:	b148      	cbz	r0, 1577a <ccc_save+0x2e>
	save->store[save->count].handle = handle;
   15766:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
	save->store[save->count].value = cfg->value;
   1576a:	8901      	ldrh	r1, [r0, #8]
   1576c:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
   15770:	3301      	adds	r3, #1
	save->store[save->count].handle = handle;
   15772:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
   15774:	8151      	strh	r1, [r2, #10]
	save->count++;
   15776:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
   1577a:	2001      	movs	r0, #1
   1577c:	bd38      	pop	{r3, r4, r5, pc}
   1577e:	bf00      	nop
   15780:	0001ed29 	.word	0x0001ed29

00015784 <find_sc_cfg>:
{
   15784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15786:	4d0c      	ldr	r5, [pc, #48]	; (157b8 <find_sc_cfg+0x34>)
   15788:	4606      	mov	r6, r0
   1578a:	460f      	mov	r7, r1
   1578c:	2400      	movs	r4, #0
		if (id == sc_cfg[i].id &&
   1578e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   15792:	42b3      	cmp	r3, r6
   15794:	d108      	bne.n	157a8 <find_sc_cfg+0x24>
   15796:	2207      	movs	r2, #7
   15798:	4639      	mov	r1, r7
   1579a:	4628      	mov	r0, r5
   1579c:	f007 fa72 	bl	1cc84 <memcmp>
   157a0:	b910      	cbnz	r0, 157a8 <find_sc_cfg+0x24>
			return &sc_cfg[i];
   157a2:	4806      	ldr	r0, [pc, #24]	; (157bc <find_sc_cfg+0x38>)
   157a4:	4420      	add	r0, r4
}
   157a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   157a8:	340c      	adds	r4, #12
   157aa:	2c30      	cmp	r4, #48	; 0x30
   157ac:	f105 050c 	add.w	r5, r5, #12
   157b0:	d1ed      	bne.n	1578e <find_sc_cfg+0xa>
	return NULL;
   157b2:	2000      	movs	r0, #0
   157b4:	e7f7      	b.n	157a6 <find_sc_cfg+0x22>
   157b6:	bf00      	nop
   157b8:	20002965 	.word	0x20002965
   157bc:	20002964 	.word	0x20002964

000157c0 <bt_gatt_clear_sc>:
{
   157c0:	b570      	push	{r4, r5, r6, lr}
   157c2:	b08c      	sub	sp, #48	; 0x30
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   157c4:	f7ff ffde 	bl	15784 <find_sc_cfg>
	if (!cfg) {
   157c8:	4604      	mov	r4, r0
   157ca:	b1b8      	cbz	r0, 157fc <bt_gatt_clear_sc+0x3c>
		if (cfg->id) {
   157cc:	4605      	mov	r5, r0
   157ce:	f815 2b01 	ldrb.w	r2, [r5], #1
   157d2:	b1b2      	cbz	r2, 15802 <bt_gatt_clear_sc+0x42>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
   157d4:	ae02      	add	r6, sp, #8
   157d6:	2104      	movs	r1, #4
   157d8:	4630      	mov	r0, r6
   157da:	f004 ff42 	bl	1a662 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
   157de:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
   157e0:	4a09      	ldr	r2, [pc, #36]	; (15808 <bt_gatt_clear_sc+0x48>)
   157e2:	2124      	movs	r1, #36	; 0x24
   157e4:	462b      	mov	r3, r5
   157e6:	a803      	add	r0, sp, #12
   157e8:	f7fc ff62 	bl	126b0 <bt_settings_encode_key>
		err = settings_delete(key);
   157ec:	a803      	add	r0, sp, #12
   157ee:	f005 fec0 	bl	1b572 <settings_delete>
	memset(cfg, 0, sizeof(*cfg));
   157f2:	220c      	movs	r2, #12
   157f4:	2100      	movs	r1, #0
   157f6:	4620      	mov	r0, r4
   157f8:	f007 fa60 	bl	1ccbc <memset>
}
   157fc:	2000      	movs	r0, #0
   157fe:	b00c      	add	sp, #48	; 0x30
   15800:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
   15802:	9200      	str	r2, [sp, #0]
   15804:	e7ec      	b.n	157e0 <bt_gatt_clear_sc+0x20>
   15806:	bf00      	nop
   15808:	00021cf1 	.word	0x00021cf1

0001580c <disconnected_cb>:
{
   1580c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   15810:	4b1f      	ldr	r3, [pc, #124]	; (15890 <disconnected_cb+0x84>)
{
   15812:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   15814:	6882      	ldr	r2, [r0, #8]
   15816:	429a      	cmp	r2, r3
{
   15818:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1581a:	d102      	bne.n	15822 <disconnected_cb+0x16>
	ccc = attr->user_data;
   1581c:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
   1581e:	8963      	ldrh	r3, [r4, #10]
   15820:	b9c3      	cbnz	r3, 15854 <disconnected_cb+0x48>
}
   15822:	2001      	movs	r0, #1
   15824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   15828:	f105 0888 	add.w	r8, r5, #136	; 0x88
   1582c:	7a28      	ldrb	r0, [r5, #8]
   1582e:	4641      	mov	r1, r8
   15830:	f007 febc 	bl	1d5ac <bt_addr_le_is_bonded>
   15834:	b948      	cbnz	r0, 1584a <disconnected_cb+0x3e>
				if (ccc == &sc_ccc) {
   15836:	4b17      	ldr	r3, [pc, #92]	; (15894 <disconnected_cb+0x88>)
   15838:	429c      	cmp	r4, r3
   1583a:	d102      	bne.n	15842 <disconnected_cb+0x36>
					sc_clear(conn);
   1583c:	4628      	mov	r0, r5
   1583e:	f009 fb16 	bl	1ee6e <sc_clear>
				clear_ccc_cfg(cfg);
   15842:	4620      	mov	r0, r4
   15844:	f009 f922 	bl	1ea8c <clear_ccc_cfg>
	if (!value_used) {
   15848:	e019      	b.n	1587e <disconnected_cb+0x72>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1584a:	4641      	mov	r1, r8
   1584c:	4638      	mov	r0, r7
   1584e:	f009 f91a 	bl	1ea86 <bt_addr_le_copy>
	if (!value_used) {
   15852:	e014      	b.n	1587e <disconnected_cb+0x72>
		if (!cfg->value) {
   15854:	8923      	ldrh	r3, [r4, #8]
   15856:	b193      	cbz	r3, 1587e <disconnected_cb+0x72>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   15858:	4627      	mov	r7, r4
   1585a:	4628      	mov	r0, r5
   1585c:	f817 1b01 	ldrb.w	r1, [r7], #1
   15860:	463a      	mov	r2, r7
   15862:	f008 f9fc 	bl	1dc5e <bt_conn_is_peer_addr_le>
   15866:	2800      	cmp	r0, #0
   15868:	d1de      	bne.n	15828 <disconnected_cb+0x1c>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1586a:	7820      	ldrb	r0, [r4, #0]
   1586c:	4639      	mov	r1, r7
   1586e:	f7fe feb9 	bl	145e4 <bt_conn_lookup_addr_le>
			if (tmp) {
   15872:	b120      	cbz	r0, 1587e <disconnected_cb+0x72>
				if (tmp->state == BT_CONN_CONNECTED) {
   15874:	7b45      	ldrb	r5, [r0, #13]
				bt_conn_unref(tmp);
   15876:	f008 f957 	bl	1db28 <bt_conn_unref>
	if (!value_used) {
   1587a:	2d07      	cmp	r5, #7
   1587c:	d0d1      	beq.n	15822 <disconnected_cb+0x16>
		if (ccc->cfg_changed) {
   1587e:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   15880:	2100      	movs	r1, #0
   15882:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   15884:	2b00      	cmp	r3, #0
   15886:	d0cc      	beq.n	15822 <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   15888:	4630      	mov	r0, r6
   1588a:	4798      	blx	r3
   1588c:	e7c9      	b.n	15822 <disconnected_cb+0x16>
   1588e:	bf00      	nop
   15890:	0001ed29 	.word	0x0001ed29
   15894:	20000558 	.word	0x20000558

00015898 <sc_indicate_rsp>:
{
   15898:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1589a:	f06f 0102 	mvn.w	r1, #2
   1589e:	4604      	mov	r4, r0
   158a0:	480d      	ldr	r0, [pc, #52]	; (158d8 <sc_indicate_rsp+0x40>)
   158a2:	f009 f901 	bl	1eaa8 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   158a6:	480c      	ldr	r0, [pc, #48]	; (158d8 <sc_indicate_rsp+0x40>)
   158a8:	f009 f874 	bl	1e994 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   158ac:	07c2      	lsls	r2, r0, #31
   158ae:	d504      	bpl.n	158ba <sc_indicate_rsp+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   158b0:	480a      	ldr	r0, [pc, #40]	; (158dc <sc_indicate_rsp+0x44>)
   158b2:	2200      	movs	r2, #0
   158b4:	2300      	movs	r3, #0
   158b6:	f004 f965 	bl	19b84 <k_work_reschedule>
	cfg = find_cf_cfg(conn);
   158ba:	4620      	mov	r0, r4
   158bc:	f7ff fe64 	bl	15588 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   158c0:	b140      	cbz	r0, 158d4 <sc_indicate_rsp+0x3c>
   158c2:	7a03      	ldrb	r3, [r0, #8]
   158c4:	07db      	lsls	r3, r3, #31
   158c6:	d505      	bpl.n	158d4 <sc_indicate_rsp+0x3c>
}
   158c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   158cc:	2101      	movs	r1, #1
   158ce:	300c      	adds	r0, #12
   158d0:	f009 b8bc 	b.w	1ea4c <atomic_or>
   158d4:	bd10      	pop	{r4, pc}
   158d6:	bf00      	nop
   158d8:	20001788 	.word	0x20001788
   158dc:	20001758 	.word	0x20001758

000158e0 <bt_gatt_init>:
{
   158e0:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   158e2:	4b22      	ldr	r3, [pc, #136]	; (1596c <bt_gatt_init+0x8c>)
   158e4:	f3bf 8f5b 	dmb	ish
   158e8:	2201      	movs	r2, #1
   158ea:	e853 1f00 	ldrex	r1, [r3]
   158ee:	2900      	cmp	r1, #0
   158f0:	d103      	bne.n	158fa <bt_gatt_init+0x1a>
   158f2:	e843 2000 	strex	r0, r2, [r3]
   158f6:	2800      	cmp	r0, #0
   158f8:	d1f7      	bne.n	158ea <bt_gatt_init+0xa>
   158fa:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   158fe:	d134      	bne.n	1596a <bt_gatt_init+0x8a>
   15900:	f3bf 8f5b 	dmb	ish
   15904:	4b1a      	ldr	r3, [pc, #104]	; (15970 <bt_gatt_init+0x90>)
   15906:	e853 1f00 	ldrex	r1, [r3]
   1590a:	2900      	cmp	r1, #0
   1590c:	d103      	bne.n	15916 <bt_gatt_init+0x36>
   1590e:	e843 2000 	strex	r0, r2, [r3]
   15912:	2800      	cmp	r0, #0
   15914:	d1f7      	bne.n	15906 <bt_gatt_init+0x26>
   15916:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   1591a:	d108      	bne.n	1592e <bt_gatt_init+0x4e>
   1591c:	4915      	ldr	r1, [pc, #84]	; (15974 <bt_gatt_init+0x94>)
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1591e:	4a16      	ldr	r2, [pc, #88]	; (15978 <bt_gatt_init+0x98>)
   15920:	880b      	ldrh	r3, [r1, #0]
   15922:	4c16      	ldr	r4, [pc, #88]	; (1597c <bt_gatt_init+0x9c>)
	if (!atomic_cas(&service_init, 0, 1)) {
   15924:	2000      	movs	r0, #0
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   15926:	42a2      	cmp	r2, r4
   15928:	d319      	bcc.n	1595e <bt_gatt_init+0x7e>
   1592a:	b100      	cbz	r0, 1592e <bt_gatt_init+0x4e>
   1592c:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
   1592e:	4b14      	ldr	r3, [pc, #80]	; (15980 <bt_gatt_init+0xa0>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   15930:	4914      	ldr	r1, [pc, #80]	; (15984 <bt_gatt_init+0xa4>)
   15932:	4815      	ldr	r0, [pc, #84]	; (15988 <bt_gatt_init+0xa8>)
   15934:	2200      	movs	r2, #0
	list->tail = NULL;
   15936:	e9c3 2200 	strd	r2, r2, [r3]
   1593a:	f00a fdb7 	bl	204ac <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   1593e:	f44f 72a4 	mov.w	r2, #328	; 0x148
   15942:	2300      	movs	r3, #0
   15944:	4810      	ldr	r0, [pc, #64]	; (15988 <bt_gatt_init+0xa8>)
   15946:	f004 f8e9 	bl	19b1c <k_work_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
   1594a:	4910      	ldr	r1, [pc, #64]	; (1598c <bt_gatt_init+0xac>)
   1594c:	4810      	ldr	r0, [pc, #64]	; (15990 <bt_gatt_init+0xb0>)
   1594e:	f00a fdad 	bl	204ac <k_work_init_delayable>
}
   15952:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   15956:	480f      	ldr	r0, [pc, #60]	; (15994 <bt_gatt_init+0xb4>)
   15958:	2102      	movs	r1, #2
   1595a:	f009 b877 	b.w	1ea4c <atomic_or>
		last_static_handle += svc->attr_count;
   1595e:	6850      	ldr	r0, [r2, #4]
   15960:	4403      	add	r3, r0
   15962:	b29b      	uxth	r3, r3
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   15964:	3208      	adds	r2, #8
   15966:	2001      	movs	r0, #1
   15968:	e7dd      	b.n	15926 <bt_gatt_init+0x46>
}
   1596a:	bd10      	pop	{r4, pc}
   1596c:	20002624 	.word	0x20002624
   15970:	20002640 	.word	0x20002640
   15974:	20002962 	.word	0x20002962
   15978:	00020d4c 	.word	0x00020d4c
   1597c:	00020d64 	.word	0x00020d64
   15980:	200025dc 	.word	0x200025dc
   15984:	00015b21 	.word	0x00015b21
   15988:	200016e0 	.word	0x200016e0
   1598c:	00015dfd 	.word	0x00015dfd
   15990:	20001758 	.word	0x20001758
   15994:	20001788 	.word	0x20001788

00015998 <bt_gatt_attr_get_handle>:
{
   15998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   1599c:	4603      	mov	r3, r0
   1599e:	b148      	cbz	r0, 159b4 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
   159a0:	8a00      	ldrh	r0, [r0, #16]
   159a2:	b938      	cbnz	r0, 159b4 <bt_gatt_attr_get_handle+0x1c>
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   159a4:	4912      	ldr	r1, [pc, #72]	; (159f0 <bt_gatt_attr_get_handle+0x58>)
   159a6:	f8df e04c 	ldr.w	lr, [pc, #76]	; 159f4 <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
   159aa:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   159ac:	f04f 0c14 	mov.w	ip, #20
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   159b0:	4571      	cmp	r1, lr
   159b2:	d301      	bcc.n	159b8 <bt_gatt_attr_get_handle+0x20>
}
   159b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   159b8:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   159bc:	42bb      	cmp	r3, r7
   159be:	d304      	bcc.n	159ca <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   159c0:	fb0c 7206 	mla	r2, ip, r6, r7
   159c4:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   159c6:	4293      	cmp	r3, r2
   159c8:	d90e      	bls.n	159e8 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
   159ca:	19a2      	adds	r2, r4, r6
   159cc:	b292      	uxth	r2, r2
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   159ce:	3108      	adds	r1, #8
   159d0:	4614      	mov	r4, r2
   159d2:	e7ed      	b.n	159b0 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   159d4:	fb0c 7805 	mla	r8, ip, r5, r7
   159d8:	4543      	cmp	r3, r8
   159da:	d007      	beq.n	159ec <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   159dc:	3501      	adds	r5, #1
   159de:	1962      	adds	r2, r4, r5
   159e0:	42b5      	cmp	r5, r6
   159e2:	b292      	uxth	r2, r2
   159e4:	d1f6      	bne.n	159d4 <bt_gatt_attr_get_handle+0x3c>
   159e6:	e7f2      	b.n	159ce <bt_gatt_attr_get_handle+0x36>
   159e8:	2500      	movs	r5, #0
   159ea:	e7f8      	b.n	159de <bt_gatt_attr_get_handle+0x46>
   159ec:	4610      	mov	r0, r2
   159ee:	e7e1      	b.n	159b4 <bt_gatt_attr_get_handle+0x1c>
   159f0:	00020d4c 	.word	0x00020d4c
   159f4:	00020d64 	.word	0x00020d64

000159f8 <bt_gatt_foreach_attr_type>:
{
   159f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   159fc:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   15a00:	9100      	str	r1, [sp, #0]
   15a02:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   15a04:	f64f 73ff 	movw	r3, #65535	; 0xffff
   15a08:	2d00      	cmp	r5, #0
   15a0a:	bf08      	it	eq
   15a0c:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   15a0e:	4b24      	ldr	r3, [pc, #144]	; (15aa0 <bt_gatt_foreach_attr_type+0xa8>)
   15a10:	881b      	ldrh	r3, [r3, #0]
   15a12:	4283      	cmp	r3, r0
{
   15a14:	4607      	mov	r7, r0
   15a16:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   15a18:	d23c      	bcs.n	15a94 <bt_gatt_foreach_attr_type+0x9c>
}
   15a1a:	b003      	add	sp, #12
   15a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   15a20:	6873      	ldr	r3, [r6, #4]
   15a22:	4423      	add	r3, r4
   15a24:	42bb      	cmp	r3, r7
   15a26:	d232      	bcs.n	15a8e <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
   15a28:	b29c      	uxth	r4, r3
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   15a2a:	3608      	adds	r6, #8
   15a2c:	4b1d      	ldr	r3, [pc, #116]	; (15aa4 <bt_gatt_foreach_attr_type+0xac>)
   15a2e:	429e      	cmp	r6, r3
   15a30:	d3f6      	bcc.n	15a20 <bt_gatt_foreach_attr_type+0x28>
   15a32:	e7f2      	b.n	15a1a <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   15a34:	5889      	ldr	r1, [r1, r2]
   15a36:	9301      	str	r3, [sp, #4]
   15a38:	4640      	mov	r0, r8
   15a3a:	f007 fa01 	bl	1ce40 <bt_uuid_cmp>
   15a3e:	9b01      	ldr	r3, [sp, #4]
   15a40:	b190      	cbz	r0, 15a68 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   15a42:	3401      	adds	r4, #1
   15a44:	f10a 0a01 	add.w	sl, sl, #1
   15a48:	b2a4      	uxth	r4, r4
   15a4a:	6873      	ldr	r3, [r6, #4]
   15a4c:	4553      	cmp	r3, sl
   15a4e:	d9ec      	bls.n	15a2a <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   15a50:	9b00      	ldr	r3, [sp, #0]
   15a52:	429c      	cmp	r4, r3
   15a54:	d8e1      	bhi.n	15a1a <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   15a56:	42bc      	cmp	r4, r7
   15a58:	d3f3      	bcc.n	15a42 <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   15a5a:	6831      	ldr	r1, [r6, #0]
   15a5c:	fb0b f20a 	mul.w	r2, fp, sl
   15a60:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   15a62:	f1b8 0f00 	cmp.w	r8, #0
   15a66:	d1e5      	bne.n	15a34 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
   15a68:	f1b9 0f00 	cmp.w	r9, #0
   15a6c:	d10b      	bne.n	15a86 <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
   15a6e:	3d01      	subs	r5, #1
   15a70:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   15a72:	4618      	mov	r0, r3
   15a74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   15a76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15a78:	4621      	mov	r1, r4
   15a7a:	4798      	blx	r3
	if (!*num_matches) {
   15a7c:	2d00      	cmp	r5, #0
   15a7e:	d0cc      	beq.n	15a1a <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   15a80:	2800      	cmp	r0, #0
   15a82:	d1de      	bne.n	15a42 <bt_gatt_foreach_attr_type+0x4a>
   15a84:	e7c9      	b.n	15a1a <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   15a86:	68da      	ldr	r2, [r3, #12]
   15a88:	4591      	cmp	r9, r2
   15a8a:	d1da      	bne.n	15a42 <bt_gatt_foreach_attr_type+0x4a>
   15a8c:	e7ef      	b.n	15a6e <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   15a8e:	f04f 0a00 	mov.w	sl, #0
   15a92:	e7da      	b.n	15a4a <bt_gatt_foreach_attr_type+0x52>
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   15a94:	4e04      	ldr	r6, [pc, #16]	; (15aa8 <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
   15a96:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   15a98:	f04f 0b14 	mov.w	fp, #20
   15a9c:	e7c6      	b.n	15a2c <bt_gatt_foreach_attr_type+0x34>
   15a9e:	bf00      	nop
   15aa0:	20002962 	.word	0x20002962
   15aa4:	00020d64 	.word	0x00020d64
   15aa8:	00020d4c 	.word	0x00020d4c

00015aac <db_hash_gen>:
{
   15aac:	b530      	push	{r4, r5, lr}
   15aae:	b0c9      	sub	sp, #292	; 0x124
	uint8_t key[16] = {};
   15ab0:	2300      	movs	r3, #0
{
   15ab2:	4604      	mov	r4, r0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   15ab4:	aa1c      	add	r2, sp, #112	; 0x70
   15ab6:	4669      	mov	r1, sp
   15ab8:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   15aba:	e9cd 3300 	strd	r3, r3, [sp]
   15abe:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   15ac2:	f006 ff58 	bl	1c976 <tc_cmac_setup>
   15ac6:	b308      	cbz	r0, 15b0c <db_hash_gen+0x60>
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   15ac8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   15acc:	2001      	movs	r0, #1
   15ace:	4a10      	ldr	r2, [pc, #64]	; (15b10 <db_hash_gen+0x64>)
   15ad0:	ab04      	add	r3, sp, #16
   15ad2:	f009 fad1 	bl	1f078 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   15ad6:	480f      	ldr	r0, [pc, #60]	; (15b14 <db_hash_gen+0x68>)
   15ad8:	a904      	add	r1, sp, #16
   15ada:	f006 ffe2 	bl	1caa2 <tc_cmac_final>
   15ade:	b1a8      	cbz	r0, 15b0c <db_hash_gen+0x60>
   15ae0:	4b0c      	ldr	r3, [pc, #48]	; (15b14 <db_hash_gen+0x68>)
   15ae2:	2208      	movs	r2, #8
   15ae4:	f103 010f 	add.w	r1, r3, #15
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   15ae8:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   15aea:	780d      	ldrb	r5, [r1, #0]
   15aec:	f803 5b01 	strb.w	r5, [r3], #1
	for (i = 0; i < (length/2); i++) {
   15af0:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   15af2:	f801 0901 	strb.w	r0, [r1], #-1
	for (i = 0; i < (length/2); i++) {
   15af6:	d1f7      	bne.n	15ae8 <db_hash_gen+0x3c>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   15af8:	b124      	cbz	r4, 15b04 <db_hash_gen+0x58>
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   15afa:	4906      	ldr	r1, [pc, #24]	; (15b14 <db_hash_gen+0x68>)
   15afc:	4806      	ldr	r0, [pc, #24]	; (15b18 <db_hash_gen+0x6c>)
   15afe:	2210      	movs	r2, #16
   15b00:	f7fb f9e6 	bl	10ed0 <settings_save_one>
   15b04:	4805      	ldr	r0, [pc, #20]	; (15b1c <db_hash_gen+0x70>)
   15b06:	2104      	movs	r1, #4
   15b08:	f008 ffa0 	bl	1ea4c <atomic_or>
}
   15b0c:	b049      	add	sp, #292	; 0x124
   15b0e:	bd30      	pop	{r4, r5, pc}
   15b10:	0001e9a1 	.word	0x0001e9a1
   15b14:	200016c0 	.word	0x200016c0
   15b18:	00021cd9 	.word	0x00021cd9
   15b1c:	20001788 	.word	0x20001788

00015b20 <db_hash_process>:
{
   15b20:	b510      	push	{r4, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   15b22:	4829      	ldr	r0, [pc, #164]	; (15bc8 <db_hash_process+0xa8>)
   15b24:	f06f 0108 	mvn.w	r1, #8
   15b28:	f008 ffbe 	bl	1eaa8 <atomic_and>
	if (atomic_test_and_clear_bit(gatt_sc.flags, DB_HASH_LOAD)) {
   15b2c:	0700      	lsls	r0, r0, #28
   15b2e:	d545      	bpl.n	15bbc <db_hash_process+0x9c>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   15b30:	4825      	ldr	r0, [pc, #148]	; (15bc8 <db_hash_process+0xa8>)
   15b32:	f008 ff2f 	bl	1e994 <atomic_get>
   15b36:	4603      	mov	r3, r0
		if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   15b38:	0759      	lsls	r1, r3, #29
   15b3a:	f3c0 0080 	ubfx	r0, r0, #2, #1
   15b3e:	d401      	bmi.n	15b44 <db_hash_process+0x24>
			db_hash_gen(false);
   15b40:	f7ff ffb4 	bl	15aac <db_hash_gen>
		if (!memcmp(db_hash.stored_hash, db_hash.hash,
   15b44:	4921      	ldr	r1, [pc, #132]	; (15bcc <db_hash_process+0xac>)
   15b46:	2210      	movs	r2, #16
   15b48:	1888      	adds	r0, r1, r2
   15b4a:	f007 f89b 	bl	1cc84 <memcmp>
   15b4e:	b948      	cbnz	r0, 15b64 <db_hash_process+0x44>
			k_work_cancel_delayable(&gatt_sc.work);
   15b50:	481f      	ldr	r0, [pc, #124]	; (15bd0 <db_hash_process+0xb0>)
   15b52:	f00a fcb7 	bl	204c4 <k_work_cancel_delayable>
}
   15b56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   15b5a:	481b      	ldr	r0, [pc, #108]	; (15bc8 <db_hash_process+0xa8>)
   15b5c:	f06f 0101 	mvn.w	r1, #1
   15b60:	f008 bfa2 	b.w	1eaa8 <atomic_and>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   15b64:	4c1b      	ldr	r4, [pc, #108]	; (15bd4 <db_hash_process+0xb4>)
   15b66:	2101      	movs	r1, #1
   15b68:	f104 0050 	add.w	r0, r4, #80	; 0x50
   15b6c:	f008 ff6e 	bl	1ea4c <atomic_or>
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   15b70:	07c2      	lsls	r2, r0, #31
   15b72:	d413      	bmi.n	15b9c <db_hash_process+0x7c>
		gatt_sc.start = start;
   15b74:	4b18      	ldr	r3, [pc, #96]	; (15bd8 <db_hash_process+0xb8>)
   15b76:	61a3      	str	r3, [r4, #24]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   15b78:	4813      	ldr	r0, [pc, #76]	; (15bc8 <db_hash_process+0xa8>)
   15b7a:	f008 ff0b 	bl	1e994 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
   15b7e:	0783      	lsls	r3, r0, #30
   15b80:	d405      	bmi.n	15b8e <db_hash_process+0x6e>
	k_work_reschedule(&gatt_sc.work, timeout);
   15b82:	4813      	ldr	r0, [pc, #76]	; (15bd0 <db_hash_process+0xb0>)
   15b84:	f44f 72a4 	mov.w	r2, #328	; 0x148
   15b88:	2300      	movs	r3, #0
   15b8a:	f003 fffb 	bl	19b84 <k_work_reschedule>
}
   15b8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   15b92:	490e      	ldr	r1, [pc, #56]	; (15bcc <db_hash_process+0xac>)
   15b94:	4811      	ldr	r0, [pc, #68]	; (15bdc <db_hash_process+0xbc>)
   15b96:	2210      	movs	r2, #16
   15b98:	f7fb b99a 	b.w	10ed0 <settings_save_one>
	if (new_start >= *start && new_end <= *end) {
   15b9c:	8b23      	ldrh	r3, [r4, #24]
   15b9e:	8b62      	ldrh	r2, [r4, #26]
   15ba0:	2b01      	cmp	r3, #1
   15ba2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   15ba6:	d805      	bhi.n	15bb4 <db_hash_process+0x94>
   15ba8:	429a      	cmp	r2, r3
   15baa:	d0f0      	beq.n	15b8e <db_hash_process+0x6e>
		*end = new_end;
   15bac:	f64f 73ff 	movw	r3, #65535	; 0xffff
   15bb0:	8363      	strh	r3, [r4, #26]
   15bb2:	e7e1      	b.n	15b78 <db_hash_process+0x58>
	if (*end < new_end) {
   15bb4:	429a      	cmp	r2, r3
		*start = new_start;
   15bb6:	8321      	strh	r1, [r4, #24]
	if (*end < new_end) {
   15bb8:	d0de      	beq.n	15b78 <db_hash_process+0x58>
   15bba:	e7f7      	b.n	15bac <db_hash_process+0x8c>
}
   15bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	db_hash_gen(true);
   15bc0:	2001      	movs	r0, #1
   15bc2:	f7ff bf73 	b.w	15aac <db_hash_gen>
   15bc6:	bf00      	nop
   15bc8:	20001788 	.word	0x20001788
   15bcc:	200016c0 	.word	0x200016c0
   15bd0:	20001758 	.word	0x20001758
   15bd4:	20001738 	.word	0x20001738
   15bd8:	ffff0001 	.word	0xffff0001
   15bdc:	00021cd9 	.word	0x00021cd9

00015be0 <ccc_set_direct>:
{
   15be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15be4:	b0b8      	sub	sp, #224	; 0xe0
   15be6:	460f      	mov	r7, r1
   15be8:	4615      	mov	r5, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   15bea:	4920      	ldr	r1, [pc, #128]	; (15c6c <ccc_set_direct+0x8c>)
   15bec:	983e      	ldr	r0, [sp, #248]	; 0xf8
   15bee:	466a      	mov	r2, sp
{
   15bf0:	461e      	mov	r6, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   15bf2:	f005 fcc2 	bl	1b57a <settings_name_steq>
   15bf6:	b3a8      	cbz	r0, 15c64 <ccc_set_direct+0x84>
		return ccc_set(name, len, read_cb, cb_arg);
   15bf8:	9c00      	ldr	r4, [sp, #0]
		settings_name_next(name, &next);
   15bfa:	a901      	add	r1, sp, #4
   15bfc:	4620      	mov	r0, r4
   15bfe:	f005 fcdf 	bl	1b5c0 <settings_name_next>
		if (!name) {
   15c02:	b35c      	cbz	r4, 15c5c <ccc_set_direct+0x7c>
		} else if (!next) {
   15c04:	9801      	ldr	r0, [sp, #4]
   15c06:	bb08      	cbnz	r0, 15c4c <ccc_set_direct+0x6c>
		err = bt_settings_decode_key(name, &addr);
   15c08:	f10d 0808 	add.w	r8, sp, #8
			load.addr_with_id.id = strtol(next, NULL, 10);
   15c0c:	f88d 0014 	strb.w	r0, [sp, #20]
		err = bt_settings_decode_key(name, &addr);
   15c10:	4641      	mov	r1, r8
   15c12:	4620      	mov	r0, r4
   15c14:	f007 f8ee 	bl	1cdf4 <bt_settings_decode_key>
		if (err) {
   15c18:	4604      	mov	r4, r0
   15c1a:	b9f8      	cbnz	r0, 15c5c <ccc_set_direct+0x7c>
		load.addr_with_id.addr = &addr;
   15c1c:	f8cd 8010 	str.w	r8, [sp, #16]
		if (len_rd) {
   15c20:	b1cf      	cbz	r7, 15c56 <ccc_set_direct+0x76>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
   15c22:	af08      	add	r7, sp, #32
   15c24:	22c0      	movs	r2, #192	; 0xc0
   15c26:	4639      	mov	r1, r7
   15c28:	4630      	mov	r0, r6
   15c2a:	47a8      	blx	r5
			if (len < 0) {
   15c2c:	2800      	cmp	r0, #0
   15c2e:	db17      	blt.n	15c60 <ccc_set_direct+0x80>
			load.count = len / sizeof(*ccc_store);
   15c30:	0880      	lsrs	r0, r0, #2
			load.entry = ccc_store;
   15c32:	9706      	str	r7, [sp, #24]
			load.count = len / sizeof(*ccc_store);
   15c34:	9007      	str	r0, [sp, #28]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
   15c36:	4a0e      	ldr	r2, [pc, #56]	; (15c70 <ccc_set_direct+0x90>)
   15c38:	ab04      	add	r3, sp, #16
   15c3a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   15c3e:	2001      	movs	r0, #1
   15c40:	f009 fa1a 	bl	1f078 <bt_gatt_foreach_attr>
}
   15c44:	4620      	mov	r0, r4
   15c46:	b038      	add	sp, #224	; 0xe0
   15c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			load.addr_with_id.id = strtol(next, NULL, 10);
   15c4c:	220a      	movs	r2, #10
   15c4e:	2100      	movs	r1, #0
   15c50:	f006 ff6d 	bl	1cb2e <strtol>
   15c54:	e7d8      	b.n	15c08 <ccc_set_direct+0x28>
			load.count = 0;
   15c56:	e9cd 0006 	strd	r0, r0, [sp, #24]
   15c5a:	e7ec      	b.n	15c36 <ccc_set_direct+0x56>
			return -EINVAL;
   15c5c:	f06f 0015 	mvn.w	r0, #21
   15c60:	4604      	mov	r4, r0
   15c62:	e7ef      	b.n	15c44 <ccc_set_direct+0x64>
			return -EINVAL;
   15c64:	f06f 0415 	mvn.w	r4, #21
   15c68:	e7ec      	b.n	15c44 <ccc_set_direct+0x64>
   15c6a:	bf00      	nop
   15c6c:	00021ce1 	.word	0x00021ce1
   15c70:	000156c1 	.word	0x000156c1

00015c74 <gatt_indicate>:
{
   15c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15c78:	4615      	mov	r5, r2
   15c7a:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr,
   15c7c:	2214      	movs	r2, #20
   15c7e:	6869      	ldr	r1, [r5, #4]
{
   15c80:	4680      	mov	r8, r0
	if (bt_gatt_check_perm(conn, params->attr,
   15c82:	f009 fa04 	bl	1f08e <bt_gatt_check_perm>
   15c86:	4607      	mov	r7, r0
   15c88:	2800      	cmp	r0, #0
   15c8a:	d13c      	bne.n	15d06 <gatt_indicate+0x92>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   15c8c:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   15c90:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   15c92:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   15c94:	f7ff fbba 	bl	1540c <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   15c98:	3602      	adds	r6, #2
	if (!req) {
   15c9a:	4604      	mov	r4, r0
   15c9c:	b920      	cbnz	r0, 15ca8 <gatt_indicate+0x34>
		return -ENOMEM;
   15c9e:	f06f 050b 	mvn.w	r5, #11
}
   15ca2:	4628      	mov	r0, r5
   15ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req->func = func;
   15ca8:	4b18      	ldr	r3, [pc, #96]	; (15d0c <gatt_indicate+0x98>)
	req->len = len;
   15caa:	6146      	str	r6, [r0, #20]
	req->att_op = op;
   15cac:	211d      	movs	r1, #29
   15cae:	7441      	strb	r1, [r0, #17]
	req->encode = encode;
   15cb0:	60c7      	str	r7, [r0, #12]
	req->func = func;
   15cb2:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   15cb4:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   15cb6:	4632      	mov	r2, r6
   15cb8:	4640      	mov	r0, r8
   15cba:	f008 fd27 	bl	1e70c <bt_att_create_pdu>
	if (!buf) {
   15cbe:	4606      	mov	r6, r0
   15cc0:	b918      	cbnz	r0, 15cca <gatt_indicate+0x56>
		bt_att_req_free(req);
   15cc2:	4620      	mov	r0, r4
   15cc4:	f7ff fbb8 	bl	15438 <bt_att_req_free>
   15cc8:	e7e9      	b.n	15c9e <gatt_indicate+0x2a>
	return net_buf_simple_add(&buf->b, len);
   15cca:	f100 0a08 	add.w	sl, r0, #8
   15cce:	2102      	movs	r1, #2
   15cd0:	4650      	mov	r0, sl
   15cd2:	f009 ff3a 	bl	1fb4a <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   15cd6:	4607      	mov	r7, r0
   15cd8:	8aa9      	ldrh	r1, [r5, #20]
   15cda:	f827 9b02 	strh.w	r9, [r7], #2
   15cde:	4650      	mov	r0, sl
   15ce0:	f009 ff33 	bl	1fb4a <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   15ce4:	8aaa      	ldrh	r2, [r5, #20]
   15ce6:	6929      	ldr	r1, [r5, #16]
   15ce8:	4638      	mov	r0, r7
   15cea:	f006 ffdc 	bl	1cca6 <memcpy>
	req->buf = buf;
   15cee:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
   15cf0:	4621      	mov	r1, r4
   15cf2:	4640      	mov	r0, r8
   15cf4:	f008 fe16 	bl	1e924 <bt_att_req_send>
	if (err) {
   15cf8:	4605      	mov	r5, r0
   15cfa:	2800      	cmp	r0, #0
   15cfc:	d0d1      	beq.n	15ca2 <gatt_indicate+0x2e>
		bt_att_req_free(req);
   15cfe:	4620      	mov	r0, r4
   15d00:	f7ff fb9a 	bl	15438 <bt_att_req_free>
   15d04:	e7cd      	b.n	15ca2 <gatt_indicate+0x2e>
		return -EPERM;
   15d06:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   15d0a:	e7ca      	b.n	15ca2 <gatt_indicate+0x2e>
   15d0c:	0001e963 	.word	0x0001e963

00015d10 <bt_gatt_indicate>:
{
   15d10:	b530      	push	{r4, r5, lr}
   15d12:	4604      	mov	r4, r0
   15d14:	b08b      	sub	sp, #44	; 0x2c
   15d16:	4836      	ldr	r0, [pc, #216]	; (15df0 <bt_gatt_indicate+0xe0>)
   15d18:	f008 fe3c 	bl	1e994 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   15d1c:	0782      	lsls	r2, r0, #30
{
   15d1e:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   15d20:	d55f      	bpl.n	15de2 <bt_gatt_indicate+0xd2>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   15d22:	b114      	cbz	r4, 15d2a <bt_gatt_indicate+0x1a>
   15d24:	7b63      	ldrb	r3, [r4, #13]
   15d26:	2b07      	cmp	r3, #7
   15d28:	d15e      	bne.n	15de8 <bt_gatt_indicate+0xd8>
	data.attr = params->attr;
   15d2a:	6868      	ldr	r0, [r5, #4]
   15d2c:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   15d2e:	f7ff fe33 	bl	15998 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   15d32:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   15d34:	f8ad 0018 	strh.w	r0, [sp, #24]
   15d38:	4603      	mov	r3, r0
	if (params->uuid) {
   15d3a:	b162      	cbz	r2, 15d56 <bt_gatt_indicate+0x46>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   15d3c:	a905      	add	r1, sp, #20
   15d3e:	9102      	str	r1, [sp, #8]
   15d40:	492c      	ldr	r1, [pc, #176]	; (15df4 <bt_gatt_indicate+0xe4>)
   15d42:	9101      	str	r1, [sp, #4]
   15d44:	2101      	movs	r1, #1
	found->attr = NULL;
   15d46:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   15d48:	9100      	str	r1, [sp, #0]
   15d4a:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   15d4e:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   15d50:	f7ff fe52 	bl	159f8 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   15d54:	9b05      	ldr	r3, [sp, #20]
   15d56:	b1bb      	cbz	r3, 15d88 <bt_gatt_indicate+0x78>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   15d58:	9b05      	ldr	r3, [sp, #20]
   15d5a:	6818      	ldr	r0, [r3, #0]
   15d5c:	2300      	movs	r3, #0
   15d5e:	f88d 3010 	strb.w	r3, [sp, #16]
   15d62:	a904      	add	r1, sp, #16
   15d64:	f642 0303 	movw	r3, #10243	; 0x2803
   15d68:	f8ad 3012 	strh.w	r3, [sp, #18]
   15d6c:	f007 f868 	bl	1ce40 <bt_uuid_cmp>
   15d70:	b170      	cbz	r0, 15d90 <bt_gatt_indicate+0x80>
		return gatt_indicate(conn, data.handle, params);
   15d72:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   15d76:	b1c4      	cbz	r4, 15daa <bt_gatt_indicate+0x9a>
		params->_ref = 1;
   15d78:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   15d7a:	4601      	mov	r1, r0
		params->_ref = 1;
   15d7c:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
   15d7e:	462a      	mov	r2, r5
   15d80:	4620      	mov	r0, r4
   15d82:	f7ff ff77 	bl	15c74 <gatt_indicate>
   15d86:	e001      	b.n	15d8c <bt_gatt_indicate+0x7c>
			return -ENOENT;
   15d88:	f06f 0001 	mvn.w	r0, #1
}
   15d8c:	b00b      	add	sp, #44	; 0x2c
   15d8e:	bd30      	pop	{r4, r5, pc}
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   15d90:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   15d92:	68c3      	ldr	r3, [r0, #12]
   15d94:	799b      	ldrb	r3, [r3, #6]
   15d96:	069b      	lsls	r3, r3, #26
   15d98:	d402      	bmi.n	15da0 <bt_gatt_indicate+0x90>
			return -EINVAL;
   15d9a:	f06f 0015 	mvn.w	r0, #21
   15d9e:	e7f5      	b.n	15d8c <bt_gatt_indicate+0x7c>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   15da0:	f009 f91c 	bl	1efdc <bt_gatt_attr_value_handle>
   15da4:	f8ad 0018 	strh.w	r0, [sp, #24]
   15da8:	e7e3      	b.n	15d72 <bt_gatt_indicate+0x62>
	data.err = -ENOTCONN;
   15daa:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   15dae:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   15db0:	2302      	movs	r3, #2
   15db2:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   15db6:	f642 1302 	movw	r3, #10498	; 0x2902
   15dba:	f8ad 3012 	strh.w	r3, [sp, #18]
   15dbe:	ab05      	add	r3, sp, #20
   15dc0:	9302      	str	r3, [sp, #8]
   15dc2:	4b0d      	ldr	r3, [pc, #52]	; (15df8 <bt_gatt_indicate+0xe8>)
   15dc4:	9301      	str	r3, [sp, #4]
   15dc6:	2301      	movs	r3, #1
   15dc8:	9300      	str	r3, [sp, #0]
	params->_ref = 0;
   15dca:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   15dcc:	4623      	mov	r3, r4
   15dce:	aa04      	add	r2, sp, #16
   15dd0:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   15dd4:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   15dd6:	f88d 4010 	strb.w	r4, [sp, #16]
   15dda:	f7ff fe0d 	bl	159f8 <bt_gatt_foreach_attr_type>
	return data.err;
   15dde:	9807      	ldr	r0, [sp, #28]
   15de0:	e7d4      	b.n	15d8c <bt_gatt_indicate+0x7c>
		return -EAGAIN;
   15de2:	f06f 000a 	mvn.w	r0, #10
   15de6:	e7d1      	b.n	15d8c <bt_gatt_indicate+0x7c>
		return -ENOTCONN;
   15de8:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   15dec:	e7ce      	b.n	15d8c <bt_gatt_indicate+0x7c>
   15dee:	bf00      	nop
   15df0:	20000384 	.word	0x20000384
   15df4:	0001e989 	.word	0x0001e989
   15df8:	00015e61 	.word	0x00015e61

00015dfc <sc_process>:
{
   15dfc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
   15dfe:	f830 3c08 	ldrh.w	r3, [r0, #-8]
   15e02:	f8ad 3004 	strh.w	r3, [sp, #4]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   15e06:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
   15e0a:	4604      	mov	r4, r0
	sc_range[1] = sys_cpu_to_le16(sc->end);
   15e0c:	f830 3c06 	ldrh.w	r3, [r0, #-6]
   15e10:	f8ad 3006 	strh.w	r3, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   15e14:	f1a0 0620 	sub.w	r6, r0, #32
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   15e18:	f06f 0101 	mvn.w	r1, #1
   15e1c:	4628      	mov	r0, r5
   15e1e:	f008 fe43 	bl	1eaa8 <atomic_and>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   15e22:	4b0d      	ldr	r3, [pc, #52]	; (15e58 <sc_process+0x5c>)
   15e24:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   15e28:	4b0c      	ldr	r3, [pc, #48]	; (15e5c <sc_process+0x60>)
   15e2a:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   15e2e:	ab01      	add	r3, sp, #4
	sc->start = 0U;
   15e30:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   15e32:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   15e36:	2304      	movs	r3, #4
	sc->start = 0U;
   15e38:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->end = 0U;
   15e3c:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   15e40:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   15e44:	4631      	mov	r1, r6
   15e46:	f7ff ff63 	bl	15d10 <bt_gatt_indicate>
   15e4a:	b918      	cbnz	r0, 15e54 <sc_process+0x58>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   15e4c:	2102      	movs	r1, #2
   15e4e:	4628      	mov	r0, r5
   15e50:	f008 fdfc 	bl	1ea4c <atomic_or>
}
   15e54:	b002      	add	sp, #8
   15e56:	bd70      	pop	{r4, r5, r6, pc}
   15e58:	000212fc 	.word	0x000212fc
   15e5c:	00015899 	.word	0x00015899

00015e60 <notify_cb>:
{
   15e60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   15e64:	4b38      	ldr	r3, [pc, #224]	; (15f48 <notify_cb+0xe8>)
{
   15e66:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   15e68:	6882      	ldr	r2, [r0, #8]
   15e6a:	429a      	cmp	r2, r3
{
   15e6c:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   15e6e:	d113      	bne.n	15e98 <notify_cb+0x38>
	ccc = attr->user_data;
   15e70:	68c7      	ldr	r7, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   15e72:	4b36      	ldr	r3, [pc, #216]	; (15f4c <notify_cb+0xec>)
   15e74:	429f      	cmp	r7, r3
   15e76:	d014      	beq.n	15ea2 <notify_cb+0x42>
		if (cfg->value != data->type) {
   15e78:	893a      	ldrh	r2, [r7, #8]
   15e7a:	89a3      	ldrh	r3, [r4, #12]
   15e7c:	429a      	cmp	r2, r3
   15e7e:	d10b      	bne.n	15e98 <notify_cb+0x38>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   15e80:	4639      	mov	r1, r7
   15e82:	f811 0b01 	ldrb.w	r0, [r1], #1
   15e86:	f7fe fbad 	bl	145e4 <bt_conn_lookup_addr_le>
		if (!conn) {
   15e8a:	4605      	mov	r5, r0
   15e8c:	b120      	cbz	r0, 15e98 <notify_cb+0x38>
		if (conn->state != BT_CONN_CONNECTED) {
   15e8e:	7b43      	ldrb	r3, [r0, #13]
   15e90:	2b07      	cmp	r3, #7
   15e92:	d02f      	beq.n	15ef4 <notify_cb+0x94>
			bt_conn_unref(conn);
   15e94:	f007 fe48 	bl	1db28 <bt_conn_unref>
	return BT_GATT_ITER_CONTINUE;
   15e98:	2701      	movs	r7, #1
}
   15e9a:	4638      	mov	r0, r7
   15e9c:	b003      	add	sp, #12
   15e9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   15ea2:	f04f 0800 	mov.w	r8, #0
   15ea6:	4d2a      	ldr	r5, [pc, #168]	; (15f50 <notify_cb+0xf0>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   15ea8:	46c1      	mov	r9, r8
   15eaa:	2207      	movs	r2, #7
   15eac:	4669      	mov	r1, sp
   15eae:	4628      	mov	r0, r5
   15eb0:	f8cd 9000 	str.w	r9, [sp]
   15eb4:	f8cd 9003 	str.w	r9, [sp, #3]
   15eb8:	f006 fee4 	bl	1cc84 <memcmp>
   15ebc:	b178      	cbz	r0, 15ede <notify_cb+0x7e>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   15ebe:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   15ec2:	2207      	movs	r2, #7
   15ec4:	4629      	mov	r1, r5
   15ec6:	f7fe fbab 	bl	14620 <bt_conn_lookup_state_le>
			if (!conn) {
   15eca:	b980      	cbnz	r0, 15eee <notify_cb+0x8e>
				sc = (struct sc_data *)data->ind_params->data;
   15ecc:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
   15ece:	f815 0c01 	ldrb.w	r0, [r5, #-1]
				sc = (struct sc_data *)data->ind_params->data;
   15ed2:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   15ed4:	4629      	mov	r1, r5
   15ed6:	8853      	ldrh	r3, [r2, #2]
   15ed8:	8812      	ldrh	r2, [r2, #0]
   15eda:	f008 ff94 	bl	1ee06 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   15ede:	f108 0801 	add.w	r8, r8, #1
   15ee2:	f1b8 0f04 	cmp.w	r8, #4
   15ee6:	f105 050c 	add.w	r5, r5, #12
   15eea:	d1de      	bne.n	15eaa <notify_cb+0x4a>
   15eec:	e7c4      	b.n	15e78 <notify_cb+0x18>
			bt_conn_unref(conn);
   15eee:	f007 fe1b 	bl	1db28 <bt_conn_unref>
   15ef2:	e7f4      	b.n	15ede <notify_cb+0x7e>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   15ef4:	697b      	ldr	r3, [r7, #20]
   15ef6:	b123      	cbz	r3, 15f02 <notify_cb+0xa2>
   15ef8:	4631      	mov	r1, r6
   15efa:	4798      	blx	r3
   15efc:	b908      	cbnz	r0, 15f02 <notify_cb+0xa2>
			bt_conn_unref(conn);
   15efe:	4628      	mov	r0, r5
   15f00:	e7c8      	b.n	15e94 <notify_cb+0x34>
		if (bt_gatt_check_perm(conn, attr,
   15f02:	2214      	movs	r2, #20
   15f04:	4631      	mov	r1, r6
   15f06:	4628      	mov	r0, r5
   15f08:	f009 f8c1 	bl	1f08e <bt_gatt_check_perm>
   15f0c:	4607      	mov	r7, r0
   15f0e:	2800      	cmp	r0, #0
   15f10:	d1c2      	bne.n	15e98 <notify_cb+0x38>
		if (data->type == BT_GATT_CCC_INDICATE) {
   15f12:	89a3      	ldrh	r3, [r4, #12]
			err = gatt_indicate(conn, data->handle,
   15f14:	88a1      	ldrh	r1, [r4, #4]
   15f16:	6922      	ldr	r2, [r4, #16]
		if (data->type == BT_GATT_CCC_INDICATE) {
   15f18:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
   15f1a:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
   15f1c:	d10f      	bne.n	15f3e <notify_cb+0xde>
			err = gatt_indicate(conn, data->handle,
   15f1e:	f7ff fea9 	bl	15c74 <gatt_indicate>
			if (err == 0) {
   15f22:	4606      	mov	r6, r0
   15f24:	b918      	cbnz	r0, 15f2e <notify_cb+0xce>
				data->ind_params->_ref++;
   15f26:	6922      	ldr	r2, [r4, #16]
   15f28:	7d93      	ldrb	r3, [r2, #22]
   15f2a:	3301      	adds	r3, #1
   15f2c:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   15f2e:	4628      	mov	r0, r5
   15f30:	f007 fdfa 	bl	1db28 <bt_conn_unref>
		if (err < 0) {
   15f34:	2e00      	cmp	r6, #0
   15f36:	dbb0      	blt.n	15e9a <notify_cb+0x3a>
		data->err = 0;
   15f38:	2300      	movs	r3, #0
   15f3a:	60a3      	str	r3, [r4, #8]
   15f3c:	e7ac      	b.n	15e98 <notify_cb+0x38>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   15f3e:	f009 f8d1 	bl	1f0e4 <gatt_notify>
   15f42:	4606      	mov	r6, r0
   15f44:	e7f3      	b.n	15f2e <notify_cb+0xce>
   15f46:	bf00      	nop
   15f48:	0001ed29 	.word	0x0001ed29
   15f4c:	20000558 	.word	0x20000558
   15f50:	20002965 	.word	0x20002965

00015f54 <update_ccc>:
{
   15f54:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   15f58:	4b32      	ldr	r3, [pc, #200]	; (16024 <update_ccc+0xd0>)
{
   15f5a:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   15f5c:	6882      	ldr	r2, [r0, #8]
   15f5e:	429a      	cmp	r2, r3
{
   15f60:	4604      	mov	r4, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   15f62:	d122      	bne.n	15faa <update_ccc+0x56>
	ccc = attr->user_data;
   15f64:	68c7      	ldr	r7, [r0, #12]
	struct bt_conn *conn = data->conn;
   15f66:	6835      	ldr	r5, [r6, #0]
		if (!cfg->value ||
   15f68:	893b      	ldrh	r3, [r7, #8]
   15f6a:	b1f3      	cbz	r3, 15faa <update_ccc+0x56>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   15f6c:	463a      	mov	r2, r7
   15f6e:	4628      	mov	r0, r5
   15f70:	f812 1b01 	ldrb.w	r1, [r2], #1
   15f74:	f007 fe73 	bl	1dc5e <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   15f78:	b1b8      	cbz	r0, 15faa <update_ccc+0x56>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   15f7a:	222a      	movs	r2, #42	; 0x2a
   15f7c:	4621      	mov	r1, r4
   15f7e:	4628      	mov	r0, r5
   15f80:	f009 f885 	bl	1f08e <bt_gatt_check_perm>
		if (err) {
   15f84:	b1a8      	cbz	r0, 15fb2 <update_ccc+0x5e>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   15f86:	2803      	cmp	r0, #3
   15f88:	d00f      	beq.n	15faa <update_ccc+0x56>
				sec = BT_SECURITY_L3;
   15f8a:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
   15f8c:	4628      	mov	r0, r5
				sec = BT_SECURITY_L3;
   15f8e:	bf14      	ite	ne
   15f90:	f04f 0802 	movne.w	r8, #2
   15f94:	f04f 0803 	moveq.w	r8, #3
			    bt_conn_get_security(conn) < sec) {
   15f98:	f007 fe5f 	bl	1dc5a <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   15f9c:	4580      	cmp	r8, r0
   15f9e:	d908      	bls.n	15fb2 <update_ccc+0x5e>
				if (data->sec < sec) {
   15fa0:	7933      	ldrb	r3, [r6, #4]
   15fa2:	4543      	cmp	r3, r8
   15fa4:	d201      	bcs.n	15faa <update_ccc+0x56>
					data->sec = sec;
   15fa6:	f886 8004 	strb.w	r8, [r6, #4]
}
   15faa:	2001      	movs	r0, #1
   15fac:	b002      	add	sp, #8
   15fae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		gatt_ccc_changed(attr, ccc);
   15fb2:	4639      	mov	r1, r7
   15fb4:	4620      	mov	r0, r4
   15fb6:	f008 fcca 	bl	1e94e <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   15fba:	4b1b      	ldr	r3, [pc, #108]	; (16028 <update_ccc+0xd4>)
   15fbc:	429f      	cmp	r7, r3
   15fbe:	d1f4      	bne.n	15faa <update_ccc+0x56>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   15fc0:	7a28      	ldrb	r0, [r5, #8]
   15fc2:	f105 0188 	add.w	r1, r5, #136	; 0x88
   15fc6:	f7ff fbdd 	bl	15784 <find_sc_cfg>
	if (!cfg) {
   15fca:	4604      	mov	r4, r0
   15fcc:	2800      	cmp	r0, #0
   15fce:	d0ec      	beq.n	15faa <update_ccc+0x56>
	if (!(cfg->data.start || cfg->data.end)) {
   15fd0:	8902      	ldrh	r2, [r0, #8]
   15fd2:	8943      	ldrh	r3, [r0, #10]
   15fd4:	ea53 0102 	orrs.w	r1, r3, r2
   15fd8:	d0e7      	beq.n	15faa <update_ccc+0x56>
	index = bt_conn_index(conn);
   15fda:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   15fdc:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   15fe0:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   15fe4:	f7fe fa4e 	bl	14484 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   15fe8:	4910      	ldr	r1, [pc, #64]	; (1602c <update_ccc+0xd8>)
   15fea:	4a11      	ldr	r2, [pc, #68]	; (16030 <update_ccc+0xdc>)
   15fec:	2318      	movs	r3, #24
   15fee:	fb03 1300 	mla	r3, r3, r0, r1
	sc_restore_params[index].len = sizeof(sc_range);
   15ff2:	2604      	movs	r6, #4
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   15ff4:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   15ff6:	4a0f      	ldr	r2, [pc, #60]	; (16034 <update_ccc+0xe0>)
   15ff8:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   15ffa:	aa01      	add	r2, sp, #4
   15ffc:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   15ffe:	829e      	strh	r6, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   16000:	b203      	sxth	r3, r0
   16002:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   16006:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1600a:	4628      	mov	r0, r5
   1600c:	f7ff fe80 	bl	15d10 <bt_gatt_indicate>
	memset(&cfg->data, 0, sizeof(cfg->data));
   16010:	4632      	mov	r2, r6
   16012:	2100      	movs	r1, #0
   16014:	f104 0008 	add.w	r0, r4, #8
   16018:	f006 fe50 	bl	1ccbc <memset>
		sc_store(cfg);
   1601c:	4620      	mov	r0, r4
   1601e:	f7ff fad5 	bl	155cc <sc_store>
   16022:	e7c2      	b.n	15faa <update_ccc+0x56>
   16024:	0001ed29 	.word	0x0001ed29
   16028:	20000558 	.word	0x20000558
   1602c:	20002628 	.word	0x20002628
   16030:	000212fc 	.word	0x000212fc
   16034:	0001ea6b 	.word	0x0001ea6b

00016038 <bt_gatt_connected>:
{
   16038:	b570      	push	{r4, r5, r6, lr}
   1603a:	b08e      	sub	sp, #56	; 0x38
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1603c:	f100 0588 	add.w	r5, r0, #136	; 0x88
{
   16040:	4604      	mov	r4, r0
	data.conn = conn;
   16042:	9003      	str	r0, [sp, #12]
	data.sec = BT_SECURITY_L1;
   16044:	2301      	movs	r3, #1
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   16046:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
   16048:	f88d 3010 	strb.w	r3, [sp, #16]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1604c:	4629      	mov	r1, r5
   1604e:	f007 faad 	bl	1d5ac <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   16052:	b190      	cbz	r0, 1607a <bt_gatt_connected+0x42>
		if (conn->id) {
   16054:	7a22      	ldrb	r2, [r4, #8]
   16056:	b31a      	cbz	r2, 160a0 <bt_gatt_connected+0x68>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   16058:	ae02      	add	r6, sp, #8
   1605a:	2104      	movs	r1, #4
   1605c:	4630      	mov	r0, r6
   1605e:	f004 fb00 	bl	1a662 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   16062:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   16064:	4a0f      	ldr	r2, [pc, #60]	; (160a4 <bt_gatt_connected+0x6c>)
   16066:	2124      	movs	r1, #36	; 0x24
   16068:	a805      	add	r0, sp, #20
   1606a:	462b      	mov	r3, r5
   1606c:	f7fc fb20 	bl	126b0 <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
   16070:	aa05      	add	r2, sp, #20
   16072:	490d      	ldr	r1, [pc, #52]	; (160a8 <bt_gatt_connected+0x70>)
   16074:	4610      	mov	r0, r2
   16076:	f7fa ff8b 	bl	10f90 <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1607a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1607e:	4a0b      	ldr	r2, [pc, #44]	; (160ac <bt_gatt_connected+0x74>)
   16080:	ab03      	add	r3, sp, #12
   16082:	2001      	movs	r0, #1
   16084:	f008 fff8 	bl	1f078 <bt_gatt_foreach_attr>
	    bt_conn_get_security(conn) < data.sec) {
   16088:	4620      	mov	r0, r4
   1608a:	f007 fde6 	bl	1dc5a <bt_conn_get_security>
   1608e:	f89d 1010 	ldrb.w	r1, [sp, #16]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   16092:	4288      	cmp	r0, r1
   16094:	d202      	bcs.n	1609c <bt_gatt_connected+0x64>
		int err = bt_conn_set_security(conn, data.sec);
   16096:	4620      	mov	r0, r4
   16098:	f007 fdaf 	bl	1dbfa <bt_conn_set_security>
}
   1609c:	b00e      	add	sp, #56	; 0x38
   1609e:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   160a0:	9200      	str	r2, [sp, #0]
   160a2:	e7df      	b.n	16064 <bt_gatt_connected+0x2c>
   160a4:	00021ce4 	.word	0x00021ce4
   160a8:	00015be1 	.word	0x00015be1
   160ac:	00015f55 	.word	0x00015f55

000160b0 <bt_gatt_att_max_mtu_changed>:
{
   160b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
   160b2:	4b09      	ldr	r3, [pc, #36]	; (160d8 <bt_gatt_att_max_mtu_changed+0x28>)
   160b4:	681c      	ldr	r4, [r3, #0]
   160b6:	4605      	mov	r5, r0
   160b8:	460e      	mov	r6, r1
   160ba:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   160bc:	b10c      	cbz	r4, 160c2 <bt_gatt_att_max_mtu_changed+0x12>
   160be:	3c04      	subs	r4, #4
   160c0:	b904      	cbnz	r4, 160c4 <bt_gatt_att_max_mtu_changed+0x14>
}
   160c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->att_mtu_updated) {
   160c4:	6823      	ldr	r3, [r4, #0]
   160c6:	b11b      	cbz	r3, 160d0 <bt_gatt_att_max_mtu_changed+0x20>
			cb->att_mtu_updated(conn, tx, rx);
   160c8:	463a      	mov	r2, r7
   160ca:	4631      	mov	r1, r6
   160cc:	4628      	mov	r0, r5
   160ce:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   160d0:	1d23      	adds	r3, r4, #4
   160d2:	d0f6      	beq.n	160c2 <bt_gatt_att_max_mtu_changed+0x12>
	return node->next;
   160d4:	6864      	ldr	r4, [r4, #4]
   160d6:	e7f1      	b.n	160bc <bt_gatt_att_max_mtu_changed+0xc>
   160d8:	200025dc 	.word	0x200025dc

000160dc <bt_gatt_encrypt_change>:
{
   160dc:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   160de:	4a06      	ldr	r2, [pc, #24]	; (160f8 <bt_gatt_encrypt_change+0x1c>)
	data.conn = conn;
   160e0:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   160e2:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   160e4:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   160e6:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   160ea:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   160ee:	f008 ffc3 	bl	1f078 <bt_gatt_foreach_attr>
}
   160f2:	b003      	add	sp, #12
   160f4:	f85d fb04 	ldr.w	pc, [sp], #4
   160f8:	00015f55 	.word	0x00015f55

000160fc <db_hash_read>:
{
   160fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   160fe:	4914      	ldr	r1, [pc, #80]	; (16150 <db_hash_read+0x54>)
{
   16100:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   16104:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   16106:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   1610a:	461f      	mov	r7, r3
   1610c:	4615      	mov	r5, r2
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1610e:	f00a f9ed 	bl	204ec <k_work_cancel_delayable_sync>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   16112:	4810      	ldr	r0, [pc, #64]	; (16154 <db_hash_read+0x58>)
   16114:	f008 fc3e 	bl	1e994 <atomic_get>
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   16118:	0743      	lsls	r3, r0, #29
   1611a:	d402      	bmi.n	16122 <db_hash_read+0x26>
		db_hash_gen(true);
   1611c:	2001      	movs	r0, #1
   1611e:	f7ff fcc5 	bl	15aac <db_hash_gen>
	bt_gatt_change_aware(conn, true);
   16122:	2101      	movs	r1, #1
   16124:	4620      	mov	r0, r4
   16126:	f009 f810 	bl	1f14a <bt_gatt_change_aware>
	if (offset > value_len) {
   1612a:	2e10      	cmp	r6, #16
   1612c:	d80c      	bhi.n	16148 <db_hash_read+0x4c>
	len = MIN(buf_len, value_len - offset);
   1612e:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
   16132:	4909      	ldr	r1, [pc, #36]	; (16158 <db_hash_read+0x5c>)
	len = MIN(buf_len, value_len - offset);
   16134:	42bc      	cmp	r4, r7
   16136:	bfa8      	it	ge
   16138:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1613a:	4622      	mov	r2, r4
   1613c:	4431      	add	r1, r6
   1613e:	4628      	mov	r0, r5
   16140:	f006 fdb1 	bl	1cca6 <memcpy>
}
   16144:	4620      	mov	r0, r4
   16146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   16148:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   1614c:	e7fa      	b.n	16144 <db_hash_read+0x48>
   1614e:	bf00      	nop
   16150:	20001710 	.word	0x20001710
   16154:	20001788 	.word	0x20001788
   16158:	200016c0 	.word	0x200016c0

0001615c <bt_gatt_store_ccc>:
{
   1615c:	b570      	push	{r4, r5, r6, lr}
   1615e:	b0c0      	sub	sp, #256	; 0x100
	save.count = 0;
   16160:	2300      	movs	r3, #0
{
   16162:	4604      	mov	r4, r0
   16164:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
   16166:	910d      	str	r1, [sp, #52]	; 0x34
	save.addr_with_id.id = id;
   16168:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
	save.count = 0;
   1616c:	933f      	str	r3, [sp, #252]	; 0xfc
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
   1616e:	4a11      	ldr	r2, [pc, #68]	; (161b4 <bt_gatt_store_ccc+0x58>)
   16170:	ab0d      	add	r3, sp, #52	; 0x34
   16172:	f64f 71ff 	movw	r1, #65535	; 0xffff
   16176:	2001      	movs	r0, #1
   16178:	f008 ff7e 	bl	1f078 <bt_gatt_foreach_attr>
	if (id) {
   1617c:	b1ac      	cbz	r4, 161aa <bt_gatt_store_ccc+0x4e>
		u8_to_dec(id_str, sizeof(id_str), id);
   1617e:	ae03      	add	r6, sp, #12
   16180:	4622      	mov	r2, r4
   16182:	2104      	movs	r1, #4
   16184:	4630      	mov	r0, r6
   16186:	f004 fa6c 	bl	1a662 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
   1618a:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   1618c:	4a0a      	ldr	r2, [pc, #40]	; (161b8 <bt_gatt_store_ccc+0x5c>)
   1618e:	462b      	mov	r3, r5
   16190:	2124      	movs	r1, #36	; 0x24
   16192:	a804      	add	r0, sp, #16
   16194:	f7fc fa8c 	bl	126b0 <bt_settings_encode_key>
	if (save.count) {
   16198:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
   1619a:	b142      	cbz	r2, 161ae <bt_gatt_store_ccc+0x52>
		len = save.count * sizeof(*save.store);
   1619c:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
   1619e:	a90f      	add	r1, sp, #60	; 0x3c
	err = settings_save_one(key, str, len);
   161a0:	a804      	add	r0, sp, #16
   161a2:	f7fa fe95 	bl	10ed0 <settings_save_one>
}
   161a6:	b040      	add	sp, #256	; 0x100
   161a8:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   161aa:	9400      	str	r4, [sp, #0]
   161ac:	e7ee      	b.n	1618c <bt_gatt_store_ccc+0x30>
		str = NULL;
   161ae:	4611      	mov	r1, r2
   161b0:	e7f6      	b.n	161a0 <bt_gatt_store_ccc+0x44>
   161b2:	bf00      	nop
   161b4:	0001574d 	.word	0x0001574d
   161b8:	00021ce4 	.word	0x00021ce4

000161bc <bt_gatt_clear>:
		gatt_sub_remove(NULL, sub, prev, params);
	}
}

int bt_gatt_clear(uint8_t id, const bt_addr_le_t *addr)
{
   161bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   161be:	b08f      	sub	sp, #60	; 0x3c
	bt_gatt_foreach_attr(0x0001, 0xffff, remove_peer_from_attr,
   161c0:	ae03      	add	r6, sp, #12
{
   161c2:	4604      	mov	r4, r0
   161c4:	460d      	mov	r5, r1
	struct addr_with_id addr_with_id = {
   161c6:	9103      	str	r1, [sp, #12]
   161c8:	f88d 0010 	strb.w	r0, [sp, #16]
	bt_gatt_foreach_attr(0x0001, 0xffff, remove_peer_from_attr,
   161cc:	4a1f      	ldr	r2, [pc, #124]	; (1624c <bt_gatt_clear+0x90>)
   161ce:	4633      	mov	r3, r6
   161d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   161d4:	2001      	movs	r0, #1
   161d6:	f008 ff4f 	bl	1f078 <bt_gatt_foreach_attr>
		if (id) {
   161da:	b394      	cbz	r4, 16242 <bt_gatt_clear+0x86>
			u8_to_dec(id_str, sizeof(id_str), id);
   161dc:	af02      	add	r7, sp, #8
   161de:	4622      	mov	r2, r4
   161e0:	2104      	movs	r1, #4
   161e2:	4638      	mov	r0, r7
   161e4:	f004 fa3d 	bl	1a662 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   161e8:	9700      	str	r7, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   161ea:	4a19      	ldr	r2, [pc, #100]	; (16250 <bt_gatt_clear+0x94>)
   161ec:	462b      	mov	r3, r5
   161ee:	2124      	movs	r1, #36	; 0x24
   161f0:	a805      	add	r0, sp, #20
   161f2:	f7fc fa5d 	bl	126b0 <bt_settings_encode_key>
		return settings_delete(key);
   161f6:	a805      	add	r0, sp, #20
   161f8:	f005 f9bb 	bl	1b572 <settings_delete>
	int err;

	err = bt_gatt_clear_ccc(id, addr);
	if (err < 0) {
   161fc:	2800      	cmp	r0, #0
   161fe:	db1e      	blt.n	1623e <bt_gatt_clear+0x82>
		return err;
	}

	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
		err = bt_gatt_clear_sc(id, addr);
   16200:	4629      	mov	r1, r5
   16202:	4620      	mov	r0, r4
   16204:	f7ff fadc 	bl	157c0 <bt_gatt_clear_sc>
		if (err < 0) {
   16208:	2800      	cmp	r0, #0
   1620a:	db18      	blt.n	1623e <bt_gatt_clear+0x82>
	cfg = find_cf_cfg_by_addr(id, addr);
   1620c:	4629      	mov	r1, r5
   1620e:	4620      	mov	r0, r4
   16210:	f7ff fa24 	bl	1565c <find_cf_cfg_by_addr>
	if (cfg) {
   16214:	b108      	cbz	r0, 1621a <bt_gatt_clear+0x5e>
		clear_cf_cfg(cfg);
   16216:	f008 fc56 	bl	1eac6 <clear_cf_cfg>
		if (id) {
   1621a:	b1a4      	cbz	r4, 16246 <bt_gatt_clear+0x8a>
			u8_to_dec(id_str, sizeof(id_str), id);
   1621c:	4622      	mov	r2, r4
   1621e:	2104      	movs	r1, #4
   16220:	4630      	mov	r0, r6
   16222:	f004 fa1e 	bl	1a662 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   16226:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "cf",
   16228:	4a0a      	ldr	r2, [pc, #40]	; (16254 <bt_gatt_clear+0x98>)
   1622a:	462b      	mov	r3, r5
   1622c:	2124      	movs	r1, #36	; 0x24
   1622e:	a805      	add	r0, sp, #20
   16230:	f7fc fa3e 	bl	126b0 <bt_settings_encode_key>
		return settings_delete(key);
   16234:	a805      	add	r0, sp, #20
   16236:	f005 f99c 	bl	1b572 <settings_delete>
		}
	}

	if (IS_ENABLED(CONFIG_BT_GATT_CACHING)) {
		err = bt_gatt_clear_cf(id, addr);
		if (err < 0) {
   1623a:	ea00 70e0 	and.w	r0, r0, r0, asr #31
	if (IS_ENABLED(CONFIG_BT_GATT_CLIENT)) {
		bt_gatt_clear_subscriptions(id, addr);
	}

	return 0;
}
   1623e:	b00f      	add	sp, #60	; 0x3c
   16240:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   16242:	9400      	str	r4, [sp, #0]
   16244:	e7d1      	b.n	161ea <bt_gatt_clear+0x2e>
			bt_settings_encode_key(key, sizeof(key), "cf",
   16246:	9400      	str	r4, [sp, #0]
   16248:	e7ee      	b.n	16228 <bt_gatt_clear+0x6c>
   1624a:	bf00      	nop
   1624c:	00015699 	.word	0x00015699
   16250:	00021ce4 	.word	0x00021ce4
   16254:	00021ceb 	.word	0x00021ceb

00016258 <bt_gatt_disconnected>:

void bt_gatt_disconnected(struct bt_conn *conn)
{
   16258:	b5f0      	push	{r4, r5, r6, r7, lr}
   1625a:	4604      	mov	r4, r0
   1625c:	b08d      	sub	sp, #52	; 0x34
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1625e:	4603      	mov	r3, r0
   16260:	f64f 71ff 	movw	r1, #65535	; 0xffff
   16264:	2001      	movs	r0, #1
   16266:	4a33      	ldr	r2, [pc, #204]	; (16334 <bt_gatt_disconnected+0xdc>)
		k_work_cancel_delayable(&gatt_ccc_store.work);
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   16268:	f104 0588 	add.w	r5, r4, #136	; 0x88
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1626c:	f008 ff04 	bl	1f078 <bt_gatt_foreach_attr>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   16270:	7a20      	ldrb	r0, [r4, #8]
   16272:	4629      	mov	r1, r5
   16274:	f007 f99a 	bl	1d5ac <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   16278:	b348      	cbz	r0, 162ce <bt_gatt_disconnected+0x76>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
   1627a:	4629      	mov	r1, r5
   1627c:	7a20      	ldrb	r0, [r4, #8]
   1627e:	f7ff ff6d 	bl	1615c <bt_gatt_store_ccc>
	cfg = find_cf_cfg(conn);
   16282:	4620      	mov	r0, r4
   16284:	f7ff f980 	bl	15588 <find_cf_cfg>
	if (!cfg) {
   16288:	4606      	mov	r6, r0
   1628a:	2800      	cmp	r0, #0
   1628c:	d03f      	beq.n	1630e <bt_gatt_disconnected+0xb6>
		if (conn->id) {
   1628e:	7a22      	ldrb	r2, [r4, #8]
		str = (char *)cfg->data;
   16290:	3608      	adds	r6, #8
		if (conn->id) {
   16292:	2a00      	cmp	r2, #0
   16294:	d03d      	beq.n	16312 <bt_gatt_disconnected+0xba>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   16296:	af02      	add	r7, sp, #8
   16298:	2104      	movs	r1, #4
   1629a:	4638      	mov	r0, r7
   1629c:	f004 f9e1 	bl	1a662 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   162a0:	9700      	str	r7, [sp, #0]
   162a2:	462b      	mov	r3, r5
   162a4:	4a24      	ldr	r2, [pc, #144]	; (16338 <bt_gatt_disconnected+0xe0>)
   162a6:	2124      	movs	r1, #36	; 0x24
   162a8:	a803      	add	r0, sp, #12
   162aa:	f7fc fa01 	bl	126b0 <bt_settings_encode_key>
	if (!cfg || !conn->id) {
   162ae:	7a23      	ldrb	r3, [r4, #8]
   162b0:	2701      	movs	r7, #1
   162b2:	b93b      	cbnz	r3, 162c4 <bt_gatt_disconnected+0x6c>
		bt_settings_encode_key(key, sizeof(key), "cf",
   162b4:	2300      	movs	r3, #0
   162b6:	9300      	str	r3, [sp, #0]
   162b8:	4a1f      	ldr	r2, [pc, #124]	; (16338 <bt_gatt_disconnected+0xe0>)
   162ba:	462b      	mov	r3, r5
   162bc:	2124      	movs	r1, #36	; 0x24
   162be:	a803      	add	r0, sp, #12
   162c0:	f7fc f9f6 	bl	126b0 <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
   162c4:	463a      	mov	r2, r7
   162c6:	4631      	mov	r1, r6
   162c8:	a803      	add	r0, sp, #12
   162ca:	f7fa fe01 	bl	10ed0 <settings_save_one>
		bt_gatt_store_cf(conn);
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   162ce:	7a20      	ldrb	r0, [r4, #8]
   162d0:	4629      	mov	r1, r5
   162d2:	f007 f96b 	bl	1d5ac <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   162d6:	b150      	cbz	r0, 162ee <bt_gatt_disconnected+0x96>
		struct addr_with_id addr_with_id = {
   162d8:	7a23      	ldrb	r3, [r4, #8]
   162da:	f88d 3010 	strb.w	r3, [sp, #16]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
   162de:	4a17      	ldr	r2, [pc, #92]	; (1633c <bt_gatt_disconnected+0xe4>)
		struct addr_with_id addr_with_id = {
   162e0:	9503      	str	r5, [sp, #12]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   162e2:	ab03      	add	r3, sp, #12
   162e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   162e8:	2001      	movs	r0, #1
   162ea:	f008 fec5 	bl	1f078 <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   162ee:	4620      	mov	r0, r4
   162f0:	f7ff f94a 	bl	15588 <find_cf_cfg>
	if (!cfg) {
   162f4:	4606      	mov	r6, r0
   162f6:	b1d8      	cbz	r0, 16330 <bt_gatt_disconnected+0xd8>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   162f8:	7a20      	ldrb	r0, [r4, #8]
   162fa:	4629      	mov	r1, r5
   162fc:	f007 f956 	bl	1d5ac <bt_addr_le_is_bonded>
   16300:	b948      	cbnz	r0, 16316 <bt_gatt_disconnected+0xbe>
		clear_cf_cfg(cfg);
   16302:	4630      	mov	r0, r6
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   16304:	b00d      	add	sp, #52	; 0x34
   16306:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		clear_cf_cfg(cfg);
   1630a:	f008 bbdc 	b.w	1eac6 <clear_cf_cfg>
		len = 0;
   1630e:	4607      	mov	r7, r0
   16310:	e7d0      	b.n	162b4 <bt_gatt_disconnected+0x5c>
   16312:	2701      	movs	r7, #1
   16314:	e7ce      	b.n	162b4 <bt_gatt_disconnected+0x5c>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   16316:	4629      	mov	r1, r5
   16318:	1c70      	adds	r0, r6, #1
   1631a:	f008 fbb4 	bl	1ea86 <bt_addr_le_copy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1631e:	f06f 0102 	mvn.w	r1, #2
   16322:	f106 000c 	add.w	r0, r6, #12
}
   16326:	b00d      	add	sp, #52	; 0x34
   16328:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1632c:	f008 bbbc 	b.w	1eaa8 <atomic_and>
   16330:	b00d      	add	sp, #52	; 0x34
   16332:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16334:	0001580d 	.word	0x0001580d
   16338:	00021ceb 	.word	0x00021ceb
   1633c:	00015699 	.word	0x00015699

00016340 <get_io_capa>:
	       BT_CMD_TEST(bt_dev.supported_commands, 34, 2);
}

static uint8_t get_io_capa(void)
{
	if (!bt_auth) {
   16340:	4b10      	ldr	r3, [pc, #64]	; (16384 <get_io_capa+0x44>)
   16342:	681b      	ldr	r3, [r3, #0]
   16344:	b1bb      	cbz	r3, 16376 <get_io_capa+0x36>
		goto no_callbacks;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
   16346:	681a      	ldr	r2, [r3, #0]
   16348:	b142      	cbz	r2, 1635c <get_io_capa+0x1c>
   1634a:	6859      	ldr	r1, [r3, #4]
   1634c:	b131      	cbz	r1, 1635c <get_io_capa+0x1c>
   1634e:	6899      	ldr	r1, [r3, #8]
   16350:	b911      	cbnz	r1, 16358 <get_io_capa+0x18>
	    (bt_auth->passkey_confirm || !sc_supported)) {
   16352:	490d      	ldr	r1, [pc, #52]	; (16388 <get_io_capa+0x48>)
   16354:	7809      	ldrb	r1, [r1, #0]
   16356:	b939      	cbnz	r1, 16368 <get_io_capa+0x28>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   16358:	2004      	movs	r0, #4
   1635a:	4770      	bx	lr
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
   1635c:	490a      	ldr	r1, [pc, #40]	; (16388 <get_io_capa+0x48>)
   1635e:	7809      	ldrb	r1, [r1, #0]
   16360:	b111      	cbz	r1, 16368 <get_io_capa+0x28>
   16362:	b10a      	cbz	r2, 16368 <get_io_capa+0x28>
   16364:	6899      	ldr	r1, [r3, #8]
   16366:	b941      	cbnz	r1, 1637a <get_io_capa+0x3a>
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
   16368:	685b      	ldr	r3, [r3, #4]
   1636a:	b943      	cbnz	r3, 1637e <get_io_capa+0x3e>
			return BT_SMP_IO_KEYBOARD_ONLY;
		}
	}

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
   1636c:	2a00      	cmp	r2, #0
   1636e:	bf0c      	ite	eq
   16370:	2003      	moveq	r0, #3
   16372:	2000      	movne	r0, #0
   16374:	4770      	bx	lr
no_callbacks:
	if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
	    fixed_passkey != BT_PASSKEY_INVALID) {
		return BT_SMP_IO_DISPLAY_ONLY;
	} else {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   16376:	2003      	movs	r0, #3
   16378:	4770      	bx	lr
		return BT_SMP_IO_DISPLAY_YESNO;
   1637a:	2001      	movs	r0, #1
   1637c:	4770      	bx	lr
			return BT_SMP_IO_KEYBOARD_ONLY;
   1637e:	2002      	movs	r0, #2
	}
}
   16380:	4770      	bx	lr
   16382:	bf00      	nop
   16384:	20002568 	.word	0x20002568
   16388:	20002b76 	.word	0x20002b76

0001638c <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
   1638c:	4b06      	ldr	r3, [pc, #24]	; (163a8 <bt_smp_accept+0x1c>)
   1638e:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
   16392:	b928      	cbnz	r0, 163a0 <bt_smp_accept+0x14>
			continue;
		}

		smp->chan.chan.ops = &ops;
   16394:	4a05      	ldr	r2, [pc, #20]	; (163ac <bt_smp_accept+0x20>)
   16396:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4

		*chan = &smp->chan.chan;
   1639a:	33f0      	adds	r3, #240	; 0xf0
   1639c:	600b      	str	r3, [r1, #0]

		return 0;
   1639e:	4770      	bx	lr
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
   163a0:	f06f 000b 	mvn.w	r0, #11
}
   163a4:	4770      	bx	lr
   163a6:	bf00      	nop
   163a8:	20001790 	.word	0x20001790
   163ac:	00021478 	.word	0x00021478

000163b0 <get_auth.constprop.0>:
	if (sc_supported) {
   163b0:	4b0c      	ldr	r3, [pc, #48]	; (163e4 <get_auth.constprop.0+0x34>)
   163b2:	781b      	ldrb	r3, [r3, #0]
static uint8_t get_auth(struct bt_conn *conn, uint8_t auth)
   163b4:	b510      	push	{r4, lr}
	if (sc_supported) {
   163b6:	b17b      	cbz	r3, 163d8 <get_auth.constprop.0+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
   163b8:	f000 040f 	and.w	r4, r0, #15
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   163bc:	f7ff ffc0 	bl	16340 <get_io_capa>
	if (bondable) {
   163c0:	4b09      	ldr	r3, [pc, #36]	; (163e8 <get_auth.constprop.0+0x38>)
   163c2:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   163c4:	2803      	cmp	r0, #3
		auth &= ~(BT_SMP_AUTH_MITM);
   163c6:	bf0c      	ite	eq
   163c8:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
   163cc:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
   163d0:	b12b      	cbz	r3, 163de <get_auth.constprop.0+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
   163d2:	f044 0001 	orr.w	r0, r4, #1
}
   163d6:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
   163d8:	f000 0407 	and.w	r4, r0, #7
   163dc:	e7ee      	b.n	163bc <get_auth.constprop.0+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
   163de:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
   163e2:	e7f8      	b.n	163d6 <get_auth.constprop.0+0x26>
   163e4:	20002b76 	.word	0x20002b76
   163e8:	2000064b 	.word	0x2000064b

000163ec <smp_init>:
{
   163ec:	b538      	push	{r3, r4, r5, lr}
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   163ee:	22f0      	movs	r2, #240	; 0xf0
{
   163f0:	4605      	mov	r5, r0
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   163f2:	2100      	movs	r1, #0
   163f4:	f006 fc62 	bl	1ccbc <memset>
	if (bt_rand(smp->prnd, 16)) {
   163f8:	2110      	movs	r1, #16
   163fa:	f105 0027 	add.w	r0, r5, #39	; 0x27
   163fe:	f002 faa1 	bl	18944 <bt_rand>
   16402:	4604      	mov	r4, r0
   16404:	b948      	cbnz	r0, 1641a <smp_init+0x2e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
   16406:	2105      	movs	r1, #5
   16408:	4628      	mov	r0, r5
   1640a:	f008 ffa0 	bl	1f34e <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
   1640e:	f7fd fd97 	bl	13f40 <bt_pub_key_get>
   16412:	4b03      	ldr	r3, [pc, #12]	; (16420 <smp_init+0x34>)
   16414:	6018      	str	r0, [r3, #0]
}
   16416:	4620      	mov	r0, r4
   16418:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1641a:	2408      	movs	r4, #8
   1641c:	e7fb      	b.n	16416 <smp_init+0x2a>
   1641e:	bf00      	nop
   16420:	20002644 	.word	0x20002644

00016424 <smp_dhkey_generate>:
{
   16424:	b538      	push	{r3, r4, r5, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   16426:	1d05      	adds	r5, r0, #4
{
   16428:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1642a:	2108      	movs	r1, #8
   1642c:	4628      	mov	r0, r5
   1642e:	f008 ff8e 	bl	1f34e <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   16432:	4906      	ldr	r1, [pc, #24]	; (1644c <smp_dhkey_generate+0x28>)
   16434:	f104 0057 	add.w	r0, r4, #87	; 0x57
   16438:	f7fd fd92 	bl	13f60 <bt_dh_key_gen>
	if (err) {
   1643c:	b120      	cbz	r0, 16448 <smp_dhkey_generate+0x24>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1643e:	4628      	mov	r0, r5
   16440:	2108      	movs	r1, #8
   16442:	f008 febc 	bl	1f1be <atomic_clear_bit>
		return BT_SMP_ERR_UNSPECIFIED;
   16446:	2008      	movs	r0, #8
}
   16448:	bd38      	pop	{r3, r4, r5, pc}
   1644a:	bf00      	nop
   1644c:	0001f715 	.word	0x0001f715

00016450 <smp_find>:
{
   16450:	4601      	mov	r1, r0
   16452:	b508      	push	{r3, lr}
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   16454:	4803      	ldr	r0, [pc, #12]	; (16464 <smp_find+0x14>)
   16456:	f008 ff94 	bl	1f382 <atomic_test_bit>
	return NULL;
   1645a:	2800      	cmp	r0, #0
}
   1645c:	4802      	ldr	r0, [pc, #8]	; (16468 <smp_find+0x18>)
   1645e:	bf08      	it	eq
   16460:	2000      	moveq	r0, #0
   16462:	bd08      	pop	{r3, pc}
   16464:	20001794 	.word	0x20001794
   16468:	20001790 	.word	0x20001790

0001646c <smp_pairing_req>:
{
   1646c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
   16470:	688d      	ldr	r5, [r1, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   16472:	78eb      	ldrb	r3, [r5, #3]
   16474:	3b07      	subs	r3, #7
   16476:	2b09      	cmp	r3, #9
{
   16478:	4604      	mov	r4, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   1647a:	d903      	bls.n	16484 <smp_pairing_req+0x18>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   1647c:	2506      	movs	r5, #6
}
   1647e:	4628      	mov	r0, r5
   16480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	struct bt_conn *conn = smp->chan.chan.conn;
   16484:	f8d0 70f0 	ldr.w	r7, [r0, #240]	; 0xf0
	if (!conn->le.keys) {
   16488:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
   1648c:	b15b      	cbz	r3, 164a6 <smp_pairing_req+0x3a>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   1648e:	1d26      	adds	r6, r4, #4
   16490:	210f      	movs	r1, #15
   16492:	4630      	mov	r0, r6
   16494:	f008 ff75 	bl	1f382 <atomic_test_bit>
   16498:	b980      	cbnz	r0, 164bc <smp_pairing_req+0x50>
		int ret = smp_init(smp);
   1649a:	4620      	mov	r0, r4
   1649c:	f7ff ffa6 	bl	163ec <smp_init>
		if (ret) {
   164a0:	b160      	cbz	r0, 164bc <smp_pairing_req+0x50>
			return ret;
   164a2:	b2c5      	uxtb	r5, r0
   164a4:	e7eb      	b.n	1647e <smp_pairing_req+0x12>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   164a6:	7a38      	ldrb	r0, [r7, #8]
   164a8:	f107 0188 	add.w	r1, r7, #136	; 0x88
   164ac:	f000 fde8 	bl	17080 <bt_keys_get_addr>
   164b0:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
		if (!conn->le.keys) {
   164b4:	2800      	cmp	r0, #0
   164b6:	d1ea      	bne.n	1648e <smp_pairing_req+0x22>
	switch (sec) {
   164b8:	2508      	movs	r5, #8
   164ba:	e7e0      	b.n	1647e <smp_pairing_req+0x12>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   164bc:	2301      	movs	r3, #1
	memcpy(smp->preq + 1, req, sizeof(*req));
   164be:	2206      	movs	r2, #6
   164c0:	4629      	mov	r1, r5
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   164c2:	7263      	strb	r3, [r4, #9]
	memcpy(smp->preq + 1, req, sizeof(*req));
   164c4:	f104 000a 	add.w	r0, r4, #10
   164c8:	f006 fbed 	bl	1cca6 <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   164cc:	2302      	movs	r3, #2
   164ce:	7423      	strb	r3, [r4, #16]
	rsp->auth_req = get_auth(conn, req->auth_req);
   164d0:	78a8      	ldrb	r0, [r5, #2]
   164d2:	f7ff ff6d 	bl	163b0 <get_auth.constprop.0>
   164d6:	74e0      	strb	r0, [r4, #19]
   164d8:	4680      	mov	r8, r0
	rsp->io_capability = get_io_capa();
   164da:	f7ff ff31 	bl	16340 <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   164de:	4b5c      	ldr	r3, [pc, #368]	; (16650 <smp_pairing_req+0x1e4>)
	rsp->io_capability = get_io_capa();
   164e0:	7460      	strb	r0, [r4, #17]
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   164e2:	781b      	ldrb	r3, [r3, #0]
   164e4:	74a3      	strb	r3, [r4, #18]
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   164e6:	2310      	movs	r3, #16
   164e8:	7523      	strb	r3, [r4, #20]
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
   164ea:	792b      	ldrb	r3, [r5, #4]
   164ec:	f003 0303 	and.w	r3, r3, #3
   164f0:	7563      	strb	r3, [r4, #21]
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   164f2:	796b      	ldrb	r3, [r5, #5]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   164f4:	f018 0f08 	tst.w	r8, #8
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   164f8:	f003 0301 	and.w	r3, r3, #1
   164fc:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   164fe:	d00c      	beq.n	1651a <smp_pairing_req+0xae>
   16500:	78ab      	ldrb	r3, [r5, #2]
   16502:	071b      	lsls	r3, r3, #28
   16504:	d509      	bpl.n	1651a <smp_pairing_req+0xae>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   16506:	2105      	movs	r1, #5
   16508:	4630      	mov	r0, r6
   1650a:	f008 ff20 	bl	1f34e <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
   1650e:	7d63      	ldrb	r3, [r4, #21]
   16510:	f003 0302 	and.w	r3, r3, #2
   16514:	7563      	strb	r3, [r4, #21]
		rsp->resp_key_dist &= SEND_KEYS_SC;
   16516:	2300      	movs	r3, #0
   16518:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   1651a:	7ce3      	ldrb	r3, [r4, #19]
   1651c:	0698      	lsls	r0, r3, #26
   1651e:	d506      	bpl.n	1652e <smp_pairing_req+0xc2>
   16520:	78ab      	ldrb	r3, [r5, #2]
   16522:	0699      	lsls	r1, r3, #26
   16524:	d503      	bpl.n	1652e <smp_pairing_req+0xc2>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   16526:	2114      	movs	r1, #20
   16528:	4630      	mov	r0, r6
   1652a:	f008 ff10 	bl	1f34e <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
   1652e:	7da3      	ldrb	r3, [r4, #22]
   16530:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist = rsp->init_key_dist;
   16534:	7d63      	ldrb	r3, [r4, #21]
   16536:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   1653a:	7ce3      	ldrb	r3, [r4, #19]
   1653c:	07da      	lsls	r2, r3, #31
   1653e:	d506      	bpl.n	1654e <smp_pairing_req+0xe2>
   16540:	78ab      	ldrb	r3, [r5, #2]
   16542:	07db      	lsls	r3, r3, #31
   16544:	d503      	bpl.n	1654e <smp_pairing_req+0xe2>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   16546:	210d      	movs	r1, #13
   16548:	4630      	mov	r0, r6
   1654a:	f008 ff00 	bl	1f34e <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   1654e:	2103      	movs	r1, #3
   16550:	4630      	mov	r0, r6
   16552:	f008 fefc 	bl	1f34e <atomic_set_bit>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   16556:	7b23      	ldrb	r3, [r4, #12]
   16558:	7ce1      	ldrb	r1, [r4, #19]
	smp->method = get_pair_method(smp, req->io_capability);
   1655a:	782d      	ldrb	r5, [r5, #0]
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   1655c:	ea03 0201 	and.w	r2, r3, r1
   16560:	0710      	lsls	r0, r2, #28
   16562:	d504      	bpl.n	1656e <smp_pairing_req+0x102>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   16564:	7ae2      	ldrb	r2, [r4, #11]
   16566:	7ca0      	ldrb	r0, [r4, #18]
   16568:	4302      	orrs	r2, r0
   1656a:	07d2      	lsls	r2, r2, #31
   1656c:	d415      	bmi.n	1659a <smp_pairing_req+0x12e>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1656e:	2d04      	cmp	r5, #4
   16570:	d815      	bhi.n	1659e <smp_pairing_req+0x132>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   16572:	430b      	orrs	r3, r1
   16574:	f013 0304 	ands.w	r3, r3, #4
   16578:	d006      	beq.n	16588 <smp_pairing_req+0x11c>
	return gen_method_sc[remote_io][get_io_capa()];
   1657a:	f7ff fee1 	bl	16340 <get_io_capa>
   1657e:	4b35      	ldr	r3, [pc, #212]	; (16654 <smp_pairing_req+0x1e8>)
   16580:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   16584:	441d      	add	r5, r3
   16586:	5c2b      	ldrb	r3, [r5, r0]
	smp->method = get_pair_method(smp, req->io_capability);
   16588:	7223      	strb	r3, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   1658a:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
   1658e:	4620      	mov	r0, r4
   16590:	f008 ff00 	bl	1f394 <update_keys_check>
   16594:	b928      	cbnz	r0, 165a2 <smp_pairing_req+0x136>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   16596:	2503      	movs	r5, #3
   16598:	e771      	b.n	1647e <smp_pairing_req+0x12>
			return LE_SC_OOB;
   1659a:	2305      	movs	r3, #5
   1659c:	e7f4      	b.n	16588 <smp_pairing_req+0x11c>
		return JUST_WORKS;
   1659e:	2300      	movs	r3, #0
   165a0:	e7f2      	b.n	16588 <smp_pairing_req+0x11c>
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   165a2:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   165a6:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
   165a8:	2b03      	cmp	r3, #3
   165aa:	d032      	beq.n	16612 <smp_pairing_req+0x1a6>
   165ac:	d820      	bhi.n	165f0 <smp_pairing_req+0x184>
   165ae:	3b01      	subs	r3, #1
   165b0:	2b01      	cmp	r3, #1
   165b2:	d881      	bhi.n	164b8 <smp_pairing_req+0x4c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   165b4:	2105      	movs	r1, #5
   165b6:	4630      	mov	r0, r6
   165b8:	f008 fee3 	bl	1f382 <atomic_test_bit>
   165bc:	2800      	cmp	r0, #0
   165be:	d0ea      	beq.n	16596 <smp_pairing_req+0x12a>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   165c0:	7a25      	ldrb	r5, [r4, #8]
   165c2:	bb55      	cbnz	r5, 1661a <smp_pairing_req+0x1ae>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   165c4:	210f      	movs	r1, #15
   165c6:	4630      	mov	r0, r6
   165c8:	f008 fedb 	bl	1f382 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   165cc:	bb28      	cbnz	r0, 1661a <smp_pairing_req+0x1ae>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   165ce:	f8df 8088 	ldr.w	r8, [pc, #136]	; 16658 <smp_pairing_req+0x1ec>
   165d2:	f8d8 3000 	ldr.w	r3, [r8]
   165d6:	b303      	cbz	r3, 1661a <smp_pairing_req+0x1ae>
	    bt_auth && bt_auth->pairing_confirm) {
   165d8:	695b      	ldr	r3, [r3, #20]
   165da:	b1f3      	cbz	r3, 1661a <smp_pairing_req+0x1ae>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   165dc:	4630      	mov	r0, r6
   165de:	210a      	movs	r1, #10
   165e0:	f008 feb5 	bl	1f34e <atomic_set_bit>
		bt_auth->pairing_confirm(conn);
   165e4:	f8d8 3000 	ldr.w	r3, [r8]
   165e8:	4638      	mov	r0, r7
   165ea:	695b      	ldr	r3, [r3, #20]
   165ec:	4798      	blx	r3
		return 0;
   165ee:	e746      	b.n	1647e <smp_pairing_req+0x12>
	switch (sec) {
   165f0:	2b04      	cmp	r3, #4
   165f2:	f47f af61 	bne.w	164b8 <smp_pairing_req+0x4c>
	return MIN(req->max_key_size, rsp->max_key_size);
   165f6:	7d23      	ldrb	r3, [r4, #20]
   165f8:	7b62      	ldrb	r2, [r4, #13]
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   165fa:	4293      	cmp	r3, r2
   165fc:	bf28      	it	cs
   165fe:	4613      	movcs	r3, r2
   16600:	2b10      	cmp	r3, #16
   16602:	f47f af3b 	bne.w	1647c <smp_pairing_req+0x10>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   16606:	2105      	movs	r1, #5
   16608:	4630      	mov	r0, r6
   1660a:	f008 feba 	bl	1f382 <atomic_test_bit>
   1660e:	2800      	cmp	r0, #0
   16610:	d0c1      	beq.n	16596 <smp_pairing_req+0x12a>
		if (smp->method == JUST_WORKS) {
   16612:	7a23      	ldrb	r3, [r4, #8]
   16614:	2b00      	cmp	r3, #0
   16616:	d1cd      	bne.n	165b4 <smp_pairing_req+0x148>
   16618:	e7bd      	b.n	16596 <smp_pairing_req+0x12a>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   1661a:	210c      	movs	r1, #12
   1661c:	4620      	mov	r0, r4
   1661e:	f008 fe96 	bl	1f34e <atomic_set_bit>
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   16622:	2102      	movs	r1, #2
   16624:	f008 fef6 	bl	1f414 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   16628:	4605      	mov	r5, r0
   1662a:	2800      	cmp	r0, #0
   1662c:	f43f af44 	beq.w	164b8 <smp_pairing_req+0x4c>
   16630:	2106      	movs	r1, #6
   16632:	3008      	adds	r0, #8
   16634:	f009 fa89 	bl	1fb4a <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
   16638:	2206      	movs	r2, #6
   1663a:	f104 0111 	add.w	r1, r4, #17
   1663e:	f006 fb32 	bl	1cca6 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   16642:	4629      	mov	r1, r5
   16644:	4620      	mov	r0, r4
   16646:	f008 fde7 	bl	1f218 <smp_send.constprop.0>
	return 0;
   1664a:	2500      	movs	r5, #0
   1664c:	e717      	b.n	1647e <smp_pairing_req+0x12>
   1664e:	bf00      	nop
   16650:	20002b75 	.word	0x20002b75
   16654:	00021d12 	.word	0x00021d12
   16658:	20002568 	.word	0x20002568

0001665c <smp_pairing_random>:
{
   1665c:	b570      	push	{r4, r5, r6, lr}
   1665e:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   16660:	f100 0537 	add.w	r5, r0, #55	; 0x37
   16664:	6889      	ldr	r1, [r1, #8]
{
   16666:	b09c      	sub	sp, #112	; 0x70
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   16668:	2210      	movs	r2, #16
   1666a:	4628      	mov	r0, r5
   1666c:	f006 fb1b 	bl	1cca6 <memcpy>
	switch (smp->method) {
   16670:	7a23      	ldrb	r3, [r4, #8]
   16672:	2b05      	cmp	r3, #5
   16674:	f200 808b 	bhi.w	1678e <smp_pairing_random+0x132>
   16678:	e8df f003 	tbb	[pc, r3]
   1667c:	034a4a3d 	.word	0x034a4a3d
   16680:	8b89      	.short	0x8b89
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
   16682:	4b5c      	ldr	r3, [pc, #368]	; (167f4 <smp_pairing_random+0x198>)
	sys_memcpy_swap(m, u, 32);
   16684:	2220      	movs	r2, #32
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
   16686:	681e      	ldr	r6, [r3, #0]
	sys_memcpy_swap(m, u, 32);
   16688:	eb0d 0002 	add.w	r0, sp, r2
   1668c:	f104 0157 	add.w	r1, r4, #87	; 0x57
   16690:	f008 fd82 	bl	1f198 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   16694:	2220      	movs	r2, #32
   16696:	4631      	mov	r1, r6
   16698:	a810      	add	r0, sp, #64	; 0x40
   1669a:	f008 fd7d 	bl	1f198 <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   1669e:	2210      	movs	r2, #16
   166a0:	f104 0127 	add.w	r1, r4, #39	; 0x27
   166a4:	a818      	add	r0, sp, #96	; 0x60
   166a6:	f008 fd77 	bl	1f198 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   166aa:	2210      	movs	r2, #16
   166ac:	eb0d 0002 	add.w	r0, sp, r2
   166b0:	4629      	mov	r1, r5
   166b2:	f008 fd71 	bl	1f198 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
   166b6:	ab04      	add	r3, sp, #16
   166b8:	2250      	movs	r2, #80	; 0x50
   166ba:	a908      	add	r1, sp, #32
   166bc:	4618      	mov	r0, r3
   166be:	f008 fd8d 	bl	1f1dc <bt_smp_aes_cmac>
	if (err) {
   166c2:	2800      	cmp	r0, #0
   166c4:	d163      	bne.n	1678e <smp_pairing_random+0x132>
	memcpy(passkey, xs + 12, 4);
   166c6:	2204      	movs	r2, #4
   166c8:	a907      	add	r1, sp, #28
   166ca:	a803      	add	r0, sp, #12
   166cc:	f006 faeb 	bl	1cca6 <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   166d0:	9b03      	ldr	r3, [sp, #12]
   166d2:	4a49      	ldr	r2, [pc, #292]	; (167f8 <smp_pairing_random+0x19c>)
   166d4:	ba1b      	rev	r3, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   166d6:	1d20      	adds	r0, r4, #4
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   166d8:	fbb3 f1f2 	udiv	r1, r3, r2
   166dc:	fb02 3311 	mls	r3, r2, r1, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   166e0:	210a      	movs	r1, #10
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   166e2:	9303      	str	r3, [sp, #12]
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   166e4:	f008 fe33 	bl	1f34e <atomic_set_bit>
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
   166e8:	4b44      	ldr	r3, [pc, #272]	; (167fc <smp_pairing_random+0x1a0>)
   166ea:	9903      	ldr	r1, [sp, #12]
   166ec:	681b      	ldr	r3, [r3, #0]
   166ee:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   166f2:	689b      	ldr	r3, [r3, #8]
   166f4:	4798      	blx	r3
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   166f6:	210d      	movs	r1, #13
   166f8:	4620      	mov	r0, r4
   166fa:	f008 fe28 	bl	1f34e <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   166fe:	2110      	movs	r1, #16
   16700:	1d20      	adds	r0, r4, #4
   16702:	f008 fe24 	bl	1f34e <atomic_set_bit>
	return smp_send_pairing_random(smp);
   16706:	4620      	mov	r0, r4
   16708:	f008 fea3 	bl	1f452 <smp_send_pairing_random>
   1670c:	4605      	mov	r5, r0
   1670e:	e01a      	b.n	16746 <smp_pairing_random+0xea>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   16710:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   16714:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   16718:	4936      	ldr	r1, [pc, #216]	; (167f4 <smp_pairing_random+0x198>)
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1671a:	40d3      	lsrs	r3, r2
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1671c:	ae08      	add	r6, sp, #32
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1671e:	f003 0301 	and.w	r3, r3, #1
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   16722:	9600      	str	r6, [sp, #0]
   16724:	6809      	ldr	r1, [r1, #0]
   16726:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1672a:	462a      	mov	r2, r5
   1672c:	f104 0057 	add.w	r0, r4, #87	; 0x57
   16730:	f008 fde8 	bl	1f304 <smp_f4>
   16734:	bb58      	cbnz	r0, 1678e <smp_pairing_random+0x132>
	if (memcmp(smp->pcnf, cfm, 16)) {
   16736:	2210      	movs	r2, #16
   16738:	4631      	mov	r1, r6
   1673a:	f104 0017 	add.w	r0, r4, #23
   1673e:	f006 faa1 	bl	1cc84 <memcmp>
   16742:	b118      	cbz	r0, 1674c <smp_pairing_random+0xf0>
		return BT_SMP_ERR_CONFIRM_FAILED;
   16744:	2504      	movs	r5, #4
}
   16746:	4628      	mov	r0, r5
   16748:	b01c      	add	sp, #112	; 0x70
   1674a:	bd70      	pop	{r4, r5, r6, pc}
		atomic_set_bit(smp->allowed_cmds,
   1674c:	2103      	movs	r1, #3
   1674e:	4620      	mov	r0, r4
   16750:	f008 fdfd 	bl	1f34e <atomic_set_bit>
		err = smp_send_pairing_random(smp);
   16754:	f008 fe7d 	bl	1f452 <smp_send_pairing_random>
		if (err) {
   16758:	4605      	mov	r5, r0
   1675a:	2800      	cmp	r0, #0
   1675c:	d1f3      	bne.n	16746 <smp_pairing_random+0xea>
		smp->passkey_round++;
   1675e:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   16762:	3301      	adds	r3, #1
   16764:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
   16766:	2b14      	cmp	r3, #20
		smp->passkey_round++;
   16768:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
		if (smp->passkey_round == 20U) {
   1676c:	d108      	bne.n	16780 <smp_pairing_random+0x124>
			atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   1676e:	4620      	mov	r0, r4
   16770:	210d      	movs	r1, #13
   16772:	f008 fdec 	bl	1f34e <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   16776:	2110      	movs	r1, #16
   16778:	1d20      	adds	r0, r4, #4
   1677a:	f008 fde8 	bl	1f34e <atomic_set_bit>
			return 0;
   1677e:	e7e2      	b.n	16746 <smp_pairing_random+0xea>
		if (bt_rand(smp->prnd, 16)) {
   16780:	2110      	movs	r1, #16
   16782:	f104 0027 	add.w	r0, r4, #39	; 0x27
   16786:	f002 f8dd 	bl	18944 <bt_rand>
   1678a:	2800      	cmp	r0, #0
   1678c:	d0db      	beq.n	16746 <smp_pairing_random+0xea>
	switch (smp->method) {
   1678e:	2508      	movs	r5, #8
   16790:	e7d9      	b.n	16746 <smp_pairing_random+0xea>
		if (bt_rand(smp->prnd, 16)) {
   16792:	2110      	movs	r1, #16
   16794:	f104 0027 	add.w	r0, r4, #39	; 0x27
   16798:	f002 f8d4 	bl	18944 <bt_rand>
   1679c:	2800      	cmp	r0, #0
   1679e:	d1f6      	bne.n	1678e <smp_pairing_random+0x132>
		if (bt_auth && bt_auth->oob_data_request) {
   167a0:	4e16      	ldr	r6, [pc, #88]	; (167fc <smp_pairing_random+0x1a0>)
   167a2:	6833      	ldr	r3, [r6, #0]
   167a4:	b1fb      	cbz	r3, 167e6 <smp_pairing_random+0x18a>
   167a6:	68db      	ldr	r3, [r3, #12]
   167a8:	b1eb      	cbz	r3, 167e6 <smp_pairing_random+0x18a>
			struct bt_conn_oob_info info = {
   167aa:	4b15      	ldr	r3, [pc, #84]	; (16800 <smp_pairing_random+0x1a4>)
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   167ac:	7ae2      	ldrb	r2, [r4, #11]
			struct bt_conn_oob_info info = {
   167ae:	881b      	ldrh	r3, [r3, #0]
   167b0:	f8ad 3020 	strh.w	r3, [sp, #32]
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   167b4:	7ca3      	ldrb	r3, [r4, #18]
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   167b6:	07d2      	lsls	r2, r2, #31
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   167b8:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   167bc:	d415      	bmi.n	167ea <smp_pairing_random+0x18e>
   167be:	2b00      	cmp	r3, #0
   167c0:	bf14      	ite	ne
   167c2:	2001      	movne	r0, #1
   167c4:	2003      	moveq	r0, #3
			smp->oobd_local = NULL;
   167c6:	2500      	movs	r5, #0
	info->lesc.oob_config = oob_config;
   167c8:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
			smp->oobd_remote = NULL;
   167cc:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   167d0:	1d20      	adds	r0, r4, #4
   167d2:	210c      	movs	r1, #12
   167d4:	f008 fdbb 	bl	1f34e <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
   167d8:	6833      	ldr	r3, [r6, #0]
   167da:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   167de:	68db      	ldr	r3, [r3, #12]
   167e0:	a908      	add	r1, sp, #32
   167e2:	4798      	blx	r3
			return 0;
   167e4:	e7af      	b.n	16746 <smp_pairing_random+0xea>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   167e6:	2502      	movs	r5, #2
   167e8:	e7ad      	b.n	16746 <smp_pairing_random+0xea>
				     BT_CONN_OOB_BOTH_PEERS :
   167ea:	2b00      	cmp	r3, #0
   167ec:	bf18      	it	ne
   167ee:	2002      	movne	r0, #2
   167f0:	e7e9      	b.n	167c6 <smp_pairing_random+0x16a>
   167f2:	bf00      	nop
   167f4:	20002644 	.word	0x20002644
   167f8:	000f4240 	.word	0x000f4240
   167fc:	20002568 	.word	0x20002568
   16800:	00020e78 	.word	0x00020e78

00016804 <compute_and_check_and_send_slave_dhcheck>:
{
   16804:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)memset(r, 0, sizeof(r));
   16808:	2210      	movs	r2, #16
{
   1680a:	b0a3      	sub	sp, #140	; 0x8c
   1680c:	4604      	mov	r4, r0
	(void)memset(r, 0, sizeof(r));
   1680e:	2100      	movs	r1, #0
   16810:	eb0d 0002 	add.w	r0, sp, r2
   16814:	f006 fa52 	bl	1ccbc <memset>
	switch (smp->method) {
   16818:	7a23      	ldrb	r3, [r4, #8]
   1681a:	2b05      	cmp	r3, #5
   1681c:	d87f      	bhi.n	1691e <compute_and_check_and_send_slave_dhcheck+0x11a>
   1681e:	e8df f003 	tbb	[pc, r3]
   16822:	0309      	.short	0x0309
   16824:	807e0903 	.word	0x807e0903
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   16828:	2204      	movs	r2, #4
   1682a:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
   1682e:	a804      	add	r0, sp, #16
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   16830:	f006 fa39 	bl	1cca6 <memcpy>
	uint8_t m[53] = { 0x00, /* counter */
   16834:	4b62      	ldr	r3, [pc, #392]	; (169c0 <compute_and_check_and_send_slave_dhcheck+0x1bc>)
		   &smp->chan.chan.conn->le.init_addr,
   16836:	f8d4 90f0 	ldr.w	r9, [r4, #240]	; 0xf0
	uint8_t m[53] = { 0x00, /* counter */
   1683a:	aa14      	add	r2, sp, #80	; 0x50
   1683c:	f103 0630 	add.w	r6, r3, #48	; 0x30
   16840:	6818      	ldr	r0, [r3, #0]
   16842:	6859      	ldr	r1, [r3, #4]
   16844:	4615      	mov	r5, r2
   16846:	c503      	stmia	r5!, {r0, r1}
   16848:	3308      	adds	r3, #8
   1684a:	42b3      	cmp	r3, r6
   1684c:	462a      	mov	r2, r5
   1684e:	d1f7      	bne.n	16840 <compute_and_check_and_send_slave_dhcheck+0x3c>
   16850:	6818      	ldr	r0, [r3, #0]
   16852:	791b      	ldrb	r3, [r3, #4]
   16854:	6028      	str	r0, [r5, #0]
   16856:	712b      	strb	r3, [r5, #4]
	sys_memcpy_swap(ws, w, 32);
   16858:	ad0c      	add	r5, sp, #48	; 0x30
   1685a:	2220      	movs	r2, #32
   1685c:	f104 0197 	add.w	r1, r4, #151	; 0x97
   16860:	4628      	mov	r0, r5
   16862:	f008 fc99 	bl	1f198 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
   16866:	4857      	ldr	r0, [pc, #348]	; (169c4 <compute_and_check_and_send_slave_dhcheck+0x1c0>)
   16868:	ab08      	add	r3, sp, #32
   1686a:	2220      	movs	r2, #32
   1686c:	4629      	mov	r1, r5
   1686e:	f008 fcb5 	bl	1f1dc <bt_smp_aes_cmac>
	if (err) {
   16872:	2800      	cmp	r0, #0
   16874:	d153      	bne.n	1691e <compute_and_check_and_send_slave_dhcheck+0x11a>
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   16876:	f104 0737 	add.w	r7, r4, #55	; 0x37
	sys_memcpy_swap(m + 5, n1, 16);
   1687a:	2210      	movs	r2, #16
   1687c:	4639      	mov	r1, r7
   1687e:	f10d 0055 	add.w	r0, sp, #85	; 0x55
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   16882:	f104 0827 	add.w	r8, r4, #39	; 0x27
	sys_memcpy_swap(m + 5, n1, 16);
   16886:	f008 fc87 	bl	1f198 <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
   1688a:	2210      	movs	r2, #16
   1688c:	4641      	mov	r1, r8
   1688e:	f10d 0065 	add.w	r0, sp, #101	; 0x65
   16892:	f008 fc81 	bl	1f198 <sys_memcpy_swap>
	m[37] = a1->type;
   16896:	f899 308f 	ldrb.w	r3, [r9, #143]	; 0x8f
   1689a:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   1689e:	2206      	movs	r2, #6
   168a0:	f109 0190 	add.w	r1, r9, #144	; 0x90
   168a4:	f10d 0076 	add.w	r0, sp, #118	; 0x76
   168a8:	f008 fc76 	bl	1f198 <sys_memcpy_swap>
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   168ac:	f104 06c7 	add.w	r6, r4, #199	; 0xc7
	m[44] = a2->type;
   168b0:	f899 3096 	ldrb.w	r3, [r9, #150]	; 0x96
   168b4:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   168b8:	2206      	movs	r2, #6
   168ba:	f109 0197 	add.w	r1, r9, #151	; 0x97
   168be:	f10d 007d 	add.w	r0, sp, #125	; 0x7d
   168c2:	f008 fc69 	bl	1f198 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
   168c6:	4633      	mov	r3, r6
   168c8:	2235      	movs	r2, #53	; 0x35
   168ca:	a914      	add	r1, sp, #80	; 0x50
   168cc:	a808      	add	r0, sp, #32
   168ce:	f008 fc85 	bl	1f1dc <bt_smp_aes_cmac>
	if (err) {
   168d2:	bb20      	cbnz	r0, 1691e <compute_and_check_and_send_slave_dhcheck+0x11a>
	sys_mem_swap(mackey, 16);
   168d4:	4630      	mov	r0, r6
   168d6:	f008 fcbb 	bl	1f250 <sys_mem_swap.constprop.0>
		   smp->tk)) {
   168da:	f104 0947 	add.w	r9, r4, #71	; 0x47
	m[0] = 0x01;
   168de:	2301      	movs	r3, #1
   168e0:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
   168e4:	2235      	movs	r2, #53	; 0x35
   168e6:	464b      	mov	r3, r9
   168e8:	a914      	add	r1, sp, #80	; 0x50
   168ea:	a808      	add	r0, sp, #32
   168ec:	f008 fc76 	bl	1f1dc <bt_smp_aes_cmac>
	if (err) {
   168f0:	b9a8      	cbnz	r0, 1691e <compute_and_check_and_send_slave_dhcheck+0x11a>
	sys_mem_swap(ltk, 16);
   168f2:	4648      	mov	r0, r9
   168f4:	f008 fcac 	bl	1f250 <sys_mem_swap.constprop.0>
		   &smp->chan.chan.conn->le.resp_addr,
   168f8:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   168fc:	aa14      	add	r2, sp, #80	; 0x50
   168fe:	9203      	str	r2, [sp, #12]
		   &smp->chan.chan.conn->le.init_addr, e)) {
   16900:	f103 028f 	add.w	r2, r3, #143	; 0x8f
		   &smp->chan.chan.conn->le.resp_addr,
   16904:	3396      	adds	r3, #150	; 0x96
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   16906:	9301      	str	r3, [sp, #4]
   16908:	f104 0311 	add.w	r3, r4, #17
   1690c:	9202      	str	r2, [sp, #8]
   1690e:	9300      	str	r3, [sp, #0]
   16910:	463a      	mov	r2, r7
   16912:	ab04      	add	r3, sp, #16
   16914:	4641      	mov	r1, r8
   16916:	4630      	mov	r0, r6
   16918:	f008 fca8 	bl	1f26c <smp_f6>
   1691c:	b148      	cbz	r0, 16932 <compute_and_check_and_send_slave_dhcheck+0x12e>
		return BT_SMP_ERR_UNSPECIFIED;
   1691e:	2008      	movs	r0, #8
   16920:	e046      	b.n	169b0 <compute_and_check_and_send_slave_dhcheck+0x1ac>
		if (smp->oobd_remote) {
   16922:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
   16926:	2900      	cmp	r1, #0
   16928:	d084      	beq.n	16834 <compute_and_check_and_send_slave_dhcheck+0x30>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1692a:	2210      	movs	r2, #16
   1692c:	eb0d 0002 	add.w	r0, sp, r2
   16930:	e77e      	b.n	16830 <compute_and_check_and_send_slave_dhcheck+0x2c>
	if (smp->method == LE_SC_OOB) {
   16932:	7a23      	ldrb	r3, [r4, #8]
   16934:	2b05      	cmp	r3, #5
   16936:	d108      	bne.n	1694a <compute_and_check_and_send_slave_dhcheck+0x146>
		if (smp->oobd_local) {
   16938:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
			memcpy(r, smp->oobd_local->r, sizeof(r));
   1693c:	2210      	movs	r2, #16
   1693e:	eb0d 0002 	add.w	r0, sp, r2
		if (smp->oobd_local) {
   16942:	2900      	cmp	r1, #0
   16944:	d037      	beq.n	169b6 <compute_and_check_and_send_slave_dhcheck+0x1b2>
			memcpy(r, smp->oobd_local->r, sizeof(r));
   16946:	f006 f9ae 	bl	1cca6 <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
   1694a:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   1694e:	9503      	str	r5, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, re)) {
   16950:	f103 0296 	add.w	r2, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr,
   16954:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   16956:	9301      	str	r3, [sp, #4]
   16958:	f104 030a 	add.w	r3, r4, #10
   1695c:	9202      	str	r2, [sp, #8]
   1695e:	9300      	str	r3, [sp, #0]
   16960:	4642      	mov	r2, r8
   16962:	ab04      	add	r3, sp, #16
   16964:	4639      	mov	r1, r7
   16966:	4630      	mov	r0, r6
   16968:	f008 fc80 	bl	1f26c <smp_f6>
   1696c:	2800      	cmp	r0, #0
   1696e:	d1d6      	bne.n	1691e <compute_and_check_and_send_slave_dhcheck+0x11a>
	if (memcmp(smp->e, re, 16)) {
   16970:	4629      	mov	r1, r5
   16972:	2210      	movs	r2, #16
   16974:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   16978:	f006 f984 	bl	1cc84 <memcmp>
   1697c:	4605      	mov	r5, r0
   1697e:	b9e8      	cbnz	r0, 169bc <compute_and_check_and_send_slave_dhcheck+0x1b8>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   16980:	210d      	movs	r1, #13
   16982:	4620      	mov	r0, r4
   16984:	f008 fd46 	bl	1f414 <smp_create_pdu.constprop.0>
	if (!buf) {
   16988:	4606      	mov	r6, r0
   1698a:	2800      	cmp	r0, #0
   1698c:	d0c7      	beq.n	1691e <compute_and_check_and_send_slave_dhcheck+0x11a>
   1698e:	2110      	movs	r1, #16
   16990:	3008      	adds	r0, #8
   16992:	f009 f8da 	bl	1fb4a <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
   16996:	2210      	movs	r2, #16
   16998:	a914      	add	r1, sp, #80	; 0x50
   1699a:	f006 f984 	bl	1cca6 <memcpy>
	smp_send(smp, buf, NULL, NULL);
   1699e:	4631      	mov	r1, r6
   169a0:	4620      	mov	r0, r4
   169a2:	f008 fc39 	bl	1f218 <smp_send.constprop.0>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   169a6:	1d20      	adds	r0, r4, #4
   169a8:	2101      	movs	r1, #1
   169aa:	f008 fcd0 	bl	1f34e <atomic_set_bit>
	return 0;
   169ae:	4628      	mov	r0, r5
}
   169b0:	b023      	add	sp, #140	; 0x8c
   169b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			memset(r, 0, sizeof(r));
   169b6:	f006 f981 	bl	1ccbc <memset>
   169ba:	e7c6      	b.n	1694a <compute_and_check_and_send_slave_dhcheck+0x146>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   169bc:	200b      	movs	r0, #11
   169be:	e7f7      	b.n	169b0 <compute_and_check_and_send_slave_dhcheck+0x1ac>
   169c0:	00020e7a 	.word	0x00020e7a
   169c4:	00021d2b 	.word	0x00021d2b

000169c8 <smp_send_pairing_confirm>:
{
   169c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
   169ca:	7a04      	ldrb	r4, [r0, #8]
   169cc:	2c02      	cmp	r4, #2
{
   169ce:	4605      	mov	r5, r0
	switch (smp->method) {
   169d0:	d823      	bhi.n	16a1a <smp_send_pairing_confirm+0x52>
   169d2:	b144      	cbz	r4, 169e6 <smp_send_pairing_confirm+0x1e>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   169d4:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
   169d8:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
   169dc:	40dc      	lsrs	r4, r3
   169de:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   169e2:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   169e6:	2103      	movs	r1, #3
   169e8:	4628      	mov	r0, r5
   169ea:	f008 fd13 	bl	1f414 <smp_create_pdu.constprop.0>
	if (!buf) {
   169ee:	4606      	mov	r6, r0
   169f0:	b1a8      	cbz	r0, 16a1e <smp_send_pairing_confirm+0x56>
   169f2:	2110      	movs	r1, #16
   169f4:	3008      	adds	r0, #8
   169f6:	f009 f8a8 	bl	1fb4a <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   169fa:	9000      	str	r0, [sp, #0]
   169fc:	480f      	ldr	r0, [pc, #60]	; (16a3c <smp_send_pairing_confirm+0x74>)
   169fe:	4623      	mov	r3, r4
   16a00:	6800      	ldr	r0, [r0, #0]
   16a02:	f105 0227 	add.w	r2, r5, #39	; 0x27
   16a06:	f105 0157 	add.w	r1, r5, #87	; 0x57
   16a0a:	f008 fc7b 	bl	1f304 <smp_f4>
   16a0e:	4604      	mov	r4, r0
   16a10:	b148      	cbz	r0, 16a26 <smp_send_pairing_confirm+0x5e>
		net_buf_unref(buf);
   16a12:	4630      	mov	r0, r6
   16a14:	f000 fd50 	bl	174b8 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   16a18:	e001      	b.n	16a1e <smp_send_pairing_confirm+0x56>
	switch (smp->method) {
   16a1a:	2c03      	cmp	r4, #3
   16a1c:	d001      	beq.n	16a22 <smp_send_pairing_confirm+0x5a>
		return BT_SMP_ERR_UNSPECIFIED;
   16a1e:	2008      	movs	r0, #8
   16a20:	e00a      	b.n	16a38 <smp_send_pairing_confirm+0x70>
	switch (smp->method) {
   16a22:	2400      	movs	r4, #0
   16a24:	e7df      	b.n	169e6 <smp_send_pairing_confirm+0x1e>
	smp_send(smp, buf, NULL, NULL);
   16a26:	4631      	mov	r1, r6
   16a28:	4628      	mov	r0, r5
   16a2a:	f008 fbf5 	bl	1f218 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   16a2e:	1d28      	adds	r0, r5, #4
   16a30:	4621      	mov	r1, r4
   16a32:	f008 fbc4 	bl	1f1be <atomic_clear_bit>
	return 0;
   16a36:	4620      	mov	r0, r4
}
   16a38:	b002      	add	sp, #8
   16a3a:	bd70      	pop	{r4, r5, r6, pc}
   16a3c:	20002644 	.word	0x20002644

00016a40 <smp_public_key_slave>:
{
   16a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   16a44:	1d06      	adds	r6, r0, #4
{
   16a46:	4604      	mov	r4, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   16a48:	210e      	movs	r1, #14
   16a4a:	4630      	mov	r0, r6
   16a4c:	f008 fc99 	bl	1f382 <atomic_test_bit>
   16a50:	b138      	cbz	r0, 16a62 <smp_public_key_slave+0x22>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   16a52:	210c      	movs	r1, #12
   16a54:	4620      	mov	r0, r4
   16a56:	f008 fcdd 	bl	1f414 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   16a5a:	4605      	mov	r5, r0
   16a5c:	b958      	cbnz	r0, 16a76 <smp_public_key_slave+0x36>
	switch (smp->method) {
   16a5e:	2008      	movs	r0, #8
   16a60:	e03a      	b.n	16ad8 <smp_public_key_slave+0x98>
	    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
   16a62:	4b45      	ldr	r3, [pc, #276]	; (16b78 <smp_public_key_slave+0x138>)
   16a64:	2220      	movs	r2, #32
   16a66:	6819      	ldr	r1, [r3, #0]
   16a68:	f104 0057 	add.w	r0, r4, #87	; 0x57
   16a6c:	f006 f90a 	bl	1cc84 <memcmp>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   16a70:	2800      	cmp	r0, #0
   16a72:	d1ee      	bne.n	16a52 <smp_public_key_slave+0x12>
   16a74:	e7f3      	b.n	16a5e <smp_public_key_slave+0x1e>
   16a76:	2140      	movs	r1, #64	; 0x40
   16a78:	3008      	adds	r0, #8
   16a7a:	f009 f866 	bl	1fb4a <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
   16a7e:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 16b78 <smp_public_key_slave+0x138>
   16a82:	2220      	movs	r2, #32
   16a84:	f8d8 1000 	ldr.w	r1, [r8]
   16a88:	4607      	mov	r7, r0
   16a8a:	f006 f90c 	bl	1cca6 <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
   16a8e:	f8d8 1000 	ldr.w	r1, [r8]
   16a92:	2220      	movs	r2, #32
   16a94:	4411      	add	r1, r2
   16a96:	18b8      	adds	r0, r7, r2
   16a98:	f006 f905 	bl	1cca6 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   16a9c:	4629      	mov	r1, r5
   16a9e:	4620      	mov	r0, r4
   16aa0:	f008 fbba 	bl	1f218 <smp_send.constprop.0>
	switch (smp->method) {
   16aa4:	7a23      	ldrb	r3, [r4, #8]
   16aa6:	2b05      	cmp	r3, #5
   16aa8:	d8d9      	bhi.n	16a5e <smp_public_key_slave+0x1e>
   16aaa:	a201      	add	r2, pc, #4	; (adr r2, 16ab0 <smp_public_key_slave+0x70>)
   16aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   16ab0:	00016ac9 	.word	0x00016ac9
   16ab4:	00016b31 	.word	0x00016b31
   16ab8:	00016add 	.word	0x00016add
   16abc:	00016ac9 	.word	0x00016ac9
   16ac0:	00016a5f 	.word	0x00016a5f
   16ac4:	00016b6d 	.word	0x00016b6d
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   16ac8:	2104      	movs	r1, #4
   16aca:	4620      	mov	r0, r4
   16acc:	f008 fc3f 	bl	1f34e <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
   16ad0:	f7ff ff7a 	bl	169c8 <smp_send_pairing_confirm>
		if (err) {
   16ad4:	2800      	cmp	r0, #0
   16ad6:	d03c      	beq.n	16b52 <smp_public_key_slave+0x112>
}
   16ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   16adc:	2104      	movs	r1, #4
   16ade:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   16ae2:	f001 ff2f 	bl	18944 <bt_rand>
   16ae6:	2800      	cmp	r0, #0
   16ae8:	d1b9      	bne.n	16a5e <smp_public_key_slave+0x1e>
		smp->passkey %= 1000000;
   16aea:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   16aee:	4a23      	ldr	r2, [pc, #140]	; (16b7c <smp_public_key_slave+0x13c>)
	if (bt_auth && bt_auth->passkey_display) {
   16af0:	4d23      	ldr	r5, [pc, #140]	; (16b80 <smp_public_key_slave+0x140>)
		smp->passkey %= 1000000;
   16af2:	fbb3 f1f2 	udiv	r1, r3, r2
   16af6:	fb02 3311 	mls	r3, r2, r1, r3
   16afa:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	if (bt_auth && bt_auth->passkey_display) {
   16afe:	682b      	ldr	r3, [r5, #0]
	smp->passkey_round = 0U;
   16b00:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
	if (bt_auth && bt_auth->passkey_display) {
   16b04:	b163      	cbz	r3, 16b20 <smp_public_key_slave+0xe0>
   16b06:	681b      	ldr	r3, [r3, #0]
   16b08:	b153      	cbz	r3, 16b20 <smp_public_key_slave+0xe0>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   16b0a:	210b      	movs	r1, #11
   16b0c:	4630      	mov	r0, r6
   16b0e:	f008 fc1e 	bl	1f34e <atomic_set_bit>
		bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
   16b12:	682b      	ldr	r3, [r5, #0]
   16b14:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   16b18:	681b      	ldr	r3, [r3, #0]
   16b1a:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   16b1e:	4798      	blx	r3
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   16b20:	2103      	movs	r1, #3
   16b22:	4620      	mov	r0, r4
   16b24:	f008 fc13 	bl	1f34e <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   16b28:	210e      	movs	r1, #14
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   16b2a:	f008 fc10 	bl	1f34e <atomic_set_bit>
		break;
   16b2e:	e010      	b.n	16b52 <smp_public_key_slave+0x112>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   16b30:	4620      	mov	r0, r4
   16b32:	2103      	movs	r1, #3
   16b34:	f008 fc0b 	bl	1f34e <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   16b38:	210e      	movs	r1, #14
   16b3a:	f008 fc08 	bl	1f34e <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   16b3e:	4630      	mov	r0, r6
   16b40:	210a      	movs	r1, #10
   16b42:	f008 fc04 	bl	1f34e <atomic_set_bit>
		bt_auth->passkey_entry(smp->chan.chan.conn);
   16b46:	4b0e      	ldr	r3, [pc, #56]	; (16b80 <smp_public_key_slave+0x140>)
   16b48:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   16b4c:	681b      	ldr	r3, [r3, #0]
   16b4e:	685b      	ldr	r3, [r3, #4]
   16b50:	4798      	blx	r3
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   16b52:	4630      	mov	r0, r6
   16b54:	2107      	movs	r1, #7
   16b56:	f008 fbfa 	bl	1f34e <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   16b5a:	2008      	movs	r0, #8
   16b5c:	f7ff fc78 	bl	16450 <smp_find>
   16b60:	b938      	cbnz	r0, 16b72 <smp_public_key_slave+0x132>
		return smp_dhkey_generate(smp);
   16b62:	4620      	mov	r0, r4
}
   16b64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return smp_dhkey_generate(smp);
   16b68:	f7ff bc5c 	b.w	16424 <smp_dhkey_generate>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   16b6c:	2104      	movs	r1, #4
   16b6e:	4620      	mov	r0, r4
   16b70:	e7db      	b.n	16b2a <smp_public_key_slave+0xea>
	return 0;
   16b72:	2000      	movs	r0, #0
   16b74:	e7b0      	b.n	16ad8 <smp_public_key_slave+0x98>
   16b76:	bf00      	nop
   16b78:	20002644 	.word	0x20002644
   16b7c:	000f4240 	.word	0x000f4240
   16b80:	20002568 	.word	0x20002568

00016b84 <smp_public_key>:
{
   16b84:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_public_key *req = (void *)buf->data;
   16b86:	688e      	ldr	r6, [r1, #8]
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   16b88:	f100 0557 	add.w	r5, r0, #87	; 0x57
{
   16b8c:	4604      	mov	r4, r0
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   16b8e:	2220      	movs	r2, #32
   16b90:	4631      	mov	r1, r6
   16b92:	4628      	mov	r0, r5
   16b94:	f006 f887 	bl	1cca6 <memcpy>
	memcpy(&smp->pkey[BT_PUB_KEY_COORD_LEN], req->y, BT_PUB_KEY_COORD_LEN);
   16b98:	2220      	movs	r2, #32
   16b9a:	18b1      	adds	r1, r6, r2
   16b9c:	f104 0077 	add.w	r0, r4, #119	; 0x77
   16ba0:	f006 f881 	bl	1cca6 <memcpy>
	if (bt_pub_key_is_debug(smp->pkey)) {
   16ba4:	4628      	mov	r0, r5
   16ba6:	f7fd f94d 	bl	13e44 <bt_pub_key_is_debug>
   16baa:	b940      	cbnz	r0, 16bbe <smp_public_key+0x3a>
	if (!sc_public_key) {
   16bac:	4b15      	ldr	r3, [pc, #84]	; (16c04 <smp_public_key+0x80>)
   16bae:	681d      	ldr	r5, [r3, #0]
   16bb0:	bb1d      	cbnz	r5, 16bfa <smp_public_key+0x76>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   16bb2:	1d20      	adds	r0, r4, #4
   16bb4:	2106      	movs	r1, #6
   16bb6:	f008 fbca 	bl	1f34e <atomic_set_bit>
		return 0;
   16bba:	4628      	mov	r0, r5
   16bbc:	e01c      	b.n	16bf8 <smp_public_key+0x74>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   16bbe:	210e      	movs	r1, #14
   16bc0:	1d20      	adds	r0, r4, #4
   16bc2:	f008 fbc4 	bl	1f34e <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
   16bc6:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
	if (!conn->le.keys) {
   16bca:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   16bce:	b933      	cbnz	r3, 16bde <smp_public_key+0x5a>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   16bd0:	7a28      	ldrb	r0, [r5, #8]
   16bd2:	f105 0188 	add.w	r1, r5, #136	; 0x88
   16bd6:	f000 fa53 	bl	17080 <bt_keys_get_addr>
   16bda:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
   16bde:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   16be2:	2b00      	cmp	r3, #0
   16be4:	d0e2      	beq.n	16bac <smp_public_key+0x28>
   16be6:	89da      	ldrh	r2, [r3, #14]
   16be8:	f002 0224 	and.w	r2, r2, #36	; 0x24
   16bec:	2a00      	cmp	r2, #0
   16bee:	d0dd      	beq.n	16bac <smp_public_key+0x28>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   16bf0:	7b5b      	ldrb	r3, [r3, #13]
   16bf2:	079b      	lsls	r3, r3, #30
   16bf4:	d4da      	bmi.n	16bac <smp_public_key+0x28>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   16bf6:	2003      	movs	r0, #3
}
   16bf8:	bd70      	pop	{r4, r5, r6, pc}
	err = smp_public_key_slave(smp);
   16bfa:	4620      	mov	r0, r4
}
   16bfc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = smp_public_key_slave(smp);
   16c00:	f7ff bf1e 	b.w	16a40 <smp_public_key_slave>
   16c04:	20002644 	.word	0x20002644

00016c08 <bt_smp_connected>:
{
   16c08:	b510      	push	{r4, lr}
	k_work_init_delayable(&smp->work, smp_timeout);
   16c0a:	4905      	ldr	r1, [pc, #20]	; (16c20 <bt_smp_connected+0x18>)
   16c0c:	f1a0 04f0 	sub.w	r4, r0, #240	; 0xf0
   16c10:	30e8      	adds	r0, #232	; 0xe8
   16c12:	f009 fc4b 	bl	204ac <k_work_init_delayable>
	smp_reset(smp);
   16c16:	4620      	mov	r0, r4
}
   16c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
   16c1c:	f008 bc9b 	b.w	1f556 <smp_reset>
   16c20:	0001f8ed 	.word	0x0001f8ed

00016c24 <bt_smp_start_security>:
{
   16c24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
   16c28:	78c4      	ldrb	r4, [r0, #3]
   16c2a:	2c01      	cmp	r4, #1
{
   16c2c:	4605      	mov	r5, r0
	switch (conn->role) {
   16c2e:	d005      	beq.n	16c3c <bt_smp_start_security+0x18>
		return -EINVAL;
   16c30:	f06f 0415 	mvn.w	r4, #21
}
   16c34:	4620      	mov	r0, r4
   16c36:	b003      	add	sp, #12
   16c38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp = smp_chan_get(conn);
   16c3c:	f008 fab8 	bl	1f1b0 <smp_chan_get>
	if (!smp) {
   16c40:	4606      	mov	r6, r0
   16c42:	2800      	cmp	r0, #0
   16c44:	f000 80a4 	beq.w	16d90 <bt_smp_start_security+0x16c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   16c48:	1d07      	adds	r7, r0, #4
   16c4a:	2104      	movs	r1, #4
   16c4c:	4638      	mov	r0, r7
   16c4e:	f008 fb98 	bl	1f382 <atomic_test_bit>
   16c52:	2800      	cmp	r0, #0
   16c54:	f040 809f 	bne.w	16d96 <bt_smp_start_security+0x172>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   16c58:	2103      	movs	r1, #3
   16c5a:	4638      	mov	r0, r7
   16c5c:	f008 fb91 	bl	1f382 <atomic_test_bit>
   16c60:	b110      	cbz	r0, 16c68 <bt_smp_start_security+0x44>
		return -EBUSY;
   16c62:	f06f 040f 	mvn.w	r4, #15
   16c66:	e7e5      	b.n	16c34 <bt_smp_start_security+0x10>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   16c68:	4621      	mov	r1, r4
   16c6a:	4638      	mov	r0, r7
   16c6c:	f008 fb89 	bl	1f382 <atomic_test_bit>
   16c70:	2800      	cmp	r0, #0
   16c72:	d1f6      	bne.n	16c62 <bt_smp_start_security+0x3e>
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
   16c74:	7aab      	ldrb	r3, [r5, #10]
	switch (conn->required_sec_level) {
   16c76:	2b03      	cmp	r3, #3
   16c78:	d03d      	beq.n	16cf6 <bt_smp_start_security+0xd2>
   16c7a:	d82c      	bhi.n	16cd6 <bt_smp_start_security+0xb2>
   16c7c:	3b01      	subs	r3, #1
   16c7e:	2b01      	cmp	r3, #1
   16c80:	d946      	bls.n	16d10 <bt_smp_start_security+0xec>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   16c82:	210b      	movs	r1, #11
   16c84:	1d28      	adds	r0, r5, #4
   16c86:	f008 fb7c 	bl	1f382 <atomic_test_bit>
   16c8a:	2800      	cmp	r0, #0
   16c8c:	d1d0      	bne.n	16c30 <bt_smp_start_security+0xc>
	if (!conn->le.keys) {
   16c8e:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   16c92:	b983      	cbnz	r3, 16cb6 <bt_smp_start_security+0x92>
						     conn->id, &conn->le.dst);
   16c94:	f105 0488 	add.w	r4, r5, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   16c98:	7a29      	ldrb	r1, [r5, #8]
   16c9a:	4622      	mov	r2, r4
   16c9c:	2020      	movs	r0, #32
   16c9e:	f000 fa73 	bl	17188 <bt_keys_find>
   16ca2:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
   16ca6:	b930      	cbnz	r0, 16cb6 <bt_smp_start_security+0x92>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   16ca8:	7a29      	ldrb	r1, [r5, #8]
   16caa:	4622      	mov	r2, r4
   16cac:	2004      	movs	r0, #4
   16cae:	f000 fa6b 	bl	17188 <bt_keys_find>
   16cb2:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
   16cb6:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   16cba:	2b00      	cmp	r3, #0
   16cbc:	d0b8      	beq.n	16c30 <bt_smp_start_security+0xc>
   16cbe:	89da      	ldrh	r2, [r3, #14]
   16cc0:	f002 0224 	and.w	r2, r2, #36	; 0x24
   16cc4:	2a00      	cmp	r2, #0
   16cc6:	d0b3      	beq.n	16c30 <bt_smp_start_security+0xc>
	if (conn->required_sec_level > BT_SECURITY_L2 &&
   16cc8:	7aaa      	ldrb	r2, [r5, #10]
   16cca:	2a02      	cmp	r2, #2
   16ccc:	d920      	bls.n	16d10 <bt_smp_start_security+0xec>
   16cce:	7b5b      	ldrb	r3, [r3, #13]
   16cd0:	07db      	lsls	r3, r3, #31
   16cd2:	d5ad      	bpl.n	16c30 <bt_smp_start_security+0xc>
   16cd4:	e01c      	b.n	16d10 <bt_smp_start_security+0xec>
	switch (conn->required_sec_level) {
   16cd6:	2b04      	cmp	r3, #4
   16cd8:	d1d3      	bne.n	16c82 <bt_smp_start_security+0x5e>
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   16cda:	f7ff fb31 	bl	16340 <get_io_capa>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   16cde:	2803      	cmp	r0, #3
   16ce0:	d104      	bne.n	16cec <bt_smp_start_security+0xc8>
   16ce2:	4b2e      	ldr	r3, [pc, #184]	; (16d9c <bt_smp_start_security+0x178>)
   16ce4:	681b      	ldr	r3, [r3, #0]
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   16ce6:	b1f3      	cbz	r3, 16d26 <bt_smp_start_security+0x102>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   16ce8:	68dc      	ldr	r4, [r3, #12]
   16cea:	b10c      	cbz	r4, 16cf0 <bt_smp_start_security+0xcc>
   16cec:	4b2c      	ldr	r3, [pc, #176]	; (16da0 <bt_smp_start_security+0x17c>)
   16cee:	781c      	ldrb	r4, [r3, #0]
   16cf0:	f004 0401 	and.w	r4, r4, #1
   16cf4:	e00a      	b.n	16d0c <bt_smp_start_security+0xe8>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   16cf6:	f7ff fb23 	bl	16340 <get_io_capa>
   16cfa:	2803      	cmp	r0, #3
   16cfc:	d106      	bne.n	16d0c <bt_smp_start_security+0xe8>
		       (bt_auth && bt_auth->oob_data_request);
   16cfe:	4b27      	ldr	r3, [pc, #156]	; (16d9c <bt_smp_start_security+0x178>)
   16d00:	681c      	ldr	r4, [r3, #0]
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   16d02:	b11c      	cbz	r4, 16d0c <bt_smp_start_security+0xe8>
		       (bt_auth && bt_auth->oob_data_request);
   16d04:	68e4      	ldr	r4, [r4, #12]
   16d06:	3c00      	subs	r4, #0
   16d08:	bf18      	it	ne
   16d0a:	2401      	movne	r4, #1
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
   16d0c:	2c00      	cmp	r4, #0
   16d0e:	d0b8      	beq.n	16c82 <bt_smp_start_security+0x5e>
	if (!conn->le.keys) {
   16d10:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   16d14:	b14b      	cbz	r3, 16d2a <bt_smp_start_security+0x106>
	if (smp_init(smp) != 0) {
   16d16:	4630      	mov	r0, r6
   16d18:	f7ff fb68 	bl	163ec <smp_init>
   16d1c:	4604      	mov	r4, r0
   16d1e:	b180      	cbz	r0, 16d42 <bt_smp_start_security+0x11e>
		return -ENOBUFS;
   16d20:	f06f 0468 	mvn.w	r4, #104	; 0x68
   16d24:	e786      	b.n	16c34 <bt_smp_start_security+0x10>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   16d26:	2400      	movs	r4, #0
   16d28:	e7e2      	b.n	16cf0 <bt_smp_start_security+0xcc>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   16d2a:	7a28      	ldrb	r0, [r5, #8]
   16d2c:	f105 0188 	add.w	r1, r5, #136	; 0x88
   16d30:	f000 f9a6 	bl	17080 <bt_keys_get_addr>
   16d34:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
   16d38:	2800      	cmp	r0, #0
   16d3a:	d1ec      	bne.n	16d16 <bt_smp_start_security+0xf2>
			return -ENOMEM;
   16d3c:	f06f 040b 	mvn.w	r4, #11
   16d40:	e778      	b.n	16c34 <bt_smp_start_security+0x10>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
   16d42:	210b      	movs	r1, #11
   16d44:	4630      	mov	r0, r6
   16d46:	f008 fb65 	bl	1f414 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   16d4a:	4680      	mov	r8, r0
   16d4c:	2800      	cmp	r0, #0
   16d4e:	d0e7      	beq.n	16d20 <bt_smp_start_security+0xfc>
   16d50:	2101      	movs	r1, #1
   16d52:	3008      	adds	r0, #8
   16d54:	f008 fef9 	bl	1fb4a <net_buf_simple_add>
   16d58:	4681      	mov	r9, r0
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
   16d5a:	2009      	movs	r0, #9
   16d5c:	f7ff fb28 	bl	163b0 <get_auth.constprop.0>
   16d60:	4623      	mov	r3, r4
   16d62:	f889 0000 	strb.w	r0, [r9]
   16d66:	4642      	mov	r2, r8
   16d68:	9400      	str	r4, [sp, #0]
   16d6a:	2106      	movs	r1, #6
   16d6c:	4628      	mov	r0, r5
   16d6e:	f007 f858 	bl	1de22 <bt_l2cap_send_cb>
	if (err) {
   16d72:	4604      	mov	r4, r0
   16d74:	b118      	cbz	r0, 16d7e <bt_smp_start_security+0x15a>
		net_buf_unref(req_buf);
   16d76:	4640      	mov	r0, r8
   16d78:	f000 fb9e 	bl	174b8 <net_buf_unref>
		return err;
   16d7c:	e75a      	b.n	16c34 <bt_smp_start_security+0x10>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   16d7e:	4638      	mov	r0, r7
   16d80:	210f      	movs	r1, #15
   16d82:	f008 fae4 	bl	1f34e <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   16d86:	2101      	movs	r1, #1
   16d88:	4630      	mov	r0, r6
   16d8a:	f008 fae0 	bl	1f34e <atomic_set_bit>
	return 0;
   16d8e:	e751      	b.n	16c34 <bt_smp_start_security+0x10>
		return -ENOTCONN;
   16d90:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   16d94:	e74e      	b.n	16c34 <bt_smp_start_security+0x10>
		return -EIO;
   16d96:	f06f 0404 	mvn.w	r4, #4
   16d9a:	e74b      	b.n	16c34 <bt_smp_start_security+0x10>
   16d9c:	20002568 	.word	0x20002568
   16da0:	20002b76 	.word	0x20002b76

00016da4 <smp_pairing_complete>:
{
   16da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   16da8:	f8d0 40f0 	ldr.w	r4, [r0, #240]	; 0xf0
	if (!status) {
   16dac:	4f28      	ldr	r7, [pc, #160]	; (16e50 <smp_pairing_complete+0xac>)
{
   16dae:	4605      	mov	r5, r0
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   16db0:	f100 0804 	add.w	r8, r0, #4
	if (!status) {
   16db4:	b9e1      	cbnz	r1, 16df0 <smp_pairing_complete+0x4c>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   16db6:	210d      	movs	r1, #13
   16db8:	4640      	mov	r0, r8
   16dba:	f008 fae2 	bl	1f382 <atomic_test_bit>
		if (bond_flag) {
   16dbe:	4606      	mov	r6, r0
   16dc0:	b118      	cbz	r0, 16dca <smp_pairing_complete+0x26>
			bt_keys_store(conn->le.keys);
   16dc2:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   16dc6:	f000 fa99 	bl	172fc <bt_keys_store>
		if (bt_auth && bt_auth->pairing_complete) {
   16dca:	683b      	ldr	r3, [r7, #0]
   16dcc:	b123      	cbz	r3, 16dd8 <smp_pairing_complete+0x34>
   16dce:	699b      	ldr	r3, [r3, #24]
		if (bt_auth && bt_auth->pairing_failed) {
   16dd0:	b113      	cbz	r3, 16dd8 <smp_pairing_complete+0x34>
			bt_auth->pairing_failed(conn, security_err);
   16dd2:	4631      	mov	r1, r6
   16dd4:	4620      	mov	r0, r4
   16dd6:	4798      	blx	r3
	smp_reset(smp);
   16dd8:	4628      	mov	r0, r5
   16dda:	f008 fbbc 	bl	1f556 <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
   16dde:	7a62      	ldrb	r2, [r4, #9]
   16de0:	7aa3      	ldrb	r3, [r4, #10]
   16de2:	429a      	cmp	r2, r3
   16de4:	d032      	beq.n	16e4c <smp_pairing_complete+0xa8>
		bt_smp_start_security(conn);
   16de6:	4620      	mov	r0, r4
}
   16de8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_smp_start_security(conn);
   16dec:	f7ff bf1a 	b.w	16c24 <bt_smp_start_security>
	switch (smp_err) {
   16df0:	3901      	subs	r1, #1
   16df2:	b2c9      	uxtb	r1, r1
   16df4:	290d      	cmp	r1, #13
   16df6:	bf9c      	itt	ls
   16df8:	4b16      	ldrls	r3, [pc, #88]	; (16e54 <smp_pairing_complete+0xb0>)
   16dfa:	5c5e      	ldrbls	r6, [r3, r1]
		if (conn->le.keys &&
   16dfc:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
	if (!status) {
   16e00:	bf88      	it	hi
   16e02:	2608      	movhi	r6, #8
		if (conn->le.keys &&
   16e04:	b143      	cbz	r3, 16e18 <smp_pairing_complete+0x74>
   16e06:	7b1b      	ldrb	r3, [r3, #12]
   16e08:	b9cb      	cbnz	r3, 16e3e <smp_pairing_complete+0x9a>
			bt_keys_clear(conn->le.keys);
   16e0a:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   16e0e:	f000 fa4d 	bl	172ac <bt_keys_clear>
			conn->le.keys = NULL;
   16e12:	2300      	movs	r3, #0
   16e14:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   16e18:	2102      	movs	r1, #2
   16e1a:	4640      	mov	r0, r8
   16e1c:	f008 fab1 	bl	1f382 <atomic_test_bit>
   16e20:	b940      	cbnz	r0, 16e34 <smp_pairing_complete+0x90>
	switch (err) {
   16e22:	2e08      	cmp	r6, #8
   16e24:	bf16      	itet	ne
   16e26:	4b0c      	ldrne	r3, [pc, #48]	; (16e58 <smp_pairing_complete+0xb4>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   16e28:	211f      	moveq	r1, #31
   16e2a:	5d99      	ldrbne	r1, [r3, r6]
			bt_conn_security_changed(conn,
   16e2c:	4632      	mov	r2, r6
   16e2e:	4620      	mov	r0, r4
   16e30:	f7fd fb9e 	bl	14570 <bt_conn_security_changed>
		if (bt_auth && bt_auth->pairing_failed) {
   16e34:	683b      	ldr	r3, [r7, #0]
   16e36:	2b00      	cmp	r3, #0
   16e38:	d0ce      	beq.n	16dd8 <smp_pairing_complete+0x34>
   16e3a:	69db      	ldr	r3, [r3, #28]
   16e3c:	e7c8      	b.n	16dd0 <smp_pairing_complete+0x2c>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   16e3e:	2102      	movs	r1, #2
   16e40:	4640      	mov	r0, r8
   16e42:	f008 fa9e 	bl	1f382 <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
   16e46:	2800      	cmp	r0, #0
   16e48:	d1df      	bne.n	16e0a <smp_pairing_complete+0x66>
   16e4a:	e7e5      	b.n	16e18 <smp_pairing_complete+0x74>
}
   16e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16e50:	20002568 	.word	0x20002568
   16e54:	00021cf4 	.word	0x00021cf4
   16e58:	00021d0a 	.word	0x00021d0a

00016e5c <bt_smp_recv>:
{
   16e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   16e5e:	898b      	ldrh	r3, [r1, #12]
{
   16e60:	4607      	mov	r7, r0
   16e62:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   16e64:	b393      	cbz	r3, 16ecc <bt_smp_recv+0x70>
	return net_buf_simple_pull_mem(&buf->b, len);
   16e66:	2101      	movs	r1, #1
   16e68:	f105 0008 	add.w	r0, r5, #8
   16e6c:	f008 fe94 	bl	1fb98 <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   16e70:	2104      	movs	r1, #4
   16e72:	4606      	mov	r6, r0
   16e74:	f1a7 00ec 	sub.w	r0, r7, #236	; 0xec
   16e78:	f1a7 04f0 	sub.w	r4, r7, #240	; 0xf0
   16e7c:	f008 fa81 	bl	1f382 <atomic_test_bit>
   16e80:	bb20      	cbnz	r0, 16ecc <bt_smp_recv+0x70>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   16e82:	7831      	ldrb	r1, [r6, #0]
   16e84:	290e      	cmp	r1, #14
   16e86:	d821      	bhi.n	16ecc <bt_smp_recv+0x70>
	if (!handlers[hdr->code].func) {
   16e88:	4f11      	ldr	r7, [pc, #68]	; (16ed0 <bt_smp_recv+0x74>)
   16e8a:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
   16e8e:	b923      	cbnz	r3, 16e9a <bt_smp_recv+0x3e>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   16e90:	2107      	movs	r1, #7
		smp_error(smp, err);
   16e92:	4620      	mov	r0, r4
   16e94:	f008 fc06 	bl	1f6a4 <smp_error>
   16e98:	e018      	b.n	16ecc <bt_smp_recv+0x70>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
   16e9a:	4620      	mov	r0, r4
   16e9c:	f008 fb43 	bl	1f526 <atomic_test_and_clear_bit>
   16ea0:	7833      	ldrb	r3, [r6, #0]
   16ea2:	b918      	cbnz	r0, 16eac <bt_smp_recv+0x50>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
   16ea4:	2b05      	cmp	r3, #5
   16ea6:	d011      	beq.n	16ecc <bt_smp_recv+0x70>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   16ea8:	2108      	movs	r1, #8
   16eaa:	e7f2      	b.n	16e92 <bt_smp_recv+0x36>
	if (buf->len != handlers[hdr->code].expect_len) {
   16eac:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
   16eb0:	89a9      	ldrh	r1, [r5, #12]
   16eb2:	7912      	ldrb	r2, [r2, #4]
   16eb4:	4291      	cmp	r1, r2
   16eb6:	d001      	beq.n	16ebc <bt_smp_recv+0x60>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   16eb8:	210a      	movs	r1, #10
   16eba:	e7ea      	b.n	16e92 <bt_smp_recv+0x36>
	err = handlers[hdr->code].func(smp, buf);
   16ebc:	4629      	mov	r1, r5
   16ebe:	f857 3033 	ldr.w	r3, [r7, r3, lsl #3]
   16ec2:	4620      	mov	r0, r4
   16ec4:	4798      	blx	r3
	if (err) {
   16ec6:	4601      	mov	r1, r0
   16ec8:	2800      	cmp	r0, #0
   16eca:	d1e2      	bne.n	16e92 <bt_smp_recv+0x36>
}
   16ecc:	2000      	movs	r0, #0
   16ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16ed0:	00021400 	.word	0x00021400

00016ed4 <bt_smp_pkey_ready>:
	sc_public_key = pkey;
   16ed4:	4b0c      	ldr	r3, [pc, #48]	; (16f08 <bt_smp_pkey_ready+0x34>)
{
   16ed6:	b510      	push	{r4, lr}
	sc_public_key = pkey;
   16ed8:	6018      	str	r0, [r3, #0]
	if (!pkey) {
   16eda:	b1a0      	cbz	r0, 16f06 <bt_smp_pkey_ready+0x32>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16edc:	4c0b      	ldr	r4, [pc, #44]	; (16f0c <bt_smp_pkey_ready+0x38>)
	z_impl_k_sem_give(sem);
   16ede:	480c      	ldr	r0, [pc, #48]	; (16f10 <bt_smp_pkey_ready+0x3c>)
   16ee0:	f002 fc26 	bl	19730 <z_impl_k_sem_give>
   16ee4:	f3bf 8f5b 	dmb	ish
   16ee8:	6863      	ldr	r3, [r4, #4]
   16eea:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   16eee:	065b      	lsls	r3, r3, #25
   16ef0:	d509      	bpl.n	16f06 <bt_smp_pkey_ready+0x32>
		err = smp_public_key_slave(smp);
   16ef2:	4620      	mov	r0, r4
   16ef4:	f7ff fda4 	bl	16a40 <smp_public_key_slave>
		if (err) {
   16ef8:	4601      	mov	r1, r0
   16efa:	b120      	cbz	r0, 16f06 <bt_smp_pkey_ready+0x32>
			smp_error(smp, err);
   16efc:	4620      	mov	r0, r4
}
   16efe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_error(smp, err);
   16f02:	f008 bbcf 	b.w	1f6a4 <smp_error>
}
   16f06:	bd10      	pop	{r4, pc}
   16f08:	20002644 	.word	0x20002644
   16f0c:	20001790 	.word	0x20001790
   16f10:	2000070c 	.word	0x2000070c

00016f14 <smp_pairing_failed>:
{
   16f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   16f16:	1d05      	adds	r5, r0, #4
	struct bt_conn *conn = smp->chan.chan.conn;
   16f18:	f8d0 70f0 	ldr.w	r7, [r0, #240]	; 0xf0
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   16f1c:	688e      	ldr	r6, [r1, #8]
{
   16f1e:	4604      	mov	r4, r0
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   16f20:	210a      	movs	r1, #10
   16f22:	4628      	mov	r0, r5
   16f24:	f008 faff 	bl	1f526 <atomic_test_and_clear_bit>
   16f28:	b140      	cbz	r0, 16f3c <smp_pairing_failed+0x28>
		if (bt_auth && bt_auth->cancel) {
   16f2a:	4b0b      	ldr	r3, [pc, #44]	; (16f58 <smp_pairing_failed+0x44>)
   16f2c:	681b      	ldr	r3, [r3, #0]
   16f2e:	b963      	cbnz	r3, 16f4a <smp_pairing_failed+0x36>
	smp_pairing_complete(smp, req->reason);
   16f30:	4620      	mov	r0, r4
   16f32:	7831      	ldrb	r1, [r6, #0]
   16f34:	f7ff ff36 	bl	16da4 <smp_pairing_complete>
}
   16f38:	2000      	movs	r0, #0
   16f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   16f3c:	210b      	movs	r1, #11
   16f3e:	4628      	mov	r0, r5
   16f40:	f008 faf1 	bl	1f526 <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   16f44:	2800      	cmp	r0, #0
   16f46:	d1f0      	bne.n	16f2a <smp_pairing_failed+0x16>
   16f48:	e7f2      	b.n	16f30 <smp_pairing_failed+0x1c>
		if (bt_auth && bt_auth->cancel) {
   16f4a:	691b      	ldr	r3, [r3, #16]
   16f4c:	2b00      	cmp	r3, #0
   16f4e:	d0ef      	beq.n	16f30 <smp_pairing_failed+0x1c>
			bt_auth->cancel(conn);
   16f50:	4638      	mov	r0, r7
   16f52:	4798      	blx	r3
   16f54:	e7ec      	b.n	16f30 <smp_pairing_failed+0x1c>
   16f56:	bf00      	nop
   16f58:	20002568 	.word	0x20002568

00016f5c <bt_smp_encrypt_change>:
{
   16f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->conn;
   16f60:	4605      	mov	r5, r0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   16f62:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
{
   16f66:	4604      	mov	r4, r0
   16f68:	460f      	mov	r7, r1
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   16f6a:	4630      	mov	r0, r6
   16f6c:	2101      	movs	r1, #1
	struct bt_conn *conn = chan->conn;
   16f6e:	f855 89f0 	ldr.w	r8, [r5], #-240
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   16f72:	f008 fad8 	bl	1f526 <atomic_test_and_clear_bit>
   16f76:	2800      	cmp	r0, #0
   16f78:	d059      	beq.n	1702e <bt_smp_encrypt_change+0xd2>
	if (hci_status) {
   16f7a:	b1cf      	cbz	r7, 16fb0 <bt_smp_encrypt_change+0x54>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   16f7c:	2103      	movs	r1, #3
   16f7e:	4630      	mov	r0, r6
   16f80:	f008 f9ff 	bl	1f382 <atomic_test_bit>
   16f84:	2800      	cmp	r0, #0
   16f86:	d052      	beq.n	1702e <bt_smp_encrypt_change+0xd2>
			uint8_t smp_err = smp_err_get(
   16f88:	4638      	mov	r0, r7
   16f8a:	f7fc f8db 	bl	13144 <bt_security_err_get>
	switch (auth_err) {
   16f8e:	3801      	subs	r0, #1
   16f90:	b2c0      	uxtb	r0, r0
   16f92:	2807      	cmp	r0, #7
   16f94:	bf9a      	itte	ls
   16f96:	4b2b      	ldrls	r3, [pc, #172]	; (17044 <bt_smp_encrypt_change+0xe8>)
   16f98:	5c1c      	ldrbls	r4, [r3, r0]
			uint8_t smp_err = smp_err_get(
   16f9a:	2400      	movhi	r4, #0
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   16f9c:	2102      	movs	r1, #2
   16f9e:	4630      	mov	r0, r6
   16fa0:	f008 f9d5 	bl	1f34e <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
   16fa4:	4621      	mov	r1, r4
		smp_pairing_complete(smp, 0);
   16fa6:	4628      	mov	r0, r5
}
   16fa8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		smp_pairing_complete(smp, 0);
   16fac:	f7ff befa 	b.w	16da4 <smp_pairing_complete>
	if (!conn->encrypt) {
   16fb0:	f898 300b 	ldrb.w	r3, [r8, #11]
   16fb4:	2b00      	cmp	r3, #0
   16fb6:	d03a      	beq.n	1702e <bt_smp_encrypt_change+0xd2>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   16fb8:	2103      	movs	r1, #3
   16fba:	4630      	mov	r0, r6
   16fbc:	f008 f9e1 	bl	1f382 <atomic_test_bit>
   16fc0:	b920      	cbnz	r0, 16fcc <bt_smp_encrypt_change+0x70>
		smp_reset(smp);
   16fc2:	4628      	mov	r0, r5
}
   16fc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		smp_reset(smp);
   16fc8:	f008 bac5 	b.w	1f556 <smp_reset>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   16fcc:	2105      	movs	r1, #5
   16fce:	4630      	mov	r0, r6
   16fd0:	f008 f9d7 	bl	1f382 <atomic_test_bit>
   16fd4:	b1b8      	cbz	r0, 17006 <bt_smp_encrypt_change+0xaa>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   16fd6:	f814 3c08 	ldrb.w	r3, [r4, #-8]
   16fda:	071f      	lsls	r7, r3, #28
   16fdc:	d507      	bpl.n	16fee <bt_smp_encrypt_change+0x92>
   16fde:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   16fe2:	0718      	lsls	r0, r3, #28
   16fe4:	d503      	bpl.n	16fee <bt_smp_encrypt_change+0x92>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   16fe6:	2111      	movs	r1, #17
   16fe8:	4630      	mov	r0, r6
   16fea:	f008 f9b0 	bl	1f34e <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   16fee:	f814 3c08 	ldrb.w	r3, [r4, #-8]
   16ff2:	f023 0308 	bic.w	r3, r3, #8
   16ff6:	f804 3c08 	strb.w	r3, [r4, #-8]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
   16ffa:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   16ffe:	f023 0308 	bic.w	r3, r3, #8
   17002:	f804 3c07 	strb.w	r3, [r4, #-7]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   17006:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   1700a:	07d9      	lsls	r1, r3, #31
   1700c:	d511      	bpl.n	17032 <bt_smp_encrypt_change+0xd6>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   1700e:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   17010:	4628      	mov	r0, r5
   17012:	f008 f99c 	bl	1f34e <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   17016:	2102      	movs	r1, #2
   17018:	4630      	mov	r0, r6
   1701a:	f008 f998 	bl	1f34e <atomic_set_bit>
	struct bt_keys *keys = conn->le.keys;
   1701e:	6823      	ldr	r3, [r4, #0]
	if (!keys) {
   17020:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   17024:	b11b      	cbz	r3, 1702e <bt_smp_encrypt_change+0xd2>
	if (!smp->local_dist && !smp->remote_dist) {
   17026:	f834 1c08 	ldrh.w	r1, [r4, #-8]
   1702a:	2900      	cmp	r1, #0
   1702c:	d0bb      	beq.n	16fa6 <bt_smp_encrypt_change+0x4a>
}
   1702e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   17032:	079a      	lsls	r2, r3, #30
   17034:	d501      	bpl.n	1703a <bt_smp_encrypt_change+0xde>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   17036:	2108      	movs	r1, #8
   17038:	e7ea      	b.n	17010 <bt_smp_encrypt_change+0xb4>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1703a:	075b      	lsls	r3, r3, #29
   1703c:	d5eb      	bpl.n	17016 <bt_smp_encrypt_change+0xba>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1703e:	210a      	movs	r1, #10
   17040:	e7e6      	b.n	17010 <bt_smp_encrypt_change+0xb4>
   17042:	bf00      	nop
   17044:	00021d02 	.word	0x00021d02

00017048 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   17048:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1704a:	4b0a      	ldr	r3, [pc, #40]	; (17074 <bt_smp_init+0x2c>)
   1704c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   17050:	f003 0306 	and.w	r3, r3, #6
   17054:	2b06      	cmp	r3, #6
   17056:	4b08      	ldr	r3, [pc, #32]	; (17078 <bt_smp_init+0x30>)
   17058:	bf0c      	ite	eq
   1705a:	2201      	moveq	r2, #1
   1705c:	2200      	movne	r2, #0
   1705e:	701a      	strb	r2, [r3, #0]
	static struct bt_pub_key_cb pub_key_cb = {
		.func           = bt_smp_pkey_ready,
	};

	sc_supported = le_sc_supported();
	if (IS_ENABLED(CONFIG_BT_SMP_SC_PAIR_ONLY) && !sc_supported) {
   17060:	d104      	bne.n	1706c <bt_smp_init+0x24>
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   17062:	4806      	ldr	r0, [pc, #24]	; (1707c <bt_smp_init+0x34>)
   17064:	f7fc fefa 	bl	13e5c <bt_pub_key_gen>
	}

	return smp_self_test();
   17068:	2000      	movs	r0, #0
}
   1706a:	bd08      	pop	{r3, pc}
		return -ENOENT;
   1706c:	f06f 0001 	mvn.w	r0, #1
   17070:	e7fb      	b.n	1706a <bt_smp_init+0x22>
   17072:	bf00      	nop
   17074:	200002b8 	.word	0x200002b8
   17078:	20002b76 	.word	0x20002b76
   1707c:	20000570 	.word	0x20000570

00017080 <bt_keys_get_addr>:
	return kdata.in_use;
}
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
   17080:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	int i;
	size_t first_free_slot = ARRAY_SIZE(key_pool);

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   17084:	2500      	movs	r5, #0
   17086:	4e1e      	ldr	r6, [pc, #120]	; (17100 <bt_keys_get_addr+0x80>)
{
   17088:	4680      	mov	r8, r0
   1708a:	460f      	mov	r7, r1
	size_t first_free_slot = ARRAY_SIZE(key_pool);
   1708c:	2403      	movs	r4, #3

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
			return keys;
		}
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
   1708e:	46a9      	mov	r9, r5
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   17090:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   17094:	4543      	cmp	r3, r8
   17096:	ea4f 1a85 	mov.w	sl, r5, lsl #6
   1709a:	d021      	beq.n	170e0 <bt_keys_get_addr+0x60>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
   1709c:	2c03      	cmp	r4, #3
   1709e:	d10b      	bne.n	170b8 <bt_keys_get_addr+0x38>
   170a0:	2207      	movs	r2, #7
   170a2:	4669      	mov	r1, sp
   170a4:	4630      	mov	r0, r6
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
   170a6:	f8cd 9000 	str.w	r9, [sp]
   170aa:	f8cd 9003 	str.w	r9, [sp, #3]
   170ae:	f005 fde9 	bl	1cc84 <memcmp>
			first_free_slot = i;
   170b2:	2800      	cmp	r0, #0
   170b4:	bf08      	it	eq
   170b6:	462c      	moveq	r4, r5
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   170b8:	3501      	adds	r5, #1
   170ba:	2d03      	cmp	r5, #3
   170bc:	f106 0640 	add.w	r6, r6, #64	; 0x40
   170c0:	d1e6      	bne.n	17090 <bt_keys_get_addr+0x10>
			first_free_slot = oldest - &key_pool[0];
		}
	}

#endif  /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */
	if (first_free_slot < ARRAY_SIZE(key_pool)) {
   170c2:	2c03      	cmp	r4, #3
   170c4:	d019      	beq.n	170fa <bt_keys_get_addr+0x7a>
		keys = &key_pool[first_free_slot];
   170c6:	480f      	ldr	r0, [pc, #60]	; (17104 <bt_keys_get_addr+0x84>)
   170c8:	01a3      	lsls	r3, r4, #6
	memcpy(dst, src, sizeof(*dst));
   170ca:	2207      	movs	r2, #7
		keys->id = id;
   170cc:	f800 8003 	strb.w	r8, [r0, r3]
		bt_addr_le_copy(&keys->addr, addr);
   170d0:	3301      	adds	r3, #1
		keys = &key_pool[first_free_slot];
   170d2:	eb00 1484 	add.w	r4, r0, r4, lsl #6
   170d6:	4639      	mov	r1, r7
   170d8:	4418      	add	r0, r3
   170da:	f005 fde4 	bl	1cca6 <memcpy>
}
   170de:	e008      	b.n	170f2 <bt_keys_get_addr+0x72>
	return memcmp(a, b, sizeof(*a));
   170e0:	2207      	movs	r2, #7
   170e2:	4639      	mov	r1, r7
   170e4:	4630      	mov	r0, r6
   170e6:	f005 fdcd 	bl	1cc84 <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   170ea:	2800      	cmp	r0, #0
   170ec:	d1d6      	bne.n	1709c <bt_keys_get_addr+0x1c>
		keys = &key_pool[i];
   170ee:	4c05      	ldr	r4, [pc, #20]	; (17104 <bt_keys_get_addr+0x84>)
   170f0:	4454      	add	r4, sl
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
}
   170f2:	4620      	mov	r0, r4
   170f4:	b002      	add	sp, #8
   170f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return NULL;
   170fa:	2400      	movs	r4, #0
   170fc:	e7f9      	b.n	170f2 <bt_keys_get_addr+0x72>
   170fe:	bf00      	nop
   17100:	20002649 	.word	0x20002649
   17104:	20002648 	.word	0x20002648

00017108 <bt_foreach_bond>:

void bt_foreach_bond(uint8_t id, void (*func)(const struct bt_bond_info *info,
					   void *user_data),
		     void *user_data)
{
   17108:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1710c:	4c0d      	ldr	r4, [pc, #52]	; (17144 <bt_foreach_bond+0x3c>)
   1710e:	4605      	mov	r5, r0
   17110:	460e      	mov	r6, r1
   17112:	4617      	mov	r7, r2
   17114:	f104 08c0 	add.w	r8, r4, #192	; 0xc0
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		struct bt_keys *keys = &key_pool[i];

		if (keys->keys && keys->id == id) {
   17118:	f8b4 300d 	ldrh.w	r3, [r4, #13]
   1711c:	b15b      	cbz	r3, 17136 <bt_foreach_bond+0x2e>
   1711e:	f814 3c01 	ldrb.w	r3, [r4, #-1]
   17122:	42ab      	cmp	r3, r5
   17124:	d107      	bne.n	17136 <bt_foreach_bond+0x2e>
	memcpy(dst, src, sizeof(*dst));
   17126:	4621      	mov	r1, r4
   17128:	2207      	movs	r2, #7
   1712a:	4668      	mov	r0, sp
   1712c:	f005 fdbb 	bl	1cca6 <memcpy>
			struct bt_bond_info info;

			bt_addr_le_copy(&info.addr, &keys->addr);
			func(&info, user_data);
   17130:	4639      	mov	r1, r7
   17132:	4668      	mov	r0, sp
   17134:	47b0      	blx	r6
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   17136:	3440      	adds	r4, #64	; 0x40
   17138:	4544      	cmp	r4, r8
   1713a:	d1ed      	bne.n	17118 <bt_foreach_bond+0x10>
		}
	}
}
   1713c:	b002      	add	sp, #8
   1713e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17142:	bf00      	nop
   17144:	20002649 	.word	0x20002649

00017148 <bt_keys_foreach>:

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
   17148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1714c:	4c08      	ldr	r4, [pc, #32]	; (17170 <bt_keys_foreach+0x28>)
   1714e:	4605      	mov	r5, r0
   17150:	460e      	mov	r6, r1
   17152:	4617      	mov	r7, r2
   17154:	f104 08c0 	add.w	r8, r4, #192	; 0xc0
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
   17158:	89e3      	ldrh	r3, [r4, #14]
   1715a:	422b      	tst	r3, r5
   1715c:	d002      	beq.n	17164 <bt_keys_foreach+0x1c>
			func(&key_pool[i], data);
   1715e:	4639      	mov	r1, r7
   17160:	4620      	mov	r0, r4
   17162:	47b0      	blx	r6
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   17164:	3440      	adds	r4, #64	; 0x40
   17166:	4544      	cmp	r4, r8
   17168:	d1f6      	bne.n	17158 <bt_keys_foreach+0x10>
		}
	}
}
   1716a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1716e:	bf00      	nop
   17170:	20002648 	.word	0x20002648

00017174 <keys_commit>:
{
	bt_id_add(keys);
}

static int keys_commit(void)
{
   17174:	b508      	push	{r3, lr}
	 * the keys were already removed.
	 */
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && IS_ENABLED(CONFIG_BT_PRIVACY)) {
		bt_keys_foreach(BT_KEYS_ALL, id_add, NULL);
	} else {
		bt_keys_foreach(BT_KEYS_IRK, id_add, NULL);
   17176:	4903      	ldr	r1, [pc, #12]	; (17184 <keys_commit+0x10>)
   17178:	2200      	movs	r2, #0
   1717a:	2002      	movs	r0, #2
   1717c:	f7ff ffe4 	bl	17148 <bt_keys_foreach>
	}

	return 0;
}
   17180:	2000      	movs	r0, #0
   17182:	bd08      	pop	{r3, pc}
   17184:	0001f9ef 	.word	0x0001f9ef

00017188 <bt_keys_find>:
{
   17188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1718c:	4c0e      	ldr	r4, [pc, #56]	; (171c8 <bt_keys_find+0x40>)
   1718e:	4606      	mov	r6, r0
   17190:	460f      	mov	r7, r1
   17192:	4690      	mov	r8, r2
   17194:	2500      	movs	r5, #0
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   17196:	f8b4 300d 	ldrh.w	r3, [r4, #13]
   1719a:	4233      	tst	r3, r6
   1719c:	d00d      	beq.n	171ba <bt_keys_find+0x32>
   1719e:	f814 3c01 	ldrb.w	r3, [r4, #-1]
   171a2:	42bb      	cmp	r3, r7
   171a4:	d109      	bne.n	171ba <bt_keys_find+0x32>
	return memcmp(a, b, sizeof(*a));
   171a6:	2207      	movs	r2, #7
   171a8:	4641      	mov	r1, r8
   171aa:	4620      	mov	r0, r4
   171ac:	f005 fd6a 	bl	1cc84 <memcmp>
   171b0:	b918      	cbnz	r0, 171ba <bt_keys_find+0x32>
			return &key_pool[i];
   171b2:	4806      	ldr	r0, [pc, #24]	; (171cc <bt_keys_find+0x44>)
   171b4:	4428      	add	r0, r5
}
   171b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   171ba:	3540      	adds	r5, #64	; 0x40
   171bc:	2dc0      	cmp	r5, #192	; 0xc0
   171be:	f104 0440 	add.w	r4, r4, #64	; 0x40
   171c2:	d1e8      	bne.n	17196 <bt_keys_find+0xe>
	return NULL;
   171c4:	2000      	movs	r0, #0
   171c6:	e7f6      	b.n	171b6 <bt_keys_find+0x2e>
   171c8:	20002649 	.word	0x20002649
   171cc:	20002648 	.word	0x20002648

000171d0 <bt_keys_find_irk>:
{
   171d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
   171d4:	780b      	ldrb	r3, [r1, #0]
   171d6:	2b01      	cmp	r3, #1
   171d8:	4607      	mov	r7, r0
   171da:	460c      	mov	r4, r1
   171dc:	d002      	beq.n	171e4 <bt_keys_find_irk+0x14>
		return NULL;
   171de:	2000      	movs	r0, #0
}
   171e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   171e4:	798b      	ldrb	r3, [r1, #6]
   171e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   171ea:	2b40      	cmp	r3, #64	; 0x40
   171ec:	d1f7      	bne.n	171de <bt_keys_find_irk+0xe>
   171ee:	4d1d      	ldr	r5, [pc, #116]	; (17264 <bt_keys_find_irk+0x94>)
   171f0:	2600      	movs	r6, #0
		    !bt_addr_cmp(&addr->a, &key_pool[i].irk.rpa)) {
   171f2:	f101 0801 	add.w	r8, r1, #1
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   171f6:	f835 3c2c 	ldrh.w	r3, [r5, #-44]
   171fa:	079a      	lsls	r2, r3, #30
   171fc:	d50c      	bpl.n	17218 <bt_keys_find_irk+0x48>
		if (key_pool[i].id == id &&
   171fe:	f815 3c3a 	ldrb.w	r3, [r5, #-58]
   17202:	42bb      	cmp	r3, r7
   17204:	d108      	bne.n	17218 <bt_keys_find_irk+0x48>
	return memcmp(a, b, sizeof(*a));
   17206:	2206      	movs	r2, #6
   17208:	4629      	mov	r1, r5
   1720a:	4640      	mov	r0, r8
   1720c:	f005 fd3a 	bl	1cc84 <memcmp>
   17210:	b910      	cbnz	r0, 17218 <bt_keys_find_irk+0x48>
			return &key_pool[i];
   17212:	4815      	ldr	r0, [pc, #84]	; (17268 <bt_keys_find_irk+0x98>)
   17214:	4430      	add	r0, r6
   17216:	e7e3      	b.n	171e0 <bt_keys_find_irk+0x10>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   17218:	3640      	adds	r6, #64	; 0x40
   1721a:	2ec0      	cmp	r6, #192	; 0xc0
   1721c:	f105 0540 	add.w	r5, r5, #64	; 0x40
   17220:	d1e9      	bne.n	171f6 <bt_keys_find_irk+0x26>
   17222:	4d12      	ldr	r5, [pc, #72]	; (1726c <bt_keys_find_irk+0x9c>)
   17224:	2600      	movs	r6, #0
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   17226:	3401      	adds	r4, #1
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   17228:	f835 3c1c 	ldrh.w	r3, [r5, #-28]
   1722c:	079b      	lsls	r3, r3, #30
   1722e:	d512      	bpl.n	17256 <bt_keys_find_irk+0x86>
		if (key_pool[i].id != id) {
   17230:	f815 3c2a 	ldrb.w	r3, [r5, #-42]
   17234:	42bb      	cmp	r3, r7
   17236:	d10e      	bne.n	17256 <bt_keys_find_irk+0x86>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   17238:	4621      	mov	r1, r4
   1723a:	4628      	mov	r0, r5
   1723c:	f005 fd85 	bl	1cd4a <bt_rpa_irk_matches>
   17240:	b148      	cbz	r0, 17256 <bt_keys_find_irk+0x86>
			bt_addr_copy(&key_pool[i].irk.rpa, &addr->a);
   17242:	4d09      	ldr	r5, [pc, #36]	; (17268 <bt_keys_find_irk+0x98>)
   17244:	f106 003a 	add.w	r0, r6, #58	; 0x3a
	memcpy(dst, src, sizeof(*dst));
   17248:	2206      	movs	r2, #6
   1724a:	4621      	mov	r1, r4
   1724c:	4428      	add	r0, r5
   1724e:	f005 fd2a 	bl	1cca6 <memcpy>
			return &key_pool[i];
   17252:	19a8      	adds	r0, r5, r6
   17254:	e7c4      	b.n	171e0 <bt_keys_find_irk+0x10>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   17256:	3640      	adds	r6, #64	; 0x40
   17258:	2ec0      	cmp	r6, #192	; 0xc0
   1725a:	f105 0540 	add.w	r5, r5, #64	; 0x40
   1725e:	d1e3      	bne.n	17228 <bt_keys_find_irk+0x58>
   17260:	e7bd      	b.n	171de <bt_keys_find_irk+0xe>
   17262:	bf00      	nop
   17264:	20002682 	.word	0x20002682
   17268:	20002648 	.word	0x20002648
   1726c:	20002672 	.word	0x20002672

00017270 <bt_keys_find_addr>:
{
   17270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17272:	4d0c      	ldr	r5, [pc, #48]	; (172a4 <bt_keys_find_addr+0x34>)
   17274:	4606      	mov	r6, r0
   17276:	460f      	mov	r7, r1
   17278:	2400      	movs	r4, #0
		if (key_pool[i].id == id &&
   1727a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   1727e:	42b3      	cmp	r3, r6
   17280:	d108      	bne.n	17294 <bt_keys_find_addr+0x24>
	return memcmp(a, b, sizeof(*a));
   17282:	2207      	movs	r2, #7
   17284:	4639      	mov	r1, r7
   17286:	4628      	mov	r0, r5
   17288:	f005 fcfc 	bl	1cc84 <memcmp>
   1728c:	b910      	cbnz	r0, 17294 <bt_keys_find_addr+0x24>
			return &key_pool[i];
   1728e:	4806      	ldr	r0, [pc, #24]	; (172a8 <bt_keys_find_addr+0x38>)
   17290:	4420      	add	r0, r4
}
   17292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   17294:	3440      	adds	r4, #64	; 0x40
   17296:	2cc0      	cmp	r4, #192	; 0xc0
   17298:	f105 0540 	add.w	r5, r5, #64	; 0x40
   1729c:	d1ed      	bne.n	1727a <bt_keys_find_addr+0xa>
	return NULL;
   1729e:	2000      	movs	r0, #0
   172a0:	e7f7      	b.n	17292 <bt_keys_find_addr+0x22>
   172a2:	bf00      	nop
   172a4:	20002649 	.word	0x20002649
   172a8:	20002648 	.word	0x20002648

000172ac <bt_keys_clear>:
{
   172ac:	b570      	push	{r4, r5, r6, lr}
	if (keys->state & BT_KEYS_ID_ADDED) {
   172ae:	7a03      	ldrb	r3, [r0, #8]
   172b0:	075b      	lsls	r3, r3, #29
{
   172b2:	b08c      	sub	sp, #48	; 0x30
   172b4:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   172b6:	d501      	bpl.n	172bc <bt_keys_clear+0x10>
		bt_id_del(keys);
   172b8:	f7fc f98c 	bl	135d4 <bt_id_del>
		if (keys->id) {
   172bc:	4625      	mov	r5, r4
   172be:	f815 2b01 	ldrb.w	r2, [r5], #1
   172c2:	b1b2      	cbz	r2, 172f2 <bt_keys_clear+0x46>
			u8_to_dec(id, sizeof(id), keys->id);
   172c4:	ae02      	add	r6, sp, #8
   172c6:	2104      	movs	r1, #4
   172c8:	4630      	mov	r0, r6
   172ca:	f003 f9ca 	bl	1a662 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "keys",
   172ce:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "keys",
   172d0:	4a09      	ldr	r2, [pc, #36]	; (172f8 <bt_keys_clear+0x4c>)
   172d2:	462b      	mov	r3, r5
   172d4:	2124      	movs	r1, #36	; 0x24
   172d6:	a803      	add	r0, sp, #12
   172d8:	f7fb f9ea 	bl	126b0 <bt_settings_encode_key>
		settings_delete(key);
   172dc:	a803      	add	r0, sp, #12
   172de:	f004 f948 	bl	1b572 <settings_delete>
	(void)memset(keys, 0, sizeof(*keys));
   172e2:	2240      	movs	r2, #64	; 0x40
   172e4:	2100      	movs	r1, #0
   172e6:	4620      	mov	r0, r4
}
   172e8:	b00c      	add	sp, #48	; 0x30
   172ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(keys, 0, sizeof(*keys));
   172ee:	f005 bce5 	b.w	1ccbc <memset>
			bt_settings_encode_key(key, sizeof(key), "keys",
   172f2:	9200      	str	r2, [sp, #0]
   172f4:	e7ec      	b.n	172d0 <bt_keys_clear+0x24>
   172f6:	bf00      	nop
   172f8:	00021d3e 	.word	0x00021d3e

000172fc <bt_keys_store>:
{
   172fc:	b570      	push	{r4, r5, r6, lr}
	if (keys->id) {
   172fe:	4605      	mov	r5, r0
{
   17300:	b08c      	sub	sp, #48	; 0x30
	if (keys->id) {
   17302:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   17306:	4604      	mov	r4, r0
	if (keys->id) {
   17308:	b19a      	cbz	r2, 17332 <bt_keys_store+0x36>
		u8_to_dec(id, sizeof(id), keys->id);
   1730a:	ae02      	add	r6, sp, #8
   1730c:	2104      	movs	r1, #4
   1730e:	4630      	mov	r0, r6
   17310:	f003 f9a7 	bl	1a662 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   17314:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   17316:	462b      	mov	r3, r5
   17318:	a803      	add	r0, sp, #12
   1731a:	4a07      	ldr	r2, [pc, #28]	; (17338 <bt_keys_store+0x3c>)
   1731c:	2124      	movs	r1, #36	; 0x24
   1731e:	f7fb f9c7 	bl	126b0 <bt_settings_encode_key>
	err = settings_save_one(key, keys->storage_start, BT_KEYS_STORAGE_LEN);
   17322:	2234      	movs	r2, #52	; 0x34
   17324:	f104 010c 	add.w	r1, r4, #12
   17328:	a803      	add	r0, sp, #12
   1732a:	f7f9 fdd1 	bl	10ed0 <settings_save_one>
}
   1732e:	b00c      	add	sp, #48	; 0x30
   17330:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   17332:	9200      	str	r2, [sp, #0]
   17334:	e7ef      	b.n	17316 <bt_keys_store+0x1a>
   17336:	bf00      	nop
   17338:	00021d3e 	.word	0x00021d3e

0001733c <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1733c:	4b02      	ldr	r3, [pc, #8]	; (17348 <net_buf_pool_get+0xc>)
   1733e:	2228      	movs	r2, #40	; 0x28
   17340:	fb02 3000 	mla	r0, r2, r0, r3
   17344:	4770      	bx	lr
   17346:	bf00      	nop
   17348:	2000076c 	.word	0x2000076c

0001734c <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1734c:	7982      	ldrb	r2, [r0, #6]

	return buf - pool->__bufs;
   1734e:	4b05      	ldr	r3, [pc, #20]	; (17364 <net_buf_id+0x18>)
   17350:	2128      	movs	r1, #40	; 0x28
   17352:	fb01 3302 	mla	r3, r1, r2, r3
   17356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   17358:	1ac0      	subs	r0, r0, r3
}
   1735a:	4b03      	ldr	r3, [pc, #12]	; (17368 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   1735c:	10c0      	asrs	r0, r0, #3
}
   1735e:	4358      	muls	r0, r3
   17360:	4770      	bx	lr
   17362:	bf00      	nop
   17364:	2000076c 	.word	0x2000076c
   17368:	aaaaaaab 	.word	0xaaaaaaab

0001736c <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1736c:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1736e:	4b0a      	ldr	r3, [pc, #40]	; (17398 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   17370:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   17372:	2428      	movs	r4, #40	; 0x28
   17374:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   17378:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1737a:	6a1b      	ldr	r3, [r3, #32]
   1737c:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1737e:	6823      	ldr	r3, [r4, #0]
   17380:	429a      	cmp	r2, r3
   17382:	bf94      	ite	ls
   17384:	600a      	strls	r2, [r1, #0]
   17386:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   17388:	f7ff ffe0 	bl	1734c <net_buf_id>
   1738c:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   17390:	fb02 3000 	mla	r0, r2, r0, r3
   17394:	bd10      	pop	{r4, pc}
   17396:	bf00      	nop
   17398:	2000076c 	.word	0x2000076c

0001739c <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1739c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   173a0:	4605      	mov	r5, r0
   173a2:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   173a4:	4610      	mov	r0, r2
   173a6:	4619      	mov	r1, r3
{
   173a8:	4691      	mov	r9, r2
   173aa:	4698      	mov	r8, r3
   173ac:	4617      	mov	r7, r2
   173ae:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   173b0:	f009 fa00 	bl	207b4 <sys_clock_timeout_end_calc>
   173b4:	4682      	mov	sl, r0
   173b6:	468b      	mov	fp, r1
	__asm__ volatile(
   173b8:	f04f 0340 	mov.w	r3, #64	; 0x40
   173bc:	f3ef 8111 	mrs	r1, BASEPRI
   173c0:	f383 8811 	msr	BASEPRI, r3
   173c4:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   173c8:	8b6b      	ldrh	r3, [r5, #26]
   173ca:	2b00      	cmp	r3, #0
   173cc:	d055      	beq.n	1747a <net_buf_alloc_len+0xde>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   173ce:	8b2a      	ldrh	r2, [r5, #24]
   173d0:	429a      	cmp	r2, r3
   173d2:	d93e      	bls.n	17452 <net_buf_alloc_len+0xb6>
   173d4:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   173d6:	2200      	movs	r2, #0
   173d8:	2300      	movs	r3, #0
   173da:	4628      	mov	r0, r5
   173dc:	f002 f974 	bl	196c8 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   173e0:	9900      	ldr	r1, [sp, #0]
   173e2:	4604      	mov	r4, r0
   173e4:	2800      	cmp	r0, #0
   173e6:	d034      	beq.n	17452 <net_buf_alloc_len+0xb6>
	__asm__ volatile(
   173e8:	f381 8811 	msr	BASEPRI, r1
   173ec:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   173f0:	9b01      	ldr	r3, [sp, #4]
   173f2:	2b00      	cmp	r3, #0
   173f4:	d051      	beq.n	1749a <net_buf_alloc_len+0xfe>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   173f6:	ea58 0309 	orrs.w	r3, r8, r9
   173fa:	d00f      	beq.n	1741c <net_buf_alloc_len+0x80>
   173fc:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   17400:	bf08      	it	eq
   17402:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
   17406:	d009      	beq.n	1741c <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   17408:	f003 f868 	bl	1a4dc <sys_clock_tick_get>
   1740c:	ebba 0700 	subs.w	r7, sl, r0
   17410:	eb6b 0601 	sbc.w	r6, fp, r1
   17414:	2e00      	cmp	r6, #0
   17416:	bfbc      	itt	lt
   17418:	2700      	movlt	r7, #0
   1741a:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1741c:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1741e:	f8df 8090 	ldr.w	r8, [pc, #144]	; 174b0 <net_buf_alloc_len+0x114>
   17422:	2228      	movs	r2, #40	; 0x28
   17424:	fb02 8303 	mla	r3, r2, r3, r8
   17428:	a901      	add	r1, sp, #4
   1742a:	6a1b      	ldr	r3, [r3, #32]
   1742c:	681b      	ldr	r3, [r3, #0]
   1742e:	463a      	mov	r2, r7
   17430:	681d      	ldr	r5, [r3, #0]
   17432:	4620      	mov	r0, r4
   17434:	4633      	mov	r3, r6
   17436:	47a8      	blx	r5
   17438:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1743a:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1743c:	bb70      	cbnz	r0, 1749c <net_buf_alloc_len+0x100>
	k_lifo_put(&pool->free, buf);
   1743e:	79a0      	ldrb	r0, [r4, #6]
   17440:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   17444:	4621      	mov	r1, r4
   17446:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
   1744a:	f008 ff43 	bl	202d4 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1744e:	462c      	mov	r4, r5
}
   17450:	e01f      	b.n	17492 <net_buf_alloc_len+0xf6>
		uninit_count = pool->uninit_count--;
   17452:	8b6b      	ldrh	r3, [r5, #26]
   17454:	1e5a      	subs	r2, r3, #1
   17456:	836a      	strh	r2, [r5, #26]
   17458:	f381 8811 	msr	BASEPRI, r1
   1745c:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   17460:	8b2c      	ldrh	r4, [r5, #24]
   17462:	1ae3      	subs	r3, r4, r3
   17464:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   17466:	2018      	movs	r0, #24
   17468:	fb00 4403 	mla	r4, r0, r3, r4
	return pool - _net_buf_pool_list;
   1746c:	4810      	ldr	r0, [pc, #64]	; (174b0 <net_buf_alloc_len+0x114>)
   1746e:	4b11      	ldr	r3, [pc, #68]	; (174b4 <net_buf_alloc_len+0x118>)
   17470:	1a2d      	subs	r5, r5, r0
   17472:	10ed      	asrs	r5, r5, #3
   17474:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   17476:	71a5      	strb	r5, [r4, #6]
		goto success;
   17478:	e7ba      	b.n	173f0 <net_buf_alloc_len+0x54>
   1747a:	f381 8811 	msr	BASEPRI, r1
   1747e:	f3bf 8f6f 	isb	sy
   17482:	464a      	mov	r2, r9
   17484:	4643      	mov	r3, r8
   17486:	4628      	mov	r0, r5
   17488:	f002 f91e 	bl	196c8 <z_impl_k_queue_get>
	if (!buf) {
   1748c:	4604      	mov	r4, r0
   1748e:	2800      	cmp	r0, #0
   17490:	d1ae      	bne.n	173f0 <net_buf_alloc_len+0x54>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   17492:	4620      	mov	r0, r4
   17494:	b003      	add	sp, #12
   17496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   1749a:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   1749c:	2300      	movs	r3, #0
	buf->ref   = 1U;
   1749e:	2201      	movs	r2, #1
	buf->frags = NULL;
   174a0:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   174a2:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   174a4:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   174a6:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   174a8:	6923      	ldr	r3, [r4, #16]
   174aa:	81e2      	strh	r2, [r4, #14]
   174ac:	60a3      	str	r3, [r4, #8]
	return buf;
   174ae:	e7f0      	b.n	17492 <net_buf_alloc_len+0xf6>
   174b0:	2000076c 	.word	0x2000076c
   174b4:	cccccccd 	.word	0xcccccccd

000174b8 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   174b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   174bc:	4d17      	ldr	r5, [pc, #92]	; (1751c <net_buf_unref+0x64>)
   174be:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   174c0:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   174c2:	2728      	movs	r7, #40	; 0x28
	while (buf) {
   174c4:	b90c      	cbnz	r4, 174ca <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   174c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   174ca:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   174cc:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   174d0:	3b01      	subs	r3, #1
   174d2:	b2db      	uxtb	r3, r3
   174d4:	7123      	strb	r3, [r4, #4]
   174d6:	2b00      	cmp	r3, #0
   174d8:	d1f5      	bne.n	174c6 <net_buf_unref+0xe>
		if (buf->__buf) {
   174da:	6921      	ldr	r1, [r4, #16]
   174dc:	b159      	cbz	r1, 174f6 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   174de:	7963      	ldrb	r3, [r4, #5]
   174e0:	079b      	lsls	r3, r3, #30
   174e2:	d407      	bmi.n	174f4 <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   174e4:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   174e6:	fb07 5303 	mla	r3, r7, r3, r5
   174ea:	4620      	mov	r0, r4
   174ec:	6a1b      	ldr	r3, [r3, #32]
   174ee:	681b      	ldr	r3, [r3, #0]
   174f0:	689b      	ldr	r3, [r3, #8]
   174f2:	4798      	blx	r3
			buf->__buf = NULL;
   174f4:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   174f6:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   174f8:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   174fa:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   174fe:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   17500:	69db      	ldr	r3, [r3, #28]
   17502:	b11b      	cbz	r3, 1750c <net_buf_unref+0x54>
			pool->destroy(buf);
   17504:	4620      	mov	r0, r4
   17506:	4798      	blx	r3
{
   17508:	4644      	mov	r4, r8
   1750a:	e7db      	b.n	174c4 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   1750c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   17510:	4621      	mov	r1, r4
   17512:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
   17516:	f008 fedd 	bl	202d4 <k_queue_prepend>
}
   1751a:	e7f5      	b.n	17508 <net_buf_unref+0x50>
   1751c:	2000076c 	.word	0x2000076c

00017520 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   17520:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   17522:	4b09      	ldr	r3, [pc, #36]	; (17548 <gpio_nrfx_init+0x28>)
   17524:	781a      	ldrb	r2, [r3, #0]
   17526:	b96a      	cbnz	r2, 17544 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   17528:	2101      	movs	r1, #1
   1752a:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1752c:	2006      	movs	r0, #6
   1752e:	2105      	movs	r1, #5
   17530:	f7fa fb78 	bl	11c24 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   17534:	2006      	movs	r0, #6
   17536:	f7fa fb43 	bl	11bc0 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1753a:	4b04      	ldr	r3, [pc, #16]	; (1754c <gpio_nrfx_init+0x2c>)
   1753c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   17540:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   17544:	2000      	movs	r0, #0
   17546:	bd08      	pop	{r3, pc}
   17548:	20002b77 	.word	0x20002b77
   1754c:	40006000 	.word	0x40006000

00017550 <gpio_nrfx_pin_interrupt_configure>:
{
   17550:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   17552:	4617      	mov	r7, r2
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   17554:	6842      	ldr	r2, [r0, #4]
	return port->data;
   17556:	6906      	ldr	r6, [r0, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   17558:	7a12      	ldrb	r2, [r2, #8]
   1755a:	f001 041f 	and.w	r4, r1, #31
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
   1755e:	f5b7 3fa0 	cmp.w	r7, #81920	; 0x14000
{
   17562:	460d      	mov	r5, r1
   17564:	ea44 1442 	orr.w	r4, r4, r2, lsl #5
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
   17568:	d10c      	bne.n	17584 <gpio_nrfx_pin_interrupt_configure+0x34>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   1756a:	f004 021f 	and.w	r2, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1756e:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   17572:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   17576:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1757a:	07d0      	lsls	r0, r2, #31
   1757c:	d507      	bpl.n	1758e <gpio_nrfx_pin_interrupt_configure+0x3e>
		return -ENOTSUP;
   1757e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   17582:	e09a      	b.n	176ba <gpio_nrfx_pin_interrupt_configure+0x16a>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   17584:	f5b7 5f00 	cmp.w	r7, #8192	; 0x2000
   17588:	68f1      	ldr	r1, [r6, #12]
   1758a:	f000 8098 	beq.w	176be <gpio_nrfx_pin_interrupt_configure+0x16e>
   1758e:	68f2      	ldr	r2, [r6, #12]
   17590:	2101      	movs	r1, #1
   17592:	40a9      	lsls	r1, r5
   17594:	4311      	orrs	r1, r2
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   17596:	6972      	ldr	r2, [r6, #20]
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   17598:	60f1      	str	r1, [r6, #12]
   1759a:	2101      	movs	r1, #1
   1759c:	40a9      	lsls	r1, r5
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1759e:	f5b7 3fa0 	cmp.w	r7, #81920	; 0x14000
   175a2:	bf0c      	ite	eq
   175a4:	430a      	orreq	r2, r1
   175a6:	438a      	bicne	r2, r1
   175a8:	6172      	str	r2, [r6, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   175aa:	69b2      	ldr	r2, [r6, #24]
   175ac:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   175b0:	bf0c      	ite	eq
   175b2:	430a      	orreq	r2, r1
   175b4:	438a      	bicne	r2, r1
   175b6:	61b2      	str	r2, [r6, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   175b8:	6932      	ldr	r2, [r6, #16]
   175ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
   175be:	bf0c      	ite	eq
   175c0:	4311      	orreq	r1, r2
   175c2:	ea22 0101 	bicne.w	r1, r2, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   175c6:	4a4a      	ldr	r2, [pc, #296]	; (176f0 <gpio_nrfx_pin_interrupt_configure+0x1a0>)
   175c8:	6131      	str	r1, [r6, #16]
   175ca:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   175ce:	2000      	movs	r0, #0
   175d0:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   175d2:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   175d6:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
   175da:	f3c1 2104 	ubfx	r1, r1, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   175de:	428c      	cmp	r4, r1
   175e0:	d172      	bne.n	176c8 <gpio_nrfx_pin_interrupt_configure+0x178>
		    && (intenset & BIT(i))) {
   175e2:	fa23 f100 	lsr.w	r1, r3, r0
   175e6:	07c9      	lsls	r1, r1, #31
   175e8:	d56e      	bpl.n	176c8 <gpio_nrfx_pin_interrupt_configure+0x178>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   175ea:	0083      	lsls	r3, r0, #2
   175ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   175f0:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   175f4:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   175f8:	f021 0101 	bic.w	r1, r1, #1
   175fc:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   17600:	2301      	movs	r3, #1
   17602:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
   17604:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
   17608:	b2c0      	uxtb	r0, r0
   1760a:	f001 fc73 	bl	18ef4 <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1760e:	4620      	mov	r0, r4
   17610:	2100      	movs	r1, #0
   17612:	f008 fadd 	bl	1fbd0 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   17616:	68f0      	ldr	r0, [r6, #12]
   17618:	40e8      	lsrs	r0, r5
   1761a:	f010 0001 	ands.w	r0, r0, #1
   1761e:	d04c      	beq.n	176ba <gpio_nrfx_pin_interrupt_configure+0x16a>
		if (data->trig_edge & BIT(pin)) {
   17620:	6970      	ldr	r0, [r6, #20]
   17622:	40e8      	lsrs	r0, r5
   17624:	f010 0201 	ands.w	r2, r0, #1
   17628:	d055      	beq.n	176d6 <gpio_nrfx_pin_interrupt_configure+0x186>
				if (data->double_edge & BIT(pin)) {
   1762a:	69b3      	ldr	r3, [r6, #24]
   1762c:	40eb      	lsrs	r3, r5
   1762e:	07db      	lsls	r3, r3, #31
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
   17630:	bf5f      	itttt	pl
   17632:	6931      	ldrpl	r1, [r6, #16]
   17634:	fa21 f505 	lsrpl.w	r5, r1, r5
   17638:	f005 0501 	andpl.w	r5, r5, #1
   1763c:	f1c5 0502 	rsbpl	r5, r5, #2
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   17640:	f10d 0007 	add.w	r0, sp, #7
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
   17644:	bf54      	ite	pl
   17646:	b2ed      	uxtbpl	r5, r5
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
   17648:	2503      	movmi	r5, #3
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   1764a:	f001 fc73 	bl	18f34 <nrfx_gpiote_channel_alloc>
   1764e:	4b29      	ldr	r3, [pc, #164]	; (176f4 <gpio_nrfx_pin_interrupt_configure+0x1a4>)
   17650:	4298      	cmp	r0, r3
   17652:	d13d      	bne.n	176d0 <gpio_nrfx_pin_interrupt_configure+0x180>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
   17654:	f89d 2007 	ldrb.w	r2, [sp, #7]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   17658:	0093      	lsls	r3, r2, #2
   1765a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1765e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   17662:	0224      	lsls	r4, r4, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   17664:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   17668:	f421 3147 	bic.w	r1, r1, #203776	; 0x31c00
   1766c:	f421 7140 	bic.w	r1, r1, #768	; 0x300
   17670:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   17674:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   17678:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
   1767c:	430c      	orrs	r4, r1
   1767e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   17682:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
   17686:	0093      	lsls	r3, r2, #2
   17688:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1768c:	f503 43c2 	add.w	r3, r3, #24832	; 0x6100
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   17690:	2000      	movs	r0, #0
   17692:	6018      	str	r0, [r3, #0]
	nrf_gpiote_event_enable(NRF_GPIOTE, channel);
   17694:	f89d 1007 	ldrb.w	r1, [sp, #7]
   17698:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1769a:	008b      	lsls	r3, r1, #2
   1769c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   176a0:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   176a4:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   176a8:	f042 0201 	orr.w	r2, r2, #1
   176ac:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_reg->INTENSET = mask;
   176b0:	4a0f      	ldr	r2, [pc, #60]	; (176f0 <gpio_nrfx_pin_interrupt_configure+0x1a0>)
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   176b2:	2301      	movs	r3, #1
   176b4:	408b      	lsls	r3, r1
   176b6:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   176ba:	b003      	add	sp, #12
   176bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   176be:	2201      	movs	r2, #1
   176c0:	40aa      	lsls	r2, r5
   176c2:	ea21 0102 	bic.w	r1, r1, r2
   176c6:	e766      	b.n	17596 <gpio_nrfx_pin_interrupt_configure+0x46>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   176c8:	3001      	adds	r0, #1
   176ca:	2808      	cmp	r0, #8
   176cc:	d181      	bne.n	175d2 <gpio_nrfx_pin_interrupt_configure+0x82>
   176ce:	e79e      	b.n	1760e <gpio_nrfx_pin_interrupt_configure+0xbe>
		return -ENODEV;
   176d0:	f06f 0012 	mvn.w	r0, #18
   176d4:	e7f1      	b.n	176ba <gpio_nrfx_pin_interrupt_configure+0x16a>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   176d6:	6931      	ldr	r1, [r6, #16]
   176d8:	40e9      	lsrs	r1, r5
   176da:	f001 0101 	and.w	r1, r1, #1
   176de:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   176e2:	4620      	mov	r0, r4
   176e4:	b2c9      	uxtb	r1, r1
   176e6:	f008 fa73 	bl	1fbd0 <nrf_gpio_cfg_sense_set>
	int res = 0;
   176ea:	4610      	mov	r0, r2
   176ec:	e7e5      	b.n	176ba <gpio_nrfx_pin_interrupt_configure+0x16a>
   176ee:	bf00      	nop
   176f0:	40006000 	.word	0x40006000
   176f4:	0bad0000 	.word	0x0bad0000

000176f8 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   176f8:	4b2a      	ldr	r3, [pc, #168]	; (177a4 <gpio_nrfx_config+0xac>)
{
   176fa:	b570      	push	{r4, r5, r6, lr}
	return port->config;
   176fc:	6846      	ldr	r6, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   176fe:	482a      	ldr	r0, [pc, #168]	; (177a8 <gpio_nrfx_config+0xb0>)
   17700:	4013      	ands	r3, r2
   17702:	4283      	cmp	r3, r0
   17704:	d03e      	beq.n	17784 <gpio_nrfx_config+0x8c>
   17706:	d80d      	bhi.n	17724 <gpio_nrfx_config+0x2c>
   17708:	2b06      	cmp	r3, #6
   1770a:	d015      	beq.n	17738 <gpio_nrfx_config+0x40>
   1770c:	d805      	bhi.n	1771a <gpio_nrfx_config+0x22>
   1770e:	b19b      	cbz	r3, 17738 <gpio_nrfx_config+0x40>
   17710:	2b02      	cmp	r3, #2
   17712:	d039      	beq.n	17788 <gpio_nrfx_config+0x90>
   17714:	f06f 0015 	mvn.w	r0, #21
   17718:	e033      	b.n	17782 <gpio_nrfx_config+0x8a>
   1771a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1771e:	d1f9      	bne.n	17714 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
   17720:	2301      	movs	r3, #1
   17722:	e009      	b.n	17738 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   17724:	4821      	ldr	r0, [pc, #132]	; (177ac <gpio_nrfx_config+0xb4>)
   17726:	4283      	cmp	r3, r0
   17728:	d030      	beq.n	1778c <gpio_nrfx_config+0x94>
   1772a:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   1772e:	d02f      	beq.n	17790 <gpio_nrfx_config+0x98>
   17730:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   17734:	d1ee      	bne.n	17714 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
   17736:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   17738:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
   1773a:	bf54      	ite	pl
   1773c:	f3c2 1540 	ubfxpl	r5, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
   17740:	2503      	movmi	r5, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   17742:	f482 7480 	eor.w	r4, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
   17746:	f412 7f00 	tst.w	r2, #512	; 0x200
	dir = ((flags & GPIO_OUTPUT) != 0)
   1774a:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1774e:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   17752:	d007      	beq.n	17764 <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   17754:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   17758:	6876      	ldr	r6, [r6, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1775a:	d01b      	beq.n	17794 <gpio_nrfx_config+0x9c>
			nrf_gpio_port_out_set(reg, BIT(pin));
   1775c:	2201      	movs	r2, #1
   1775e:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
   17760:	f8c6 2508 	str.w	r2, [r6, #1288]	; 0x508
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   17764:	ea40 0244 	orr.w	r2, r0, r4, lsl #1
    *p_pin = pin_number & 0x1F;
   17768:	f001 011f 	and.w	r1, r1, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1776c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
   17770:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
   17774:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   17778:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   1777c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
   17780:	2000      	movs	r0, #0
}
   17782:	bd70      	pop	{r4, r5, r6, pc}
		drive = NRF_GPIO_PIN_H0D1;
   17784:	2307      	movs	r3, #7
   17786:	e7d7      	b.n	17738 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
   17788:	2304      	movs	r3, #4
   1778a:	e7d5      	b.n	17738 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
   1778c:	2305      	movs	r3, #5
   1778e:	e7d3      	b.n	17738 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
   17790:	2303      	movs	r3, #3
   17792:	e7d1      	b.n	17738 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   17794:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   17796:	bf42      	ittt	mi
   17798:	2201      	movmi	r2, #1
   1779a:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
   1779c:	f8c6 250c 	strmi.w	r2, [r6, #1292]	; 0x50c
}
   177a0:	e7e0      	b.n	17764 <gpio_nrfx_config+0x6c>
   177a2:	bf00      	nop
   177a4:	00f00006 	.word	0x00f00006
   177a8:	00100006 	.word	0x00100006
   177ac:	00400002 	.word	0x00400002

000177b0 <gpiote_event_handler>:
{
   177b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   177b4:	4b41      	ldr	r3, [pc, #260]	; (178bc <gpiote_event_handler+0x10c>)
   177b6:	f8d3 517c 	ldr.w	r5, [r3, #380]	; 0x17c
	if (port_event) {
   177ba:	2d00      	cmp	r5, #0
   177bc:	d059      	beq.n	17872 <gpiote_event_handler+0xc2>
	uint32_t out = data->pin_int_en;
   177be:	4b40      	ldr	r3, [pc, #256]	; (178c0 <gpiote_event_handler+0x110>)
    return p_reg->IN;
   177c0:	f04f 49a0 	mov.w	r9, #1342177280	; 0x50000000
	out &= ~data->trig_edge & ~data->double_edge;
   177c4:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
	uint32_t out = data->pin_int_en;
   177c8:	68df      	ldr	r7, [r3, #12]
   177ca:	f8d9 4510 	ldr.w	r4, [r9, #1296]	; 0x510
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   177ce:	691b      	ldr	r3, [r3, #16]
	out &= ~data->trig_edge & ~data->double_edge;
   177d0:	430a      	orrs	r2, r1
   177d2:	ea27 0702 	bic.w	r7, r7, r2
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   177d6:	405c      	eors	r4, r3
	uint32_t out = pin_states & level_pins;
   177d8:	ea27 0404 	bic.w	r4, r7, r4
	uint32_t check_pins = level_pins;
   177dc:	463a      	mov	r2, r7
	uint32_t bit = 1U << pin;
   177de:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   177e0:	f04f 0800 	mov.w	r8, #0
	while (check_pins) {
   177e4:	bb82      	cbnz	r2, 17848 <gpiote_event_handler+0x98>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   177e6:	4b35      	ldr	r3, [pc, #212]	; (178bc <gpiote_event_handler+0x10c>)
   177e8:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
   177ec:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   177f0:	4a34      	ldr	r2, [pc, #208]	; (178c4 <gpiote_event_handler+0x114>)
    return p_reg->INTENSET & mask;
   177f2:	4832      	ldr	r0, [pc, #200]	; (178bc <gpiote_event_handler+0x10c>)
   177f4:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   177f6:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   177f8:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
   177fa:	f8d0 1304 	ldr.w	r1, [r0, #772]	; 0x304
   177fe:	fa06 fc03 	lsl.w	ip, r6, r3
   17802:	ea1c 0f01 	tst.w	ip, r1
   17806:	d00c      	beq.n	17822 <gpiote_event_handler+0x72>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   17808:	6811      	ldr	r1, [r2, #0]
   1780a:	b151      	cbz	r1, 17822 <gpiote_event_handler+0x72>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1780c:	f503 71a2 	add.w	r1, r3, #324	; 0x144
   17810:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   17814:	6017      	str	r7, [r2, #0]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   17816:	f3c1 2104 	ubfx	r1, r1, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   1781a:	fa06 f101 	lsl.w	r1, r6, r1
   1781e:	430c      	orrs	r4, r1
   17820:	6811      	ldr	r1, [r2, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   17822:	3301      	adds	r3, #1
   17824:	2b08      	cmp	r3, #8
   17826:	f102 0204 	add.w	r2, r2, #4
   1782a:	d1e6      	bne.n	177fa <gpiote_event_handler+0x4a>
	if (fired_triggers[0]) {
   1782c:	bb1c      	cbnz	r4, 17876 <gpiote_event_handler+0xc6>
	if (port_event) {
   1782e:	b14d      	cbz	r5, 17844 <gpiote_event_handler+0x94>
	uint32_t out = data->pin_int_en;
   17830:	4e23      	ldr	r6, [pc, #140]	; (178c0 <gpiote_event_handler+0x110>)
	out &= ~data->trig_edge & ~data->double_edge;
   17832:	e9d6 3105 	ldrd	r3, r1, [r6, #20]
	uint32_t out = data->pin_int_en;
   17836:	68f2      	ldr	r2, [r6, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   17838:	430b      	orrs	r3, r1
   1783a:	ea22 0203 	bic.w	r2, r2, r3
	uint32_t bit = 1U << pin;
   1783e:	2401      	movs	r4, #1
	uint32_t pin = 0U;
   17840:	2500      	movs	r5, #0
	while (level_pins) {
   17842:	bb4a      	cbnz	r2, 17898 <gpiote_event_handler+0xe8>
}
   17844:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (check_pins & bit) {
   17848:	4216      	tst	r6, r2
   1784a:	d00e      	beq.n	1786a <gpiote_event_handler+0xba>
			if (!(level_pins & bit)) {
   1784c:	423e      	tst	r6, r7
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1784e:	f008 001f 	and.w	r0, r8, #31
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   17852:	bf08      	it	eq
   17854:	f500 73e0 	addeq.w	r3, r0, #448	; 0x1c0
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   17858:	f04f 0100 	mov.w	r1, #0
   1785c:	bf08      	it	eq
   1785e:	f859 3023 	ldreq.w	r3, [r9, r3, lsl #2]
   17862:	f008 f9b5 	bl	1fbd0 <nrf_gpio_cfg_sense_set>
			check_pins &= ~bit;
   17866:	ea22 0206 	bic.w	r2, r2, r6
		++pin;
   1786a:	f108 0801 	add.w	r8, r8, #1
		bit <<= 1;
   1786e:	0076      	lsls	r6, r6, #1
   17870:	e7b8      	b.n	177e4 <gpiote_event_handler+0x34>
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   17872:	462c      	mov	r4, r5
   17874:	e7bc      	b.n	177f0 <gpiote_event_handler+0x40>
	gpio_fire_callbacks(list, port, pins);
   17876:	4b12      	ldr	r3, [pc, #72]	; (178c0 <gpiote_event_handler+0x110>)
   17878:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1787a:	2900      	cmp	r1, #0
   1787c:	d0d7      	beq.n	1782e <gpiote_event_handler+0x7e>
   1787e:	680e      	ldr	r6, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   17880:	4f11      	ldr	r7, [pc, #68]	; (178c8 <gpiote_event_handler+0x118>)
		if (cb->pin_mask & pins) {
   17882:	688a      	ldr	r2, [r1, #8]
   17884:	4022      	ands	r2, r4
   17886:	d002      	beq.n	1788e <gpiote_event_handler+0xde>
			cb->handler(port, cb, cb->pin_mask & pins);
   17888:	684b      	ldr	r3, [r1, #4]
   1788a:	4638      	mov	r0, r7
   1788c:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1788e:	2e00      	cmp	r6, #0
   17890:	d0cd      	beq.n	1782e <gpiote_event_handler+0x7e>
   17892:	4631      	mov	r1, r6
   17894:	6836      	ldr	r6, [r6, #0]
   17896:	e7f4      	b.n	17882 <gpiote_event_handler+0xd2>
		if (level_pins & bit) {
   17898:	4214      	tst	r4, r2
   1789a:	d00c      	beq.n	178b6 <gpiote_event_handler+0x106>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1789c:	6931      	ldr	r1, [r6, #16]
   1789e:	40e9      	lsrs	r1, r5
   178a0:	f001 0101 	and.w	r1, r1, #1
   178a4:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   178a8:	b2c9      	uxtb	r1, r1
   178aa:	f005 001f 	and.w	r0, r5, #31
   178ae:	f008 f98f 	bl	1fbd0 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   178b2:	ea22 0204 	bic.w	r2, r2, r4
		++pin;
   178b6:	3501      	adds	r5, #1
		bit <<= 1;
   178b8:	0064      	lsls	r4, r4, #1
   178ba:	e7c2      	b.n	17842 <gpiote_event_handler+0x92>
   178bc:	40006000 	.word	0x40006000
   178c0:	2000270c 	.word	0x2000270c
   178c4:	40006100 	.word	0x40006100
   178c8:	00020bc0 	.word	0x00020bc0

000178cc <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   178cc:	4b02      	ldr	r3, [pc, #8]	; (178d8 <flash_nrf_pages_layout+0xc>)
   178ce:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   178d0:	2301      	movs	r3, #1
   178d2:	6013      	str	r3, [r2, #0]
}
   178d4:	4770      	bx	lr
   178d6:	bf00      	nop
   178d8:	2000272c 	.word	0x2000272c

000178dc <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   178dc:	4800      	ldr	r0, [pc, #0]	; (178e0 <flash_nrf_get_parameters+0x4>)
   178de:	4770      	bx	lr
   178e0:	000214ec 	.word	0x000214ec

000178e4 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   178e4:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   178e6:	2201      	movs	r2, #1
   178e8:	4611      	mov	r1, r2
   178ea:	4807      	ldr	r0, [pc, #28]	; (17908 <nrf_flash_init+0x24>)
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   178ec:	4c07      	ldr	r4, [pc, #28]	; (1790c <nrf_flash_init+0x28>)
   178ee:	f008 fd37 	bl	20360 <z_impl_k_sem_init>
	nrf_flash_sync_init();
   178f2:	f001 f90f 	bl	18b14 <nrf_flash_sync_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   178f6:	f008 fb85 	bl	20004 <nrfx_nvmc_flash_page_count_get>
   178fa:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   178fc:	f008 fb7e 	bl	1fffc <nrfx_nvmc_flash_page_size_get>
   17900:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   17902:	2000      	movs	r0, #0
   17904:	bd10      	pop	{r4, pc}
   17906:	bf00      	nop
   17908:	20002734 	.word	0x20002734
   1790c:	2000272c 	.word	0x2000272c

00017910 <flash_nrf_erase>:
{
   17910:	b5f0      	push	{r4, r5, r6, r7, lr}
   17912:	b087      	sub	sp, #28
   17914:	460e      	mov	r6, r1
   17916:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   17918:	f008 fb70 	bl	1fffc <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   1791c:	4629      	mov	r1, r5
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1791e:	4607      	mov	r7, r0
	if (is_regular_addr_valid(addr, size)) {
   17920:	4630      	mov	r0, r6
   17922:	f008 f9b4 	bl	1fc8e <is_regular_addr_valid>
   17926:	b3c8      	cbz	r0, 1799c <flash_nrf_erase+0x8c>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   17928:	fbb6 f3f7 	udiv	r3, r6, r7
   1792c:	fb07 6313 	mls	r3, r7, r3, r6
   17930:	bba3      	cbnz	r3, 1799c <flash_nrf_erase+0x8c>
   17932:	fbb5 f4f7 	udiv	r4, r5, r7
   17936:	fb07 5414 	mls	r4, r7, r4, r5
   1793a:	bb7c      	cbnz	r4, 1799c <flash_nrf_erase+0x8c>
		if (!n_pages) {
   1793c:	42bd      	cmp	r5, r7
   1793e:	d322      	bcc.n	17986 <flash_nrf_erase+0x76>
	return z_impl_k_sem_take(sem, timeout);
   17940:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   17944:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17948:	4816      	ldr	r0, [pc, #88]	; (179a4 <flash_nrf_erase+0x94>)
   1794a:	f001 ff17 	bl	1977c <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   1794e:	f008 fb3b 	bl	1ffc8 <nrf_flash_sync_is_required>
   17952:	ab02      	add	r3, sp, #8
   17954:	4601      	mov	r1, r0

#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE

static int erase_synchronously(uint32_t addr, uint32_t size)
{
	struct flash_context context = {
   17956:	2210      	movs	r2, #16
	if (nrf_flash_sync_is_required()) {
   17958:	b1c0      	cbz	r0, 1798c <flash_nrf_erase+0x7c>
	struct flash_context context = {
   1795a:	4621      	mov	r1, r4
   1795c:	4618      	mov	r0, r3
   1795e:	f005 f9ad 	bl	1ccbc <memset>
   17962:	2201      	movs	r2, #1
   17964:	f88d 2014 	strb.w	r2, [sp, #20]
#if defined(CONFIG_SOC_FLASH_NRF_PARTIAL_ERASE)
		.flash_addr_next = addr
#endif
	};

	struct flash_op_desc flash_op_desc = {
   17968:	4a0f      	ldr	r2, [pc, #60]	; (179a8 <flash_nrf_erase+0x98>)
   1796a:	e9cd 2000 	strd	r2, r0, [sp]
		.handler = erase_op,
		.context = &context
	};

	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   1796e:	480f      	ldr	r0, [pc, #60]	; (179ac <flash_nrf_erase+0x9c>)
	struct flash_context context = {
   17970:	e9cd 6503 	strd	r6, r5, [sp, #12]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   17974:	f001 f8d6 	bl	18b24 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   17978:	4668      	mov	r0, sp
   1797a:	f001 f8d9 	bl	18b30 <nrf_flash_sync_exe>
#if defined(CONFIG_SOC_FLASH_NRF_PARTIAL_ERASE)
		.flash_addr_next = addr
#endif
	};

	return	erase_op(&context);
   1797e:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   17980:	4808      	ldr	r0, [pc, #32]	; (179a4 <flash_nrf_erase+0x94>)
   17982:	f001 fed5 	bl	19730 <z_impl_k_sem_give>
}
   17986:	4620      	mov	r0, r4
   17988:	b007      	add	sp, #28
   1798a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct flash_context context = {
   1798c:	4618      	mov	r0, r3
   1798e:	f005 f995 	bl	1ccbc <memset>
   17992:	e9cd 6503 	strd	r6, r5, [sp, #12]
	return	erase_op(&context);
   17996:	f008 f98d 	bl	1fcb4 <erase_op>
   1799a:	e7f0      	b.n	1797e <flash_nrf_erase+0x6e>
		return -EINVAL;
   1799c:	f06f 0415 	mvn.w	r4, #21
   179a0:	e7f1      	b.n	17986 <flash_nrf_erase+0x76>
   179a2:	bf00      	nop
   179a4:	20002734 	.word	0x20002734
   179a8:	0001fcb5 	.word	0x0001fcb5
   179ac:	00015e64 	.word	0x00015e64

000179b0 <write_op>:
{
   179b0:	b538      	push	{r3, r4, r5, lr}
	if (w_ctx->enable_time_limit) {
   179b2:	7b03      	ldrb	r3, [r0, #12]
{
   179b4:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
   179b6:	b10b      	cbz	r3, 179bc <write_op+0xc>
		nrf_flash_sync_get_timestamp_begin();
   179b8:	f008 fb08 	bl	1ffcc <nrf_flash_sync_get_timestamp_begin>
{
   179bc:	2501      	movs	r5, #1
	while (w_ctx->len >= sizeof(uint32_t)) {
   179be:	68a3      	ldr	r3, [r4, #8]
   179c0:	2b03      	cmp	r3, #3
   179c2:	d806      	bhi.n	179d2 <write_op+0x22>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   179c4:	4a12      	ldr	r2, [pc, #72]	; (17a10 <write_op+0x60>)
   179c6:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   179ca:	07db      	lsls	r3, r3, #31
   179cc:	d5fb      	bpl.n	179c6 <write_op+0x16>
	return FLASH_OP_DONE;
   179ce:	2000      	movs	r0, #0
}
   179d0:	bd38      	pop	{r3, r4, r5, pc}
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   179d2:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   179d4:	6860      	ldr	r0, [r4, #4]
   179d6:	6819      	ldr	r1, [r3, #0]
   179d8:	f001 fb10 	bl	18ffc <nrfx_nvmc_word_write>
	w_ctx->flash_addr += shift;
   179dc:	6863      	ldr	r3, [r4, #4]
   179de:	3304      	adds	r3, #4
   179e0:	6063      	str	r3, [r4, #4]
	w_ctx->data_addr += shift;
   179e2:	6823      	ldr	r3, [r4, #0]
   179e4:	3304      	adds	r3, #4
   179e6:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
   179e8:	68a3      	ldr	r3, [r4, #8]
   179ea:	3b04      	subs	r3, #4
   179ec:	60a3      	str	r3, [r4, #8]
		if (w_ctx->enable_time_limit) {
   179ee:	7b23      	ldrb	r3, [r4, #12]
		i++;
   179f0:	3501      	adds	r5, #1
		if (w_ctx->enable_time_limit) {
   179f2:	2b00      	cmp	r3, #0
   179f4:	d0e3      	beq.n	179be <write_op+0xe>
			if (nrf_flash_sync_check_time_limit(i)) {
   179f6:	4628      	mov	r0, r5
   179f8:	f001 f908 	bl	18c0c <nrf_flash_sync_check_time_limit>
   179fc:	2800      	cmp	r0, #0
   179fe:	d0de      	beq.n	179be <write_op+0xe>
   17a00:	4a03      	ldr	r2, [pc, #12]	; (17a10 <write_op+0x60>)
   17a02:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   17a06:	07d9      	lsls	r1, r3, #31
   17a08:	d5fb      	bpl.n	17a02 <write_op+0x52>
				return FLASH_OP_ONGOING;
   17a0a:	2001      	movs	r0, #1
   17a0c:	e7e0      	b.n	179d0 <write_op+0x20>
   17a0e:	bf00      	nop
   17a10:	4001e000 	.word	0x4001e000

00017a14 <flash_nrf_write>:
{
   17a14:	b570      	push	{r4, r5, r6, lr}
   17a16:	460d      	mov	r5, r1
   17a18:	b086      	sub	sp, #24
	if (is_regular_addr_valid(addr, len)) {
   17a1a:	4619      	mov	r1, r3
   17a1c:	4628      	mov	r0, r5
{
   17a1e:	4616      	mov	r6, r2
   17a20:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   17a22:	f008 f934 	bl	1fc8e <is_regular_addr_valid>
   17a26:	b360      	cbz	r0, 17a82 <flash_nrf_write+0x6e>
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   17a28:	ea45 0304 	orr.w	r3, r5, r4
   17a2c:	079b      	lsls	r3, r3, #30
   17a2e:	d128      	bne.n	17a82 <flash_nrf_write+0x6e>
	if (!len) {
   17a30:	b1fc      	cbz	r4, 17a72 <flash_nrf_write+0x5e>
	return z_impl_k_sem_take(sem, timeout);
   17a32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17a36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   17a3a:	4813      	ldr	r0, [pc, #76]	; (17a88 <flash_nrf_write+0x74>)
   17a3c:	f001 fe9e 	bl	1977c <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   17a40:	f008 fac2 	bl	1ffc8 <nrf_flash_sync_is_required>
   17a44:	4603      	mov	r3, r0
	struct flash_context context = {
   17a46:	e9cd 6502 	strd	r6, r5, [sp, #8]
   17a4a:	a802      	add	r0, sp, #8
   17a4c:	9404      	str	r4, [sp, #16]
	if (nrf_flash_sync_is_required()) {
   17a4e:	b19b      	cbz	r3, 17a78 <flash_nrf_write+0x64>
	struct flash_context context = {
   17a50:	2301      	movs	r3, #1
   17a52:	f88d 3014 	strb.w	r3, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   17a56:	4b0d      	ldr	r3, [pc, #52]	; (17a8c <flash_nrf_write+0x78>)
   17a58:	e9cd 3000 	strd	r3, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_WRITE);
   17a5c:	f641 504c 	movw	r0, #7500	; 0x1d4c
   17a60:	f001 f860 	bl	18b24 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   17a64:	4668      	mov	r0, sp
   17a66:	f001 f863 	bl	18b30 <nrf_flash_sync_exe>
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
		.enable_time_limit = 0 /* disable time limit */
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	};

	return write_op(&context);
   17a6a:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   17a6c:	4806      	ldr	r0, [pc, #24]	; (17a88 <flash_nrf_write+0x74>)
   17a6e:	f001 fe5f 	bl	19730 <z_impl_k_sem_give>
}
   17a72:	4620      	mov	r0, r4
   17a74:	b006      	add	sp, #24
   17a76:	bd70      	pop	{r4, r5, r6, pc}
	struct flash_context context = {
   17a78:	f88d 3014 	strb.w	r3, [sp, #20]
	return write_op(&context);
   17a7c:	f7ff ff98 	bl	179b0 <write_op>
   17a80:	e7f3      	b.n	17a6a <flash_nrf_write+0x56>
		return -EINVAL;
   17a82:	f06f 0415 	mvn.w	r4, #21
   17a86:	e7f4      	b.n	17a72 <flash_nrf_write+0x5e>
   17a88:	20002734 	.word	0x20002734
   17a8c:	000179b1 	.word	0x000179b1

00017a90 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   17a90:	b570      	push	{r4, r5, r6, lr}
		break;
	default:
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
   17a92:	794b      	ldrb	r3, [r1, #5]
   17a94:	2b01      	cmp	r3, #1
   17a96:	d124      	bne.n	17ae2 <uarte_nrfx_configure+0x52>
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   17a98:	798b      	ldrb	r3, [r1, #6]
   17a9a:	2b03      	cmp	r3, #3
   17a9c:	d121      	bne.n	17ae2 <uarte_nrfx_configure+0x52>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   17a9e:	79cc      	ldrb	r4, [r1, #7]
   17aa0:	b12c      	cbz	r4, 17aae <uarte_nrfx_configure+0x1e>
   17aa2:	2c01      	cmp	r4, #1
   17aa4:	d11d      	bne.n	17ae2 <uarte_nrfx_configure+0x52>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (IS_HWFC_PINS_USED(get_dev_config(dev)->flags)) {
   17aa6:	6843      	ldr	r3, [r0, #4]
   17aa8:	685b      	ldr	r3, [r3, #4]
   17aaa:	079b      	lsls	r3, r3, #30
   17aac:	d019      	beq.n	17ae2 <uarte_nrfx_configure+0x52>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   17aae:	790a      	ldrb	r2, [r1, #4]
   17ab0:	b112      	cbz	r2, 17ab8 <uarte_nrfx_configure+0x28>
   17ab2:	2a02      	cmp	r2, #2
   17ab4:	d115      	bne.n	17ae2 <uarte_nrfx_configure+0x52>
   17ab6:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   17ab8:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   17aba:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   17abc:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   17ac0:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   17ac2:	d062      	beq.n	17b8a <uarte_nrfx_configure+0xfa>
   17ac4:	d82b      	bhi.n	17b1e <uarte_nrfx_configure+0x8e>
   17ac6:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   17aca:	d061      	beq.n	17b90 <uarte_nrfx_configure+0x100>
   17acc:	d814      	bhi.n	17af8 <uarte_nrfx_configure+0x68>
   17ace:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   17ad2:	d05f      	beq.n	17b94 <uarte_nrfx_configure+0x104>
   17ad4:	d808      	bhi.n	17ae8 <uarte_nrfx_configure+0x58>
   17ad6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   17ada:	d05e      	beq.n	17b9a <uarte_nrfx_configure+0x10a>
   17adc:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   17ae0:	d05e      	beq.n	17ba0 <uarte_nrfx_configure+0x110>
   17ae2:	f06f 0085 	mvn.w	r0, #133	; 0x85
   17ae6:	e04f      	b.n	17b88 <uarte_nrfx_configure+0xf8>
   17ae8:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   17aec:	d05b      	beq.n	17ba6 <uarte_nrfx_configure+0x116>
   17aee:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   17af2:	d1f6      	bne.n	17ae2 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   17af4:	4b36      	ldr	r3, [pc, #216]	; (17bd0 <uarte_nrfx_configure+0x140>)
   17af6:	e03c      	b.n	17b72 <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
   17af8:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   17afc:	d056      	beq.n	17bac <uarte_nrfx_configure+0x11c>
   17afe:	d807      	bhi.n	17b10 <uarte_nrfx_configure+0x80>
   17b00:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   17b04:	d054      	beq.n	17bb0 <uarte_nrfx_configure+0x120>
   17b06:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   17b0a:	d1ea      	bne.n	17ae2 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   17b0c:	4b31      	ldr	r3, [pc, #196]	; (17bd4 <uarte_nrfx_configure+0x144>)
   17b0e:	e030      	b.n	17b72 <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
   17b10:	f647 2612 	movw	r6, #31250	; 0x7a12
   17b14:	42b3      	cmp	r3, r6
   17b16:	d1e4      	bne.n	17ae2 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   17b18:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   17b1c:	e029      	b.n	17b72 <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
   17b1e:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   17b22:	d047      	beq.n	17bb4 <uarte_nrfx_configure+0x124>
   17b24:	d813      	bhi.n	17b4e <uarte_nrfx_configure+0xbe>
   17b26:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   17b2a:	d046      	beq.n	17bba <uarte_nrfx_configure+0x12a>
   17b2c:	d809      	bhi.n	17b42 <uarte_nrfx_configure+0xb2>
   17b2e:	f64d 26c0 	movw	r6, #56000	; 0xdac0
   17b32:	42b3      	cmp	r3, r6
   17b34:	d043      	beq.n	17bbe <uarte_nrfx_configure+0x12e>
   17b36:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   17b3a:	d1d2      	bne.n	17ae2 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   17b3c:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   17b40:	e017      	b.n	17b72 <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
   17b42:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   17b46:	d1cc      	bne.n	17ae2 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   17b48:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   17b4c:	e011      	b.n	17b72 <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
   17b4e:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   17b52:	d037      	beq.n	17bc4 <uarte_nrfx_configure+0x134>
   17b54:	d808      	bhi.n	17b68 <uarte_nrfx_configure+0xd8>
   17b56:	4e20      	ldr	r6, [pc, #128]	; (17bd8 <uarte_nrfx_configure+0x148>)
   17b58:	42b3      	cmp	r3, r6
   17b5a:	d036      	beq.n	17bca <uarte_nrfx_configure+0x13a>
   17b5c:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   17b60:	d1bf      	bne.n	17ae2 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   17b62:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   17b66:	e004      	b.n	17b72 <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
   17b68:	4e1c      	ldr	r6, [pc, #112]	; (17bdc <uarte_nrfx_configure+0x14c>)
   17b6a:	42b3      	cmp	r3, r6
   17b6c:	d1b9      	bne.n	17ae2 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   17b6e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   17b72:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   17b76:	6903      	ldr	r3, [r0, #16]
   17b78:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
   17b7a:	4322      	orrs	r2, r4
   17b7c:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   17b7e:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   17b82:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   17b86:	2000      	movs	r0, #0
}
   17b88:	bd70      	pop	{r4, r5, r6, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   17b8a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   17b8e:	e7f0      	b.n	17b72 <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   17b90:	4b13      	ldr	r3, [pc, #76]	; (17be0 <uarte_nrfx_configure+0x150>)
   17b92:	e7ee      	b.n	17b72 <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   17b94:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   17b98:	e7eb      	b.n	17b72 <uarte_nrfx_configure+0xe2>
		nrf_baudrate = 0x00014000;
   17b9a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   17b9e:	e7e8      	b.n	17b72 <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
   17ba0:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   17ba4:	e7e5      	b.n	17b72 <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   17ba6:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   17baa:	e7e2      	b.n	17b72 <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   17bac:	4b0d      	ldr	r3, [pc, #52]	; (17be4 <uarte_nrfx_configure+0x154>)
   17bae:	e7e0      	b.n	17b72 <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   17bb0:	4b0d      	ldr	r3, [pc, #52]	; (17be8 <uarte_nrfx_configure+0x158>)
   17bb2:	e7de      	b.n	17b72 <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   17bb4:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   17bb8:	e7db      	b.n	17b72 <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   17bba:	4b0c      	ldr	r3, [pc, #48]	; (17bec <uarte_nrfx_configure+0x15c>)
   17bbc:	e7d9      	b.n	17b72 <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   17bbe:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   17bc2:	e7d6      	b.n	17b72 <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   17bc4:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   17bc8:	e7d3      	b.n	17b72 <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   17bca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   17bce:	e7d0      	b.n	17b72 <uarte_nrfx_configure+0xe2>
   17bd0:	0013b000 	.word	0x0013b000
   17bd4:	004ea000 	.word	0x004ea000
   17bd8:	0003d090 	.word	0x0003d090
   17bdc:	000f4240 	.word	0x000f4240
   17be0:	00275000 	.word	0x00275000
   17be4:	0075c000 	.word	0x0075c000
   17be8:	003af000 	.word	0x003af000
   17bec:	013a9000 	.word	0x013a9000

00017bf0 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   17bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return dev->data;
   17bf2:	6906      	ldr	r6, [r0, #16]
{
   17bf4:	4605      	mov	r5, r0
   17bf6:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   17bf8:	f008 fac4 	bl	20184 <k_is_in_isr>
   17bfc:	b910      	cbnz	r0, 17c04 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
   17bfe:	4b2c      	ldr	r3, [pc, #176]	; (17cb0 <uarte_nrfx_poll_out+0xc0>)
	int key;

	if (isr_mode) {
   17c00:	781b      	ldrb	r3, [r3, #0]
   17c02:	b983      	cbnz	r3, 17c26 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   17c04:	f04f 0340 	mov.w	r3, #64	; 0x40
   17c08:	f3ef 8411 	mrs	r4, BASEPRI
   17c0c:	f383 8811 	msr	BASEPRI, r3
   17c10:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   17c14:	6868      	ldr	r0, [r5, #4]
   17c16:	f008 f911 	bl	1fe3c <is_tx_ready.isra.0>
   17c1a:	bb28      	cbnz	r0, 17c68 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
   17c1c:	f384 8811 	msr	BASEPRI, r4
   17c20:	f3bf 8f6f 	isb	sy
}
   17c24:	e7ee      	b.n	17c04 <uarte_nrfx_poll_out+0x14>
{
   17c26:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   17c28:	6868      	ldr	r0, [r5, #4]
   17c2a:	f008 f907 	bl	1fe3c <is_tx_ready.isra.0>
   17c2e:	b970      	cbnz	r0, 17c4e <uarte_nrfx_poll_out+0x5e>
   17c30:	2001      	movs	r0, #1
   17c32:	f008 f9db 	bl	1ffec <nrfx_busy_wait>
   17c36:	3c01      	subs	r4, #1
   17c38:	d1f6      	bne.n	17c28 <uarte_nrfx_poll_out+0x38>
	return z_impl_k_sleep(timeout);
   17c3a:	2100      	movs	r1, #0
   17c3c:	2021      	movs	r0, #33	; 0x21
   17c3e:	f002 fa7d 	bl	1a13c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   17c42:	e7f0      	b.n	17c26 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   17c44:	f384 8811 	msr	BASEPRI, r4
   17c48:	f3bf 8f6f 	isb	sy
}
   17c4c:	e7f5      	b.n	17c3a <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
   17c4e:	f04f 0340 	mov.w	r3, #64	; 0x40
   17c52:	f3ef 8411 	mrs	r4, BASEPRI
   17c56:	f383 8811 	msr	BASEPRI, r3
   17c5a:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   17c5e:	6868      	ldr	r0, [r5, #4]
   17c60:	f008 f8ec 	bl	1fe3c <is_tx_ready.isra.0>
   17c64:	2800      	cmp	r0, #0
   17c66:	d0ed      	beq.n	17c44 <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
   17c68:	f806 7f10 	strb.w	r7, [r6, #16]!
	tx_start(dev, &data->char_out, 1);
   17c6c:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
   17c6e:	680b      	ldr	r3, [r1, #0]
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
   17c70:	2201      	movs	r2, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   17c72:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   17c76:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17c7a:	2200      	movs	r2, #0
   17c7c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   17c80:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   17c84:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   17c88:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   17c8c:	684a      	ldr	r2, [r1, #4]
   17c8e:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   17c90:	bf41      	itttt	mi
   17c92:	2208      	movmi	r2, #8
   17c94:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
   17c98:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
   17c9c:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   17ca0:	2201      	movs	r2, #1
   17ca2:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
   17ca4:	f384 8811 	msr	BASEPRI, r4
   17ca8:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   17cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17cae:	bf00      	nop
   17cb0:	200036fe 	.word	0x200036fe

00017cb4 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   17cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17cb6:	2200      	movs	r2, #0
   17cb8:	4605      	mov	r5, r0
   17cba:	2101      	movs	r1, #1
   17cbc:	2002      	movs	r0, #2
   17cbe:	f7f9 ffb1 	bl	11c24 <z_arm_irq_priority_set>
   17cc2:	2002      	movs	r0, #2
   17cc4:	f7f9 ff7c 	bl	11bc0 <arch_irq_enable>
	return config->uarte_regs;
   17cc8:	686b      	ldr	r3, [r5, #4]
	return dev->data;
   17cca:	692e      	ldr	r6, [r5, #16]
	return config->uarte_regs;
   17ccc:	681c      	ldr	r4, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   17cce:	2300      	movs	r3, #0
   17cd0:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	data->dev = dev;
   17cd4:	4631      	mov	r1, r6
    p_reg->OUTSET = set_mask;
   17cd6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   17cda:	2240      	movs	r2, #64	; 0x40
   17cdc:	f841 5b04 	str.w	r5, [r1], #4
    reg->PIN_CNF[pin_number] = cnf;
   17ce0:	200c      	movs	r0, #12
    p_reg->OUTSET = set_mask;
   17ce2:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    p_reg->PSEL.TXD = pseltxd;
   17ce6:	2706      	movs	r7, #6
    reg->PIN_CNF[pin_number] = cnf;
   17ce8:	2203      	movs	r2, #3
   17cea:	f8c3 2718 	str.w	r2, [r3, #1816]	; 0x718
   17cee:	f8c3 0720 	str.w	r0, [r3, #1824]	; 0x720
   17cf2:	f8c4 750c 	str.w	r7, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   17cf6:	2708      	movs	r7, #8
   17cf8:	f8c4 7514 	str.w	r7, [r4, #1300]	; 0x514
   17cfc:	f8c3 071c 	str.w	r0, [r3, #1820]	; 0x71c
    p_reg->OUTSET = set_mask;
   17d00:	2020      	movs	r0, #32
   17d02:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
   17d06:	f8c3 2714 	str.w	r2, [r3, #1812]	; 0x714
    p_reg->PSEL.RTS = pselrts;
   17d0a:	2305      	movs	r3, #5
   17d0c:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   17d10:	2307      	movs	r3, #7
   17d12:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   17d16:	4628      	mov	r0, r5
   17d18:	f7ff feba 	bl	17a90 <uarte_nrfx_configure>
	if (err) {
   17d1c:	4607      	mov	r7, r0
   17d1e:	2800      	cmp	r0, #0
   17d20:	d144      	bne.n	17dac <uarte_0_init+0xf8>
	    get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   17d22:	686b      	ldr	r3, [r5, #4]
   17d24:	685b      	ldr	r3, [r3, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   17d26:	0719      	lsls	r1, r3, #28
   17d28:	d519      	bpl.n	17d5e <uarte_0_init+0xaa>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   17d2a:	f106 0012 	add.w	r0, r6, #18
   17d2e:	f001 f973 	bl	19018 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   17d32:	4b21      	ldr	r3, [pc, #132]	; (17db8 <uarte_0_init+0x104>)
   17d34:	4298      	cmp	r0, r3
   17d36:	d13b      	bne.n	17db0 <uarte_0_init+0xfc>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   17d38:	7cb0      	ldrb	r0, [r6, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   17d3a:	00c3      	lsls	r3, r0, #3
   17d3c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   17d40:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   17d44:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   17d48:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   17d4c:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   17d50:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
   17d54:	4a19      	ldr	r2, [pc, #100]	; (17dbc <uarte_0_init+0x108>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   17d56:	2301      	movs	r3, #1
   17d58:	4083      	lsls	r3, r0
   17d5a:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   17d5e:	2308      	movs	r3, #8
   17d60:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17d64:	2300      	movs	r3, #0
   17d66:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   17d6a:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   17d6e:	f106 0311 	add.w	r3, r6, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   17d72:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   17d76:	2301      	movs	r3, #1
   17d78:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   17d7c:	6023      	str	r3, [r4, #0]
	if (!(get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   17d7e:	686b      	ldr	r3, [r5, #4]
   17d80:	685b      	ldr	r3, [r3, #4]
   17d82:	071a      	lsls	r2, r3, #28
    p_reg->INTENSET = mask;
   17d84:	bf5c      	itt	pl
   17d86:	f44f 7280 	movpl.w	r2, #256	; 0x100
   17d8a:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   17d8e:	06db      	lsls	r3, r3, #27
   17d90:	bf44      	itt	mi
   17d92:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   17d96:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   17d9a:	3610      	adds	r6, #16
    p_reg->TXD.MAXCNT = length;
   17d9c:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   17d9e:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   17da2:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   17da6:	2301      	movs	r3, #1
   17da8:	60a3      	str	r3, [r4, #8]
   17daa:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   17dac:	4638      	mov	r0, r7
   17dae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EIO;
   17db0:	f06f 0704 	mvn.w	r7, #4
UART_NRF_UARTE_DEVICE(0);
   17db4:	e7fa      	b.n	17dac <uarte_0_init+0xf8>
   17db6:	bf00      	nop
   17db8:	0bad0000 	.word	0x0bad0000
   17dbc:	4001f000 	.word	0x4001f000

00017dc0 <random_byte_get>:
	__asm__ volatile(
   17dc0:	f04f 0340 	mov.w	r3, #64	; 0x40
   17dc4:	f3ef 8211 	mrs	r2, BASEPRI
   17dc8:	f383 8811 	msr	BASEPRI, r3
   17dcc:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   17dd0:	4b09      	ldr	r3, [pc, #36]	; (17df8 <random_byte_get+0x38>)
   17dd2:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   17dd6:	b161      	cbz	r1, 17df2 <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   17dd8:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   17dda:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   17dde:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   17de2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   17de6:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   17de8:	f382 8811 	msr	BASEPRI, r2
   17dec:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   17df0:	4770      	bx	lr
	int retval = -EAGAIN;
   17df2:	f06f 000a 	mvn.w	r0, #10
   17df6:	e7f7      	b.n	17de8 <random_byte_get+0x28>
   17df8:	4000d000 	.word	0x4000d000

00017dfc <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   17dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
   17dfe:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   17e00:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   17e02:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   17e04:	f04f 0040 	mov.w	r0, #64	; 0x40
   17e08:	f3ef 8e11 	mrs	lr, BASEPRI
   17e0c:	f380 8811 	msr	BASEPRI, r0
   17e10:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   17e14:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   17e16:	f893 c001 	ldrb.w	ip, [r3, #1]

	available = (last - first) & mask;
   17e1a:	1ba4      	subs	r4, r4, r6
   17e1c:	403c      	ands	r4, r7
	if (available < len) {
   17e1e:	42a2      	cmp	r2, r4
		len = available;
   17e20:	bf88      	it	hi
   17e22:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   17e24:	18b0      	adds	r0, r6, r2
   17e26:	4038      	ands	r0, r7
	first = rngp->first_alloc;
   17e28:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   17e2a:	7018      	strb	r0, [r3, #0]
	__asm__ volatile(
   17e2c:	f38e 8811 	msr	BASEPRI, lr
   17e30:	f3bf 8f6f 	isb	sy
   17e34:	1888      	adds	r0, r1, r2
	uint8_t *dst   = buf;
   17e36:	460a      	mov	r2, r1
	irq_unlock(key);

	while (likely(len--)) {
   17e38:	4290      	cmp	r0, r2
   17e3a:	d119      	bne.n	17e70 <rng_pool_get+0x74>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   17e3c:	4566      	cmp	r6, ip
   17e3e:	d10d      	bne.n	17e5c <rng_pool_get+0x60>
	__asm__ volatile(
   17e40:	f04f 0540 	mov.w	r5, #64	; 0x40
   17e44:	f3ef 8011 	mrs	r0, BASEPRI
   17e48:	f385 8811 	msr	BASEPRI, r5
   17e4c:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   17e50:	781d      	ldrb	r5, [r3, #0]
   17e52:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   17e54:	f380 8811 	msr	BASEPRI, r0
   17e58:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   17e5c:	1a52      	subs	r2, r2, r1
	available = available - len;
	if (available <= rngp->threshold) {
   17e5e:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   17e60:	b290      	uxth	r0, r2
	available = available - len;
   17e62:	1a22      	subs	r2, r4, r0
	if (available <= rngp->threshold) {
   17e64:	4293      	cmp	r3, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   17e66:	bf22      	ittt	cs
   17e68:	4b06      	ldrcs	r3, [pc, #24]	; (17e84 <rng_pool_get+0x88>)
   17e6a:	2201      	movcs	r2, #1
   17e6c:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   17e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   17e70:	eb03 0e05 	add.w	lr, r3, r5
		first = (first + 1) & mask;
   17e74:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   17e76:	f89e e005 	ldrb.w	lr, [lr, #5]
   17e7a:	f802 eb01 	strb.w	lr, [r2], #1
		first = (first + 1) & mask;
   17e7e:	403d      	ands	r5, r7
   17e80:	e7da      	b.n	17e38 <rng_pool_get+0x3c>
   17e82:	bf00      	nop
   17e84:	4000d000 	.word	0x4000d000

00017e88 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   17e88:	43db      	mvns	r3, r3
{
   17e8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   17e8e:	f013 0501 	ands.w	r5, r3, #1
{
   17e92:	460e      	mov	r6, r1
   17e94:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   17e96:	d004      	beq.n	17ea2 <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   17e98:	4821      	ldr	r0, [pc, #132]	; (17f20 <entropy_nrf5_get_entropy_isr+0x98>)
   17e9a:	f7ff ffaf 	bl	17dfc <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   17e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   17ea2:	b3a2      	cbz	r2, 17f0e <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   17ea4:	f04f 0340 	mov.w	r3, #64	; 0x40
   17ea8:	f3ef 8811 	mrs	r8, BASEPRI
   17eac:	f383 8811 	msr	BASEPRI, r3
   17eb0:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   17eb4:	200d      	movs	r0, #13
   17eb6:	f7f9 fea7 	bl	11c08 <arch_irq_is_enabled>
   17eba:	4607      	mov	r7, r0
		irq_disable(IRQN);
   17ebc:	200d      	movs	r0, #13
   17ebe:	f7f9 fe8f 	bl	11be0 <arch_irq_disable>
	__asm__ volatile(
   17ec2:	f388 8811 	msr	BASEPRI, r8
   17ec6:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   17eca:	f8df 8058 	ldr.w	r8, [pc, #88]	; 17f24 <entropy_nrf5_get_entropy_isr+0x9c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   17ece:	f8df 9058 	ldr.w	r9, [pc, #88]	; 17f28 <entropy_nrf5_get_entropy_isr+0xa0>
   17ed2:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
   17ed6:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
   17eda:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   17ede:	2301      	movs	r3, #1
   17ee0:	f8c8 3000 	str.w	r3, [r8]
   17ee4:	4625      	mov	r5, r4
   17ee6:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   17eea:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   17eee:	b183      	cbz	r3, 17f12 <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   17ef0:	f7ff ff66 	bl	17dc0 <random_byte_get>
			if (byte < 0) {
   17ef4:	1e03      	subs	r3, r0, #0
   17ef6:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
   17efa:	dbf6      	blt.n	17eea <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
   17efc:	3d01      	subs	r5, #1
   17efe:	b2ad      	uxth	r5, r5
   17f00:	5573      	strb	r3, [r6, r5]
		} while (len);
   17f02:	2d00      	cmp	r5, #0
   17f04:	d1f1      	bne.n	17eea <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   17f06:	b117      	cbz	r7, 17f0e <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   17f08:	200d      	movs	r0, #13
   17f0a:	f7f9 fe59 	bl	11bc0 <arch_irq_enable>
	return cnt;
   17f0e:	4620      	mov	r0, r4
   17f10:	e7c5      	b.n	17e9e <entropy_nrf5_get_entropy_isr+0x16>
   17f12:	f3bf 8f4f 	dsb	sy
				__WFE();
   17f16:	bf20      	wfe
				__SEV();
   17f18:	bf40      	sev
				__WFE();
   17f1a:	bf20      	wfe
   17f1c:	e7e5      	b.n	17eea <entropy_nrf5_get_entropy_isr+0x62>
   17f1e:	bf00      	nop
   17f20:	20002784 	.word	0x20002784
   17f24:	4000d000 	.word	0x4000d000
   17f28:	e000e100 	.word	0xe000e100

00017f2c <entropy_nrf5_get_entropy>:
{
   17f2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   17f30:	4f13      	ldr	r7, [pc, #76]	; (17f80 <entropy_nrf5_get_entropy+0x54>)
   17f32:	460d      	mov	r5, r1
   17f34:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   17f36:	f107 0845 	add.w	r8, r7, #69	; 0x45
   17f3a:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   17f3e:	b914      	cbnz	r4, 17f46 <entropy_nrf5_get_entropy+0x1a>
}
   17f40:	4620      	mov	r0, r4
   17f42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   17f46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17f4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   17f4e:	4638      	mov	r0, r7
   17f50:	f001 fc14 	bl	1977c <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   17f54:	4622      	mov	r2, r4
   17f56:	4629      	mov	r1, r5
   17f58:	4640      	mov	r0, r8
   17f5a:	f7ff ff4f 	bl	17dfc <rng_pool_get>
   17f5e:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   17f60:	4638      	mov	r0, r7
   17f62:	f001 fbe5 	bl	19730 <z_impl_k_sem_give>
		if (bytes == 0U) {
   17f66:	b93e      	cbnz	r6, 17f78 <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   17f68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   17f6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17f70:	4648      	mov	r0, r9
   17f72:	f001 fc03 	bl	1977c <z_impl_k_sem_take>
			continue;
   17f76:	e7e2      	b.n	17f3e <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   17f78:	1ba4      	subs	r4, r4, r6
   17f7a:	b2a4      	uxth	r4, r4
		buf += bytes;
   17f7c:	4435      	add	r5, r6
   17f7e:	e7de      	b.n	17f3e <entropy_nrf5_get_entropy+0x12>
   17f80:	20002754 	.word	0x20002754

00017f84 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   17f84:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   17f86:	4c19      	ldr	r4, [pc, #100]	; (17fec <entropy_nrf5_init+0x68>)
   17f88:	2201      	movs	r2, #1
   17f8a:	4611      	mov	r1, r2
   17f8c:	4620      	mov	r0, r4
   17f8e:	f008 f9e7 	bl	20360 <z_impl_k_sem_init>
   17f92:	2201      	movs	r2, #1
   17f94:	2100      	movs	r1, #0
   17f96:	f104 0018 	add.w	r0, r4, #24
   17f9a:	f008 f9e1 	bl	20360 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   17f9e:	f240 4307 	movw	r3, #1031	; 0x407
   17fa2:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   17fa6:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   17faa:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   17fac:	230c      	movs	r3, #12
   17fae:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   17fb2:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   17fb4:	4b0e      	ldr	r3, [pc, #56]	; (17ff0 <entropy_nrf5_init+0x6c>)
   17fb6:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   17fba:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   17fbe:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   17fc2:	f022 0201 	bic.w	r2, r2, #1
   17fc6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   17fca:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   17fcc:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   17fd0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   17fd4:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   17fd8:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   17fda:	6019      	str	r1, [r3, #0]
   17fdc:	200d      	movs	r0, #13
   17fde:	f7f9 fe21 	bl	11c24 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   17fe2:	200d      	movs	r0, #13
   17fe4:	f7f9 fdec 	bl	11bc0 <arch_irq_enable>

	return 0;
}
   17fe8:	4628      	mov	r0, r5
   17fea:	bd38      	pop	{r3, r4, r5, pc}
   17fec:	20002754 	.word	0x20002754
   17ff0:	4000d000 	.word	0x4000d000

00017ff4 <isr>:
{
   17ff4:	b510      	push	{r4, lr}
	byte = random_byte_get();
   17ff6:	f7ff fee3 	bl	17dc0 <random_byte_get>
	if (byte < 0) {
   17ffa:	2800      	cmp	r0, #0
   17ffc:	db20      	blt.n	18040 <isr+0x4c>
	uint8_t last  = rngp->last;
   17ffe:	4b17      	ldr	r3, [pc, #92]	; (1805c <isr+0x68>)
   18000:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   18004:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   18008:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   1800c:	1a51      	subs	r1, r2, r1
   1800e:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   18012:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   18014:	d10d      	bne.n	18032 <isr+0x3e>
	uint8_t last  = rngp->last;
   18016:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   1801a:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   1801e:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   18022:	1a51      	subs	r1, r2, r1
   18024:	ea34 0101 	bics.w	r1, r4, r1
   18028:	d10b      	bne.n	18042 <isr+0x4e>
   1802a:	4b0d      	ldr	r3, [pc, #52]	; (18060 <isr+0x6c>)
   1802c:	2201      	movs	r2, #1
   1802e:	605a      	str	r2, [r3, #4]
}
   18030:	e00e      	b.n	18050 <isr+0x5c>
	rngp->buffer[last] = byte;
   18032:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   18034:	3201      	adds	r2, #1
   18036:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   18038:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   1803c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   18040:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   18042:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   18044:	3201      	adds	r2, #1
   18046:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   18048:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   1804c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   18050:	4804      	ldr	r0, [pc, #16]	; (18064 <isr+0x70>)
}
   18052:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   18056:	f001 bb6b 	b.w	19730 <z_impl_k_sem_give>
   1805a:	bf00      	nop
   1805c:	20002754 	.word	0x20002754
   18060:	4000d000 	.word	0x4000d000
   18064:	2000276c 	.word	0x2000276c

00018068 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   18068:	4602      	mov	r2, r0
   1806a:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   1806c:	4801      	ldr	r0, [pc, #4]	; (18074 <multithreading_lock_acquire+0xc>)
   1806e:	f001 ba71 	b.w	19554 <z_impl_k_mutex_lock>
   18072:	bf00      	nop
   18074:	200006b4 	.word	0x200006b4

00018078 <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
   18078:	4801      	ldr	r0, [pc, #4]	; (18080 <multithreading_lock_release+0x8>)
   1807a:	f001 bae3 	b.w	19644 <z_impl_k_mutex_unlock>
   1807e:	bf00      	nop
   18080:	200006b4 	.word	0x200006b4

00018084 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   18084:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   18086:	4804      	ldr	r0, [pc, #16]	; (18098 <hci_driver_init+0x14>)
   18088:	f7fb f8d8 	bl	1323c <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
	return err;
}
   1808c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = sdc_init(sdc_assertion_handler);
   18090:	4802      	ldr	r0, [pc, #8]	; (1809c <hci_driver_init+0x18>)
   18092:	f7eb bded 	b.w	3c70 <sdc_init>
   18096:	bf00      	nop
   18098:	00021518 	.word	0x00021518
   1809c:	0001fed9 	.word	0x0001fed9

000180a0 <rand_prio_low_vector_get>:
{
   180a0:	b538      	push	{r3, r4, r5, lr}
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   180a2:	4b08      	ldr	r3, [pc, #32]	; (180c4 <rand_prio_low_vector_get+0x24>)
{
   180a4:	4604      	mov	r4, r0
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   180a6:	6818      	ldr	r0, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   180a8:	6883      	ldr	r3, [r0, #8]
   180aa:	685d      	ldr	r5, [r3, #4]
   180ac:	460a      	mov	r2, r1
   180ae:	b135      	cbz	r5, 180be <rand_prio_low_vector_get+0x1e>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   180b0:	2300      	movs	r3, #0
   180b2:	4621      	mov	r1, r4
   180b4:	47a8      	blx	r5
	return ret >= 0 ? ret : 0;
   180b6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   180ba:	b2c0      	uxtb	r0, r0
   180bc:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   180be:	f06f 0085 	mvn.w	r0, #133	; 0x85
   180c2:	e7f8      	b.n	180b6 <rand_prio_low_vector_get+0x16>
   180c4:	200027a8 	.word	0x200027a8

000180c8 <hci_driver_open>:
{
   180c8:	b570      	push	{r4, r5, r6, lr}
   180ca:	b090      	sub	sp, #64	; 0x40
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   180cc:	2200      	movs	r2, #0
   180ce:	2300      	movs	r3, #0
   180d0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   180d4:	2300      	movs	r3, #0
   180d6:	f06f 0209 	mvn.w	r2, #9
   180da:	e9cd 2303 	strd	r2, r3, [sp, #12]
   180de:	e9cd 3301 	strd	r3, r3, [sp, #4]
   180e2:	9300      	str	r3, [sp, #0]
   180e4:	4941      	ldr	r1, [pc, #260]	; (181ec <hci_driver_open+0x124>)
   180e6:	4b42      	ldr	r3, [pc, #264]	; (181f0 <hci_driver_open+0x128>)
   180e8:	4842      	ldr	r0, [pc, #264]	; (181f4 <hci_driver_open+0x12c>)
   180ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
   180ee:	f001 f993 	bl	19418 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   180f2:	4941      	ldr	r1, [pc, #260]	; (181f8 <hci_driver_open+0x130>)
   180f4:	483f      	ldr	r0, [pc, #252]	; (181f4 <hci_driver_open+0x12c>)
   180f6:	f008 f84b 	bl	20190 <z_impl_k_thread_name_set>
	sdc_build_revision_get(build_revision);
   180fa:	a80b      	add	r0, sp, #44	; 0x2c
   180fc:	f7eb fd3a 	bl	3b74 <sdc_build_revision_get>
			err = sdc_support_adv();
   18100:	f7eb fe34 	bl	3d6c <sdc_support_adv>
			if (err) {
   18104:	b110      	cbz	r0, 1810c <hci_driver_open+0x44>
		return -err;
   18106:	2086      	movs	r0, #134	; 0x86
}
   18108:	b010      	add	sp, #64	; 0x40
   1810a:	bd70      	pop	{r4, r5, r6, pc}
		err = sdc_support_slave();
   1810c:	f7eb fe5e 	bl	3dcc <sdc_support_slave>
		if (err) {
   18110:	2800      	cmp	r0, #0
   18112:	d1f8      	bne.n	18106 <hci_driver_open+0x3e>
		err = sdc_support_dle();
   18114:	f7eb fe3a 	bl	3d8c <sdc_support_dle>
		if (err) {
   18118:	2800      	cmp	r0, #0
   1811a:	d1f4      	bne.n	18106 <hci_driver_open+0x3e>
		err = sdc_support_le_2m_phy();
   1811c:	f7eb fe46 	bl	3dac <sdc_support_le_2m_phy>
		if (err) {
   18120:	4605      	mov	r5, r0
   18122:	2800      	cmp	r0, #0
   18124:	d1ef      	bne.n	18106 <hci_driver_open+0x3e>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   18126:	ac08      	add	r4, sp, #32
   18128:	4622      	mov	r2, r4
   1812a:	2101      	movs	r1, #1
	cfg.master_count.count = SDC_MASTER_COUNT;
   1812c:	f88d 0020 	strb.w	r0, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   18130:	f7eb fd2e 	bl	3b90 <sdc_cfg_set>
	if (required_memory < 0) {
   18134:	2800      	cmp	r0, #0
   18136:	dbe7      	blt.n	18108 <hci_driver_open+0x40>
	cfg.slave_count.count = CONFIG_SDC_SLAVE_COUNT;
   18138:	2601      	movs	r6, #1
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1813a:	4622      	mov	r2, r4
   1813c:	2102      	movs	r1, #2
   1813e:	4628      	mov	r0, r5
	cfg.slave_count.count = CONFIG_SDC_SLAVE_COUNT;
   18140:	f88d 6020 	strb.w	r6, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   18144:	f7eb fd24 	bl	3b90 <sdc_cfg_set>
	if (required_memory < 0) {
   18148:	2800      	cmp	r0, #0
   1814a:	dbdd      	blt.n	18108 <hci_driver_open+0x40>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   1814c:	4b2b      	ldr	r3, [pc, #172]	; (181fc <hci_driver_open+0x134>)
   1814e:	9308      	str	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   18150:	4622      	mov	r2, r4
   18152:	2103      	movs	r1, #3
   18154:	4628      	mov	r0, r5
   18156:	f7eb fd1b 	bl	3b90 <sdc_cfg_set>
	if (required_memory < 0) {
   1815a:	2800      	cmp	r0, #0
   1815c:	dbd4      	blt.n	18108 <hci_driver_open+0x40>
	cfg.event_length.event_length_us =
   1815e:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   18162:	4622      	mov	r2, r4
   18164:	2104      	movs	r1, #4
   18166:	4628      	mov	r0, r5
	cfg.event_length.event_length_us =
   18168:	9308      	str	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1816a:	f7eb fd11 	bl	3b90 <sdc_cfg_set>
	if (required_memory < 0) {
   1816e:	2800      	cmp	r0, #0
   18170:	dbca      	blt.n	18108 <hci_driver_open+0x40>
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   18172:	4622      	mov	r2, r4
   18174:	2105      	movs	r1, #5
   18176:	4628      	mov	r0, r5
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   18178:	f88d 6020 	strb.w	r6, [sp, #32]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1817c:	f7eb fd08 	bl	3b90 <sdc_cfg_set>
	if (required_memory < 0) {
   18180:	2800      	cmp	r0, #0
   18182:	dbc1      	blt.n	18108 <hci_driver_open+0x40>
	if (required_memory > sizeof(sdc_mempool)) {
   18184:	f240 63e6 	movw	r3, #1766	; 0x6e6
   18188:	4298      	cmp	r0, r3
   1818a:	dd08      	ble.n	1819e <hci_driver_open+0xd6>
		k_panic();
   1818c:	4040      	eors	r0, r0
   1818e:	f380 8811 	msr	BASEPRI, r0
   18192:	f04f 0004 	mov.w	r0, #4
   18196:	df02      	svc	2
		return -ENOMEM;
   18198:	f06f 000b 	mvn.w	r0, #11
   1819c:	e7b4      	b.n	18108 <hci_driver_open+0x40>
   1819e:	4818      	ldr	r0, [pc, #96]	; (18200 <hci_driver_open+0x138>)
   181a0:	f000 ffca 	bl	19138 <z_impl_device_get_binding>
	entropy_source = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   181a4:	4b17      	ldr	r3, [pc, #92]	; (18204 <hci_driver_open+0x13c>)
   181a6:	6018      	str	r0, [r3, #0]
	if (!entropy_source) {
   181a8:	b1d0      	cbz	r0, 181e0 <hci_driver_open+0x118>
	sdc_rand_source_t rand_functions = {
   181aa:	4b17      	ldr	r3, [pc, #92]	; (18208 <hci_driver_open+0x140>)
   181ac:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   181b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   181b4:	4620      	mov	r0, r4
   181b6:	f7eb fe75 	bl	3ea4 <sdc_rand_source_register>
	if (err) {
   181ba:	b9a0      	cbnz	r0, 181e6 <hci_driver_open+0x11e>
	err = MULTITHREADING_LOCK_ACQUIRE();
   181bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   181c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   181c4:	f7ff ff50 	bl	18068 <multithreading_lock_acquire>
	if (!err) {
   181c8:	4604      	mov	r4, r0
   181ca:	b930      	cbnz	r0, 181da <hci_driver_open+0x112>
		err = sdc_enable(host_signal, sdc_mempool);
   181cc:	490f      	ldr	r1, [pc, #60]	; (1820c <hci_driver_open+0x144>)
   181ce:	4810      	ldr	r0, [pc, #64]	; (18210 <hci_driver_open+0x148>)
   181d0:	f7eb fd20 	bl	3c14 <sdc_enable>
   181d4:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   181d6:	f7ff ff4f 	bl	18078 <multithreading_lock_release>
	if (err < 0) {
   181da:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   181de:	e793      	b.n	18108 <hci_driver_open+0x40>
		return -ENODEV;
   181e0:	f06f 0012 	mvn.w	r0, #18
   181e4:	e790      	b.n	18108 <hci_driver_open+0x40>
		return -EINVAL;
   181e6:	f06f 0015 	mvn.w	r0, #21
   181ea:	e78d      	b.n	18108 <hci_driver_open+0x40>
   181ec:	20004a80 	.word	0x20004a80
   181f0:	00018231 	.word	0x00018231
   181f4:	20001998 	.word	0x20001998
   181f8:	00021d4e 	.word	0x00021d4e
   181fc:	02031b1b 	.word	0x02031b1b
   18200:	00021d4a 	.word	0x00021d4a
   18204:	200027a8 	.word	0x200027a8
   18208:	00020e50 	.word	0x00020e50
   1820c:	20002bc1 	.word	0x20002bc1
   18210:	00018311 	.word	0x00018311

00018214 <rand_prio_low_vector_get_blocking>:
{
   18214:	460a      	mov	r2, r1
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   18216:	4905      	ldr	r1, [pc, #20]	; (1822c <rand_prio_low_vector_get_blocking+0x18>)
{
   18218:	b410      	push	{r4}
   1821a:	4603      	mov	r3, r0
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   1821c:	6808      	ldr	r0, [r1, #0]
	return api->get_entropy(dev, buffer, length);
   1821e:	6881      	ldr	r1, [r0, #8]
   18220:	680c      	ldr	r4, [r1, #0]
   18222:	4619      	mov	r1, r3
   18224:	4623      	mov	r3, r4
}
   18226:	bc10      	pop	{r4}
   18228:	4718      	bx	r3
   1822a:	bf00      	nop
   1822c:	200027a8 	.word	0x200027a8

00018230 <recv_thread>:
{
   18230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool received_data = false;
   18232:	2500      	movs	r5, #0
	return z_impl_k_sem_take(sem, timeout);
   18234:	4f34      	ldr	r7, [pc, #208]	; (18308 <recv_thread+0xd8>)
		errcode = hci_internal_evt_get(p_hci_buffer);
   18236:	4c35      	ldr	r4, [pc, #212]	; (1830c <recv_thread+0xdc>)
	bool received_evt = false;
   18238:	462e      	mov	r6, r5
		if (!received_evt && !received_data) {
   1823a:	b93e      	cbnz	r6, 1824c <recv_thread+0x1c>
   1823c:	b935      	cbnz	r5, 1824c <recv_thread+0x1c>
   1823e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   18242:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18246:	4638      	mov	r0, r7
   18248:	f001 fa98 	bl	1977c <z_impl_k_sem_take>
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1824c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18250:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   18254:	f7ff ff08 	bl	18068 <multithreading_lock_acquire>
	if (!errcode) {
   18258:	b158      	cbz	r0, 18272 <recv_thread+0x42>
		return false;
   1825a:	2600      	movs	r6, #0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1825c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18260:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   18264:	f7ff ff00 	bl	18068 <multithreading_lock_acquire>
	if (!errcode) {
   18268:	b380      	cbz	r0, 182cc <recv_thread+0x9c>
		return false;
   1826a:	2500      	movs	r5, #0
	z_impl_k_yield();
   1826c:	f001 fede 	bl	1a02c <z_impl_k_yield>
}
   18270:	e7e3      	b.n	1823a <recv_thread+0xa>
		errcode = hci_internal_evt_get(p_hci_buffer);
   18272:	4826      	ldr	r0, [pc, #152]	; (1830c <recv_thread+0xdc>)
   18274:	f000 fb54 	bl	18920 <hci_internal_evt_get>
   18278:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   1827a:	f7ff fefd 	bl	18078 <multithreading_lock_release>
	if (errcode) {
   1827e:	2d00      	cmp	r5, #0
   18280:	d1eb      	bne.n	1825a <recv_thread+0x2a>
	switch (hdr->evt) {
   18282:	7820      	ldrb	r0, [r4, #0]
   18284:	283e      	cmp	r0, #62	; 0x3e
   18286:	d007      	beq.n	18298 <recv_thread+0x68>
   18288:	28ff      	cmp	r0, #255	; 0xff
   1828a:	d01c      	beq.n	182c6 <recv_thread+0x96>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1828c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   18290:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18294:	2100      	movs	r1, #0
   18296:	e007      	b.n	182a8 <recv_thread+0x78>
		switch (me->subevent) {
   18298:	78a3      	ldrb	r3, [r4, #2]
   1829a:	2b02      	cmp	r3, #2
   1829c:	d001      	beq.n	182a2 <recv_thread+0x72>
   1829e:	2b0d      	cmp	r3, #13
		switch (subevent) {
   182a0:	d1f4      	bne.n	1828c <recv_thread+0x5c>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   182a2:	2200      	movs	r2, #0
   182a4:	2300      	movs	r3, #0
   182a6:	2101      	movs	r1, #1
   182a8:	f7fa fad4 	bl	12854 <bt_buf_get_evt>
	if (!evt_buf) {
   182ac:	4605      	mov	r5, r0
   182ae:	b140      	cbz	r0, 182c2 <recv_thread+0x92>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   182b0:	7862      	ldrb	r2, [r4, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   182b2:	4621      	mov	r1, r4
   182b4:	3202      	adds	r2, #2
   182b6:	3008      	adds	r0, #8
   182b8:	f007 fc4d 	bl	1fb56 <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   182bc:	4628      	mov	r0, r5
   182be:	f7fa ff9b 	bl	131f8 <bt_recv>
	return true;
   182c2:	2601      	movs	r6, #1
   182c4:	e7ca      	b.n	1825c <recv_thread+0x2c>
		switch (subevent) {
   182c6:	78a3      	ldrb	r3, [r4, #2]
   182c8:	2b80      	cmp	r3, #128	; 0x80
   182ca:	e7e9      	b.n	182a0 <recv_thread+0x70>
		errcode = sdc_hci_data_get(p_hci_buffer);
   182cc:	480f      	ldr	r0, [pc, #60]	; (1830c <recv_thread+0xdc>)
   182ce:	f7f4 f918 	bl	c502 <sdc_hci_data_get>
   182d2:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   182d4:	f7ff fed0 	bl	18078 <multithreading_lock_release>
	if (errcode) {
   182d8:	2d00      	cmp	r5, #0
   182da:	d1c6      	bne.n	1826a <recv_thread+0x3a>
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   182dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   182e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   182e4:	2003      	movs	r0, #3
   182e6:	f7fa fa7f 	bl	127e8 <bt_buf_get_rx>
	if (!data_buf) {
   182ea:	4605      	mov	r5, r0
   182ec:	b908      	cbnz	r0, 182f2 <recv_thread+0xc2>
	return true;
   182ee:	2501      	movs	r5, #1
   182f0:	e7bc      	b.n	1826c <recv_thread+0x3c>
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
   182f2:	8862      	ldrh	r2, [r4, #2]
   182f4:	4621      	mov	r1, r4
   182f6:	3204      	adds	r2, #4
   182f8:	3008      	adds	r0, #8
   182fa:	f007 fc2c 	bl	1fb56 <net_buf_simple_add_mem>
	bt_recv(data_buf);
   182fe:	4628      	mov	r0, r5
   18300:	f7fa ff7a 	bl	131f8 <bt_recv>
   18304:	e7f3      	b.n	182ee <recv_thread+0xbe>
   18306:	bf00      	nop
   18308:	20000724 	.word	0x20000724
   1830c:	20002b78 	.word	0x20002b78

00018310 <host_signal>:
	z_impl_k_sem_give(sem);
   18310:	4801      	ldr	r0, [pc, #4]	; (18318 <host_signal+0x8>)
   18312:	f001 ba0d 	b.w	19730 <z_impl_k_sem_give>
   18316:	bf00      	nop
   18318:	20000724 	.word	0x20000724

0001831c <hci_driver_send>:
{
   1831c:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   1831e:	8983      	ldrh	r3, [r0, #12]
{
   18320:	4605      	mov	r5, r0
	if (!buf->len) {
   18322:	b383      	cbz	r3, 18386 <hci_driver_send+0x6a>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   18324:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   18326:	b1ab      	cbz	r3, 18354 <hci_driver_send+0x38>
   18328:	2b02      	cmp	r3, #2
   1832a:	d12c      	bne.n	18386 <hci_driver_send+0x6a>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1832c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18330:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   18334:	f7ff fe98 	bl	18068 <multithreading_lock_acquire>
	if (!errcode) {
   18338:	4604      	mov	r4, r0
   1833a:	b948      	cbnz	r0, 18350 <hci_driver_send+0x34>
		errcode = sdc_hci_data_put(acl->data);
   1833c:	68a8      	ldr	r0, [r5, #8]
   1833e:	f7f4 f8ed 	bl	c51c <sdc_hci_data_put>
   18342:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   18344:	f7ff fe98 	bl	18078 <multithreading_lock_release>
		if (errcode) {
   18348:	b1c4      	cbz	r4, 1837c <hci_driver_send+0x60>
   1834a:	4810      	ldr	r0, [pc, #64]	; (1838c <hci_driver_send+0x70>)
   1834c:	f001 f9f0 	bl	19730 <z_impl_k_sem_give>
}
   18350:	4620      	mov	r0, r4
   18352:	bd38      	pop	{r3, r4, r5, pc}
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   18354:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18358:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1835c:	f7ff fe84 	bl	18068 <multithreading_lock_acquire>
	if (!errcode) {
   18360:	4604      	mov	r4, r0
   18362:	2800      	cmp	r0, #0
   18364:	d1f4      	bne.n	18350 <hci_driver_send+0x34>
		errcode = hci_internal_cmd_put(cmd->data);
   18366:	68a8      	ldr	r0, [r5, #8]
   18368:	f000 f812 	bl	18390 <hci_internal_cmd_put>
   1836c:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1836e:	f7ff fe83 	bl	18078 <multithreading_lock_release>
	if (errcode) {
   18372:	2c00      	cmp	r4, #0
   18374:	d1ec      	bne.n	18350 <hci_driver_send+0x34>
   18376:	4805      	ldr	r0, [pc, #20]	; (1838c <hci_driver_send+0x70>)
   18378:	f001 f9da 	bl	19730 <z_impl_k_sem_give>
		net_buf_unref(buf);
   1837c:	4628      	mov	r0, r5
   1837e:	f7ff f89b 	bl	174b8 <net_buf_unref>
   18382:	2400      	movs	r4, #0
   18384:	e7e4      	b.n	18350 <hci_driver_send+0x34>
	switch (type) {
   18386:	f06f 0415 	mvn.w	r4, #21
   1838a:	e7e1      	b.n	18350 <hci_driver_send+0x34>
   1838c:	20000724 	.word	0x20000724

00018390 <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   18390:	b538      	push	{r3, r4, r5, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   18392:	4c87      	ldr	r4, [pc, #540]	; (185b0 <hci_internal_cmd_put+0x220>)
   18394:	7823      	ldrb	r3, [r4, #0]
   18396:	2b00      	cmp	r3, #0
   18398:	f040 82bd 	bne.w	18916 <hci_internal_cmd_put+0x586>
	return ((uint16_t)src[1] << 8) | src[0];
   1839c:	8805      	ldrh	r5, [r0, #0]
	switch (BT_OGF(opcode)) {
   1839e:	f5b5 5f10 	cmp.w	r5, #9216	; 0x2400
   183a2:	b22b      	sxth	r3, r5
   183a4:	ea4f 2295 	mov.w	r2, r5, lsr #10
   183a8:	d20d      	bcs.n	183c6 <hci_internal_cmd_put+0x36>
   183aa:	b17a      	cbz	r2, 183cc <hci_internal_cmd_put+0x3c>
   183ac:	3a01      	subs	r2, #1
   183ae:	2a07      	cmp	r2, #7
   183b0:	d80c      	bhi.n	183cc <hci_internal_cmd_put+0x3c>
   183b2:	e8df f012 	tbh	[pc, r2, lsl #1]
   183b6:	000d      	.short	0x000d
   183b8:	0029000b 	.word	0x0029000b
   183bc:	000b005d 	.word	0x000b005d
   183c0:	000b000b 	.word	0x000b000b
   183c4:	0101      	.short	0x0101
   183c6:	2a3f      	cmp	r2, #63	; 0x3f
   183c8:	f000 822f 	beq.w	1882a <hci_internal_cmd_put+0x49a>
	switch (opcode)	{
   183cc:	2001      	movs	r0, #1
   183ce:	e00e      	b.n	183ee <hci_internal_cmd_put+0x5e>
	switch (opcode)	{
   183d0:	f240 4206 	movw	r2, #1030	; 0x406
   183d4:	4293      	cmp	r3, r2
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   183d6:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   183da:	d006      	beq.n	183ea <hci_internal_cmd_put+0x5a>
   183dc:	f240 421d 	movw	r2, #1053	; 0x41d
   183e0:	4293      	cmp	r3, r2
   183e2:	d1f3      	bne.n	183cc <hci_internal_cmd_put+0x3c>
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   183e4:	f7f4 f9be 	bl	c764 <sdc_hci_cmd_lc_read_remote_version_information>
   183e8:	e001      	b.n	183ee <hci_internal_cmd_put+0x5e>
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   183ea:	f7f4 f9b9 	bl	c760 <sdc_hci_cmd_lc_disconnect>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   183ee:	230f      	movs	r3, #15
   183f0:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   183f2:	2304      	movs	r3, #4
   183f4:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   183f6:	2301      	movs	r3, #1
	evt_data->status = status_code;
   183f8:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   183fa:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   183fc:	f8a4 5005 	strh.w	r5, [r4, #5]
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   18400:	2301      	movs	r3, #1
   18402:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   18404:	2000      	movs	r0, #0
}
   18406:	bd38      	pop	{r3, r4, r5, pc}
	switch (opcode)	{
   18408:	f640 4263 	movw	r2, #3171	; 0xc63
   1840c:	4293      	cmp	r3, r2
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1840e:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   18412:	d025      	beq.n	18460 <hci_internal_cmd_put+0xd0>
   18414:	dc0f      	bgt.n	18436 <hci_internal_cmd_put+0xa6>
   18416:	f640 4203 	movw	r2, #3075	; 0xc03
   1841a:	4293      	cmp	r3, r2
   1841c:	d018      	beq.n	18450 <hci_internal_cmd_put+0xc0>
   1841e:	f640 422d 	movw	r2, #3117	; 0xc2d
   18422:	4293      	cmp	r3, r2
   18424:	d017      	beq.n	18456 <hci_internal_cmd_put+0xc6>
   18426:	f640 4201 	movw	r2, #3073	; 0xc01
   1842a:	4293      	cmp	r3, r2
   1842c:	d1ce      	bne.n	183cc <hci_internal_cmd_put+0x3c>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   1842e:	f7f4 f891 	bl	c554 <sdc_hci_cmd_cb_set_event_mask>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   18432:	2304      	movs	r3, #4
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   18434:	e0b8      	b.n	185a8 <hci_internal_cmd_put+0x218>
	switch (opcode)	{
   18436:	f640 427b 	movw	r2, #3195	; 0xc7b
   1843a:	4293      	cmp	r3, r2
   1843c:	d013      	beq.n	18466 <hci_internal_cmd_put+0xd6>
   1843e:	f640 427c 	movw	r2, #3196	; 0xc7c
   18442:	4293      	cmp	r3, r2
   18444:	d1c2      	bne.n	183cc <hci_internal_cmd_put+0x3c>
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   18446:	495b      	ldr	r1, [pc, #364]	; (185b4 <hci_internal_cmd_put+0x224>)
   18448:	f7f4 f88e 	bl	c568 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   1844c:	2306      	movs	r3, #6
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1844e:	e0ab      	b.n	185a8 <hci_internal_cmd_put+0x218>
		return sdc_hci_cmd_cb_reset();
   18450:	f7eb fe1e 	bl	4090 <sdc_hci_cmd_cb_reset>
   18454:	e7ed      	b.n	18432 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   18456:	4957      	ldr	r1, [pc, #348]	; (185b4 <hci_internal_cmd_put+0x224>)
   18458:	f7f4 f87a 	bl	c550 <sdc_hci_cmd_cb_read_transmit_power_level>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   1845c:	2307      	movs	r3, #7
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1845e:	e0a3      	b.n	185a8 <hci_internal_cmd_put+0x218>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   18460:	f7f4 f87d 	bl	c55e <sdc_hci_cmd_cb_set_event_mask_page_2>
   18464:	e7e5      	b.n	18432 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   18466:	4953      	ldr	r1, [pc, #332]	; (185b4 <hci_internal_cmd_put+0x224>)
   18468:	f7f4 f870 	bl	c54c <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   1846c:	2308      	movs	r3, #8
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   1846e:	e09b      	b.n	185a8 <hci_internal_cmd_put+0x218>
	switch (opcode)	{
   18470:	f5a5 5380 	sub.w	r3, r5, #4096	; 0x1000
   18474:	3b01      	subs	r3, #1
   18476:	2b08      	cmp	r3, #8
   18478:	d8a8      	bhi.n	183cc <hci_internal_cmd_put+0x3c>
   1847a:	a201      	add	r2, pc, #4	; (adr r2, 18480 <hci_internal_cmd_put+0xf0>)
   1847c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   18480:	000184a5 	.word	0x000184a5
   18484:	000184af 	.word	0x000184af
   18488:	00018589 	.word	0x00018589
   1848c:	000183cd 	.word	0x000183cd
   18490:	000183cd 	.word	0x000183cd
   18494:	000183cd 	.word	0x000183cd
   18498:	000183cd 	.word	0x000183cd
   1849c:	000183cd 	.word	0x000183cd
   184a0:	000185a1 	.word	0x000185a1
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   184a4:	4843      	ldr	r0, [pc, #268]	; (185b4 <hci_internal_cmd_put+0x224>)
   184a6:	f7f4 f910 	bl	c6ca <sdc_hci_cmd_ip_read_local_version_information>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   184aa:	230c      	movs	r3, #12
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   184ac:	e07c      	b.n	185a8 <hci_internal_cmd_put+0x218>
	memset(cmds, 0, sizeof(*cmds));
   184ae:	4841      	ldr	r0, [pc, #260]	; (185b4 <hci_internal_cmd_put+0x224>)
   184b0:	222e      	movs	r2, #46	; 0x2e
   184b2:	2100      	movs	r1, #0
   184b4:	f004 fc02 	bl	1ccbc <memset>
	cmds->hci_disconnect = 1;
   184b8:	79e3      	ldrb	r3, [r4, #7]
   184ba:	f043 0320 	orr.w	r3, r3, #32
   184be:	71e3      	strb	r3, [r4, #7]
	cmds->hci_read_remote_version_information = 1;
   184c0:	7a63      	ldrb	r3, [r4, #9]
   184c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   184c6:	7263      	strb	r3, [r4, #9]
	cmds->hci_set_event_mask = 1;
   184c8:	7b23      	ldrb	r3, [r4, #12]
   184ca:	f063 033f 	orn	r3, r3, #63	; 0x3f
   184ce:	7323      	strb	r3, [r4, #12]
	cmds->hci_read_transmit_power_level = 1;
   184d0:	7c63      	ldrb	r3, [r4, #17]
   184d2:	f043 0304 	orr.w	r3, r3, #4
   184d6:	7463      	strb	r3, [r4, #17]
	cmds->hci_read_local_version_information = 1;
   184d8:	7d63      	ldrb	r3, [r4, #21]
   184da:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   184de:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   184e2:	7563      	strb	r3, [r4, #21]
	cmds->hci_read_bd_addr = 1;
   184e4:	7da3      	ldrb	r3, [r4, #22]
   184e6:	f043 0302 	orr.w	r3, r3, #2
   184ea:	75a3      	strb	r3, [r4, #22]
	cmds->hci_set_event_mask_page_2 = 1;
   184ec:	7f63      	ldrb	r3, [r4, #29]
   184ee:	f043 0304 	orr.w	r3, r3, #4
   184f2:	7763      	strb	r3, [r4, #29]
	cmds->hci_le_set_event_mask = 1;
   184f4:	f894 3020 	ldrb.w	r3, [r4, #32]
   184f8:	f063 0308 	orn	r3, r3, #8
   184fc:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_scan_response_data = 1;
   18500:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   18504:	f063 033c 	orn	r3, r3, #60	; 0x3c
   18508:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_add_device_to_white_list = 1;
   1850c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   18510:	f063 030c 	orn	r3, r3, #12
   18514:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_enable_encryption = 1;
   18518:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   1851c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   18520:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
   18524:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_read_authenticated_payload_timeout = 1;
   18528:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   1852c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   18530:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   18534:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	cmds->hci_le_set_data_length = 1;
   18538:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   1853c:	f063 033f 	orn	r3, r3, #63	; 0x3f
   18540:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	cmds->hci_le_write_suggested_default_data_length = 1;
   18544:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   18548:	f023 0379 	bic.w	r3, r3, #121	; 0x79
   1854c:	f043 0379 	orr.w	r3, r3, #121	; 0x79
   18550:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	cmds->hci_le_set_address_resolution_enable = 1;
   18554:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   18558:	f063 0301 	orn	r3, r3, #1
   1855c:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
   18560:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   18564:	f043 0301 	orr.w	r3, r3, #1
   18568:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
   1856c:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   18570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   18574:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	cmds->hci_le_set_privacy_mode = 1;
   18578:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   1857c:	f043 0304 	orr.w	r3, r3, #4
   18580:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
		return 0;
   18584:	2344      	movs	r3, #68	; 0x44
   18586:	e0d6      	b.n	18736 <hci_internal_cmd_put+0x3a6>
	memset(features, 0, sizeof(*features));
   18588:	480a      	ldr	r0, [pc, #40]	; (185b4 <hci_internal_cmd_put+0x224>)
   1858a:	2208      	movs	r2, #8
   1858c:	2100      	movs	r1, #0
   1858e:	f004 fb95 	bl	1ccbc <memset>
	features->bdedr_not_supported = 1;
   18592:	7ae3      	ldrb	r3, [r4, #11]
   18594:	f023 0360 	bic.w	r3, r3, #96	; 0x60
   18598:	f043 0360 	orr.w	r3, r3, #96	; 0x60
	*(buf + 4) = states2;
   1859c:	72e3      	strb	r3, [r4, #11]
   1859e:	e0c9      	b.n	18734 <hci_internal_cmd_put+0x3a4>
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   185a0:	4804      	ldr	r0, [pc, #16]	; (185b4 <hci_internal_cmd_put+0x224>)
   185a2:	f7f4 f890 	bl	c6c6 <sdc_hci_cmd_ip_read_bd_addr>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   185a6:	230a      	movs	r3, #10
	if (!command_generates_command_complete_event(opcode) ||
   185a8:	2801      	cmp	r0, #1
   185aa:	f040 80c5 	bne.w	18738 <hci_internal_cmd_put+0x3a8>
   185ae:	e71e      	b.n	183ee <hci_internal_cmd_put+0x5e>
   185b0:	200032a7 	.word	0x200032a7
   185b4:	200032ae 	.word	0x200032ae
	switch (opcode)	{
   185b8:	f5a5 5300 	sub.w	r3, r5, #8192	; 0x2000
   185bc:	3b01      	subs	r3, #1
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   185be:	3003      	adds	r0, #3
	switch (opcode)	{
   185c0:	2b4d      	cmp	r3, #77	; 0x4d
   185c2:	f63f af03 	bhi.w	183cc <hci_internal_cmd_put+0x3c>
   185c6:	a201      	add	r2, pc, #4	; (adr r2, 185cc <hci_internal_cmd_put+0x23c>)
   185c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   185cc:	00018705 	.word	0x00018705
   185d0:	0001870b 	.word	0x0001870b
   185d4:	00018713 	.word	0x00018713
   185d8:	000183cd 	.word	0x000183cd
   185dc:	00018749 	.word	0x00018749
   185e0:	0001874f 	.word	0x0001874f
   185e4:	00018755 	.word	0x00018755
   185e8:	0001875f 	.word	0x0001875f
   185ec:	00018765 	.word	0x00018765
   185f0:	0001876b 	.word	0x0001876b
   185f4:	000183cd 	.word	0x000183cd
   185f8:	000183cd 	.word	0x000183cd
   185fc:	000183cd 	.word	0x000183cd
   18600:	000183cd 	.word	0x000183cd
   18604:	00018771 	.word	0x00018771
   18608:	00018779 	.word	0x00018779
   1860c:	0001877f 	.word	0x0001877f
   18610:	00018785 	.word	0x00018785
   18614:	000183cd 	.word	0x000183cd
   18618:	000183cd 	.word	0x000183cd
   1861c:	0001878b 	.word	0x0001878b
   18620:	00018795 	.word	0x00018795
   18624:	0001879b 	.word	0x0001879b
   18628:	000187a5 	.word	0x000187a5
   1862c:	000183cd 	.word	0x000183cd
   18630:	000187ad 	.word	0x000187ad
   18634:	000187b5 	.word	0x000187b5
   18638:	000187bd 	.word	0x000187bd
   1863c:	000183cd 	.word	0x000183cd
   18640:	000183cd 	.word	0x000183cd
   18644:	000183cd 	.word	0x000183cd
   18648:	000183cd 	.word	0x000183cd
   1864c:	000183cd 	.word	0x000183cd
   18650:	000187c5 	.word	0x000187c5
   18654:	000187cd 	.word	0x000187cd
   18658:	000187d5 	.word	0x000187d5
   1865c:	000183cd 	.word	0x000183cd
   18660:	000183cd 	.word	0x000183cd
   18664:	000187db 	.word	0x000187db
   18668:	000187e1 	.word	0x000187e1
   1866c:	000187e7 	.word	0x000187e7
   18670:	000187ed 	.word	0x000187ed
   18674:	000183cd 	.word	0x000183cd
   18678:	000183cd 	.word	0x000183cd
   1867c:	000187f5 	.word	0x000187f5
   18680:	000187fb 	.word	0x000187fb
   18684:	00018801 	.word	0x00018801
   18688:	00018809 	.word	0x00018809
   1868c:	00018811 	.word	0x00018811
   18690:	00018817 	.word	0x00018817
   18694:	000183cd 	.word	0x000183cd
   18698:	000183cd 	.word	0x000183cd
   1869c:	000183cd 	.word	0x000183cd
   186a0:	000183cd 	.word	0x000183cd
   186a4:	000183cd 	.word	0x000183cd
   186a8:	000183cd 	.word	0x000183cd
   186ac:	000183cd 	.word	0x000183cd
   186b0:	000183cd 	.word	0x000183cd
   186b4:	000183cd 	.word	0x000183cd
   186b8:	000183cd 	.word	0x000183cd
   186bc:	000183cd 	.word	0x000183cd
   186c0:	000183cd 	.word	0x000183cd
   186c4:	000183cd 	.word	0x000183cd
   186c8:	000183cd 	.word	0x000183cd
   186cc:	000183cd 	.word	0x000183cd
   186d0:	000183cd 	.word	0x000183cd
   186d4:	000183cd 	.word	0x000183cd
   186d8:	000183cd 	.word	0x000183cd
   186dc:	000183cd 	.word	0x000183cd
   186e0:	000183cd 	.word	0x000183cd
   186e4:	000183cd 	.word	0x000183cd
   186e8:	000183cd 	.word	0x000183cd
   186ec:	000183cd 	.word	0x000183cd
   186f0:	000183cd 	.word	0x000183cd
   186f4:	0001881d 	.word	0x0001881d
   186f8:	000183cd 	.word	0x000183cd
   186fc:	000183cd 	.word	0x000183cd
   18700:	00018825 	.word	0x00018825
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   18704:	f7f4 f81b 	bl	c73e <sdc_hci_cmd_le_set_event_mask>
   18708:	e693      	b.n	18432 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1870a:	4884      	ldr	r0, [pc, #528]	; (1891c <hci_internal_cmd_put+0x58c>)
   1870c:	f7f3 fff5 	bl	c6fa <sdc_hci_cmd_le_read_buffer_size>
   18710:	e6a4      	b.n	1845c <hci_internal_cmd_put+0xcc>
	memset(features, 0, sizeof(*features));
   18712:	4882      	ldr	r0, [pc, #520]	; (1891c <hci_internal_cmd_put+0x58c>)
   18714:	2205      	movs	r2, #5
   18716:	2100      	movs	r1, #0
   18718:	f004 fad0 	bl	1ccbc <memset>
	features->le_encryption = 1;
   1871c:	79e3      	ldrb	r3, [r4, #7]
   1871e:	f023 0375 	bic.w	r3, r3, #117	; 0x75
   18722:	f043 0375 	orr.w	r3, r3, #117	; 0x75
   18726:	71e3      	strb	r3, [r4, #7]
	features->le_2m_phy = 1;
   18728:	7a23      	ldrb	r3, [r4, #8]
   1872a:	f023 0341 	bic.w	r3, r3, #65	; 0x41
   1872e:	f043 0341 	orr.w	r3, r3, #65	; 0x41
   18732:	7223      	strb	r3, [r4, #8]
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   18734:	230c      	movs	r3, #12
		return 0;
   18736:	2000      	movs	r0, #0
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   18738:	220e      	movs	r2, #14
	evt_hdr->len = param_length;
   1873a:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   1873c:	2301      	movs	r3, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1873e:	7062      	strb	r2, [r4, #1]
	evt_data->ncmd = 1;
   18740:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   18742:	80a5      	strh	r5, [r4, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   18744:	71a0      	strb	r0, [r4, #6]
}
   18746:	e65b      	b.n	18400 <hci_internal_cmd_put+0x70>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   18748:	f7f4 f802 	bl	c750 <sdc_hci_cmd_le_set_random_address>
   1874c:	e671      	b.n	18432 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   1874e:	f7f3 fff0 	bl	c732 <sdc_hci_cmd_le_set_adv_params>
   18752:	e66e      	b.n	18432 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   18754:	4871      	ldr	r0, [pc, #452]	; (1891c <hci_internal_cmd_put+0x58c>)
   18756:	f7f3 ffce 	bl	c6f6 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   1875a:	2305      	movs	r3, #5
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   1875c:	e724      	b.n	185a8 <hci_internal_cmd_put+0x218>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   1875e:	f7f3 ffe4 	bl	c72a <sdc_hci_cmd_le_set_adv_data>
   18762:	e666      	b.n	18432 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   18764:	f7f3 fff8 	bl	c758 <sdc_hci_cmd_le_set_scan_response_data>
   18768:	e663      	b.n	18432 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   1876a:	f7f3 ffe0 	bl	c72e <sdc_hci_cmd_le_set_adv_enable>
   1876e:	e660      	b.n	18432 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_read_white_list_size((void *)event_out_params);
   18770:	486a      	ldr	r0, [pc, #424]	; (1891c <hci_internal_cmd_put+0x58c>)
   18772:	f7f3 ffd2 	bl	c71a <sdc_hci_cmd_le_read_white_list_size>
   18776:	e7f0      	b.n	1875a <hci_internal_cmd_put+0x3ca>
		return sdc_hci_cmd_le_clear_white_list();
   18778:	f7f3 ffaf 	bl	c6da <sdc_hci_cmd_le_clear_white_list>
   1877c:	e659      	b.n	18432 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_add_device_to_white_list((void *)cmd_params);
   1877e:	f7f3 ffa8 	bl	c6d2 <sdc_hci_cmd_le_add_device_to_white_list>
   18782:	e656      	b.n	18432 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_remove_device_from_white_list((void *)cmd_params);
   18784:	f7f3 ffcd 	bl	c722 <sdc_hci_cmd_le_remove_device_from_white_list>
   18788:	e653      	b.n	18432 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   1878a:	4964      	ldr	r1, [pc, #400]	; (1891c <hci_internal_cmd_put+0x58c>)
   1878c:	f7f3 ffb7 	bl	c6fe <sdc_hci_cmd_le_read_channel_map>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   18790:	230b      	movs	r3, #11
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   18792:	e709      	b.n	185a8 <hci_internal_cmd_put+0x218>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   18794:	f7f3 ffb9 	bl	c70a <sdc_hci_cmd_le_read_remote_features>
   18798:	e629      	b.n	183ee <hci_internal_cmd_put+0x5e>
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1879a:	4960      	ldr	r1, [pc, #384]	; (1891c <hci_internal_cmd_put+0x58c>)
   1879c:	f7f3 ff9f 	bl	c6de <sdc_hci_cmd_le_encrypt>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   187a0:	2314      	movs	r3, #20
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   187a2:	e701      	b.n	185a8 <hci_internal_cmd_put+0x218>
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   187a4:	485d      	ldr	r0, [pc, #372]	; (1891c <hci_internal_cmd_put+0x58c>)
   187a6:	f7f3 ffa4 	bl	c6f2 <sdc_hci_cmd_le_rand>
   187aa:	e67e      	b.n	184aa <hci_internal_cmd_put+0x11a>
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   187ac:	495b      	ldr	r1, [pc, #364]	; (1891c <hci_internal_cmd_put+0x58c>)
   187ae:	f7f3 ff9c 	bl	c6ea <sdc_hci_cmd_le_long_term_key_request_reply>
   187b2:	e64b      	b.n	1844c <hci_internal_cmd_put+0xbc>
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   187b4:	4959      	ldr	r1, [pc, #356]	; (1891c <hci_internal_cmd_put+0x58c>)
   187b6:	f7f3 ff94 	bl	c6e2 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
   187ba:	e647      	b.n	1844c <hci_internal_cmd_put+0xbc>
	*buf = states1;
   187bc:	238f      	movs	r3, #143	; 0x8f
   187be:	71e3      	strb	r3, [r4, #7]
	*(buf + 4) = states2;
   187c0:	23c0      	movs	r3, #192	; 0xc0
   187c2:	e6eb      	b.n	1859c <hci_internal_cmd_put+0x20c>
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   187c4:	4955      	ldr	r1, [pc, #340]	; (1891c <hci_internal_cmd_put+0x58c>)
   187c6:	f7f3 ffb6 	bl	c736 <sdc_hci_cmd_le_set_data_length>
   187ca:	e63f      	b.n	1844c <hci_internal_cmd_put+0xbc>
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   187cc:	4853      	ldr	r0, [pc, #332]	; (1891c <hci_internal_cmd_put+0x58c>)
   187ce:	f7f3 ffa0 	bl	c712 <sdc_hci_cmd_le_read_suggested_default_data_length>
   187d2:	e64b      	b.n	1846c <hci_internal_cmd_put+0xdc>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   187d4:	f7f3 ffc2 	bl	c75c <sdc_hci_cmd_le_write_suggested_default_data_length>
   187d8:	e62b      	b.n	18432 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_add_device_to_resolving_list((void *)cmd_params);
   187da:	f7f3 ff78 	bl	c6ce <sdc_hci_cmd_le_add_device_to_resolving_list>
   187de:	e628      	b.n	18432 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_remove_device_from_resolving_list((void *)cmd_params);
   187e0:	f7f3 ff9d 	bl	c71e <sdc_hci_cmd_le_remove_device_from_resolving_list>
   187e4:	e625      	b.n	18432 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_clear_resolving_list();
   187e6:	f7f3 ff76 	bl	c6d6 <sdc_hci_cmd_le_clear_resolving_list>
   187ea:	e622      	b.n	18432 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   187ec:	484b      	ldr	r0, [pc, #300]	; (1891c <hci_internal_cmd_put+0x58c>)
   187ee:	f7f3 ff8e 	bl	c70e <sdc_hci_cmd_le_read_resolving_list_size>
   187f2:	e7b2      	b.n	1875a <hci_internal_cmd_put+0x3ca>
		return sdc_hci_cmd_le_set_address_resolution_enable((void *)cmd_params);
   187f4:	f7f3 ff97 	bl	c726 <sdc_hci_cmd_le_set_address_resolution_enable>
   187f8:	e61b      	b.n	18432 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_set_resolvable_private_address_timeout((void *)cmd_params);
   187fa:	f7f3 ffab 	bl	c754 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>
   187fe:	e618      	b.n	18432 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   18800:	4846      	ldr	r0, [pc, #280]	; (1891c <hci_internal_cmd_put+0x58c>)
   18802:	f7f3 ff7e 	bl	c702 <sdc_hci_cmd_le_read_max_data_length>
   18806:	e650      	b.n	184aa <hci_internal_cmd_put+0x11a>
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   18808:	4944      	ldr	r1, [pc, #272]	; (1891c <hci_internal_cmd_put+0x58c>)
   1880a:	f7f3 ff7c 	bl	c706 <sdc_hci_cmd_le_read_phy>
   1880e:	e62d      	b.n	1846c <hci_internal_cmd_put+0xdc>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   18810:	f7f3 ff93 	bl	c73a <sdc_hci_cmd_le_set_default_phy>
   18814:	e60d      	b.n	18432 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   18816:	f7f3 ff97 	bl	c748 <sdc_hci_cmd_le_set_phy>
   1881a:	e5e8      	b.n	183ee <hci_internal_cmd_put+0x5e>
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1881c:	483f      	ldr	r0, [pc, #252]	; (1891c <hci_internal_cmd_put+0x58c>)
   1881e:	f7f3 ff7a 	bl	c716 <sdc_hci_cmd_le_read_transmit_power>
   18822:	e613      	b.n	1844c <hci_internal_cmd_put+0xbc>
		return sdc_hci_cmd_le_set_privacy_mode((void *)cmd_params);
   18824:	f7f3 ff92 	bl	c74c <sdc_hci_cmd_le_set_privacy_mode>
   18828:	e603      	b.n	18432 <hci_internal_cmd_put+0xa2>
	switch (opcode)	{
   1882a:	f64f 430a 	movw	r3, #64522	; 0xfc0a
   1882e:	429d      	cmp	r5, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   18830:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   18834:	d820      	bhi.n	18878 <hci_internal_cmd_put+0x4e8>
   18836:	f5b5 4f7c 	cmp.w	r5, #64512	; 0xfc00
   1883a:	f43f adc7 	beq.w	183cc <hci_internal_cmd_put+0x3c>
   1883e:	f5a5 437c 	sub.w	r3, r5, #64512	; 0xfc00
   18842:	3b01      	subs	r3, #1
   18844:	2b09      	cmp	r3, #9
   18846:	f63f adc1 	bhi.w	183cc <hci_internal_cmd_put+0x3c>
   1884a:	a201      	add	r2, pc, #4	; (adr r2, 18850 <hci_internal_cmd_put+0x4c0>)
   1884c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   18850:	00018899 	.word	0x00018899
   18854:	000188a3 	.word	0x000188a3
   18858:	000183cd 	.word	0x000183cd
   1885c:	000183cd 	.word	0x000183cd
   18860:	000183cd 	.word	0x000183cd
   18864:	000188db 	.word	0x000188db
   18868:	000183cd 	.word	0x000183cd
   1886c:	000183cd 	.word	0x000183cd
   18870:	000188c7 	.word	0x000188c7
   18874:	000188d1 	.word	0x000188d1
   18878:	f505 7340 	add.w	r3, r5, #768	; 0x300
   1887c:	b29b      	uxth	r3, r3
   1887e:	2b05      	cmp	r3, #5
   18880:	f63f ada4 	bhi.w	183cc <hci_internal_cmd_put+0x3c>
   18884:	f5a5 437d 	sub.w	r3, r5, #64768	; 0xfd00
   18888:	2b05      	cmp	r3, #5
   1888a:	f63f ad9f 	bhi.w	183cc <hci_internal_cmd_put+0x3c>
   1888e:	e8df f003 	tbb	[pc, r3]
   18892:	3327      	.short	0x3327
   18894:	3f3c3936 	.word	0x3f3c3936
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   18898:	4820      	ldr	r0, [pc, #128]	; (1891c <hci_internal_cmd_put+0x58c>)
   1889a:	f7eb fc0d 	bl	40b8 <sdc_hci_cmd_vs_zephyr_read_version_info>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   1889e:	2310      	movs	r3, #16
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   188a0:	e682      	b.n	185a8 <hci_internal_cmd_put+0x218>
	memset(cmds, 0, sizeof(*cmds));
   188a2:	481e      	ldr	r0, [pc, #120]	; (1891c <hci_internal_cmd_put+0x58c>)
   188a4:	2202      	movs	r2, #2
   188a6:	2100      	movs	r1, #0
   188a8:	f004 fa08 	bl	1ccbc <memset>
	cmds->read_version_info = 1;
   188ac:	79e3      	ldrb	r3, [r4, #7]
   188ae:	f023 0323 	bic.w	r3, r3, #35	; 0x23
   188b2:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   188b6:	71e3      	strb	r3, [r4, #7]
	cmds->read_static_addresses = 1;
   188b8:	7a23      	ldrb	r3, [r4, #8]
   188ba:	f023 0307 	bic.w	r3, r3, #7
   188be:	f043 0307 	orr.w	r3, r3, #7
   188c2:	7223      	strb	r3, [r4, #8]
}
   188c4:	e65e      	b.n	18584 <hci_internal_cmd_put+0x1f4>
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   188c6:	4815      	ldr	r0, [pc, #84]	; (1891c <hci_internal_cmd_put+0x58c>)
   188c8:	f7f3 feb0 	bl	c62c <sdc_hci_cmd_vs_zephyr_read_static_addresses>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   188cc:	231b      	movs	r3, #27
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   188ce:	e66b      	b.n	185a8 <hci_internal_cmd_put+0x218>
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   188d0:	4812      	ldr	r0, [pc, #72]	; (1891c <hci_internal_cmd_put+0x58c>)
   188d2:	f7f3 fe5e 	bl	c592 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
		*param_length_out +=
   188d6:	2324      	movs	r3, #36	; 0x24
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   188d8:	e666      	b.n	185a8 <hci_internal_cmd_put+0x218>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   188da:	f7f3 fef2 	bl	c6c2 <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   188de:	e5a8      	b.n	18432 <hci_internal_cmd_put+0xa2>
	memset(cmds, 0, sizeof(*cmds));
   188e0:	480e      	ldr	r0, [pc, #56]	; (1891c <hci_internal_cmd_put+0x58c>)
   188e2:	2201      	movs	r2, #1
   188e4:	2100      	movs	r1, #0
   188e6:	f004 f9e9 	bl	1ccbc <memset>
	cmds->read_supported_vs_commands = 1;
   188ea:	79e3      	ldrb	r3, [r4, #7]
   188ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   188f0:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
   188f4:	71e3      	strb	r3, [r4, #7]
}
   188f6:	e645      	b.n	18584 <hci_internal_cmd_put+0x1f4>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   188f8:	f7f3 fe44 	bl	c584 <sdc_hci_cmd_vs_llpm_mode_set>
   188fc:	e599      	b.n	18432 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   188fe:	f7f3 fe3d 	bl	c57c <sdc_hci_cmd_vs_conn_update>
   18902:	e596      	b.n	18432 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   18904:	f7f3 fe32 	bl	c56c <sdc_hci_cmd_vs_conn_event_extend>
   18908:	e593      	b.n	18432 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   1890a:	f7f3 fe3d 	bl	c588 <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   1890e:	e590      	b.n	18432 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   18910:	f7f3 fe36 	bl	c580 <sdc_hci_cmd_vs_event_length_set>
   18914:	e58d      	b.n	18432 <hci_internal_cmd_put+0xa2>
		return -NRF_EPERM;
   18916:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1891a:	e574      	b.n	18406 <hci_internal_cmd_put+0x76>
   1891c:	200032ae 	.word	0x200032ae

00018920 <hci_internal_evt_get>:

int hci_internal_evt_get(uint8_t *evt_out)
{
   18920:	b510      	push	{r4, lr}
	if (cmd_complete_or_status.occurred) {
   18922:	4c07      	ldr	r4, [pc, #28]	; (18940 <hci_internal_evt_get+0x20>)
   18924:	7823      	ldrb	r3, [r4, #0]
   18926:	b91b      	cbnz	r3, 18930 <hci_internal_evt_get+0x10>

		return 0;
	}

	return sdc_hci_evt_get(evt_out);
}
   18928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return sdc_hci_evt_get(evt_out);
   1892c:	f7f3 be01 	b.w	c532 <sdc_hci_evt_get>
		       evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   18930:	78a2      	ldrb	r2, [r4, #2]
		memcpy(evt_out,
   18932:	1c61      	adds	r1, r4, #1
   18934:	3202      	adds	r2, #2
   18936:	f004 f9b6 	bl	1cca6 <memcpy>
		cmd_complete_or_status.occurred = false;
   1893a:	2000      	movs	r0, #0
   1893c:	7020      	strb	r0, [r4, #0]
}
   1893e:	bd10      	pop	{r4, pc}
   18940:	200032a7 	.word	0x200032a7

00018944 <bt_rand>:
#include <common/log.h>

#define BT_ECB_BLOCK_SIZE 16

int bt_rand(void *buf, size_t len)
{
   18944:	b570      	push	{r4, r5, r6, lr}
	static const struct device *dev;

	if (unlikely(!dev)) {
   18946:	4c0b      	ldr	r4, [pc, #44]	; (18974 <bt_rand+0x30>)
   18948:	6823      	ldr	r3, [r4, #0]
{
   1894a:	4605      	mov	r5, r0
   1894c:	460e      	mov	r6, r1
	if (unlikely(!dev)) {
   1894e:	b13b      	cbz	r3, 18960 <bt_rand+0x1c>
		if (!dev) {
			return -ENODEV;
		}
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   18950:	6820      	ldr	r0, [r4, #0]
   18952:	6883      	ldr	r3, [r0, #8]
   18954:	b2b2      	uxth	r2, r6
   18956:	4629      	mov	r1, r5
   18958:	681b      	ldr	r3, [r3, #0]
}
   1895a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1895e:	4718      	bx	r3
   18960:	4805      	ldr	r0, [pc, #20]	; (18978 <bt_rand+0x34>)
   18962:	f000 fbe9 	bl	19138 <z_impl_device_get_binding>
		dev = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   18966:	6020      	str	r0, [r4, #0]
		if (!dev) {
   18968:	2800      	cmp	r0, #0
   1896a:	d1f1      	bne.n	18950 <bt_rand+0xc>
}
   1896c:	f06f 0012 	mvn.w	r0, #18
   18970:	bd70      	pop	{r4, r5, r6, pc}
   18972:	bf00      	nop
   18974:	200027ac 	.word	0x200027ac
   18978:	00021d4a 	.word	0x00021d4a

0001897c <mpsl_lib_init>:
	return 0;
#endif
}

static int mpsl_lib_init(const struct device *dev)
{
   1897c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);
	int err = 0;
	mpsl_clock_lfclk_cfg_t clock_cfg;

	clock_cfg.source = m_config_clock_source_get();
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   1897e:	2332      	movs	r3, #50	; 0x32
   18980:	f8ad 3004 	strh.w	r3, [sp, #4]
#else
	clock_cfg.rc_ctiv = 0;
	clock_cfg.rc_temp_ctiv = 0;
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   18984:	4a13      	ldr	r2, [pc, #76]	; (189d4 <mpsl_lib_init+0x58>)
	clock_cfg.skip_wait_lfclk_started =
   18986:	2300      	movs	r3, #0
	clock_cfg.source = m_config_clock_source_get();
   18988:	2501      	movs	r5, #1
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1898a:	2119      	movs	r1, #25
   1898c:	4668      	mov	r0, sp
	clock_cfg.skip_wait_lfclk_started =
   1898e:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
   18992:	f8ad 5000 	strh.w	r5, [sp]
	clock_cfg.rc_temp_ctiv = 0;
   18996:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1899a:	f7ea ff41 	bl	3820 <mpsl_init>
	if (err) {
   1899e:	4604      	mov	r4, r0
   189a0:	b9a0      	cbnz	r0, 189cc <mpsl_lib_init+0x50>
		return err;
	}

#if MPSL_TIMESLOT_SESSION_COUNT > 0
	err = mpsl_timeslot_session_count_set((void *) timeslot_context,
   189a2:	480d      	ldr	r0, [pc, #52]	; (189d8 <mpsl_lib_init+0x5c>)
   189a4:	4629      	mov	r1, r5
   189a6:	f7f3 f838 	bl	ba1a <mpsl_timeslot_session_count_set>
			MPSL_TIMESLOT_SESSION_COUNT);
	if (err) {
   189aa:	4604      	mov	r4, r0
   189ac:	b970      	cbnz	r0, 189cc <mpsl_lib_init+0x50>
		return err;
	}
#endif

	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   189ae:	4601      	mov	r1, r0
   189b0:	462a      	mov	r2, r5
   189b2:	2008      	movs	r0, #8
   189b4:	f7f9 f936 	bl	11c24 <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   189b8:	462a      	mov	r2, r5
   189ba:	4621      	mov	r1, r4
   189bc:	200b      	movs	r0, #11
   189be:	f7f9 f931 	bl	11c24 <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   189c2:	462a      	mov	r2, r5
   189c4:	4621      	mov	r1, r4
   189c6:	4628      	mov	r0, r5
   189c8:	f7f9 f92c 	bl	11c24 <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_ZERO_LATENCY);

	return 0;
}
   189cc:	4620      	mov	r0, r4
   189ce:	b003      	add	sp, #12
   189d0:	bd30      	pop	{r4, r5, pc}
   189d2:	bf00      	nop
   189d4:	0001ff55 	.word	0x0001ff55
   189d8:	200027b0 	.word	0x200027b0

000189dc <mpsl_low_prio_irq_handler>:
   189dc:	4801      	ldr	r0, [pc, #4]	; (189e4 <mpsl_low_prio_irq_handler+0x8>)
   189de:	f000 bea7 	b.w	19730 <z_impl_k_sem_give>
   189e2:	bf00      	nop
   189e4:	2000073c 	.word	0x2000073c

000189e8 <mpsl_signal_thread_init>:

static int mpsl_signal_thread_init(const struct device *dev)
{
   189e8:	b530      	push	{r4, r5, lr}
   189ea:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   189ec:	4d0f      	ldr	r5, [pc, #60]	; (18a2c <mpsl_signal_thread_init+0x44>)
   189ee:	4910      	ldr	r1, [pc, #64]	; (18a30 <mpsl_signal_thread_init+0x48>)
   189f0:	2200      	movs	r2, #0
   189f2:	2300      	movs	r3, #0
   189f4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   189f8:	2400      	movs	r4, #0
   189fa:	f06f 0309 	mvn.w	r3, #9
   189fe:	e9cd 3403 	strd	r3, r4, [sp, #12]
   18a02:	e9cd 4401 	strd	r4, r4, [sp, #4]
   18a06:	4b0b      	ldr	r3, [pc, #44]	; (18a34 <mpsl_signal_thread_init+0x4c>)
   18a08:	9400      	str	r4, [sp, #0]
   18a0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   18a0e:	4628      	mov	r0, r5
   18a10:	f000 fd02 	bl	19418 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   18a14:	4908      	ldr	r1, [pc, #32]	; (18a38 <mpsl_signal_thread_init+0x50>)
   18a16:	4628      	mov	r0, r5
   18a18:	f007 fbba 	bl	20190 <z_impl_k_thread_name_set>
			signal_thread, NULL, NULL, NULL,
			K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO),
			0, K_NO_WAIT);
	k_thread_name_set(&signal_thread_data, "MPSL signal");

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   18a1c:	4622      	mov	r2, r4
   18a1e:	2104      	movs	r1, #4
   18a20:	2019      	movs	r0, #25
   18a22:	f7f9 f8ff 	bl	11c24 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   18a26:	4620      	mov	r0, r4
   18a28:	b009      	add	sp, #36	; 0x24
   18a2a:	bd30      	pop	{r4, r5, pc}
   18a2c:	20001a18 	.word	0x20001a18
   18a30:	20004ea0 	.word	0x20004ea0
   18a34:	00018a3d 	.word	0x00018a3d
   18a38:	00021d6b 	.word	0x00021d6b

00018a3c <signal_thread>:
{
   18a3c:	b510      	push	{r4, lr}
	return z_impl_k_sem_take(sem, timeout);
   18a3e:	4c09      	ldr	r4, [pc, #36]	; (18a64 <signal_thread+0x28>)
   18a40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   18a44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18a48:	4620      	mov	r0, r4
   18a4a:	f000 fe97 	bl	1977c <z_impl_k_sem_take>
		errcode = MULTITHREADING_LOCK_ACQUIRE();
   18a4e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   18a52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18a56:	f7ff fb07 	bl	18068 <multithreading_lock_acquire>
		mpsl_low_priority_process();
   18a5a:	f7f3 f900 	bl	bc5e <mpsl_low_priority_process>
		MULTITHREADING_LOCK_RELEASE();
   18a5e:	f7ff fb0b 	bl	18078 <multithreading_lock_release>
	while (true) {
   18a62:	e7ed      	b.n	18a40 <signal_thread+0x4>
   18a64:	2000073c 	.word	0x2000073c

00018a68 <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   18a68:	4b01      	ldr	r3, [pc, #4]	; (18a70 <mpsl_hfclk_callback+0x8>)
   18a6a:	2000      	movs	r0, #0
   18a6c:	681b      	ldr	r3, [r3, #0]
   18a6e:	4718      	bx	r3
   18a70:	200027d4 	.word	0x200027d4

00018a74 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
	switch (domain) {
   18a74:	b120      	cbz	r0, 18a80 <nrfx_clock_start+0xc>
   18a76:	2801      	cmp	r0, #1
   18a78:	d106      	bne.n	18a88 <nrfx_clock_start+0x14>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   18a7a:	4804      	ldr	r0, [pc, #16]	; (18a8c <nrfx_clock_start+0x18>)
   18a7c:	f7ea bd30 	b.w	34e0 <mpsl_clock_hfclk_request>
		break;
	case NRF_CLOCK_DOMAIN_LFCLK:
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   18a80:	4b03      	ldr	r3, [pc, #12]	; (18a90 <nrfx_clock_start+0x1c>)
   18a82:	2001      	movs	r0, #1
   18a84:	681b      	ldr	r3, [r3, #0]
   18a86:	4718      	bx	r3
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   18a88:	4770      	bx	lr
   18a8a:	bf00      	nop
   18a8c:	00018a69 	.word	0x00018a69
   18a90:	200027d4 	.word	0x200027d4

00018a94 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   18a94:	4b01      	ldr	r3, [pc, #4]	; (18a9c <nrfx_clock_init+0x8>)
   18a96:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   18a98:	4801      	ldr	r0, [pc, #4]	; (18aa0 <nrfx_clock_init+0xc>)
   18a9a:	4770      	bx	lr
   18a9c:	200027d4 	.word	0x200027d4
   18aa0:	0bad0000 	.word	0x0bad0000

00018aa4 <timeslot_callback>:
		      "mpsl_timeslot_request failed: %d", ret);
}

static mpsl_timeslot_signal_return_param_t *
timeslot_callback(mpsl_timeslot_session_id_t session_id, uint32_t signal)
{
   18aa4:	b538      	push	{r3, r4, r5, lr}
   18aa6:	4d1a      	ldr	r5, [pc, #104]	; (18b10 <timeslot_callback+0x6c>)
   18aa8:	f3bf 8f5b 	dmb	ish
   18aac:	6c2c      	ldr	r4, [r5, #64]	; 0x40
   18aae:	f3bf 8f5b 	dmb	ish
	int rc;
	__ASSERT_NO_MSG(session_id == _context.session_id);

	if (atomic_get(&_context.timeout_occured)) {
   18ab2:	bb5c      	cbnz	r4, 18b0c <timeslot_callback+0x68>
		return NULL;
	}

	switch (signal) {
   18ab4:	2906      	cmp	r1, #6
   18ab6:	d804      	bhi.n	18ac2 <timeslot_callback+0x1e>
   18ab8:	2904      	cmp	r1, #4
   18aba:	d81f      	bhi.n	18afc <timeslot_callback+0x58>
   18abc:	b139      	cbz	r1, 18ace <timeslot_callback+0x2a>
		__ASSERT(false, "unexpected signal: %u", signal);
		return NULL;
	}

	return &_context.return_param;
}
   18abe:	4620      	mov	r0, r4
   18ac0:	bd38      	pop	{r3, r4, r5, pc}
	switch (signal) {
   18ac2:	2907      	cmp	r1, #7
   18ac4:	d1fb      	bne.n	18abe <timeslot_callback+0x1a>
	z_impl_k_sem_give(sem);
   18ac6:	4628      	mov	r0, r5
   18ac8:	f000 fe32 	bl	19730 <z_impl_k_sem_give>
}
   18acc:	e7f7      	b.n	18abe <timeslot_callback+0x1a>
		rc = _context.op_desc->handler(_context.op_desc->context);
   18ace:	6a2b      	ldr	r3, [r5, #32]
   18ad0:	e9d3 2000 	ldrd	r2, r0, [r3]
   18ad4:	4790      	blx	r2
		if (rc != FLASH_OP_ONGOING) {
   18ad6:	2801      	cmp	r0, #1
   18ad8:	d005      	beq.n	18ae6 <timeslot_callback+0x42>
			_context.return_param.callback_action =
   18ada:	462c      	mov	r4, r5
   18adc:	2302      	movs	r3, #2
   18ade:	f804 3f34 	strb.w	r3, [r4, #52]!
			_context.status = (rc == FLASH_OP_DONE) ? 0 : rc;
   18ae2:	63e8      	str	r0, [r5, #60]	; 0x3c
			_context.return_param.callback_action =
   18ae4:	e7eb      	b.n	18abe <timeslot_callback+0x1a>
			_context.return_param.callback_action =
   18ae6:	2303      	movs	r3, #3
   18ae8:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
			_context.return_param.params.request.p_next =
   18aec:	f105 0324 	add.w	r3, r5, #36	; 0x24
			_context.timeslot_request.params.earliest.priority =
   18af0:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
			_context.return_param.params.request.p_next =
   18af4:	63ab      	str	r3, [r5, #56]	; 0x38
   18af6:	f105 0434 	add.w	r4, r5, #52	; 0x34
   18afa:	e7e0      	b.n	18abe <timeslot_callback+0x1a>
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   18afc:	7e28      	ldrb	r0, [r5, #24]
	_context.timeslot_request.params.earliest.priority =
   18afe:	f885 4029 	strb.w	r4, [r5, #41]	; 0x29
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   18b02:	f105 0124 	add.w	r1, r5, #36	; 0x24
   18b06:	f7f2 ff31 	bl	b96c <mpsl_timeslot_request>
}
   18b0a:	e7d8      	b.n	18abe <timeslot_callback+0x1a>
		return NULL;
   18b0c:	2400      	movs	r4, #0
   18b0e:	e7d6      	b.n	18abe <timeslot_callback+0x1a>
   18b10:	200027d8 	.word	0x200027d8

00018b14 <nrf_flash_sync_init>:
	return z_impl_k_sem_init(sem, initial_count, limit);
   18b14:	4802      	ldr	r0, [pc, #8]	; (18b20 <nrf_flash_sync_init+0xc>)
   18b16:	2201      	movs	r2, #1
   18b18:	2100      	movs	r1, #0
   18b1a:	f007 bc21 	b.w	20360 <z_impl_k_sem_init>
   18b1e:	bf00      	nop
   18b20:	200027d8 	.word	0x200027d8

00018b24 <nrf_flash_sync_set_context>:
}

void nrf_flash_sync_set_context(uint32_t duration)
{
	LOG_DBG("duration: %u", duration);
	_context.request_length_us = duration;
   18b24:	4b01      	ldr	r3, [pc, #4]	; (18b2c <nrf_flash_sync_set_context+0x8>)
   18b26:	61d8      	str	r0, [r3, #28]
}
   18b28:	4770      	bx	lr
   18b2a:	bf00      	nop
   18b2c:	200027d8 	.word	0x200027d8

00018b30 <nrf_flash_sync_exe>:
{
	return mpsl_is_initialized();
}

int nrf_flash_sync_exe(struct flash_op_desc *op_desc)
{
   18b30:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("");

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
	__ASSERT_NO_MSG(errcode == 0);
	int32_t ret = mpsl_timeslot_session_open(timeslot_callback,
   18b32:	4c32      	ldr	r4, [pc, #200]	; (18bfc <nrf_flash_sync_exe+0xcc>)
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   18b34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
{
   18b38:	4605      	mov	r5, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   18b3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18b3e:	f7ff fa93 	bl	18068 <multithreading_lock_acquire>
	int32_t ret = mpsl_timeslot_session_open(timeslot_callback,
   18b42:	f104 0118 	add.w	r1, r4, #24
   18b46:	482e      	ldr	r0, [pc, #184]	; (18c00 <nrf_flash_sync_exe+0xd0>)
   18b48:	f7e7 fca2 	bl	490 <mpsl_timeslot_session_open>
   18b4c:	4606      	mov	r6, r0
						 &_context.session_id);
	MULTITHREADING_LOCK_RELEASE();
   18b4e:	f7ff fa93 	bl	18078 <multithreading_lock_release>

	if (ret < 0) {
   18b52:	2e00      	cmp	r6, #0
   18b54:	db4f      	blt.n	18bf6 <nrf_flash_sync_exe+0xc6>
		return -ENOMEM;
	}

	mpsl_timeslot_request_t *req = &_context.timeslot_request;
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
	req->params.earliest.hfclk = MPSL_TIMESLOT_HFCLK_CFG_NO_GUARANTEE;
   18b56:	f240 1301 	movw	r3, #257	; 0x101
   18b5a:	8523      	strh	r3, [r4, #40]	; 0x28
	req->params.earliest.priority = MPSL_TIMESLOT_PRIORITY_NORMAL;
	req->params.earliest.length_us =
		_context.request_length_us + TIMESLOT_LENGTH_SLACK_US;
   18b5c:	69e3      	ldr	r3, [r4, #28]
	req->params.earliest.timeout_us = MPSL_TIMESLOT_EARLIEST_TIMEOUT_MAX_US;

	_context.op_desc = op_desc;
   18b5e:	6225      	str	r5, [r4, #32]
		_context.request_length_us + TIMESLOT_LENGTH_SLACK_US;
   18b60:	3364      	adds	r3, #100	; 0x64
	req->params.earliest.length_us =
   18b62:	62e3      	str	r3, [r4, #44]	; 0x2c
	req->params.earliest.timeout_us = MPSL_TIMESLOT_EARLIEST_TIMEOUT_MAX_US;
   18b64:	4b27      	ldr	r3, [pc, #156]	; (18c04 <nrf_flash_sync_exe+0xd4>)
   18b66:	6323      	str	r3, [r4, #48]	; 0x30
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
   18b68:	2200      	movs	r2, #0
	_context.status = -ETIMEDOUT;
   18b6a:	f06f 0373 	mvn.w	r3, #115	; 0x73
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
   18b6e:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
	_context.status = -ETIMEDOUT;
   18b72:	63e3      	str	r3, [r4, #60]	; 0x3c
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   18b74:	f104 0540 	add.w	r5, r4, #64	; 0x40
   18b78:	f3bf 8f5b 	dmb	ish
   18b7c:	e855 3f00 	ldrex	r3, [r5]
   18b80:	e845 2100 	strex	r1, r2, [r5]
   18b84:	2900      	cmp	r1, #0
   18b86:	d1f9      	bne.n	18b7c <nrf_flash_sync_exe+0x4c>
   18b88:	f3bf 8f5b 	dmb	ish
	atomic_clear(&_context.timeout_occured);

	__ASSERT_NO_MSG(k_sem_count_get(&_context.timeout_sem) == 0);

	errcode = MULTITHREADING_LOCK_ACQUIRE();
   18b8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   18b90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18b94:	f7ff fa68 	bl	18068 <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
	ret = mpsl_timeslot_request(_context.session_id, req);
   18b98:	f104 0124 	add.w	r1, r4, #36	; 0x24
   18b9c:	7e20      	ldrb	r0, [r4, #24]
   18b9e:	f7f2 fee5 	bl	b96c <mpsl_timeslot_request>
	__ASSERT_EVAL((void)ret, (void)ret, ret == 0,
		      "mpsl_timeslot_request failed: %d", ret);
	MULTITHREADING_LOCK_RELEASE();
   18ba2:	f7ff fa69 	bl	18078 <multithreading_lock_release>
	return z_impl_k_sem_take(sem, timeout);
   18ba6:	4a18      	ldr	r2, [pc, #96]	; (18c08 <nrf_flash_sync_exe+0xd8>)
   18ba8:	2300      	movs	r3, #0
   18baa:	4620      	mov	r0, r4
   18bac:	f000 fde6 	bl	1977c <z_impl_k_sem_take>

	if (k_sem_take(&_context.timeout_sem, K_MSEC(FLASH_TIMEOUT_MS)) < 0) {
   18bb0:	2800      	cmp	r0, #0
   18bb2:	da0a      	bge.n	18bca <nrf_flash_sync_exe+0x9a>
   18bb4:	f3bf 8f5b 	dmb	ish
   18bb8:	2301      	movs	r3, #1
   18bba:	e855 2f00 	ldrex	r2, [r5]
   18bbe:	e845 3100 	strex	r1, r3, [r5]
   18bc2:	2900      	cmp	r1, #0
   18bc4:	d1f9      	bne.n	18bba <nrf_flash_sync_exe+0x8a>
   18bc6:	f3bf 8f5b 	dmb	ish
		LOG_ERR("timeout");
		atomic_set(&_context.timeout_occured, 1);
	}

	/* This will cancel the timeslot if it is still in progress. */
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   18bca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   18bce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18bd2:	f7ff fa49 	bl	18068 <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
	mpsl_timeslot_session_close(_context.session_id);
   18bd6:	7e20      	ldrb	r0, [r4, #24]
   18bd8:	f7f2 ff01 	bl	b9de <mpsl_timeslot_session_close>
	MULTITHREADING_LOCK_RELEASE();
   18bdc:	f7ff fa4c 	bl	18078 <multithreading_lock_release>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18be0:	f3bf 8f5b 	dmb	ish
   18be4:	6c23      	ldr	r3, [r4, #64]	; 0x40
   18be6:	f3bf 8f5b 	dmb	ish

	/* Reset the semaphore after timeout, in case if the operation _did_
	 * complete before closing the session. */
	if (atomic_get(&_context.timeout_occured)) {
   18bea:	b113      	cbz	r3, 18bf2 <nrf_flash_sync_exe+0xc2>
	z_impl_k_sem_reset(sem);
   18bec:	4803      	ldr	r0, [pc, #12]	; (18bfc <nrf_flash_sync_exe+0xcc>)
   18bee:	f000 fded 	bl	197cc <z_impl_k_sem_reset>
		k_sem_reset(&_context.timeout_sem);
	}

	return _context.status;
   18bf2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
   18bf4:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   18bf6:	f06f 000b 	mvn.w	r0, #11
   18bfa:	e7fb      	b.n	18bf4 <nrf_flash_sync_exe+0xc4>
   18bfc:	200027d8 	.word	0x200027d8
   18c00:	00018aa5 	.word	0x00018aa5
   18c04:	07a11fff 	.word	0x07a11fff
   18c08:	000b7b44 	.word	0x000b7b44

00018c0c <nrf_flash_sync_check_time_limit>:
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_timer_task_trigger(NRF_TIMER_Type * p_reg,
                                              nrf_timer_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18c0c:	4b07      	ldr	r3, [pc, #28]	; (18c2c <nrf_flash_sync_check_time_limit+0x20>)
   18c0e:	2201      	movs	r2, #1
   18c10:	641a      	str	r2, [r3, #64]	; 0x40
}

NRF_STATIC_INLINE uint32_t nrf_timer_cc_get(NRF_TIMER_Type const * p_reg,
                                            nrf_timer_cc_channel_t cc_channel)
{
    return (uint32_t)p_reg->CC[cc_channel];
   18c12:	f8d3 3540 	ldr.w	r3, [r3, #1344]	; 0x540
}

bool nrf_flash_sync_check_time_limit(uint32_t iteration)
{
	uint32_t now_us = get_timeslot_time_us();
	uint32_t time_per_iteration_us = now_us / iteration;
   18c16:	fbb3 f0f0 	udiv	r0, r3, r0
	return now_us + time_per_iteration_us >= _context.request_length_us;
   18c1a:	4418      	add	r0, r3
   18c1c:	4b04      	ldr	r3, [pc, #16]	; (18c30 <nrf_flash_sync_check_time_limit+0x24>)
   18c1e:	69db      	ldr	r3, [r3, #28]
}
   18c20:	4298      	cmp	r0, r3
   18c22:	bf34      	ite	cc
   18c24:	2000      	movcc	r0, #0
   18c26:	2001      	movcs	r0, #1
   18c28:	4770      	bx	lr
   18c2a:	bf00      	nop
   18c2c:	40008000 	.word	0x40008000
   18c30:	200027d8 	.word	0x200027d8

00018c34 <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   18c34:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   18c38:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   18c3c:	2a06      	cmp	r2, #6
   18c3e:	d109      	bne.n	18c54 <nrf52_errata_16+0x20>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   18c40:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
   18c44:	f3c3 1303 	ubfx	r3, r3, #4, #4
   18c48:	3b03      	subs	r3, #3
   18c4a:	2b04      	cmp	r3, #4
   18c4c:	d802      	bhi.n	18c54 <nrf52_errata_16+0x20>
   18c4e:	4a02      	ldr	r2, [pc, #8]	; (18c58 <nrf52_errata_16+0x24>)
   18c50:	5cd0      	ldrb	r0, [r2, r3]
   18c52:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
   18c54:	2000      	movs	r0, #0
    #endif
}
   18c56:	4770      	bx	lr
   18c58:	00021d86 	.word	0x00021d86

00018c5c <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   18c5c:	4a02      	ldr	r2, [pc, #8]	; (18c68 <nvmc_wait+0xc>)
   18c5e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   18c62:	2b00      	cmp	r3, #0
   18c64:	d0fb      	beq.n	18c5e <nvmc_wait+0x2>
}
   18c66:	4770      	bx	lr
   18c68:	4001e000 	.word	0x4001e000

00018c6c <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   18c6c:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
   18c6e:	f007 f9ae 	bl	1ffce <nrf52_errata_108>
   18c72:	b140      	cbz	r0, 18c86 <SystemInit+0x1a>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
   18c74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   18c78:	4a90      	ldr	r2, [pc, #576]	; (18ebc <SystemInit+0x250>)
   18c7a:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
   18c7e:	f3c3 2304 	ubfx	r3, r3, #8, #5
   18c82:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
   18c86:	f7ff ffd5 	bl	18c34 <nrf52_errata_16>
   18c8a:	b110      	cbz	r0, 18c92 <SystemInit+0x26>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
   18c8c:	4b8c      	ldr	r3, [pc, #560]	; (18ec0 <SystemInit+0x254>)
   18c8e:	4a8d      	ldr	r2, [pc, #564]	; (18ec4 <SystemInit+0x258>)
   18c90:	675a      	str	r2, [r3, #116]	; 0x74
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
   18c92:	f007 f99c 	bl	1ffce <nrf52_errata_108>
   18c96:	b148      	cbz	r0, 18cac <SystemInit+0x40>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
   18c98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   18c9c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   18ca0:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
   18ca4:	f3c3 3342 	ubfx	r3, r3, #13, #3
   18ca8:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
   18cac:	f7ff ffc2 	bl	18c34 <nrf52_errata_16>
   18cb0:	b130      	cbz	r0, 18cc0 <SystemInit+0x54>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
   18cb2:	4a85      	ldr	r2, [pc, #532]	; (18ec8 <SystemInit+0x25c>)
   18cb4:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
   18cb8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   18cbc:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   18cc0:	f007 f985 	bl	1ffce <nrf52_errata_108>
   18cc4:	b140      	cbz	r0, 18cd8 <SystemInit+0x6c>
            NRF_CLOCK->EVENTS_DONE = 0;
   18cc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   18cca:	2200      	movs	r2, #0
   18ccc:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   18cd0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   18cd4:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
   18cd8:	f7ff ffac 	bl	18c34 <nrf52_errata_16>
   18cdc:	b120      	cbz	r0, 18ce8 <SystemInit+0x7c>
            *(volatile uint32_t *)0x400005A0 = 0x3;
   18cde:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   18ce2:	2203      	movs	r2, #3
   18ce4:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
   18ce8:	f7ff ffa4 	bl	18c34 <nrf52_errata_16>
   18cec:	b160      	cbz	r0, 18d08 <SystemInit+0x9c>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
   18cee:	4b77      	ldr	r3, [pc, #476]	; (18ecc <SystemInit+0x260>)
   18cf0:	2205      	movs	r2, #5
   18cf2:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
            *(volatile uint32_t *)0x40005688 = 0x00000001;
   18cf6:	2201      	movs	r2, #1
   18cf8:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
            *(volatile uint32_t *)0x40005618 = 0x00000000;
   18cfc:	2200      	movs	r2, #0
   18cfe:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
   18d02:	223f      	movs	r2, #63	; 0x3f
   18d04:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   18d08:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   18d0c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   18d10:	1c51      	adds	r1, r2, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   18d12:	bf09      	itett	eq
   18d14:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
   18d18:	f8d3 3134 	ldrne.w	r3, [r3, #308]	; 0x134
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   18d1c:	f893 2fe0 	ldrbeq.w	r2, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   18d20:	f8d3 3fe8 	ldreq.w	r3, [r3, #4072]	; 0xfe8
   18d24:	bf08      	it	eq
   18d26:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   18d2a:	2a06      	cmp	r2, #6
   18d2c:	d14d      	bne.n	18dca <SystemInit+0x15e>
            {
                switch(var2)
   18d2e:	3b03      	subs	r3, #3
   18d30:	2b04      	cmp	r3, #4
   18d32:	d803      	bhi.n	18d3c <SystemInit+0xd0>
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   18d34:	4a66      	ldr	r2, [pc, #408]	; (18ed0 <SystemInit+0x264>)
   18d36:	5cd3      	ldrb	r3, [r2, r3]
   18d38:	2b00      	cmp	r3, #0
   18d3a:	d046      	beq.n	18dca <SystemInit+0x15e>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   18d3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   18d40:	4b64      	ldr	r3, [pc, #400]	; (18ed4 <SystemInit+0x268>)
   18d42:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   18d46:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   18d4a:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   18d4e:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   18d52:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   18d56:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   18d5a:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   18d5e:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   18d62:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   18d66:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   18d6a:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   18d6e:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   18d72:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   18d76:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   18d7a:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   18d7e:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   18d82:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   18d86:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   18d8a:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   18d8e:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   18d92:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   18d96:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   18d9a:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   18d9e:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   18da2:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   18da6:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   18daa:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   18dae:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   18db2:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   18db6:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   18dba:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   18dbe:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   18dc2:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   18dc6:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
   18dca:	f007 f900 	bl	1ffce <nrf52_errata_108>
   18dce:	b148      	cbz	r0, 18de4 <SystemInit+0x178>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
   18dd0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   18dd4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   18dd8:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   18ddc:	f003 034f 	and.w	r3, r3, #79	; 0x4f
   18de0:	f8c2 3ee4 	str.w	r3, [r2, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   18de4:	f007 f8f3 	bl	1ffce <nrf52_errata_108>
   18de8:	b148      	cbz	r0, 18dfe <SystemInit+0x192>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   18dea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   18dee:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   18df2:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   18df4:	bf44      	itt	mi
   18df6:	f06f 0201 	mvnmi.w	r2, #1
   18dfa:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   18dfe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   18e02:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   18e06:	2a06      	cmp	r2, #6
   18e08:	d126      	bne.n	18e58 <SystemInit+0x1ec>
            {
                switch(var2)
   18e0a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   18e0e:	3b03      	subs	r3, #3
   18e10:	2b04      	cmp	r3, #4
   18e12:	d802      	bhi.n	18e1a <SystemInit+0x1ae>
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
   18e14:	4a30      	ldr	r2, [pc, #192]	; (18ed8 <SystemInit+0x26c>)
   18e16:	5cd3      	ldrb	r3, [r2, r3]
   18e18:	b163      	cbz	r3, 18e34 <SystemInit+0x1c8>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
   18e1a:	4a30      	ldr	r2, [pc, #192]	; (18edc <SystemInit+0x270>)
   18e1c:	f8d2 373c 	ldr.w	r3, [r2, #1852]	; 0x73c
   18e20:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   18e24:	f8c2 373c 	str.w	r3, [r2, #1852]	; 0x73c
        #if defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   18e28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   18e2c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   18e30:	2b06      	cmp	r3, #6
   18e32:	d111      	bne.n	18e58 <SystemInit+0x1ec>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   18e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   18e38:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   18e3c:	3b03      	subs	r3, #3
   18e3e:	2b04      	cmp	r3, #4
   18e40:	d802      	bhi.n	18e48 <SystemInit+0x1dc>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_errata_249())
   18e42:	4a27      	ldr	r2, [pc, #156]	; (18ee0 <SystemInit+0x274>)
   18e44:	5cd3      	ldrb	r3, [r2, r3]
   18e46:	b13b      	cbz	r3, 18e58 <SystemInit+0x1ec>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   18e48:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   18e4c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   18e50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   18e54:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   18e58:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   18e5c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   18e60:	2a00      	cmp	r2, #0
   18e62:	db03      	blt.n	18e6c <SystemInit+0x200>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   18e64:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   18e68:	2b00      	cmp	r3, #0
   18e6a:	da22      	bge.n	18eb2 <SystemInit+0x246>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   18e6c:	491d      	ldr	r1, [pc, #116]	; (18ee4 <SystemInit+0x278>)
   18e6e:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   18e70:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   18e74:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   18e78:	2415      	movs	r4, #21
    nvmc_wait();
   18e7a:	f7ff feef 	bl	18c5c <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   18e7e:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   18e82:	f7ff feeb 	bl	18c5c <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   18e86:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   18e8a:	f7ff fee7 	bl	18c5c <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   18e8e:	2300      	movs	r3, #0
   18e90:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   18e94:	f7ff fee2 	bl	18c5c <nvmc_wait>
   18e98:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   18e9c:	490a      	ldr	r1, [pc, #40]	; (18ec8 <SystemInit+0x25c>)
   18e9e:	4b12      	ldr	r3, [pc, #72]	; (18ee8 <SystemInit+0x27c>)
   18ea0:	68ca      	ldr	r2, [r1, #12]
   18ea2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   18ea6:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   18ea8:	60cb      	str	r3, [r1, #12]
   18eaa:	f3bf 8f4f 	dsb	sy
    __NOP();
   18eae:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   18eb0:	e7fd      	b.n	18eae <SystemInit+0x242>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   18eb2:	4b0e      	ldr	r3, [pc, #56]	; (18eec <SystemInit+0x280>)
   18eb4:	4a0e      	ldr	r2, [pc, #56]	; (18ef0 <SystemInit+0x284>)
   18eb6:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   18eb8:	bd10      	pop	{r4, pc}
   18eba:	bf00      	nop
   18ebc:	40013000 	.word	0x40013000
   18ec0:	4007c000 	.word	0x4007c000
   18ec4:	baadf00d 	.word	0xbaadf00d
   18ec8:	e000ed00 	.word	0xe000ed00
   18ecc:	40005000 	.word	0x40005000
   18ed0:	00021d77 	.word	0x00021d77
   18ed4:	4000c000 	.word	0x4000c000
   18ed8:	00021d7c 	.word	0x00021d7c
   18edc:	40001000 	.word	0x40001000
   18ee0:	00021d81 	.word	0x00021d81
   18ee4:	4001e000 	.word	0x4001e000
   18ee8:	05fa0004 	.word	0x05fa0004
   18eec:	2000058c 	.word	0x2000058c
   18ef0:	03d09000 	.word	0x03d09000

00018ef4 <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   18ef4:	2301      	movs	r3, #1
   18ef6:	fa03 f000 	lsl.w	r0, r3, r0
   18efa:	b2c3      	uxtb	r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
   18efc:	b193      	cbz	r3, 18f24 <nrfx_gpiote_channel_free+0x30>
	__asm__ volatile(
   18efe:	f04f 0340 	mov.w	r3, #64	; 0x40
   18f02:	f3ef 8111 	mrs	r1, BASEPRI
   18f06:	f383 8811 	msr	BASEPRI, r3
   18f0a:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
   18f0e:	4a06      	ldr	r2, [pc, #24]	; (18f28 <nrfx_gpiote_channel_free+0x34>)
   18f10:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   18f12:	ea23 0000 	bic.w	r0, r3, r0
   18f16:	64d0      	str	r0, [r2, #76]	; 0x4c
	__asm__ volatile(
   18f18:	f381 8811 	msr	BASEPRI, r1
   18f1c:	f3bf 8f6f 	isb	sy
   18f20:	4802      	ldr	r0, [pc, #8]	; (18f2c <nrfx_gpiote_channel_free+0x38>)
   18f22:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
   18f24:	4802      	ldr	r0, [pc, #8]	; (18f30 <nrfx_gpiote_channel_free+0x3c>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   18f26:	4770      	bx	lr
   18f28:	2000281c 	.word	0x2000281c
   18f2c:	0bad0000 	.word	0x0bad0000
   18f30:	0bad0004 	.word	0x0bad0004

00018f34 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
   18f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18f38:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
   18f3a:	f8df e05c 	ldr.w	lr, [pc, #92]	; 18f98 <nrfx_gpiote_channel_alloc+0x64>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   18f3e:	4817      	ldr	r0, [pc, #92]	; (18f9c <nrfx_gpiote_channel_alloc+0x68>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
   18f40:	f8df 805c 	ldr.w	r8, [pc, #92]	; 18fa0 <nrfx_gpiote_channel_alloc+0x6c>
{
   18f44:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
   18f46:	22ff      	movs	r2, #255	; 0xff
    return m_cb.allocated_channels_mask & (1UL << index);
   18f48:	2601      	movs	r6, #1
   18f4a:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
   18f4c:	f04f 0140 	mov.w	r1, #64	; 0x40
   18f50:	f3ef 8c11 	mrs	ip, BASEPRI
   18f54:	f381 8811 	msr	BASEPRI, r1
   18f58:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   18f5c:	fa22 f103 	lsr.w	r1, r2, r3
   18f60:	07c9      	lsls	r1, r1, #31
   18f62:	d50a      	bpl.n	18f7a <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
   18f64:	f8de 104c 	ldr.w	r1, [lr, #76]	; 0x4c
   18f68:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   18f6c:	4239      	tst	r1, r7
    m_cb.allocated_channels_mask |= (1UL << index);
   18f6e:	bf01      	itttt	eq
   18f70:	4339      	orreq	r1, r7
   18f72:	f8ce 104c 	streq.w	r1, [lr, #76]	; 0x4c
            err_code = NRFX_SUCCESS;
   18f76:	4640      	moveq	r0, r8
            *p_channel = ch_idx;
   18f78:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
   18f7a:	f38c 8811 	msr	BASEPRI, ip
   18f7e:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
   18f82:	4540      	cmp	r0, r8
   18f84:	d005      	beq.n	18f92 <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
   18f86:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   18f8a:	439a      	bics	r2, r3
   18f8c:	f104 0401 	add.w	r4, r4, #1
   18f90:	d1db      	bne.n	18f4a <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   18f92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18f96:	bf00      	nop
   18f98:	2000281c 	.word	0x2000281c
   18f9c:	0bad0002 	.word	0x0bad0002
   18fa0:	0bad0000 	.word	0x0bad0000

00018fa4 <nvmc_word_write>:
   18fa4:	4a04      	ldr	r2, [pc, #16]	; (18fb8 <nvmc_word_write+0x14>)
   18fa6:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   18faa:	07db      	lsls	r3, r3, #31
   18fac:	d5fb      	bpl.n	18fa6 <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   18fae:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   18fb0:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   18fb4:	4770      	bx	lr
   18fb6:	bf00      	nop
   18fb8:	4001e000 	.word	0x4001e000

00018fbc <nrfx_nvmc_page_erase>:
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   18fbc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   18fc0:	691a      	ldr	r2, [r3, #16]
    return !(addr % flash_page_size_get());
   18fc2:	fbb0 f3f2 	udiv	r3, r0, r2
   18fc6:	fb02 0313 	mls	r3, r2, r3, r0

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
   18fca:	b973      	cbnz	r3, 18fea <nrfx_nvmc_page_erase+0x2e>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
   18fcc:	4b08      	ldr	r3, [pc, #32]	; (18ff0 <nrfx_nvmc_page_erase+0x34>)
   18fce:	2202      	movs	r2, #2
   18fd0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
   18fd4:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   18fd8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   18fdc:	07d2      	lsls	r2, r2, #31
   18fde:	d5fb      	bpl.n	18fd8 <nrfx_nvmc_page_erase+0x1c>
    p_reg->CONFIG = (uint32_t)mode;
   18fe0:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   18fe2:	4804      	ldr	r0, [pc, #16]	; (18ff4 <nrfx_nvmc_page_erase+0x38>)
   18fe4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   18fe8:	4770      	bx	lr
        return NRFX_ERROR_INVALID_ADDR;
   18fea:	4803      	ldr	r0, [pc, #12]	; (18ff8 <nrfx_nvmc_page_erase+0x3c>)
}
   18fec:	4770      	bx	lr
   18fee:	bf00      	nop
   18ff0:	4001e000 	.word	0x4001e000
   18ff4:	0bad0000 	.word	0x0bad0000
   18ff8:	0bad000a 	.word	0x0bad000a

00018ffc <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   18ffc:	b510      	push	{r4, lr}
   18ffe:	4c05      	ldr	r4, [pc, #20]	; (19014 <nrfx_nvmc_word_write+0x18>)
   19000:	2301      	movs	r3, #1
   19002:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   19006:	f7ff ffcd 	bl	18fa4 <nvmc_word_write>
   1900a:	2300      	movs	r3, #0
   1900c:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504

    nvmc_readonly_mode_set();
}
   19010:	bd10      	pop	{r4, pc}
   19012:	bf00      	nop
   19014:	4001e000 	.word	0x4001e000

00019018 <nrfx_ppi_channel_alloc>:


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   19018:	4b18      	ldr	r3, [pc, #96]	; (1907c <nrfx_ppi_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
        {
            channel_allocated_set(channel);
            *p_channel = channel;
            err_code   = NRFX_SUCCESS;
   1901a:	f8df c064 	ldr.w	ip, [pc, #100]	; 19080 <nrfx_ppi_channel_alloc+0x68>
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   1901e:	681b      	ldr	r3, [r3, #0]
{
   19020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   19024:	43db      	mvns	r3, r3
{
   19026:	4605      	mov	r5, r0
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
   19028:	4f16      	ldr	r7, [pc, #88]	; (19084 <nrfx_ppi_channel_alloc+0x6c>)
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   1902a:	4817      	ldr	r0, [pc, #92]	; (19088 <nrfx_ppi_channel_alloc+0x70>)
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   1902c:	f3c3 0313 	ubfx	r3, r3, #0, #20
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
   19030:	2400      	movs	r4, #0
NRFX_STATIC_INLINE uint32_t nrfx_ppi_task_addr_group_disable_get(nrf_ppi_channel_group_t group);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE uint32_t nrfx_ppi_channel_to_mask(nrf_ppi_channel_t channel)
{
    return (1uL << (uint32_t) channel);
   19032:	f04f 0e01 	mov.w	lr, #1
   19036:	b2e6      	uxtb	r6, r4
   19038:	b90b      	cbnz	r3, 1903e <nrfx_ppi_channel_alloc+0x26>
        mask &= ~nrfx_ppi_channel_to_mask(channel);
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1903a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   1903e:	f04f 0240 	mov.w	r2, #64	; 0x40
   19042:	f3ef 8811 	mrs	r8, BASEPRI
   19046:	f382 8811 	msr	BASEPRI, r2
   1904a:	f3bf 8f6f 	isb	sy
   1904e:	fa0e f206 	lsl.w	r2, lr, r6
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
   19052:	421a      	tst	r2, r3
   19054:	d006      	beq.n	19064 <nrfx_ppi_channel_alloc+0x4c>
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
   19056:	6839      	ldr	r1, [r7, #0]
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
   19058:	420a      	tst	r2, r1
    m_channels_allocated |= nrfx_ppi_channel_to_mask(channel);
   1905a:	bf01      	itttt	eq
   1905c:	4311      	orreq	r1, r2
   1905e:	6039      	streq	r1, [r7, #0]
            *p_channel = channel;
   19060:	702e      	strbeq	r6, [r5, #0]
            err_code   = NRFX_SUCCESS;
   19062:	4660      	moveq	r0, ip
	__asm__ volatile(
   19064:	f388 8811 	msr	BASEPRI, r8
   19068:	f3bf 8f6f 	isb	sy
        if (err_code == NRFX_SUCCESS)
   1906c:	4560      	cmp	r0, ip
   1906e:	f104 0401 	add.w	r4, r4, #1
   19072:	d0e2      	beq.n	1903a <nrfx_ppi_channel_alloc+0x22>
        mask &= ~nrfx_ppi_channel_to_mask(channel);
   19074:	ea23 0302 	bic.w	r3, r3, r2
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
   19078:	e7dd      	b.n	19036 <nrfx_ppi_channel_alloc+0x1e>
   1907a:	bf00      	nop
   1907c:	0002152c 	.word	0x0002152c
   19080:	0bad0000 	.word	0x0bad0000
   19084:	2000286c 	.word	0x2000286c
   19088:	0bad0002 	.word	0x0bad0002

0001908c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   1908c:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1908e:	4c14      	ldr	r4, [pc, #80]	; (190e0 <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   19090:	4a14      	ldr	r2, [pc, #80]	; (190e4 <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   19092:	4915      	ldr	r1, [pc, #84]	; (190e8 <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   19094:	2303      	movs	r3, #3
   19096:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   19098:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1909a:	4b14      	ldr	r3, [pc, #80]	; (190ec <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
   1909c:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1909e:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   190a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
   190a4:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   190a6:	2300      	movs	r3, #0
   190a8:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   190aa:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   190ac:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   190ae:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   190b0:	4a0f      	ldr	r2, [pc, #60]	; (190f0 <_DoInit+0x64>)
   190b2:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
   190b4:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   190b6:	2210      	movs	r2, #16
   190b8:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   190ba:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   190bc:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   190be:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   190c0:	f003 fda9 	bl	1cc16 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   190c4:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
   190c8:	490a      	ldr	r1, [pc, #40]	; (190f4 <_DoInit+0x68>)
   190ca:	4620      	mov	r0, r4
   190cc:	f003 fda3 	bl	1cc16 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   190d0:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
   190d4:	2320      	movs	r3, #32
   190d6:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   190d8:	f3bf 8f5f 	dmb	sy
}
   190dc:	bd10      	pop	{r4, pc}
   190de:	bf00      	nop
   190e0:	20002870 	.word	0x20002870
   190e4:	00021d8b 	.word	0x00021d8b
   190e8:	00021d94 	.word	0x00021d94
   190ec:	200032fe 	.word	0x200032fe
   190f0:	200032ee 	.word	0x200032ee
   190f4:	00021d98 	.word	0x00021d98

000190f8 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   190f8:	4b0e      	ldr	r3, [pc, #56]	; (19134 <z_sys_init_run_level+0x3c>)
{
   190fa:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   190fc:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   19100:	3001      	adds	r0, #1
   19102:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   19106:	42a6      	cmp	r6, r4
   19108:	d800      	bhi.n	1910c <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   1910a:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   1910c:	e9d4 3500 	ldrd	r3, r5, [r4]
   19110:	4628      	mov	r0, r5
   19112:	4798      	blx	r3
		if (dev != NULL) {
   19114:	b165      	cbz	r5, 19130 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
   19116:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
   19118:	b130      	cbz	r0, 19128 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   1911a:	2800      	cmp	r0, #0
   1911c:	bfb8      	it	lt
   1911e:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   19120:	28ff      	cmp	r0, #255	; 0xff
   19122:	bfa8      	it	ge
   19124:	20ff      	movge	r0, #255	; 0xff
   19126:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   19128:	785a      	ldrb	r2, [r3, #1]
   1912a:	f042 0201 	orr.w	r2, r2, #1
   1912e:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   19130:	3408      	adds	r4, #8
   19132:	e7e8      	b.n	19106 <z_sys_init_run_level+0xe>
   19134:	00021530 	.word	0x00021530

00019138 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   19138:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   1913a:	4605      	mov	r5, r0
   1913c:	b910      	cbnz	r0, 19144 <z_impl_device_get_binding+0xc>
		return NULL;
   1913e:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   19140:	4620      	mov	r0, r4
   19142:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   19144:	7803      	ldrb	r3, [r0, #0]
   19146:	2b00      	cmp	r3, #0
   19148:	d0f9      	beq.n	1913e <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   1914a:	4c0e      	ldr	r4, [pc, #56]	; (19184 <z_impl_device_get_binding+0x4c>)
   1914c:	4e0e      	ldr	r6, [pc, #56]	; (19188 <z_impl_device_get_binding+0x50>)
   1914e:	42b4      	cmp	r4, r6
   19150:	d108      	bne.n	19164 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
   19152:	4c0c      	ldr	r4, [pc, #48]	; (19184 <z_impl_device_get_binding+0x4c>)
   19154:	42b4      	cmp	r4, r6
   19156:	d0f2      	beq.n	1913e <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   19158:	4620      	mov	r0, r4
   1915a:	f006 ff5f 	bl	2001c <z_device_ready>
   1915e:	b950      	cbnz	r0, 19176 <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
   19160:	3418      	adds	r4, #24
   19162:	e7f7      	b.n	19154 <z_impl_device_get_binding+0x1c>
		if (z_device_ready(dev) && (dev->name == name)) {
   19164:	4620      	mov	r0, r4
   19166:	f006 ff59 	bl	2001c <z_device_ready>
   1916a:	b110      	cbz	r0, 19172 <z_impl_device_get_binding+0x3a>
   1916c:	6823      	ldr	r3, [r4, #0]
   1916e:	42ab      	cmp	r3, r5
   19170:	d0e6      	beq.n	19140 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   19172:	3418      	adds	r4, #24
   19174:	e7eb      	b.n	1914e <z_impl_device_get_binding+0x16>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   19176:	6821      	ldr	r1, [r4, #0]
   19178:	4628      	mov	r0, r5
   1917a:	f003 fd66 	bl	1cc4a <strcmp>
   1917e:	2800      	cmp	r0, #0
   19180:	d1ee      	bne.n	19160 <z_impl_device_get_binding+0x28>
   19182:	e7dd      	b.n	19140 <z_impl_device_get_binding+0x8>
   19184:	00020b60 	.word	0x00020b60
   19188:	00020bf0 	.word	0x00020bf0

0001918c <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   1918c:	4b01      	ldr	r3, [pc, #4]	; (19194 <z_impl_z_errno+0x8>)
   1918e:	6898      	ldr	r0, [r3, #8]
}
   19190:	3064      	adds	r0, #100	; 0x64
   19192:	4770      	bx	lr
   19194:	20002918 	.word	0x20002918

00019198 <z_bss_zero>:
 * @return N/A
 */
__boot_func
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   19198:	4802      	ldr	r0, [pc, #8]	; (191a4 <z_bss_zero+0xc>)
   1919a:	4a03      	ldr	r2, [pc, #12]	; (191a8 <z_bss_zero+0x10>)
   1919c:	2100      	movs	r1, #0
   1919e:	1a12      	subs	r2, r2, r0
   191a0:	f003 bd8c 	b.w	1ccbc <memset>
   191a4:	20000860 	.word	0x20000860
   191a8:	20003700 	.word	0x20003700

000191ac <bg_thread_main>:
 *
 * @return N/A
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   191ac:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   191ae:	4b0a      	ldr	r3, [pc, #40]	; (191d8 <bg_thread_main+0x2c>)
   191b0:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   191b2:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   191b4:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   191b6:	f7ff ff9f 	bl	190f8 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   191ba:	f001 fa43 	bl	1a644 <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   191be:	2003      	movs	r0, #3
   191c0:	f7ff ff9a 	bl	190f8 <z_sys_init_run_level>

	z_init_static_threads();
   191c4:	f000 f954 	bl	19470 <z_init_static_threads>
	z_sys_init_run_level(_SYS_INIT_LEVEL_SMP);
#endif

	extern void main(void);

	main();
   191c8:	f7f6 fe0e 	bl	fde8 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   191cc:	4a03      	ldr	r2, [pc, #12]	; (191dc <bg_thread_main+0x30>)
   191ce:	7b13      	ldrb	r3, [r2, #12]
   191d0:	f023 0301 	bic.w	r3, r3, #1
   191d4:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   191d6:	bd08      	pop	{r3, pc}
   191d8:	200036fe 	.word	0x200036fe
   191dc:	20001b18 	.word	0x20001b18

000191e0 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   191e0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   191e4:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 192c8 <z_cstart+0xe8>
   191e8:	b0a7      	sub	sp, #156	; 0x9c
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   191ea:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   191ee:	4d37      	ldr	r5, [pc, #220]	; (192cc <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
   191f0:	4e37      	ldr	r6, [pc, #220]	; (192d0 <z_cstart+0xf0>)
   191f2:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   191f4:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 192d4 <z_cstart+0xf4>
	z_setup_new_thread(thread, stack,
   191f8:	4f37      	ldr	r7, [pc, #220]	; (192d8 <z_cstart+0xf8>)
   191fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   191fe:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   19200:	23e0      	movs	r3, #224	; 0xe0
   19202:	2400      	movs	r4, #0
   19204:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   19208:	2320      	movs	r3, #32
   1920a:	77eb      	strb	r3, [r5, #31]
   1920c:	762c      	strb	r4, [r5, #24]
   1920e:	766c      	strb	r4, [r5, #25]
   19210:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   19212:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   19214:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   19218:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1921a:	f7f8 fedf 	bl	11fdc <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1921e:	f7f8 fd71 	bl	11d04 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   19222:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19226:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   19228:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   1922a:	f7f8 ffe5 	bl	121f8 <z_arm_mpu_init>
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   1922e:	4d2b      	ldr	r5, [pc, #172]	; (192dc <z_cstart+0xfc>)
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   19230:	f7f8 ff4c 	bl	120cc <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   19234:	f240 1301 	movw	r3, #257	; 0x101
   19238:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   1923c:	ab06      	add	r3, sp, #24
   1923e:	60ab      	str	r3, [r5, #8]
	dummy_thread->stack_info.size = 0U;
   19240:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   19244:	f006 fee9 	bl	2001a <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   19248:	4620      	mov	r0, r4
   1924a:	f7ff ff55 	bl	190f8 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1924e:	2001      	movs	r0, #1
   19250:	f7ff ff52 	bl	190f8 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   19254:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
   19258:	f000 fedc 	bl	1a014 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1925c:	4b20      	ldr	r3, [pc, #128]	; (192e0 <z_cstart+0x100>)
	_kernel.ready_q.cache = &z_main_thread;
   1925e:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   19260:	4920      	ldr	r1, [pc, #128]	; (192e4 <z_cstart+0x104>)
   19262:	9305      	str	r3, [sp, #20]
   19264:	f44f 6280 	mov.w	r2, #1024	; 0x400
   19268:	4653      	mov	r3, sl
   1926a:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   1926e:	e9cd 4401 	strd	r4, r4, [sp, #4]
   19272:	9400      	str	r4, [sp, #0]
   19274:	4630      	mov	r0, r6
   19276:	f000 f89d 	bl	193b4 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1927a:	7b73      	ldrb	r3, [r6, #13]
   1927c:	4680      	mov	r8, r0
   1927e:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   19282:	4630      	mov	r0, r6
   19284:	7373      	strb	r3, [r6, #13]
   19286:	f007 f9d6 	bl	20636 <z_ready_thread>
	z_setup_new_thread(thread, stack,
   1928a:	230f      	movs	r3, #15
   1928c:	e9cd 4302 	strd	r4, r3, [sp, #8]
   19290:	4915      	ldr	r1, [pc, #84]	; (192e8 <z_cstart+0x108>)
   19292:	4b16      	ldr	r3, [pc, #88]	; (192ec <z_cstart+0x10c>)
   19294:	f44f 72a0 	mov.w	r2, #320	; 0x140
   19298:	e9cd b404 	strd	fp, r4, [sp, #16]
   1929c:	e9cd 5400 	strd	r5, r4, [sp]
   192a0:	4638      	mov	r0, r7
   192a2:	f000 f887 	bl	193b4 <z_setup_new_thread>
   192a6:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   192a8:	60ef      	str	r7, [r5, #12]
   192aa:	f023 0304 	bic.w	r3, r3, #4
   192ae:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   192b0:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
   192b4:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].id = i;
   192b8:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
   192ba:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   192be:	4652      	mov	r2, sl
   192c0:	4641      	mov	r1, r8
   192c2:	4630      	mov	r0, r6
   192c4:	f7f8 fd08 	bl	11cd8 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   192c8:	20006060 	.word	0x20006060
   192cc:	e000ed00 	.word	0xe000ed00
   192d0:	20001b18 	.word	0x20001b18
   192d4:	000191ad 	.word	0x000191ad
   192d8:	20001a98 	.word	0x20001a98
   192dc:	20002918 	.word	0x20002918
   192e0:	00021d9f 	.word	0x00021d9f
   192e4:	200052c0 	.word	0x200052c0
   192e8:	200056e0 	.word	0x200056e0
   192ec:	00019529 	.word	0x00019529

000192f0 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   192f0:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   192f2:	4c06      	ldr	r4, [pc, #24]	; (1930c <statics_init+0x1c>)
   192f4:	4d06      	ldr	r5, [pc, #24]	; (19310 <statics_init+0x20>)
   192f6:	42ac      	cmp	r4, r5
   192f8:	d301      	bcc.n	192fe <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   192fa:	2000      	movs	r0, #0
   192fc:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   192fe:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   19302:	4620      	mov	r0, r4
   19304:	f006 feaf 	bl	20066 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   19308:	3414      	adds	r4, #20
   1930a:	e7f4      	b.n	192f6 <statics_init+0x6>
   1930c:	200006a0 	.word	0x200006a0
   19310:	200006b4 	.word	0x200006b4

00019314 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   19314:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   19316:	4b0e      	ldr	r3, [pc, #56]	; (19350 <init_mem_slab_module+0x3c>)
   19318:	4c0e      	ldr	r4, [pc, #56]	; (19354 <init_mem_slab_module+0x40>)
   1931a:	42a3      	cmp	r3, r4
   1931c:	d301      	bcc.n	19322 <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
   1931e:	2000      	movs	r0, #0
	return rc;
}
   19320:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   19322:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   19326:	ea41 0200 	orr.w	r2, r1, r0
   1932a:	f012 0203 	ands.w	r2, r2, #3
   1932e:	d10b      	bne.n	19348 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   19330:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   19332:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   19334:	42aa      	cmp	r2, r5
   19336:	d101      	bne.n	1933c <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   19338:	331c      	adds	r3, #28
   1933a:	e7ee      	b.n	1931a <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   1933c:	695e      	ldr	r6, [r3, #20]
   1933e:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   19340:	3201      	adds	r2, #1
		slab->free_list = p;
   19342:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   19344:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   19346:	e7f5      	b.n	19334 <init_mem_slab_module+0x20>
	return rc;
   19348:	f06f 0015 	mvn.w	r0, #21
   1934c:	e7e8      	b.n	19320 <init_mem_slab_module+0xc>
   1934e:	bf00      	nop
   19350:	2000064c 	.word	0x2000064c
   19354:	200006a0 	.word	0x200006a0

00019358 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   19358:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1935a:	460c      	mov	r4, r1
	__asm__ volatile(
   1935c:	f04f 0540 	mov.w	r5, #64	; 0x40
   19360:	f3ef 8111 	mrs	r1, BASEPRI
   19364:	f385 8811 	msr	BASEPRI, r5
   19368:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   1936c:	6945      	ldr	r5, [r0, #20]
   1936e:	b15d      	cbz	r5, 19388 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   19370:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   19372:	682b      	ldr	r3, [r5, #0]
   19374:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   19376:	6983      	ldr	r3, [r0, #24]
   19378:	3301      	adds	r3, #1
   1937a:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1937c:	2000      	movs	r0, #0
	__asm__ volatile(
   1937e:	f381 8811 	msr	BASEPRI, r1
   19382:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   19386:	e011      	b.n	193ac <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   19388:	ea52 0c03 	orrs.w	ip, r2, r3
   1938c:	d103      	bne.n	19396 <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   1938e:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   19390:	f06f 000b 	mvn.w	r0, #11
   19394:	e7f3      	b.n	1937e <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   19396:	e9cd 2300 	strd	r2, r3, [sp]
   1939a:	4602      	mov	r2, r0
   1939c:	3008      	adds	r0, #8
   1939e:	f000 fcc1 	bl	19d24 <z_pend_curr>
		if (result == 0) {
   193a2:	b918      	cbnz	r0, 193ac <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   193a4:	4b02      	ldr	r3, [pc, #8]	; (193b0 <k_mem_slab_alloc+0x58>)
   193a6:	689b      	ldr	r3, [r3, #8]
   193a8:	695b      	ldr	r3, [r3, #20]
   193aa:	6023      	str	r3, [r4, #0]
}
   193ac:	b003      	add	sp, #12
   193ae:	bd30      	pop	{r4, r5, pc}
   193b0:	20002918 	.word	0x20002918

000193b4 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   193b4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   193b8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   193ba:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   193bc:	2604      	movs	r6, #4
   193be:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   193c0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   193c2:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   193c4:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
   193c8:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   193ca:	1dd6      	adds	r6, r2, #7
   193cc:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   193d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   193d2:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   193d4:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   193d8:	3720      	adds	r7, #32
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   193da:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   193de:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   193e2:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   193e4:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   193e6:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   193e8:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   193ec:	9202      	str	r2, [sp, #8]
   193ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   193f0:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   193f2:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   193f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   193f6:	9200      	str	r2, [sp, #0]
   193f8:	4642      	mov	r2, r8
{
   193fa:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   193fc:	f7f8 fc3a 	bl	11c74 <arch_new_thread>
	if (!_current) {
   19400:	4b04      	ldr	r3, [pc, #16]	; (19414 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
   19402:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   19404:	689b      	ldr	r3, [r3, #8]
   19406:	b103      	cbz	r3, 1940a <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
   19408:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   1940a:	6763      	str	r3, [r4, #116]	; 0x74
}
   1940c:	4640      	mov	r0, r8
   1940e:	b004      	add	sp, #16
   19410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19414:	20002918 	.word	0x20002918

00019418 <z_impl_k_thread_create>:
{
   19418:	b5f0      	push	{r4, r5, r6, r7, lr}
   1941a:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1941c:	2700      	movs	r7, #0
   1941e:	9705      	str	r7, [sp, #20]
   19420:	9f10      	ldr	r7, [sp, #64]	; 0x40
   19422:	9704      	str	r7, [sp, #16]
   19424:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   19426:	9703      	str	r7, [sp, #12]
   19428:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   1942a:	9702      	str	r7, [sp, #8]
{
   1942c:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   19430:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   19432:	9701      	str	r7, [sp, #4]
   19434:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   19436:	9700      	str	r7, [sp, #0]
{
   19438:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1943a:	f7ff ffbb 	bl	193b4 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1943e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   19442:	bf08      	it	eq
   19444:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   19448:	d005      	beq.n	19456 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1944a:	ea55 0306 	orrs.w	r3, r5, r6
   1944e:	d105      	bne.n	1945c <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   19450:	4620      	mov	r0, r4
   19452:	f000 fd79 	bl	19f48 <z_sched_start>
}
   19456:	4620      	mov	r0, r4
   19458:	b007      	add	sp, #28
   1945a:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1945c:	4903      	ldr	r1, [pc, #12]	; (1946c <z_impl_k_thread_create+0x54>)
   1945e:	4632      	mov	r2, r6
   19460:	462b      	mov	r3, r5
   19462:	f104 0018 	add.w	r0, r4, #24
   19466:	f000 ff63 	bl	1a330 <z_add_timeout>
   1946a:	e7f4      	b.n	19456 <z_impl_k_thread_create+0x3e>
   1946c:	00020657 	.word	0x00020657

00019470 <z_init_static_threads>:
{
   19470:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19474:	4c29      	ldr	r4, [pc, #164]	; (1951c <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   19476:	4d2a      	ldr	r5, [pc, #168]	; (19520 <z_init_static_threads+0xb0>)
{
   19478:	b087      	sub	sp, #28
   1947a:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   1947c:	42ae      	cmp	r6, r5
   1947e:	f104 0430 	add.w	r4, r4, #48	; 0x30
   19482:	d30f      	bcc.n	194a4 <z_init_static_threads+0x34>
	k_sched_lock();
   19484:	f000 fbdc 	bl	19c40 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   19488:	4c24      	ldr	r4, [pc, #144]	; (1951c <z_init_static_threads+0xac>)
   1948a:	f8df 9098 	ldr.w	r9, [pc, #152]	; 19524 <z_init_static_threads+0xb4>
		} else {
			return (t * to_hz + off) / from_hz;
   1948e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   19492:	f240 37e7 	movw	r7, #999	; 0x3e7
   19496:	42ac      	cmp	r4, r5
   19498:	d320      	bcc.n	194dc <z_init_static_threads+0x6c>
}
   1949a:	b007      	add	sp, #28
   1949c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   194a0:	f000 bc86 	b.w	19db0 <k_sched_unlock>
		z_setup_new_thread(
   194a4:	f854 3c04 	ldr.w	r3, [r4, #-4]
   194a8:	9305      	str	r3, [sp, #20]
   194aa:	f854 3c10 	ldr.w	r3, [r4, #-16]
   194ae:	9304      	str	r3, [sp, #16]
   194b0:	f854 3c14 	ldr.w	r3, [r4, #-20]
   194b4:	9303      	str	r3, [sp, #12]
   194b6:	f854 3c18 	ldr.w	r3, [r4, #-24]
   194ba:	9302      	str	r3, [sp, #8]
   194bc:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   194c0:	9301      	str	r3, [sp, #4]
   194c2:	f854 3c20 	ldr.w	r3, [r4, #-32]
   194c6:	9300      	str	r3, [sp, #0]
   194c8:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   194cc:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   194d0:	f7ff ff70 	bl	193b4 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   194d4:	f854 3c30 	ldr.w	r3, [r4, #-48]
   194d8:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   194da:	e7ce      	b.n	1947a <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   194dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   194de:	1c5a      	adds	r2, r3, #1
   194e0:	d00d      	beq.n	194fe <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   194e2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   194e6:	2100      	movs	r1, #0
   194e8:	4638      	mov	r0, r7
   194ea:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   194ee:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   194f2:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   194f6:	d104      	bne.n	19502 <z_init_static_threads+0x92>
	z_sched_start(thread);
   194f8:	4640      	mov	r0, r8
   194fa:	f000 fd25 	bl	19f48 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   194fe:	3430      	adds	r4, #48	; 0x30
   19500:	e7c9      	b.n	19496 <z_init_static_threads+0x26>
   19502:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   19506:	2300      	movs	r3, #0
   19508:	f7e6 fdea 	bl	e0 <__aeabi_uldivmod>
   1950c:	4602      	mov	r2, r0
   1950e:	460b      	mov	r3, r1
   19510:	f108 0018 	add.w	r0, r8, #24
   19514:	4649      	mov	r1, r9
   19516:	f000 ff0b 	bl	1a330 <z_add_timeout>
   1951a:	e7f0      	b.n	194fe <z_init_static_threads+0x8e>
   1951c:	2000064c 	.word	0x2000064c
   19520:	2000064c 	.word	0x2000064c
   19524:	00020657 	.word	0x00020657

00019528 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   19528:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   1952a:	4c09      	ldr	r4, [pc, #36]	; (19550 <idle+0x28>)
	__asm__ volatile(
   1952c:	f04f 0240 	mov.w	r2, #64	; 0x40
   19530:	f3ef 8311 	mrs	r3, BASEPRI
   19534:	f382 8811 	msr	BASEPRI, r2
   19538:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
   1953c:	f007 f908 	bl	20750 <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
   19540:	6220      	str	r0, [r4, #32]
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
   19542:	f7f7 fedd 	bl	11300 <pm_system_suspend>
   19546:	2800      	cmp	r0, #0
   19548:	d1f0      	bne.n	1952c <idle+0x4>
	arch_cpu_idle();
   1954a:	f7f8 fbe1 	bl	11d10 <arch_cpu_idle>
}
   1954e:	e7ed      	b.n	1952c <idle+0x4>
   19550:	20002918 	.word	0x20002918

00019554 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   19554:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   19558:	4604      	mov	r4, r0
   1955a:	4617      	mov	r7, r2
   1955c:	461e      	mov	r6, r3
   1955e:	f04f 0340 	mov.w	r3, #64	; 0x40
   19562:	f3ef 8811 	mrs	r8, BASEPRI
   19566:	f383 8811 	msr	BASEPRI, r3
   1956a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1956e:	68c3      	ldr	r3, [r0, #12]
   19570:	4a32      	ldr	r2, [pc, #200]	; (1963c <z_impl_k_mutex_lock+0xe8>)
   19572:	b16b      	cbz	r3, 19590 <z_impl_k_mutex_lock+0x3c>
   19574:	6880      	ldr	r0, [r0, #8]
   19576:	6891      	ldr	r1, [r2, #8]
   19578:	4288      	cmp	r0, r1
   1957a:	d019      	beq.n	195b0 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1957c:	ea57 0306 	orrs.w	r3, r7, r6
   19580:	d118      	bne.n	195b4 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   19582:	f388 8811 	msr	BASEPRI, r8
   19586:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   1958a:	f06f 000f 	mvn.w	r0, #15
   1958e:	e00c      	b.n	195aa <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   19590:	6891      	ldr	r1, [r2, #8]
   19592:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   19596:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   19598:	3301      	adds	r3, #1
   1959a:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1959c:	6893      	ldr	r3, [r2, #8]
   1959e:	60a3      	str	r3, [r4, #8]
   195a0:	f388 8811 	msr	BASEPRI, r8
   195a4:	f3bf 8f6f 	isb	sy
		return 0;
   195a8:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   195aa:	b002      	add	sp, #8
   195ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   195b0:	6921      	ldr	r1, [r4, #16]
   195b2:	e7f0      	b.n	19596 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   195b4:	f991 100e 	ldrsb.w	r1, [r1, #14]
   195b8:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
   195bc:	4299      	cmp	r1, r3
   195be:	bfa8      	it	ge
   195c0:	4619      	movge	r1, r3
   195c2:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   195c6:	4291      	cmp	r1, r2
   195c8:	bfb8      	it	lt
   195ca:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   195cc:	428b      	cmp	r3, r1
   195ce:	dd2e      	ble.n	1962e <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   195d0:	f006 fdea 	bl	201a8 <adjust_owner_prio.isra.0>
   195d4:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   195d6:	e9cd 7600 	strd	r7, r6, [sp]
   195da:	4819      	ldr	r0, [pc, #100]	; (19640 <z_impl_k_mutex_lock+0xec>)
   195dc:	4622      	mov	r2, r4
   195de:	4641      	mov	r1, r8
   195e0:	f000 fba0 	bl	19d24 <z_pend_curr>
	if (got_mutex == 0) {
   195e4:	2800      	cmp	r0, #0
   195e6:	d0e0      	beq.n	195aa <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   195e8:	f04f 0340 	mov.w	r3, #64	; 0x40
   195ec:	f3ef 8611 	mrs	r6, BASEPRI
   195f0:	f383 8811 	msr	BASEPRI, r3
   195f4:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   195f8:	6823      	ldr	r3, [r4, #0]
   195fa:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   195fc:	429c      	cmp	r4, r3
   195fe:	d00a      	beq.n	19616 <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   19600:	b14b      	cbz	r3, 19616 <z_impl_k_mutex_lock+0xc2>
   19602:	f993 300e 	ldrsb.w	r3, [r3, #14]
   19606:	4299      	cmp	r1, r3
   19608:	bfa8      	it	ge
   1960a:	4619      	movge	r1, r3
   1960c:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   19610:	4299      	cmp	r1, r3
   19612:	bfb8      	it	lt
   19614:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   19616:	68a0      	ldr	r0, [r4, #8]
   19618:	f006 fdc6 	bl	201a8 <adjust_owner_prio.isra.0>
   1961c:	b900      	cbnz	r0, 19620 <z_impl_k_mutex_lock+0xcc>
	if (resched) {
   1961e:	b145      	cbz	r5, 19632 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   19620:	4807      	ldr	r0, [pc, #28]	; (19640 <z_impl_k_mutex_lock+0xec>)
   19622:	4631      	mov	r1, r6
   19624:	f000 fafa 	bl	19c1c <z_reschedule>
	return -EAGAIN;
   19628:	f06f 000a 	mvn.w	r0, #10
   1962c:	e7bd      	b.n	195aa <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   1962e:	2500      	movs	r5, #0
   19630:	e7d1      	b.n	195d6 <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
   19632:	f386 8811 	msr	BASEPRI, r6
   19636:	f3bf 8f6f 	isb	sy
   1963a:	e7f5      	b.n	19628 <z_impl_k_mutex_lock+0xd4>
   1963c:	20002918 	.word	0x20002918
   19640:	200036ff 	.word	0x200036ff

00019644 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   19644:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   19646:	6883      	ldr	r3, [r0, #8]
{
   19648:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   1964a:	2b00      	cmp	r3, #0
   1964c:	d032      	beq.n	196b4 <z_impl_k_mutex_unlock+0x70>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1964e:	4a1c      	ldr	r2, [pc, #112]	; (196c0 <z_impl_k_mutex_unlock+0x7c>)
   19650:	6892      	ldr	r2, [r2, #8]
   19652:	4293      	cmp	r3, r2
   19654:	d131      	bne.n	196ba <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   19656:	7bda      	ldrb	r2, [r3, #15]
   19658:	3a01      	subs	r2, #1
   1965a:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   1965c:	68c3      	ldr	r3, [r0, #12]
   1965e:	2b01      	cmp	r3, #1
   19660:	d905      	bls.n	1966e <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   19662:	3b01      	subs	r3, #1
   19664:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   19666:	f000 fba3 	bl	19db0 <k_sched_unlock>

	return 0;
   1966a:	2000      	movs	r0, #0
}
   1966c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1966e:	f04f 0340 	mov.w	r3, #64	; 0x40
   19672:	f3ef 8511 	mrs	r5, BASEPRI
   19676:	f383 8811 	msr	BASEPRI, r3
   1967a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1967e:	6901      	ldr	r1, [r0, #16]
   19680:	6880      	ldr	r0, [r0, #8]
   19682:	f006 fd91 	bl	201a8 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   19686:	4620      	mov	r0, r4
   19688:	f007 f807 	bl	2069a <z_unpend_first_thread>
	mutex->owner = new_owner;
   1968c:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1968e:	b158      	cbz	r0, 196a8 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
   19690:	f990 200e 	ldrsb.w	r2, [r0, #14]
   19694:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   19696:	2200      	movs	r2, #0
   19698:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   1969a:	f006 ffcc 	bl	20636 <z_ready_thread>
		z_reschedule(&lock, key);
   1969e:	4809      	ldr	r0, [pc, #36]	; (196c4 <z_impl_k_mutex_unlock+0x80>)
   196a0:	4629      	mov	r1, r5
   196a2:	f000 fabb 	bl	19c1c <z_reschedule>
   196a6:	e7de      	b.n	19666 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   196a8:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   196aa:	f385 8811 	msr	BASEPRI, r5
   196ae:	f3bf 8f6f 	isb	sy
   196b2:	e7d8      	b.n	19666 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   196b4:	f06f 0015 	mvn.w	r0, #21
   196b8:	e7d8      	b.n	1966c <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   196ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   196be:	e7d5      	b.n	1966c <z_impl_k_mutex_unlock+0x28>
   196c0:	20002918 	.word	0x20002918
   196c4:	200036ff 	.word	0x200036ff

000196c8 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   196c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   196ca:	4611      	mov	r1, r2
	__asm__ volatile(
   196cc:	f04f 0240 	mov.w	r2, #64	; 0x40
   196d0:	f3ef 8511 	mrs	r5, BASEPRI
   196d4:	f382 8811 	msr	BASEPRI, r2
   196d8:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   196dc:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   196de:	b19c      	cbz	r4, 19708 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   196e0:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   196e2:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   196e4:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   196e8:	4294      	cmp	r4, r2
	list->head = node;
   196ea:	6003      	str	r3, [r0, #0]
	list->tail = node;
   196ec:	bf08      	it	eq
   196ee:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   196f0:	2101      	movs	r1, #1
   196f2:	4620      	mov	r0, r4
   196f4:	f006 fdcb 	bl	2028e <z_queue_node_peek>
   196f8:	4604      	mov	r4, r0
	__asm__ volatile(
   196fa:	f385 8811 	msr	BASEPRI, r5
   196fe:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   19702:	4620      	mov	r0, r4
   19704:	b003      	add	sp, #12
   19706:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   19708:	ea51 0203 	orrs.w	r2, r1, r3
   1970c:	d0f5      	beq.n	196fa <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1970e:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   19712:	e9cd 1300 	strd	r1, r3, [sp]
   19716:	4610      	mov	r0, r2
   19718:	4629      	mov	r1, r5
   1971a:	f000 fb03 	bl	19d24 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1971e:	2800      	cmp	r0, #0
   19720:	d1ef      	bne.n	19702 <z_impl_k_queue_get+0x3a>
   19722:	4b02      	ldr	r3, [pc, #8]	; (1972c <z_impl_k_queue_get+0x64>)
   19724:	689b      	ldr	r3, [r3, #8]
   19726:	695c      	ldr	r4, [r3, #20]
   19728:	e7eb      	b.n	19702 <z_impl_k_queue_get+0x3a>
   1972a:	bf00      	nop
   1972c:	20002918 	.word	0x20002918

00019730 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   19730:	b538      	push	{r3, r4, r5, lr}
   19732:	4604      	mov	r4, r0
	__asm__ volatile(
   19734:	f04f 0340 	mov.w	r3, #64	; 0x40
   19738:	f3ef 8511 	mrs	r5, BASEPRI
   1973c:	f383 8811 	msr	BASEPRI, r3
   19740:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   19744:	f006 ffa9 	bl	2069a <z_unpend_first_thread>

	if (thread != NULL) {
   19748:	b148      	cbz	r0, 1975e <z_impl_k_sem_give+0x2e>
   1974a:	2200      	movs	r2, #0
   1974c:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1974e:	f006 ff72 	bl	20636 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   19752:	4629      	mov	r1, r5
   19754:	4808      	ldr	r0, [pc, #32]	; (19778 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   19756:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1975a:	f000 ba5f 	b.w	19c1c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1975e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   19762:	429a      	cmp	r2, r3
   19764:	bf18      	it	ne
   19766:	3301      	addne	r3, #1
   19768:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1976a:	2102      	movs	r1, #2
   1976c:	f104 0010 	add.w	r0, r4, #16
   19770:	f007 f98c 	bl	20a8c <z_handle_obj_poll_events>
}
   19774:	e7ed      	b.n	19752 <z_impl_k_sem_give+0x22>
   19776:	bf00      	nop
   19778:	200036ff 	.word	0x200036ff

0001977c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1977c:	b513      	push	{r0, r1, r4, lr}
   1977e:	f04f 0440 	mov.w	r4, #64	; 0x40
   19782:	f3ef 8111 	mrs	r1, BASEPRI
   19786:	f384 8811 	msr	BASEPRI, r4
   1978a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   1978e:	6884      	ldr	r4, [r0, #8]
   19790:	b144      	cbz	r4, 197a4 <z_impl_k_sem_take+0x28>
		sem->count--;
   19792:	3c01      	subs	r4, #1
   19794:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   19796:	f381 8811 	msr	BASEPRI, r1
   1979a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1979e:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   197a0:	b002      	add	sp, #8
   197a2:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   197a4:	ea52 0403 	orrs.w	r4, r2, r3
   197a8:	d106      	bne.n	197b8 <z_impl_k_sem_take+0x3c>
   197aa:	f381 8811 	msr	BASEPRI, r1
   197ae:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   197b2:	f06f 000f 	mvn.w	r0, #15
   197b6:	e7f3      	b.n	197a0 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   197b8:	e9cd 2300 	strd	r2, r3, [sp]
   197bc:	4602      	mov	r2, r0
   197be:	4802      	ldr	r0, [pc, #8]	; (197c8 <z_impl_k_sem_take+0x4c>)
   197c0:	f000 fab0 	bl	19d24 <z_pend_curr>
	return ret;
   197c4:	e7ec      	b.n	197a0 <z_impl_k_sem_take+0x24>
   197c6:	bf00      	nop
   197c8:	200036ff 	.word	0x200036ff

000197cc <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
   197cc:	b570      	push	{r4, r5, r6, lr}
   197ce:	4604      	mov	r4, r0
	__asm__ volatile(
   197d0:	f04f 0340 	mov.w	r3, #64	; 0x40
   197d4:	f3ef 8511 	mrs	r5, BASEPRI
   197d8:	f383 8811 	msr	BASEPRI, r3
   197dc:	f3bf 8f6f 	isb	sy
   197e0:	f06f 060a 	mvn.w	r6, #10
	struct k_thread *thread;
	k_spinlock_key_t key = k_spin_lock(&lock);

	while (true) {
		thread = z_unpend_first_thread(&sem->wait_q);
   197e4:	4620      	mov	r0, r4
   197e6:	f006 ff58 	bl	2069a <z_unpend_first_thread>
		if (thread == NULL) {
   197ea:	b118      	cbz	r0, 197f4 <z_impl_k_sem_reset+0x28>
   197ec:	67c6      	str	r6, [r0, #124]	; 0x7c
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
   197ee:	f006 ff22 	bl	20636 <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
   197f2:	e7f7      	b.n	197e4 <z_impl_k_sem_reset+0x18>
	}
	sem->count = 0;
   197f4:	60a0      	str	r0, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   197f6:	2102      	movs	r1, #2
   197f8:	f104 0010 	add.w	r0, r4, #16
   197fc:	f007 f946 	bl	20a8c <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
   19800:	4629      	mov	r1, r5
   19802:	4802      	ldr	r0, [pc, #8]	; (1980c <z_impl_k_sem_reset+0x40>)
}
   19804:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   19808:	f000 ba08 	b.w	19c1c <z_reschedule>
   1980c:	200036ff 	.word	0x200036ff

00019810 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   19810:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   19812:	4b09      	ldr	r3, [pc, #36]	; (19838 <k_sys_work_q_init+0x28>)
   19814:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   19816:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   19818:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   1981a:	9300      	str	r3, [sp, #0]
   1981c:	4907      	ldr	r1, [pc, #28]	; (1983c <k_sys_work_q_init+0x2c>)
   1981e:	4808      	ldr	r0, [pc, #32]	; (19840 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   19820:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   19824:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19828:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1982c:	f000 f914 	bl	19a58 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   19830:	4620      	mov	r0, r4
   19832:	b004      	add	sp, #16
   19834:	bd10      	pop	{r4, pc}
   19836:	bf00      	nop
   19838:	00021da4 	.word	0x00021da4
   1983c:	20006060 	.word	0x20006060
   19840:	20001b98 	.word	0x20001b98

00019844 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   19844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
   19848:	4e47      	ldr	r6, [pc, #284]	; (19968 <work_queue_main+0x124>)
   1984a:	b085      	sub	sp, #20
   1984c:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   1984e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   19852:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   19856:	f04f 0340 	mov.w	r3, #64	; 0x40
   1985a:	f3ef 8711 	mrs	r7, BASEPRI
   1985e:	f383 8811 	msr	BASEPRI, r3
   19862:	f3bf 8f6f 	isb	sy
   19866:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
   1986a:	b98d      	cbnz	r5, 19890 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   1986c:	2102      	movs	r1, #2
   1986e:	f104 0098 	add.w	r0, r4, #152	; 0x98
   19872:	f006 fd85 	bl	20380 <flag_test_and_clear>
   19876:	2800      	cmp	r0, #0
   19878:	d135      	bne.n	198e6 <work_queue_main+0xa2>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   1987a:	2300      	movs	r3, #0
   1987c:	e9cd 8900 	strd	r8, r9, [sp]
   19880:	9302      	str	r3, [sp, #8]
   19882:	f104 0288 	add.w	r2, r4, #136	; 0x88
   19886:	4639      	mov	r1, r7
   19888:	4838      	ldr	r0, [pc, #224]	; (1996c <work_queue_main+0x128>)
   1988a:	f000 fcd9 	bl	1a240 <z_sched_wait>
			continue;
   1988e:	e7e2      	b.n	19856 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   19890:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   19894:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   19896:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1989a:	4295      	cmp	r5, r2
   1989c:	d101      	bne.n	198a2 <work_queue_main+0x5e>
	list->tail = node;
   1989e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   198a2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   198a6:	f043 0302 	orr.w	r3, r3, #2
   198aa:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   198ae:	68eb      	ldr	r3, [r5, #12]
   198b0:	f023 0304 	bic.w	r3, r3, #4
   198b4:	f043 0301 	orr.w	r3, r3, #1
   198b8:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   198ba:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   198bc:	f387 8811 	msr	BASEPRI, r7
   198c0:	f3bf 8f6f 	isb	sy

		if (work != NULL) {
			bool yield;

			__ASSERT_NO_MSG(handler != NULL);
			handler(work);
   198c4:	4628      	mov	r0, r5
   198c6:	4798      	blx	r3
	__asm__ volatile(
   198c8:	f04f 0340 	mov.w	r3, #64	; 0x40
   198cc:	f3ef 8b11 	mrs	fp, BASEPRI
   198d0:	f383 8811 	msr	BASEPRI, r3
   198d4:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   198d8:	68eb      	ldr	r3, [r5, #12]
			 * starving other threads.
			 */
			key = k_spin_lock(&lock);

			flag_clear(&work->flags, K_WORK_RUNNING_BIT);
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   198da:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   198dc:	f023 0201 	bic.w	r2, r3, #1
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   198e0:	d40b      	bmi.n	198fa <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
   198e2:	60ea      	str	r2, [r5, #12]
   198e4:	e00e      	b.n	19904 <work_queue_main+0xc0>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   198e6:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   198ea:	2200      	movs	r2, #0
   198ec:	2101      	movs	r1, #1
   198ee:	4628      	mov	r0, r5
   198f0:	f006 fefb 	bl	206ea <z_sched_wake>
   198f4:	2800      	cmp	r0, #0
   198f6:	d1f8      	bne.n	198ea <work_queue_main+0xa6>
   198f8:	e7bf      	b.n	1987a <work_queue_main+0x36>
	return list->head;
   198fa:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   198fc:	f023 0303 	bic.w	r3, r3, #3
   19900:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   19902:	b970      	cbnz	r0, 19922 <work_queue_main+0xde>
	*flagp &= ~BIT(bit);
   19904:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   19908:	f023 0302 	bic.w	r3, r3, #2
   1990c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   19910:	f38b 8811 	msr	BASEPRI, fp
   19914:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&lock, key);

			/* Optionally yield to prevent the work queue from
			 * starving other threads.
			 */
			if (yield) {
   19918:	05d8      	lsls	r0, r3, #23
   1991a:	d49c      	bmi.n	19856 <work_queue_main+0x12>
	z_impl_k_yield();
   1991c:	f000 fb86 	bl	1a02c <z_impl_k_yield>
}
   19920:	e799      	b.n	19856 <work_queue_main+0x12>
	return node->next;
   19922:	2700      	movs	r7, #0
   19924:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
   19928:	463b      	mov	r3, r7
		if (wc->work == work) {
   1992a:	6842      	ldr	r2, [r0, #4]
   1992c:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   1992e:	4601      	mov	r1, r0
		if (wc->work == work) {
   19930:	d10c      	bne.n	1994c <work_queue_main+0x108>
	return node->next;
   19932:	6801      	ldr	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   19934:	b997      	cbnz	r7, 1995c <work_queue_main+0x118>
   19936:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   19938:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   1993a:	4282      	cmp	r2, r0
   1993c:	d100      	bne.n	19940 <work_queue_main+0xfc>
	list->tail = node;
   1993e:	6071      	str	r1, [r6, #4]
	parent->next = child;
   19940:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   19944:	f7ff fef4 	bl	19730 <z_impl_k_sem_give>
}
   19948:	4639      	mov	r1, r7
   1994a:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1994c:	f1ba 0f00 	cmp.w	sl, #0
   19950:	d0d8      	beq.n	19904 <work_queue_main+0xc0>
	return node->next;
   19952:	4650      	mov	r0, sl
   19954:	460f      	mov	r7, r1
   19956:	f8da a000 	ldr.w	sl, [sl]
   1995a:	e7e6      	b.n	1992a <work_queue_main+0xe6>
	return list->tail;
   1995c:	6872      	ldr	r2, [r6, #4]
	parent->next = child;
   1995e:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   19960:	4290      	cmp	r0, r2
	list->tail = node;
   19962:	bf08      	it	eq
   19964:	6077      	streq	r7, [r6, #4]
}
   19966:	e7eb      	b.n	19940 <work_queue_main+0xfc>
   19968:	20002948 	.word	0x20002948
   1996c:	200036ff 	.word	0x200036ff

00019970 <cancel_sync_locked>:
	return (*flagp & BIT(bit)) != 0U;
   19970:	68c3      	ldr	r3, [r0, #12]
{
   19972:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   19974:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   19978:	079b      	lsls	r3, r3, #30
{
   1997a:	4605      	mov	r5, r0
   1997c:	460c      	mov	r4, r1
	if (ret) {
   1997e:	d50d      	bpl.n	1999c <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   19980:	2201      	movs	r2, #1
   19982:	2100      	movs	r1, #0
   19984:	f104 0008 	add.w	r0, r4, #8
   19988:	f006 fcea 	bl	20360 <z_impl_k_sem_init>
	parent->next = child;
   1998c:	2300      	movs	r3, #0
   1998e:	6023      	str	r3, [r4, #0]
	return list->tail;
   19990:	4b05      	ldr	r3, [pc, #20]	; (199a8 <cancel_sync_locked+0x38>)
	canceler->work = work;
   19992:	6065      	str	r5, [r4, #4]
   19994:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   19996:	b91a      	cbnz	r2, 199a0 <cancel_sync_locked+0x30>
	list->head = node;
   19998:	e9c3 4400 	strd	r4, r4, [r3]
}
   1999c:	4630      	mov	r0, r6
   1999e:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   199a0:	6014      	str	r4, [r2, #0]
	list->tail = node;
   199a2:	605c      	str	r4, [r3, #4]
}
   199a4:	e7fa      	b.n	1999c <cancel_sync_locked+0x2c>
   199a6:	bf00      	nop
   199a8:	20002948 	.word	0x20002948

000199ac <submit_to_queue_locked>:
{
   199ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   199ae:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   199b0:	079a      	lsls	r2, r3, #30
{
   199b2:	4604      	mov	r4, r0
   199b4:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   199b6:	f3c3 0540 	ubfx	r5, r3, #1, #1
   199ba:	d41f      	bmi.n	199fc <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   199bc:	075f      	lsls	r7, r3, #29
   199be:	d41f      	bmi.n	19a00 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
   199c0:	680a      	ldr	r2, [r1, #0]
   199c2:	b90a      	cbnz	r2, 199c8 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   199c4:	6882      	ldr	r2, [r0, #8]
   199c6:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   199c8:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
   199ca:	bf44      	itt	mi
   199cc:	68a3      	ldrmi	r3, [r4, #8]
   199ce:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
   199d0:	6837      	ldr	r7, [r6, #0]
			ret = 2;
   199d2:	bf4c      	ite	mi
   199d4:	2502      	movmi	r5, #2
		ret = 1;
   199d6:	2501      	movpl	r5, #1
	if (queue == NULL) {
   199d8:	b37f      	cbz	r7, 19a3a <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   199da:	4b1b      	ldr	r3, [pc, #108]	; (19a48 <submit_to_queue_locked+0x9c>)
   199dc:	689b      	ldr	r3, [r3, #8]
   199de:	42bb      	cmp	r3, r7
   199e0:	d111      	bne.n	19a06 <submit_to_queue_locked+0x5a>
   199e2:	f006 fbcf 	bl	20184 <k_is_in_isr>
   199e6:	f080 0001 	eor.w	r0, r0, #1
   199ea:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
   199ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   199f0:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   199f2:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   199f6:	d523      	bpl.n	19a40 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
   199f8:	b13a      	cbz	r2, 19a0a <submit_to_queue_locked+0x5e>
   199fa:	b940      	cbnz	r0, 19a0e <submit_to_queue_locked+0x62>
		ret = -EBUSY;
   199fc:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   19a00:	2300      	movs	r3, #0
   19a02:	6033      	str	r3, [r6, #0]
	return ret;
   19a04:	e013      	b.n	19a2e <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   19a06:	2000      	movs	r0, #0
   19a08:	e7f0      	b.n	199ec <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
   19a0a:	071b      	lsls	r3, r3, #28
   19a0c:	d4f6      	bmi.n	199fc <submit_to_queue_locked+0x50>
	parent->next = child;
   19a0e:	2300      	movs	r3, #0
   19a10:	6023      	str	r3, [r4, #0]
	return list->tail;
   19a12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   19a16:	b963      	cbnz	r3, 19a32 <submit_to_queue_locked+0x86>
	list->head = node;
   19a18:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   19a1c:	4638      	mov	r0, r7
   19a1e:	f006 fcc8 	bl	203b2 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   19a22:	68e3      	ldr	r3, [r4, #12]
   19a24:	f043 0304 	orr.w	r3, r3, #4
   19a28:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   19a2a:	6833      	ldr	r3, [r6, #0]
   19a2c:	60a3      	str	r3, [r4, #8]
}
   19a2e:	4628      	mov	r0, r5
   19a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   19a32:	601c      	str	r4, [r3, #0]
	list->tail = node;
   19a34:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   19a38:	e7f0      	b.n	19a1c <submit_to_queue_locked+0x70>
		return -EINVAL;
   19a3a:	f06f 0515 	mvn.w	r5, #21
   19a3e:	e7df      	b.n	19a00 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
   19a40:	f06f 0512 	mvn.w	r5, #18
   19a44:	e7dc      	b.n	19a00 <submit_to_queue_locked+0x54>
   19a46:	bf00      	nop
   19a48:	20002918 	.word	0x20002918

00019a4c <k_work_submit>:
{
   19a4c:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   19a4e:	4801      	ldr	r0, [pc, #4]	; (19a54 <k_work_submit+0x8>)
   19a50:	f006 bd0f 	b.w	20472 <k_work_submit_to_queue>
   19a54:	20001b98 	.word	0x20001b98

00019a58 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   19a58:	b5f0      	push	{r4, r5, r6, r7, lr}
   19a5a:	b089      	sub	sp, #36	; 0x24
   19a5c:	4604      	mov	r4, r0
	list->head = NULL;
   19a5e:	2000      	movs	r0, #0
	list->tail = NULL;
   19a60:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   19a64:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   19a66:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   19a6a:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   19a6e:	f104 0090 	add.w	r0, r4, #144	; 0x90
   19a72:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   19a76:	b31d      	cbz	r5, 19ac0 <k_work_queue_start+0x68>
   19a78:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   19a7a:	2800      	cmp	r0, #0
   19a7c:	f240 1001 	movw	r0, #257	; 0x101
   19a80:	bf08      	it	eq
   19a82:	2001      	moveq	r0, #1
	*flagp = flags;
   19a84:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   19a88:	2000      	movs	r0, #0
   19a8a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   19a8e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   19a92:	e9cd 3003 	strd	r3, r0, [sp, #12]
   19a96:	e9cd 0001 	strd	r0, r0, [sp, #4]
   19a9a:	e9cd 6706 	strd	r6, r7, [sp, #24]
   19a9e:	4b09      	ldr	r3, [pc, #36]	; (19ac4 <k_work_queue_start+0x6c>)
   19aa0:	9400      	str	r4, [sp, #0]
   19aa2:	4620      	mov	r0, r4
   19aa4:	f7ff fcb8 	bl	19418 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   19aa8:	b125      	cbz	r5, 19ab4 <k_work_queue_start+0x5c>
   19aaa:	6829      	ldr	r1, [r5, #0]
   19aac:	b111      	cbz	r1, 19ab4 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   19aae:	4620      	mov	r0, r4
   19ab0:	f006 fb6e 	bl	20190 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   19ab4:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   19ab6:	b009      	add	sp, #36	; 0x24
   19ab8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   19abc:	f006 bb6b 	b.w	20196 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   19ac0:	2001      	movs	r0, #1
   19ac2:	e7df      	b.n	19a84 <k_work_queue_start+0x2c>
   19ac4:	00019845 	.word	0x00019845

00019ac8 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   19ac8:	b513      	push	{r0, r1, r4, lr}
   19aca:	9001      	str	r0, [sp, #4]
   19acc:	4608      	mov	r0, r1
	__asm__ volatile(
   19ace:	f04f 0140 	mov.w	r1, #64	; 0x40
   19ad2:	f3ef 8411 	mrs	r4, BASEPRI
   19ad6:	f381 8811 	msr	BASEPRI, r1
   19ada:	f3bf 8f6f 	isb	sy
	return *flagp;
   19ade:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   19ae0:	f011 0f0e 	tst.w	r1, #14
   19ae4:	d116      	bne.n	19b14 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   19ae6:	ea53 0c02 	orrs.w	ip, r3, r2
   19aea:	d108      	bne.n	19afe <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   19aec:	a901      	add	r1, sp, #4
   19aee:	f7ff ff5d 	bl	199ac <submit_to_queue_locked>
	__asm__ volatile(
   19af2:	f384 8811 	msr	BASEPRI, r4
   19af6:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   19afa:	b002      	add	sp, #8
   19afc:	bd10      	pop	{r4, pc}
	*flagp |= BIT(bit);
   19afe:	f041 0108 	orr.w	r1, r1, #8
   19b02:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   19b04:	9901      	ldr	r1, [sp, #4]
   19b06:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   19b08:	3010      	adds	r0, #16
   19b0a:	4903      	ldr	r1, [pc, #12]	; (19b18 <k_work_schedule_for_queue+0x50>)
   19b0c:	f000 fc10 	bl	1a330 <z_add_timeout>
	return ret;
   19b10:	2001      	movs	r0, #1
   19b12:	e7ee      	b.n	19af2 <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   19b14:	2000      	movs	r0, #0
   19b16:	e7ec      	b.n	19af2 <k_work_schedule_for_queue+0x2a>
   19b18:	00020423 	.word	0x00020423

00019b1c <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   19b1c:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   19b1e:	4801      	ldr	r0, [pc, #4]	; (19b24 <k_work_schedule+0x8>)
   19b20:	f7ff bfd2 	b.w	19ac8 <k_work_schedule_for_queue>
   19b24:	20001b98 	.word	0x20001b98

00019b28 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   19b28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   19b2a:	460c      	mov	r4, r1
   19b2c:	9001      	str	r0, [sp, #4]
   19b2e:	4616      	mov	r6, r2
   19b30:	461d      	mov	r5, r3
	__asm__ volatile(
   19b32:	f04f 0340 	mov.w	r3, #64	; 0x40
   19b36:	f3ef 8711 	mrs	r7, BASEPRI
   19b3a:	f383 8811 	msr	BASEPRI, r3
   19b3e:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   19b42:	4608      	mov	r0, r1
   19b44:	f006 fc27 	bl	20396 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   19b48:	ea55 0306 	orrs.w	r3, r5, r6
   19b4c:	d109      	bne.n	19b62 <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   19b4e:	a901      	add	r1, sp, #4
   19b50:	4620      	mov	r0, r4
   19b52:	f7ff ff2b 	bl	199ac <submit_to_queue_locked>
	__asm__ volatile(
   19b56:	f387 8811 	msr	BASEPRI, r7
   19b5a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   19b5e:	b003      	add	sp, #12
   19b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   19b62:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   19b64:	4906      	ldr	r1, [pc, #24]	; (19b80 <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   19b66:	f043 0308 	orr.w	r3, r3, #8
   19b6a:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   19b6c:	9b01      	ldr	r3, [sp, #4]
   19b6e:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   19b70:	f104 0010 	add.w	r0, r4, #16
   19b74:	4632      	mov	r2, r6
   19b76:	462b      	mov	r3, r5
   19b78:	f000 fbda 	bl	1a330 <z_add_timeout>
	return ret;
   19b7c:	2001      	movs	r0, #1
   19b7e:	e7ea      	b.n	19b56 <k_work_reschedule_for_queue+0x2e>
   19b80:	00020423 	.word	0x00020423

00019b84 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   19b84:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   19b86:	4801      	ldr	r0, [pc, #4]	; (19b8c <k_work_reschedule+0x8>)
   19b88:	f7ff bfce 	b.w	19b28 <k_work_reschedule_for_queue>
   19b8c:	20001b98 	.word	0x20001b98

00019b90 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   19b90:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   19b92:	4c08      	ldr	r4, [pc, #32]	; (19bb4 <z_reset_time_slice+0x24>)
   19b94:	6823      	ldr	r3, [r4, #0]
   19b96:	b15b      	cbz	r3, 19bb0 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   19b98:	f7f7 fe88 	bl	118ac <sys_clock_elapsed>
   19b9c:	4603      	mov	r3, r0
   19b9e:	6820      	ldr	r0, [r4, #0]
   19ba0:	4a05      	ldr	r2, [pc, #20]	; (19bb8 <z_reset_time_slice+0x28>)
   19ba2:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   19ba4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   19ba8:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   19baa:	2100      	movs	r1, #0
   19bac:	f006 bde0 	b.w	20770 <z_set_timeout_expiry>
}
   19bb0:	bd10      	pop	{r4, pc}
   19bb2:	bf00      	nop
   19bb4:	20002958 	.word	0x20002958
   19bb8:	20002918 	.word	0x20002918

00019bbc <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   19bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19bbe:	4604      	mov	r4, r0
   19bc0:	460d      	mov	r5, r1
	__asm__ volatile(
   19bc2:	f04f 0340 	mov.w	r3, #64	; 0x40
   19bc6:	f3ef 8611 	mrs	r6, BASEPRI
   19bca:	f383 8811 	msr	BASEPRI, r3
   19bce:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   19bd2:	4b0f      	ldr	r3, [pc, #60]	; (19c10 <k_sched_time_slice_set+0x54>)
   19bd4:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   19bd6:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   19bda:	f240 30e7 	movw	r0, #999	; 0x3e7
   19bde:	6119      	str	r1, [r3, #16]
   19be0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   19be4:	2300      	movs	r3, #0
   19be6:	fbe4 0107 	umlal	r0, r1, r4, r7
   19bea:	f7e6 fa79 	bl	e0 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   19bee:	2c00      	cmp	r4, #0
   19bf0:	4b08      	ldr	r3, [pc, #32]	; (19c14 <k_sched_time_slice_set+0x58>)
   19bf2:	dc09      	bgt.n	19c08 <k_sched_time_slice_set+0x4c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
   19bf4:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   19bf6:	4b08      	ldr	r3, [pc, #32]	; (19c18 <k_sched_time_slice_set+0x5c>)
   19bf8:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   19bfa:	f7ff ffc9 	bl	19b90 <z_reset_time_slice>
	__asm__ volatile(
   19bfe:	f386 8811 	msr	BASEPRI, r6
   19c02:	f3bf 8f6f 	isb	sy
	}
}
   19c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
   19c08:	2802      	cmp	r0, #2
   19c0a:	bfb8      	it	lt
   19c0c:	2002      	movlt	r0, #2
   19c0e:	e7f1      	b.n	19bf4 <k_sched_time_slice_set+0x38>
   19c10:	20002918 	.word	0x20002918
   19c14:	20002958 	.word	0x20002958
   19c18:	20002954 	.word	0x20002954

00019c1c <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   19c1c:	b949      	cbnz	r1, 19c32 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   19c1e:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   19c22:	b930      	cbnz	r0, 19c32 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   19c24:	4b05      	ldr	r3, [pc, #20]	; (19c3c <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   19c26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   19c28:	689b      	ldr	r3, [r3, #8]
   19c2a:	429a      	cmp	r2, r3
   19c2c:	d001      	beq.n	19c32 <z_reschedule+0x16>
	ret = arch_swap(key);
   19c2e:	f7f7 bf73 	b.w	11b18 <arch_swap>
   19c32:	f381 8811 	msr	BASEPRI, r1
   19c36:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   19c3a:	4770      	bx	lr
   19c3c:	20002918 	.word	0x20002918

00019c40 <k_sched_lock>:
	__asm__ volatile(
   19c40:	f04f 0340 	mov.w	r3, #64	; 0x40
   19c44:	f3ef 8111 	mrs	r1, BASEPRI
   19c48:	f383 8811 	msr	BASEPRI, r3
   19c4c:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   19c50:	4b04      	ldr	r3, [pc, #16]	; (19c64 <k_sched_lock+0x24>)
   19c52:	689a      	ldr	r2, [r3, #8]
   19c54:	7bd3      	ldrb	r3, [r2, #15]
   19c56:	3b01      	subs	r3, #1
   19c58:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   19c5a:	f381 8811 	msr	BASEPRI, r1
   19c5e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   19c62:	4770      	bx	lr
   19c64:	20002918 	.word	0x20002918

00019c68 <update_cache>:
{
   19c68:	b538      	push	{r3, r4, r5, lr}
   19c6a:	4602      	mov	r2, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
   19c6c:	480c      	ldr	r0, [pc, #48]	; (19ca0 <update_cache+0x38>)
   19c6e:	4d0d      	ldr	r5, [pc, #52]	; (19ca4 <update_cache+0x3c>)
   19c70:	f006 fcb1 	bl	205d6 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   19c74:	4604      	mov	r4, r0
   19c76:	b900      	cbnz	r0, 19c7a <update_cache+0x12>
   19c78:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   19c7a:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   19c7c:	b94a      	cbnz	r2, 19c92 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
   19c7e:	7b5a      	ldrb	r2, [r3, #13]
   19c80:	06d2      	lsls	r2, r2, #27
   19c82:	d106      	bne.n	19c92 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   19c84:	69a2      	ldr	r2, [r4, #24]
   19c86:	b922      	cbnz	r2, 19c92 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
   19c88:	89da      	ldrh	r2, [r3, #14]
   19c8a:	2a7f      	cmp	r2, #127	; 0x7f
   19c8c:	d901      	bls.n	19c92 <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
   19c8e:	626b      	str	r3, [r5, #36]	; 0x24
}
   19c90:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   19c92:	429c      	cmp	r4, r3
   19c94:	d001      	beq.n	19c9a <update_cache+0x32>
			z_reset_time_slice();
   19c96:	f7ff ff7b 	bl	19b90 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   19c9a:	626c      	str	r4, [r5, #36]	; 0x24
}
   19c9c:	e7f8      	b.n	19c90 <update_cache+0x28>
   19c9e:	bf00      	nop
   19ca0:	20002940 	.word	0x20002940
   19ca4:	20002918 	.word	0x20002918

00019ca8 <unready_thread>:
{
   19ca8:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   19caa:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   19cae:	7b43      	ldrb	r3, [r0, #13]
   19cb0:	2a00      	cmp	r2, #0
{
   19cb2:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   19cb4:	da04      	bge.n	19cc0 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   19cb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   19cba:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   19cbc:	f006 fc46 	bl	2054c <sys_dlist_remove>
	update_cache(thread == _current);
   19cc0:	4b04      	ldr	r3, [pc, #16]	; (19cd4 <unready_thread+0x2c>)
   19cc2:	6898      	ldr	r0, [r3, #8]
   19cc4:	1a43      	subs	r3, r0, r1
   19cc6:	4258      	negs	r0, r3
   19cc8:	4158      	adcs	r0, r3
}
   19cca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   19cce:	f7ff bfcb 	b.w	19c68 <update_cache>
   19cd2:	bf00      	nop
   19cd4:	20002918 	.word	0x20002918

00019cd8 <pend>:
{
   19cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19cdc:	4606      	mov	r6, r0
   19cde:	4615      	mov	r5, r2
   19ce0:	461c      	mov	r4, r3
	__asm__ volatile(
   19ce2:	f04f 0340 	mov.w	r3, #64	; 0x40
   19ce6:	f3ef 8711 	mrs	r7, BASEPRI
   19cea:	f383 8811 	msr	BASEPRI, r3
   19cee:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   19cf2:	f006 fc76 	bl	205e2 <add_to_waitq_locked>
	__asm__ volatile(
   19cf6:	f387 8811 	msr	BASEPRI, r7
   19cfa:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   19cfe:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   19d02:	bf08      	it	eq
   19d04:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
   19d08:	d008      	beq.n	19d1c <pend+0x44>
   19d0a:	462a      	mov	r2, r5
   19d0c:	4623      	mov	r3, r4
   19d0e:	f106 0018 	add.w	r0, r6, #24
   19d12:	4903      	ldr	r1, [pc, #12]	; (19d20 <pend+0x48>)
}
   19d14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   19d18:	f000 bb0a 	b.w	1a330 <z_add_timeout>
   19d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19d20:	00020657 	.word	0x00020657

00019d24 <z_pend_curr>:
{
   19d24:	b510      	push	{r4, lr}
	pending_current = _current;
   19d26:	4b07      	ldr	r3, [pc, #28]	; (19d44 <z_pend_curr+0x20>)
   19d28:	6898      	ldr	r0, [r3, #8]
   19d2a:	4b07      	ldr	r3, [pc, #28]	; (19d48 <z_pend_curr+0x24>)
{
   19d2c:	460c      	mov	r4, r1
	pending_current = _current;
   19d2e:	6018      	str	r0, [r3, #0]
{
   19d30:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   19d32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   19d36:	f7ff ffcf 	bl	19cd8 <pend>
   19d3a:	4620      	mov	r0, r4
}
   19d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   19d40:	f7f7 beea 	b.w	11b18 <arch_swap>
   19d44:	20002918 	.word	0x20002918
   19d48:	20002950 	.word	0x20002950

00019d4c <z_impl_k_thread_suspend>:
{
   19d4c:	b570      	push	{r4, r5, r6, lr}
   19d4e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   19d50:	3018      	adds	r0, #24
   19d52:	f006 fce7 	bl	20724 <z_abort_timeout>
	__asm__ volatile(
   19d56:	f04f 0340 	mov.w	r3, #64	; 0x40
   19d5a:	f3ef 8611 	mrs	r6, BASEPRI
   19d5e:	f383 8811 	msr	BASEPRI, r3
   19d62:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   19d66:	f994 200d 	ldrsb.w	r2, [r4, #13]
   19d6a:	7b63      	ldrb	r3, [r4, #13]
   19d6c:	2a00      	cmp	r2, #0
   19d6e:	da05      	bge.n	19d7c <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   19d70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   19d74:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   19d76:	4620      	mov	r0, r4
   19d78:	f006 fbe8 	bl	2054c <sys_dlist_remove>
		update_cache(thread == _current);
   19d7c:	4d0b      	ldr	r5, [pc, #44]	; (19dac <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   19d7e:	7b63      	ldrb	r3, [r4, #13]
   19d80:	68a8      	ldr	r0, [r5, #8]
   19d82:	f043 0310 	orr.w	r3, r3, #16
   19d86:	7363      	strb	r3, [r4, #13]
   19d88:	1b03      	subs	r3, r0, r4
   19d8a:	4258      	negs	r0, r3
   19d8c:	4158      	adcs	r0, r3
   19d8e:	f7ff ff6b 	bl	19c68 <update_cache>
	__asm__ volatile(
   19d92:	f386 8811 	msr	BASEPRI, r6
   19d96:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   19d9a:	68ab      	ldr	r3, [r5, #8]
   19d9c:	42a3      	cmp	r3, r4
   19d9e:	d103      	bne.n	19da8 <z_impl_k_thread_suspend+0x5c>
}
   19da0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   19da4:	f006 bc0d 	b.w	205c2 <z_reschedule_unlocked>
}
   19da8:	bd70      	pop	{r4, r5, r6, pc}
   19daa:	bf00      	nop
   19dac:	20002918 	.word	0x20002918

00019db0 <k_sched_unlock>:
{
   19db0:	b510      	push	{r4, lr}
	__asm__ volatile(
   19db2:	f04f 0340 	mov.w	r3, #64	; 0x40
   19db6:	f3ef 8411 	mrs	r4, BASEPRI
   19dba:	f383 8811 	msr	BASEPRI, r3
   19dbe:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   19dc2:	4b08      	ldr	r3, [pc, #32]	; (19de4 <k_sched_unlock+0x34>)
   19dc4:	689a      	ldr	r2, [r3, #8]
   19dc6:	7bd3      	ldrb	r3, [r2, #15]
   19dc8:	3301      	adds	r3, #1
   19dca:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   19dcc:	2000      	movs	r0, #0
   19dce:	f7ff ff4b 	bl	19c68 <update_cache>
	__asm__ volatile(
   19dd2:	f384 8811 	msr	BASEPRI, r4
   19dd6:	f3bf 8f6f 	isb	sy
}
   19dda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   19dde:	f006 bbf0 	b.w	205c2 <z_reschedule_unlocked>
   19de2:	bf00      	nop
   19de4:	20002918 	.word	0x20002918

00019de8 <move_thread_to_end_of_prio_q>:
{
   19de8:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   19dea:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   19dee:	7b43      	ldrb	r3, [r0, #13]
   19df0:	2a00      	cmp	r2, #0
{
   19df2:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   19df4:	da04      	bge.n	19e00 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   19df6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   19dfa:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   19dfc:	f006 fba6 	bl	2054c <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   19e00:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   19e02:	4a15      	ldr	r2, [pc, #84]	; (19e58 <move_thread_to_end_of_prio_q+0x70>)
   19e04:	f063 037f 	orn	r3, r3, #127	; 0x7f
   19e08:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   19e0a:	e9d2 340a 	ldrd	r3, r4, [r2, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19e0e:	f102 0528 	add.w	r5, r2, #40	; 0x28
   19e12:	42ab      	cmp	r3, r5
   19e14:	d01b      	beq.n	19e4e <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   19e16:	b1d3      	cbz	r3, 19e4e <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
   19e18:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   19e1c:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   19e20:	4286      	cmp	r6, r0
   19e22:	d00f      	beq.n	19e44 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
   19e24:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   19e26:	2800      	cmp	r0, #0
   19e28:	dd0c      	ble.n	19e44 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   19e2a:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   19e2c:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   19e30:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   19e32:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   19e34:	6890      	ldr	r0, [r2, #8]
   19e36:	1a43      	subs	r3, r0, r1
   19e38:	4258      	negs	r0, r3
}
   19e3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   19e3e:	4158      	adcs	r0, r3
   19e40:	f7ff bf12 	b.w	19c68 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   19e44:	42a3      	cmp	r3, r4
   19e46:	d002      	beq.n	19e4e <move_thread_to_end_of_prio_q+0x66>
   19e48:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   19e4a:	2b00      	cmp	r3, #0
   19e4c:	d1e6      	bne.n	19e1c <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
   19e4e:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
   19e52:	6021      	str	r1, [r4, #0]
	list->tail = node;
   19e54:	62d1      	str	r1, [r2, #44]	; 0x2c
}
   19e56:	e7ed      	b.n	19e34 <move_thread_to_end_of_prio_q+0x4c>
   19e58:	20002918 	.word	0x20002918

00019e5c <z_time_slice>:
{
   19e5c:	b538      	push	{r3, r4, r5, lr}
   19e5e:	4601      	mov	r1, r0
	__asm__ volatile(
   19e60:	f04f 0340 	mov.w	r3, #64	; 0x40
   19e64:	f3ef 8411 	mrs	r4, BASEPRI
   19e68:	f383 8811 	msr	BASEPRI, r3
   19e6c:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   19e70:	4b15      	ldr	r3, [pc, #84]	; (19ec8 <z_time_slice+0x6c>)
   19e72:	4a16      	ldr	r2, [pc, #88]	; (19ecc <z_time_slice+0x70>)
   19e74:	6898      	ldr	r0, [r3, #8]
   19e76:	6815      	ldr	r5, [r2, #0]
   19e78:	42a8      	cmp	r0, r5
   19e7a:	d106      	bne.n	19e8a <z_time_slice+0x2e>
			z_reset_time_slice();
   19e7c:	f7ff fe88 	bl	19b90 <z_reset_time_slice>
	__asm__ volatile(
   19e80:	f384 8811 	msr	BASEPRI, r4
   19e84:	f3bf 8f6f 	isb	sy
}
   19e88:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   19e8a:	2500      	movs	r5, #0
   19e8c:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
   19e8e:	4a10      	ldr	r2, [pc, #64]	; (19ed0 <z_time_slice+0x74>)
   19e90:	6812      	ldr	r2, [r2, #0]
   19e92:	b1ba      	cbz	r2, 19ec4 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
   19e94:	89c2      	ldrh	r2, [r0, #14]
   19e96:	2a7f      	cmp	r2, #127	; 0x7f
   19e98:	d814      	bhi.n	19ec4 <z_time_slice+0x68>
		&& !z_is_thread_prevented_from_running(thread)
   19e9a:	7b42      	ldrb	r2, [r0, #13]
   19e9c:	06d2      	lsls	r2, r2, #27
   19e9e:	d111      	bne.n	19ec4 <z_time_slice+0x68>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   19ea0:	4a0c      	ldr	r2, [pc, #48]	; (19ed4 <z_time_slice+0x78>)
   19ea2:	f990 500e 	ldrsb.w	r5, [r0, #14]
   19ea6:	6812      	ldr	r2, [r2, #0]
   19ea8:	4295      	cmp	r5, r2
   19eaa:	db0b      	blt.n	19ec4 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
   19eac:	4a0a      	ldr	r2, [pc, #40]	; (19ed8 <z_time_slice+0x7c>)
   19eae:	4290      	cmp	r0, r2
   19eb0:	d008      	beq.n	19ec4 <z_time_slice+0x68>
		if (ticks >= _current_cpu->slice_ticks) {
   19eb2:	691a      	ldr	r2, [r3, #16]
   19eb4:	428a      	cmp	r2, r1
   19eb6:	dc02      	bgt.n	19ebe <z_time_slice+0x62>
			move_thread_to_end_of_prio_q(_current);
   19eb8:	f7ff ff96 	bl	19de8 <move_thread_to_end_of_prio_q>
   19ebc:	e7de      	b.n	19e7c <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
   19ebe:	1a52      	subs	r2, r2, r1
		_current_cpu->slice_ticks = 0;
   19ec0:	611a      	str	r2, [r3, #16]
   19ec2:	e7dd      	b.n	19e80 <z_time_slice+0x24>
   19ec4:	2200      	movs	r2, #0
   19ec6:	e7fb      	b.n	19ec0 <z_time_slice+0x64>
   19ec8:	20002918 	.word	0x20002918
   19ecc:	20002950 	.word	0x20002950
   19ed0:	20002958 	.word	0x20002958
   19ed4:	20002954 	.word	0x20002954
   19ed8:	20001a98 	.word	0x20001a98

00019edc <ready_thread>:
{
   19edc:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   19ede:	f990 200d 	ldrsb.w	r2, [r0, #13]
   19ee2:	7b43      	ldrb	r3, [r0, #13]
   19ee4:	2a00      	cmp	r2, #0
   19ee6:	db2a      	blt.n	19f3e <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   19ee8:	06da      	lsls	r2, r3, #27
   19eea:	d128      	bne.n	19f3e <ready_thread+0x62>
   19eec:	6982      	ldr	r2, [r0, #24]
   19eee:	bb32      	cbnz	r2, 19f3e <ready_thread+0x62>
	return list->head == list;
   19ef0:	4a14      	ldr	r2, [pc, #80]	; (19f44 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
   19ef2:	f063 037f 	orn	r3, r3, #127	; 0x7f
   19ef6:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
   19ef8:	e9d2 340a 	ldrd	r3, r4, [r2, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19efc:	f102 0528 	add.w	r5, r2, #40	; 0x28
   19f00:	42ab      	cmp	r3, r5
   19f02:	d017      	beq.n	19f34 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   19f04:	b1b3      	cbz	r3, 19f34 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
   19f06:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   19f0a:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   19f0e:	428e      	cmp	r6, r1
   19f10:	d00b      	beq.n	19f2a <ready_thread+0x4e>
		return b2 - b1;
   19f12:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   19f14:	2900      	cmp	r1, #0
   19f16:	dd08      	ble.n	19f2a <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
   19f18:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   19f1a:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   19f1e:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   19f20:	6058      	str	r0, [r3, #4]
}
   19f22:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   19f24:	2000      	movs	r0, #0
   19f26:	f7ff be9f 	b.w	19c68 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   19f2a:	42a3      	cmp	r3, r4
   19f2c:	d002      	beq.n	19f34 <ready_thread+0x58>
   19f2e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   19f30:	2b00      	cmp	r3, #0
   19f32:	d1ea      	bne.n	19f0a <ready_thread+0x2e>
	node->prev = tail;
   19f34:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
   19f38:	6020      	str	r0, [r4, #0]
	list->tail = node;
   19f3a:	62d0      	str	r0, [r2, #44]	; 0x2c
}
   19f3c:	e7f1      	b.n	19f22 <ready_thread+0x46>
}
   19f3e:	bc70      	pop	{r4, r5, r6}
   19f40:	4770      	bx	lr
   19f42:	bf00      	nop
   19f44:	20002918 	.word	0x20002918

00019f48 <z_sched_start>:
{
   19f48:	b510      	push	{r4, lr}
	__asm__ volatile(
   19f4a:	f04f 0240 	mov.w	r2, #64	; 0x40
   19f4e:	f3ef 8411 	mrs	r4, BASEPRI
   19f52:	f382 8811 	msr	BASEPRI, r2
   19f56:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   19f5a:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   19f5c:	0751      	lsls	r1, r2, #29
   19f5e:	d404      	bmi.n	19f6a <z_sched_start+0x22>
	__asm__ volatile(
   19f60:	f384 8811 	msr	BASEPRI, r4
   19f64:	f3bf 8f6f 	isb	sy
}
   19f68:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   19f6a:	f022 0204 	bic.w	r2, r2, #4
   19f6e:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   19f70:	f7ff ffb4 	bl	19edc <ready_thread>
	z_reschedule(&sched_spinlock, key);
   19f74:	4621      	mov	r1, r4
   19f76:	4802      	ldr	r0, [pc, #8]	; (19f80 <z_sched_start+0x38>)
}
   19f78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   19f7c:	f7ff be4e 	b.w	19c1c <z_reschedule>
   19f80:	200036ff 	.word	0x200036ff

00019f84 <z_set_prio>:
{
   19f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19f86:	4604      	mov	r4, r0
	__asm__ volatile(
   19f88:	f04f 0340 	mov.w	r3, #64	; 0x40
   19f8c:	f3ef 8611 	mrs	r6, BASEPRI
   19f90:	f383 8811 	msr	BASEPRI, r3
   19f94:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   19f98:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   19f9a:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   19f9c:	b249      	sxtb	r1, r1
   19f9e:	d133      	bne.n	1a008 <z_set_prio+0x84>
		if (need_sched) {
   19fa0:	6982      	ldr	r2, [r0, #24]
   19fa2:	bb8a      	cbnz	r2, 1a008 <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   19fa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   19fa8:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   19faa:	f006 facf 	bl	2054c <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   19fae:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   19fb0:	4a17      	ldr	r2, [pc, #92]	; (1a010 <z_set_prio+0x8c>)
				thread->base.prio = prio;
   19fb2:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   19fb4:	f063 037f 	orn	r3, r3, #127	; 0x7f
   19fb8:	7343      	strb	r3, [r0, #13]
   19fba:	4610      	mov	r0, r2
   19fbc:	f850 3f28 	ldr.w	r3, [r0, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19fc0:	4283      	cmp	r3, r0
   19fc2:	d01b      	beq.n	19ffc <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   19fc4:	b1d3      	cbz	r3, 19ffc <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
   19fc6:	6ad7      	ldr	r7, [r2, #44]	; 0x2c
	int32_t b2 = thread_2->base.prio;
   19fc8:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
   19fcc:	42a9      	cmp	r1, r5
   19fce:	d010      	beq.n	19ff2 <z_set_prio+0x6e>
		return b2 - b1;
   19fd0:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   19fd2:	2d00      	cmp	r5, #0
   19fd4:	dd0d      	ble.n	19ff2 <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
   19fd6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   19fd8:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   19fdc:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   19fde:	605c      	str	r4, [r3, #4]
			update_cache(1);
   19fe0:	2001      	movs	r0, #1
   19fe2:	f7ff fe41 	bl	19c68 <update_cache>
   19fe6:	2001      	movs	r0, #1
	__asm__ volatile(
   19fe8:	f386 8811 	msr	BASEPRI, r6
   19fec:	f3bf 8f6f 	isb	sy
}
   19ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   19ff2:	42bb      	cmp	r3, r7
   19ff4:	d002      	beq.n	19ffc <z_set_prio+0x78>
   19ff6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   19ff8:	2b00      	cmp	r3, #0
   19ffa:	d1e5      	bne.n	19fc8 <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
   19ffc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->prev = tail;
   19ffe:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
   1a002:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1a004:	62d4      	str	r4, [r2, #44]	; 0x2c
}
   1a006:	e7eb      	b.n	19fe0 <z_set_prio+0x5c>
			thread->base.prio = prio;
   1a008:	73a1      	strb	r1, [r4, #14]
   1a00a:	2000      	movs	r0, #0
   1a00c:	e7ec      	b.n	19fe8 <z_set_prio+0x64>
   1a00e:	bf00      	nop
   1a010:	20002918 	.word	0x20002918

0001a014 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   1a014:	4b04      	ldr	r3, [pc, #16]	; (1a028 <z_sched_init+0x14>)
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1a016:	2100      	movs	r1, #0
   1a018:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   1a01c:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   1a020:	4608      	mov	r0, r1
   1a022:	f7ff bdcb 	b.w	19bbc <k_sched_time_slice_set>
   1a026:	bf00      	nop
   1a028:	20002918 	.word	0x20002918

0001a02c <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   1a02c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   1a02e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a032:	f3ef 8511 	mrs	r5, BASEPRI
   1a036:	f383 8811 	msr	BASEPRI, r3
   1a03a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(&_kernel.ready_q.runq,
   1a03e:	491a      	ldr	r1, [pc, #104]	; (1a0a8 <z_impl_k_yield+0x7c>)
   1a040:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1a042:	7b43      	ldrb	r3, [r0, #13]
   1a044:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1a048:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1a04a:	f006 fa7f 	bl	2054c <sys_dlist_remove>
			       _current);
	}
	queue_thread(&_kernel.ready_q.runq, _current);
   1a04e:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   1a050:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
   1a052:	4608      	mov	r0, r1
   1a054:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1a058:	735a      	strb	r2, [r3, #13]
   1a05a:	f850 2f28 	ldr.w	r2, [r0, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a05e:	4282      	cmp	r2, r0
   1a060:	d01c      	beq.n	1a09c <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1a062:	b1da      	cbz	r2, 1a09c <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
   1a064:	6acf      	ldr	r7, [r1, #44]	; 0x2c
	int32_t b1 = thread_1->base.prio;
   1a066:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   1a06a:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
   1a06e:	42a6      	cmp	r6, r4
   1a070:	d00f      	beq.n	1a092 <z_impl_k_yield+0x66>
		return b2 - b1;
   1a072:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1a074:	2c00      	cmp	r4, #0
   1a076:	dd0c      	ble.n	1a092 <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
   1a078:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1a07a:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   1a07e:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   1a080:	6053      	str	r3, [r2, #4]
	update_cache(1);
   1a082:	2001      	movs	r0, #1
   1a084:	f7ff fdf0 	bl	19c68 <update_cache>
   1a088:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   1a08a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1a08e:	f7f7 bd43 	b.w	11b18 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   1a092:	42ba      	cmp	r2, r7
   1a094:	d002      	beq.n	1a09c <z_impl_k_yield+0x70>
   1a096:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1a098:	2a00      	cmp	r2, #0
   1a09a:	d1e6      	bne.n	1a06a <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
   1a09c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
	node->prev = tail;
   1a09e:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
   1a0a2:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1a0a4:	62cb      	str	r3, [r1, #44]	; 0x2c
}
   1a0a6:	e7ec      	b.n	1a082 <z_impl_k_yield+0x56>
   1a0a8:	20002918 	.word	0x20002918

0001a0ac <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   1a0ac:	ea50 0301 	orrs.w	r3, r0, r1
{
   1a0b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a0b4:	4605      	mov	r5, r0
   1a0b6:	460e      	mov	r6, r1
	if (ticks == 0) {
   1a0b8:	d103      	bne.n	1a0c2 <z_tick_sleep+0x16>
	z_impl_k_yield();
   1a0ba:	f7ff ffb7 	bl	1a02c <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
   1a0be:	2000      	movs	r0, #0
   1a0c0:	e033      	b.n	1a12a <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
   1a0c2:	f06f 0401 	mvn.w	r4, #1
   1a0c6:	1a24      	subs	r4, r4, r0
   1a0c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a0cc:	eb63 0301 	sbc.w	r3, r3, r1
   1a0d0:	2c01      	cmp	r4, #1
   1a0d2:	f173 0300 	sbcs.w	r3, r3, #0
   1a0d6:	da02      	bge.n	1a0de <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   1a0d8:	f006 fb64 	bl	207a4 <sys_clock_tick_get_32>
   1a0dc:	1944      	adds	r4, r0, r5
   1a0de:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a0e2:	f3ef 8811 	mrs	r8, BASEPRI
   1a0e6:	f383 8811 	msr	BASEPRI, r3
   1a0ea:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   1a0ee:	4f10      	ldr	r7, [pc, #64]	; (1a130 <z_tick_sleep+0x84>)
   1a0f0:	4b10      	ldr	r3, [pc, #64]	; (1a134 <z_tick_sleep+0x88>)
   1a0f2:	68b8      	ldr	r0, [r7, #8]
   1a0f4:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   1a0f6:	f7ff fdd7 	bl	19ca8 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1a0fa:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1a0fc:	490e      	ldr	r1, [pc, #56]	; (1a138 <z_tick_sleep+0x8c>)
   1a0fe:	462a      	mov	r2, r5
   1a100:	4633      	mov	r3, r6
   1a102:	3018      	adds	r0, #24
   1a104:	f000 f914 	bl	1a330 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1a108:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1a10a:	7b53      	ldrb	r3, [r2, #13]
   1a10c:	f043 0310 	orr.w	r3, r3, #16
   1a110:	7353      	strb	r3, [r2, #13]
   1a112:	4640      	mov	r0, r8
   1a114:	f7f7 fd00 	bl	11b18 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   1a118:	f006 fb44 	bl	207a4 <sys_clock_tick_get_32>
   1a11c:	1a20      	subs	r0, r4, r0
   1a11e:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   1a122:	2801      	cmp	r0, #1
   1a124:	f173 0300 	sbcs.w	r3, r3, #0
   1a128:	dbc9      	blt.n	1a0be <z_tick_sleep+0x12>
}
   1a12a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a12e:	bf00      	nop
   1a130:	20002918 	.word	0x20002918
   1a134:	20002950 	.word	0x20002950
   1a138:	00020657 	.word	0x00020657

0001a13c <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1a13c:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   1a140:	bf08      	it	eq
   1a142:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   1a146:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1a148:	d106      	bne.n	1a158 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   1a14a:	4b08      	ldr	r3, [pc, #32]	; (1a16c <z_impl_k_sleep+0x30>)
   1a14c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1a14e:	f7ff fdfd 	bl	19d4c <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   1a152:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   1a156:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   1a158:	f7ff ffa8 	bl	1a0ac <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   1a15c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1a160:	fb80 0303 	smull	r0, r3, r0, r3
   1a164:	0bc0      	lsrs	r0, r0, #15
   1a166:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   1a16a:	e7f4      	b.n	1a156 <z_impl_k_sleep+0x1a>
   1a16c:	20002918 	.word	0x20002918

0001a170 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   1a170:	4b01      	ldr	r3, [pc, #4]	; (1a178 <z_impl_k_current_get+0x8>)
   1a172:	6898      	ldr	r0, [r3, #8]
   1a174:	4770      	bx	lr
   1a176:	bf00      	nop
   1a178:	20002918 	.word	0x20002918

0001a17c <z_impl_k_is_preempt_thread>:
   1a17c:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/k_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   1a180:	b93b      	cbnz	r3, 1a192 <z_impl_k_is_preempt_thread+0x16>
   1a182:	4b05      	ldr	r3, [pc, #20]	; (1a198 <z_impl_k_is_preempt_thread+0x1c>)
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   1a184:	689b      	ldr	r3, [r3, #8]
	return !arch_is_in_isr() && is_preempt(_current);
   1a186:	89d8      	ldrh	r0, [r3, #14]
   1a188:	287f      	cmp	r0, #127	; 0x7f
   1a18a:	bf8c      	ite	hi
   1a18c:	2000      	movhi	r0, #0
   1a18e:	2001      	movls	r0, #1
   1a190:	4770      	bx	lr
   1a192:	2000      	movs	r0, #0
}
   1a194:	4770      	bx	lr
   1a196:	bf00      	nop
   1a198:	20002918 	.word	0x20002918

0001a19c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   1a19c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a1a0:	4604      	mov	r4, r0
   1a1a2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a1a6:	f3ef 8611 	mrs	r6, BASEPRI
   1a1aa:	f383 8811 	msr	BASEPRI, r3
   1a1ae:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   1a1b2:	7b43      	ldrb	r3, [r0, #13]
   1a1b4:	071a      	lsls	r2, r3, #28
   1a1b6:	d505      	bpl.n	1a1c4 <z_thread_abort+0x28>
	__asm__ volatile(
   1a1b8:	f386 8811 	msr	BASEPRI, r6
   1a1bc:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   1a1c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1a1c4:	f023 0220 	bic.w	r2, r3, #32
   1a1c8:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   1a1cc:	09d2      	lsrs	r2, r2, #7
   1a1ce:	d120      	bne.n	1a212 <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1a1d0:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   1a1d2:	68a3      	ldr	r3, [r4, #8]
   1a1d4:	b113      	cbz	r3, 1a1dc <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
   1a1d6:	4620      	mov	r0, r4
   1a1d8:	f006 f9c0 	bl	2055c <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   1a1dc:	f104 0018 	add.w	r0, r4, #24
   1a1e0:	f006 faa0 	bl	20724 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1a1e4:	f104 0758 	add.w	r7, r4, #88	; 0x58
   1a1e8:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   1a1ec:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a1ee:	42bd      	cmp	r5, r7
   1a1f0:	d000      	beq.n	1a1f4 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1a1f2:	b9b5      	cbnz	r5, 1a222 <z_thread_abort+0x86>
		update_cache(1);
   1a1f4:	2001      	movs	r0, #1
   1a1f6:	f7ff fd37 	bl	19c68 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   1a1fa:	4b10      	ldr	r3, [pc, #64]	; (1a23c <z_thread_abort+0xa0>)
   1a1fc:	689b      	ldr	r3, [r3, #8]
   1a1fe:	42a3      	cmp	r3, r4
   1a200:	d1da      	bne.n	1a1b8 <z_thread_abort+0x1c>
   1a202:	f3ef 8305 	mrs	r3, IPSR
   1a206:	2b00      	cmp	r3, #0
   1a208:	d1d6      	bne.n	1a1b8 <z_thread_abort+0x1c>
   1a20a:	4630      	mov	r0, r6
   1a20c:	f7f7 fc84 	bl	11b18 <arch_swap>
	return ret;
   1a210:	e7d2      	b.n	1a1b8 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1a212:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   1a216:	f043 0308 	orr.w	r3, r3, #8
   1a21a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1a21c:	f006 f996 	bl	2054c <sys_dlist_remove>
}
   1a220:	e7d7      	b.n	1a1d2 <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
   1a222:	4628      	mov	r0, r5
   1a224:	f006 f99a 	bl	2055c <unpend_thread_no_timeout>
   1a228:	f105 0018 	add.w	r0, r5, #24
   1a22c:	f006 fa7a 	bl	20724 <z_abort_timeout>
   1a230:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   1a234:	4628      	mov	r0, r5
   1a236:	f7ff fe51 	bl	19edc <ready_thread>
   1a23a:	e7d7      	b.n	1a1ec <z_thread_abort+0x50>
   1a23c:	20002918 	.word	0x20002918

0001a240 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   1a240:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1a242:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   1a246:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1a248:	e9cd 6700 	strd	r6, r7, [sp]
   1a24c:	f7ff fd6a 	bl	19d24 <z_pend_curr>

	if (data != NULL) {
   1a250:	b11c      	cbz	r4, 1a25a <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   1a252:	4b03      	ldr	r3, [pc, #12]	; (1a260 <z_sched_wait+0x20>)
   1a254:	689b      	ldr	r3, [r3, #8]
   1a256:	695b      	ldr	r3, [r3, #20]
   1a258:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   1a25a:	b002      	add	sp, #8
   1a25c:	bdd0      	pop	{r4, r6, r7, pc}
   1a25e:	bf00      	nop
   1a260:	20002918 	.word	0x20002918

0001a264 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   1a264:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   1a266:	4806      	ldr	r0, [pc, #24]	; (1a280 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   1a268:	4a06      	ldr	r2, [pc, #24]	; (1a284 <z_data_copy+0x20>)
   1a26a:	4907      	ldr	r1, [pc, #28]	; (1a288 <z_data_copy+0x24>)
   1a26c:	1a12      	subs	r2, r2, r0
   1a26e:	f002 fd1a 	bl	1cca6 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1a272:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   1a276:	4a05      	ldr	r2, [pc, #20]	; (1a28c <z_data_copy+0x28>)
   1a278:	4905      	ldr	r1, [pc, #20]	; (1a290 <z_data_copy+0x2c>)
   1a27a:	4806      	ldr	r0, [pc, #24]	; (1a294 <z_data_copy+0x30>)
   1a27c:	f002 bd13 	b.w	1cca6 <memcpy>
   1a280:	20000000 	.word	0x20000000
   1a284:	2000085c 	.word	0x2000085c
   1a288:	00021de4 	.word	0x00021de4
   1a28c:	00000000 	.word	0x00000000
   1a290:	00021de4 	.word	0x00021de4
   1a294:	20000000 	.word	0x20000000

0001a298 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   1a298:	4b03      	ldr	r3, [pc, #12]	; (1a2a8 <elapsed+0x10>)
   1a29a:	681b      	ldr	r3, [r3, #0]
   1a29c:	b90b      	cbnz	r3, 1a2a2 <elapsed+0xa>
   1a29e:	f7f7 bb05 	b.w	118ac <sys_clock_elapsed>
}
   1a2a2:	2000      	movs	r0, #0
   1a2a4:	4770      	bx	lr
   1a2a6:	bf00      	nop
   1a2a8:	2000295c 	.word	0x2000295c

0001a2ac <next_timeout>:
	return list->head == list;
   1a2ac:	4b11      	ldr	r3, [pc, #68]	; (1a2f4 <next_timeout+0x48>)

static int32_t next_timeout(void)
{
   1a2ae:	b510      	push	{r4, lr}
   1a2b0:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a2b2:	429c      	cmp	r4, r3
   1a2b4:	bf08      	it	eq
   1a2b6:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   1a2b8:	f7ff ffee 	bl	1a298 <elapsed>
   1a2bc:	4603      	mov	r3, r0
	int32_t ret = to == NULL ? MAX_WAIT
   1a2be:	b16c      	cbz	r4, 1a2dc <next_timeout+0x30>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1a2c0:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
   1a2c4:	1ac0      	subs	r0, r0, r3
   1a2c6:	eb62 73e3 	sbc.w	r3, r2, r3, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   1a2ca:	2801      	cmp	r0, #1
   1a2cc:	f173 0200 	sbcs.w	r2, r3, #0
   1a2d0:	db0d      	blt.n	1a2ee <next_timeout+0x42>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1a2d2:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   1a2d6:	f173 0300 	sbcs.w	r3, r3, #0
   1a2da:	db01      	blt.n	1a2e0 <next_timeout+0x34>
	int32_t ret = to == NULL ? MAX_WAIT
   1a2dc:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1a2e0:	4b05      	ldr	r3, [pc, #20]	; (1a2f8 <next_timeout+0x4c>)
   1a2e2:	691b      	ldr	r3, [r3, #16]
   1a2e4:	b113      	cbz	r3, 1a2ec <next_timeout+0x40>
   1a2e6:	4298      	cmp	r0, r3
   1a2e8:	bfa8      	it	ge
   1a2ea:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1a2ec:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   1a2ee:	2000      	movs	r0, #0
   1a2f0:	e7f6      	b.n	1a2e0 <next_timeout+0x34>
   1a2f2:	bf00      	nop
   1a2f4:	20000590 	.word	0x20000590
   1a2f8:	20002918 	.word	0x20002918

0001a2fc <remove_timeout>:
{
   1a2fc:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   1a2fe:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1a300:	b168      	cbz	r0, 1a31e <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   1a302:	4a0a      	ldr	r2, [pc, #40]	; (1a32c <remove_timeout+0x30>)
   1a304:	6852      	ldr	r2, [r2, #4]
   1a306:	4290      	cmp	r0, r2
   1a308:	d009      	beq.n	1a31e <remove_timeout+0x22>
	if (next(t) != NULL) {
   1a30a:	b143      	cbz	r3, 1a31e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   1a30c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   1a310:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1a314:	1912      	adds	r2, r2, r4
   1a316:	eb41 0105 	adc.w	r1, r1, r5
   1a31a:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   1a31e:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   1a320:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1a322:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1a324:	2300      	movs	r3, #0
	node->prev = NULL;
   1a326:	e9c0 3300 	strd	r3, r3, [r0]
}
   1a32a:	bd30      	pop	{r4, r5, pc}
   1a32c:	20000590 	.word	0x20000590

0001a330 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1a330:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1a334:	bf08      	it	eq
   1a336:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   1a33a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a33c:	4604      	mov	r4, r0
   1a33e:	461f      	mov	r7, r3
   1a340:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1a342:	d067      	beq.n	1a414 <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1a344:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   1a346:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a34a:	f3ef 8611 	mrs	r6, BASEPRI
   1a34e:	f383 8811 	msr	BASEPRI, r3
   1a352:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   1a356:	f06f 0201 	mvn.w	r2, #1
   1a35a:	1b53      	subs	r3, r2, r5
   1a35c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   1a360:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   1a364:	2b00      	cmp	r3, #0
   1a366:	db1b      	blt.n	1a3a0 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   1a368:	4b2b      	ldr	r3, [pc, #172]	; (1a418 <z_add_timeout+0xe8>)
   1a36a:	e9d3 1300 	ldrd	r1, r3, [r3]
   1a36e:	1a52      	subs	r2, r2, r1
   1a370:	eb6c 0303 	sbc.w	r3, ip, r3
   1a374:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
   1a376:	eb63 0307 	sbc.w	r3, r3, r7
   1a37a:	2d01      	cmp	r5, #1
   1a37c:	f173 0200 	sbcs.w	r2, r3, #0
   1a380:	bfbc      	itt	lt
   1a382:	2501      	movlt	r5, #1
   1a384:	2300      	movlt	r3, #0
   1a386:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
   1a38a:	4824      	ldr	r0, [pc, #144]	; (1a41c <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
   1a38c:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a390:	4283      	cmp	r3, r0
   1a392:	d118      	bne.n	1a3c6 <z_add_timeout+0x96>
	node->prev = tail;
   1a394:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
   1a398:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   1a39c:	6044      	str	r4, [r0, #4]
}
   1a39e:	e026      	b.n	1a3ee <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   1a3a0:	f7ff ff7a 	bl	1a298 <elapsed>
   1a3a4:	3501      	adds	r5, #1
   1a3a6:	f147 0700 	adc.w	r7, r7, #0
   1a3aa:	182d      	adds	r5, r5, r0
   1a3ac:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
   1a3b0:	e9c4 5704 	strd	r5, r7, [r4, #16]
   1a3b4:	e7e9      	b.n	1a38a <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   1a3b6:	1a52      	subs	r2, r2, r1
   1a3b8:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
   1a3bc:	459c      	cmp	ip, r3
   1a3be:	e9c4 2504 	strd	r2, r5, [r4, #16]
   1a3c2:	d0e7      	beq.n	1a394 <z_add_timeout+0x64>
   1a3c4:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   1a3c6:	2b00      	cmp	r3, #0
   1a3c8:	d0e4      	beq.n	1a394 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
   1a3ca:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
   1a3ce:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
   1a3d2:	428a      	cmp	r2, r1
   1a3d4:	eb75 0e07 	sbcs.w	lr, r5, r7
   1a3d8:	daed      	bge.n	1a3b6 <z_add_timeout+0x86>
				t->dticks -= to->dticks;
   1a3da:	1a8a      	subs	r2, r1, r2
   1a3dc:	eb67 0505 	sbc.w	r5, r7, r5
   1a3e0:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   1a3e4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1a3e6:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1a3ea:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1a3ec:	605c      	str	r4, [r3, #4]
	return list->head == list;
   1a3ee:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a3f0:	4283      	cmp	r3, r0
   1a3f2:	d00b      	beq.n	1a40c <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1a3f4:	429c      	cmp	r4, r3
   1a3f6:	d109      	bne.n	1a40c <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   1a3f8:	f7ff ff58 	bl	1a2ac <next_timeout>

			if (next_time == 0 ||
   1a3fc:	b118      	cbz	r0, 1a406 <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
   1a3fe:	4b08      	ldr	r3, [pc, #32]	; (1a420 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
   1a400:	691b      	ldr	r3, [r3, #16]
   1a402:	4283      	cmp	r3, r0
   1a404:	d002      	beq.n	1a40c <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
   1a406:	2100      	movs	r1, #0
   1a408:	f7f7 fa1e 	bl	11848 <sys_clock_set_timeout>
	__asm__ volatile(
   1a40c:	f386 8811 	msr	BASEPRI, r6
   1a410:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   1a414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a416:	bf00      	nop
   1a418:	20001c38 	.word	0x20001c38
   1a41c:	20000590 	.word	0x20000590
   1a420:	20002918 	.word	0x20002918

0001a424 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   1a424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a428:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1a42a:	f7ff fd17 	bl	19e5c <z_time_slice>
	__asm__ volatile(
   1a42e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a432:	f3ef 8411 	mrs	r4, BASEPRI
   1a436:	f383 8811 	msr	BASEPRI, r3
   1a43a:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1a43e:	4e24      	ldr	r6, [pc, #144]	; (1a4d0 <sys_clock_announce+0xac>)
	return list->head == list;
   1a440:	f8df 8090 	ldr.w	r8, [pc, #144]	; 1a4d4 <sys_clock_announce+0xb0>
   1a444:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   1a446:	4d24      	ldr	r5, [pc, #144]	; (1a4d8 <sys_clock_announce+0xb4>)
   1a448:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   1a44c:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a44e:	4540      	cmp	r0, r8
		curr_tick += dt;
   1a450:	e9d5 1e00 	ldrd	r1, lr, [r5]
   1a454:	ea4f 77e2 	mov.w	r7, r2, asr #31
   1a458:	d00b      	beq.n	1a472 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   1a45a:	b150      	cbz	r0, 1a472 <sys_clock_announce+0x4e>
   1a45c:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
   1a460:	429a      	cmp	r2, r3
   1a462:	eb77 090c 	sbcs.w	r9, r7, ip
   1a466:	da16      	bge.n	1a496 <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1a468:	1a9b      	subs	r3, r3, r2
   1a46a:	eb6c 0c07 	sbc.w	ip, ip, r7
   1a46e:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   1a472:	1852      	adds	r2, r2, r1
   1a474:	eb4e 0707 	adc.w	r7, lr, r7
   1a478:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
   1a47c:	2500      	movs	r5, #0
   1a47e:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
   1a480:	f7ff ff14 	bl	1a2ac <next_timeout>
   1a484:	4629      	mov	r1, r5
   1a486:	f7f7 f9df 	bl	11848 <sys_clock_set_timeout>
	__asm__ volatile(
   1a48a:	f384 8811 	msr	BASEPRI, r4
   1a48e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1a492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   1a496:	1859      	adds	r1, r3, r1
   1a498:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
   1a49c:	1ad3      	subs	r3, r2, r3
   1a49e:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   1a4a0:	2200      	movs	r2, #0
   1a4a2:	2300      	movs	r3, #0
   1a4a4:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
   1a4a8:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
   1a4ac:	f7ff ff26 	bl	1a2fc <remove_timeout>
   1a4b0:	f384 8811 	msr	BASEPRI, r4
   1a4b4:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1a4b8:	6883      	ldr	r3, [r0, #8]
   1a4ba:	4798      	blx	r3
	__asm__ volatile(
   1a4bc:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a4c0:	f3ef 8411 	mrs	r4, BASEPRI
   1a4c4:	f383 8811 	msr	BASEPRI, r3
   1a4c8:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   1a4cc:	e7bc      	b.n	1a448 <sys_clock_announce+0x24>
   1a4ce:	bf00      	nop
   1a4d0:	2000295c 	.word	0x2000295c
   1a4d4:	20000590 	.word	0x20000590
   1a4d8:	20001c38 	.word	0x20001c38

0001a4dc <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   1a4dc:	b510      	push	{r4, lr}
   1a4de:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a4e2:	f3ef 8411 	mrs	r4, BASEPRI
   1a4e6:	f383 8811 	msr	BASEPRI, r3
   1a4ea:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   1a4ee:	f7f7 f9dd 	bl	118ac <sys_clock_elapsed>
   1a4f2:	4a05      	ldr	r2, [pc, #20]	; (1a508 <sys_clock_tick_get+0x2c>)
   1a4f4:	e9d2 3100 	ldrd	r3, r1, [r2]
   1a4f8:	18c0      	adds	r0, r0, r3
   1a4fa:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
   1a4fe:	f384 8811 	msr	BASEPRI, r4
   1a502:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1a506:	bd10      	pop	{r4, pc}
   1a508:	20001c38 	.word	0x20001c38

0001a50c <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   1a50c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1a510:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   1a512:	4b29      	ldr	r3, [pc, #164]	; (1a5b8 <z_impl_k_poll+0xac>)
   1a514:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   1a516:	2301      	movs	r3, #1
   1a518:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   1a51c:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   1a520:	ea52 0305 	orrs.w	r3, r2, r5
{
   1a524:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   1a526:	bf0c      	ite	eq
   1a528:	2301      	moveq	r3, #1
   1a52a:	2300      	movne	r3, #0
   1a52c:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   1a530:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   1a532:	f006 f99c 	bl	2086e <register_events>
   1a536:	4681      	mov	r9, r0
	__asm__ volatile(
   1a538:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a53c:	f3ef 8a11 	mrs	sl, BASEPRI
   1a540:	f383 8811 	msr	BASEPRI, r3
   1a544:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   1a548:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   1a54c:	b964      	cbnz	r4, 1a568 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   1a54e:	4601      	mov	r1, r0
   1a550:	4652      	mov	r2, sl
   1a552:	4640      	mov	r0, r8
   1a554:	f006 fa5c 	bl	20a10 <clear_event_registrations>
	__asm__ volatile(
   1a558:	f38a 8811 	msr	BASEPRI, sl
   1a55c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   1a560:	4620      	mov	r0, r4
   1a562:	b002      	add	sp, #8
   1a564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   1a568:	2300      	movs	r3, #0
   1a56a:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1a56e:	ea56 0305 	orrs.w	r3, r6, r5
   1a572:	d106      	bne.n	1a582 <z_impl_k_poll+0x76>
   1a574:	f38a 8811 	msr	BASEPRI, sl
   1a578:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1a57c:	f06f 040a 	mvn.w	r4, #10
   1a580:	e7ee      	b.n	1a560 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1a582:	e9cd 6500 	strd	r6, r5, [sp]
   1a586:	4a0d      	ldr	r2, [pc, #52]	; (1a5bc <z_impl_k_poll+0xb0>)
   1a588:	480d      	ldr	r0, [pc, #52]	; (1a5c0 <z_impl_k_poll+0xb4>)
   1a58a:	4651      	mov	r1, sl
   1a58c:	f7ff fbca 	bl	19d24 <z_pend_curr>
   1a590:	4604      	mov	r4, r0
	__asm__ volatile(
   1a592:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a596:	f3ef 8511 	mrs	r5, BASEPRI
   1a59a:	f383 8811 	msr	BASEPRI, r3
   1a59e:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   1a5a2:	462a      	mov	r2, r5
   1a5a4:	4649      	mov	r1, r9
   1a5a6:	4640      	mov	r0, r8
   1a5a8:	f006 fa32 	bl	20a10 <clear_event_registrations>
	__asm__ volatile(
   1a5ac:	f385 8811 	msr	BASEPRI, r5
   1a5b0:	f3bf 8f6f 	isb	sy
	return swap_rc;
   1a5b4:	e7d4      	b.n	1a560 <z_impl_k_poll+0x54>
   1a5b6:	bf00      	nop
   1a5b8:	20002918 	.word	0x20002918
   1a5bc:	20000598 	.word	0x20000598
   1a5c0:	200036ff 	.word	0x200036ff

0001a5c4 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   1a5c4:	b538      	push	{r3, r4, r5, lr}
   1a5c6:	4603      	mov	r3, r0
	__asm__ volatile(
   1a5c8:	f04f 0240 	mov.w	r2, #64	; 0x40
   1a5cc:	f3ef 8511 	mrs	r5, BASEPRI
   1a5d0:	f382 8811 	msr	BASEPRI, r2
   1a5d4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   1a5d8:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   1a5da:	2101      	movs	r1, #1
   1a5dc:	6081      	str	r1, [r0, #8]
	return list->head == list;
   1a5de:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1a5e0:	4283      	cmp	r3, r0
   1a5e2:	d106      	bne.n	1a5f2 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   1a5e4:	f385 8811 	msr	BASEPRI, r5
   1a5e8:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   1a5ec:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   1a5ee:	4620      	mov	r0, r4
   1a5f0:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   1a5f2:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1a5f6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1a5f8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1a5fa:	2300      	movs	r3, #0
	node->prev = NULL;
   1a5fc:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1a600:	f006 f9ac 	bl	2095c <signal_poll_event>
	z_reschedule(&lock, key);
   1a604:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1a606:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   1a608:	4801      	ldr	r0, [pc, #4]	; (1a610 <z_impl_k_poll_signal_raise+0x4c>)
   1a60a:	f7ff fb07 	bl	19c1c <z_reschedule>
	return rc;
   1a60e:	e7ee      	b.n	1a5ee <z_impl_k_poll_signal_raise+0x2a>
   1a610:	200036ff 	.word	0x200036ff

0001a614 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   1a614:	b538      	push	{r3, r4, r5, lr}
   1a616:	4604      	mov	r4, r0
   1a618:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   1a61a:	f005 fdb3 	bl	20184 <k_is_in_isr>
   1a61e:	b950      	cbnz	r0, 1a636 <z_thread_aligned_alloc+0x22>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   1a620:	4b06      	ldr	r3, [pc, #24]	; (1a63c <z_thread_aligned_alloc+0x28>)
   1a622:	689b      	ldr	r3, [r3, #8]
   1a624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   1a626:	b143      	cbz	r3, 1a63a <z_thread_aligned_alloc+0x26>
		ret = z_heap_aligned_alloc(heap, align, size);
   1a628:	462a      	mov	r2, r5
   1a62a:	4621      	mov	r1, r4
   1a62c:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   1a62e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   1a632:	f006 ba39 	b.w	20aa8 <z_heap_aligned_alloc>
		heap = _SYSTEM_HEAP;
   1a636:	4b02      	ldr	r3, [pc, #8]	; (1a640 <z_thread_aligned_alloc+0x2c>)
   1a638:	e7f6      	b.n	1a628 <z_thread_aligned_alloc+0x14>
}
   1a63a:	bd38      	pop	{r3, r4, r5, pc}
   1a63c:	20002918 	.word	0x20002918
   1a640:	200006a0 	.word	0x200006a0

0001a644 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   1a644:	4a02      	ldr	r2, [pc, #8]	; (1a650 <boot_banner+0xc>)
   1a646:	4903      	ldr	r1, [pc, #12]	; (1a654 <boot_banner+0x10>)
   1a648:	4803      	ldr	r0, [pc, #12]	; (1a658 <boot_banner+0x14>)
   1a64a:	f000 b8c0 	b.w	1a7ce <printk>
   1a64e:	bf00      	nop
   1a650:	000216f0 	.word	0x000216f0
   1a654:	00021dad 	.word	0x00021dad
   1a658:	00021dbc 	.word	0x00021dbc

0001a65c <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   1a65c:	4770      	bx	lr

0001a65e <le_param_req>:
}
   1a65e:	2001      	movs	r0, #1
   1a660:	4770      	bx	lr

0001a662 <u8_to_dec>:
 */

#include <sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   1a662:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t divisor = 100;
   1a664:	2364      	movs	r3, #100	; 0x64
{
   1a666:	4604      	mov	r4, r0
	uint8_t num_digits = 0;
	uint8_t digit;

	while (buflen > 0 && divisor > 0) {
   1a668:	2504      	movs	r5, #4
	uint8_t num_digits = 0;
   1a66a:	2000      	movs	r0, #0
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   1a66c:	f04f 0c0a 	mov.w	ip, #10
	while (buflen > 0 && divisor > 0) {
   1a670:	b111      	cbz	r1, 1a678 <u8_to_dec+0x16>
   1a672:	3d01      	subs	r5, #1
   1a674:	d101      	bne.n	1a67a <u8_to_dec+0x18>
	}

	if (buflen) {
		*buf = '\0';
   1a676:	7025      	strb	r5, [r4, #0]
	}

	return num_digits;
}
   1a678:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   1a67a:	429a      	cmp	r2, r3
		digit = value / divisor;
   1a67c:	fbb2 f7f3 	udiv	r7, r2, r3
   1a680:	b2fe      	uxtb	r6, r7
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   1a682:	d202      	bcs.n	1a68a <u8_to_dec+0x28>
   1a684:	2b01      	cmp	r3, #1
   1a686:	d000      	beq.n	1a68a <u8_to_dec+0x28>
   1a688:	b130      	cbz	r0, 1a698 <u8_to_dec+0x36>
			*buf = (char)digit + '0';
   1a68a:	3630      	adds	r6, #48	; 0x30
			buflen--;
   1a68c:	3901      	subs	r1, #1
			num_digits++;
   1a68e:	3001      	adds	r0, #1
			*buf = (char)digit + '0';
   1a690:	f804 6b01 	strb.w	r6, [r4], #1
			buflen--;
   1a694:	b2c9      	uxtb	r1, r1
			num_digits++;
   1a696:	b2c0      	uxtb	r0, r0
		value -= digit * divisor;
   1a698:	fb03 2217 	mls	r2, r3, r7, r2
   1a69c:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   1a69e:	fbb3 f3fc 	udiv	r3, r3, ip
   1a6a2:	e7e5      	b.n	1a670 <u8_to_dec+0xe>

0001a6a4 <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   1a6a4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1a6a8:	b2da      	uxtb	r2, r3
   1a6aa:	2a09      	cmp	r2, #9
   1a6ac:	d802      	bhi.n	1a6b4 <char2hex+0x10>
		*x = c - '0';
   1a6ae:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   1a6b0:	2000      	movs	r0, #0
   1a6b2:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   1a6b4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   1a6b8:	2b05      	cmp	r3, #5
   1a6ba:	d802      	bhi.n	1a6c2 <char2hex+0x1e>
		*x = c - 'a' + 10;
   1a6bc:	3857      	subs	r0, #87	; 0x57
   1a6be:	7008      	strb	r0, [r1, #0]
   1a6c0:	e7f6      	b.n	1a6b0 <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   1a6c2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   1a6c6:	2b05      	cmp	r3, #5
   1a6c8:	d801      	bhi.n	1a6ce <char2hex+0x2a>
		*x = c - 'A' + 10;
   1a6ca:	3837      	subs	r0, #55	; 0x37
   1a6cc:	e7f7      	b.n	1a6be <char2hex+0x1a>
		return -EINVAL;
   1a6ce:	f06f 0015 	mvn.w	r0, #21
}
   1a6d2:	4770      	bx	lr

0001a6d4 <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   1a6d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1a6d8:	4614      	mov	r4, r2
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   1a6da:	f001 0201 	and.w	r2, r1, #1
   1a6de:	eb02 0651 	add.w	r6, r2, r1, lsr #1
   1a6e2:	429e      	cmp	r6, r3
{
   1a6e4:	4605      	mov	r5, r0
	if (buflen < hexlen / 2 + hexlen % 2) {
   1a6e6:	ea4f 0751 	mov.w	r7, r1, lsr #1
   1a6ea:	d904      	bls.n	1a6f6 <hex2bin+0x22>
		return 0;
   1a6ec:	2600      	movs	r6, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   1a6ee:	4630      	mov	r0, r6
   1a6f0:	b002      	add	sp, #8
   1a6f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (hexlen % 2) {
   1a6f6:	b15a      	cbz	r2, 1a710 <hex2bin+0x3c>
		if (char2hex(hex[0], &dec) < 0) {
   1a6f8:	7800      	ldrb	r0, [r0, #0]
   1a6fa:	f10d 0107 	add.w	r1, sp, #7
   1a6fe:	f7ff ffd1 	bl	1a6a4 <char2hex>
   1a702:	2800      	cmp	r0, #0
   1a704:	dbf2      	blt.n	1a6ec <hex2bin+0x18>
		buf[0] = dec;
   1a706:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1a70a:	f804 3b01 	strb.w	r3, [r4], #1
		hex++;
   1a70e:	3501      	adds	r5, #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   1a710:	3501      	adds	r5, #1
   1a712:	4427      	add	r7, r4
   1a714:	42bc      	cmp	r4, r7
   1a716:	d0ea      	beq.n	1a6ee <hex2bin+0x1a>
		if (char2hex(hex[2 * i], &dec) < 0) {
   1a718:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   1a71c:	f10d 0107 	add.w	r1, sp, #7
   1a720:	f7ff ffc0 	bl	1a6a4 <char2hex>
   1a724:	2800      	cmp	r0, #0
   1a726:	dbe1      	blt.n	1a6ec <hex2bin+0x18>
		buf[i] = dec << 4;
   1a728:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1a72c:	011b      	lsls	r3, r3, #4
   1a72e:	7023      	strb	r3, [r4, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   1a730:	f815 0b02 	ldrb.w	r0, [r5], #2
   1a734:	f7ff ffb6 	bl	1a6a4 <char2hex>
   1a738:	2800      	cmp	r0, #0
   1a73a:	dbd7      	blt.n	1a6ec <hex2bin+0x18>
		buf[i] += dec;
   1a73c:	7823      	ldrb	r3, [r4, #0]
   1a73e:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1a742:	4413      	add	r3, r2
   1a744:	f804 3b01 	strb.w	r3, [r4], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   1a748:	e7e4      	b.n	1a714 <hex2bin+0x40>

0001a74a <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   1a74a:	4603      	mov	r3, r0
   1a74c:	b140      	cbz	r0, 1a760 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1a74e:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1a750:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   1a754:	2a02      	cmp	r2, #2
   1a756:	d006      	beq.n	1a766 <sys_notify_validate+0x1c>
   1a758:	2a03      	cmp	r2, #3
   1a75a:	d004      	beq.n	1a766 <sys_notify_validate+0x1c>
   1a75c:	2a01      	cmp	r2, #1
   1a75e:	d005      	beq.n	1a76c <sys_notify_validate+0x22>
		return -EINVAL;
   1a760:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   1a764:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1a766:	681a      	ldr	r2, [r3, #0]
   1a768:	2a00      	cmp	r2, #0
   1a76a:	d0f9      	beq.n	1a760 <sys_notify_validate+0x16>
		notify->result = 0;
   1a76c:	2000      	movs	r0, #0
   1a76e:	6098      	str	r0, [r3, #8]
   1a770:	4770      	bx	lr

0001a772 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1a772:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1a774:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   1a778:	2a02      	cmp	r2, #2
{
   1a77a:	b510      	push	{r4, lr}
   1a77c:	4603      	mov	r3, r0
	notify->result = res;
   1a77e:	6081      	str	r1, [r0, #8]
	switch (method) {
   1a780:	d00a      	beq.n	1a798 <sys_notify_finalize+0x26>
   1a782:	2a03      	cmp	r2, #3
   1a784:	d10b      	bne.n	1a79e <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   1a786:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   1a788:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1a78a:	2200      	movs	r2, #0
   1a78c:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   1a78e:	b108      	cbz	r0, 1a794 <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(sig, result);
   1a790:	f7ff ff18 	bl	1a5c4 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1a794:	4620      	mov	r0, r4
   1a796:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   1a798:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   1a79a:	2400      	movs	r4, #0
		break;
   1a79c:	e7f5      	b.n	1a78a <sys_notify_finalize+0x18>
	switch (method) {
   1a79e:	2400      	movs	r4, #0
   1a7a0:	4620      	mov	r0, r4
   1a7a2:	e7f2      	b.n	1a78a <sys_notify_finalize+0x18>

0001a7a4 <arch_printk_char_out>:
}
   1a7a4:	2000      	movs	r0, #0
   1a7a6:	4770      	bx	lr

0001a7a8 <str_out>:
{
   1a7a8:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1a7aa:	688a      	ldr	r2, [r1, #8]
   1a7ac:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   1a7ae:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1a7b0:	b114      	cbz	r4, 1a7b8 <str_out+0x10>
   1a7b2:	684b      	ldr	r3, [r1, #4]
   1a7b4:	4293      	cmp	r3, r2
   1a7b6:	dc01      	bgt.n	1a7bc <str_out+0x14>
		ctx->count++;
   1a7b8:	608d      	str	r5, [r1, #8]
}
   1a7ba:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   1a7bc:	3b01      	subs	r3, #1
   1a7be:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   1a7c0:	bf08      	it	eq
   1a7c2:	2200      	moveq	r2, #0
   1a7c4:	608d      	str	r5, [r1, #8]
   1a7c6:	bf0c      	ite	eq
   1a7c8:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   1a7ca:	54a0      	strbne	r0, [r4, r2]
   1a7cc:	e7f5      	b.n	1a7ba <str_out+0x12>

0001a7ce <printk>:
{
   1a7ce:	b40f      	push	{r0, r1, r2, r3}
   1a7d0:	b507      	push	{r0, r1, r2, lr}
   1a7d2:	a904      	add	r1, sp, #16
   1a7d4:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1a7d8:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   1a7da:	f7f5 fc0d 	bl	fff8 <vprintk>
}
   1a7de:	b003      	add	sp, #12
   1a7e0:	f85d eb04 	ldr.w	lr, [sp], #4
   1a7e4:	b004      	add	sp, #16
   1a7e6:	4770      	bx	lr

0001a7e8 <snprintk>:
{
   1a7e8:	b40c      	push	{r2, r3}
   1a7ea:	b507      	push	{r0, r1, r2, lr}
   1a7ec:	ab04      	add	r3, sp, #16
   1a7ee:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1a7f2:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1a7f4:	f7f5 fc0e 	bl	10014 <vsnprintk>
}
   1a7f8:	b003      	add	sp, #12
   1a7fa:	f85d eb04 	ldr.w	lr, [sp], #4
   1a7fe:	b002      	add	sp, #8
   1a800:	4770      	bx	lr

0001a802 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1a802:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   1a804:	f013 0307 	ands.w	r3, r3, #7
   1a808:	d105      	bne.n	1a816 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1a80a:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   1a80c:	2b00      	cmp	r3, #0
   1a80e:	bf0c      	ite	eq
   1a810:	2000      	moveq	r0, #0
   1a812:	2003      	movne	r0, #3
   1a814:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1a816:	2b02      	cmp	r3, #2
   1a818:	d105      	bne.n	1a826 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   1a81a:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
   1a81c:	2b00      	cmp	r3, #0
   1a81e:	bf14      	ite	ne
   1a820:	2000      	movne	r0, #0
   1a822:	2004      	moveq	r0, #4
   1a824:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   1a826:	2b01      	cmp	r3, #1
   1a828:	d105      	bne.n	1a836 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1a82a:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   1a82c:	2b00      	cmp	r3, #0
   1a82e:	bf0c      	ite	eq
   1a830:	2000      	moveq	r0, #0
   1a832:	2005      	movne	r0, #5
   1a834:	4770      	bx	lr
	int evt = EVT_NOP;
   1a836:	2000      	movs	r0, #0
}
   1a838:	4770      	bx	lr

0001a83a <notify_one>:
{
   1a83a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a83e:	460d      	mov	r5, r1
   1a840:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1a842:	4619      	mov	r1, r3
   1a844:	1d28      	adds	r0, r5, #4
{
   1a846:	4690      	mov	r8, r2
   1a848:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1a84a:	f7ff ff92 	bl	1a772 <sys_notify_finalize>
	if (cb) {
   1a84e:	4604      	mov	r4, r0
   1a850:	b138      	cbz	r0, 1a862 <notify_one+0x28>
		cb(mgr, cli, state, res);
   1a852:	4633      	mov	r3, r6
   1a854:	4642      	mov	r2, r8
   1a856:	4629      	mov	r1, r5
   1a858:	4638      	mov	r0, r7
   1a85a:	46a4      	mov	ip, r4
}
   1a85c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   1a860:	4760      	bx	ip
}
   1a862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001a866 <transition_complete>:
{
   1a866:	b410      	push	{r4}
	__asm__ volatile(
   1a868:	f04f 0440 	mov.w	r4, #64	; 0x40
   1a86c:	f3ef 8211 	mrs	r2, BASEPRI
   1a870:	f384 8811 	msr	BASEPRI, r4
   1a874:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   1a878:	6141      	str	r1, [r0, #20]
}
   1a87a:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   1a87c:	2101      	movs	r1, #1
   1a87e:	f7f5 bbdd 	b.w	1003c <process_event>

0001a882 <validate_args>:
{
   1a882:	b510      	push	{r4, lr}
   1a884:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1a886:	b140      	cbz	r0, 1a89a <validate_args+0x18>
   1a888:	b139      	cbz	r1, 1a89a <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   1a88a:	1d08      	adds	r0, r1, #4
   1a88c:	f7ff ff5d 	bl	1a74a <sys_notify_validate>
	if ((rv == 0)
   1a890:	b928      	cbnz	r0, 1a89e <validate_args+0x1c>
	    && ((cli->notify.flags
   1a892:	68a3      	ldr	r3, [r4, #8]
   1a894:	f033 0303 	bics.w	r3, r3, #3
   1a898:	d001      	beq.n	1a89e <validate_args+0x1c>
		rv = -EINVAL;
   1a89a:	f06f 0015 	mvn.w	r0, #21
}
   1a89e:	bd10      	pop	{r4, pc}

0001a8a0 <onoff_manager_init>:
{
   1a8a0:	b538      	push	{r3, r4, r5, lr}
   1a8a2:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1a8a4:	4605      	mov	r5, r0
   1a8a6:	b158      	cbz	r0, 1a8c0 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1a8a8:	b151      	cbz	r1, 1a8c0 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1a8aa:	680b      	ldr	r3, [r1, #0]
   1a8ac:	b143      	cbz	r3, 1a8c0 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1a8ae:	684b      	ldr	r3, [r1, #4]
   1a8b0:	b133      	cbz	r3, 1a8c0 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1a8b2:	221c      	movs	r2, #28
   1a8b4:	2100      	movs	r1, #0
   1a8b6:	f002 fa01 	bl	1ccbc <memset>
   1a8ba:	612c      	str	r4, [r5, #16]
	return 0;
   1a8bc:	2000      	movs	r0, #0
}
   1a8be:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1a8c0:	f06f 0015 	mvn.w	r0, #21
   1a8c4:	e7fb      	b.n	1a8be <onoff_manager_init+0x1e>

0001a8c6 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   1a8c6:	b570      	push	{r4, r5, r6, lr}
   1a8c8:	4604      	mov	r4, r0
   1a8ca:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1a8cc:	f7ff ffd9 	bl	1a882 <validate_args>

	if (rv < 0) {
   1a8d0:	1e05      	subs	r5, r0, #0
   1a8d2:	db31      	blt.n	1a938 <onoff_request+0x72>
   1a8d4:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a8d8:	f3ef 8111 	mrs	r1, BASEPRI
   1a8dc:	f383 8811 	msr	BASEPRI, r3
   1a8e0:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1a8e4:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1a8e6:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   1a8e8:	f64f 75ff 	movw	r5, #65535	; 0xffff
   1a8ec:	42ab      	cmp	r3, r5
   1a8ee:	f000 0207 	and.w	r2, r0, #7
   1a8f2:	d02e      	beq.n	1a952 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   1a8f4:	2a02      	cmp	r2, #2
   1a8f6:	d10e      	bne.n	1a916 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   1a8f8:	3301      	adds	r3, #1
   1a8fa:	8363      	strh	r3, [r4, #26]
	rv = state;
   1a8fc:	4615      	mov	r5, r2
		notify = true;
   1a8fe:	2301      	movs	r3, #1
	__asm__ volatile(
   1a900:	f381 8811 	msr	BASEPRI, r1
   1a904:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   1a908:	b1b3      	cbz	r3, 1a938 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   1a90a:	2300      	movs	r3, #0
   1a90c:	4631      	mov	r1, r6
   1a90e:	4620      	mov	r0, r4
   1a910:	f7ff ff93 	bl	1a83a <notify_one>
   1a914:	e010      	b.n	1a938 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   1a916:	0783      	lsls	r3, r0, #30
   1a918:	d001      	beq.n	1a91e <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   1a91a:	2a06      	cmp	r2, #6
   1a91c:	d10e      	bne.n	1a93c <onoff_request+0x76>
	parent->next = child;
   1a91e:	2300      	movs	r3, #0
   1a920:	6033      	str	r3, [r6, #0]
	return list->tail;
   1a922:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   1a924:	b993      	cbnz	r3, 1a94c <onoff_request+0x86>
	list->head = node;
   1a926:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   1a92a:	4615      	mov	r5, r2
   1a92c:	b962      	cbnz	r2, 1a948 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   1a92e:	460a      	mov	r2, r1
   1a930:	4620      	mov	r0, r4
   1a932:	2102      	movs	r1, #2
   1a934:	f7f5 fb82 	bl	1003c <process_event>
		}
	}

	return rv;
}
   1a938:	4628      	mov	r0, r5
   1a93a:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   1a93c:	2a05      	cmp	r2, #5
   1a93e:	bf0c      	ite	eq
   1a940:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   1a944:	f06f 0504 	mvnne.w	r5, #4
   1a948:	2300      	movs	r3, #0
   1a94a:	e7d9      	b.n	1a900 <onoff_request+0x3a>
	parent->next = child;
   1a94c:	601e      	str	r6, [r3, #0]
	list->tail = node;
   1a94e:	6066      	str	r6, [r4, #4]
}
   1a950:	e7eb      	b.n	1a92a <onoff_request+0x64>
		rv = -EAGAIN;
   1a952:	f06f 050a 	mvn.w	r5, #10
   1a956:	e7f7      	b.n	1a948 <onoff_request+0x82>

0001a958 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1a958:	4604      	mov	r4, r0
   1a95a:	b508      	push	{r3, lr}
   1a95c:	4608      	mov	r0, r1
   1a95e:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   1a960:	461a      	mov	r2, r3
   1a962:	47a0      	blx	r4
	return z_impl_k_current_get();
   1a964:	f7ff fc04 	bl	1a170 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   1a968:	f7f7 fb9e 	bl	120a8 <z_impl_k_thread_abort>

0001a96c <chunk_field>:
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   1a96c:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   1a96e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1a972:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   1a976:	bf2c      	ite	cs
   1a978:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
   1a97c:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   1a980:	4770      	bx	lr

0001a982 <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   1a982:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
   1a986:	6880      	ldr	r0, [r0, #8]
   1a988:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   1a98c:	bf2c      	ite	cs
   1a98e:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   1a992:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   1a996:	4770      	bx	lr

0001a998 <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
   1a998:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1a99a:	2201      	movs	r2, #1
   1a99c:	f7ff ffe6 	bl	1a96c <chunk_field>
}
   1a9a0:	40d0      	lsrs	r0, r2
   1a9a2:	bd08      	pop	{r3, pc}

0001a9a4 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   1a9a4:	6883      	ldr	r3, [r0, #8]
   1a9a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
   1a9aa:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1a9ae:	d308      	bcc.n	1a9c2 <set_chunk_used+0x1e>
		if (used) {
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1a9b0:	684b      	ldr	r3, [r1, #4]
		if (used) {
   1a9b2:	b11a      	cbz	r2, 1a9bc <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1a9b4:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1a9b8:	604b      	str	r3, [r1, #4]
   1a9ba:	4770      	bx	lr
   1a9bc:	f023 0301 	bic.w	r3, r3, #1
   1a9c0:	e7fa      	b.n	1a9b8 <set_chunk_used+0x14>
		}
	} else {
		if (used) {
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1a9c2:	884b      	ldrh	r3, [r1, #2]
		if (used) {
   1a9c4:	b11a      	cbz	r2, 1a9ce <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1a9c6:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1a9ca:	804b      	strh	r3, [r1, #2]
		}
	}
}
   1a9cc:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1a9ce:	f023 0301 	bic.w	r3, r3, #1
   1a9d2:	e7fa      	b.n	1a9ca <set_chunk_used+0x26>

0001a9d4 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1a9d4:	0053      	lsls	r3, r2, #1
   1a9d6:	2201      	movs	r2, #1
   1a9d8:	f7ff bfd3 	b.w	1a982 <chunk_set>

0001a9dc <bucket_idx.isra.0>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   1a9dc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   1a9e0:	bf2c      	ite	cs
   1a9e2:	2008      	movcs	r0, #8
   1a9e4:	2004      	movcc	r0, #4
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   1a9e6:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1a9e8:	3008      	adds	r0, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   1a9ea:	eba1 00d0 	sub.w	r0, r1, r0, lsr #3
	return 31 - __builtin_clz(usable_sz);
   1a9ee:	fab0 f080 	clz	r0, r0
}
   1a9f2:	f1c0 001f 	rsb	r0, r0, #31
   1a9f6:	4770      	bx	lr

0001a9f8 <free_list_remove_bidx>:

	return ret;
}

static void free_list_remove_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
   1a9f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a9fc:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   1a9fe:	2203      	movs	r2, #3
   1aa00:	460e      	mov	r6, r1
   1aa02:	4604      	mov	r4, r0
   1aa04:	f7ff ffb2 	bl	1a96c <chunk_field>

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & (1 << bidx));

	if (next_free_chunk(h, c) == c) {
   1aa08:	4286      	cmp	r6, r0
   1aa0a:	4605      	mov	r5, r0
   1aa0c:	f107 0804 	add.w	r8, r7, #4
   1aa10:	d10b      	bne.n	1aa2a <free_list_remove_bidx+0x32>
		/* this is the last chunk */
		h->avail_buckets &= ~(1 << bidx);
   1aa12:	2301      	movs	r3, #1
   1aa14:	fa03 f707 	lsl.w	r7, r3, r7
   1aa18:	68e3      	ldr	r3, [r4, #12]
   1aa1a:	ea23 0307 	bic.w	r3, r3, r7
   1aa1e:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   1aa20:	2300      	movs	r3, #0
   1aa22:	f844 3028 	str.w	r3, [r4, r8, lsl #2]

		b->next = second;
		set_next_free_chunk(h, first, second);
		set_prev_free_chunk(h, second, first);
	}
}
   1aa26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   1aa2a:	4631      	mov	r1, r6
   1aa2c:	2202      	movs	r2, #2
   1aa2e:	4620      	mov	r0, r4
   1aa30:	f7ff ff9c 	bl	1a96c <chunk_field>
	chunk_set(h, c, FREE_NEXT, next);
   1aa34:	462b      	mov	r3, r5
	return chunk_field(h, c, FREE_PREV);
   1aa36:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   1aa38:	4601      	mov	r1, r0
		b->next = second;
   1aa3a:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   1aa3e:	4620      	mov	r0, r4
   1aa40:	2203      	movs	r2, #3
   1aa42:	f7ff ff9e 	bl	1a982 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1aa46:	4633      	mov	r3, r6
   1aa48:	4629      	mov	r1, r5
   1aa4a:	4620      	mov	r0, r4
   1aa4c:	2202      	movs	r2, #2
}
   1aa4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1aa52:	f7ff bf96 	b.w	1a982 <chunk_set>

0001aa56 <free_list_remove>:

static void free_list_remove(struct z_heap *h, chunkid_t c)
{
   1aa56:	b570      	push	{r4, r5, r6, lr}
	return big_heap_chunks(h->end_chunk);
   1aa58:	6886      	ldr	r6, [r0, #8]
   1aa5a:	460d      	mov	r5, r1
   1aa5c:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
   1aa5e:	f7ff ff9b 	bl	1a998 <chunk_size>
   1aa62:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   1aa66:	4601      	mov	r1, r0
   1aa68:	d301      	bcc.n	1aa6e <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   1aa6a:	2801      	cmp	r0, #1
   1aa6c:	d009      	beq.n	1aa82 <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1aa6e:	4630      	mov	r0, r6
   1aa70:	f7ff ffb4 	bl	1a9dc <bucket_idx.isra.0>
		free_list_remove_bidx(h, c, bidx);
   1aa74:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   1aa76:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   1aa78:	4620      	mov	r0, r4
	}
}
   1aa7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		free_list_remove_bidx(h, c, bidx);
   1aa7e:	f7ff bfbb 	b.w	1a9f8 <free_list_remove_bidx>
}
   1aa82:	bd70      	pop	{r4, r5, r6, pc}

0001aa84 <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   1aa84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1aa88:	4605      	mov	r5, r0
	int bi = bucket_idx(h, sz);
   1aa8a:	6880      	ldr	r0, [r0, #8]
{
   1aa8c:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
   1aa8e:	f7ff ffa5 	bl	1a9dc <bucket_idx.isra.0>
   1aa92:	eb05 0a80 	add.w	sl, r5, r0, lsl #2
   1aa96:	4606      	mov	r6, r0
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   1aa98:	f8da 9010 	ldr.w	r9, [sl, #16]
   1aa9c:	f1b9 0f00 	cmp.w	r9, #0
   1aaa0:	d01b      	beq.n	1aada <alloc_chunk+0x56>
   1aaa2:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   1aaa4:	f8da 4010 	ldr.w	r4, [sl, #16]
			if (chunk_size(h, c) >= sz) {
   1aaa8:	4628      	mov	r0, r5
   1aaaa:	4621      	mov	r1, r4
   1aaac:	f7ff ff74 	bl	1a998 <chunk_size>
   1aab0:	4540      	cmp	r0, r8
   1aab2:	d307      	bcc.n	1aac4 <alloc_chunk+0x40>
				free_list_remove_bidx(h, c, bi);
   1aab4:	4632      	mov	r2, r6

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   1aab6:	4621      	mov	r1, r4
   1aab8:	4628      	mov	r0, r5
   1aaba:	f7ff ff9d 	bl	1a9f8 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   1aabe:	4620      	mov	r0, r4
   1aac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return chunk_field(h, c, FREE_NEXT);
   1aac4:	2203      	movs	r2, #3
   1aac6:	4621      	mov	r1, r4
   1aac8:	4628      	mov	r0, r5
   1aaca:	f7ff ff4f 	bl	1a96c <chunk_field>
		} while (--i && b->next != first);
   1aace:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   1aad0:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
   1aad4:	d001      	beq.n	1aada <alloc_chunk+0x56>
   1aad6:	4581      	cmp	r9, r0
   1aad8:	d1e4      	bne.n	1aaa4 <alloc_chunk+0x20>
	uint32_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   1aada:	68e9      	ldr	r1, [r5, #12]
   1aadc:	3601      	adds	r6, #1
   1aade:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1aae2:	40b4      	lsls	r4, r6
	if (bmask != 0U) {
   1aae4:	400c      	ands	r4, r1
   1aae6:	d0ea      	beq.n	1aabe <alloc_chunk+0x3a>
		int minbucket = __builtin_ctz(bmask);
   1aae8:	fa94 f2a4 	rbit	r2, r4
   1aaec:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1aaf0:	1d13      	adds	r3, r2, #4
   1aaf2:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
   1aaf6:	e7de      	b.n	1aab6 <alloc_chunk+0x32>

0001aaf8 <split_chunks>:
{
   1aaf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1aafc:	4614      	mov	r4, r2
   1aafe:	4605      	mov	r5, r0
   1ab00:	460e      	mov	r6, r1
	chunksz_t sz0 = chunk_size(h, lc);
   1ab02:	f7ff ff49 	bl	1a998 <chunk_size>
	chunksz_t lsz = rc - lc;
   1ab06:	eba4 0806 	sub.w	r8, r4, r6
	chunksz_t rsz = sz0 - lsz;
   1ab0a:	1b37      	subs	r7, r6, r4
   1ab0c:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
   1ab0e:	4642      	mov	r2, r8
   1ab10:	4631      	mov	r1, r6
   1ab12:	4628      	mov	r0, r5
   1ab14:	f7ff ff5e 	bl	1a9d4 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   1ab18:	463a      	mov	r2, r7
   1ab1a:	4621      	mov	r1, r4
   1ab1c:	4628      	mov	r0, r5
   1ab1e:	f7ff ff59 	bl	1a9d4 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1ab22:	4643      	mov	r3, r8
   1ab24:	2200      	movs	r2, #0
   1ab26:	4621      	mov	r1, r4
   1ab28:	4628      	mov	r0, r5
   1ab2a:	f7ff ff2a 	bl	1a982 <chunk_set>
	return c + chunk_size(h, c);
   1ab2e:	4621      	mov	r1, r4
   1ab30:	4628      	mov	r0, r5
   1ab32:	f7ff ff31 	bl	1a998 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1ab36:	463b      	mov	r3, r7
   1ab38:	1821      	adds	r1, r4, r0
   1ab3a:	2200      	movs	r2, #0
   1ab3c:	4628      	mov	r0, r5
}
   1ab3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1ab42:	f7ff bf1e 	b.w	1a982 <chunk_set>

0001ab46 <merge_chunks>:
{
   1ab46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ab4a:	4616      	mov	r6, r2
   1ab4c:	4604      	mov	r4, r0
   1ab4e:	460f      	mov	r7, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1ab50:	f7ff ff22 	bl	1a998 <chunk_size>
   1ab54:	4631      	mov	r1, r6
   1ab56:	4605      	mov	r5, r0
   1ab58:	4620      	mov	r0, r4
   1ab5a:	f7ff ff1d 	bl	1a998 <chunk_size>
   1ab5e:	4405      	add	r5, r0
	set_chunk_size(h, lc, newsz);
   1ab60:	462a      	mov	r2, r5
   1ab62:	4639      	mov	r1, r7
   1ab64:	4620      	mov	r0, r4
   1ab66:	f7ff ff35 	bl	1a9d4 <set_chunk_size>
	return c + chunk_size(h, c);
   1ab6a:	4631      	mov	r1, r6
   1ab6c:	4620      	mov	r0, r4
   1ab6e:	f7ff ff13 	bl	1a998 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1ab72:	462b      	mov	r3, r5
   1ab74:	1831      	adds	r1, r6, r0
   1ab76:	2200      	movs	r2, #0
   1ab78:	4620      	mov	r0, r4
}
   1ab7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1ab7e:	f7ff bf00 	b.w	1a982 <chunk_set>

0001ab82 <free_list_add>:
{
   1ab82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return big_heap_chunks(h->end_chunk);
   1ab86:	6886      	ldr	r6, [r0, #8]
   1ab88:	460d      	mov	r5, r1
   1ab8a:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
   1ab8c:	f7ff ff04 	bl	1a998 <chunk_size>
   1ab90:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   1ab94:	4601      	mov	r1, r0
   1ab96:	d301      	bcc.n	1ab9c <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   1ab98:	2801      	cmp	r0, #1
   1ab9a:	d033      	beq.n	1ac04 <free_list_add+0x82>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1ab9c:	4630      	mov	r0, r6
   1ab9e:	f7ff ff1d 	bl	1a9dc <bucket_idx.isra.0>
	if (b->next == 0U) {
   1aba2:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   1aba6:	6916      	ldr	r6, [r2, #16]
   1aba8:	b99e      	cbnz	r6, 1abd2 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   1abaa:	2301      	movs	r3, #1
   1abac:	fa03 f000 	lsl.w	r0, r3, r0
   1abb0:	68e3      	ldr	r3, [r4, #12]
   1abb2:	4303      	orrs	r3, r0
   1abb4:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   1abb6:	4629      	mov	r1, r5
		b->next = c;
   1abb8:	6115      	str	r5, [r2, #16]
   1abba:	462b      	mov	r3, r5
   1abbc:	2202      	movs	r2, #2
   1abbe:	4620      	mov	r0, r4
   1abc0:	f7ff fedf 	bl	1a982 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1abc4:	2203      	movs	r2, #3
   1abc6:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   1abc8:	4620      	mov	r0, r4
}
   1abca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1abce:	f7ff bed8 	b.w	1a982 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   1abd2:	2202      	movs	r2, #2
   1abd4:	4631      	mov	r1, r6
   1abd6:	4620      	mov	r0, r4
   1abd8:	f7ff fec8 	bl	1a96c <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
   1abdc:	4629      	mov	r1, r5
   1abde:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
   1abe0:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   1abe2:	4620      	mov	r0, r4
   1abe4:	f7ff fecd 	bl	1a982 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1abe8:	2203      	movs	r2, #3
   1abea:	4633      	mov	r3, r6
   1abec:	4629      	mov	r1, r5
   1abee:	4620      	mov	r0, r4
   1abf0:	f7ff fec7 	bl	1a982 <chunk_set>
   1abf4:	4639      	mov	r1, r7
   1abf6:	462b      	mov	r3, r5
   1abf8:	4620      	mov	r0, r4
   1abfa:	f7ff fec2 	bl	1a982 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1abfe:	2202      	movs	r2, #2
   1ac00:	4631      	mov	r1, r6
   1ac02:	e7e1      	b.n	1abc8 <free_list_add+0x46>
   1ac04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001ac08 <free_chunk>:
{
   1ac08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ac0a:	460c      	mov	r4, r1
   1ac0c:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   1ac0e:	f7ff fec3 	bl	1a998 <chunk_size>
   1ac12:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1ac14:	2201      	movs	r2, #1
   1ac16:	4631      	mov	r1, r6
   1ac18:	4628      	mov	r0, r5
   1ac1a:	f7ff fea7 	bl	1a96c <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   1ac1e:	07c3      	lsls	r3, r0, #31
   1ac20:	d40c      	bmi.n	1ac3c <free_chunk+0x34>
		free_list_remove(h, right_chunk(h, c));
   1ac22:	4631      	mov	r1, r6
   1ac24:	4628      	mov	r0, r5
   1ac26:	f7ff ff16 	bl	1aa56 <free_list_remove>
	return c + chunk_size(h, c);
   1ac2a:	4621      	mov	r1, r4
   1ac2c:	4628      	mov	r0, r5
   1ac2e:	f7ff feb3 	bl	1a998 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1ac32:	4621      	mov	r1, r4
   1ac34:	1822      	adds	r2, r4, r0
   1ac36:	4628      	mov	r0, r5
   1ac38:	f7ff ff85 	bl	1ab46 <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   1ac3c:	2200      	movs	r2, #0
   1ac3e:	4621      	mov	r1, r4
   1ac40:	4628      	mov	r0, r5
   1ac42:	f7ff fe93 	bl	1a96c <chunk_field>
   1ac46:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1ac48:	2201      	movs	r2, #1
   1ac4a:	4639      	mov	r1, r7
   1ac4c:	4628      	mov	r0, r5
   1ac4e:	f7ff fe8d 	bl	1a96c <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   1ac52:	ea10 0602 	ands.w	r6, r0, r2
   1ac56:	d113      	bne.n	1ac80 <free_chunk+0x78>
		free_list_remove(h, left_chunk(h, c));
   1ac58:	4639      	mov	r1, r7
   1ac5a:	4628      	mov	r0, r5
   1ac5c:	f7ff fefb 	bl	1aa56 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   1ac60:	4621      	mov	r1, r4
   1ac62:	4632      	mov	r2, r6
   1ac64:	4628      	mov	r0, r5
   1ac66:	f7ff fe81 	bl	1a96c <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   1ac6a:	4622      	mov	r2, r4
   1ac6c:	1a21      	subs	r1, r4, r0
   1ac6e:	4628      	mov	r0, r5
   1ac70:	f7ff ff69 	bl	1ab46 <merge_chunks>
   1ac74:	4621      	mov	r1, r4
   1ac76:	4632      	mov	r2, r6
   1ac78:	4628      	mov	r0, r5
   1ac7a:	f7ff fe77 	bl	1a96c <chunk_field>
   1ac7e:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   1ac80:	4621      	mov	r1, r4
   1ac82:	4628      	mov	r0, r5
}
   1ac84:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   1ac88:	f7ff bf7b 	b.w	1ab82 <free_list_add>

0001ac8c <sys_heap_free>:
{
   1ac8c:	b510      	push	{r4, lr}
	if (mem == NULL) {
   1ac8e:	b191      	cbz	r1, 1acb6 <sys_heap_free+0x2a>
   1ac90:	6800      	ldr	r0, [r0, #0]
	return big_heap(h) ? 8 : 4;
   1ac92:	6883      	ldr	r3, [r0, #8]
   1ac94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1ac98:	bf2c      	ite	cs
   1ac9a:	2408      	movcs	r4, #8
   1ac9c:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1ac9e:	1b0c      	subs	r4, r1, r4
   1aca0:	1a24      	subs	r4, r4, r0
   1aca2:	08e4      	lsrs	r4, r4, #3
	set_chunk_used(h, c, false);
   1aca4:	4621      	mov	r1, r4
   1aca6:	2200      	movs	r2, #0
   1aca8:	f7ff fe7c 	bl	1a9a4 <set_chunk_used>
	free_chunk(h, c);
   1acac:	4621      	mov	r1, r4
}
   1acae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	free_chunk(h, c);
   1acb2:	f7ff bfa9 	b.w	1ac08 <free_chunk>
}
   1acb6:	bd10      	pop	{r4, pc}

0001acb8 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   1acb8:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   1acba:	6806      	ldr	r6, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
   1acbc:	b909      	cbnz	r1, 1acc2 <sys_heap_alloc+0xa>
		return NULL;
   1acbe:	2000      	movs	r0, #0
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}
   1acc0:	bd70      	pop	{r4, r5, r6, pc}
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   1acc2:	68b3      	ldr	r3, [r6, #8]
	if (bytes == 0U || size_too_big(h, bytes)) {
   1acc4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   1acc8:	d9f9      	bls.n	1acbe <sys_heap_alloc+0x6>
	return big_heap(h) ? 8 : 4;
   1acca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1acce:	bf2c      	ite	cs
   1acd0:	2208      	movcs	r2, #8
   1acd2:	2204      	movcc	r2, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1acd4:	1dcc      	adds	r4, r1, #7
   1acd6:	4414      	add	r4, r2
   1acd8:	08e4      	lsrs	r4, r4, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1acda:	4621      	mov	r1, r4
   1acdc:	4630      	mov	r0, r6
   1acde:	f7ff fed1 	bl	1aa84 <alloc_chunk>
	if (c == 0U) {
   1ace2:	4605      	mov	r5, r0
   1ace4:	2800      	cmp	r0, #0
   1ace6:	d0ea      	beq.n	1acbe <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   1ace8:	4601      	mov	r1, r0
   1acea:	4630      	mov	r0, r6
   1acec:	f7ff fe54 	bl	1a998 <chunk_size>
   1acf0:	42a0      	cmp	r0, r4
   1acf2:	d909      	bls.n	1ad08 <sys_heap_alloc+0x50>
		split_chunks(h, c, c + chunk_sz);
   1acf4:	442c      	add	r4, r5
   1acf6:	4629      	mov	r1, r5
   1acf8:	4630      	mov	r0, r6
   1acfa:	4622      	mov	r2, r4
   1acfc:	f7ff fefc 	bl	1aaf8 <split_chunks>
		free_list_add(h, c + chunk_sz);
   1ad00:	4621      	mov	r1, r4
   1ad02:	4630      	mov	r0, r6
   1ad04:	f7ff ff3d 	bl	1ab82 <free_list_add>
	set_chunk_used(h, c, true);
   1ad08:	4629      	mov	r1, r5
   1ad0a:	4630      	mov	r0, r6
   1ad0c:	2201      	movs	r2, #1
   1ad0e:	f7ff fe49 	bl	1a9a4 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   1ad12:	68b3      	ldr	r3, [r6, #8]
   1ad14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1ad18:	bf2c      	ite	cs
   1ad1a:	2308      	movcs	r3, #8
   1ad1c:	2304      	movcc	r3, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1ad1e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   1ad22:	4428      	add	r0, r5
	return chunk_mem(h, c);
   1ad24:	e7cc      	b.n	1acc0 <sys_heap_alloc+0x8>

0001ad26 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   1ad26:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_heap *h = heap->heap;
   1ad2a:	6806      	ldr	r6, [r0, #0]
{
   1ad2c:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   1ad2e:	424a      	negs	r2, r1
   1ad30:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
   1ad34:	ea31 0202 	bics.w	r2, r1, r2
	return big_heap_chunks(h->end_chunk);
   1ad38:	68b5      	ldr	r5, [r6, #8]
{
   1ad3a:	460b      	mov	r3, r1
	if (align != rew) {
   1ad3c:	d00f      	beq.n	1ad5e <sys_heap_aligned_alloc+0x38>
	return big_heap(h) ? 8 : 4;
   1ad3e:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   1ad42:	bf34      	ite	cc
   1ad44:	2104      	movcc	r1, #4
   1ad46:	2108      	movcs	r1, #8
   1ad48:	42b9      	cmp	r1, r7
   1ad4a:	460a      	mov	r2, r1
   1ad4c:	46b9      	mov	r9, r7
   1ad4e:	bf28      	it	cs
   1ad50:	463a      	movcs	r2, r7
		align -= rew;
   1ad52:	1bdf      	subs	r7, r3, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   1ad54:	b994      	cbnz	r4, 1ad7c <sys_heap_aligned_alloc+0x56>
		return NULL;
   1ad56:	2500      	movs	r5, #0
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
   1ad58:	4628      	mov	r0, r5
   1ad5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1ad5e:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   1ad62:	bf34      	ite	cc
   1ad64:	2204      	movcc	r2, #4
   1ad66:	2208      	movcs	r2, #8
		if (align <= chunk_header_bytes(h)) {
   1ad68:	4291      	cmp	r1, r2
   1ad6a:	d804      	bhi.n	1ad76 <sys_heap_aligned_alloc+0x50>
			return sys_heap_alloc(heap, bytes);
   1ad6c:	4621      	mov	r1, r4
}
   1ad6e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   1ad72:	f7ff bfa1 	b.w	1acb8 <sys_heap_alloc>
		rew = 0;
   1ad76:	f04f 0900 	mov.w	r9, #0
   1ad7a:	e7eb      	b.n	1ad54 <sys_heap_aligned_alloc+0x2e>
	if (bytes == 0 || size_too_big(h, bytes)) {
   1ad7c:	ebb5 0fd4 	cmp.w	r5, r4, lsr #3
   1ad80:	d9e9      	bls.n	1ad56 <sys_heap_aligned_alloc+0x30>
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   1ad82:	1de1      	adds	r1, r4, #7
   1ad84:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   1ad88:	4439      	add	r1, r7
   1ad8a:	bf2c      	ite	cs
   1ad8c:	2308      	movcs	r3, #8
   1ad8e:	2304      	movcc	r3, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1ad90:	1a89      	subs	r1, r1, r2
   1ad92:	4419      	add	r1, r3
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   1ad94:	08c9      	lsrs	r1, r1, #3
   1ad96:	4630      	mov	r0, r6
   1ad98:	f7ff fe74 	bl	1aa84 <alloc_chunk>
	if (c0 == 0) {
   1ad9c:	4680      	mov	r8, r0
   1ad9e:	2800      	cmp	r0, #0
   1ada0:	d0d9      	beq.n	1ad56 <sys_heap_aligned_alloc+0x30>
	return big_heap(h) ? 8 : 4;
   1ada2:	68b3      	ldr	r3, [r6, #8]
   1ada4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1ada8:	bf2c      	ite	cs
   1adaa:	2308      	movcs	r3, #8
   1adac:	2304      	movcc	r3, #4
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   1adae:	eb09 05c0 	add.w	r5, r9, r0, lsl #3
   1adb2:	441d      	add	r5, r3
   1adb4:	1e7a      	subs	r2, r7, #1
   1adb6:	4435      	add	r5, r6
   1adb8:	427f      	negs	r7, r7
   1adba:	4415      	add	r5, r2
   1adbc:	403d      	ands	r5, r7
   1adbe:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1adc2:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1adc4:	1aeb      	subs	r3, r5, r3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1adc6:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1adc8:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1adca:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   1adce:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   1add0:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1add4:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   1add8:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   1addc:	d208      	bcs.n	1adf0 <sys_heap_aligned_alloc+0xca>
		split_chunks(h, c0, c);
   1adde:	4601      	mov	r1, r0
   1ade0:	463a      	mov	r2, r7
   1ade2:	4630      	mov	r0, r6
   1ade4:	f7ff fe88 	bl	1aaf8 <split_chunks>
		free_list_add(h, c0);
   1ade8:	4641      	mov	r1, r8
   1adea:	4630      	mov	r0, r6
   1adec:	f7ff fec9 	bl	1ab82 <free_list_add>
	return c + chunk_size(h, c);
   1adf0:	4639      	mov	r1, r7
   1adf2:	4630      	mov	r0, r6
   1adf4:	f7ff fdd0 	bl	1a998 <chunk_size>
   1adf8:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   1adfa:	4284      	cmp	r4, r0
   1adfc:	d208      	bcs.n	1ae10 <sys_heap_aligned_alloc+0xea>
		split_chunks(h, c, c_end);
   1adfe:	4639      	mov	r1, r7
   1ae00:	4630      	mov	r0, r6
   1ae02:	4622      	mov	r2, r4
   1ae04:	f7ff fe78 	bl	1aaf8 <split_chunks>
		free_list_add(h, c_end);
   1ae08:	4621      	mov	r1, r4
   1ae0a:	4630      	mov	r0, r6
   1ae0c:	f7ff feb9 	bl	1ab82 <free_list_add>
	set_chunk_used(h, c, true);
   1ae10:	2201      	movs	r2, #1
   1ae12:	4639      	mov	r1, r7
   1ae14:	4630      	mov	r0, r6
   1ae16:	f7ff fdc5 	bl	1a9a4 <set_chunk_used>
	return mem;
   1ae1a:	e79d      	b.n	1ad58 <sys_heap_aligned_alloc+0x32>

0001ae1c <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
   1ae1c:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   1ae20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ae22:	bf2c      	ite	cs
   1ae24:	2408      	movcs	r4, #8
   1ae26:	2404      	movcc	r4, #4
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   1ae28:	1b14      	subs	r4, r2, r4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1ae2a:	1dce      	adds	r6, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1ae2c:	440c      	add	r4, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1ae2e:	f026 0607 	bic.w	r6, r6, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1ae32:	f024 0407 	bic.w	r4, r4, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1ae36:	1ba4      	subs	r4, r4, r6
   1ae38:	08e4      	lsrs	r4, r4, #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   1ae3a:	2300      	movs	r3, #0
	heap->heap = h;
   1ae3c:	6006      	str	r6, [r0, #0]

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1ae3e:	4621      	mov	r1, r4
	h->end_chunk = heap_sz;
   1ae40:	60b4      	str	r4, [r6, #8]
	h->avail_buckets = 0;
   1ae42:	60f3      	str	r3, [r6, #12]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1ae44:	4620      	mov	r0, r4
   1ae46:	f7ff fdc9 	bl	1a9dc <bucket_idx.isra.0>
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1ae4a:	0085      	lsls	r5, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1ae4c:	351b      	adds	r5, #27
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1ae4e:	1c41      	adds	r1, r0, #1
   1ae50:	08ed      	lsrs	r5, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   1ae52:	f106 0210 	add.w	r2, r6, #16
		h->buckets[i].next = 0;
   1ae56:	4618      	mov	r0, r3
	for (int i = 0; i < nb_buckets; i++) {
   1ae58:	428b      	cmp	r3, r1
   1ae5a:	db2e      	blt.n	1aeba <sys_heap_init+0x9e>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   1ae5c:	462a      	mov	r2, r5
   1ae5e:	4630      	mov	r0, r6
   1ae60:	2100      	movs	r1, #0
   1ae62:	f7ff fdb7 	bl	1a9d4 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1ae66:	2300      	movs	r3, #0
   1ae68:	461a      	mov	r2, r3
   1ae6a:	4619      	mov	r1, r3
   1ae6c:	4630      	mov	r0, r6
   1ae6e:	f7ff fd88 	bl	1a982 <chunk_set>
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1ae72:	1b67      	subs	r7, r4, r5
	set_chunk_used(h, 0, true);
   1ae74:	4619      	mov	r1, r3
   1ae76:	4630      	mov	r0, r6
   1ae78:	2201      	movs	r2, #1
   1ae7a:	f7ff fd93 	bl	1a9a4 <set_chunk_used>
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1ae7e:	463a      	mov	r2, r7
   1ae80:	4629      	mov	r1, r5
   1ae82:	f7ff fda7 	bl	1a9d4 <set_chunk_size>
   1ae86:	462b      	mov	r3, r5
   1ae88:	2200      	movs	r2, #0
   1ae8a:	4629      	mov	r1, r5
   1ae8c:	4630      	mov	r0, r6
   1ae8e:	f7ff fd78 	bl	1a982 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
   1ae92:	4621      	mov	r1, r4
   1ae94:	4630      	mov	r0, r6
   1ae96:	f7ff fd9d 	bl	1a9d4 <set_chunk_size>
   1ae9a:	463b      	mov	r3, r7
   1ae9c:	4621      	mov	r1, r4
   1ae9e:	4630      	mov	r0, r6
   1aea0:	2200      	movs	r2, #0
   1aea2:	f7ff fd6e 	bl	1a982 <chunk_set>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
   1aea6:	4621      	mov	r1, r4
   1aea8:	4630      	mov	r0, r6
   1aeaa:	2201      	movs	r2, #1
   1aeac:	f7ff fd7a 	bl	1a9a4 <set_chunk_used>

	free_list_add(h, chunk0_size);
   1aeb0:	4629      	mov	r1, r5
}
   1aeb2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   1aeb6:	f7ff be64 	b.w	1ab82 <free_list_add>
		h->buckets[i].next = 0;
   1aeba:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   1aebe:	3301      	adds	r3, #1
   1aec0:	e7ca      	b.n	1ae58 <sys_heap_init+0x3c>

0001aec2 <encode_uint>:
{
   1aec2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aec6:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   1aec8:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   1aeca:	2b6f      	cmp	r3, #111	; 0x6f
{
   1aecc:	4680      	mov	r8, r0
   1aece:	460f      	mov	r7, r1
   1aed0:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1aed2:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   1aed6:	d029      	beq.n	1af2c <encode_uint+0x6a>
   1aed8:	d824      	bhi.n	1af24 <encode_uint+0x62>
		return 16;
   1aeda:	2b58      	cmp	r3, #88	; 0x58
   1aedc:	bf14      	ite	ne
   1aede:	260a      	movne	r6, #10
   1aee0:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
   1aee2:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   1aee6:	4632      	mov	r2, r6
   1aee8:	2300      	movs	r3, #0
   1aeea:	4640      	mov	r0, r8
   1aeec:	4639      	mov	r1, r7
   1aeee:	f7e5 f8f7 	bl	e0 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1aef2:	2a09      	cmp	r2, #9
   1aef4:	b2d4      	uxtb	r4, r2
   1aef6:	d81e      	bhi.n	1af36 <encode_uint+0x74>
   1aef8:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   1aefa:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1aefc:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   1aefe:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1af02:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   1af06:	d301      	bcc.n	1af0c <encode_uint+0x4a>
   1af08:	45d1      	cmp	r9, sl
   1af0a:	d811      	bhi.n	1af30 <encode_uint+0x6e>
	if (conv->flag_hash) {
   1af0c:	782b      	ldrb	r3, [r5, #0]
   1af0e:	069b      	lsls	r3, r3, #26
   1af10:	d505      	bpl.n	1af1e <encode_uint+0x5c>
		if (radix == 8) {
   1af12:	2e08      	cmp	r6, #8
   1af14:	d115      	bne.n	1af42 <encode_uint+0x80>
			conv->altform_0 = true;
   1af16:	78ab      	ldrb	r3, [r5, #2]
   1af18:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   1af1c:	70ab      	strb	r3, [r5, #2]
}
   1af1e:	4648      	mov	r0, r9
   1af20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   1af24:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   1af28:	2b70      	cmp	r3, #112	; 0x70
   1af2a:	e7d7      	b.n	1aedc <encode_uint+0x1a>
	switch (specifier) {
   1af2c:	2608      	movs	r6, #8
   1af2e:	e7d8      	b.n	1aee2 <encode_uint+0x20>
		value /= radix;
   1af30:	4680      	mov	r8, r0
   1af32:	460f      	mov	r7, r1
   1af34:	e7d7      	b.n	1aee6 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1af36:	f1bb 0f19 	cmp.w	fp, #25
   1af3a:	bf94      	ite	ls
   1af3c:	3437      	addls	r4, #55	; 0x37
   1af3e:	3457      	addhi	r4, #87	; 0x57
   1af40:	e7db      	b.n	1aefa <encode_uint+0x38>
		} else if (radix == 16) {
   1af42:	2e10      	cmp	r6, #16
   1af44:	d1eb      	bne.n	1af1e <encode_uint+0x5c>
			conv->altform_0c = true;
   1af46:	78ab      	ldrb	r3, [r5, #2]
   1af48:	f043 0310 	orr.w	r3, r3, #16
   1af4c:	e7e6      	b.n	1af1c <encode_uint+0x5a>

0001af4e <outs>:
{
   1af4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1af52:	4607      	mov	r7, r0
   1af54:	4688      	mov	r8, r1
   1af56:	4615      	mov	r5, r2
   1af58:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1af5a:	4614      	mov	r4, r2
   1af5c:	42b4      	cmp	r4, r6
   1af5e:	eba4 0005 	sub.w	r0, r4, r5
   1af62:	d302      	bcc.n	1af6a <outs+0x1c>
   1af64:	b93e      	cbnz	r6, 1af76 <outs+0x28>
   1af66:	7823      	ldrb	r3, [r4, #0]
   1af68:	b12b      	cbz	r3, 1af76 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   1af6a:	f814 0b01 	ldrb.w	r0, [r4], #1
   1af6e:	4641      	mov	r1, r8
   1af70:	47b8      	blx	r7
		if (rc < 0) {
   1af72:	2800      	cmp	r0, #0
   1af74:	daf2      	bge.n	1af5c <outs+0xe>
}
   1af76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001af7a <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1af7a:	4770      	bx	lr

0001af7c <z_impl_flash_write>:
{
   1af7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const struct flash_driver_api *api =
   1af80:	6886      	ldr	r6, [r0, #8]
{
   1af82:	4699      	mov	r9, r3
	if (api->write_protection != NULL) {
   1af84:	68f3      	ldr	r3, [r6, #12]
{
   1af86:	4605      	mov	r5, r0
   1af88:	460f      	mov	r7, r1
   1af8a:	4690      	mov	r8, r2
	if (api->write_protection != NULL) {
   1af8c:	b95b      	cbnz	r3, 1afa6 <z_impl_flash_write+0x2a>
	rc = api->write(dev, offset, data, len);
   1af8e:	6874      	ldr	r4, [r6, #4]
   1af90:	464b      	mov	r3, r9
   1af92:	4642      	mov	r2, r8
   1af94:	4639      	mov	r1, r7
   1af96:	4628      	mov	r0, r5
   1af98:	47a0      	blx	r4
	if (api->write_protection != NULL) {
   1af9a:	68f3      	ldr	r3, [r6, #12]
	rc = api->write(dev, offset, data, len);
   1af9c:	4604      	mov	r4, r0
	if (api->write_protection != NULL) {
   1af9e:	b943      	cbnz	r3, 1afb2 <z_impl_flash_write+0x36>
}
   1afa0:	4620      	mov	r0, r4
   1afa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		rc = api->write_protection(dev, false);
   1afa6:	2100      	movs	r1, #0
   1afa8:	4798      	blx	r3
		if (rc) {
   1afaa:	4604      	mov	r4, r0
   1afac:	2800      	cmp	r0, #0
   1afae:	d0ee      	beq.n	1af8e <z_impl_flash_write+0x12>
   1afb0:	e7f6      	b.n	1afa0 <z_impl_flash_write+0x24>
		(void) api->write_protection(dev, true);
   1afb2:	2101      	movs	r1, #1
   1afb4:	4628      	mov	r0, r5
   1afb6:	4798      	blx	r3
   1afb8:	e7f2      	b.n	1afa0 <z_impl_flash_write+0x24>

0001afba <nvs_flash_rd>:
{
   1afba:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   1afbc:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   1afbe:	8984      	ldrh	r4, [r0, #12]
	rc = flash_read(fs->flash_device, offset, data, len);
   1afc0:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   1afc2:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   1afc4:	fa16 f181 	uxtah	r1, r6, r1
   1afc8:	fb05 1104 	mla	r1, r5, r4, r1
	return api->read(dev, offset, data, len);
   1afcc:	6884      	ldr	r4, [r0, #8]
   1afce:	6824      	ldr	r4, [r4, #0]
   1afd0:	46a4      	mov	ip, r4
}
   1afd2:	bc70      	pop	{r4, r5, r6}
   1afd4:	4760      	bx	ip

0001afd6 <nvs_flash_block_cmp>:
{
   1afd6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1afda:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   1afdc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   1afde:	681d      	ldr	r5, [r3, #0]
   1afe0:	426d      	negs	r5, r5
{
   1afe2:	b089      	sub	sp, #36	; 0x24
   1afe4:	4681      	mov	r9, r0
   1afe6:	460e      	mov	r6, r1
   1afe8:	4617      	mov	r7, r2
	block_size =
   1afea:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   1afee:	b91c      	cbnz	r4, 1aff8 <nvs_flash_block_cmp+0x22>
	return 0;
   1aff0:	4620      	mov	r0, r4
}
   1aff2:	b009      	add	sp, #36	; 0x24
   1aff4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   1aff8:	42ac      	cmp	r4, r5
   1affa:	46a0      	mov	r8, r4
   1affc:	bf28      	it	cs
   1affe:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   1b000:	4643      	mov	r3, r8
   1b002:	466a      	mov	r2, sp
   1b004:	4631      	mov	r1, r6
   1b006:	4648      	mov	r0, r9
   1b008:	f7ff ffd7 	bl	1afba <nvs_flash_rd>
		if (rc) {
   1b00c:	2800      	cmp	r0, #0
   1b00e:	d1f0      	bne.n	1aff2 <nvs_flash_block_cmp+0x1c>
		rc = memcmp(data8, buf, bytes_to_cmp);
   1b010:	4642      	mov	r2, r8
   1b012:	4669      	mov	r1, sp
   1b014:	4638      	mov	r0, r7
   1b016:	f001 fe35 	bl	1cc84 <memcmp>
		if (rc) {
   1b01a:	b920      	cbnz	r0, 1b026 <nvs_flash_block_cmp+0x50>
		len -= bytes_to_cmp;
   1b01c:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   1b020:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
   1b022:	4447      	add	r7, r8
   1b024:	e7e3      	b.n	1afee <nvs_flash_block_cmp+0x18>
			return 1;
   1b026:	2001      	movs	r0, #1
   1b028:	e7e3      	b.n	1aff2 <nvs_flash_block_cmp+0x1c>

0001b02a <nvs_flash_cmp_const>:
{
   1b02a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b02e:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   1b030:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   1b032:	681d      	ldr	r5, [r3, #0]
   1b034:	426d      	negs	r5, r5
{
   1b036:	b088      	sub	sp, #32
	block_size =
   1b038:	f005 0520 	and.w	r5, r5, #32
{
   1b03c:	4607      	mov	r7, r0
   1b03e:	460e      	mov	r6, r1
	(void)memset(cmp, value, block_size);
   1b040:	4668      	mov	r0, sp
{
   1b042:	4611      	mov	r1, r2
	(void)memset(cmp, value, block_size);
   1b044:	462a      	mov	r2, r5
   1b046:	f001 fe39 	bl	1ccbc <memset>
	while (len) {
   1b04a:	b91c      	cbnz	r4, 1b054 <nvs_flash_cmp_const+0x2a>
	return 0;
   1b04c:	4620      	mov	r0, r4
}
   1b04e:	b008      	add	sp, #32
   1b050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   1b054:	42ac      	cmp	r4, r5
   1b056:	46a0      	mov	r8, r4
   1b058:	bf28      	it	cs
   1b05a:	46a8      	movcs	r8, r5
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   1b05c:	4643      	mov	r3, r8
   1b05e:	466a      	mov	r2, sp
   1b060:	4631      	mov	r1, r6
   1b062:	4638      	mov	r0, r7
   1b064:	f7ff ffb7 	bl	1afd6 <nvs_flash_block_cmp>
		if (rc) {
   1b068:	2800      	cmp	r0, #0
   1b06a:	d1f0      	bne.n	1b04e <nvs_flash_cmp_const+0x24>
		len -= bytes_to_cmp;
   1b06c:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   1b070:	4446      	add	r6, r8
   1b072:	e7ea      	b.n	1b04a <nvs_flash_cmp_const+0x20>

0001b074 <nvs_flash_erase_sector>:
{
   1b074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   1b078:	6803      	ldr	r3, [r0, #0]
   1b07a:	f8b0 900c 	ldrh.w	r9, [r0, #12]
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   1b07e:	6a86      	ldr	r6, [r0, #40]	; 0x28
	addr &= ADDR_SECT_MASK;
   1b080:	0c0f      	lsrs	r7, r1, #16
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   1b082:	0c09      	lsrs	r1, r1, #16
{
   1b084:	4605      	mov	r5, r0
	addr &= ADDR_SECT_MASK;
   1b086:	043f      	lsls	r7, r7, #16
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   1b088:	fb09 3a01 	mla	sl, r9, r1, r3
	const struct flash_driver_api *api =
   1b08c:	f8d6 8008 	ldr.w	r8, [r6, #8]
	if (api->write_protection != NULL) {
   1b090:	f8d8 300c 	ldr.w	r3, [r8, #12]
   1b094:	b9b3      	cbnz	r3, 1b0c4 <nvs_flash_erase_sector+0x50>
	rc = api->erase(dev, offset, size);
   1b096:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1b09a:	464a      	mov	r2, r9
   1b09c:	4651      	mov	r1, sl
   1b09e:	4630      	mov	r0, r6
   1b0a0:	4798      	blx	r3
	if (api->write_protection != NULL) {
   1b0a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
	rc = api->erase(dev, offset, size);
   1b0a6:	4604      	mov	r4, r0
	if (api->write_protection != NULL) {
   1b0a8:	b9ab      	cbnz	r3, 1b0d6 <nvs_flash_erase_sector+0x62>
	if (rc) {
   1b0aa:	b98c      	cbnz	r4, 1b0d0 <nvs_flash_erase_sector+0x5c>
	if (nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   1b0ac:	6aea      	ldr	r2, [r5, #44]	; 0x2c
   1b0ae:	89ab      	ldrh	r3, [r5, #12]
   1b0b0:	7912      	ldrb	r2, [r2, #4]
   1b0b2:	4639      	mov	r1, r7
   1b0b4:	4628      	mov	r0, r5
   1b0b6:	f7ff ffb8 	bl	1b02a <nvs_flash_cmp_const>
		rc = -ENXIO;
   1b0ba:	1e04      	subs	r4, r0, #0
   1b0bc:	bf18      	it	ne
   1b0be:	f06f 0405 	mvnne.w	r4, #5
   1b0c2:	e005      	b.n	1b0d0 <nvs_flash_erase_sector+0x5c>
		rc = api->write_protection(dev, false);
   1b0c4:	2100      	movs	r1, #0
   1b0c6:	4630      	mov	r0, r6
   1b0c8:	4798      	blx	r3
		if (rc) {
   1b0ca:	4604      	mov	r4, r0
   1b0cc:	2800      	cmp	r0, #0
   1b0ce:	d0e2      	beq.n	1b096 <nvs_flash_erase_sector+0x22>
}
   1b0d0:	4620      	mov	r0, r4
   1b0d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		(void) api->write_protection(dev, true);
   1b0d6:	2101      	movs	r1, #1
   1b0d8:	4630      	mov	r0, r6
   1b0da:	4798      	blx	r3
   1b0dc:	e7e5      	b.n	1b0aa <nvs_flash_erase_sector+0x36>

0001b0de <nvs_ate_crc8_update>:
{
   1b0de:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   1b0e0:	4601      	mov	r1, r0
{
   1b0e2:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   1b0e4:	2207      	movs	r2, #7
   1b0e6:	20ff      	movs	r0, #255	; 0xff
   1b0e8:	f7f4 ff60 	bl	ffac <crc8_ccitt>
	entry->crc8 = crc8;
   1b0ec:	71e0      	strb	r0, [r4, #7]
}
   1b0ee:	bd10      	pop	{r4, pc}

0001b0f0 <nvs_sector_advance.isra.0>:
	*addr += (1 << ADDR_SECT_SHIFT);
   1b0f0:	680b      	ldr	r3, [r1, #0]
   1b0f2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   1b0f6:	0c1a      	lsrs	r2, r3, #16
   1b0f8:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   1b0fc:	bf08      	it	eq
   1b0fe:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   1b102:	600b      	str	r3, [r1, #0]
}
   1b104:	4770      	bx	lr

0001b106 <nvs_al_size.isra.0>:
	if (write_block_size <= 1U) {
   1b106:	7803      	ldrb	r3, [r0, #0]
   1b108:	2b01      	cmp	r3, #1
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   1b10a:	bf81      	itttt	hi
   1b10c:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
   1b110:	18c9      	addhi	r1, r1, r3
   1b112:	425b      	neghi	r3, r3
   1b114:	4019      	andhi	r1, r3
}
   1b116:	4608      	mov	r0, r1
   1b118:	4770      	bx	lr

0001b11a <nvs_ate_valid>:
{
   1b11a:	b570      	push	{r4, r5, r6, lr}
   1b11c:	460c      	mov	r4, r1
   1b11e:	4605      	mov	r5, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1b120:	2108      	movs	r1, #8
   1b122:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   1b124:	f7ff ffef 	bl	1b106 <nvs_al_size.isra.0>
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   1b128:	2207      	movs	r2, #7
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1b12a:	4606      	mov	r6, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   1b12c:	4621      	mov	r1, r4
   1b12e:	20ff      	movs	r0, #255	; 0xff
   1b130:	f7f4 ff3c 	bl	ffac <crc8_ccitt>
	if (crc8 == entry->crc8) {
   1b134:	79e3      	ldrb	r3, [r4, #7]
   1b136:	4283      	cmp	r3, r0
   1b138:	d107      	bne.n	1b14a <nvs_ate_valid+0x30>
	    (entry->offset >= (fs->sector_size - ate_size))) {
   1b13a:	89a8      	ldrh	r0, [r5, #12]
   1b13c:	8863      	ldrh	r3, [r4, #2]
   1b13e:	1b80      	subs	r0, r0, r6
	if ((nvs_ate_crc8_check(entry)) ||
   1b140:	4283      	cmp	r3, r0
   1b142:	bf2c      	ite	cs
   1b144:	2000      	movcs	r0, #0
   1b146:	2001      	movcc	r0, #1
}
   1b148:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   1b14a:	2000      	movs	r0, #0
   1b14c:	e7fc      	b.n	1b148 <nvs_ate_valid+0x2e>

0001b14e <nvs_close_ate_valid>:
{
   1b14e:	b538      	push	{r3, r4, r5, lr}
   1b150:	4605      	mov	r5, r0
   1b152:	460c      	mov	r4, r1
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   1b154:	f7ff ffe1 	bl	1b11a <nvs_ate_valid>
   1b158:	b1a0      	cbz	r0, 1b184 <nvs_close_ate_valid+0x36>
   1b15a:	88a0      	ldrh	r0, [r4, #4]
   1b15c:	b998      	cbnz	r0, 1b186 <nvs_close_ate_valid+0x38>
   1b15e:	8822      	ldrh	r2, [r4, #0]
   1b160:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1b164:	429a      	cmp	r2, r3
   1b166:	d10d      	bne.n	1b184 <nvs_close_ate_valid+0x36>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1b168:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   1b16a:	2108      	movs	r1, #8
   1b16c:	f7ff ffcb 	bl	1b106 <nvs_al_size.isra.0>
	if ((fs->sector_size - entry->offset) % ate_size) {
   1b170:	8862      	ldrh	r2, [r4, #2]
   1b172:	89ab      	ldrh	r3, [r5, #12]
   1b174:	1a9b      	subs	r3, r3, r2
   1b176:	fbb3 f2f0 	udiv	r2, r3, r0
   1b17a:	fb02 3010 	mls	r0, r2, r0, r3
   1b17e:	fab0 f080 	clz	r0, r0
   1b182:	0940      	lsrs	r0, r0, #5
}
   1b184:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   1b186:	2000      	movs	r0, #0
   1b188:	e7fc      	b.n	1b184 <nvs_close_ate_valid+0x36>

0001b18a <nvs_flash_al_wrt.part.0>:
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   1b18a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   1b18e:	8985      	ldrh	r5, [r0, #12]
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   1b190:	4606      	mov	r6, r0
	offset += addr & ADDR_OFFS_MASK;
   1b192:	6800      	ldr	r0, [r0, #0]
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   1b194:	461c      	mov	r4, r3
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   1b196:	0c0b      	lsrs	r3, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   1b198:	fa10 f181 	uxtah	r1, r0, r1
   1b19c:	fb03 1505 	mla	r5, r3, r5, r1
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   1b1a0:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   1b1a2:	681f      	ldr	r7, [r3, #0]
   1b1a4:	427f      	negs	r7, r7
	if (blen > 0) {
   1b1a6:	4027      	ands	r7, r4
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   1b1a8:	b088      	sub	sp, #32
   1b1aa:	4690      	mov	r8, r2
	if (blen > 0) {
   1b1ac:	d008      	beq.n	1b1c0 <nvs_flash_al_wrt.part.0+0x36>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   1b1ae:	6ab0      	ldr	r0, [r6, #40]	; 0x28
	return z_impl_flash_write(dev, offset, data, len);
   1b1b0:	463b      	mov	r3, r7
   1b1b2:	4629      	mov	r1, r5
   1b1b4:	f7ff fee2 	bl	1af7c <z_impl_flash_write>
		if (rc) {
   1b1b8:	b9b8      	cbnz	r0, 1b1ea <nvs_flash_al_wrt.part.0+0x60>
		len -= blen;
   1b1ba:	1be4      	subs	r4, r4, r7
		offset += blen;
   1b1bc:	443d      	add	r5, r7
		data8 += blen;
   1b1be:	44b8      	add	r8, r7
	if (len) {
   1b1c0:	b1b4      	cbz	r4, 1b1f0 <nvs_flash_al_wrt.part.0+0x66>
		memcpy(buf, data8, len);
   1b1c2:	4622      	mov	r2, r4
   1b1c4:	4641      	mov	r1, r8
   1b1c6:	4668      	mov	r0, sp
   1b1c8:	f001 fd6d 	bl	1cca6 <memcpy>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   1b1cc:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   1b1ce:	681a      	ldr	r2, [r3, #0]
   1b1d0:	7919      	ldrb	r1, [r3, #4]
   1b1d2:	1b12      	subs	r2, r2, r4
   1b1d4:	eb0d 0004 	add.w	r0, sp, r4
   1b1d8:	f001 fd70 	bl	1ccbc <memset>
		rc = flash_write(fs->flash_device, offset, buf,
   1b1dc:	e9d6 030a 	ldrd	r0, r3, [r6, #40]	; 0x28
   1b1e0:	681b      	ldr	r3, [r3, #0]
   1b1e2:	466a      	mov	r2, sp
   1b1e4:	4629      	mov	r1, r5
   1b1e6:	f7ff fec9 	bl	1af7c <z_impl_flash_write>
}
   1b1ea:	b008      	add	sp, #32
   1b1ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
end:
   1b1f0:	4620      	mov	r0, r4
   1b1f2:	e7fa      	b.n	1b1ea <nvs_flash_al_wrt.part.0+0x60>

0001b1f4 <nvs_flash_data_wrt>:
{
   1b1f4:	b538      	push	{r3, r4, r5, lr}
   1b1f6:	4604      	mov	r4, r0
	if (!len) {
   1b1f8:	4615      	mov	r5, r2
   1b1fa:	b12a      	cbz	r2, 1b208 <nvs_flash_data_wrt+0x14>
   1b1fc:	4613      	mov	r3, r2
   1b1fe:	460a      	mov	r2, r1
   1b200:	6881      	ldr	r1, [r0, #8]
   1b202:	f7ff ffc2 	bl	1b18a <nvs_flash_al_wrt.part.0>
   1b206:	4602      	mov	r2, r0
	fs->data_wra += nvs_al_size(fs, len);
   1b208:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1b20a:	4629      	mov	r1, r5
   1b20c:	f7ff ff7b 	bl	1b106 <nvs_al_size.isra.0>
   1b210:	68a3      	ldr	r3, [r4, #8]
   1b212:	4403      	add	r3, r0
   1b214:	60a3      	str	r3, [r4, #8]
}
   1b216:	4610      	mov	r0, r2
   1b218:	bd38      	pop	{r3, r4, r5, pc}

0001b21a <nvs_flash_ate_wrt>:
{
   1b21a:	b510      	push	{r4, lr}
   1b21c:	460a      	mov	r2, r1
	if (!len) {
   1b21e:	2308      	movs	r3, #8
   1b220:	6841      	ldr	r1, [r0, #4]
{
   1b222:	4604      	mov	r4, r0
   1b224:	f7ff ffb1 	bl	1b18a <nvs_flash_al_wrt.part.0>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   1b228:	2108      	movs	r1, #8
   1b22a:	4602      	mov	r2, r0
   1b22c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1b22e:	f7ff ff6a 	bl	1b106 <nvs_al_size.isra.0>
   1b232:	6863      	ldr	r3, [r4, #4]
   1b234:	1a1b      	subs	r3, r3, r0
   1b236:	6063      	str	r3, [r4, #4]
}
   1b238:	4610      	mov	r0, r2
   1b23a:	bd10      	pop	{r4, pc}

0001b23c <nvs_add_gc_done_ate>:
{
   1b23c:	b513      	push	{r0, r1, r4, lr}
	gc_done_ate.id = 0xffff;
   1b23e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1b242:	f8ad 3000 	strh.w	r3, [sp]
	gc_done_ate.len = 0U;
   1b246:	2300      	movs	r3, #0
{
   1b248:	4604      	mov	r4, r0
	gc_done_ate.len = 0U;
   1b24a:	f8ad 3004 	strh.w	r3, [sp, #4]
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   1b24e:	6883      	ldr	r3, [r0, #8]
   1b250:	f8ad 3002 	strh.w	r3, [sp, #2]
	nvs_ate_crc8_update(&gc_done_ate);
   1b254:	4668      	mov	r0, sp
   1b256:	f7ff ff42 	bl	1b0de <nvs_ate_crc8_update>
	return nvs_flash_ate_wrt(fs, &gc_done_ate);
   1b25a:	4669      	mov	r1, sp
   1b25c:	4620      	mov	r0, r4
   1b25e:	f7ff ffdc 	bl	1b21a <nvs_flash_ate_wrt>
}
   1b262:	b002      	add	sp, #8
   1b264:	bd10      	pop	{r4, pc}

0001b266 <nvs_prev_ate>:
{
   1b266:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1b268:	4605      	mov	r5, r0
   1b26a:	460e      	mov	r6, r1
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1b26c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   1b26e:	2108      	movs	r1, #8
   1b270:	f7ff ff49 	bl	1b106 <nvs_al_size.isra.0>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   1b274:	6831      	ldr	r1, [r6, #0]
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1b276:	4607      	mov	r7, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   1b278:	2308      	movs	r3, #8
   1b27a:	4628      	mov	r0, r5
   1b27c:	f7ff fe9d 	bl	1afba <nvs_flash_rd>
	if (rc) {
   1b280:	4604      	mov	r4, r0
   1b282:	2800      	cmp	r0, #0
   1b284:	d138      	bne.n	1b2f8 <nvs_prev_ate+0x92>
	*addr += ate_size;
   1b286:	6833      	ldr	r3, [r6, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   1b288:	89a8      	ldrh	r0, [r5, #12]
	*addr += ate_size;
   1b28a:	443b      	add	r3, r7
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   1b28c:	b29a      	uxth	r2, r3
   1b28e:	1bc7      	subs	r7, r0, r7
   1b290:	42ba      	cmp	r2, r7
	*addr += ate_size;
   1b292:	6033      	str	r3, [r6, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   1b294:	d130      	bne.n	1b2f8 <nvs_prev_ate+0x92>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   1b296:	0c1a      	lsrs	r2, r3, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   1b298:	bf03      	ittte	eq
   1b29a:	89e9      	ldrheq	r1, [r5, #14]
   1b29c:	f101 31ff 	addeq.w	r1, r1, #4294967295	; 0xffffffff
   1b2a0:	eb03 4101 	addeq.w	r1, r3, r1, lsl #16
		*addr -= (1 << ADDR_SECT_SHIFT);
   1b2a4:	f5a3 3180 	subne.w	r1, r3, #65536	; 0x10000
   1b2a8:	6031      	str	r1, [r6, #0]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   1b2aa:	2308      	movs	r3, #8
   1b2ac:	466a      	mov	r2, sp
   1b2ae:	4628      	mov	r0, r5
   1b2b0:	f7ff fe83 	bl	1afba <nvs_flash_rd>
	if (rc) {
   1b2b4:	4604      	mov	r4, r0
   1b2b6:	b9f8      	cbnz	r0, 1b2f8 <nvs_prev_ate+0x92>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   1b2b8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1b2ba:	466a      	mov	r2, sp
   1b2bc:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   1b2be:	4603      	mov	r3, r0
		if (data8[i] != value) {
   1b2c0:	f812 0b01 	ldrb.w	r0, [r2], #1
   1b2c4:	4281      	cmp	r1, r0
   1b2c6:	d10c      	bne.n	1b2e2 <nvs_prev_ate+0x7c>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   1b2c8:	3301      	adds	r3, #1
   1b2ca:	2b08      	cmp	r3, #8
   1b2cc:	d1f8      	bne.n	1b2c0 <nvs_prev_ate+0x5a>
		*addr = fs->ate_wra;
   1b2ce:	686b      	ldr	r3, [r5, #4]
   1b2d0:	e005      	b.n	1b2de <nvs_prev_ate+0x78>
		(*addr) &= ADDR_SECT_MASK;
   1b2d2:	6833      	ldr	r3, [r6, #0]
		(*addr) += close_ate.offset;
   1b2d4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
		(*addr) &= ADDR_SECT_MASK;
   1b2d8:	0c1b      	lsrs	r3, r3, #16
   1b2da:	041b      	lsls	r3, r3, #16
		(*addr) += close_ate.offset;
   1b2dc:	4413      	add	r3, r2
		*addr = fs->ate_wra;
   1b2de:	6033      	str	r3, [r6, #0]
		return 0;
   1b2e0:	e00a      	b.n	1b2f8 <nvs_prev_ate+0x92>
	if (nvs_close_ate_valid(fs, &close_ate)) {
   1b2e2:	4669      	mov	r1, sp
   1b2e4:	4628      	mov	r0, r5
   1b2e6:	f7ff ff32 	bl	1b14e <nvs_close_ate_valid>
   1b2ea:	2800      	cmp	r0, #0
   1b2ec:	d1f1      	bne.n	1b2d2 <nvs_prev_ate+0x6c>
	return nvs_recover_last_ate(fs, addr);
   1b2ee:	4631      	mov	r1, r6
   1b2f0:	4628      	mov	r0, r5
   1b2f2:	f7f5 fb45 	bl	10980 <nvs_recover_last_ate>
   1b2f6:	4604      	mov	r4, r0
}
   1b2f8:	4620      	mov	r0, r4
   1b2fa:	b003      	add	sp, #12
   1b2fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001b2fe <nvs_gc>:
{
   1b2fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b302:	4604      	mov	r4, r0
   1b304:	b093      	sub	sp, #76	; 0x4c
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1b306:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   1b308:	2108      	movs	r1, #8
   1b30a:	f7ff fefc 	bl	1b106 <nvs_al_size.isra.0>
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   1b30e:	6863      	ldr	r3, [r4, #4]
   1b310:	0c1b      	lsrs	r3, r3, #16
   1b312:	041b      	lsls	r3, r3, #16
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1b314:	4605      	mov	r5, r0
	nvs_sector_advance(fs, &sec_addr);
   1b316:	a901      	add	r1, sp, #4
   1b318:	89e0      	ldrh	r0, [r4, #14]
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   1b31a:	9301      	str	r3, [sp, #4]
	nvs_sector_advance(fs, &sec_addr);
   1b31c:	f7ff fee8 	bl	1b0f0 <nvs_sector_advance.isra.0>
	gc_addr = sec_addr + fs->sector_size - ate_size;
   1b320:	9b01      	ldr	r3, [sp, #4]
   1b322:	89a1      	ldrh	r1, [r4, #12]
   1b324:	4419      	add	r1, r3
   1b326:	1b49      	subs	r1, r1, r5
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   1b328:	2308      	movs	r3, #8
   1b32a:	aa04      	add	r2, sp, #16
   1b32c:	4620      	mov	r0, r4
	gc_addr = sec_addr + fs->sector_size - ate_size;
   1b32e:	9102      	str	r1, [sp, #8]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   1b330:	f7ff fe43 	bl	1afba <nvs_flash_rd>
	if (rc < 0) {
   1b334:	2800      	cmp	r0, #0
   1b336:	f2c0 8094 	blt.w	1b462 <nvs_gc+0x164>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   1b33a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1b33c:	aa04      	add	r2, sp, #16
   1b33e:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   1b340:	2300      	movs	r3, #0
		if (data8[i] != value) {
   1b342:	f812 0b01 	ldrb.w	r0, [r2], #1
   1b346:	4281      	cmp	r1, r0
   1b348:	d17c      	bne.n	1b444 <nvs_gc+0x146>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   1b34a:	3301      	adds	r3, #1
   1b34c:	2b08      	cmp	r3, #8
   1b34e:	d1f8      	bne.n	1b342 <nvs_gc+0x44>
	if (fs->ate_wra >= (fs->data_wra + ate_size)) {
   1b350:	68a0      	ldr	r0, [r4, #8]
   1b352:	6863      	ldr	r3, [r4, #4]
   1b354:	4428      	add	r0, r5
   1b356:	4283      	cmp	r3, r0
   1b358:	d26e      	bcs.n	1b438 <nvs_gc+0x13a>
	rc = nvs_flash_erase_sector(fs, sec_addr);
   1b35a:	9901      	ldr	r1, [sp, #4]
   1b35c:	4620      	mov	r0, r4
   1b35e:	f7ff fe89 	bl	1b074 <nvs_flash_erase_sector>
	if (rc) {
   1b362:	e07e      	b.n	1b462 <nvs_gc+0x164>
		gc_addr &= ADDR_SECT_MASK;
   1b364:	9b02      	ldr	r3, [sp, #8]
		gc_addr += close_ate.offset;
   1b366:	f8bd 2012 	ldrh.w	r2, [sp, #18]
		gc_addr &= ADDR_SECT_MASK;
   1b36a:	0c1b      	lsrs	r3, r3, #16
   1b36c:	041b      	lsls	r3, r3, #16
		gc_addr += close_ate.offset;
   1b36e:	4413      	add	r3, r2
   1b370:	9302      	str	r3, [sp, #8]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   1b372:	aa06      	add	r2, sp, #24
   1b374:	a902      	add	r1, sp, #8
   1b376:	4620      	mov	r0, r4
		gc_prev_addr = gc_addr;
   1b378:	f8dd a008 	ldr.w	sl, [sp, #8]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   1b37c:	f7ff ff73 	bl	1b266 <nvs_prev_ate>
		if (rc) {
   1b380:	2800      	cmp	r0, #0
   1b382:	d16e      	bne.n	1b462 <nvs_gc+0x164>
		if (!nvs_ate_valid(fs, &gc_ate)) {
   1b384:	a906      	add	r1, sp, #24
   1b386:	4620      	mov	r0, r4
   1b388:	f7ff fec7 	bl	1b11a <nvs_ate_valid>
   1b38c:	2800      	cmp	r0, #0
   1b38e:	d034      	beq.n	1b3fa <nvs_gc+0xfc>
		wlk_addr = fs->ate_wra;
   1b390:	6863      	ldr	r3, [r4, #4]
   1b392:	9303      	str	r3, [sp, #12]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   1b394:	aa08      	add	r2, sp, #32
   1b396:	a903      	add	r1, sp, #12
   1b398:	4620      	mov	r0, r4
			wlk_prev_addr = wlk_addr;
   1b39a:	9e03      	ldr	r6, [sp, #12]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   1b39c:	f7ff ff63 	bl	1b266 <nvs_prev_ate>
			if (rc) {
   1b3a0:	2800      	cmp	r0, #0
   1b3a2:	d15e      	bne.n	1b462 <nvs_gc+0x164>
			if ((wlk_ate.id == gc_ate.id) &&
   1b3a4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   1b3a8:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   1b3ac:	429a      	cmp	r2, r3
   1b3ae:	d027      	beq.n	1b400 <nvs_gc+0x102>
		} while (wlk_addr != fs->ate_wra);
   1b3b0:	6862      	ldr	r2, [r4, #4]
   1b3b2:	9b03      	ldr	r3, [sp, #12]
   1b3b4:	429a      	cmp	r2, r3
   1b3b6:	d1ed      	bne.n	1b394 <nvs_gc+0x96>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
   1b3b8:	4556      	cmp	r6, sl
   1b3ba:	d11e      	bne.n	1b3fa <nvs_gc+0xfc>
   1b3bc:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   1b3c0:	b1db      	cbz	r3, 1b3fa <nvs_gc+0xfc>
			data_addr += gc_ate.offset;
   1b3c2:	f8bd 301a 	ldrh.w	r3, [sp, #26]
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
   1b3c6:	ea4f 471a 	mov.w	r7, sl, lsr #16
   1b3ca:	043f      	lsls	r7, r7, #16
			data_addr += gc_ate.offset;
   1b3cc:	441f      	add	r7, r3
			nvs_ate_crc8_update(&gc_ate);
   1b3ce:	a806      	add	r0, sp, #24
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   1b3d0:	68a3      	ldr	r3, [r4, #8]
   1b3d2:	f8ad 301a 	strh.w	r3, [sp, #26]
			nvs_ate_crc8_update(&gc_ate);
   1b3d6:	f7ff fe82 	bl	1b0de <nvs_ate_crc8_update>
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   1b3da:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
   1b3dc:	f8bd 801c 	ldrh.w	r8, [sp, #28]
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   1b3e0:	681e      	ldr	r6, [r3, #0]
   1b3e2:	4276      	negs	r6, r6
	block_size =
   1b3e4:	f006 0620 	and.w	r6, r6, #32
	while (len) {
   1b3e8:	f1b8 0f00 	cmp.w	r8, #0
   1b3ec:	d10f      	bne.n	1b40e <nvs_gc+0x110>
			rc = nvs_flash_ate_wrt(fs, &gc_ate);
   1b3ee:	a906      	add	r1, sp, #24
   1b3f0:	4620      	mov	r0, r4
   1b3f2:	f7ff ff12 	bl	1b21a <nvs_flash_ate_wrt>
			if (rc) {
   1b3f6:	2800      	cmp	r0, #0
   1b3f8:	d133      	bne.n	1b462 <nvs_gc+0x164>
	} while (gc_prev_addr != stop_addr);
   1b3fa:	45ca      	cmp	sl, r9
   1b3fc:	d1b9      	bne.n	1b372 <nvs_gc+0x74>
gc_done:
   1b3fe:	e7a7      	b.n	1b350 <nvs_gc+0x52>
			    (nvs_ate_valid(fs, &wlk_ate))) {
   1b400:	a908      	add	r1, sp, #32
   1b402:	4620      	mov	r0, r4
   1b404:	f7ff fe89 	bl	1b11a <nvs_ate_valid>
			if ((wlk_ate.id == gc_ate.id) &&
   1b408:	2800      	cmp	r0, #0
   1b40a:	d0d1      	beq.n	1b3b0 <nvs_gc+0xb2>
   1b40c:	e7d4      	b.n	1b3b8 <nvs_gc+0xba>
		bytes_to_copy = MIN(block_size, len);
   1b40e:	4546      	cmp	r6, r8
   1b410:	46b3      	mov	fp, r6
   1b412:	bf28      	it	cs
   1b414:	46c3      	movcs	fp, r8
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
   1b416:	465b      	mov	r3, fp
   1b418:	aa0a      	add	r2, sp, #40	; 0x28
   1b41a:	4639      	mov	r1, r7
   1b41c:	4620      	mov	r0, r4
   1b41e:	f7ff fdcc 	bl	1afba <nvs_flash_rd>
		if (rc) {
   1b422:	b9f0      	cbnz	r0, 1b462 <nvs_gc+0x164>
		rc = nvs_flash_data_wrt(fs, buf, bytes_to_copy);
   1b424:	465a      	mov	r2, fp
   1b426:	a90a      	add	r1, sp, #40	; 0x28
   1b428:	4620      	mov	r0, r4
   1b42a:	f7ff fee3 	bl	1b1f4 <nvs_flash_data_wrt>
		if (rc) {
   1b42e:	b9c0      	cbnz	r0, 1b462 <nvs_gc+0x164>
		len -= bytes_to_copy;
   1b430:	eba8 080b 	sub.w	r8, r8, fp
		addr += bytes_to_copy;
   1b434:	445f      	add	r7, fp
   1b436:	e7d7      	b.n	1b3e8 <nvs_gc+0xea>
		rc = nvs_add_gc_done_ate(fs);
   1b438:	4620      	mov	r0, r4
   1b43a:	f7ff feff 	bl	1b23c <nvs_add_gc_done_ate>
		if (rc) {
   1b43e:	2800      	cmp	r0, #0
   1b440:	d08b      	beq.n	1b35a <nvs_gc+0x5c>
   1b442:	e00e      	b.n	1b462 <nvs_gc+0x164>
	stop_addr = gc_addr - ate_size;
   1b444:	9b02      	ldr	r3, [sp, #8]
	if (nvs_close_ate_valid(fs, &close_ate)) {
   1b446:	a904      	add	r1, sp, #16
   1b448:	4620      	mov	r0, r4
	stop_addr = gc_addr - ate_size;
   1b44a:	eba3 0905 	sub.w	r9, r3, r5
	if (nvs_close_ate_valid(fs, &close_ate)) {
   1b44e:	f7ff fe7e 	bl	1b14e <nvs_close_ate_valid>
   1b452:	2800      	cmp	r0, #0
   1b454:	d186      	bne.n	1b364 <nvs_gc+0x66>
		rc = nvs_recover_last_ate(fs, &gc_addr);
   1b456:	a902      	add	r1, sp, #8
   1b458:	4620      	mov	r0, r4
   1b45a:	f7f5 fa91 	bl	10980 <nvs_recover_last_ate>
		if (rc) {
   1b45e:	2800      	cmp	r0, #0
   1b460:	d087      	beq.n	1b372 <nvs_gc+0x74>
}
   1b462:	b013      	add	sp, #76	; 0x4c
   1b464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001b468 <nvs_delete>:

int nvs_delete(struct nvs_fs *fs, uint16_t id)
{
	return nvs_write(fs, id, NULL, 0);
   1b468:	2300      	movs	r3, #0
   1b46a:	461a      	mov	r2, r3
   1b46c:	f7f5 bc18 	b.w	10ca0 <nvs_write>

0001b470 <nvs_read_hist>:
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
   1b470:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1b474:	461e      	mov	r6, r3
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
   1b476:	7c03      	ldrb	r3, [r0, #16]
{
   1b478:	f8bd 9030 	ldrh.w	r9, [sp, #48]	; 0x30
   1b47c:	4604      	mov	r4, r0
   1b47e:	460f      	mov	r7, r1
   1b480:	4690      	mov	r8, r2
	if (!fs->ready) {
   1b482:	2b00      	cmp	r3, #0
   1b484:	d045      	beq.n	1b512 <nvs_read_hist+0xa2>
		LOG_ERR("NVS not initialized");
		return -EACCES;
	}

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1b486:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   1b488:	2108      	movs	r1, #8
   1b48a:	f7ff fe3c 	bl	1b106 <nvs_al_size.isra.0>

	if (len > (fs->sector_size - 2 * ate_size)) {
   1b48e:	89a3      	ldrh	r3, [r4, #12]
   1b490:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
   1b494:	429e      	cmp	r6, r3
   1b496:	d83f      	bhi.n	1b518 <nvs_read_hist+0xa8>
		return -EINVAL;
	}

	cnt_his = 0U;

	wlk_addr = fs->ate_wra;
   1b498:	6863      	ldr	r3, [r4, #4]
   1b49a:	9301      	str	r3, [sp, #4]
	cnt_his = 0U;
   1b49c:	f04f 0a00 	mov.w	sl, #0
	rd_addr = wlk_addr;

	while (cnt_his <= cnt) {
		rd_addr = wlk_addr;
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   1b4a0:	aa02      	add	r2, sp, #8
   1b4a2:	a901      	add	r1, sp, #4
   1b4a4:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
   1b4a6:	9d01      	ldr	r5, [sp, #4]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   1b4a8:	f7ff fedd 	bl	1b266 <nvs_prev_ate>
		if (rc) {
   1b4ac:	bb38      	cbnz	r0, 1b4fe <nvs_read_hist+0x8e>
			goto err;
		}
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
   1b4ae:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1b4b2:	42bb      	cmp	r3, r7
   1b4b4:	d108      	bne.n	1b4c8 <nvs_read_hist+0x58>
   1b4b6:	a902      	add	r1, sp, #8
   1b4b8:	4620      	mov	r0, r4
   1b4ba:	f7ff fe2e 	bl	1b11a <nvs_ate_valid>
   1b4be:	b118      	cbz	r0, 1b4c8 <nvs_read_hist+0x58>
			cnt_his++;
   1b4c0:	f10a 0a01 	add.w	sl, sl, #1
   1b4c4:	fa1f fa8a 	uxth.w	sl, sl
		}
		if (wlk_addr == fs->ate_wra) {
   1b4c8:	6862      	ldr	r2, [r4, #4]
   1b4ca:	9b01      	ldr	r3, [sp, #4]
   1b4cc:	429a      	cmp	r2, r3
   1b4ce:	d019      	beq.n	1b504 <nvs_read_hist+0x94>
	while (cnt_his <= cnt) {
   1b4d0:	45d1      	cmp	r9, sl
   1b4d2:	d2e5      	bcs.n	1b4a0 <nvs_read_hist+0x30>
			break;
		}
	}

	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   1b4d4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   1b4d8:	b1c3      	cbz	r3, 1b50c <nvs_read_hist+0x9c>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   1b4da:	45d1      	cmp	r9, sl
   1b4dc:	d816      	bhi.n	1b50c <nvs_read_hist+0x9c>
		return -ENOENT;
	}

	rd_addr &= ADDR_SECT_MASK;
	rd_addr += wlk_ate.offset;
   1b4de:	f8bd 100a 	ldrh.w	r1, [sp, #10]
	rd_addr &= ADDR_SECT_MASK;
   1b4e2:	0c2d      	lsrs	r5, r5, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   1b4e4:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
   1b4e6:	ea4f 4505 	mov.w	r5, r5, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   1b4ea:	bf28      	it	cs
   1b4ec:	4633      	movcs	r3, r6
   1b4ee:	4642      	mov	r2, r8
   1b4f0:	4429      	add	r1, r5
   1b4f2:	4620      	mov	r0, r4
   1b4f4:	f7ff fd61 	bl	1afba <nvs_flash_rd>
	if (rc) {
   1b4f8:	b908      	cbnz	r0, 1b4fe <nvs_read_hist+0x8e>
		goto err;
	}

	return wlk_ate.len;
   1b4fa:	f8bd 000c 	ldrh.w	r0, [sp, #12]

err:
	return rc;
}
   1b4fe:	b004      	add	sp, #16
   1b500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   1b504:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1b508:	42bb      	cmp	r3, r7
   1b50a:	d0e3      	beq.n	1b4d4 <nvs_read_hist+0x64>
		return -ENOENT;
   1b50c:	f06f 0001 	mvn.w	r0, #1
   1b510:	e7f5      	b.n	1b4fe <nvs_read_hist+0x8e>
		return -EACCES;
   1b512:	f06f 000c 	mvn.w	r0, #12
   1b516:	e7f2      	b.n	1b4fe <nvs_read_hist+0x8e>
		return -EINVAL;
   1b518:	f06f 0015 	mvn.w	r0, #21
   1b51c:	e7ef      	b.n	1b4fe <nvs_read_hist+0x8e>

0001b51e <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   1b51e:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   1b520:	2400      	movs	r4, #0
   1b522:	9400      	str	r4, [sp, #0]
   1b524:	f7ff ffa4 	bl	1b470 <nvs_read_hist>
	return rc;
}
   1b528:	b002      	add	sp, #8
   1b52a:	bd10      	pop	{r4, pc}

0001b52c <device_get_binding>:
   1b52c:	f7fd be04 	b.w	19138 <z_impl_device_get_binding>

0001b530 <get_sectors_cb>:
{
   1b530:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   1b532:	6802      	ldr	r2, [r0, #0]
   1b534:	684c      	ldr	r4, [r1, #4]
   1b536:	42a2      	cmp	r2, r4
   1b538:	d316      	bcc.n	1b568 <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
   1b53a:	688b      	ldr	r3, [r1, #8]
   1b53c:	4423      	add	r3, r4
   1b53e:	429a      	cmp	r2, r3
   1b540:	d206      	bcs.n	1b550 <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
   1b542:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
   1b546:	42ab      	cmp	r3, r5
   1b548:	d304      	bcc.n	1b554 <get_sectors_cb+0x24>
		data->status = -ENOMEM;
   1b54a:	f06f 030b 	mvn.w	r3, #11
   1b54e:	618b      	str	r3, [r1, #24]
		*bail_value = false;
   1b550:	2000      	movs	r0, #0
   1b552:	e00a      	b.n	1b56a <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   1b554:	68cd      	ldr	r5, [r1, #12]
   1b556:	1b12      	subs	r2, r2, r4
   1b558:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
   1b55c:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   1b560:	6842      	ldr	r2, [r0, #4]
   1b562:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
   1b564:	3301      	adds	r3, #1
   1b566:	610b      	str	r3, [r1, #16]
		*bail_value = true;
   1b568:	2001      	movs	r0, #1
}
   1b56a:	bd70      	pop	{r4, r5, r6, pc}

0001b56c <settings_load>:
	return settings_load_subtree(NULL);
   1b56c:	2000      	movs	r0, #0
   1b56e:	f7f5 bce9 	b.w	10f44 <settings_load_subtree>

0001b572 <settings_delete>:
	return settings_save_one(name, NULL, 0);
   1b572:	2200      	movs	r2, #0
   1b574:	4611      	mov	r1, r2
   1b576:	f7f5 bcab 	b.w	10ed0 <settings_save_one>

0001b57a <settings_name_steq>:
{
   1b57a:	4603      	mov	r3, r0
   1b57c:	b530      	push	{r4, r5, lr}
   1b57e:	4608      	mov	r0, r1
	if (next) {
   1b580:	b10a      	cbz	r2, 1b586 <settings_name_steq+0xc>
		*next = NULL;
   1b582:	2100      	movs	r1, #0
   1b584:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   1b586:	b163      	cbz	r3, 1b5a2 <settings_name_steq+0x28>
   1b588:	b190      	cbz	r0, 1b5b0 <settings_name_steq+0x36>
   1b58a:	1e41      	subs	r1, r0, #1
   1b58c:	4618      	mov	r0, r3
	while ((*key != '\0') && (*key == *name) &&
   1b58e:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   1b592:	4604      	mov	r4, r0
   1b594:	f810 3b01 	ldrb.w	r3, [r0], #1
   1b598:	b15d      	cbz	r5, 1b5b2 <settings_name_steq+0x38>
   1b59a:	429d      	cmp	r5, r3
   1b59c:	d101      	bne.n	1b5a2 <settings_name_steq+0x28>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   1b59e:	2d3d      	cmp	r5, #61	; 0x3d
   1b5a0:	d1f5      	bne.n	1b58e <settings_name_steq+0x14>
	return 0;
   1b5a2:	2000      	movs	r0, #0
   1b5a4:	e004      	b.n	1b5b0 <settings_name_steq+0x36>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   1b5a6:	2b3d      	cmp	r3, #61	; 0x3d
   1b5a8:	d008      	beq.n	1b5bc <settings_name_steq+0x42>
   1b5aa:	fab3 f083 	clz	r0, r3
   1b5ae:	0940      	lsrs	r0, r0, #5
}
   1b5b0:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   1b5b2:	2b2f      	cmp	r3, #47	; 0x2f
   1b5b4:	d1f7      	bne.n	1b5a6 <settings_name_steq+0x2c>
		if (next) {
   1b5b6:	b10a      	cbz	r2, 1b5bc <settings_name_steq+0x42>
			*next = name + 1;
   1b5b8:	3401      	adds	r4, #1
   1b5ba:	6014      	str	r4, [r2, #0]
		return 1;
   1b5bc:	2001      	movs	r0, #1
   1b5be:	e7f7      	b.n	1b5b0 <settings_name_steq+0x36>

0001b5c0 <settings_name_next>:
{
   1b5c0:	b530      	push	{r4, r5, lr}
   1b5c2:	4603      	mov	r3, r0
	if (next) {
   1b5c4:	b109      	cbz	r1, 1b5ca <settings_name_next+0xa>
		*next = NULL;
   1b5c6:	2200      	movs	r2, #0
   1b5c8:	600a      	str	r2, [r1, #0]
	if (!name) {
   1b5ca:	b16b      	cbz	r3, 1b5e8 <settings_name_next+0x28>
   1b5cc:	461a      	mov	r2, r3
   1b5ce:	4614      	mov	r4, r2
   1b5d0:	1ad0      	subs	r0, r2, r3
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   1b5d2:	f812 5b01 	ldrb.w	r5, [r2], #1
   1b5d6:	b135      	cbz	r5, 1b5e6 <settings_name_next+0x26>
   1b5d8:	2d3d      	cmp	r5, #61	; 0x3d
   1b5da:	d004      	beq.n	1b5e6 <settings_name_next+0x26>
   1b5dc:	2d2f      	cmp	r5, #47	; 0x2f
   1b5de:	d1f6      	bne.n	1b5ce <settings_name_next+0xe>
		if (next) {
   1b5e0:	b109      	cbz	r1, 1b5e6 <settings_name_next+0x26>
			*next = name + 1;
   1b5e2:	3401      	adds	r4, #1
   1b5e4:	600c      	str	r4, [r1, #0]
}
   1b5e6:	bd30      	pop	{r4, r5, pc}
		return 0;
   1b5e8:	4618      	mov	r0, r3
   1b5ea:	e7fc      	b.n	1b5e6 <settings_name_next+0x26>

0001b5ec <settings_call_set_handler>:
{
   1b5ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b5f0:	b085      	sub	sp, #20
   1b5f2:	4604      	mov	r4, r0
   1b5f4:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	const char *name_key = name;
   1b5f8:	9003      	str	r0, [sp, #12]
{
   1b5fa:	460d      	mov	r5, r1
   1b5fc:	4616      	mov	r6, r2
   1b5fe:	461f      	mov	r7, r3
	if (load_arg && load_arg->subtree &&
   1b600:	f1b8 0f00 	cmp.w	r8, #0
   1b604:	d018      	beq.n	1b638 <settings_call_set_handler+0x4c>
   1b606:	f8d8 1000 	ldr.w	r1, [r8]
   1b60a:	b181      	cbz	r1, 1b62e <settings_call_set_handler+0x42>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
   1b60c:	aa03      	add	r2, sp, #12
   1b60e:	f7ff ffb4 	bl	1b57a <settings_name_steq>
	if (load_arg && load_arg->subtree &&
   1b612:	b960      	cbnz	r0, 1b62e <settings_call_set_handler+0x42>
			rc = 0;
   1b614:	2000      	movs	r0, #0
   1b616:	e007      	b.n	1b628 <settings_call_set_handler+0x3c>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
   1b618:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1b61c:	9300      	str	r3, [sp, #0]
   1b61e:	9803      	ldr	r0, [sp, #12]
   1b620:	463b      	mov	r3, r7
   1b622:	4632      	mov	r2, r6
   1b624:	4629      	mov	r1, r5
   1b626:	47c8      	blx	r9
}
   1b628:	b005      	add	sp, #20
   1b62a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (load_arg && load_arg->cb) {
   1b62e:	f8d8 9004 	ldr.w	r9, [r8, #4]
   1b632:	f1b9 0f00 	cmp.w	r9, #0
   1b636:	d1ef      	bne.n	1b618 <settings_call_set_handler+0x2c>
		ch = settings_parse_and_lookup(name, &name_key);
   1b638:	a903      	add	r1, sp, #12
   1b63a:	4620      	mov	r0, r4
   1b63c:	f7f5 fcd8 	bl	10ff0 <settings_parse_and_lookup>
		if (!ch) {
   1b640:	2800      	cmp	r0, #0
   1b642:	d0e7      	beq.n	1b614 <settings_call_set_handler+0x28>
		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
   1b644:	6884      	ldr	r4, [r0, #8]
   1b646:	9803      	ldr	r0, [sp, #12]
   1b648:	463b      	mov	r3, r7
   1b64a:	4632      	mov	r2, r6
   1b64c:	4629      	mov	r1, r5
   1b64e:	47a0      	blx	r4
   1b650:	e7e0      	b.n	1b614 <settings_call_set_handler+0x28>

0001b652 <settings_nvs_read_fn>:
{
   1b652:	b510      	push	{r4, lr}
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   1b654:	4613      	mov	r3, r2
{
   1b656:	4614      	mov	r4, r2
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   1b658:	460a      	mov	r2, r1
   1b65a:	8881      	ldrh	r1, [r0, #4]
   1b65c:	6800      	ldr	r0, [r0, #0]
   1b65e:	f7ff ff5e 	bl	1b51e <nvs_read>
}
   1b662:	42a0      	cmp	r0, r4
   1b664:	bfa8      	it	ge
   1b666:	4620      	movge	r0, r4
   1b668:	bd10      	pop	{r4, pc}

0001b66a <settings_nvs_save>:
{
   1b66a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b66e:	b097      	sub	sp, #92	; 0x5c
   1b670:	4604      	mov	r4, r0
   1b672:	9201      	str	r2, [sp, #4]
   1b674:	469b      	mov	fp, r3
	if (!name) {
   1b676:	4689      	mov	r9, r1
   1b678:	2900      	cmp	r1, #0
   1b67a:	d06b      	beq.n	1b754 <settings_nvs_save+0xea>
	delete = ((value == NULL) || (val_len == 0));
   1b67c:	b1da      	cbz	r2, 1b6b6 <settings_nvs_save+0x4c>
   1b67e:	fabb f78b 	clz	r7, fp
   1b682:	097f      	lsrs	r7, r7, #5
	name_id = cf->last_name_id + 1;
   1b684:	8f25      	ldrh	r5, [r4, #56]	; 0x38
   1b686:	3501      	adds	r5, #1
   1b688:	b2ad      	uxth	r5, r5
	write_name_id = cf->last_name_id + 1;
   1b68a:	46a8      	mov	r8, r5
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   1b68c:	f104 0a08 	add.w	sl, r4, #8
		name_id--;
   1b690:	1e6e      	subs	r6, r5, #1
   1b692:	b2b6      	uxth	r6, r6
		if (name_id == NVS_NAMECNT_ID) {
   1b694:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   1b698:	d030      	beq.n	1b6fc <settings_nvs_save+0x92>
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   1b69a:	234a      	movs	r3, #74	; 0x4a
   1b69c:	aa03      	add	r2, sp, #12
   1b69e:	4631      	mov	r1, r6
   1b6a0:	4650      	mov	r0, sl
   1b6a2:	f7ff ff3c 	bl	1b51e <nvs_read>
		if (rc < 0) {
   1b6a6:	2800      	cmp	r0, #0
   1b6a8:	da07      	bge.n	1b6ba <settings_nvs_save+0x50>
			if (rc == -ENOENT) {
   1b6aa:	f110 0f02 	cmn.w	r0, #2
   1b6ae:	bf08      	it	eq
   1b6b0:	46b0      	moveq	r8, r6
   1b6b2:	4635      	mov	r5, r6
   1b6b4:	e7ec      	b.n	1b690 <settings_nvs_save+0x26>
	delete = ((value == NULL) || (val_len == 0));
   1b6b6:	2701      	movs	r7, #1
   1b6b8:	e7e4      	b.n	1b684 <settings_nvs_save+0x1a>
		rdname[rc] = '\0';
   1b6ba:	f100 0358 	add.w	r3, r0, #88	; 0x58
   1b6be:	eb0d 0003 	add.w	r0, sp, r3
   1b6c2:	2300      	movs	r3, #0
   1b6c4:	f800 3c4c 	strb.w	r3, [r0, #-76]
		if (strcmp(name, rdname)) {
   1b6c8:	a903      	add	r1, sp, #12
   1b6ca:	4648      	mov	r0, r9
   1b6cc:	f001 fabd 	bl	1cc4a <strcmp>
   1b6d0:	2800      	cmp	r0, #0
   1b6d2:	d1ee      	bne.n	1b6b2 <settings_nvs_save+0x48>
		if ((delete) && (name_id == cf->last_name_id)) {
   1b6d4:	2f00      	cmp	r7, #0
   1b6d6:	d03b      	beq.n	1b750 <settings_nvs_save+0xe6>
   1b6d8:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   1b6da:	42b3      	cmp	r3, r6
   1b6dc:	d142      	bne.n	1b764 <settings_nvs_save+0xfa>
			cf->last_name_id--;
   1b6de:	4622      	mov	r2, r4
   1b6e0:	1e73      	subs	r3, r6, #1
   1b6e2:	f822 3f38 	strh.w	r3, [r2, #56]!
			rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   1b6e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1b6ea:	2302      	movs	r3, #2
   1b6ec:	4650      	mov	r0, sl
   1b6ee:	f7f5 fad7 	bl	10ca0 <nvs_write>
			if (rc < 0) {
   1b6f2:	2800      	cmp	r0, #0
   1b6f4:	da36      	bge.n	1b764 <settings_nvs_save+0xfa>
}
   1b6f6:	b017      	add	sp, #92	; 0x5c
   1b6f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (delete) {
   1b6fc:	bb6f      	cbnz	r7, 1b75a <settings_nvs_save+0xf0>
	write_name = true;
   1b6fe:	2701      	movs	r7, #1
	if (write_name_id == NVS_NAMECNT_ID + NVS_NAME_ID_OFFSET) {
   1b700:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
   1b704:	d02b      	beq.n	1b75e <settings_nvs_save+0xf4>
	rc = nvs_write(&cf->cf_nvs, write_name_id + NVS_NAME_ID_OFFSET,
   1b706:	f104 0508 	add.w	r5, r4, #8
   1b70a:	f508 4180 	add.w	r1, r8, #16384	; 0x4000
   1b70e:	9a01      	ldr	r2, [sp, #4]
   1b710:	465b      	mov	r3, fp
   1b712:	b289      	uxth	r1, r1
   1b714:	4628      	mov	r0, r5
   1b716:	f7f5 fac3 	bl	10ca0 <nvs_write>
	if (rc < 0) {
   1b71a:	2800      	cmp	r0, #0
   1b71c:	dbeb      	blt.n	1b6f6 <settings_nvs_save+0x8c>
	if (write_name) {
   1b71e:	b157      	cbz	r7, 1b736 <settings_nvs_save+0xcc>
		rc = nvs_write(&cf->cf_nvs, write_name_id, name, strlen(name));
   1b720:	4648      	mov	r0, r9
   1b722:	f001 fa82 	bl	1cc2a <strlen>
   1b726:	464a      	mov	r2, r9
   1b728:	4603      	mov	r3, r0
   1b72a:	4641      	mov	r1, r8
   1b72c:	4628      	mov	r0, r5
   1b72e:	f7f5 fab7 	bl	10ca0 <nvs_write>
		if (rc < 0) {
   1b732:	2800      	cmp	r0, #0
   1b734:	dbdf      	blt.n	1b6f6 <settings_nvs_save+0x8c>
	if (write_name_id > cf->last_name_id) {
   1b736:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   1b738:	4543      	cmp	r3, r8
   1b73a:	d220      	bcs.n	1b77e <settings_nvs_save+0x114>
		cf->last_name_id = write_name_id;
   1b73c:	4622      	mov	r2, r4
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   1b73e:	2302      	movs	r3, #2
		cf->last_name_id = write_name_id;
   1b740:	f822 8f38 	strh.w	r8, [r2, #56]!
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   1b744:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1b748:	4628      	mov	r0, r5
   1b74a:	f7f5 faa9 	bl	10ca0 <nvs_write>
   1b74e:	e016      	b.n	1b77e <settings_nvs_save+0x114>
   1b750:	46b0      	mov	r8, r6
   1b752:	e7d5      	b.n	1b700 <settings_nvs_save+0x96>
		return -EINVAL;
   1b754:	f06f 0015 	mvn.w	r0, #21
   1b758:	e7cd      	b.n	1b6f6 <settings_nvs_save+0x8c>
		return 0;
   1b75a:	2000      	movs	r0, #0
   1b75c:	e7cb      	b.n	1b6f6 <settings_nvs_save+0x8c>
		return -ENOMEM;
   1b75e:	f06f 000b 	mvn.w	r0, #11
   1b762:	e7c8      	b.n	1b6f6 <settings_nvs_save+0x8c>
			rc = nvs_delete(&cf->cf_nvs, name_id);
   1b764:	4631      	mov	r1, r6
   1b766:	4650      	mov	r0, sl
   1b768:	f7ff fe7e 	bl	1b468 <nvs_delete>
			if (rc >= 0) {
   1b76c:	2800      	cmp	r0, #0
   1b76e:	dbc2      	blt.n	1b6f6 <settings_nvs_save+0x8c>
				rc = nvs_delete(&cf->cf_nvs, name_id +
   1b770:	f505 517f 	add.w	r1, r5, #16320	; 0x3fc0
   1b774:	313f      	adds	r1, #63	; 0x3f
   1b776:	b289      	uxth	r1, r1
   1b778:	4650      	mov	r0, sl
   1b77a:	f7ff fe75 	bl	1b468 <nvs_delete>
	if (rc < 0) {
   1b77e:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   1b782:	e7b8      	b.n	1b6f6 <settings_nvs_save+0x8c>

0001b784 <settings_nvs_backend_init>:
{
   1b784:	b573      	push	{r0, r1, r4, r5, r6, lr}
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   1b786:	f100 0608 	add.w	r6, r0, #8
   1b78a:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
{
   1b78c:	4604      	mov	r4, r0
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   1b78e:	4630      	mov	r0, r6
   1b790:	f7f5 f928 	bl	109e4 <nvs_init>
	if (rc) {
   1b794:	4605      	mov	r5, r0
   1b796:	b970      	cbnz	r0, 1b7b6 <settings_nvs_backend_init+0x32>
	rc = nvs_read(&cf->cf_nvs, NVS_NAMECNT_ID, &last_name_id,
   1b798:	2302      	movs	r3, #2
   1b79a:	f10d 0206 	add.w	r2, sp, #6
   1b79e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1b7a2:	4630      	mov	r0, r6
   1b7a4:	f7ff febb 	bl	1b51e <nvs_read>
	if (rc < 0) {
   1b7a8:	2800      	cmp	r0, #0
		cf->last_name_id = last_name_id;
   1b7aa:	bfac      	ite	ge
   1b7ac:	f8bd 3006 	ldrhge.w	r3, [sp, #6]
		cf->last_name_id = NVS_NAMECNT_ID;
   1b7b0:	f44f 4300 	movlt.w	r3, #32768	; 0x8000
		cf->last_name_id = last_name_id;
   1b7b4:	8723      	strh	r3, [r4, #56]	; 0x38
}
   1b7b6:	4628      	mov	r0, r5
   1b7b8:	b002      	add	sp, #8
   1b7ba:	bd70      	pop	{r4, r5, r6, pc}

0001b7bc <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   1b7bc:	2200      	movs	r2, #0
   1b7be:	e9c0 2200 	strd	r2, r2, [r0]
   1b7c2:	6082      	str	r2, [r0, #8]
}
   1b7c4:	4770      	bx	lr

0001b7c6 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1b7c6:	6903      	ldr	r3, [r0, #16]
   1b7c8:	b2c9      	uxtb	r1, r1
   1b7ca:	220c      	movs	r2, #12
   1b7cc:	fb01 3302 	mla	r3, r1, r2, r3
   1b7d0:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   1b7d2:	f000 0007 	and.w	r0, r0, #7
   1b7d6:	4770      	bx	lr

0001b7d8 <set_on_state>:
	__asm__ volatile(
   1b7d8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b7dc:	f3ef 8211 	mrs	r2, BASEPRI
   1b7e0:	f383 8811 	msr	BASEPRI, r3
   1b7e4:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1b7e8:	6803      	ldr	r3, [r0, #0]
   1b7ea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1b7ee:	f043 0302 	orr.w	r3, r3, #2
   1b7f2:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1b7f4:	f382 8811 	msr	BASEPRI, r2
   1b7f8:	f3bf 8f6f 	isb	sy
}
   1b7fc:	4770      	bx	lr

0001b7fe <stop>:
{
   1b7fe:	4603      	mov	r3, r0
   1b800:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
   1b802:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   1b804:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   1b806:	f04f 0440 	mov.w	r4, #64	; 0x40
   1b80a:	f3ef 8611 	mrs	r6, BASEPRI
   1b80e:	f384 8811 	msr	BASEPRI, r4
   1b812:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1b816:	250c      	movs	r5, #12
   1b818:	fb05 0401 	mla	r4, r5, r1, r0
   1b81c:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1b81e:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   1b822:	d001      	beq.n	1b828 <stop+0x2a>
   1b824:	42a2      	cmp	r2, r4
   1b826:	d110      	bne.n	1b84a <stop+0x4c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1b828:	fb05 0001 	mla	r0, r5, r1, r0
   1b82c:	2201      	movs	r2, #1
   1b82e:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
   1b830:	2000      	movs	r0, #0
	__asm__ volatile(
   1b832:	f386 8811 	msr	BASEPRI, r6
   1b836:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   1b83a:	b928      	cbnz	r0, 1b848 <stop+0x4a>
	get_sub_config(dev, type)->stop();
   1b83c:	685b      	ldr	r3, [r3, #4]
   1b83e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   1b842:	684b      	ldr	r3, [r1, #4]
   1b844:	4798      	blx	r3
	return 0;
   1b846:	2000      	movs	r0, #0
}
   1b848:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
   1b84a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b84e:	e7f0      	b.n	1b832 <stop+0x34>

0001b850 <api_stop>:
	return stop(dev, subsys, CTX_API);
   1b850:	2280      	movs	r2, #128	; 0x80
   1b852:	f7ff bfd4 	b.w	1b7fe <stop>

0001b856 <async_start>:
{
   1b856:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b858:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   1b85a:	6904      	ldr	r4, [r0, #16]
{
   1b85c:	4605      	mov	r5, r0
   1b85e:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   1b860:	f04f 0040 	mov.w	r0, #64	; 0x40
   1b864:	f3ef 8c11 	mrs	ip, BASEPRI
   1b868:	f380 8811 	msr	BASEPRI, r0
   1b86c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1b870:	260c      	movs	r6, #12
   1b872:	fb06 4601 	mla	r6, r6, r1, r4
   1b876:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1b878:	f000 0e07 	and.w	lr, r0, #7
   1b87c:	f1be 0f01 	cmp.w	lr, #1
   1b880:	d111      	bne.n	1b8a6 <async_start+0x50>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1b882:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
   1b884:	2600      	movs	r6, #0
	__asm__ volatile(
   1b886:	f38c 8811 	msr	BASEPRI, ip
   1b88a:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   1b88e:	b946      	cbnz	r6, 1b8a2 <async_start+0x4c>
	subdata->cb = cb;
   1b890:	200c      	movs	r0, #12
   1b892:	fb00 4401 	mla	r4, r0, r1, r4
	subdata->user_data = user_data;
   1b896:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   1b89a:	686b      	ldr	r3, [r5, #4]
   1b89c:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
   1b8a0:	4798      	blx	r3
}
   1b8a2:	4630      	mov	r0, r6
   1b8a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1b8a6:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
   1b8aa:	4287      	cmp	r7, r0
   1b8ac:	bf14      	ite	ne
   1b8ae:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
   1b8b2:	f06f 0677 	mvneq.w	r6, #119	; 0x77
   1b8b6:	e7e6      	b.n	1b886 <async_start+0x30>

0001b8b8 <api_start>:
{
   1b8b8:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   1b8ba:	2480      	movs	r4, #128	; 0x80
   1b8bc:	9400      	str	r4, [sp, #0]
   1b8be:	f7ff ffca 	bl	1b856 <async_start>
}
   1b8c2:	b002      	add	sp, #8
   1b8c4:	bd10      	pop	{r4, pc}

0001b8c6 <onoff_started_callback>:
	return &data->mgr[type];
   1b8c6:	6900      	ldr	r0, [r0, #16]
{
   1b8c8:	b410      	push	{r4}
	return &data->mgr[type];
   1b8ca:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   1b8cc:	241c      	movs	r4, #28
   1b8ce:	fb03 0004 	mla	r0, r3, r4, r0
   1b8d2:	2100      	movs	r1, #0
}
   1b8d4:	bc10      	pop	{r4}
	notify(mgr, 0);
   1b8d6:	4710      	bx	r2

0001b8d8 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1b8d8:	2000      	movs	r0, #0
   1b8da:	f004 bb6d 	b.w	1ffb8 <nrfx_clock_stop>

0001b8de <blocking_start_callback>:
{
   1b8de:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1b8e0:	f7fd bf26 	b.w	19730 <z_impl_k_sem_give>

0001b8e4 <sys_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   1b8e4:	4770      	bx	lr

0001b8e6 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   1b8e6:	4770      	bx	lr

0001b8e8 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   1b8e8:	b538      	push	{r3, r4, r5, lr}
   1b8ea:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   1b8ec:	42ab      	cmp	r3, r5
{
   1b8ee:	4611      	mov	r1, r2
   1b8f0:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   1b8f2:	d804      	bhi.n	1b8fe <_copy+0x16>
		(void)memcpy(to, from, from_len);
   1b8f4:	461a      	mov	r2, r3
   1b8f6:	f001 f9d6 	bl	1cca6 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   1b8fa:	4620      	mov	r0, r4
   1b8fc:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   1b8fe:	2400      	movs	r4, #0
   1b900:	e7fb      	b.n	1b8fa <_copy+0x12>

0001b902 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   1b902:	f001 b9db 	b.w	1ccbc <memset>

0001b906 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   1b906:	09c3      	lsrs	r3, r0, #7
   1b908:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1b90c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1b910:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   1b914:	b2c0      	uxtb	r0, r0
   1b916:	4770      	bx	lr

0001b918 <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
   1b918:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b91c:	4606      	mov	r6, r0
   1b91e:	b0a9      	sub	sp, #164	; 0xa4
   1b920:	4688      	mov	r8, r1
   1b922:	4614      	mov	r4, r2
   1b924:	2740      	movs	r7, #64	; 0x40
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
		}

		/* computing modular reduction of _random (see FIPS 186.4 B.4.1): */
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   1b926:	f102 0924 	add.w	r9, r2, #36	; 0x24
		uECC_RNG_Function rng_function = uECC_get_rng();
   1b92a:	f7f5 ffcd 	bl	118c8 <uECC_get_rng>
		if (!rng_function ||
   1b92e:	4603      	mov	r3, r0
   1b930:	2800      	cmp	r0, #0
   1b932:	d03e      	beq.n	1b9b2 <uECC_make_key+0x9a>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   1b934:	2140      	movs	r1, #64	; 0x40
   1b936:	a808      	add	r0, sp, #32
   1b938:	4798      	blx	r3
		if (!rng_function ||
   1b93a:	b3d0      	cbz	r0, 1b9b2 <uECC_make_key+0x9a>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   1b93c:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   1b940:	f112 031f 	adds.w	r3, r2, #31
   1b944:	bf48      	it	mi
   1b946:	f102 033e 	addmi.w	r3, r2, #62	; 0x3e
   1b94a:	466d      	mov	r5, sp
   1b94c:	464a      	mov	r2, r9
   1b94e:	a908      	add	r1, sp, #32
   1b950:	4628      	mov	r0, r5
   1b952:	f343 1347 	sbfx	r3, r3, #5, #8
   1b956:	f000 f9fa 	bl	1bd4e <uECC_vli_mmod>

		/* Computing public-key from private: */
		if (EccPoint_compute_public_key(_public, _private, curve)) {
   1b95a:	4622      	mov	r2, r4
   1b95c:	4629      	mov	r1, r5
   1b95e:	a818      	add	r0, sp, #96	; 0x60
   1b960:	f000 fe0f 	bl	1c582 <EccPoint_compute_public_key>
   1b964:	b318      	cbz	r0, 1b9ae <uECC_make_key+0x96>

			/* Converting buffers to correct bit order: */
			uECC_vli_nativeToBytes(private_key,
					       BITS_TO_BYTES(curve->num_n_bits),
   1b966:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
			uECC_vli_nativeToBytes(private_key,
   1b96a:	1dd9      	adds	r1, r3, #7
   1b96c:	bf48      	it	mi
   1b96e:	f103 010e 	addmi.w	r1, r3, #14
   1b972:	462a      	mov	r2, r5
   1b974:	4640      	mov	r0, r8
   1b976:	10c9      	asrs	r1, r1, #3
   1b978:	f000 fe2b 	bl	1c5d2 <uECC_vli_nativeToBytes>
					       _private);
			uECC_vli_nativeToBytes(public_key,
   1b97c:	f994 1001 	ldrsb.w	r1, [r4, #1]
   1b980:	aa18      	add	r2, sp, #96	; 0x60
   1b982:	4630      	mov	r0, r6
   1b984:	f000 fe25 	bl	1c5d2 <uECC_vli_nativeToBytes>
					       curve->num_bytes,
					       _public);
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   1b988:	f994 1001 	ldrsb.w	r1, [r4, #1]
 					       curve->num_bytes,
					       _public + curve->num_words);
   1b98c:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   1b990:	ab18      	add	r3, sp, #96	; 0x60
   1b992:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   1b996:	1870      	adds	r0, r6, r1
   1b998:	f000 fe1b 	bl	1c5d2 <uECC_vli_nativeToBytes>
#ifdef TINYCRYPT_ARCH_HAS_SET_SECURE
extern void _set_secure(void *to, uint8_t val, unsigned int len);
#else /* ! TINYCRYPT_ARCH_HAS_SET_SECURE */
static inline void _set_secure(void *to, uint8_t val, unsigned int len)
{
  (void) memset(to, val, len);
   1b99c:	2220      	movs	r2, #32
   1b99e:	2100      	movs	r1, #0
   1b9a0:	4628      	mov	r0, r5
   1b9a2:	f001 f98b 	bl	1ccbc <memset>

			/* erasing temporary buffer that stored secret: */
			_set_secure(_private, 0, NUM_ECC_BYTES);

      			return 1;
   1b9a6:	2001      	movs	r0, #1
    		}
  	}
	return 0;
}
   1b9a8:	b029      	add	sp, #164	; 0xa4
   1b9aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   1b9ae:	3f01      	subs	r7, #1
   1b9b0:	d1bb      	bne.n	1b92a <uECC_make_key+0x12>
        		return 0;
   1b9b2:	2000      	movs	r0, #0
   1b9b4:	e7f8      	b.n	1b9a8 <uECC_make_key+0x90>

0001b9b6 <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
   1b9b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b9ba:	461c      	mov	r4, r3
	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {_private, tmp};
	uECC_word_t *initial_Z = 0;
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
	wordcount_t num_bytes = curve->num_bytes;
   1b9bc:	f993 7001 	ldrsb.w	r7, [r3, #1]
	wordcount_t num_words = curve->num_words;
   1b9c0:	f993 a000 	ldrsb.w	sl, [r3]
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
   1b9c4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
   1b9c8:	b0a4      	sub	sp, #144	; 0x90
   1b9ca:	4690      	mov	r8, r2
	uECC_vli_bytesToNative(_private,
   1b9cc:	1dda      	adds	r2, r3, #7
   1b9ce:	bf48      	it	mi
   1b9d0:	f103 020e 	addmi.w	r2, r3, #14
	uECC_word_t *p2[2] = {_private, tmp};
   1b9d4:	ad04      	add	r5, sp, #16
{
   1b9d6:	4681      	mov	r9, r0
	uECC_word_t *p2[2] = {_private, tmp};
   1b9d8:	ae0c      	add	r6, sp, #48	; 0x30
	uECC_vli_bytesToNative(_private,
   1b9da:	4628      	mov	r0, r5
   1b9dc:	10d2      	asrs	r2, r2, #3
	uECC_word_t *p2[2] = {_private, tmp};
   1b9de:	9502      	str	r5, [sp, #8]
   1b9e0:	9603      	str	r6, [sp, #12]
	uECC_vli_bytesToNative(_private,
   1b9e2:	f000 fe0a 	bl	1c5fa <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
   1b9e6:	463a      	mov	r2, r7
   1b9e8:	4649      	mov	r1, r9
   1b9ea:	a814      	add	r0, sp, #80	; 0x50
   1b9ec:	f000 fe05 	bl	1c5fa <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
   1b9f0:	ab14      	add	r3, sp, #80	; 0x50
   1b9f2:	eb09 0107 	add.w	r1, r9, r7
   1b9f6:	eb03 008a 	add.w	r0, r3, sl, lsl #2
   1b9fa:	463a      	mov	r2, r7
   1b9fc:	f000 fdfd 	bl	1c5fa <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
   1ba00:	4623      	mov	r3, r4
   1ba02:	4632      	mov	r2, r6
   1ba04:	4629      	mov	r1, r5
   1ba06:	4628      	mov	r0, r5
   1ba08:	f000 fd8f 	bl	1c52a <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
   1ba0c:	fab0 f380 	clz	r3, r0
   1ba10:	9401      	str	r4, [sp, #4]
   1ba12:	aa24      	add	r2, sp, #144	; 0x90
   1ba14:	095b      	lsrs	r3, r3, #5
   1ba16:	eb02 0183 	add.w	r1, r2, r3, lsl #2
   1ba1a:	8863      	ldrh	r3, [r4, #2]
   1ba1c:	3301      	adds	r3, #1
   1ba1e:	b21b      	sxth	r3, r3
   1ba20:	9300      	str	r3, [sp, #0]
   1ba22:	f851 2c88 	ldr.w	r2, [r1, #-136]
   1ba26:	a914      	add	r1, sp, #80	; 0x50
   1ba28:	2300      	movs	r3, #0
   1ba2a:	4608      	mov	r0, r1
   1ba2c:	f000 fcb0 	bl	1c390 <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
   1ba30:	aa14      	add	r2, sp, #80	; 0x50
   1ba32:	4639      	mov	r1, r7
   1ba34:	4640      	mov	r0, r8
   1ba36:	f000 fdcc 	bl	1c5d2 <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
   1ba3a:	4621      	mov	r1, r4
   1ba3c:	a814      	add	r0, sp, #80	; 0x50
   1ba3e:	f000 fc1c 	bl	1c27a <EccPoint_isZero>
   1ba42:	af02      	add	r7, sp, #8
   1ba44:	4604      	mov	r4, r0
   1ba46:	2208      	movs	r2, #8
   1ba48:	2100      	movs	r1, #0
   1ba4a:	4638      	mov	r0, r7
   1ba4c:	f001 f936 	bl	1ccbc <memset>
   1ba50:	2220      	movs	r2, #32
   1ba52:	2100      	movs	r1, #0
   1ba54:	4630      	mov	r0, r6
   1ba56:	f001 f931 	bl	1ccbc <memset>
   1ba5a:	2220      	movs	r2, #32
   1ba5c:	2100      	movs	r1, #0
   1ba5e:	4628      	mov	r0, r5
   1ba60:	f001 f92c 	bl	1ccbc <memset>
	_set_secure(p2, 0, sizeof(p2));
	_set_secure(tmp, 0, sizeof(tmp));
	_set_secure(_private, 0, sizeof(_private));

	return r;
}
   1ba64:	fab4 f084 	clz	r0, r4
   1ba68:	0940      	lsrs	r0, r0, #5
   1ba6a:	b024      	add	sp, #144	; 0x90
   1ba6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001ba70 <uECC_vli_add>:
{
   1ba70:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   1ba72:	2400      	movs	r4, #0
{
   1ba74:	4606      	mov	r6, r0
	uECC_word_t carry = 0;
   1ba76:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   1ba78:	b265      	sxtb	r5, r4
   1ba7a:	42ab      	cmp	r3, r5
   1ba7c:	dc00      	bgt.n	1ba80 <uECC_vli_add+0x10>
}
   1ba7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
   1ba80:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   1ba84:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
   1ba88:	443d      	add	r5, r7
   1ba8a:	4405      	add	r5, r0
	return (p_true*(cond)) | (p_false*(!cond));
   1ba8c:	42af      	cmp	r7, r5
   1ba8e:	f000 0001 	and.w	r0, r0, #1
   1ba92:	bf18      	it	ne
   1ba94:	2000      	movne	r0, #0
		result[i] = sum;
   1ba96:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   1ba9a:	bf88      	it	hi
   1ba9c:	f040 0001 	orrhi.w	r0, r0, #1
	for (i = 0; i < num_words; ++i) {
   1baa0:	3401      	adds	r4, #1
   1baa2:	e7e9      	b.n	1ba78 <uECC_vli_add+0x8>

0001baa4 <uECC_vli_rshift1>:
	vli += num_words;
   1baa4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
   1baa8:	2300      	movs	r3, #0
	while (vli-- > end) {
   1baaa:	4288      	cmp	r0, r1
   1baac:	d300      	bcc.n	1bab0 <uECC_vli_rshift1+0xc>
}
   1baae:	4770      	bx	lr
		uECC_word_t temp = *vli;
   1bab0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
		*vli = (temp >> 1) | carry;
   1bab4:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   1bab8:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - 1);
   1baba:	07d3      	lsls	r3, r2, #31
   1babc:	e7f5      	b.n	1baaa <uECC_vli_rshift1+0x6>

0001babe <vli_modInv_update>:
	if (!EVEN(uv)) {
   1babe:	6803      	ldr	r3, [r0, #0]
{
   1bac0:	b570      	push	{r4, r5, r6, lr}
	if (!EVEN(uv)) {
   1bac2:	f013 0601 	ands.w	r6, r3, #1
{
   1bac6:	4605      	mov	r5, r0
   1bac8:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   1baca:	d005      	beq.n	1bad8 <vli_modInv_update+0x1a>
		carry = uECC_vli_add(uv, uv, mod, num_words);
   1bacc:	4613      	mov	r3, r2
   1bace:	460a      	mov	r2, r1
   1bad0:	4601      	mov	r1, r0
   1bad2:	f7ff ffcd 	bl	1ba70 <uECC_vli_add>
   1bad6:	4606      	mov	r6, r0
	uECC_vli_rshift1(uv, num_words);
   1bad8:	4621      	mov	r1, r4
   1bada:	4628      	mov	r0, r5
   1badc:	f7ff ffe2 	bl	1baa4 <uECC_vli_rshift1>
	if (carry) {
   1bae0:	b146      	cbz	r6, 1baf4 <vli_modInv_update+0x36>
		uv[num_words - 1] |= HIGH_BIT_SET;
   1bae2:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   1bae6:	3a01      	subs	r2, #1
   1bae8:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   1baec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1baf0:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
}
   1baf4:	bd70      	pop	{r4, r5, r6, pc}

0001baf6 <uECC_vli_mult>:
	for (k = 0; k < num_words; ++k) {
   1baf6:	f04f 0c00 	mov.w	ip, #0
{
   1bafa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uECC_word_t r1 = 0;
   1bafe:	4665      	mov	r5, ip
	uECC_word_t r0 = 0;
   1bb00:	4664      	mov	r4, ip
	for (k = 0; k < num_words; ++k) {
   1bb02:	fa4f f98c 	sxtb.w	r9, ip
   1bb06:	454b      	cmp	r3, r9
   1bb08:	dc16      	bgt.n	1bb38 <uECC_vli_mult+0x42>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   1bb0a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1bb0e:	eb06 0643 	add.w	r6, r6, r3, lsl #1
   1bb12:	9600      	str	r6, [sp, #0]
   1bb14:	f04f 0800 	mov.w	r8, #0
   1bb18:	9f00      	ldr	r7, [sp, #0]
   1bb1a:	fa53 fe88 	uxtab	lr, r3, r8
   1bb1e:	fa4f fe8e 	sxtb.w	lr, lr
   1bb22:	45be      	cmp	lr, r7
   1bb24:	fa5f f688 	uxtb.w	r6, r8
   1bb28:	db26      	blt.n	1bb78 <uECC_vli_mult+0x82>
	result[num_words * 2 - 1] = r0;
   1bb2a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   1bb2e:	f840 4c04 	str.w	r4, [r0, #-4]
}
   1bb32:	b003      	add	sp, #12
   1bb34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (k = 0; k < num_words; ++k) {
   1bb38:	f04f 0e00 	mov.w	lr, #0
   1bb3c:	eb02 0a8c 	add.w	sl, r2, ip, lsl #2
   1bb40:	46f0      	mov	r8, lr
	uECC_dword_t p = (uECC_dword_t)a * b;
   1bb42:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   1bb46:	f85a 6904 	ldr.w	r6, [sl], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   1bb4a:	fba6 6707 	umull	r6, r7, r6, r7
   1bb4e:	1934      	adds	r4, r6, r4
		for (i = 0; i <= k; ++i) {
   1bb50:	f10e 0e01 	add.w	lr, lr, #1
   1bb54:	417d      	adcs	r5, r7
   1bb56:	fa4f f68e 	sxtb.w	r6, lr
   1bb5a:	f04f 0b00 	mov.w	fp, #0
   1bb5e:	bf28      	it	cs
   1bb60:	f04f 0b01 	movcs.w	fp, #1
   1bb64:	454e      	cmp	r6, r9
	*r2 += (r01 < p);
   1bb66:	44d8      	add	r8, fp
		for (i = 0; i <= k; ++i) {
   1bb68:	ddeb      	ble.n	1bb42 <uECC_vli_mult+0x4c>
		result[k] = r0;
   1bb6a:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
	*r1 = r01 >> uECC_WORD_BITS;
   1bb6e:	462c      	mov	r4, r5
   1bb70:	f10c 0c01 	add.w	ip, ip, #1
	*r2 += (r01 < p);
   1bb74:	4645      	mov	r5, r8
   1bb76:	e7c4      	b.n	1bb02 <uECC_vli_mult+0xc>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   1bb78:	3601      	adds	r6, #1
   1bb7a:	fa4f fc86 	sxtb.w	ip, r6
   1bb7e:	ebae 0a0c 	sub.w	sl, lr, ip
   1bb82:	46a9      	mov	r9, r5
   1bb84:	eb01 068c 	add.w	r6, r1, ip, lsl #2
   1bb88:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
   1bb8c:	2500      	movs	r5, #0
   1bb8e:	459c      	cmp	ip, r3
   1bb90:	db05      	blt.n	1bb9e <uECC_vli_mult+0xa8>
		result[k] = r0;
   1bb92:	f840 402e 	str.w	r4, [r0, lr, lsl #2]
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   1bb96:	f108 0801 	add.w	r8, r8, #1
		result[k] = r0;
   1bb9a:	464c      	mov	r4, r9
   1bb9c:	e7bc      	b.n	1bb18 <uECC_vli_mult+0x22>
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   1bb9e:	f856 bb04 	ldr.w	fp, [r6], #4
   1bba2:	f85a 7904 	ldr.w	r7, [sl], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   1bba6:	fbab 7b07 	umull	r7, fp, fp, r7
   1bbaa:	f8cd b004 	str.w	fp, [sp, #4]
   1bbae:	193c      	adds	r4, r7, r4
   1bbb0:	9f01      	ldr	r7, [sp, #4]
   1bbb2:	eb57 0909 	adcs.w	r9, r7, r9
   1bbb6:	f04f 0b00 	mov.w	fp, #0
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   1bbba:	f10c 0c01 	add.w	ip, ip, #1
   1bbbe:	bf28      	it	cs
   1bbc0:	f04f 0b01 	movcs.w	fp, #1
	*r2 += (r01 < p);
   1bbc4:	445d      	add	r5, fp
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   1bbc6:	fa4f fc8c 	sxtb.w	ip, ip
   1bbca:	e7e0      	b.n	1bb8e <uECC_vli_mult+0x98>

0001bbcc <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   1bbcc:	2300      	movs	r3, #0
{
   1bbce:	b510      	push	{r4, lr}
		 vli[i] = 0;
   1bbd0:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
   1bbd2:	b25a      	sxtb	r2, r3
   1bbd4:	4291      	cmp	r1, r2
   1bbd6:	dc00      	bgt.n	1bbda <uECC_vli_clear+0xe>
}
   1bbd8:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
   1bbda:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   1bbde:	3301      	adds	r3, #1
   1bbe0:	e7f7      	b.n	1bbd2 <uECC_vli_clear+0x6>

0001bbe2 <uECC_vli_isZero>:
{
   1bbe2:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   1bbe4:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   1bbe6:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
   1bbe8:	b25c      	sxtb	r4, r3
   1bbea:	42a1      	cmp	r1, r4
   1bbec:	dc03      	bgt.n	1bbf6 <uECC_vli_isZero+0x14>
}
   1bbee:	fab2 f082 	clz	r0, r2
   1bbf2:	0940      	lsrs	r0, r0, #5
   1bbf4:	bd10      	pop	{r4, pc}
		bits |= vli[i];
   1bbf6:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   1bbfa:	3301      	adds	r3, #1
   1bbfc:	4322      	orrs	r2, r4
	for (i = 0; i < num_words; ++i) {
   1bbfe:	e7f3      	b.n	1bbe8 <uECC_vli_isZero+0x6>

0001bc00 <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1bc00:	114a      	asrs	r2, r1, #5
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   1bc02:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1bc04:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   1bc08:	f001 011f 	and.w	r1, r1, #31
   1bc0c:	fa03 f101 	lsl.w	r1, r3, r1
}
   1bc10:	4008      	ands	r0, r1
   1bc12:	4770      	bx	lr

0001bc14 <uECC_vli_numBits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   1bc14:	3901      	subs	r1, #1
   1bc16:	b24b      	sxtb	r3, r1
{
   1bc18:	4602      	mov	r2, r0
   1bc1a:	eb00 0183 	add.w	r1, r0, r3, lsl #2
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   1bc1e:	2b00      	cmp	r3, #0
   1bc20:	da03      	bge.n	1bc2a <uECC_vli_numBits+0x16>
	return (i + 1);
   1bc22:	3301      	adds	r3, #1
   1bc24:	b258      	sxtb	r0, r3
	if (num_digits == 0) {
   1bc26:	b938      	cbnz	r0, 1bc38 <uECC_vli_numBits+0x24>
   1bc28:	4770      	bx	lr
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   1bc2a:	f851 0904 	ldr.w	r0, [r1], #-4
   1bc2e:	2800      	cmp	r0, #0
   1bc30:	d1f7      	bne.n	1bc22 <uECC_vli_numBits+0xe>
   1bc32:	3b01      	subs	r3, #1
   1bc34:	b25b      	sxtb	r3, r3
   1bc36:	e7f2      	b.n	1bc1e <uECC_vli_numBits+0xa>
	digit = vli[num_digits - 1];
   1bc38:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   1bc3c:	3b01      	subs	r3, #1
   1bc3e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
	for (i = 0; digit; ++i) {
   1bc42:	2300      	movs	r3, #0
   1bc44:	b922      	cbnz	r2, 1bc50 <uECC_vli_numBits+0x3c>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   1bc46:	3801      	subs	r0, #1
   1bc48:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   1bc4c:	b200      	sxth	r0, r0
}
   1bc4e:	4770      	bx	lr
		digit >>= 1;
   1bc50:	0852      	lsrs	r2, r2, #1
	for (i = 0; digit; ++i) {
   1bc52:	3301      	adds	r3, #1
   1bc54:	e7f6      	b.n	1bc44 <uECC_vli_numBits+0x30>

0001bc56 <uECC_vli_set>:
{
   1bc56:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   1bc58:	2300      	movs	r3, #0
   1bc5a:	b25c      	sxtb	r4, r3
   1bc5c:	42a2      	cmp	r2, r4
   1bc5e:	dc00      	bgt.n	1bc62 <uECC_vli_set+0xc>
}
   1bc60:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
   1bc62:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   1bc66:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   1bc6a:	3301      	adds	r3, #1
   1bc6c:	e7f5      	b.n	1bc5a <uECC_vli_set+0x4>

0001bc6e <uECC_vli_cmp_unsafe>:
{
   1bc6e:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
   1bc70:	3a01      	subs	r2, #1
   1bc72:	b253      	sxtb	r3, r2
   1bc74:	009a      	lsls	r2, r3, #2
   1bc76:	2b00      	cmp	r3, #0
   1bc78:	da01      	bge.n	1bc7e <uECC_vli_cmp_unsafe+0x10>
	return 0;
   1bc7a:	2000      	movs	r0, #0
}
   1bc7c:	bd30      	pop	{r4, r5, pc}
		if (left[i] > right[i]) {
   1bc7e:	5885      	ldr	r5, [r0, r2]
   1bc80:	588c      	ldr	r4, [r1, r2]
   1bc82:	42a5      	cmp	r5, r4
   1bc84:	d805      	bhi.n	1bc92 <uECC_vli_cmp_unsafe+0x24>
		} else if (left[i] < right[i]) {
   1bc86:	f1a2 0204 	sub.w	r2, r2, #4
   1bc8a:	d304      	bcc.n	1bc96 <uECC_vli_cmp_unsafe+0x28>
	for (i = num_words - 1; i >= 0; --i) {
   1bc8c:	3b01      	subs	r3, #1
   1bc8e:	b25b      	sxtb	r3, r3
   1bc90:	e7f1      	b.n	1bc76 <uECC_vli_cmp_unsafe+0x8>
			return 1;
   1bc92:	2001      	movs	r0, #1
   1bc94:	e7f2      	b.n	1bc7c <uECC_vli_cmp_unsafe+0xe>
			return -1;
   1bc96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1bc9a:	e7ef      	b.n	1bc7c <uECC_vli_cmp_unsafe+0xe>

0001bc9c <uECC_vli_equal>:
	for (i = num_words - 1; i >= 0; --i) {
   1bc9c:	3a01      	subs	r2, #1
   1bc9e:	b253      	sxtb	r3, r2
{
   1bca0:	b570      	push	{r4, r5, r6, lr}
   1bca2:	009a      	lsls	r2, r3, #2
	uECC_word_t diff = 0;
   1bca4:	2400      	movs	r4, #0
	for (i = num_words - 1; i >= 0; --i) {
   1bca6:	2b00      	cmp	r3, #0
   1bca8:	da03      	bge.n	1bcb2 <uECC_vli_equal+0x16>
}
   1bcaa:	1e20      	subs	r0, r4, #0
   1bcac:	bf18      	it	ne
   1bcae:	2001      	movne	r0, #1
   1bcb0:	bd70      	pop	{r4, r5, r6, pc}
		diff |= (left[i] ^ right[i]);
   1bcb2:	5885      	ldr	r5, [r0, r2]
   1bcb4:	588e      	ldr	r6, [r1, r2]
	for (i = num_words - 1; i >= 0; --i) {
   1bcb6:	3b01      	subs	r3, #1
		diff |= (left[i] ^ right[i]);
   1bcb8:	4075      	eors	r5, r6
   1bcba:	432c      	orrs	r4, r5
	for (i = num_words - 1; i >= 0; --i) {
   1bcbc:	b25b      	sxtb	r3, r3
   1bcbe:	3a04      	subs	r2, #4
   1bcc0:	e7f1      	b.n	1bca6 <uECC_vli_equal+0xa>

0001bcc2 <uECC_vli_sub>:
{
   1bcc2:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   1bcc4:	2400      	movs	r4, #0
{
   1bcc6:	4606      	mov	r6, r0
   1bcc8:	469c      	mov	ip, r3
	uECC_word_t borrow = 0;
   1bcca:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   1bccc:	b265      	sxtb	r5, r4
   1bcce:	4565      	cmp	r5, ip
   1bcd0:	db00      	blt.n	1bcd4 <uECC_vli_sub+0x12>
}
   1bcd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
   1bcd4:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   1bcd8:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   1bcdc:	1a3d      	subs	r5, r7, r0
   1bcde:	1aed      	subs	r5, r5, r3
	return (p_true*(cond)) | (p_false*(!cond));
   1bce0:	42af      	cmp	r7, r5
   1bce2:	f000 0001 	and.w	r0, r0, #1
   1bce6:	bf18      	it	ne
   1bce8:	2000      	movne	r0, #0
		result[i] = diff;
   1bcea:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   1bcee:	bf38      	it	cc
   1bcf0:	f040 0001 	orrcc.w	r0, r0, #1
	for (i = 0; i < num_words; ++i) {
   1bcf4:	3401      	adds	r4, #1
   1bcf6:	e7e9      	b.n	1bccc <uECC_vli_sub+0xa>

0001bcf8 <uECC_vli_modAdd>:
{
   1bcf8:	b570      	push	{r4, r5, r6, lr}
   1bcfa:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   1bcfe:	461d      	mov	r5, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   1bd00:	4633      	mov	r3, r6
{
   1bd02:	4604      	mov	r4, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   1bd04:	f7ff feb4 	bl	1ba70 <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   1bd08:	b930      	cbnz	r0, 1bd18 <uECC_vli_modAdd+0x20>
   1bd0a:	4632      	mov	r2, r6
   1bd0c:	4621      	mov	r1, r4
   1bd0e:	4628      	mov	r0, r5
   1bd10:	f7ff ffad 	bl	1bc6e <uECC_vli_cmp_unsafe>
   1bd14:	2801      	cmp	r0, #1
   1bd16:	d007      	beq.n	1bd28 <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
   1bd18:	4633      	mov	r3, r6
   1bd1a:	462a      	mov	r2, r5
   1bd1c:	4621      	mov	r1, r4
   1bd1e:	4620      	mov	r0, r4
}
   1bd20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
   1bd24:	f7ff bfcd 	b.w	1bcc2 <uECC_vli_sub>
}
   1bd28:	bd70      	pop	{r4, r5, r6, pc}

0001bd2a <uECC_vli_modSub>:
{
   1bd2a:	b570      	push	{r4, r5, r6, lr}
   1bd2c:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   1bd30:	461d      	mov	r5, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   1bd32:	4633      	mov	r3, r6
{
   1bd34:	4604      	mov	r4, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   1bd36:	f7ff ffc4 	bl	1bcc2 <uECC_vli_sub>
	if (l_borrow) {
   1bd3a:	b138      	cbz	r0, 1bd4c <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
   1bd3c:	4633      	mov	r3, r6
   1bd3e:	462a      	mov	r2, r5
   1bd40:	4621      	mov	r1, r4
   1bd42:	4620      	mov	r0, r4
}
   1bd44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
   1bd48:	f7ff be92 	b.w	1ba70 <uECC_vli_add>
}
   1bd4c:	bd70      	pop	{r4, r5, r6, pc}

0001bd4e <uECC_vli_mmod>:
{
   1bd4e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bd52:	b0a5      	sub	sp, #148	; 0x94
   1bd54:	461d      	mov	r5, r3
	uECC_word_t *v[2] = {tmp, product};
   1bd56:	ab14      	add	r3, sp, #80	; 0x50
   1bd58:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
   1bd5c:	4680      	mov	r8, r0
			   uECC_vli_numBits(mod, num_words);
   1bd5e:	4629      	mov	r1, r5
   1bd60:	4610      	mov	r0, r2
{
   1bd62:	4617      	mov	r7, r2
			   uECC_vli_numBits(mod, num_words);
   1bd64:	f7ff ff56 	bl	1bc14 <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   1bd68:	ebc0 1485 	rsb	r4, r0, r5, lsl #6
   1bd6c:	b224      	sxth	r4, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   1bd6e:	2c00      	cmp	r4, #0
   1bd70:	4621      	mov	r1, r4
   1bd72:	bfb8      	it	lt
   1bd74:	f104 011f 	addlt.w	r1, r4, #31
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   1bd78:	4263      	negs	r3, r4
   1bd7a:	f003 031f 	and.w	r3, r3, #31
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   1bd7e:	f341 1147 	sbfx	r1, r1, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   1bd82:	f004 061f 	and.w	r6, r4, #31
	uECC_vli_clear(mod_multiple, word_shift);
   1bd86:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   1bd88:	bf58      	it	pl
   1bd8a:	425e      	negpl	r6, r3
	uECC_vli_clear(mod_multiple, word_shift);
   1bd8c:	f7ff ff1e 	bl	1bbcc <uECC_vli_clear>
	if (bit_shift > 0) {
   1bd90:	2e00      	cmp	r6, #0
   1bd92:	b208      	sxth	r0, r1
   1bd94:	dd2b      	ble.n	1bdee <uECC_vli_mmod+0xa0>
   1bd96:	ab04      	add	r3, sp, #16
	uECC_word_t carry = 0;
   1bd98:	2200      	movs	r2, #0
   1bd9a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   1bd9e:	f1c6 0e20 	rsb	lr, r6, #32
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   1bda2:	4613      	mov	r3, r2
   1bda4:	429d      	cmp	r5, r3
   1bda6:	d817      	bhi.n	1bdd8 <uECC_vli_mmod+0x8a>
		for (i = 0; i < num_words * 2; ++i) {
   1bda8:	006b      	lsls	r3, r5, #1
   1bdaa:	9301      	str	r3, [sp, #4]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1bdac:	ab04      	add	r3, sp, #16
   1bdae:	eb03 0985 	add.w	r9, r3, r5, lsl #2
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1bdb2:	1e6f      	subs	r7, r5, #1
   1bdb4:	ab24      	add	r3, sp, #144	; 0x90
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1bdb6:	2601      	movs	r6, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1bdb8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
	for (index = 1; shift >= 0; --shift) {
   1bdbc:	2c00      	cmp	r4, #0
   1bdbe:	da54      	bge.n	1be6a <uECC_vli_mmod+0x11c>
	uECC_vli_set(result, v[index], num_words);
   1bdc0:	ab24      	add	r3, sp, #144	; 0x90
   1bdc2:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   1bdc6:	462a      	mov	r2, r5
   1bdc8:	f856 1c88 	ldr.w	r1, [r6, #-136]
   1bdcc:	4640      	mov	r0, r8
   1bdce:	f7ff ff42 	bl	1bc56 <uECC_vli_set>
}
   1bdd2:	b025      	add	sp, #148	; 0x94
   1bdd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   1bdd8:	f857 c023 	ldr.w	ip, [r7, r3, lsl #2]
   1bddc:	fa0c f106 	lsl.w	r1, ip, r6
   1bde0:	430a      	orrs	r2, r1
   1bde2:	f840 2b04 	str.w	r2, [r0], #4
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   1bde6:	3301      	adds	r3, #1
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   1bde8:	fa2c f20e 	lsr.w	r2, ip, lr
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   1bdec:	e7da      	b.n	1bda4 <uECC_vli_mmod+0x56>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   1bdee:	ab04      	add	r3, sp, #16
   1bdf0:	462a      	mov	r2, r5
   1bdf2:	4639      	mov	r1, r7
   1bdf4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1bdf8:	f7ff ff2d 	bl	1bc56 <uECC_vli_set>
   1bdfc:	e7d4      	b.n	1bda8 <uECC_vli_mmod+0x5a>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   1bdfe:	fa0f fe82 	sxth.w	lr, r2
   1be02:	f85a 3c88 	ldr.w	r3, [sl, #-136]
   1be06:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
   1be0a:	ab24      	add	r3, sp, #144	; 0x90
   1be0c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   1be10:	3001      	adds	r0, #1
   1be12:	f852 3c80 	ldr.w	r3, [r2, #-128]
   1be16:	440b      	add	r3, r1
   1be18:	ebbb 0303 	subs.w	r3, fp, r3
   1be1c:	bf34      	ite	cc
   1be1e:	2201      	movcc	r2, #1
   1be20:	2200      	movcs	r2, #0
			if (diff != v[index][i]) {
   1be22:	459b      	cmp	fp, r3
				borrow = (diff > v[index][i]);
   1be24:	bf18      	it	ne
   1be26:	4611      	movne	r1, r2
			v[1 - index][i] = diff;
   1be28:	f85c 2c88 	ldr.w	r2, [ip, #-136]
   1be2c:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
		for (i = 0; i < num_words * 2; ++i) {
   1be30:	9b01      	ldr	r3, [sp, #4]
   1be32:	b242      	sxtb	r2, r0
   1be34:	429a      	cmp	r2, r3
   1be36:	dbe2      	blt.n	1bdfe <uECC_vli_mmod+0xb0>
		index = !(index ^ borrow);
   1be38:	1a73      	subs	r3, r6, r1
   1be3a:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   1be3c:	4629      	mov	r1, r5
   1be3e:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
   1be40:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   1be42:	f7ff fe2f 	bl	1baa4 <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1be46:	ab24      	add	r3, sp, #144	; 0x90
   1be48:	eb03 0385 	add.w	r3, r3, r5, lsl #2
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1be4c:	4629      	mov	r1, r5
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1be4e:	f853 2c80 	ldr.w	r2, [r3, #-128]
   1be52:	f857 3c80 	ldr.w	r3, [r7, #-128]
   1be56:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
   1be5a:	f847 3c80 	str.w	r3, [r7, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1be5e:	4648      	mov	r0, r9
	for (index = 1; shift >= 0; --shift) {
   1be60:	3c01      	subs	r4, #1
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1be62:	f7ff fe1f 	bl	1baa4 <uECC_vli_rshift1>
	for (index = 1; shift >= 0; --shift) {
   1be66:	b224      	sxth	r4, r4
   1be68:	e7a8      	b.n	1bdbc <uECC_vli_mmod+0x6e>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   1be6a:	ab24      	add	r3, sp, #144	; 0x90
   1be6c:	2000      	movs	r0, #0
			v[1 - index][i] = diff;
   1be6e:	f1c6 0c01 	rsb	ip, r6, #1
		uECC_word_t borrow = 0;
   1be72:	4601      	mov	r1, r0
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   1be74:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
   1be78:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   1be7c:	e7d8      	b.n	1be30 <uECC_vli_mmod+0xe2>

0001be7e <uECC_vli_modMult_fast>:
{
   1be7e:	b530      	push	{r4, r5, lr}
   1be80:	461c      	mov	r4, r3
   1be82:	b091      	sub	sp, #68	; 0x44
   1be84:	4605      	mov	r5, r0
	uECC_vli_mult(product, left, right, curve->num_words);
   1be86:	f993 3000 	ldrsb.w	r3, [r3]
   1be8a:	4668      	mov	r0, sp
   1be8c:	f7ff fe33 	bl	1baf6 <uECC_vli_mult>
	curve->mmod_fast(result, product);
   1be90:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   1be94:	4669      	mov	r1, sp
   1be96:	4628      	mov	r0, r5
   1be98:	4798      	blx	r3
}
   1be9a:	b011      	add	sp, #68	; 0x44
   1be9c:	bd30      	pop	{r4, r5, pc}

0001be9e <uECC_vli_modSquare_fast>:
{
   1be9e:	4613      	mov	r3, r2
	uECC_vli_modMult_fast(result, left, left, curve);
   1bea0:	460a      	mov	r2, r1
   1bea2:	f7ff bfec 	b.w	1be7e <uECC_vli_modMult_fast>

0001bea6 <double_jacobian_default>:
{
   1bea6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
   1beaa:	f993 6000 	ldrsb.w	r6, [r3]
{
   1beae:	b092      	sub	sp, #72	; 0x48
   1beb0:	4604      	mov	r4, r0
   1beb2:	4689      	mov	r9, r1
	if (uECC_vli_isZero(Z1, num_words)) {
   1beb4:	4610      	mov	r0, r2
   1beb6:	4631      	mov	r1, r6
{
   1beb8:	4615      	mov	r5, r2
   1beba:	461f      	mov	r7, r3
	if (uECC_vli_isZero(Z1, num_words)) {
   1bebc:	f7ff fe91 	bl	1bbe2 <uECC_vli_isZero>
   1bec0:	2800      	cmp	r0, #0
   1bec2:	f040 8091 	bne.w	1bfe8 <double_jacobian_default+0x142>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   1bec6:	463a      	mov	r2, r7
   1bec8:	4649      	mov	r1, r9
   1beca:	a802      	add	r0, sp, #8
   1becc:	f7ff ffe7 	bl	1be9e <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   1bed0:	463b      	mov	r3, r7
   1bed2:	aa02      	add	r2, sp, #8
   1bed4:	4621      	mov	r1, r4
   1bed6:	a80a      	add	r0, sp, #40	; 0x28
   1bed8:	f7ff ffd1 	bl	1be7e <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   1bedc:	a902      	add	r1, sp, #8
   1bede:	4608      	mov	r0, r1
   1bee0:	463a      	mov	r2, r7
   1bee2:	f7ff ffdc 	bl	1be9e <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   1bee6:	463b      	mov	r3, r7
   1bee8:	462a      	mov	r2, r5
   1beea:	4649      	mov	r1, r9
   1beec:	4648      	mov	r0, r9
   1beee:	f7ff ffc6 	bl	1be7e <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   1bef2:	f107 0804 	add.w	r8, r7, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   1bef6:	463a      	mov	r2, r7
   1bef8:	4629      	mov	r1, r5
   1befa:	4628      	mov	r0, r5
   1befc:	f7ff ffcf 	bl	1be9e <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   1bf00:	4643      	mov	r3, r8
   1bf02:	462a      	mov	r2, r5
   1bf04:	4621      	mov	r1, r4
   1bf06:	4620      	mov	r0, r4
   1bf08:	9600      	str	r6, [sp, #0]
   1bf0a:	f7ff fef5 	bl	1bcf8 <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   1bf0e:	4643      	mov	r3, r8
   1bf10:	462a      	mov	r2, r5
   1bf12:	4629      	mov	r1, r5
   1bf14:	4628      	mov	r0, r5
   1bf16:	9600      	str	r6, [sp, #0]
   1bf18:	f7ff feee 	bl	1bcf8 <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   1bf1c:	4643      	mov	r3, r8
   1bf1e:	462a      	mov	r2, r5
   1bf20:	4621      	mov	r1, r4
   1bf22:	4628      	mov	r0, r5
   1bf24:	9600      	str	r6, [sp, #0]
   1bf26:	f7ff ff00 	bl	1bd2a <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   1bf2a:	463b      	mov	r3, r7
   1bf2c:	462a      	mov	r2, r5
   1bf2e:	4621      	mov	r1, r4
   1bf30:	4620      	mov	r0, r4
   1bf32:	f7ff ffa4 	bl	1be7e <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   1bf36:	4643      	mov	r3, r8
   1bf38:	4622      	mov	r2, r4
   1bf3a:	4621      	mov	r1, r4
   1bf3c:	4628      	mov	r0, r5
   1bf3e:	9600      	str	r6, [sp, #0]
   1bf40:	f7ff feda 	bl	1bcf8 <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   1bf44:	4643      	mov	r3, r8
   1bf46:	9600      	str	r6, [sp, #0]
   1bf48:	462a      	mov	r2, r5
   1bf4a:	4621      	mov	r1, r4
   1bf4c:	4620      	mov	r0, r4
   1bf4e:	f7ff fed3 	bl	1bcf8 <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1bf52:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
   1bf54:	07db      	lsls	r3, r3, #31
   1bf56:	d54a      	bpl.n	1bfee <double_jacobian_default+0x148>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   1bf58:	4633      	mov	r3, r6
   1bf5a:	4642      	mov	r2, r8
   1bf5c:	4621      	mov	r1, r4
   1bf5e:	4620      	mov	r0, r4
   1bf60:	f7ff fd86 	bl	1ba70 <uECC_vli_add>
		uECC_vli_rshift1(X1, num_words);
   1bf64:	4631      	mov	r1, r6
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   1bf66:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   1bf68:	4620      	mov	r0, r4
   1bf6a:	f7ff fd9b 	bl	1baa4 <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   1bf6e:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   1bf72:	3b01      	subs	r3, #1
   1bf74:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   1bf78:	ea42 72ca 	orr.w	r2, r2, sl, lsl #31
   1bf7c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   1bf80:	463a      	mov	r2, r7
   1bf82:	4621      	mov	r1, r4
   1bf84:	4628      	mov	r0, r5
   1bf86:	f7ff ff8a 	bl	1be9e <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   1bf8a:	4643      	mov	r3, r8
   1bf8c:	aa0a      	add	r2, sp, #40	; 0x28
   1bf8e:	4629      	mov	r1, r5
   1bf90:	4628      	mov	r0, r5
   1bf92:	9600      	str	r6, [sp, #0]
   1bf94:	f7ff fec9 	bl	1bd2a <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   1bf98:	4643      	mov	r3, r8
   1bf9a:	aa0a      	add	r2, sp, #40	; 0x28
   1bf9c:	4629      	mov	r1, r5
   1bf9e:	4628      	mov	r0, r5
   1bfa0:	9600      	str	r6, [sp, #0]
   1bfa2:	f7ff fec2 	bl	1bd2a <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   1bfa6:	a90a      	add	r1, sp, #40	; 0x28
   1bfa8:	4608      	mov	r0, r1
   1bfaa:	4643      	mov	r3, r8
   1bfac:	462a      	mov	r2, r5
   1bfae:	9600      	str	r6, [sp, #0]
   1bfb0:	f7ff febb 	bl	1bd2a <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   1bfb4:	463b      	mov	r3, r7
   1bfb6:	aa0a      	add	r2, sp, #40	; 0x28
   1bfb8:	4621      	mov	r1, r4
   1bfba:	4620      	mov	r0, r4
   1bfbc:	f7ff ff5f 	bl	1be7e <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   1bfc0:	aa02      	add	r2, sp, #8
   1bfc2:	4643      	mov	r3, r8
   1bfc4:	4610      	mov	r0, r2
   1bfc6:	4621      	mov	r1, r4
   1bfc8:	9600      	str	r6, [sp, #0]
   1bfca:	f7ff feae 	bl	1bd2a <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   1bfce:	4632      	mov	r2, r6
   1bfd0:	4629      	mov	r1, r5
   1bfd2:	4620      	mov	r0, r4
   1bfd4:	f7ff fe3f 	bl	1bc56 <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   1bfd8:	4649      	mov	r1, r9
   1bfda:	4628      	mov	r0, r5
   1bfdc:	f7ff fe3b 	bl	1bc56 <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   1bfe0:	a902      	add	r1, sp, #8
   1bfe2:	4648      	mov	r0, r9
   1bfe4:	f7ff fe37 	bl	1bc56 <uECC_vli_set>
}
   1bfe8:	b012      	add	sp, #72	; 0x48
   1bfea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
   1bfee:	4631      	mov	r1, r6
   1bff0:	4620      	mov	r0, r4
   1bff2:	f7ff fd57 	bl	1baa4 <uECC_vli_rshift1>
   1bff6:	e7c3      	b.n	1bf80 <double_jacobian_default+0xda>

0001bff8 <x_side_default>:
{
   1bff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bffc:	4615      	mov	r5, r2
   1bffe:	b08a      	sub	sp, #40	; 0x28
   1c000:	4604      	mov	r4, r0
   1c002:	460e      	mov	r6, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   1c004:	221c      	movs	r2, #28
   1c006:	2100      	movs	r1, #0
   1c008:	a803      	add	r0, sp, #12
   1c00a:	f000 fe57 	bl	1ccbc <memset>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   1c00e:	1d2f      	adds	r7, r5, #4
	wordcount_t num_words = curve->num_words;
   1c010:	f995 8000 	ldrsb.w	r8, [r5]
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   1c014:	2303      	movs	r3, #3
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   1c016:	462a      	mov	r2, r5
   1c018:	4631      	mov	r1, r6
   1c01a:	4620      	mov	r0, r4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   1c01c:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   1c01e:	f7ff ff3e 	bl	1be9e <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   1c022:	463b      	mov	r3, r7
   1c024:	aa02      	add	r2, sp, #8
   1c026:	4621      	mov	r1, r4
   1c028:	4620      	mov	r0, r4
   1c02a:	f8cd 8000 	str.w	r8, [sp]
   1c02e:	f7ff fe7c 	bl	1bd2a <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   1c032:	462b      	mov	r3, r5
   1c034:	4632      	mov	r2, r6
   1c036:	4621      	mov	r1, r4
   1c038:	4620      	mov	r0, r4
   1c03a:	f7ff ff20 	bl	1be7e <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   1c03e:	f8cd 8000 	str.w	r8, [sp]
   1c042:	463b      	mov	r3, r7
   1c044:	f105 0284 	add.w	r2, r5, #132	; 0x84
   1c048:	4621      	mov	r1, r4
   1c04a:	4620      	mov	r0, r4
   1c04c:	f7ff fe54 	bl	1bcf8 <uECC_vli_modAdd>
}
   1c050:	b00a      	add	sp, #40	; 0x28
   1c052:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001c056 <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   1c056:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c05a:	b09a      	sub	sp, #104	; 0x68
   1c05c:	4616      	mov	r6, r2
   1c05e:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   1c062:	4644      	mov	r4, r8
{
   1c064:	4699      	mov	r9, r3
	wordcount_t num_words = curve->num_words;
   1c066:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1c06a:	9500      	str	r5, [sp, #0]
{
   1c06c:	4607      	mov	r7, r0
   1c06e:	468a      	mov	sl, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1c070:	4623      	mov	r3, r4
   1c072:	4602      	mov	r2, r0
   1c074:	4631      	mov	r1, r6
   1c076:	a802      	add	r0, sp, #8
   1c078:	f7ff fe57 	bl	1bd2a <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   1c07c:	a902      	add	r1, sp, #8
   1c07e:	4642      	mov	r2, r8
   1c080:	4608      	mov	r0, r1
   1c082:	f7ff ff0c 	bl	1be9e <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   1c086:	4643      	mov	r3, r8
   1c088:	aa02      	add	r2, sp, #8
   1c08a:	4639      	mov	r1, r7
   1c08c:	4638      	mov	r0, r7
   1c08e:	f7ff fef6 	bl	1be7e <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   1c092:	4643      	mov	r3, r8
   1c094:	aa02      	add	r2, sp, #8
   1c096:	4631      	mov	r1, r6
   1c098:	4630      	mov	r0, r6
   1c09a:	f7ff fef0 	bl	1be7e <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   1c09e:	4623      	mov	r3, r4
   1c0a0:	4652      	mov	r2, sl
   1c0a2:	4649      	mov	r1, r9
   1c0a4:	a802      	add	r0, sp, #8
   1c0a6:	9500      	str	r5, [sp, #0]
   1c0a8:	f7ff fe26 	bl	1bcf8 <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   1c0ac:	4623      	mov	r3, r4
   1c0ae:	4652      	mov	r2, sl
   1c0b0:	4649      	mov	r1, r9
   1c0b2:	4648      	mov	r0, r9
   1c0b4:	9500      	str	r5, [sp, #0]
   1c0b6:	f7ff fe38 	bl	1bd2a <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   1c0ba:	4623      	mov	r3, r4
   1c0bc:	463a      	mov	r2, r7
   1c0be:	4631      	mov	r1, r6
   1c0c0:	a80a      	add	r0, sp, #40	; 0x28
   1c0c2:	9500      	str	r5, [sp, #0]
   1c0c4:	f7ff fe31 	bl	1bd2a <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   1c0c8:	4643      	mov	r3, r8
   1c0ca:	aa0a      	add	r2, sp, #40	; 0x28
   1c0cc:	4651      	mov	r1, sl
   1c0ce:	4650      	mov	r0, sl
   1c0d0:	f7ff fed5 	bl	1be7e <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   1c0d4:	4623      	mov	r3, r4
   1c0d6:	4632      	mov	r2, r6
   1c0d8:	4639      	mov	r1, r7
   1c0da:	a80a      	add	r0, sp, #40	; 0x28
   1c0dc:	9500      	str	r5, [sp, #0]
   1c0de:	f7ff fe0b 	bl	1bcf8 <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   1c0e2:	4642      	mov	r2, r8
   1c0e4:	4649      	mov	r1, r9
   1c0e6:	4630      	mov	r0, r6
   1c0e8:	f7ff fed9 	bl	1be9e <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   1c0ec:	4623      	mov	r3, r4
   1c0ee:	aa0a      	add	r2, sp, #40	; 0x28
   1c0f0:	4631      	mov	r1, r6
   1c0f2:	4630      	mov	r0, r6
   1c0f4:	9500      	str	r5, [sp, #0]
   1c0f6:	f7ff fe18 	bl	1bd2a <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   1c0fa:	4623      	mov	r3, r4
   1c0fc:	4632      	mov	r2, r6
   1c0fe:	4639      	mov	r1, r7
   1c100:	a812      	add	r0, sp, #72	; 0x48
   1c102:	9500      	str	r5, [sp, #0]
   1c104:	f7ff fe11 	bl	1bd2a <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   1c108:	4643      	mov	r3, r8
   1c10a:	aa12      	add	r2, sp, #72	; 0x48
   1c10c:	4649      	mov	r1, r9
   1c10e:	4648      	mov	r0, r9
   1c110:	f7ff feb5 	bl	1be7e <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   1c114:	4623      	mov	r3, r4
   1c116:	4652      	mov	r2, sl
   1c118:	4649      	mov	r1, r9
   1c11a:	4648      	mov	r0, r9
   1c11c:	9500      	str	r5, [sp, #0]
   1c11e:	f7ff fe04 	bl	1bd2a <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   1c122:	4642      	mov	r2, r8
   1c124:	a902      	add	r1, sp, #8
   1c126:	a812      	add	r0, sp, #72	; 0x48
   1c128:	f7ff feb9 	bl	1be9e <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   1c12c:	a912      	add	r1, sp, #72	; 0x48
   1c12e:	4623      	mov	r3, r4
   1c130:	aa0a      	add	r2, sp, #40	; 0x28
   1c132:	4608      	mov	r0, r1
   1c134:	9500      	str	r5, [sp, #0]
   1c136:	f7ff fdf8 	bl	1bd2a <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   1c13a:	4623      	mov	r3, r4
   1c13c:	463a      	mov	r2, r7
   1c13e:	a912      	add	r1, sp, #72	; 0x48
   1c140:	a80a      	add	r0, sp, #40	; 0x28
   1c142:	9500      	str	r5, [sp, #0]
   1c144:	f7ff fdf1 	bl	1bd2a <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   1c148:	a90a      	add	r1, sp, #40	; 0x28
   1c14a:	4643      	mov	r3, r8
   1c14c:	aa02      	add	r2, sp, #8
   1c14e:	4608      	mov	r0, r1
   1c150:	f7ff fe95 	bl	1be7e <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   1c154:	4623      	mov	r3, r4
   1c156:	4652      	mov	r2, sl
   1c158:	a90a      	add	r1, sp, #40	; 0x28
   1c15a:	4650      	mov	r0, sl
   1c15c:	9500      	str	r5, [sp, #0]
   1c15e:	f7ff fde4 	bl	1bd2a <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   1c162:	462a      	mov	r2, r5
   1c164:	a912      	add	r1, sp, #72	; 0x48
   1c166:	4638      	mov	r0, r7
   1c168:	f7ff fd75 	bl	1bc56 <uECC_vli_set>
}
   1c16c:	b01a      	add	sp, #104	; 0x68
   1c16e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001c172 <uECC_vli_modInv>:
{
   1c172:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c174:	460f      	mov	r7, r1
   1c176:	b0a1      	sub	sp, #132	; 0x84
   1c178:	4606      	mov	r6, r0
	if (uECC_vli_isZero(input, num_words)) {
   1c17a:	4619      	mov	r1, r3
   1c17c:	4638      	mov	r0, r7
{
   1c17e:	4615      	mov	r5, r2
   1c180:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   1c182:	f7ff fd2e 	bl	1bbe2 <uECC_vli_isZero>
   1c186:	b128      	cbz	r0, 1c194 <uECC_vli_modInv+0x22>
		uECC_vli_clear(result, num_words);
   1c188:	4630      	mov	r0, r6
}
   1c18a:	b021      	add	sp, #132	; 0x84
   1c18c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		uECC_vli_clear(result, num_words);
   1c190:	f7ff bd1c 	b.w	1bbcc <uECC_vli_clear>
	uECC_vli_set(a, input, num_words);
   1c194:	4622      	mov	r2, r4
   1c196:	4639      	mov	r1, r7
   1c198:	4668      	mov	r0, sp
   1c19a:	f7ff fd5c 	bl	1bc56 <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   1c19e:	4629      	mov	r1, r5
   1c1a0:	a808      	add	r0, sp, #32
   1c1a2:	f7ff fd58 	bl	1bc56 <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   1c1a6:	a810      	add	r0, sp, #64	; 0x40
   1c1a8:	4621      	mov	r1, r4
   1c1aa:	f7ff fd0f 	bl	1bbcc <uECC_vli_clear>
	u[0] = 1;
   1c1ae:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
   1c1b0:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
   1c1b2:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
   1c1b4:	f7ff fd0a 	bl	1bbcc <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   1c1b8:	4622      	mov	r2, r4
   1c1ba:	a908      	add	r1, sp, #32
   1c1bc:	4668      	mov	r0, sp
   1c1be:	f7ff fd56 	bl	1bc6e <uECC_vli_cmp_unsafe>
   1c1c2:	b930      	cbnz	r0, 1c1d2 <uECC_vli_modInv+0x60>
  	uECC_vli_set(result, u, num_words);
   1c1c4:	4622      	mov	r2, r4
   1c1c6:	a910      	add	r1, sp, #64	; 0x40
   1c1c8:	4630      	mov	r0, r6
   1c1ca:	f7ff fd44 	bl	1bc56 <uECC_vli_set>
}
   1c1ce:	b021      	add	sp, #132	; 0x84
   1c1d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (EVEN(a)) {
   1c1d2:	9b00      	ldr	r3, [sp, #0]
   1c1d4:	07da      	lsls	r2, r3, #31
   1c1d6:	d409      	bmi.n	1c1ec <uECC_vli_modInv+0x7a>
			uECC_vli_rshift1(a, num_words);
   1c1d8:	4621      	mov	r1, r4
   1c1da:	4668      	mov	r0, sp
   1c1dc:	f7ff fc62 	bl	1baa4 <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   1c1e0:	4622      	mov	r2, r4
   1c1e2:	4629      	mov	r1, r5
   1c1e4:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
   1c1e6:	f7ff fc6a 	bl	1babe <vli_modInv_update>
   1c1ea:	e7e5      	b.n	1c1b8 <uECC_vli_modInv+0x46>
    		} else if (EVEN(b)) {
   1c1ec:	9b08      	ldr	r3, [sp, #32]
   1c1ee:	07db      	lsls	r3, r3, #31
   1c1f0:	d407      	bmi.n	1c202 <uECC_vli_modInv+0x90>
			uECC_vli_rshift1(b, num_words);
   1c1f2:	4621      	mov	r1, r4
   1c1f4:	a808      	add	r0, sp, #32
   1c1f6:	f7ff fc55 	bl	1baa4 <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
   1c1fa:	4622      	mov	r2, r4
   1c1fc:	4629      	mov	r1, r5
   1c1fe:	a818      	add	r0, sp, #96	; 0x60
   1c200:	e7f1      	b.n	1c1e6 <uECC_vli_modInv+0x74>
		} else if (cmpResult > 0) {
   1c202:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
   1c204:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
   1c206:	dd1c      	ble.n	1c242 <uECC_vli_modInv+0xd0>
			uECC_vli_sub(a, a, b, num_words);
   1c208:	aa08      	add	r2, sp, #32
   1c20a:	4669      	mov	r1, sp
   1c20c:	4668      	mov	r0, sp
   1c20e:	f7ff fd58 	bl	1bcc2 <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   1c212:	4621      	mov	r1, r4
   1c214:	4668      	mov	r0, sp
   1c216:	f7ff fc45 	bl	1baa4 <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   1c21a:	4622      	mov	r2, r4
   1c21c:	a918      	add	r1, sp, #96	; 0x60
   1c21e:	a810      	add	r0, sp, #64	; 0x40
   1c220:	f7ff fd25 	bl	1bc6e <uECC_vli_cmp_unsafe>
   1c224:	2800      	cmp	r0, #0
   1c226:	da05      	bge.n	1c234 <uECC_vli_modInv+0xc2>
        			uECC_vli_add(u, u, mod, num_words);
   1c228:	a910      	add	r1, sp, #64	; 0x40
   1c22a:	4623      	mov	r3, r4
   1c22c:	462a      	mov	r2, r5
   1c22e:	4608      	mov	r0, r1
   1c230:	f7ff fc1e 	bl	1ba70 <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
   1c234:	a910      	add	r1, sp, #64	; 0x40
   1c236:	4623      	mov	r3, r4
   1c238:	aa18      	add	r2, sp, #96	; 0x60
   1c23a:	4608      	mov	r0, r1
   1c23c:	f7ff fd41 	bl	1bcc2 <uECC_vli_sub>
   1c240:	e7ce      	b.n	1c1e0 <uECC_vli_modInv+0x6e>
      			uECC_vli_sub(b, b, a, num_words);
   1c242:	466a      	mov	r2, sp
   1c244:	a808      	add	r0, sp, #32
   1c246:	f7ff fd3c 	bl	1bcc2 <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   1c24a:	4621      	mov	r1, r4
   1c24c:	a808      	add	r0, sp, #32
   1c24e:	f7ff fc29 	bl	1baa4 <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   1c252:	4622      	mov	r2, r4
   1c254:	a910      	add	r1, sp, #64	; 0x40
   1c256:	a818      	add	r0, sp, #96	; 0x60
   1c258:	f7ff fd09 	bl	1bc6e <uECC_vli_cmp_unsafe>
   1c25c:	2800      	cmp	r0, #0
   1c25e:	da05      	bge.n	1c26c <uECC_vli_modInv+0xfa>
        			uECC_vli_add(v, v, mod, num_words);
   1c260:	a918      	add	r1, sp, #96	; 0x60
   1c262:	4623      	mov	r3, r4
   1c264:	462a      	mov	r2, r5
   1c266:	4608      	mov	r0, r1
   1c268:	f7ff fc02 	bl	1ba70 <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
   1c26c:	a918      	add	r1, sp, #96	; 0x60
   1c26e:	4623      	mov	r3, r4
   1c270:	aa10      	add	r2, sp, #64	; 0x40
   1c272:	4608      	mov	r0, r1
   1c274:	f7ff fd25 	bl	1bcc2 <uECC_vli_sub>
   1c278:	e7bf      	b.n	1c1fa <uECC_vli_modInv+0x88>

0001c27a <EccPoint_isZero>:
	return uECC_vli_isZero(point, curve->num_words * 2);
   1c27a:	7809      	ldrb	r1, [r1, #0]
   1c27c:	0049      	lsls	r1, r1, #1
   1c27e:	b249      	sxtb	r1, r1
   1c280:	f7ff bcaf 	b.w	1bbe2 <uECC_vli_isZero>

0001c284 <apply_z>:
{
   1c284:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c286:	4615      	mov	r5, r2
   1c288:	b089      	sub	sp, #36	; 0x24
   1c28a:	461c      	mov	r4, r3
   1c28c:	4607      	mov	r7, r0
   1c28e:	460e      	mov	r6, r1
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   1c290:	461a      	mov	r2, r3
   1c292:	4629      	mov	r1, r5
   1c294:	4668      	mov	r0, sp
   1c296:	f7ff fe02 	bl	1be9e <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   1c29a:	4623      	mov	r3, r4
   1c29c:	466a      	mov	r2, sp
   1c29e:	4639      	mov	r1, r7
   1c2a0:	4638      	mov	r0, r7
   1c2a2:	f7ff fdec 	bl	1be7e <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   1c2a6:	4623      	mov	r3, r4
   1c2a8:	462a      	mov	r2, r5
   1c2aa:	4669      	mov	r1, sp
   1c2ac:	4668      	mov	r0, sp
   1c2ae:	f7ff fde6 	bl	1be7e <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   1c2b2:	4623      	mov	r3, r4
   1c2b4:	466a      	mov	r2, sp
   1c2b6:	4631      	mov	r1, r6
   1c2b8:	4630      	mov	r0, r6
   1c2ba:	f7ff fde0 	bl	1be7e <uECC_vli_modMult_fast>
}
   1c2be:	b009      	add	sp, #36	; 0x24
   1c2c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001c2c2 <XYcZ_add>:
{
   1c2c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c2c6:	b08a      	sub	sp, #40	; 0x28
   1c2c8:	4614      	mov	r4, r2
   1c2ca:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
	wordcount_t num_words = curve->num_words;
   1c2ce:	4655      	mov	r5, sl
{
   1c2d0:	461f      	mov	r7, r3
	wordcount_t num_words = curve->num_words;
   1c2d2:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1c2d6:	9600      	str	r6, [sp, #0]
{
   1c2d8:	4680      	mov	r8, r0
   1c2da:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1c2dc:	462b      	mov	r3, r5
   1c2de:	4602      	mov	r2, r0
   1c2e0:	4621      	mov	r1, r4
   1c2e2:	a802      	add	r0, sp, #8
   1c2e4:	f7ff fd21 	bl	1bd2a <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   1c2e8:	a902      	add	r1, sp, #8
   1c2ea:	4652      	mov	r2, sl
   1c2ec:	4608      	mov	r0, r1
   1c2ee:	f7ff fdd6 	bl	1be9e <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   1c2f2:	4653      	mov	r3, sl
   1c2f4:	aa02      	add	r2, sp, #8
   1c2f6:	4641      	mov	r1, r8
   1c2f8:	4640      	mov	r0, r8
   1c2fa:	f7ff fdc0 	bl	1be7e <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   1c2fe:	4653      	mov	r3, sl
   1c300:	aa02      	add	r2, sp, #8
   1c302:	4621      	mov	r1, r4
   1c304:	4620      	mov	r0, r4
   1c306:	f7ff fdba 	bl	1be7e <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   1c30a:	462b      	mov	r3, r5
   1c30c:	464a      	mov	r2, r9
   1c30e:	4639      	mov	r1, r7
   1c310:	4638      	mov	r0, r7
   1c312:	9600      	str	r6, [sp, #0]
   1c314:	f7ff fd09 	bl	1bd2a <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   1c318:	4652      	mov	r2, sl
   1c31a:	4639      	mov	r1, r7
   1c31c:	a802      	add	r0, sp, #8
   1c31e:	f7ff fdbe 	bl	1be9e <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   1c322:	a902      	add	r1, sp, #8
   1c324:	462b      	mov	r3, r5
   1c326:	4642      	mov	r2, r8
   1c328:	4608      	mov	r0, r1
   1c32a:	9600      	str	r6, [sp, #0]
   1c32c:	f7ff fcfd 	bl	1bd2a <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   1c330:	a902      	add	r1, sp, #8
   1c332:	462b      	mov	r3, r5
   1c334:	4622      	mov	r2, r4
   1c336:	4608      	mov	r0, r1
   1c338:	9600      	str	r6, [sp, #0]
   1c33a:	f7ff fcf6 	bl	1bd2a <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   1c33e:	462b      	mov	r3, r5
   1c340:	4642      	mov	r2, r8
   1c342:	4621      	mov	r1, r4
   1c344:	4620      	mov	r0, r4
   1c346:	9600      	str	r6, [sp, #0]
   1c348:	f7ff fcef 	bl	1bd2a <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   1c34c:	4653      	mov	r3, sl
   1c34e:	4622      	mov	r2, r4
   1c350:	4649      	mov	r1, r9
   1c352:	4648      	mov	r0, r9
   1c354:	f7ff fd93 	bl	1be7e <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   1c358:	462b      	mov	r3, r5
   1c35a:	aa02      	add	r2, sp, #8
   1c35c:	4641      	mov	r1, r8
   1c35e:	4620      	mov	r0, r4
   1c360:	9600      	str	r6, [sp, #0]
   1c362:	f7ff fce2 	bl	1bd2a <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   1c366:	4653      	mov	r3, sl
   1c368:	4622      	mov	r2, r4
   1c36a:	4639      	mov	r1, r7
   1c36c:	4638      	mov	r0, r7
   1c36e:	f7ff fd86 	bl	1be7e <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   1c372:	462b      	mov	r3, r5
   1c374:	464a      	mov	r2, r9
   1c376:	4639      	mov	r1, r7
   1c378:	4638      	mov	r0, r7
   1c37a:	9600      	str	r6, [sp, #0]
   1c37c:	f7ff fcd5 	bl	1bd2a <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   1c380:	4632      	mov	r2, r6
   1c382:	a902      	add	r1, sp, #8
   1c384:	4620      	mov	r0, r4
   1c386:	f7ff fc66 	bl	1bc56 <uECC_vli_set>
}
   1c38a:	b00a      	add	sp, #40	; 0x28
   1c38c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001c390 <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   1c390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c394:	b0b1      	sub	sp, #196	; 0xc4
   1c396:	e9cd 0103 	strd	r0, r1, [sp, #12]
   1c39a:	9c3b      	ldr	r4, [sp, #236]	; 0xec
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   1c39c:	f994 7000 	ldrsb.w	r7, [r4]

	uECC_vli_set(Rx[1], point, num_words);
   1c3a0:	a818      	add	r0, sp, #96	; 0x60
{
   1c3a2:	4692      	mov	sl, r2
	uECC_vli_set(Rx[1], point, num_words);
   1c3a4:	463a      	mov	r2, r7
{
   1c3a6:	461d      	mov	r5, r3
	uECC_vli_set(Rx[1], point, num_words);
   1c3a8:	f7ff fc55 	bl	1bc56 <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   1c3ac:	00bb      	lsls	r3, r7, #2
   1c3ae:	9305      	str	r3, [sp, #20]
   1c3b0:	9b04      	ldr	r3, [sp, #16]
   1c3b2:	eb03 0387 	add.w	r3, r3, r7, lsl #2
   1c3b6:	4619      	mov	r1, r3
   1c3b8:	a828      	add	r0, sp, #160	; 0xa0
   1c3ba:	9302      	str	r3, [sp, #8]
   1c3bc:	f7ff fc4b 	bl	1bc56 <uECC_vli_set>
	wordcount_t num_words = curve->num_words;
   1c3c0:	f994 6000 	ldrsb.w	r6, [r4]
	if (initial_Z) {
   1c3c4:	2d00      	cmp	r5, #0
   1c3c6:	f000 8086 	beq.w	1c4d6 <EccPoint_mult+0x146>
		uECC_vli_set(z, initial_Z, num_words);
   1c3ca:	4632      	mov	r2, r6
   1c3cc:	4629      	mov	r1, r5
   1c3ce:	a808      	add	r0, sp, #32
   1c3d0:	f7ff fc41 	bl	1bc56 <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   1c3d4:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   1c3d8:	4632      	mov	r2, r6
   1c3da:	a918      	add	r1, sp, #96	; 0x60
   1c3dc:	4640      	mov	r0, r8
	uECC_vli_set(Y2, Y1, num_words);
   1c3de:	f10d 0980 	add.w	r9, sp, #128	; 0x80
	uECC_vli_set(X2, X1, num_words);
   1c3e2:	f7ff fc38 	bl	1bc56 <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   1c3e6:	a928      	add	r1, sp, #160	; 0xa0
   1c3e8:	4648      	mov	r0, r9
   1c3ea:	f7ff fc34 	bl	1bc56 <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   1c3ee:	4623      	mov	r3, r4
   1c3f0:	aa08      	add	r2, sp, #32
   1c3f2:	a818      	add	r0, sp, #96	; 0x60
   1c3f4:	f7ff ff46 	bl	1c284 <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   1c3f8:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   1c3fc:	4623      	mov	r3, r4
   1c3fe:	aa08      	add	r2, sp, #32
   1c400:	a928      	add	r1, sp, #160	; 0xa0
   1c402:	a818      	add	r0, sp, #96	; 0x60
   1c404:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
   1c406:	4623      	mov	r3, r4
   1c408:	aa08      	add	r2, sp, #32
   1c40a:	4649      	mov	r1, r9
   1c40c:	4640      	mov	r0, r8
   1c40e:	f7ff ff39 	bl	1c284 <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
   1c412:	f9bd 50e8 	ldrsh.w	r5, [sp, #232]	; 0xe8
   1c416:	3d02      	subs	r5, #2
   1c418:	b22d      	sxth	r5, r5
   1c41a:	2d00      	cmp	r5, #0
   1c41c:	dc62      	bgt.n	1c4e4 <EccPoint_mult+0x154>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1c41e:	f8da 5000 	ldr.w	r5, [sl]
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
	}

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1c422:	9400      	str	r4, [sp, #0]
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1c424:	f005 0601 	and.w	r6, r5, #1
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1c428:	ab10      	add	r3, sp, #64	; 0x40
   1c42a:	eb03 1846 	add.w	r8, r3, r6, lsl #5
   1c42e:	43ed      	mvns	r5, r5
   1c430:	ab20      	add	r3, sp, #128	; 0x80
   1c432:	eb03 1646 	add.w	r6, r3, r6, lsl #5
   1c436:	f005 0501 	and.w	r5, r5, #1
   1c43a:	ab10      	add	r3, sp, #64	; 0x40
   1c43c:	eb03 1945 	add.w	r9, r3, r5, lsl #5
   1c440:	ab20      	add	r3, sp, #128	; 0x80
   1c442:	eb03 1545 	add.w	r5, r3, r5, lsl #5
   1c446:	462b      	mov	r3, r5
   1c448:	464a      	mov	r2, r9
   1c44a:	4631      	mov	r1, r6
   1c44c:	4640      	mov	r0, r8

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   1c44e:	f104 0a04 	add.w	sl, r4, #4
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1c452:	f7ff fe00 	bl	1c056 <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   1c456:	4653      	mov	r3, sl
   1c458:	aa10      	add	r2, sp, #64	; 0x40
   1c45a:	a918      	add	r1, sp, #96	; 0x60
   1c45c:	a808      	add	r0, sp, #32
   1c45e:	9700      	str	r7, [sp, #0]
   1c460:	f7ff fc63 	bl	1bd2a <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   1c464:	a908      	add	r1, sp, #32
   1c466:	4623      	mov	r3, r4
   1c468:	4632      	mov	r2, r6
   1c46a:	4608      	mov	r0, r1
   1c46c:	f7ff fd07 	bl	1be7e <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   1c470:	a908      	add	r1, sp, #32
   1c472:	9a04      	ldr	r2, [sp, #16]
   1c474:	4623      	mov	r3, r4
   1c476:	4608      	mov	r0, r1
   1c478:	f7ff fd01 	bl	1be7e <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   1c47c:	a908      	add	r1, sp, #32
   1c47e:	463b      	mov	r3, r7
   1c480:	4652      	mov	r2, sl
   1c482:	4608      	mov	r0, r1
   1c484:	f7ff fe75 	bl	1c172 <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   1c488:	a908      	add	r1, sp, #32
   1c48a:	9a02      	ldr	r2, [sp, #8]
   1c48c:	4623      	mov	r3, r4
   1c48e:	4608      	mov	r0, r1
   1c490:	f7ff fcf5 	bl	1be7e <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   1c494:	a908      	add	r1, sp, #32
   1c496:	4623      	mov	r3, r4
   1c498:	4642      	mov	r2, r8
   1c49a:	4608      	mov	r0, r1
   1c49c:	f7ff fcef 	bl	1be7e <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   1c4a0:	4633      	mov	r3, r6
   1c4a2:	4642      	mov	r2, r8
   1c4a4:	4629      	mov	r1, r5
   1c4a6:	4648      	mov	r0, r9
   1c4a8:	9400      	str	r4, [sp, #0]
   1c4aa:	f7ff ff0a 	bl	1c2c2 <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   1c4ae:	4623      	mov	r3, r4
   1c4b0:	aa08      	add	r2, sp, #32
   1c4b2:	a920      	add	r1, sp, #128	; 0x80
   1c4b4:	a810      	add	r0, sp, #64	; 0x40
   1c4b6:	f7ff fee5 	bl	1c284 <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   1c4ba:	9803      	ldr	r0, [sp, #12]
   1c4bc:	463a      	mov	r2, r7
   1c4be:	a910      	add	r1, sp, #64	; 0x40
   1c4c0:	f7ff fbc9 	bl	1bc56 <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   1c4c4:	9803      	ldr	r0, [sp, #12]
   1c4c6:	9b05      	ldr	r3, [sp, #20]
   1c4c8:	a920      	add	r1, sp, #128	; 0x80
   1c4ca:	4418      	add	r0, r3
   1c4cc:	f7ff fbc3 	bl	1bc56 <uECC_vli_set>
}
   1c4d0:	b031      	add	sp, #196	; 0xc4
   1c4d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
   1c4d6:	4631      	mov	r1, r6
   1c4d8:	a808      	add	r0, sp, #32
   1c4da:	f7ff fb77 	bl	1bbcc <uECC_vli_clear>
		z[0] = 1;
   1c4de:	2301      	movs	r3, #1
   1c4e0:	9308      	str	r3, [sp, #32]
   1c4e2:	e777      	b.n	1c3d4 <EccPoint_mult+0x44>
		nb = !uECC_vli_testBit(scalar, i);
   1c4e4:	4629      	mov	r1, r5
   1c4e6:	4650      	mov	r0, sl
   1c4e8:	f7ff fb8a 	bl	1bc00 <uECC_vli_testBit>
   1c4ec:	fab0 f680 	clz	r6, r0
   1c4f0:	0976      	lsrs	r6, r6, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1c4f2:	f1c6 0101 	rsb	r1, r6, #1
   1c4f6:	eb08 1b46 	add.w	fp, r8, r6, lsl #5
   1c4fa:	eb09 1646 	add.w	r6, r9, r6, lsl #5
   1c4fe:	eb08 1041 	add.w	r0, r8, r1, lsl #5
   1c502:	4633      	mov	r3, r6
   1c504:	eb09 1141 	add.w	r1, r9, r1, lsl #5
   1c508:	465a      	mov	r2, fp
   1c50a:	9400      	str	r4, [sp, #0]
   1c50c:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1c510:	f7ff fda1 	bl	1c056 <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   1c514:	9907      	ldr	r1, [sp, #28]
   1c516:	9806      	ldr	r0, [sp, #24]
   1c518:	9400      	str	r4, [sp, #0]
   1c51a:	460b      	mov	r3, r1
   1c51c:	4602      	mov	r2, r0
   1c51e:	4631      	mov	r1, r6
   1c520:	4658      	mov	r0, fp
   1c522:	f7ff fece 	bl	1c2c2 <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   1c526:	3d01      	subs	r5, #1
   1c528:	e776      	b.n	1c418 <EccPoint_mult+0x88>

0001c52a <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   1c52a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   1c52e:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
   1c532:	f119 081f 	adds.w	r8, r9, #31
{
   1c536:	461d      	mov	r5, r3
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   1c538:	bf48      	it	mi
   1c53a:	f109 083e 	addmi.w	r8, r9, #62	; 0x3e
{
   1c53e:	460e      	mov	r6, r1
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   1c540:	f348 1847 	sbfx	r8, r8, #5, #8

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   1c544:	3524      	adds	r5, #36	; 0x24
   1c546:	4601      	mov	r1, r0
{
   1c548:	4617      	mov	r7, r2
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   1c54a:	4643      	mov	r3, r8
   1c54c:	462a      	mov	r2, r5
   1c54e:	4630      	mov	r0, r6
   1c550:	f7ff fa8e 	bl	1ba70 <uECC_vli_add>
   1c554:	4604      	mov	r4, r0
   1c556:	b990      	cbnz	r0, 1c57e <regularize_k+0x54>
   1c558:	ebb9 1f48 	cmp.w	r9, r8, lsl #5
   1c55c:	da06      	bge.n	1c56c <regularize_k+0x42>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   1c55e:	4649      	mov	r1, r9
   1c560:	4630      	mov	r0, r6
   1c562:	f7ff fb4d 	bl	1bc00 <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   1c566:	1e04      	subs	r4, r0, #0
   1c568:	bf18      	it	ne
   1c56a:	2401      	movne	r4, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   1c56c:	4643      	mov	r3, r8
   1c56e:	462a      	mov	r2, r5
   1c570:	4631      	mov	r1, r6
   1c572:	4638      	mov	r0, r7
   1c574:	f7ff fa7c 	bl	1ba70 <uECC_vli_add>

	return carry;
}
   1c578:	4620      	mov	r0, r4
   1c57a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   1c57e:	2401      	movs	r4, #1
   1c580:	e7f4      	b.n	1c56c <regularize_k+0x42>

0001c582 <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
   1c582:	b530      	push	{r4, r5, lr}
   1c584:	4614      	mov	r4, r2
   1c586:	b095      	sub	sp, #84	; 0x54
   1c588:	4605      	mov	r5, r0

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
   1c58a:	aa0c      	add	r2, sp, #48	; 0x30
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   1c58c:	4623      	mov	r3, r4
{
   1c58e:	4608      	mov	r0, r1
	uECC_word_t *p2[2] = {tmp1, tmp2};
   1c590:	a904      	add	r1, sp, #16
   1c592:	9102      	str	r1, [sp, #8]
   1c594:	9203      	str	r2, [sp, #12]
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   1c596:	f7ff ffc8 	bl	1c52a <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
   1c59a:	fab0 f380 	clz	r3, r0
   1c59e:	095b      	lsrs	r3, r3, #5
   1c5a0:	aa14      	add	r2, sp, #80	; 0x50
   1c5a2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   1c5a6:	8863      	ldrh	r3, [r4, #2]
   1c5a8:	9401      	str	r4, [sp, #4]
   1c5aa:	3301      	adds	r3, #1
   1c5ac:	b21b      	sxth	r3, r3
   1c5ae:	9300      	str	r3, [sp, #0]
   1c5b0:	f852 2c48 	ldr.w	r2, [r2, #-72]
   1c5b4:	2300      	movs	r3, #0
   1c5b6:	f104 0144 	add.w	r1, r4, #68	; 0x44
   1c5ba:	4628      	mov	r0, r5
   1c5bc:	f7ff fee8 	bl	1c390 <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
   1c5c0:	4621      	mov	r1, r4
   1c5c2:	4628      	mov	r0, r5
   1c5c4:	f7ff fe59 	bl	1c27a <EccPoint_isZero>
		return 0;
	}
	return 1;
}
   1c5c8:	fab0 f080 	clz	r0, r0
   1c5cc:	0940      	lsrs	r0, r0, #5
   1c5ce:	b015      	add	sp, #84	; 0x54
   1c5d0:	bd30      	pop	{r4, r5, pc}

0001c5d2 <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   1c5d2:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   1c5d4:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   1c5d6:	1e4f      	subs	r7, r1, #1
   1c5d8:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
   1c5da:	428c      	cmp	r4, r1
   1c5dc:	f105 0501 	add.w	r5, r5, #1
   1c5e0:	db00      	blt.n	1c5e4 <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
   1c5e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   1c5e4:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   1c5e6:	f023 0603 	bic.w	r6, r3, #3
   1c5ea:	f003 0303 	and.w	r3, r3, #3
   1c5ee:	5996      	ldr	r6, [r2, r6]
   1c5f0:	00db      	lsls	r3, r3, #3
   1c5f2:	fa26 f303 	lsr.w	r3, r6, r3
   1c5f6:	5503      	strb	r3, [r0, r4]
	for (i = 0; i < num_bytes; ++i) {
   1c5f8:	e7ee      	b.n	1c5d8 <uECC_vli_nativeToBytes+0x6>

0001c5fa <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   1c5fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c5fc:	460e      	mov	r6, r1
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   1c5fe:	1cd1      	adds	r1, r2, #3
   1c600:	bf48      	it	mi
   1c602:	1d91      	addmi	r1, r2, #6
   1c604:	f341 0187 	sbfx	r1, r1, #2, #8
{
   1c608:	4614      	mov	r4, r2
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   1c60a:	f7ff fadf 	bl	1bbcc <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   1c60e:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   1c610:	1e67      	subs	r7, r4, #1
   1c612:	b26a      	sxtb	r2, r5
	for (i = 0; i < num_bytes; ++i) {
   1c614:	42a2      	cmp	r2, r4
   1c616:	f105 0501 	add.w	r5, r5, #1
   1c61a:	db00      	blt.n	1c61e <uECC_vli_bytesToNative+0x24>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
   1c61c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   1c61e:	1abb      	subs	r3, r7, r2
		native[b / uECC_WORD_SIZE] |=
   1c620:	f023 0103 	bic.w	r1, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   1c624:	5cb2      	ldrb	r2, [r6, r2]
   1c626:	f003 0303 	and.w	r3, r3, #3
   1c62a:	00db      	lsls	r3, r3, #3
   1c62c:	fa02 f303 	lsl.w	r3, r2, r3
		native[b / uECC_WORD_SIZE] |=
   1c630:	5842      	ldr	r2, [r0, r1]
   1c632:	431a      	orrs	r2, r3
   1c634:	5042      	str	r2, [r0, r1]
	for (i = 0; i < num_bytes; ++i) {
   1c636:	e7ec      	b.n	1c612 <uECC_vli_bytesToNative+0x18>

0001c638 <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
   1c638:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c63a:	b091      	sub	sp, #68	; 0x44
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   1c63c:	f991 6000 	ldrsb.w	r6, [r1]
{
   1c640:	4605      	mov	r5, r0
   1c642:	460c      	mov	r4, r1

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
   1c644:	f7ff fe19 	bl	1c27a <EccPoint_isZero>
   1c648:	bb28      	cbnz	r0, 1c696 <uECC_valid_point+0x5e>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   1c64a:	1d27      	adds	r7, r4, #4
   1c64c:	4632      	mov	r2, r6
   1c64e:	4629      	mov	r1, r5
   1c650:	4638      	mov	r0, r7
   1c652:	f7ff fb0c 	bl	1bc6e <uECC_vli_cmp_unsafe>
   1c656:	2801      	cmp	r0, #1
   1c658:	d120      	bne.n	1c69c <uECC_valid_point+0x64>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
   1c65a:	4632      	mov	r2, r6
   1c65c:	eb05 0186 	add.w	r1, r5, r6, lsl #2
   1c660:	4638      	mov	r0, r7
   1c662:	f7ff fb04 	bl	1bc6e <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   1c666:	2801      	cmp	r0, #1
   1c668:	d118      	bne.n	1c69c <uECC_valid_point+0x64>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
   1c66a:	4622      	mov	r2, r4
   1c66c:	4668      	mov	r0, sp
   1c66e:	f7ff fc16 	bl	1be9e <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
   1c672:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   1c676:	4622      	mov	r2, r4
   1c678:	4629      	mov	r1, r5
   1c67a:	a808      	add	r0, sp, #32
   1c67c:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
   1c67e:	4632      	mov	r2, r6
   1c680:	a908      	add	r1, sp, #32
   1c682:	4668      	mov	r0, sp
   1c684:	f7ff fb0a 	bl	1bc9c <uECC_vli_equal>
		return -3;
   1c688:	2800      	cmp	r0, #0
   1c68a:	bf0c      	ite	eq
   1c68c:	2000      	moveq	r0, #0
   1c68e:	f06f 0002 	mvnne.w	r0, #2

	return 0;
}
   1c692:	b011      	add	sp, #68	; 0x44
   1c694:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
   1c696:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c69a:	e7fa      	b.n	1c692 <uECC_valid_point+0x5a>
		return -2;
   1c69c:	f06f 0001 	mvn.w	r0, #1
   1c6a0:	e7f7      	b.n	1c692 <uECC_valid_point+0x5a>

0001c6a2 <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
   1c6a2:	b570      	push	{r4, r5, r6, lr}
   1c6a4:	460c      	mov	r4, r1
   1c6a6:	b090      	sub	sp, #64	; 0x40

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
	uECC_vli_bytesToNative(
	_public + curve->num_words,
   1c6a8:	4626      	mov	r6, r4
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   1c6aa:	f991 2001 	ldrsb.w	r2, [r1, #1]
{
   1c6ae:	4605      	mov	r5, r0
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   1c6b0:	4601      	mov	r1, r0
   1c6b2:	4668      	mov	r0, sp
   1c6b4:	f7ff ffa1 	bl	1c5fa <uECC_vli_bytesToNative>
	public_key + curve->num_bytes,
   1c6b8:	f994 2001 	ldrsb.w	r2, [r4, #1]
	_public + curve->num_words,
   1c6bc:	f916 0b44 	ldrsb.w	r0, [r6], #68
	uECC_vli_bytesToNative(
   1c6c0:	18a9      	adds	r1, r5, r2
   1c6c2:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
   1c6c6:	f7ff ff98 	bl	1c5fa <uECC_vli_bytesToNative>
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
   1c6ca:	2210      	movs	r2, #16
   1c6cc:	4631      	mov	r1, r6
   1c6ce:	4668      	mov	r0, sp
   1c6d0:	f7ff facd 	bl	1bc6e <uECC_vli_cmp_unsafe>
   1c6d4:	b128      	cbz	r0, 1c6e2 <uECC_valid_public_key+0x40>
		return -4;
	}

	return uECC_valid_point(_public, curve);
   1c6d6:	4621      	mov	r1, r4
   1c6d8:	4668      	mov	r0, sp
   1c6da:	f7ff ffad 	bl	1c638 <uECC_valid_point>
}
   1c6de:	b010      	add	sp, #64	; 0x40
   1c6e0:	bd70      	pop	{r4, r5, r6, pc}
		return -4;
   1c6e2:	f06f 0003 	mvn.w	r0, #3
   1c6e6:	e7fa      	b.n	1c6de <uECC_valid_public_key+0x3c>

0001c6e8 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   1c6e8:	78cb      	ldrb	r3, [r1, #3]
   1c6ea:	7802      	ldrb	r2, [r0, #0]
   1c6ec:	4053      	eors	r3, r2
   1c6ee:	7003      	strb	r3, [r0, #0]
   1c6f0:	884b      	ldrh	r3, [r1, #2]
   1c6f2:	7842      	ldrb	r2, [r0, #1]
   1c6f4:	4053      	eors	r3, r2
   1c6f6:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   1c6f8:	680a      	ldr	r2, [r1, #0]
   1c6fa:	7883      	ldrb	r3, [r0, #2]
   1c6fc:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1c700:	7083      	strb	r3, [r0, #2]
   1c702:	680a      	ldr	r2, [r1, #0]
   1c704:	78c3      	ldrb	r3, [r0, #3]
   1c706:	4053      	eors	r3, r2
   1c708:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   1c70a:	79cb      	ldrb	r3, [r1, #7]
   1c70c:	7902      	ldrb	r2, [r0, #4]
   1c70e:	4053      	eors	r3, r2
   1c710:	7103      	strb	r3, [r0, #4]
   1c712:	88cb      	ldrh	r3, [r1, #6]
   1c714:	7942      	ldrb	r2, [r0, #5]
   1c716:	4053      	eors	r3, r2
   1c718:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   1c71a:	684a      	ldr	r2, [r1, #4]
   1c71c:	7983      	ldrb	r3, [r0, #6]
   1c71e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1c722:	7183      	strb	r3, [r0, #6]
   1c724:	684a      	ldr	r2, [r1, #4]
   1c726:	79c3      	ldrb	r3, [r0, #7]
   1c728:	4053      	eors	r3, r2
   1c72a:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   1c72c:	7acb      	ldrb	r3, [r1, #11]
   1c72e:	7a02      	ldrb	r2, [r0, #8]
   1c730:	4053      	eors	r3, r2
   1c732:	7203      	strb	r3, [r0, #8]
   1c734:	7a42      	ldrb	r2, [r0, #9]
   1c736:	894b      	ldrh	r3, [r1, #10]
   1c738:	4053      	eors	r3, r2
   1c73a:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   1c73c:	688a      	ldr	r2, [r1, #8]
   1c73e:	7a83      	ldrb	r3, [r0, #10]
   1c740:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1c744:	7283      	strb	r3, [r0, #10]
   1c746:	688a      	ldr	r2, [r1, #8]
   1c748:	7ac3      	ldrb	r3, [r0, #11]
   1c74a:	4053      	eors	r3, r2
   1c74c:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   1c74e:	7bcb      	ldrb	r3, [r1, #15]
   1c750:	7b02      	ldrb	r2, [r0, #12]
   1c752:	4053      	eors	r3, r2
   1c754:	7303      	strb	r3, [r0, #12]
   1c756:	89cb      	ldrh	r3, [r1, #14]
   1c758:	7b42      	ldrb	r2, [r0, #13]
   1c75a:	4053      	eors	r3, r2
   1c75c:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   1c75e:	68ca      	ldr	r2, [r1, #12]
   1c760:	7b83      	ldrb	r3, [r0, #14]
   1c762:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1c766:	7383      	strb	r3, [r0, #14]
   1c768:	68ca      	ldr	r2, [r1, #12]
   1c76a:	7bc3      	ldrb	r3, [r0, #15]
   1c76c:	4053      	eors	r3, r2
   1c76e:	73c3      	strb	r3, [r0, #15]
}
   1c770:	4770      	bx	lr

0001c772 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   1c772:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1c774:	7802      	ldrb	r2, [r0, #0]
   1c776:	f88d 2000 	strb.w	r2, [sp]
   1c77a:	7942      	ldrb	r2, [r0, #5]
   1c77c:	f88d 2001 	strb.w	r2, [sp, #1]
   1c780:	7a82      	ldrb	r2, [r0, #10]
   1c782:	f88d 2002 	strb.w	r2, [sp, #2]
   1c786:	7bc2      	ldrb	r2, [r0, #15]
   1c788:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   1c78c:	7902      	ldrb	r2, [r0, #4]
   1c78e:	f88d 2004 	strb.w	r2, [sp, #4]
   1c792:	7a42      	ldrb	r2, [r0, #9]
   1c794:	f88d 2005 	strb.w	r2, [sp, #5]
   1c798:	7b82      	ldrb	r2, [r0, #14]
   1c79a:	f88d 2006 	strb.w	r2, [sp, #6]
   1c79e:	78c2      	ldrb	r2, [r0, #3]
   1c7a0:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   1c7a4:	7a02      	ldrb	r2, [r0, #8]
   1c7a6:	f88d 2008 	strb.w	r2, [sp, #8]
   1c7aa:	7b42      	ldrb	r2, [r0, #13]
   1c7ac:	f88d 2009 	strb.w	r2, [sp, #9]
   1c7b0:	7882      	ldrb	r2, [r0, #2]
   1c7b2:	f88d 200a 	strb.w	r2, [sp, #10]
   1c7b6:	79c2      	ldrb	r2, [r0, #7]
   1c7b8:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1c7bc:	7b02      	ldrb	r2, [r0, #12]
   1c7be:	f88d 200c 	strb.w	r2, [sp, #12]
   1c7c2:	7842      	ldrb	r2, [r0, #1]
   1c7c4:	7ac3      	ldrb	r3, [r0, #11]
   1c7c6:	f88d 200d 	strb.w	r2, [sp, #13]
   1c7ca:	7982      	ldrb	r2, [r0, #6]
   1c7cc:	f88d 200e 	strb.w	r2, [sp, #14]
   1c7d0:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1c7d4:	2310      	movs	r3, #16
   1c7d6:	466a      	mov	r2, sp
   1c7d8:	4619      	mov	r1, r3
   1c7da:	f7ff f885 	bl	1b8e8 <_copy>
}
   1c7de:	b005      	add	sp, #20
   1c7e0:	f85d fb04 	ldr.w	pc, [sp], #4

0001c7e4 <mult_row_column>:
{
   1c7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c7e6:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1c7e8:	7808      	ldrb	r0, [r1, #0]
{
   1c7ea:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1c7ec:	f7ff f88b 	bl	1b906 <_double_byte>
   1c7f0:	4605      	mov	r5, r0
   1c7f2:	7860      	ldrb	r0, [r4, #1]
   1c7f4:	f7ff f887 	bl	1b906 <_double_byte>
   1c7f8:	78a2      	ldrb	r2, [r4, #2]
   1c7fa:	7863      	ldrb	r3, [r4, #1]
   1c7fc:	4053      	eors	r3, r2
   1c7fe:	78e2      	ldrb	r2, [r4, #3]
   1c800:	4053      	eors	r3, r2
   1c802:	405d      	eors	r5, r3
   1c804:	4045      	eors	r5, r0
   1c806:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   1c808:	7860      	ldrb	r0, [r4, #1]
   1c80a:	7827      	ldrb	r7, [r4, #0]
   1c80c:	f7ff f87b 	bl	1b906 <_double_byte>
   1c810:	4605      	mov	r5, r0
   1c812:	78a0      	ldrb	r0, [r4, #2]
   1c814:	f7ff f877 	bl	1b906 <_double_byte>
   1c818:	78a3      	ldrb	r3, [r4, #2]
   1c81a:	405f      	eors	r7, r3
   1c81c:	78e3      	ldrb	r3, [r4, #3]
   1c81e:	405f      	eors	r7, r3
   1c820:	407d      	eors	r5, r7
   1c822:	4045      	eors	r5, r0
   1c824:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   1c826:	78a0      	ldrb	r0, [r4, #2]
   1c828:	7865      	ldrb	r5, [r4, #1]
   1c82a:	7827      	ldrb	r7, [r4, #0]
   1c82c:	f7ff f86b 	bl	1b906 <_double_byte>
   1c830:	406f      	eors	r7, r5
   1c832:	4605      	mov	r5, r0
   1c834:	78e0      	ldrb	r0, [r4, #3]
   1c836:	f7ff f866 	bl	1b906 <_double_byte>
   1c83a:	78e3      	ldrb	r3, [r4, #3]
   1c83c:	405f      	eors	r7, r3
   1c83e:	407d      	eors	r5, r7
   1c840:	4045      	eors	r5, r0
   1c842:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   1c844:	7820      	ldrb	r0, [r4, #0]
   1c846:	f7ff f85e 	bl	1b906 <_double_byte>
   1c84a:	7863      	ldrb	r3, [r4, #1]
   1c84c:	7825      	ldrb	r5, [r4, #0]
   1c84e:	405d      	eors	r5, r3
   1c850:	78a3      	ldrb	r3, [r4, #2]
   1c852:	405d      	eors	r5, r3
   1c854:	4045      	eors	r5, r0
   1c856:	78e0      	ldrb	r0, [r4, #3]
   1c858:	f7ff f855 	bl	1b906 <_double_byte>
   1c85c:	b2ed      	uxtb	r5, r5
   1c85e:	4045      	eors	r5, r0
   1c860:	70f5      	strb	r5, [r6, #3]
}
   1c862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001c864 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   1c864:	b570      	push	{r4, r5, r6, lr}
   1c866:	4614      	mov	r4, r2
   1c868:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   1c86a:	4605      	mov	r5, r0
   1c86c:	2800      	cmp	r0, #0
   1c86e:	d049      	beq.n	1c904 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   1c870:	2900      	cmp	r1, #0
   1c872:	d049      	beq.n	1c908 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   1c874:	2a00      	cmp	r2, #0
   1c876:	d049      	beq.n	1c90c <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   1c878:	2310      	movs	r3, #16
   1c87a:	460a      	mov	r2, r1
   1c87c:	4668      	mov	r0, sp
   1c87e:	4619      	mov	r1, r3
   1c880:	f7ff f832 	bl	1b8e8 <_copy>
	add_round_key(state, s->words);
   1c884:	4621      	mov	r1, r4
   1c886:	4668      	mov	r0, sp
   1c888:	f7ff ff2e 	bl	1c6e8 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   1c88c:	3410      	adds	r4, #16
   1c88e:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   1c892:	4668      	mov	r0, sp
   1c894:	f7f5 f8e2 	bl	11a5c <sub_bytes>
		shift_rows(state);
   1c898:	4668      	mov	r0, sp
   1c89a:	f7ff ff6a 	bl	1c772 <shift_rows>
	mult_row_column(t, s);
   1c89e:	4669      	mov	r1, sp
   1c8a0:	a804      	add	r0, sp, #16
   1c8a2:	f7ff ff9f 	bl	1c7e4 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   1c8a6:	a901      	add	r1, sp, #4
   1c8a8:	a805      	add	r0, sp, #20
   1c8aa:	f7ff ff9b 	bl	1c7e4 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   1c8ae:	a902      	add	r1, sp, #8
   1c8b0:	a806      	add	r0, sp, #24
   1c8b2:	f7ff ff97 	bl	1c7e4 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   1c8b6:	a903      	add	r1, sp, #12
   1c8b8:	a807      	add	r0, sp, #28
   1c8ba:	f7ff ff93 	bl	1c7e4 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1c8be:	2310      	movs	r3, #16
   1c8c0:	4619      	mov	r1, r3
   1c8c2:	eb0d 0203 	add.w	r2, sp, r3
   1c8c6:	4668      	mov	r0, sp
   1c8c8:	f7ff f80e 	bl	1b8e8 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   1c8cc:	4621      	mov	r1, r4
   1c8ce:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   1c8d0:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   1c8d2:	f7ff ff09 	bl	1c6e8 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   1c8d6:	42a6      	cmp	r6, r4
   1c8d8:	d1db      	bne.n	1c892 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   1c8da:	f7f5 f8bf 	bl	11a5c <sub_bytes>
	shift_rows(state);
   1c8de:	4668      	mov	r0, sp
   1c8e0:	f7ff ff47 	bl	1c772 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   1c8e4:	4631      	mov	r1, r6
   1c8e6:	4668      	mov	r0, sp
   1c8e8:	f7ff fefe 	bl	1c6e8 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   1c8ec:	2310      	movs	r3, #16
   1c8ee:	4619      	mov	r1, r3
   1c8f0:	466a      	mov	r2, sp
   1c8f2:	4628      	mov	r0, r5
   1c8f4:	f7fe fff8 	bl	1b8e8 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   1c8f8:	4668      	mov	r0, sp
   1c8fa:	2210      	movs	r2, #16
   1c8fc:	2100      	movs	r1, #0
   1c8fe:	f7ff f800 	bl	1b902 <_set>

	return TC_CRYPTO_SUCCESS;
   1c902:	2001      	movs	r0, #1
}
   1c904:	b008      	add	sp, #32
   1c906:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1c908:	4608      	mov	r0, r1
   1c90a:	e7fb      	b.n	1c904 <tc_aes_encrypt+0xa0>
   1c90c:	4610      	mov	r0, r2
   1c90e:	e7f9      	b.n	1c904 <tc_aes_encrypt+0xa0>

0001c910 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   1c910:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1c912:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   1c914:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1c916:	f912 3b10 	ldrsb.w	r3, [r2], #16
   1c91a:	2b00      	cmp	r3, #0
   1c91c:	bfb4      	ite	lt
   1c91e:	2387      	movlt	r3, #135	; 0x87
   1c920:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   1c922:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1c926:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   1c92a:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   1c92c:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   1c930:	d002      	beq.n	1c938 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   1c932:	7813      	ldrb	r3, [r2, #0]
   1c934:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   1c936:	e7f4      	b.n	1c922 <gf_double+0x12>
	}
}
   1c938:	bd10      	pop	{r4, pc}

0001c93a <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   1c93a:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   1c93c:	b120      	cbz	r0, 1c948 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   1c93e:	2258      	movs	r2, #88	; 0x58
   1c940:	2100      	movs	r1, #0
   1c942:	f7fe ffde 	bl	1b902 <_set>
   1c946:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1c948:	bd08      	pop	{r3, pc}

0001c94a <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   1c94a:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1c94c:	4604      	mov	r4, r0
   1c94e:	b188      	cbz	r0, 1c974 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1c950:	2210      	movs	r2, #16
   1c952:	2100      	movs	r1, #0
   1c954:	f7fe ffd5 	bl	1b902 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   1c958:	2210      	movs	r2, #16
   1c95a:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1c95e:	2100      	movs	r1, #0
   1c960:	f7fe ffcf 	bl	1b902 <_set>
	s->leftover_offset = 0;
   1c964:	2300      	movs	r3, #0
   1c966:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   1c968:	2200      	movs	r2, #0
   1c96a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1c96e:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   1c972:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1c974:	bd10      	pop	{r4, pc}

0001c976 <tc_cmac_setup>:
{
   1c976:	b570      	push	{r4, r5, r6, lr}
   1c978:	460d      	mov	r5, r1
   1c97a:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   1c97c:	4604      	mov	r4, r0
   1c97e:	b310      	cbz	r0, 1c9c6 <tc_cmac_setup+0x50>
   1c980:	b311      	cbz	r1, 1c9c8 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   1c982:	2258      	movs	r2, #88	; 0x58
   1c984:	2100      	movs	r1, #0
   1c986:	f7fe ffbc 	bl	1b902 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   1c98a:	4629      	mov	r1, r5
	s->sched = sched;
   1c98c:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   1c98e:	4630      	mov	r0, r6
   1c990:	f7f5 f870 	bl	11a74 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1c994:	2210      	movs	r2, #16
   1c996:	2100      	movs	r1, #0
   1c998:	4620      	mov	r0, r4
   1c99a:	f7fe ffb2 	bl	1b902 <_set>
	gf_double (s->K1, s->iv);
   1c99e:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   1c9a2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1c9a4:	4621      	mov	r1, r4
   1c9a6:	4620      	mov	r0, r4
   1c9a8:	f7ff ff5c 	bl	1c864 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   1c9ac:	4621      	mov	r1, r4
   1c9ae:	4628      	mov	r0, r5
   1c9b0:	f7ff ffae 	bl	1c910 <gf_double>
	gf_double (s->K2, s->K1);
   1c9b4:	4629      	mov	r1, r5
   1c9b6:	f104 0020 	add.w	r0, r4, #32
   1c9ba:	f7ff ffa9 	bl	1c910 <gf_double>
	tc_cmac_init(s);
   1c9be:	4620      	mov	r0, r4
   1c9c0:	f7ff ffc3 	bl	1c94a <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   1c9c4:	2001      	movs	r0, #1
}
   1c9c6:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1c9c8:	4608      	mov	r0, r1
   1c9ca:	e7fc      	b.n	1c9c6 <tc_cmac_setup+0x50>

0001c9cc <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   1c9cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c9d0:	460d      	mov	r5, r1
   1c9d2:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1c9d4:	4604      	mov	r4, r0
   1c9d6:	2800      	cmp	r0, #0
   1c9d8:	d061      	beq.n	1ca9e <tc_cmac_update+0xd2>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   1c9da:	b912      	cbnz	r2, 1c9e2 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   1c9dc:	2001      	movs	r0, #1
}
   1c9de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   1c9e2:	2900      	cmp	r1, #0
   1c9e4:	d05b      	beq.n	1ca9e <tc_cmac_update+0xd2>
	if (s->countdown == 0) {
   1c9e6:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   1c9ea:	ea53 0102 	orrs.w	r1, r3, r2
   1c9ee:	d056      	beq.n	1ca9e <tc_cmac_update+0xd2>
	s->countdown--;
   1c9f0:	3b01      	subs	r3, #1
	if (s->leftover_offset > 0) {
   1c9f2:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   1c9f6:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
   1c9fa:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   1c9fe:	f1b8 0f00 	cmp.w	r8, #0
   1ca02:	d02a      	beq.n	1ca5a <tc_cmac_update+0x8e>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   1ca04:	f1c8 0710 	rsb	r7, r8, #16
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1ca08:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   1ca0c:	42be      	cmp	r6, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1ca0e:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   1ca10:	d208      	bcs.n	1ca24 <tc_cmac_update+0x58>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1ca12:	462a      	mov	r2, r5
   1ca14:	4633      	mov	r3, r6
   1ca16:	4631      	mov	r1, r6
   1ca18:	f7fe ff66 	bl	1b8e8 <_copy>
			s->leftover_offset += data_length;
   1ca1c:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1ca1e:	4432      	add	r2, r6
   1ca20:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   1ca22:	e7db      	b.n	1c9dc <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   1ca24:	463b      	mov	r3, r7
   1ca26:	462a      	mov	r2, r5
   1ca28:	4639      	mov	r1, r7
   1ca2a:	f7fe ff5d 	bl	1b8e8 <_copy>
		data_length -= remaining_space;
   1ca2e:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   1ca30:	2300      	movs	r3, #0
   1ca32:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   1ca34:	4446      	add	r6, r8
		data += remaining_space;
   1ca36:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1ca38:	1e63      	subs	r3, r4, #1
   1ca3a:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   1ca3e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1ca42:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1ca46:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   1ca48:	ea82 0200 	eor.w	r2, r2, r0
   1ca4c:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1ca4e:	d1f6      	bne.n	1ca3e <tc_cmac_update+0x72>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1ca50:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1ca52:	4621      	mov	r1, r4
   1ca54:	4620      	mov	r0, r4
   1ca56:	f7ff ff05 	bl	1c864 <tc_aes_encrypt>
   1ca5a:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   1ca5e:	2e10      	cmp	r6, #16
   1ca60:	d80a      	bhi.n	1ca78 <tc_cmac_update+0xac>
	if (data_length > 0) {
   1ca62:	2e00      	cmp	r6, #0
   1ca64:	d0ba      	beq.n	1c9dc <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   1ca66:	4633      	mov	r3, r6
   1ca68:	462a      	mov	r2, r5
   1ca6a:	4631      	mov	r1, r6
   1ca6c:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1ca70:	f7fe ff3a 	bl	1b8e8 <_copy>
		s->leftover_offset = data_length;
   1ca74:	6466      	str	r6, [r4, #68]	; 0x44
   1ca76:	e7b1      	b.n	1c9dc <tc_cmac_update+0x10>
   1ca78:	1e63      	subs	r3, r4, #1
   1ca7a:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   1ca7c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1ca80:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1ca84:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   1ca86:	ea82 0200 	eor.w	r2, r2, r0
   1ca8a:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1ca8c:	d1f6      	bne.n	1ca7c <tc_cmac_update+0xb0>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1ca8e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1ca90:	4621      	mov	r1, r4
   1ca92:	4620      	mov	r0, r4
   1ca94:	f7ff fee6 	bl	1c864 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   1ca98:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   1ca9a:	3e10      	subs	r6, #16
   1ca9c:	e7df      	b.n	1ca5e <tc_cmac_update+0x92>
		return TC_CRYPTO_FAIL;
   1ca9e:	2000      	movs	r0, #0
   1caa0:	e79d      	b.n	1c9de <tc_cmac_update+0x12>

0001caa2 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   1caa2:	b570      	push	{r4, r5, r6, lr}
   1caa4:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1caa6:	4605      	mov	r5, r0
   1caa8:	b1e8      	cbz	r0, 1cae6 <tc_cmac_final+0x44>
   1caaa:	b369      	cbz	r1, 1cb08 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   1caac:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   1caae:	2a10      	cmp	r2, #16
   1cab0:	d11a      	bne.n	1cae8 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   1cab2:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1cab4:	1e63      	subs	r3, r4, #1
   1cab6:	3901      	subs	r1, #1
   1cab8:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1cabc:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1cac0:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   1cac4:	4072      	eors	r2, r6
   1cac6:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1caca:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1cacc:	ea82 0206 	eor.w	r2, r2, r6
   1cad0:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1cad2:	d1f3      	bne.n	1cabc <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   1cad4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1cad6:	4621      	mov	r1, r4
   1cad8:	4628      	mov	r0, r5
   1cada:	f7ff fec3 	bl	1c864 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   1cade:	4620      	mov	r0, r4
   1cae0:	f7ff ff2b 	bl	1c93a <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   1cae4:	2001      	movs	r0, #1
}
   1cae6:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   1cae8:	f102 0030 	add.w	r0, r2, #48	; 0x30
   1caec:	2100      	movs	r1, #0
   1caee:	f1c2 0210 	rsb	r2, r2, #16
   1caf2:	4420      	add	r0, r4
   1caf4:	f7fe ff05 	bl	1b902 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1caf8:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1cafa:	4423      	add	r3, r4
   1cafc:	2280      	movs	r2, #128	; 0x80
   1cafe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   1cb02:	f104 0120 	add.w	r1, r4, #32
   1cb06:	e7d5      	b.n	1cab4 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   1cb08:	4608      	mov	r0, r1
   1cb0a:	e7ec      	b.n	1cae6 <tc_cmac_final+0x44>

0001cb0c <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1cb0c:	2100      	movs	r1, #0
   1cb0e:	2001      	movs	r0, #1
   1cb10:	f000 b800 	b.w	1cb14 <z_arm_fatal_error>

0001cb14 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   1cb14:	f003 ba8c 	b.w	20030 <z_fatal_error>

0001cb18 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1cb18:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   1cb1a:	6800      	ldr	r0, [r0, #0]
   1cb1c:	f003 ba88 	b.w	20030 <z_fatal_error>

0001cb20 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1cb20:	b508      	push	{r3, lr}
	handler();
   1cb22:	f7f5 f90d 	bl	11d40 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   1cb26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1cb2a:	f7f5 ba5f 	b.w	11fec <z_arm_exc_exit>

0001cb2e <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   1cb2e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1cb32:	4684      	mov	ip, r0
   1cb34:	4688      	mov	r8, r1
	register const char *s = nptr;
   1cb36:	4604      	mov	r4, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   1cb38:	4621      	mov	r1, r4
   1cb3a:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   1cb3e:	2b20      	cmp	r3, #32
   1cb40:	d0fa      	beq.n	1cb38 <strtol+0xa>
   1cb42:	f1a3 0009 	sub.w	r0, r3, #9
   1cb46:	2804      	cmp	r0, #4
   1cb48:	d9f6      	bls.n	1cb38 <strtol+0xa>
	} while (isspace(c));
	if (c == '-') {
   1cb4a:	2b2d      	cmp	r3, #45	; 0x2d
   1cb4c:	d12d      	bne.n	1cbaa <strtol+0x7c>
		neg = 1;
		c = *s++;
   1cb4e:	784b      	ldrb	r3, [r1, #1]
   1cb50:	1c8c      	adds	r4, r1, #2
		neg = 1;
   1cb52:	2101      	movs	r1, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   1cb54:	2a00      	cmp	r2, #0
   1cb56:	d05a      	beq.n	1cc0e <strtol+0xe0>
   1cb58:	2a10      	cmp	r2, #16
   1cb5a:	d109      	bne.n	1cb70 <strtol+0x42>
   1cb5c:	2b30      	cmp	r3, #48	; 0x30
   1cb5e:	d107      	bne.n	1cb70 <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   1cb60:	7823      	ldrb	r3, [r4, #0]
   1cb62:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1cb66:	2b58      	cmp	r3, #88	; 0x58
   1cb68:	d14c      	bne.n	1cc04 <strtol+0xd6>
		c = s[1];
   1cb6a:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
   1cb6c:	2210      	movs	r2, #16
		s += 2;
   1cb6e:	3402      	adds	r4, #2
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   1cb70:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
   1cb74:	3f01      	subs	r7, #1
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   1cb76:	2600      	movs	r6, #0
	cutlim = cutoff % (unsigned long)base;
   1cb78:	fbb7 fef2 	udiv	lr, r7, r2
	for (acc = 0, any = 0;; c = *s++) {
   1cb7c:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   1cb7e:	fb02 791e 	mls	r9, r2, lr, r7
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1cb82:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   1cb86:	2d09      	cmp	r5, #9
   1cb88:	d815      	bhi.n	1cbb6 <strtol+0x88>
			c -= '0';
   1cb8a:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   1cb8c:	429a      	cmp	r2, r3
   1cb8e:	dd22      	ble.n	1cbd6 <strtol+0xa8>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   1cb90:	1c75      	adds	r5, r6, #1
   1cb92:	d007      	beq.n	1cba4 <strtol+0x76>
   1cb94:	4570      	cmp	r0, lr
   1cb96:	d81b      	bhi.n	1cbd0 <strtol+0xa2>
   1cb98:	d101      	bne.n	1cb9e <strtol+0x70>
   1cb9a:	454b      	cmp	r3, r9
   1cb9c:	dc18      	bgt.n	1cbd0 <strtol+0xa2>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
   1cb9e:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
   1cba2:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
   1cba4:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   1cba8:	e7eb      	b.n	1cb82 <strtol+0x54>
	} else if (c == '+') {
   1cbaa:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   1cbac:	bf04      	itt	eq
   1cbae:	784b      	ldrbeq	r3, [r1, #1]
   1cbb0:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   1cbb2:	2100      	movs	r1, #0
   1cbb4:	e7ce      	b.n	1cb54 <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1cbb6:	f043 0520 	orr.w	r5, r3, #32
   1cbba:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   1cbbc:	2d19      	cmp	r5, #25
   1cbbe:	d80a      	bhi.n	1cbd6 <strtol+0xa8>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1cbc0:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   1cbc4:	2d1a      	cmp	r5, #26
   1cbc6:	bf34      	ite	cc
   1cbc8:	2537      	movcc	r5, #55	; 0x37
   1cbca:	2557      	movcs	r5, #87	; 0x57
   1cbcc:	1b5b      	subs	r3, r3, r5
   1cbce:	e7dd      	b.n	1cb8c <strtol+0x5e>
			any = -1;
   1cbd0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1cbd4:	e7e6      	b.n	1cba4 <strtol+0x76>
		}
	}

	if (any < 0) {
   1cbd6:	1c73      	adds	r3, r6, #1
   1cbd8:	d109      	bne.n	1cbee <strtol+0xc0>
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   1cbda:	f7fc fad7 	bl	1918c <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   1cbde:	2322      	movs	r3, #34	; 0x22
   1cbe0:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   1cbe2:	4638      	mov	r0, r7
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
   1cbe4:	f1b8 0f00 	cmp.w	r8, #0
   1cbe8:	d107      	bne.n	1cbfa <strtol+0xcc>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   1cbea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
   1cbee:	b101      	cbz	r1, 1cbf2 <strtol+0xc4>
		acc = -acc;
   1cbf0:	4240      	negs	r0, r0
	if (endptr != NULL) {
   1cbf2:	f1b8 0f00 	cmp.w	r8, #0
   1cbf6:	d0f8      	beq.n	1cbea <strtol+0xbc>
		*endptr = (char *)(any ? s - 1 : nptr);
   1cbf8:	b10e      	cbz	r6, 1cbfe <strtol+0xd0>
   1cbfa:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
   1cbfe:	f8c8 c000 	str.w	ip, [r8]
	return acc;
   1cc02:	e7f2      	b.n	1cbea <strtol+0xbc>
	if (base == 0) {
   1cc04:	2330      	movs	r3, #48	; 0x30
   1cc06:	2a00      	cmp	r2, #0
   1cc08:	d1b2      	bne.n	1cb70 <strtol+0x42>
		base = c == '0' ? 8 : 10;
   1cc0a:	2208      	movs	r2, #8
   1cc0c:	e7b0      	b.n	1cb70 <strtol+0x42>
	if ((base == 0 || base == 16) &&
   1cc0e:	2b30      	cmp	r3, #48	; 0x30
   1cc10:	d0a6      	beq.n	1cb60 <strtol+0x32>
		base = c == '0' ? 8 : 10;
   1cc12:	220a      	movs	r2, #10
   1cc14:	e7ac      	b.n	1cb70 <strtol+0x42>

0001cc16 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   1cc16:	3901      	subs	r1, #1
   1cc18:	4603      	mov	r3, r0
   1cc1a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1cc1e:	b90a      	cbnz	r2, 1cc24 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   1cc20:	701a      	strb	r2, [r3, #0]

	return dest;
}
   1cc22:	4770      	bx	lr
		*d = *s;
   1cc24:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   1cc28:	e7f7      	b.n	1cc1a <strcpy+0x4>

0001cc2a <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   1cc2a:	4603      	mov	r3, r0
	size_t n = 0;
   1cc2c:	2000      	movs	r0, #0

	while (*s != '\0') {
   1cc2e:	5c1a      	ldrb	r2, [r3, r0]
   1cc30:	b902      	cbnz	r2, 1cc34 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   1cc32:	4770      	bx	lr
		n++;
   1cc34:	3001      	adds	r0, #1
   1cc36:	e7fa      	b.n	1cc2e <strlen+0x4>

0001cc38 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   1cc38:	4603      	mov	r3, r0
	size_t n = 0;
   1cc3a:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   1cc3c:	5c1a      	ldrb	r2, [r3, r0]
   1cc3e:	b10a      	cbz	r2, 1cc44 <strnlen+0xc>
   1cc40:	4288      	cmp	r0, r1
   1cc42:	d100      	bne.n	1cc46 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   1cc44:	4770      	bx	lr
		n++;
   1cc46:	3001      	adds	r0, #1
   1cc48:	e7f8      	b.n	1cc3c <strnlen+0x4>

0001cc4a <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   1cc4a:	1e43      	subs	r3, r0, #1
   1cc4c:	3901      	subs	r1, #1
   1cc4e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1cc52:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   1cc56:	4282      	cmp	r2, r0
   1cc58:	d101      	bne.n	1cc5e <strcmp+0x14>
   1cc5a:	2a00      	cmp	r2, #0
   1cc5c:	d1f7      	bne.n	1cc4e <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   1cc5e:	1a10      	subs	r0, r2, r0
   1cc60:	4770      	bx	lr

0001cc62 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   1cc62:	b510      	push	{r4, lr}
   1cc64:	3901      	subs	r1, #1
   1cc66:	4402      	add	r2, r0
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   1cc68:	4282      	cmp	r2, r0
   1cc6a:	d009      	beq.n	1cc80 <strncmp+0x1e>
   1cc6c:	7803      	ldrb	r3, [r0, #0]
   1cc6e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1cc72:	42a3      	cmp	r3, r4
   1cc74:	d100      	bne.n	1cc78 <strncmp+0x16>
   1cc76:	b90b      	cbnz	r3, 1cc7c <strncmp+0x1a>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   1cc78:	1b18      	subs	r0, r3, r4
   1cc7a:	e002      	b.n	1cc82 <strncmp+0x20>
		s1++;
   1cc7c:	3001      	adds	r0, #1
		n--;
   1cc7e:	e7f3      	b.n	1cc68 <strncmp+0x6>
	return (n == 0) ? 0 : (*s1 - *s2);
   1cc80:	2000      	movs	r0, #0
}
   1cc82:	bd10      	pop	{r4, pc}

0001cc84 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   1cc84:	b510      	push	{r4, lr}
   1cc86:	4603      	mov	r3, r0
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   1cc88:	b15a      	cbz	r2, 1cca2 <memcmp+0x1e>
   1cc8a:	3901      	subs	r1, #1
   1cc8c:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1cc8e:	f813 0b01 	ldrb.w	r0, [r3], #1
   1cc92:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1cc96:	42a3      	cmp	r3, r4
   1cc98:	d001      	beq.n	1cc9e <memcmp+0x1a>
   1cc9a:	4290      	cmp	r0, r2
   1cc9c:	d0f7      	beq.n	1cc8e <memcmp+0xa>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1cc9e:	1a80      	subs	r0, r0, r2
}
   1cca0:	bd10      	pop	{r4, pc}
		return 0;
   1cca2:	4610      	mov	r0, r2
   1cca4:	e7fc      	b.n	1cca0 <memcmp+0x1c>

0001cca6 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   1cca6:	b510      	push	{r4, lr}
   1cca8:	1e43      	subs	r3, r0, #1
   1ccaa:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   1ccac:	4291      	cmp	r1, r2
   1ccae:	d100      	bne.n	1ccb2 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1ccb0:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   1ccb2:	f811 4b01 	ldrb.w	r4, [r1], #1
   1ccb6:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1ccba:	e7f7      	b.n	1ccac <memcpy+0x6>

0001ccbc <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   1ccbc:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   1ccbe:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   1ccc0:	4603      	mov	r3, r0
	while (n > 0) {
   1ccc2:	4293      	cmp	r3, r2
   1ccc4:	d100      	bne.n	1ccc8 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1ccc6:	4770      	bx	lr
		*(d_byte++) = c_byte;
   1ccc8:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1cccc:	e7f9      	b.n	1ccc2 <memset+0x6>

0001ccce <_stdout_hook_default>:
}
   1ccce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ccd2:	4770      	bx	lr

0001ccd4 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   1ccd4:	b084      	sub	sp, #16
   1ccd6:	ab04      	add	r3, sp, #16
   1ccd8:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   1ccdc:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1cce0:	2b06      	cmp	r3, #6
   1cce2:	d108      	bne.n	1ccf6 <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   1cce4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1cce8:	2201      	movs	r2, #1
   1ccea:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   1ccee:	f3bf 8f4f 	dsb	sy
        __WFE();
   1ccf2:	bf20      	wfe
    while (true)
   1ccf4:	e7fd      	b.n	1ccf2 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   1ccf6:	b004      	add	sp, #16
   1ccf8:	4770      	bx	lr

0001ccfa <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   1ccfa:	b084      	sub	sp, #16
   1ccfc:	ab04      	add	r3, sp, #16
   1ccfe:	e903 0007 	stmdb	r3, {r0, r1, r2}
   1cd02:	2300      	movs	r3, #0
   1cd04:	f383 8811 	msr	BASEPRI, r3
   1cd08:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   1cd0c:	b004      	add	sp, #16
   1cd0e:	4770      	bx	lr

0001cd10 <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   1cd10:	b530      	push	{r4, r5, lr}
   1cd12:	b085      	sub	sp, #20
   1cd14:	4604      	mov	r4, r0
   1cd16:	4615      	mov	r5, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   1cd18:	4668      	mov	r0, sp
   1cd1a:	2203      	movs	r2, #3
   1cd1c:	f7ff ffc3 	bl	1cca6 <memcpy>
	(void)memset(res + 3, 0, 13);
   1cd20:	220d      	movs	r2, #13
   1cd22:	2100      	movs	r1, #0
   1cd24:	f10d 0003 	add.w	r0, sp, #3
   1cd28:	f7ff ffc8 	bl	1ccbc <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   1cd2c:	4620      	mov	r0, r4
   1cd2e:	466a      	mov	r2, sp
   1cd30:	4669      	mov	r1, sp
   1cd32:	f003 f8da 	bl	1feea <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   1cd36:	4604      	mov	r4, r0
   1cd38:	b920      	cbnz	r0, 1cd44 <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
   1cd3a:	2203      	movs	r2, #3
   1cd3c:	4669      	mov	r1, sp
   1cd3e:	4628      	mov	r0, r5
   1cd40:	f7ff ffb1 	bl	1cca6 <memcpy>

	return 0;
}
   1cd44:	4620      	mov	r0, r4
   1cd46:	b005      	add	sp, #20
   1cd48:	bd30      	pop	{r4, r5, pc}

0001cd4a <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   1cd4a:	b513      	push	{r0, r1, r4, lr}
   1cd4c:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   1cd4e:	aa01      	add	r2, sp, #4
   1cd50:	3103      	adds	r1, #3
   1cd52:	f7ff ffdd 	bl	1cd10 <ah>
	if (err) {
   1cd56:	b948      	cbnz	r0, 1cd6c <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   1cd58:	2203      	movs	r2, #3
   1cd5a:	a901      	add	r1, sp, #4
   1cd5c:	4620      	mov	r0, r4
   1cd5e:	f7ff ff91 	bl	1cc84 <memcmp>
   1cd62:	fab0 f080 	clz	r0, r0
   1cd66:	0940      	lsrs	r0, r0, #5
}
   1cd68:	b002      	add	sp, #8
   1cd6a:	bd10      	pop	{r4, pc}
		return false;
   1cd6c:	2000      	movs	r0, #0
   1cd6e:	e7fb      	b.n	1cd68 <bt_rpa_irk_matches+0x1e>

0001cd70 <send_cmd_status>:
{
   1cd70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   1cd74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   1cd78:	4606      	mov	r6, r0
   1cd7a:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   1cd7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1cd80:	2100      	movs	r1, #0
   1cd82:	200f      	movs	r0, #15
   1cd84:	f7f5 fd66 	bl	12854 <bt_buf_get_evt>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1cd88:	2701      	movs	r7, #1
	return net_buf_simple_add(&buf->b, len);
   1cd8a:	f100 0808 	add.w	r8, r0, #8
   1cd8e:	4604      	mov	r4, r0
   1cd90:	7507      	strb	r7, [r0, #20]
   1cd92:	2102      	movs	r1, #2
   1cd94:	4640      	mov	r0, r8
   1cd96:	f002 fed8 	bl	1fb4a <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1cd9a:	230f      	movs	r3, #15
	hdr->len = sizeof(*evt);
   1cd9c:	2104      	movs	r1, #4
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1cd9e:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
   1cda0:	7041      	strb	r1, [r0, #1]
   1cda2:	4640      	mov	r0, r8
   1cda4:	f002 fed1 	bl	1fb4a <net_buf_simple_add>
	evt->ncmd = 1U;
   1cda8:	7047      	strb	r7, [r0, #1]
	evt->status = status;
   1cdaa:	7005      	strb	r5, [r0, #0]
	evt->opcode = sys_cpu_to_le16(opcode);
   1cdac:	8046      	strh	r6, [r0, #2]
		bt_recv(buf);
   1cdae:	4620      	mov	r0, r4
}
   1cdb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_recv(buf);
   1cdb4:	f7f6 ba20 	b.w	131f8 <bt_recv>

0001cdb8 <sys_memcpy_swap.constprop.0>:
	for (; length > 0; length--) {
   1cdb8:	f101 0320 	add.w	r3, r1, #32
   1cdbc:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   1cdbe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   1cdc2:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   1cdc6:	428b      	cmp	r3, r1
   1cdc8:	d1f9      	bne.n	1cdbe <sys_memcpy_swap.constprop.0+0x6>
}
   1cdca:	4770      	bx	lr

0001cdcc <bt_hci_ecc_supported_commands>:
	supported_commands[34] |= BIT(2);
   1cdcc:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   1cdd0:	f043 0306 	orr.w	r3, r3, #6
   1cdd4:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
	supported_commands[41] |= BIT(2);
   1cdd8:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   1cddc:	f043 0304 	orr.w	r3, r3, #4
   1cde0:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
}
   1cde4:	4770      	bx	lr

0001cde6 <default_CSPRNG>:
{
   1cde6:	b508      	push	{r3, lr}
	return !bt_rand(dst, len);
   1cde8:	f7fb fdac 	bl	18944 <bt_rand>
}
   1cdec:	fab0 f080 	clz	r0, r0
   1cdf0:	0940      	lsrs	r0, r0, #5
   1cdf2:	bd08      	pop	{r3, pc}

0001cdf4 <bt_settings_decode_key>:
{
   1cdf4:	b570      	push	{r4, r5, r6, lr}
   1cdf6:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   1cdf8:	2100      	movs	r1, #0
{
   1cdfa:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   1cdfc:	f7fe fbe0 	bl	1b5c0 <settings_name_next>
   1ce00:	280d      	cmp	r0, #13
   1ce02:	d118      	bne.n	1ce36 <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   1ce04:	7b23      	ldrb	r3, [r4, #12]
   1ce06:	2b30      	cmp	r3, #48	; 0x30
   1ce08:	d111      	bne.n	1ce2e <bt_settings_decode_key+0x3a>
		addr->type = BT_ADDR_LE_PUBLIC;
   1ce0a:	2300      	movs	r3, #0
   1ce0c:	702b      	strb	r3, [r5, #0]
   1ce0e:	f104 060c 	add.w	r6, r4, #12
   1ce12:	3506      	adds	r5, #6
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   1ce14:	462a      	mov	r2, r5
   1ce16:	4620      	mov	r0, r4
   1ce18:	2301      	movs	r3, #1
   1ce1a:	2102      	movs	r1, #2
	for (uint8_t i = 0; i < 6; i++) {
   1ce1c:	3402      	adds	r4, #2
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   1ce1e:	f7fd fc59 	bl	1a6d4 <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   1ce22:	42b4      	cmp	r4, r6
   1ce24:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   1ce28:	d1f4      	bne.n	1ce14 <bt_settings_decode_key+0x20>
	return 0;
   1ce2a:	2000      	movs	r0, #0
}
   1ce2c:	bd70      	pop	{r4, r5, r6, pc}
	} else if (key[12] == '1') {
   1ce2e:	2b31      	cmp	r3, #49	; 0x31
   1ce30:	d101      	bne.n	1ce36 <bt_settings_decode_key+0x42>
		addr->type = BT_ADDR_LE_RANDOM;
   1ce32:	2301      	movs	r3, #1
   1ce34:	e7ea      	b.n	1ce0c <bt_settings_decode_key+0x18>
		return -EINVAL;
   1ce36:	f06f 0015 	mvn.w	r0, #21
   1ce3a:	e7f7      	b.n	1ce2c <bt_settings_decode_key+0x38>

0001ce3c <bt_settings_init>:
{
	int err;

	BT_DBG("");

	err = settings_subsys_init();
   1ce3c:	f7f4 b95e 	b.w	110fc <settings_subsys_init>

0001ce40 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   1ce40:	b510      	push	{r4, lr}
   1ce42:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   1ce44:	7801      	ldrb	r1, [r0, #0]
   1ce46:	7822      	ldrb	r2, [r4, #0]
   1ce48:	428a      	cmp	r2, r1
{
   1ce4a:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   1ce4c:	d00f      	beq.n	1ce6e <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   1ce4e:	4669      	mov	r1, sp
   1ce50:	f7f5 fc94 	bl	1277c <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   1ce54:	a905      	add	r1, sp, #20
   1ce56:	4620      	mov	r0, r4
   1ce58:	f7f5 fc90 	bl	1277c <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   1ce5c:	2210      	movs	r2, #16
   1ce5e:	f10d 0115 	add.w	r1, sp, #21
   1ce62:	f10d 0001 	add.w	r0, sp, #1
   1ce66:	f7ff ff0d 	bl	1cc84 <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   1ce6a:	b00a      	add	sp, #40	; 0x28
   1ce6c:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   1ce6e:	2a01      	cmp	r2, #1
   1ce70:	d006      	beq.n	1ce80 <bt_uuid_cmp+0x40>
   1ce72:	2a02      	cmp	r2, #2
   1ce74:	d007      	beq.n	1ce86 <bt_uuid_cmp+0x46>
   1ce76:	b972      	cbnz	r2, 1ce96 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   1ce78:	8840      	ldrh	r0, [r0, #2]
   1ce7a:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1ce7c:	1ac0      	subs	r0, r0, r3
   1ce7e:	e7f4      	b.n	1ce6a <bt_uuid_cmp+0x2a>
   1ce80:	6840      	ldr	r0, [r0, #4]
   1ce82:	6863      	ldr	r3, [r4, #4]
   1ce84:	e7fa      	b.n	1ce7c <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1ce86:	2210      	movs	r2, #16
   1ce88:	1c61      	adds	r1, r4, #1
   1ce8a:	3001      	adds	r0, #1
}
   1ce8c:	b00a      	add	sp, #40	; 0x28
   1ce8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1ce92:	f7ff bef7 	b.w	1cc84 <memcmp>
	switch (u1->type) {
   1ce96:	f06f 0015 	mvn.w	r0, #21
   1ce9a:	e7e6      	b.n	1ce6a <bt_uuid_cmp+0x2a>

0001ce9c <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   1ce9c:	2a04      	cmp	r2, #4
{
   1ce9e:	b510      	push	{r4, lr}
	switch (data_len) {
   1cea0:	d00a      	beq.n	1ceb8 <bt_uuid_create+0x1c>
   1cea2:	2a10      	cmp	r2, #16
   1cea4:	d00d      	beq.n	1cec2 <bt_uuid_create+0x26>
   1cea6:	2a02      	cmp	r2, #2
   1cea8:	f04f 0300 	mov.w	r3, #0
   1ceac:	d10f      	bne.n	1cece <bt_uuid_create+0x32>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   1ceae:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   1ceb0:	880b      	ldrh	r3, [r1, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   1ceb2:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   1ceb4:	2001      	movs	r0, #1
}
   1ceb6:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   1ceb8:	2301      	movs	r3, #1
   1ceba:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1cebc:	680a      	ldr	r2, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   1cebe:	6042      	str	r2, [r0, #4]
		break;
   1cec0:	e7f8      	b.n	1ceb4 <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   1cec2:	2302      	movs	r3, #2
   1cec4:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   1cec8:	f7ff feed 	bl	1cca6 <memcpy>
		break;
   1cecc:	e7f2      	b.n	1ceb4 <bt_uuid_create+0x18>
	switch (data_len) {
   1cece:	4618      	mov	r0, r3
   1ced0:	e7f1      	b.n	1ceb6 <bt_uuid_create+0x1a>

0001ced2 <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   1ced2:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   1ced4:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   1ced6:	2106      	movs	r1, #6
{
   1ced8:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   1ceda:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   1cede:	f7fb fd31 	bl	18944 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   1cee2:	b918      	cbnz	r0, 1ceec <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   1cee4:	79a3      	ldrb	r3, [r4, #6]
   1cee6:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1ceea:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   1ceec:	bd10      	pop	{r4, pc}

0001ceee <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   1ceee:	280f      	cmp	r0, #15
   1cef0:	d806      	bhi.n	1cf00 <bt_hci_evt_get_flags+0x12>
   1cef2:	280d      	cmp	r0, #13
   1cef4:	d80b      	bhi.n	1cf0e <bt_hci_evt_get_flags+0x20>
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   1cef6:	2805      	cmp	r0, #5
   1cef8:	bf14      	ite	ne
   1cefa:	2002      	movne	r0, #2
   1cefc:	2003      	moveq	r0, #3
   1cefe:	4770      	bx	lr
	switch (evt) {
   1cf00:	2813      	cmp	r0, #19
   1cf02:	d004      	beq.n	1cf0e <bt_hci_evt_get_flags+0x20>
   1cf04:	281a      	cmp	r0, #26
   1cf06:	bf14      	ite	ne
   1cf08:	2002      	movne	r0, #2
   1cf0a:	2001      	moveq	r0, #1
   1cf0c:	4770      	bx	lr
   1cf0e:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   1cf10:	4770      	bx	lr

0001cf12 <handle_event>:
{
   1cf12:	b410      	push	{r4}
   1cf14:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1cf18:	4604      	mov	r4, r0
   1cf1a:	4608      	mov	r0, r1
		if (handler->event != event) {
   1cf1c:	7811      	ldrb	r1, [r2, #0]
   1cf1e:	42a1      	cmp	r1, r4
   1cf20:	d004      	beq.n	1cf2c <handle_event+0x1a>
	for (i = 0; i < num_handlers; i++) {
   1cf22:	3208      	adds	r2, #8
   1cf24:	429a      	cmp	r2, r3
   1cf26:	d1f9      	bne.n	1cf1c <handle_event+0xa>
}
   1cf28:	bc10      	pop	{r4}
   1cf2a:	4770      	bx	lr
		if (buf->len < handler->min_len) {
   1cf2c:	8981      	ldrh	r1, [r0, #12]
   1cf2e:	7853      	ldrb	r3, [r2, #1]
   1cf30:	4299      	cmp	r1, r3
   1cf32:	d3f9      	bcc.n	1cf28 <handle_event+0x16>
		handler->handler(buf);
   1cf34:	6853      	ldr	r3, [r2, #4]
}
   1cf36:	bc10      	pop	{r4}
		handler->handler(buf);
   1cf38:	4718      	bx	r3

0001cf3a <hci_data_buf_overflow>:
}
   1cf3a:	4770      	bx	lr

0001cf3c <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   1cf3c:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
   1cf40:	b193      	cbz	r3, 1cf68 <update_sec_level+0x2c>
   1cf42:	7b5a      	ldrb	r2, [r3, #13]
   1cf44:	07d1      	lsls	r1, r2, #31
   1cf46:	d50f      	bpl.n	1cf68 <update_sec_level+0x2c>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   1cf48:	06d2      	lsls	r2, r2, #27
   1cf4a:	d50b      	bpl.n	1cf64 <update_sec_level+0x28>
   1cf4c:	7b1b      	ldrb	r3, [r3, #12]
   1cf4e:	2b10      	cmp	r3, #16
   1cf50:	d108      	bne.n	1cf64 <update_sec_level+0x28>
			conn->sec_level = BT_SECURITY_L4;
   1cf52:	2304      	movs	r3, #4
		conn->sec_level = BT_SECURITY_L2;
   1cf54:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   1cf56:	7a82      	ldrb	r2, [r0, #10]
   1cf58:	7a40      	ldrb	r0, [r0, #9]
}
   1cf5a:	4282      	cmp	r2, r0
   1cf5c:	bf8c      	ite	hi
   1cf5e:	2000      	movhi	r0, #0
   1cf60:	2001      	movls	r0, #1
   1cf62:	4770      	bx	lr
			conn->sec_level = BT_SECURITY_L3;
   1cf64:	2303      	movs	r3, #3
   1cf66:	e7f5      	b.n	1cf54 <update_sec_level+0x18>
		conn->sec_level = BT_SECURITY_L2;
   1cf68:	2302      	movs	r3, #2
   1cf6a:	e7f3      	b.n	1cf54 <update_sec_level+0x18>

0001cf6c <atomic_or>:
{
   1cf6c:	4603      	mov	r3, r0
}
   1cf6e:	f3bf 8f5b 	dmb	ish
   1cf72:	e853 0f00 	ldrex	r0, [r3]
   1cf76:	ea40 0201 	orr.w	r2, r0, r1
   1cf7a:	e843 2c00 	strex	ip, r2, [r3]
   1cf7e:	f1bc 0f00 	cmp.w	ip, #0
   1cf82:	d1f6      	bne.n	1cf72 <atomic_or+0x6>
   1cf84:	f3bf 8f5b 	dmb	ish
   1cf88:	4770      	bx	lr

0001cf8a <unpair_remote>:
{
   1cf8a:	460b      	mov	r3, r1
	unpair(*id, &info->addr);
   1cf8c:	4601      	mov	r1, r0
   1cf8e:	7818      	ldrb	r0, [r3, #0]
   1cf90:	f7f5 bc8a 	b.w	128a8 <unpair>

0001cf94 <hci_disconn_complete>:
{
   1cf94:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   1cf96:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
   1cf98:	7835      	ldrb	r5, [r6, #0]
   1cf9a:	b985      	cbnz	r5, 1cfbe <hci_disconn_complete+0x2a>
	conn = bt_conn_lookup_handle(handle);
   1cf9c:	f8b6 0001 	ldrh.w	r0, [r6, #1]
   1cfa0:	f7f7 f9be 	bl	14320 <bt_conn_lookup_handle>
	if (!conn) {
   1cfa4:	4604      	mov	r4, r0
   1cfa6:	b150      	cbz	r0, 1cfbe <hci_disconn_complete+0x2a>
	conn->err = evt->reason;
   1cfa8:	78f3      	ldrb	r3, [r6, #3]
   1cfaa:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1cfac:	4629      	mov	r1, r5
   1cfae:	f7f7 f9bf 	bl	14330 <bt_conn_set_state>
	conn->handle = 0U;
   1cfb2:	8025      	strh	r5, [r4, #0]
		bt_conn_unref(conn);
   1cfb4:	4620      	mov	r0, r4
}
   1cfb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   1cfba:	f000 bdb5 	b.w	1db28 <bt_conn_unref>
}
   1cfbe:	bd70      	pop	{r4, r5, r6, pc}

0001cfc0 <le_data_len_change>:
{
   1cfc0:	b508      	push	{r3, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1cfc2:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   1cfc4:	8818      	ldrh	r0, [r3, #0]
   1cfc6:	f7f7 f9ab 	bl	14320 <bt_conn_lookup_handle>
	if (!conn) {
   1cfca:	b118      	cbz	r0, 1cfd4 <le_data_len_change+0x14>
}
   1cfcc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_conn_unref(conn);
   1cfd0:	f000 bdaa 	b.w	1db28 <bt_conn_unref>
}
   1cfd4:	bd08      	pop	{r3, pc}

0001cfd6 <hci_hardware_error>:
	return net_buf_simple_pull_mem(&buf->b, len);
   1cfd6:	2101      	movs	r1, #1
   1cfd8:	3008      	adds	r0, #8
   1cfda:	f002 bddd 	b.w	1fb98 <net_buf_simple_pull_mem>

0001cfde <le_conn_update_complete>:
{
   1cfde:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   1cfe0:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   1cfe2:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   1cfe6:	f7f7 f99b 	bl	14320 <bt_conn_lookup_handle>
	if (!conn) {
   1cfea:	4604      	mov	r4, r0
   1cfec:	2800      	cmp	r0, #0
   1cfee:	d03c      	beq.n	1d06a <le_conn_update_complete+0x8c>
	if (!evt->status) {
   1cff0:	782b      	ldrb	r3, [r5, #0]
   1cff2:	b9cb      	cbnz	r3, 1d028 <le_conn_update_complete+0x4a>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   1cff4:	792a      	ldrb	r2, [r5, #4]
   1cff6:	78eb      	ldrb	r3, [r5, #3]
   1cff8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1cffc:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   1d000:	79aa      	ldrb	r2, [r5, #6]
   1d002:	796b      	ldrb	r3, [r5, #5]
   1d004:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1d008:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   1d00c:	79eb      	ldrb	r3, [r5, #7]
   1d00e:	7a2a      	ldrb	r2, [r5, #8]
   1d010:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1d014:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
   1d018:	f7f7 fa40 	bl	1449c <notify_le_param_updated>
	bt_conn_unref(conn);
   1d01c:	4620      	mov	r0, r4
}
   1d01e:	b003      	add	sp, #12
   1d020:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	bt_conn_unref(conn);
   1d024:	f000 bd80 	b.w	1db28 <bt_conn_unref>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   1d028:	2b1a      	cmp	r3, #26
   1d02a:	d1f7      	bne.n	1d01c <le_conn_update_complete+0x3e>
   1d02c:	78c3      	ldrb	r3, [r0, #3]
   1d02e:	2b01      	cmp	r3, #1
   1d030:	d1f4      	bne.n	1d01c <le_conn_update_complete+0x3e>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1d032:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1d036:	3004      	adds	r0, #4
   1d038:	f7ff ff98 	bl	1cf6c <atomic_or>
		   conn->role == BT_HCI_ROLE_SLAVE &&
   1d03c:	0543      	lsls	r3, r0, #21
   1d03e:	d4ed      	bmi.n	1d01c <le_conn_update_complete+0x3e>
		param.interval_min = conn->le.interval_min;
   1d040:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
   1d044:	f8ad 3000 	strh.w	r3, [sp]
		param.interval_max = conn->le.interval_max;
   1d048:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
   1d04c:	f8ad 3002 	strh.w	r3, [sp, #2]
		param.latency = conn->le.pending_latency;
   1d050:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
   1d054:	f8ad 3004 	strh.w	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   1d058:	4669      	mov	r1, sp
		param.timeout = conn->le.pending_timeout;
   1d05a:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
   1d05e:	f8ad 3006 	strh.w	r3, [sp, #6]
		bt_l2cap_update_conn_param(conn, &param);
   1d062:	4620      	mov	r0, r4
   1d064:	f7f7 fcfe 	bl	14a64 <bt_l2cap_update_conn_param>
   1d068:	e7d8      	b.n	1d01c <le_conn_update_complete+0x3e>
}
   1d06a:	b003      	add	sp, #12
   1d06c:	bd30      	pop	{r4, r5, pc}

0001d06e <hci_vendor_event>:
   1d06e:	4770      	bx	lr

0001d070 <sys_put_le64>:
	dst[1] = val >> 8;
   1d070:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   1d074:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   1d076:	0e00      	lsrs	r0, r0, #24
   1d078:	7053      	strb	r3, [r2, #1]
   1d07a:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   1d07c:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   1d07e:	f3c1 2007 	ubfx	r0, r1, #8, #8
   1d082:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   1d084:	7093      	strb	r3, [r2, #2]
   1d086:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   1d088:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   1d08a:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   1d08c:	71d1      	strb	r1, [r2, #7]
}
   1d08e:	4770      	bx	lr

0001d090 <hci_num_completed_packets>:
{
   1d090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	for (i = 0; i < evt->num_handles; i++) {
   1d094:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   1d096:	6887      	ldr	r7, [r0, #8]
			tx->pending_no_cb = 0U;
   1d098:	46a8      	mov	r8, r5
	for (i = 0; i < evt->num_handles; i++) {
   1d09a:	783b      	ldrb	r3, [r7, #0]
   1d09c:	429d      	cmp	r5, r3
   1d09e:	db01      	blt.n	1d0a4 <hci_num_completed_packets+0x14>
}
   1d0a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   1d0a4:	eb07 0385 	add.w	r3, r7, r5, lsl #2
		conn = bt_conn_lookup_handle(handle);
   1d0a8:	f8b3 0001 	ldrh.w	r0, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   1d0ac:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   1d0b0:	f7f7 f936 	bl	14320 <bt_conn_lookup_handle>
		if (!conn) {
   1d0b4:	4604      	mov	r4, r0
   1d0b6:	b350      	cbz	r0, 1d10e <hci_num_completed_packets+0x7e>
			k_work_submit(&conn->tx_complete_work);
   1d0b8:	f100 0928 	add.w	r9, r0, #40	; 0x28
		while (count--) {
   1d0bc:	b326      	cbz	r6, 1d108 <hci_num_completed_packets+0x78>
	__asm__ volatile(
   1d0be:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d0c2:	f3ef 8211 	mrs	r2, BASEPRI
   1d0c6:	f383 8811 	msr	BASEPRI, r3
   1d0ca:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   1d0ce:	69e3      	ldr	r3, [r4, #28]
   1d0d0:	b16b      	cbz	r3, 1d0ee <hci_num_completed_packets+0x5e>
				conn->pending_no_cb--;
   1d0d2:	3b01      	subs	r3, #1
   1d0d4:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   1d0d6:	f382 8811 	msr	BASEPRI, r2
   1d0da:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   1d0de:	4620      	mov	r0, r4
   1d0e0:	f7f7 f87a 	bl	141d8 <bt_conn_get_pkts>
   1d0e4:	3e01      	subs	r6, #1
   1d0e6:	f7fc fb23 	bl	19730 <z_impl_k_sem_give>
   1d0ea:	b2b6      	uxth	r6, r6
   1d0ec:	e7e6      	b.n	1d0bc <hci_num_completed_packets+0x2c>
	return list->head;
   1d0ee:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_GET(slist, snode)
   1d0f0:	b12b      	cbz	r3, 1d0fe <hci_num_completed_packets+0x6e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1d0f2:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   1d0f4:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   1d0f6:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1d0f8:	428b      	cmp	r3, r1
	list->tail = node;
   1d0fa:	bf08      	it	eq
   1d0fc:	61a0      	streq	r0, [r4, #24]
   1d0fe:	f382 8811 	msr	BASEPRI, r2
   1d102:	f3bf 8f6f 	isb	sy
			if (!node) {
   1d106:	b923      	cbnz	r3, 1d112 <hci_num_completed_packets+0x82>
		bt_conn_unref(conn);
   1d108:	4620      	mov	r0, r4
   1d10a:	f000 fd0d 	bl	1db28 <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
   1d10e:	3501      	adds	r5, #1
   1d110:	e7c3      	b.n	1d09a <hci_num_completed_packets+0xa>
	__asm__ volatile(
   1d112:	f04f 0240 	mov.w	r2, #64	; 0x40
   1d116:	f3ef 8111 	mrs	r1, BASEPRI
   1d11a:	f382 8811 	msr	BASEPRI, r2
   1d11e:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   1d122:	68da      	ldr	r2, [r3, #12]
   1d124:	61e2      	str	r2, [r4, #28]
	return list->tail;
   1d126:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
   1d128:	f8c3 800c 	str.w	r8, [r3, #12]
	parent->next = child;
   1d12c:	f8c3 8000 	str.w	r8, [r3]
Z_GENLIST_APPEND(slist, snode)
   1d130:	b94a      	cbnz	r2, 1d146 <hci_num_completed_packets+0xb6>
	list->head = node;
   1d132:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   1d136:	f381 8811 	msr	BASEPRI, r1
   1d13a:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   1d13e:	4648      	mov	r0, r9
   1d140:	f7fc fc84 	bl	19a4c <k_work_submit>
   1d144:	e7cb      	b.n	1d0de <hci_num_completed_packets+0x4e>
	parent->next = child;
   1d146:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1d148:	6263      	str	r3, [r4, #36]	; 0x24
}
   1d14a:	e7f4      	b.n	1d136 <hci_num_completed_packets+0xa6>

0001d14c <le_ltk_request>:
{
   1d14c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
   1d14e:	6884      	ldr	r4, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   1d150:	8826      	ldrh	r6, [r4, #0]
{
   1d152:	b087      	sub	sp, #28
	conn = bt_conn_lookup_handle(handle);
   1d154:	b2b0      	uxth	r0, r6
   1d156:	f7f7 f8e3 	bl	14320 <bt_conn_lookup_handle>
	if (!conn) {
   1d15a:	4605      	mov	r5, r0
   1d15c:	b318      	cbz	r0, 1d1a6 <le_ltk_request+0x5a>
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
   1d15e:	af02      	add	r7, sp, #8
   1d160:	f8d4 2002 	ldr.w	r2, [r4, #2]
   1d164:	f8d4 3006 	ldr.w	r3, [r4, #6]
   1d168:	9701      	str	r7, [sp, #4]
   1d16a:	8961      	ldrh	r1, [r4, #10]
   1d16c:	9100      	str	r1, [sp, #0]
   1d16e:	f002 fa15 	bl	1f59c <bt_smp_request_ltk>
   1d172:	b1d0      	cbz	r0, 1d1aa <le_ltk_request+0x5e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   1d174:	2112      	movs	r1, #18
   1d176:	f242 001a 	movw	r0, #8218	; 0x201a
   1d17a:	f7f5 fdc3 	bl	12d04 <bt_hci_cmd_create>
	if (!buf) {
   1d17e:	4604      	mov	r4, r0
   1d180:	b170      	cbz	r0, 1d1a0 <le_ltk_request+0x54>
	return net_buf_simple_add(&buf->b, len);
   1d182:	2112      	movs	r1, #18
   1d184:	3008      	adds	r0, #8
   1d186:	f002 fce0 	bl	1fb4a <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   1d18a:	4639      	mov	r1, r7
	cp->handle = sys_cpu_to_le16(handle);
   1d18c:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   1d190:	2210      	movs	r2, #16
   1d192:	f7ff fd88 	bl	1cca6 <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
   1d196:	4621      	mov	r1, r4
   1d198:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   1d19c:	f7f5 fdec 	bl	12d78 <bt_hci_cmd_send>
	bt_conn_unref(conn);
   1d1a0:	4628      	mov	r0, r5
   1d1a2:	f000 fcc1 	bl	1db28 <bt_conn_unref>
}
   1d1a6:	b007      	add	sp, #28
   1d1a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
   1d1aa:	2102      	movs	r1, #2
   1d1ac:	f242 001b 	movw	r0, #8219	; 0x201b
   1d1b0:	f7f5 fda8 	bl	12d04 <bt_hci_cmd_create>
	if (!buf) {
   1d1b4:	4604      	mov	r4, r0
   1d1b6:	2800      	cmp	r0, #0
   1d1b8:	d0f2      	beq.n	1d1a0 <le_ltk_request+0x54>
   1d1ba:	2102      	movs	r1, #2
   1d1bc:	3008      	adds	r0, #8
   1d1be:	f002 fcc4 	bl	1fb4a <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   1d1c2:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
   1d1c4:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   1d1c6:	f242 001b 	movw	r0, #8219	; 0x201b
   1d1ca:	e7e7      	b.n	1d19c <le_ltk_request+0x50>

0001d1cc <le_conn_param_neg_reply>:
{
   1d1cc:	b570      	push	{r4, r5, r6, lr}
   1d1ce:	4606      	mov	r6, r0
   1d1d0:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   1d1d2:	f242 0021 	movw	r0, #8225	; 0x2021
   1d1d6:	2103      	movs	r1, #3
   1d1d8:	f7f5 fd94 	bl	12d04 <bt_hci_cmd_create>
	if (!buf) {
   1d1dc:	4604      	mov	r4, r0
   1d1de:	b160      	cbz	r0, 1d1fa <le_conn_param_neg_reply+0x2e>
   1d1e0:	2103      	movs	r1, #3
   1d1e2:	3008      	adds	r0, #8
   1d1e4:	f002 fcb1 	bl	1fb4a <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   1d1e8:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   1d1ea:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1d1ec:	4621      	mov	r1, r4
   1d1ee:	f242 0021 	movw	r0, #8225	; 0x2021
}
   1d1f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1d1f6:	f7f5 bdbf 	b.w	12d78 <bt_hci_cmd_send>
}
   1d1fa:	bd70      	pop	{r4, r5, r6, pc}

0001d1fc <le_conn_param_req>:
{
   1d1fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   1d1fe:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1d200:	78d9      	ldrb	r1, [r3, #3]
   1d202:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   1d204:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1d206:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1d20a:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   1d20e:	7959      	ldrb	r1, [r3, #5]
   1d210:	791a      	ldrb	r2, [r3, #4]
   1d212:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1d216:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   1d21a:	799a      	ldrb	r2, [r3, #6]
   1d21c:	79d9      	ldrb	r1, [r3, #7]
   1d21e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1d222:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1d226:	7a1a      	ldrb	r2, [r3, #8]
   1d228:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   1d22a:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1d22c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   1d230:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1d232:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   1d236:	f7f7 f873 	bl	14320 <bt_conn_lookup_handle>
	if (!conn) {
   1d23a:	4606      	mov	r6, r0
   1d23c:	b928      	cbnz	r0, 1d24a <le_conn_param_req+0x4e>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   1d23e:	2102      	movs	r1, #2
   1d240:	4620      	mov	r0, r4
   1d242:	f7ff ffc3 	bl	1d1cc <le_conn_param_neg_reply>
}
   1d246:	b003      	add	sp, #12
   1d248:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   1d24a:	4669      	mov	r1, sp
   1d24c:	f7f7 f956 	bl	144fc <le_param_req>
   1d250:	b938      	cbnz	r0, 1d262 <le_conn_param_req+0x66>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   1d252:	211e      	movs	r1, #30
   1d254:	4620      	mov	r0, r4
   1d256:	f7ff ffb9 	bl	1d1cc <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   1d25a:	4630      	mov	r0, r6
   1d25c:	f000 fc64 	bl	1db28 <bt_conn_unref>
   1d260:	e7f1      	b.n	1d246 <le_conn_param_req+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   1d262:	210e      	movs	r1, #14
   1d264:	f242 0020 	movw	r0, #8224	; 0x2020
   1d268:	f7f5 fd4c 	bl	12d04 <bt_hci_cmd_create>
	if (!buf) {
   1d26c:	4605      	mov	r5, r0
   1d26e:	2800      	cmp	r0, #0
   1d270:	d0f3      	beq.n	1d25a <le_conn_param_req+0x5e>
   1d272:	210e      	movs	r1, #14
   1d274:	3008      	adds	r0, #8
   1d276:	f002 fc68 	bl	1fb4a <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
   1d27a:	220e      	movs	r2, #14
   1d27c:	4604      	mov	r4, r0
   1d27e:	2100      	movs	r1, #0
   1d280:	f7ff fd1c 	bl	1ccbc <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   1d284:	f8bd 3000 	ldrh.w	r3, [sp]
   1d288:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   1d28a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   1d28e:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   1d290:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1d294:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   1d296:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
   1d29a:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   1d29c:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   1d29e:	4629      	mov	r1, r5
   1d2a0:	f242 0020 	movw	r0, #8224	; 0x2020
   1d2a4:	f7f5 fd68 	bl	12d78 <bt_hci_cmd_send>
   1d2a8:	e7d7      	b.n	1d25a <le_conn_param_req+0x5e>

0001d2aa <hci_le_read_max_data_len>:
{
   1d2aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1d2ac:	4606      	mov	r6, r0
   1d2ae:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   1d2b0:	aa01      	add	r2, sp, #4
   1d2b2:	2100      	movs	r1, #0
   1d2b4:	f242 002f 	movw	r0, #8239	; 0x202f
   1d2b8:	f7f5 fd80 	bl	12dbc <bt_hci_cmd_send_sync>
	if (err) {
   1d2bc:	4604      	mov	r4, r0
   1d2be:	b948      	cbnz	r0, 1d2d4 <hci_le_read_max_data_len+0x2a>
	rp = (void *)rsp->data;
   1d2c0:	9801      	ldr	r0, [sp, #4]
   1d2c2:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   1d2c4:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   1d2c8:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   1d2ca:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   1d2ce:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   1d2d0:	f7fa f8f2 	bl	174b8 <net_buf_unref>
}
   1d2d4:	4620      	mov	r0, r4
   1d2d6:	b002      	add	sp, #8
   1d2d8:	bd70      	pop	{r4, r5, r6, pc}

0001d2da <bt_hci_disconnect>:
{
   1d2da:	b570      	push	{r4, r5, r6, lr}
   1d2dc:	4606      	mov	r6, r0
   1d2de:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   1d2e0:	f240 4006 	movw	r0, #1030	; 0x406
   1d2e4:	2103      	movs	r1, #3
   1d2e6:	f7f5 fd0d 	bl	12d04 <bt_hci_cmd_create>
	if (!buf) {
   1d2ea:	4604      	mov	r4, r0
   1d2ec:	b168      	cbz	r0, 1d30a <bt_hci_disconnect+0x30>
   1d2ee:	2103      	movs	r1, #3
   1d2f0:	3008      	adds	r0, #8
   1d2f2:	f002 fc2a 	bl	1fb4a <net_buf_simple_add>
	disconn->reason = reason;
   1d2f6:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   1d2f8:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1d2fa:	4621      	mov	r1, r4
   1d2fc:	2200      	movs	r2, #0
}
   1d2fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1d302:	f240 4006 	movw	r0, #1030	; 0x406
   1d306:	f7f5 bd59 	b.w	12dbc <bt_hci_cmd_send_sync>
}
   1d30a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1d30e:	bd70      	pop	{r4, r5, r6, pc}

0001d310 <bt_le_set_data_len>:
{
   1d310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d312:	4607      	mov	r7, r0
   1d314:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1d316:	f242 0022 	movw	r0, #8226	; 0x2022
   1d31a:	2106      	movs	r1, #6
{
   1d31c:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1d31e:	f7f5 fcf1 	bl	12d04 <bt_hci_cmd_create>
	if (!buf) {
   1d322:	4604      	mov	r4, r0
   1d324:	b170      	cbz	r0, 1d344 <bt_le_set_data_len+0x34>
   1d326:	2106      	movs	r1, #6
   1d328:	3008      	adds	r0, #8
   1d32a:	f002 fc0e 	bl	1fb4a <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1d32e:	883b      	ldrh	r3, [r7, #0]
   1d330:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   1d332:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   1d334:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1d336:	4621      	mov	r1, r4
   1d338:	f242 0022 	movw	r0, #8226	; 0x2022
}
   1d33c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1d340:	f7f5 bd1a 	b.w	12d78 <bt_hci_cmd_send>
}
   1d344:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1d348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001d34a <bt_le_set_phy>:
{
   1d34a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d34e:	4680      	mov	r8, r0
   1d350:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1d352:	f242 0032 	movw	r0, #8242	; 0x2032
   1d356:	2107      	movs	r1, #7
{
   1d358:	f89d 9020 	ldrb.w	r9, [sp, #32]
   1d35c:	4616      	mov	r6, r2
   1d35e:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1d360:	f7f5 fcd0 	bl	12d04 <bt_hci_cmd_create>
	if (!buf) {
   1d364:	4604      	mov	r4, r0
   1d366:	b190      	cbz	r0, 1d38e <bt_le_set_phy+0x44>
   1d368:	2107      	movs	r1, #7
   1d36a:	3008      	adds	r0, #8
   1d36c:	f002 fbed 	bl	1fb4a <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1d370:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   1d374:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   1d376:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   1d378:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   1d37a:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   1d37c:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1d380:	4621      	mov	r1, r4
   1d382:	f242 0032 	movw	r0, #8242	; 0x2032
}
   1d386:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1d38a:	f7f5 bcf5 	b.w	12d78 <bt_hci_cmd_send>
}
   1d38e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1d392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001d396 <le_phy_update_complete>:
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1d396:	6883      	ldr	r3, [r0, #8]
{
   1d398:	b510      	push	{r4, lr}
	conn = bt_conn_lookup_handle(handle);
   1d39a:	f8b3 0001 	ldrh.w	r0, [r3, #1]
   1d39e:	f7f6 ffbf 	bl	14320 <bt_conn_lookup_handle>
	if (!conn) {
   1d3a2:	4604      	mov	r4, r0
   1d3a4:	b1d0      	cbz	r0, 1d3dc <le_phy_update_complete+0x46>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1d3a6:	f3bf 8f5b 	dmb	ish
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
   1d3aa:	3004      	adds	r0, #4
   1d3ac:	e850 3f00 	ldrex	r3, [r0]
   1d3b0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
   1d3b4:	e840 2100 	strex	r1, r2, [r0]
   1d3b8:	2900      	cmp	r1, #0
   1d3ba:	d1f7      	bne.n	1d3ac <le_phy_update_complete+0x16>
   1d3bc:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   1d3c0:	061b      	lsls	r3, r3, #24
   1d3c2:	d506      	bpl.n	1d3d2 <le_phy_update_complete+0x3c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1d3c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   1d3c8:	f7ff fdd0 	bl	1cf6c <atomic_or>
		conn_auto_initiate(conn);
   1d3cc:	4620      	mov	r0, r4
   1d3ce:	f7f5 fd57 	bl	12e80 <conn_auto_initiate>
	bt_conn_unref(conn);
   1d3d2:	4620      	mov	r0, r4
}
   1d3d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   1d3d8:	f000 bba6 	b.w	1db28 <bt_conn_unref>
}
   1d3dc:	bd10      	pop	{r4, pc}

0001d3de <le_remote_feat_complete>:
{
   1d3de:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   1d3e0:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   1d3e2:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   1d3e6:	f7f6 ff9b 	bl	14320 <bt_conn_lookup_handle>
	if (!conn) {
   1d3ea:	4604      	mov	r4, r0
   1d3ec:	b198      	cbz	r0, 1d416 <le_remote_feat_complete+0x38>
	if (!evt->status) {
   1d3ee:	782b      	ldrb	r3, [r5, #0]
   1d3f0:	b923      	cbnz	r3, 1d3fc <le_remote_feat_complete+0x1e>
		memcpy(conn->le.features, evt->features,
   1d3f2:	2208      	movs	r2, #8
   1d3f4:	1ce9      	adds	r1, r5, #3
   1d3f6:	30ac      	adds	r0, #172	; 0xac
   1d3f8:	f7ff fc55 	bl	1cca6 <memcpy>
   1d3fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   1d400:	1d20      	adds	r0, r4, #4
   1d402:	f7ff fdb3 	bl	1cf6c <atomic_or>
	conn_auto_initiate(conn);
   1d406:	4620      	mov	r0, r4
   1d408:	f7f5 fd3a 	bl	12e80 <conn_auto_initiate>
	bt_conn_unref(conn);
   1d40c:	4620      	mov	r0, r4
}
   1d40e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   1d412:	f000 bb89 	b.w	1db28 <bt_conn_unref>
}
   1d416:	bd38      	pop	{r3, r4, r5, pc}

0001d418 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   1d418:	6880      	ldr	r0, [r0, #8]
   1d41a:	f7f5 bd93 	b.w	12f44 <bt_hci_le_enh_conn_complete>

0001d41e <le_legacy_conn_complete>:
{
   1d41e:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   1d420:	6884      	ldr	r4, [r0, #8]
{
   1d422:	b08a      	sub	sp, #40	; 0x28
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   1d424:	f7f6 fb28 	bl	13a78 <bt_le_adv_lookup_legacy>
	(void)bt_le_lim_adv_cancel_timeout(adv);
   1d428:	f000 fabe 	bl	1d9a8 <bt_le_lim_adv_cancel_timeout>
	enh.status         = evt->status;
   1d42c:	7823      	ldrb	r3, [r4, #0]
   1d42e:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   1d432:	f8b4 3001 	ldrh.w	r3, [r4, #1]
   1d436:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   1d43a:	78e3      	ldrb	r3, [r4, #3]
   1d43c:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   1d440:	f8b4 300b 	ldrh.w	r3, [r4, #11]
   1d444:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   1d448:	f8b4 300d 	ldrh.w	r3, [r4, #13]
   1d44c:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   1d450:	f8b4 300f 	ldrh.w	r3, [r4, #15]
   1d454:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   1d458:	7c63      	ldrb	r3, [r4, #17]
   1d45a:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	memcpy(dst, src, sizeof(*dst));
   1d45e:	1d21      	adds	r1, r4, #4
   1d460:	2207      	movs	r2, #7
   1d462:	a803      	add	r0, sp, #12
   1d464:	f7ff fc1f 	bl	1cca6 <memcpy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   1d468:	2400      	movs	r4, #0
	memcpy(dst, src, sizeof(*dst));
   1d46a:	4669      	mov	r1, sp
   1d46c:	2206      	movs	r2, #6
   1d46e:	f10d 0013 	add.w	r0, sp, #19
   1d472:	9400      	str	r4, [sp, #0]
   1d474:	f8ad 4004 	strh.w	r4, [sp, #4]
   1d478:	f7ff fc15 	bl	1cca6 <memcpy>
   1d47c:	2206      	movs	r2, #6
   1d47e:	4669      	mov	r1, sp
   1d480:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   1d484:	9400      	str	r4, [sp, #0]
   1d486:	f8ad 4004 	strh.w	r4, [sp, #4]
   1d48a:	f7ff fc0c 	bl	1cca6 <memcpy>
	bt_hci_le_enh_conn_complete(evt);
   1d48e:	a802      	add	r0, sp, #8
   1d490:	f7f5 fd58 	bl	12f44 <bt_hci_le_enh_conn_complete>
}
   1d494:	b00a      	add	sp, #40	; 0x28
   1d496:	bd10      	pop	{r4, pc}

0001d498 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   1d498:	8803      	ldrh	r3, [r0, #0]
   1d49a:	8842      	ldrh	r2, [r0, #2]
   1d49c:	4293      	cmp	r3, r2
{
   1d49e:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   1d4a0:	d819      	bhi.n	1d4d6 <bt_le_conn_params_valid+0x3e>
   1d4a2:	2b05      	cmp	r3, #5
   1d4a4:	d917      	bls.n	1d4d6 <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   1d4a6:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   1d4aa:	d814      	bhi.n	1d4d6 <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   1d4ac:	8883      	ldrh	r3, [r0, #4]
   1d4ae:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   1d4b2:	d210      	bcs.n	1d4d6 <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   1d4b4:	88c0      	ldrh	r0, [r0, #6]
   1d4b6:	f1a0 010a 	sub.w	r1, r0, #10
   1d4ba:	b289      	uxth	r1, r1
   1d4bc:	f640 4476 	movw	r4, #3190	; 0xc76
   1d4c0:	42a1      	cmp	r1, r4
   1d4c2:	d808      	bhi.n	1d4d6 <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   1d4c4:	3301      	adds	r3, #1
   1d4c6:	b29b      	uxth	r3, r3
   1d4c8:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   1d4ca:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   1d4ce:	bf34      	ite	cc
   1d4d0:	2001      	movcc	r0, #1
   1d4d2:	2000      	movcs	r0, #0
}
   1d4d4:	bd10      	pop	{r4, pc}
		return false;
   1d4d6:	2000      	movs	r0, #0
   1d4d8:	e7fc      	b.n	1d4d4 <bt_le_conn_params_valid+0x3c>

0001d4da <hci_encrypt_key_refresh_complete>:
{
   1d4da:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
   1d4dc:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   1d4de:	f8b3 0001 	ldrh.w	r0, [r3, #1]
	uint8_t status = evt->status;
   1d4e2:	781d      	ldrb	r5, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   1d4e4:	f7f6 ff1c 	bl	14320 <bt_conn_lookup_handle>
	if (!conn) {
   1d4e8:	4604      	mov	r4, r0
   1d4ea:	b338      	cbz	r0, 1d53c <hci_encrypt_key_refresh_complete+0x62>
	if (status) {
   1d4ec:	b165      	cbz	r5, 1d508 <hci_encrypt_key_refresh_complete+0x2e>
		bt_conn_security_changed(conn, status,
   1d4ee:	4628      	mov	r0, r5
   1d4f0:	f7f5 fe28 	bl	13144 <bt_security_err_get>
   1d4f4:	4629      	mov	r1, r5
   1d4f6:	4602      	mov	r2, r0
   1d4f8:	4620      	mov	r0, r4
   1d4fa:	f7f7 f839 	bl	14570 <bt_conn_security_changed>
	bt_conn_unref(conn);
   1d4fe:	4620      	mov	r0, r4
}
   1d500:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   1d504:	f000 bb10 	b.w	1db28 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   1d508:	7883      	ldrb	r3, [r0, #2]
   1d50a:	2b01      	cmp	r3, #1
   1d50c:	d107      	bne.n	1d51e <hci_encrypt_key_refresh_complete+0x44>
		bt_smp_update_keys(conn);
   1d50e:	f002 f9fb 	bl	1f908 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   1d512:	4620      	mov	r0, r4
   1d514:	f7ff fd12 	bl	1cf3c <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
   1d518:	2800      	cmp	r0, #0
   1d51a:	bf08      	it	eq
   1d51c:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   1d51e:	4628      	mov	r0, r5
   1d520:	f7f5 fe10 	bl	13144 <bt_security_err_get>
   1d524:	4629      	mov	r1, r5
   1d526:	4602      	mov	r2, r0
   1d528:	4620      	mov	r0, r4
   1d52a:	f7f7 f821 	bl	14570 <bt_conn_security_changed>
	if (status) {
   1d52e:	2d00      	cmp	r5, #0
   1d530:	d0e5      	beq.n	1d4fe <hci_encrypt_key_refresh_complete+0x24>
		bt_conn_disconnect(conn, status);
   1d532:	4629      	mov	r1, r5
   1d534:	4620      	mov	r0, r4
   1d536:	f000 fb3c 	bl	1dbb2 <bt_conn_disconnect>
   1d53a:	e7e0      	b.n	1d4fe <hci_encrypt_key_refresh_complete+0x24>
}
   1d53c:	bd38      	pop	{r3, r4, r5, pc}

0001d53e <hci_encrypt_change>:
{
   1d53e:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
   1d540:	6886      	ldr	r6, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   1d542:	f8b6 0001 	ldrh.w	r0, [r6, #1]
	uint8_t status = evt->status;
   1d546:	7835      	ldrb	r5, [r6, #0]
	conn = bt_conn_lookup_handle(handle);
   1d548:	f7f6 feea 	bl	14320 <bt_conn_lookup_handle>
	if (!conn) {
   1d54c:	4604      	mov	r4, r0
   1d54e:	b350      	cbz	r0, 1d5a6 <hci_encrypt_change+0x68>
	if (status) {
   1d550:	b165      	cbz	r5, 1d56c <hci_encrypt_change+0x2e>
		bt_conn_security_changed(conn, status,
   1d552:	4628      	mov	r0, r5
   1d554:	f7f5 fdf6 	bl	13144 <bt_security_err_get>
   1d558:	4629      	mov	r1, r5
   1d55a:	4602      	mov	r2, r0
   1d55c:	4620      	mov	r0, r4
   1d55e:	f7f7 f807 	bl	14570 <bt_conn_security_changed>
	bt_conn_unref(conn);
   1d562:	4620      	mov	r0, r4
}
   1d564:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   1d568:	f000 bade 	b.w	1db28 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   1d56c:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
   1d56e:	78f3      	ldrb	r3, [r6, #3]
   1d570:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
   1d572:	2a01      	cmp	r2, #1
   1d574:	d108      	bne.n	1d588 <hci_encrypt_change+0x4a>
		if (conn->encrypt) {
   1d576:	b10b      	cbz	r3, 1d57c <hci_encrypt_change+0x3e>
			bt_smp_update_keys(conn);
   1d578:	f002 f9c6 	bl	1f908 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   1d57c:	4620      	mov	r0, r4
   1d57e:	f7ff fcdd 	bl	1cf3c <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
   1d582:	2800      	cmp	r0, #0
   1d584:	bf08      	it	eq
   1d586:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   1d588:	4628      	mov	r0, r5
   1d58a:	f7f5 fddb 	bl	13144 <bt_security_err_get>
   1d58e:	4629      	mov	r1, r5
   1d590:	4602      	mov	r2, r0
   1d592:	4620      	mov	r0, r4
   1d594:	f7f6 ffec 	bl	14570 <bt_conn_security_changed>
	if (status) {
   1d598:	2d00      	cmp	r5, #0
   1d59a:	d0e2      	beq.n	1d562 <hci_encrypt_change+0x24>
		bt_conn_disconnect(conn, status);
   1d59c:	4629      	mov	r1, r5
   1d59e:	4620      	mov	r0, r4
   1d5a0:	f000 fb07 	bl	1dbb2 <bt_conn_disconnect>
   1d5a4:	e7dd      	b.n	1d562 <hci_encrypt_change+0x24>
}
   1d5a6:	bd70      	pop	{r4, r5, r6, pc}

0001d5a8 <bt_send>:
		return bt_hci_ecc_send(buf);
   1d5a8:	f7f4 bfb0 	b.w	1250c <bt_hci_ecc_send>

0001d5ac <bt_addr_le_is_bonded>:

bool bt_addr_le_is_bonded(uint8_t id, const bt_addr_le_t *addr)
{
   1d5ac:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   1d5ae:	f7f9 fe5f 	bl	17270 <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
   1d5b2:	b118      	cbz	r0, 1d5bc <bt_addr_le_is_bonded+0x10>
   1d5b4:	89c0      	ldrh	r0, [r0, #14]
   1d5b6:	3800      	subs	r0, #0
   1d5b8:	bf18      	it	ne
   1d5ba:	2001      	movne	r0, #1
	} else {
		return false;
	}
}
   1d5bc:	bd08      	pop	{r3, pc}

0001d5be <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   1d5be:	2207      	movs	r2, #7
   1d5c0:	f7ff bb71 	b.w	1cca6 <memcpy>

0001d5c4 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1d5c4:	f3bf 8f5b 	dmb	ish
   1d5c8:	6800      	ldr	r0, [r0, #0]
   1d5ca:	f3bf 8f5b 	dmb	ish
}
   1d5ce:	4770      	bx	lr

0001d5d0 <hci_id_add.constprop.0>:
static int hci_id_add(uint8_t id, const bt_addr_le_t *addr, uint8_t peer_irk[16])
   1d5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d5d2:	4607      	mov	r7, r0
   1d5d4:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   1d5d6:	f242 0027 	movw	r0, #8231	; 0x2027
   1d5da:	2127      	movs	r1, #39	; 0x27
   1d5dc:	f7f5 fb92 	bl	12d04 <bt_hci_cmd_create>
	if (!buf) {
   1d5e0:	4604      	mov	r4, r0
   1d5e2:	b1d0      	cbz	r0, 1d61a <hci_id_add.constprop.0+0x4a>
   1d5e4:	2127      	movs	r1, #39	; 0x27
   1d5e6:	3008      	adds	r0, #8
   1d5e8:	f002 faaf 	bl	1fb4a <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   1d5ec:	4639      	mov	r1, r7
   1d5ee:	4605      	mov	r5, r0
   1d5f0:	f7ff ffe5 	bl	1d5be <bt_addr_le_copy>
	memcpy(cp->peer_irk, peer_irk, 16);
   1d5f4:	4631      	mov	r1, r6
   1d5f6:	2210      	movs	r2, #16
   1d5f8:	1de8      	adds	r0, r5, #7
   1d5fa:	f7ff fb54 	bl	1cca6 <memcpy>
	(void)memset(cp->local_irk, 0, 16);
   1d5fe:	2210      	movs	r2, #16
   1d600:	2100      	movs	r1, #0
   1d602:	f105 0017 	add.w	r0, r5, #23
   1d606:	f7ff fb59 	bl	1ccbc <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   1d60a:	4621      	mov	r1, r4
   1d60c:	2200      	movs	r2, #0
}
   1d60e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   1d612:	f242 0027 	movw	r0, #8231	; 0x2027
   1d616:	f7f5 bbd1 	b.w	12dbc <bt_hci_cmd_send_sync>
}
   1d61a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1d61e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001d620 <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   1d620:	7a03      	ldrb	r3, [r0, #8]
   1d622:	075b      	lsls	r3, r3, #29
   1d624:	d504      	bpl.n	1d630 <keys_add_id+0x10>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   1d626:	f100 012a 	add.w	r1, r0, #42	; 0x2a
   1d62a:	3001      	adds	r0, #1
   1d62c:	f7ff bfd0 	b.w	1d5d0 <hci_id_add.constprop.0>
}
   1d630:	4770      	bx	lr

0001d632 <adv_unpause_enabled>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1d632:	f100 0310 	add.w	r3, r0, #16
   1d636:	f3bf 8f5b 	dmb	ish
   1d63a:	e853 2f00 	ldrex	r2, [r3]
   1d63e:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   1d642:	e843 1c00 	strex	ip, r1, [r3]
   1d646:	f1bc 0f00 	cmp.w	ip, #0
   1d64a:	d1f6      	bne.n	1d63a <adv_unpause_enabled+0x8>
   1d64c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   1d650:	0493      	lsls	r3, r2, #18
   1d652:	d502      	bpl.n	1d65a <adv_unpause_enabled+0x28>
		bt_le_adv_set_enable(adv, true);
   1d654:	2101      	movs	r1, #1
   1d656:	f000 b9a5 	b.w	1d9a4 <bt_le_adv_set_enable>
}
   1d65a:	4770      	bx	lr

0001d65c <addr_res_enable>:
{
   1d65c:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   1d65e:	2101      	movs	r1, #1
{
   1d660:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   1d662:	f242 002d 	movw	r0, #8237	; 0x202d
   1d666:	f7f5 fb4d 	bl	12d04 <bt_hci_cmd_create>
	if (!buf) {
   1d66a:	4604      	mov	r4, r0
   1d66c:	b158      	cbz	r0, 1d686 <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   1d66e:	4629      	mov	r1, r5
   1d670:	3008      	adds	r0, #8
   1d672:	f002 fa79 	bl	1fb68 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   1d676:	4621      	mov	r1, r4
   1d678:	2200      	movs	r2, #0
}
   1d67a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   1d67e:	f242 002d 	movw	r0, #8237	; 0x202d
   1d682:	f7f5 bb9b 	b.w	12dbc <bt_hci_cmd_send_sync>
}
   1d686:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1d68a:	bd38      	pop	{r3, r4, r5, pc}

0001d68c <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1d68c:	f100 0210 	add.w	r2, r0, #16
{
   1d690:	b508      	push	{r3, lr}
   1d692:	4603      	mov	r3, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1d694:	4610      	mov	r0, r2
   1d696:	f7ff ff95 	bl	1d5c4 <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1d69a:	0641      	lsls	r1, r0, #25
   1d69c:	d511      	bpl.n	1d6c2 <adv_pause_enabled+0x36>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d69e:	f3bf 8f5b 	dmb	ish
   1d6a2:	e852 1f00 	ldrex	r1, [r2]
   1d6a6:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   1d6aa:	e842 1000 	strex	r0, r1, [r2]
   1d6ae:	2800      	cmp	r0, #0
   1d6b0:	d1f7      	bne.n	1d6a2 <adv_pause_enabled+0x16>
   1d6b2:	f3bf 8f5b 	dmb	ish
		bt_le_adv_set_enable(adv, false);
   1d6b6:	4618      	mov	r0, r3
   1d6b8:	2100      	movs	r1, #0
}
   1d6ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_adv_set_enable(adv, false);
   1d6be:	f000 b971 	b.w	1d9a4 <bt_le_adv_set_enable>
}
   1d6c2:	bd08      	pop	{r3, pc}

0001d6c4 <bt_lookup_id_addr>:
{
   1d6c4:	b510      	push	{r4, lr}
   1d6c6:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   1d6c8:	f7f9 fd82 	bl	171d0 <bt_keys_find_irk>
		if (keys) {
   1d6cc:	b100      	cbz	r0, 1d6d0 <bt_lookup_id_addr+0xc>
			return &keys->addr;
   1d6ce:	1c44      	adds	r4, r0, #1
}
   1d6d0:	4620      	mov	r0, r4
   1d6d2:	bd10      	pop	{r4, pc}

0001d6d4 <bt_id_set_adv_private_addr>:
{
   1d6d4:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   1d6d6:	2106      	movs	r1, #6
   1d6d8:	4668      	mov	r0, sp
   1d6da:	f7fb f933 	bl	18944 <bt_rand>
	if (err) {
   1d6de:	b940      	cbnz	r0, 1d6f2 <bt_id_set_adv_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   1d6e0:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
   1d6e4:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   1d6e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1d6ea:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
   1d6ee:	f7f5 fe5d 	bl	133ac <set_random_address>
}
   1d6f2:	b003      	add	sp, #12
   1d6f4:	f85d fb04 	ldr.w	pc, [sp], #4

0001d6f8 <bt_id_adv_random_addr_check>:
}
   1d6f8:	2001      	movs	r0, #1
   1d6fa:	4770      	bx	lr

0001d6fc <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   1d6fc:	7a03      	ldrb	r3, [r0, #8]
   1d6fe:	07d9      	lsls	r1, r3, #31
   1d700:	d504      	bpl.n	1d70c <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   1d702:	f023 0301 	bic.w	r3, r3, #1
   1d706:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   1d708:	f7f5 bed0 	b.w	134ac <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   1d70c:	0799      	lsls	r1, r3, #30
   1d70e:	d504      	bpl.n	1d71a <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   1d710:	f023 0302 	bic.w	r3, r3, #2
   1d714:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   1d716:	f7f5 bf5d 	b.w	135d4 <bt_id_del>
}
   1d71a:	4770      	bx	lr

0001d71c <bt_id_init>:
#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
}
   1d71c:	2000      	movs	r0, #0
   1d71e:	4770      	bx	lr

0001d720 <get_adv_channel_map>:
{
   1d720:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   1d722:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   1d726:	bf0c      	ite	eq
   1d728:	2007      	moveq	r0, #7
   1d72a:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   1d72c:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   1d72e:	bf48      	it	mi
   1d730:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   1d734:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   1d736:	bf48      	it	mi
   1d738:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   1d73c:	4770      	bx	lr

0001d73e <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1d73e:	f3bf 8f5b 	dmb	ish
   1d742:	6800      	ldr	r0, [r0, #0]
   1d744:	f3bf 8f5b 	dmb	ish
}
   1d748:	4770      	bx	lr

0001d74a <atomic_and>:
{
   1d74a:	4603      	mov	r3, r0
}
   1d74c:	f3bf 8f5b 	dmb	ish
   1d750:	e853 0f00 	ldrex	r0, [r3]
   1d754:	ea00 0201 	and.w	r2, r0, r1
   1d758:	e843 2c00 	strex	ip, r2, [r3]
   1d75c:	f1bc 0f00 	cmp.w	ip, #0
   1d760:	d1f6      	bne.n	1d750 <atomic_and+0x6>
   1d762:	f3bf 8f5b 	dmb	ish
   1d766:	4770      	bx	lr

0001d768 <hci_set_ad>:
{
   1d768:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d76c:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   1d76e:	2120      	movs	r1, #32
{
   1d770:	4682      	mov	sl, r0
   1d772:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   1d774:	f7f5 fac6 	bl	12d04 <bt_hci_cmd_create>
	if (!buf) {
   1d778:	4606      	mov	r6, r0
   1d77a:	2800      	cmp	r0, #0
   1d77c:	d04a      	beq.n	1d814 <hci_set_ad+0xac>
	return net_buf_simple_add(&buf->b, len);
   1d77e:	2120      	movs	r1, #32
   1d780:	3008      	adds	r0, #8
   1d782:	f002 f9e2 	bl	1fb4a <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
   1d786:	2220      	movs	r2, #32
   1d788:	2100      	movs	r1, #0
   1d78a:	4681      	mov	r9, r0
   1d78c:	f7ff fa96 	bl	1ccbc <memset>
	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   1d790:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
   1d794:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   1d798:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
   1d79a:	2500      	movs	r5, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   1d79c:	f8d4 8000 	ldr.w	r8, [r4]
   1d7a0:	2300      	movs	r3, #0
   1d7a2:	6862      	ldr	r2, [r4, #4]
   1d7a4:	4293      	cmp	r3, r2
   1d7a6:	d30d      	bcc.n	1d7c4 <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
   1d7a8:	9b00      	ldr	r3, [sp, #0]
   1d7aa:	3408      	adds	r4, #8
   1d7ac:	42a3      	cmp	r3, r4
   1d7ae:	d1f5      	bne.n	1d79c <hci_set_ad+0x34>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   1d7b0:	2200      	movs	r2, #0
   1d7b2:	4631      	mov	r1, r6
   1d7b4:	4650      	mov	r0, sl
	*data_len = set_data_len;
   1d7b6:	f889 5000 	strb.w	r5, [r9]
}
   1d7ba:	b003      	add	sp, #12
   1d7bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   1d7c0:	f7f5 bafc 	b.w	12dbc <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   1d7c4:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   1d7c8:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   1d7cc:	1ca8      	adds	r0, r5, #2
   1d7ce:	1811      	adds	r1, r2, r0
   1d7d0:	291f      	cmp	r1, #31
   1d7d2:	d908      	bls.n	1d7e6 <hci_set_ad+0x7e>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   1d7d4:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   1d7d8:	f1c5 021d 	rsb	r2, r5, #29
				if (!(type == BT_DATA_NAME_COMPLETE &&
   1d7dc:	d11f      	bne.n	1d81e <hci_set_ad+0xb6>
   1d7de:	2a00      	cmp	r2, #0
   1d7e0:	dd1d      	ble.n	1d81e <hci_set_ad+0xb6>
				type = BT_DATA_NAME_SHORTENED;
   1d7e2:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   1d7e6:	b2d7      	uxtb	r7, r2
   1d7e8:	1c79      	adds	r1, r7, #1
   1d7ea:	f80b 1005 	strb.w	r1, [fp, r5]
   1d7ee:	1c69      	adds	r1, r5, #1
			set_data[set_data_len++] = type;
   1d7f0:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
   1d7f2:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
   1d7f6:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   1d7fa:	f8d8 1004 	ldr.w	r1, [r8, #4]
   1d7fe:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   1d800:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
   1d802:	f7ff fa50 	bl	1cca6 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   1d806:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   1d808:	443d      	add	r5, r7
   1d80a:	b2ed      	uxtb	r5, r5
		for (size_t j = 0; j < ad[i].len; j++) {
   1d80c:	3301      	adds	r3, #1
   1d80e:	f108 0808 	add.w	r8, r8, #8
   1d812:	e7c6      	b.n	1d7a2 <hci_set_ad+0x3a>
		return -ENOBUFS;
   1d814:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   1d818:	b003      	add	sp, #12
   1d81a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		net_buf_unref(buf);
   1d81e:	4630      	mov	r0, r6
   1d820:	f7f9 fe4a 	bl	174b8 <net_buf_unref>
		return err;
   1d824:	f06f 0015 	mvn.w	r0, #21
   1d828:	e7f6      	b.n	1d818 <hci_set_ad+0xb0>

0001d82a <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1d82a:	2301      	movs	r3, #1
{
   1d82c:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1d82e:	fa03 f101 	lsl.w	r1, r3, r1
{
   1d832:	4604      	mov	r4, r0
	if (val) {
   1d834:	b162      	cbz	r2, 1d850 <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d836:	f3bf 8f5b 	dmb	ish
   1d83a:	e854 3f00 	ldrex	r3, [r4]
   1d83e:	430b      	orrs	r3, r1
   1d840:	e844 3200 	strex	r2, r3, [r4]
   1d844:	2a00      	cmp	r2, #0
   1d846:	d1f8      	bne.n	1d83a <atomic_set_bit_to+0x10>
   1d848:	f3bf 8f5b 	dmb	ish
	}
}
   1d84c:	bc10      	pop	{r4}
   1d84e:	4770      	bx	lr
   1d850:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1d852:	43c9      	mvns	r1, r1
   1d854:	f7ff bf79 	b.w	1d74a <atomic_and>

0001d858 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   1d858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d85c:	b087      	sub	sp, #28
   1d85e:	4605      	mov	r5, r0
   1d860:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
   1d864:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   1d868:	f89d 804c 	ldrb.w	r8, [sp, #76]	; 0x4c
   1d86c:	460c      	mov	r4, r1
   1d86e:	4693      	mov	fp, r2
	struct bt_ad d[2] = {};
   1d870:	2100      	movs	r1, #0
   1d872:	2210      	movs	r2, #16
   1d874:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   1d876:	461e      	mov	r6, r3
	struct bt_ad d[2] = {};
   1d878:	f7ff fa20 	bl	1ccbc <memset>
	if (use_name) {
   1d87c:	b187      	cbz	r7, 1d8a0 <le_adv_update.constprop.0+0x48>
		const char *name = bt_get_name();
   1d87e:	f7f5 fd77 	bl	13370 <bt_get_name>
   1d882:	4681      	mov	r9, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   1d884:	2c00      	cmp	r4, #0
   1d886:	d13e      	bne.n	1d906 <le_adv_update.constprop.0+0xae>
   1d888:	2e00      	cmp	r6, #0
   1d88a:	d148      	bne.n	1d91e <le_adv_update.constprop.0+0xc6>
		data = (struct bt_data)BT_DATA(
   1d88c:	4648      	mov	r0, r9
   1d88e:	f7ff f9cc 	bl	1cc2a <strlen>
   1d892:	2209      	movs	r2, #9
   1d894:	f88d 2000 	strb.w	r2, [sp]
   1d898:	f88d 0001 	strb.w	r0, [sp, #1]
   1d89c:	f8cd 9004 	str.w	r9, [sp, #4]
		d[0].len = ad_len;
   1d8a0:	e9cd 4b02 	strd	r4, fp, [sp, #8]
		if (use_name && (!scannable || force_name_in_ad)) {
   1d8a4:	2f00      	cmp	r7, #0
   1d8a6:	d03c      	beq.n	1d922 <le_adv_update.constprop.0+0xca>
   1d8a8:	f1ba 0f00 	cmp.w	sl, #0
   1d8ac:	d002      	beq.n	1d8b4 <le_adv_update.constprop.0+0x5c>
   1d8ae:	f1b8 0f00 	cmp.w	r8, #0
   1d8b2:	d036      	beq.n	1d922 <le_adv_update.constprop.0+0xca>
			d[1].len = 1;
   1d8b4:	2301      	movs	r3, #1
			d[1].data = &data;
   1d8b6:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   1d8ba:	9305      	str	r3, [sp, #20]
			d_len = 2;
   1d8bc:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   1d8be:	a902      	add	r1, sp, #8
   1d8c0:	f242 0008 	movw	r0, #8200	; 0x2008
   1d8c4:	f7ff ff50 	bl	1d768 <hci_set_ad>
		if (err) {
   1d8c8:	4604      	mov	r4, r0
   1d8ca:	b978      	cbnz	r0, 1d8ec <le_adv_update.constprop.0+0x94>
	if (scannable) {
   1d8cc:	f1ba 0f00 	cmp.w	sl, #0
   1d8d0:	d129      	bne.n	1d926 <le_adv_update.constprop.0+0xce>
   1d8d2:	3510      	adds	r5, #16
   1d8d4:	f3bf 8f5b 	dmb	ish
   1d8d8:	e855 3f00 	ldrex	r3, [r5]
   1d8dc:	f043 0304 	orr.w	r3, r3, #4
   1d8e0:	e845 3200 	strex	r2, r3, [r5]
   1d8e4:	2a00      	cmp	r2, #0
   1d8e6:	d1f7      	bne.n	1d8d8 <le_adv_update.constprop.0+0x80>
   1d8e8:	f3bf 8f5b 	dmb	ish
}
   1d8ec:	4620      	mov	r0, r4
   1d8ee:	b007      	add	sp, #28
   1d8f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   1d8f4:	f814 1032 	ldrb.w	r1, [r4, r2, lsl #3]
   1d8f8:	3908      	subs	r1, #8
   1d8fa:	2901      	cmp	r1, #1
   1d8fc:	d92a      	bls.n	1d954 <le_adv_update.constprop.0+0xfc>
	for (i = 0; i < ad_len; i++) {
   1d8fe:	3201      	adds	r2, #1
   1d900:	4593      	cmp	fp, r2
   1d902:	d1f7      	bne.n	1d8f4 <le_adv_update.constprop.0+0x9c>
   1d904:	e7c0      	b.n	1d888 <le_adv_update.constprop.0+0x30>
   1d906:	2200      	movs	r2, #0
   1d908:	e7fa      	b.n	1d900 <le_adv_update.constprop.0+0xa8>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   1d90a:	f816 1032 	ldrb.w	r1, [r6, r2, lsl #3]
   1d90e:	3908      	subs	r1, #8
   1d910:	2901      	cmp	r1, #1
   1d912:	d91f      	bls.n	1d954 <le_adv_update.constprop.0+0xfc>
	for (i = 0; i < ad_len; i++) {
   1d914:	3201      	adds	r2, #1
   1d916:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1d918:	4293      	cmp	r3, r2
   1d91a:	d1f6      	bne.n	1d90a <le_adv_update.constprop.0+0xb2>
   1d91c:	e7b6      	b.n	1d88c <le_adv_update.constprop.0+0x34>
   1d91e:	2200      	movs	r2, #0
   1d920:	e7f9      	b.n	1d916 <le_adv_update.constprop.0+0xbe>
		d_len = 1;
   1d922:	2201      	movs	r2, #1
   1d924:	e7cb      	b.n	1d8be <le_adv_update.constprop.0+0x66>
		d[0].len = sd_len;
   1d926:	9b10      	ldr	r3, [sp, #64]	; 0x40
		d[0].data = sd;
   1d928:	9602      	str	r6, [sp, #8]
		d[0].len = sd_len;
   1d92a:	9303      	str	r3, [sp, #12]
		if (use_name && !force_name_in_ad) {
   1d92c:	b187      	cbz	r7, 1d950 <le_adv_update.constprop.0+0xf8>
   1d92e:	f1b8 0f00 	cmp.w	r8, #0
   1d932:	d10d      	bne.n	1d950 <le_adv_update.constprop.0+0xf8>
			d[1].len = 1;
   1d934:	2301      	movs	r3, #1
			d[1].data = &data;
   1d936:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   1d93a:	9305      	str	r3, [sp, #20]
			d_len = 2;
   1d93c:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   1d93e:	a902      	add	r1, sp, #8
   1d940:	f242 0009 	movw	r0, #8201	; 0x2009
   1d944:	f7ff ff10 	bl	1d768 <hci_set_ad>
		if (err) {
   1d948:	2800      	cmp	r0, #0
   1d94a:	d0c2      	beq.n	1d8d2 <le_adv_update.constprop.0+0x7a>
   1d94c:	4604      	mov	r4, r0
   1d94e:	e7cd      	b.n	1d8ec <le_adv_update.constprop.0+0x94>
		d_len = 1;
   1d950:	2201      	movs	r2, #1
   1d952:	e7f4      	b.n	1d93e <le_adv_update.constprop.0+0xe6>
			return -EINVAL;
   1d954:	f06f 0415 	mvn.w	r4, #21
   1d958:	e7c8      	b.n	1d8ec <le_adv_update.constprop.0+0x94>

0001d95a <bt_le_adv_set_enable_legacy>:
{
   1d95a:	b570      	push	{r4, r5, r6, lr}
   1d95c:	4606      	mov	r6, r0
   1d95e:	b086      	sub	sp, #24
   1d960:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   1d962:	f242 000a 	movw	r0, #8202	; 0x200a
   1d966:	2101      	movs	r1, #1
   1d968:	f7f5 f9cc 	bl	12d04 <bt_hci_cmd_create>
	if (!buf) {
   1d96c:	4604      	mov	r4, r0
   1d96e:	b1b0      	cbz	r0, 1d99e <bt_le_adv_set_enable_legacy+0x44>
	return net_buf_simple_add_u8(&buf->b, val);
   1d970:	3008      	adds	r0, #8
	if (enable) {
   1d972:	b195      	cbz	r5, 1d99a <bt_le_adv_set_enable_legacy+0x40>
   1d974:	2101      	movs	r1, #1
   1d976:	f002 f8f7 	bl	1fb68 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   1d97a:	f106 0210 	add.w	r2, r6, #16
   1d97e:	a903      	add	r1, sp, #12
   1d980:	4620      	mov	r0, r4
   1d982:	9500      	str	r5, [sp, #0]
   1d984:	2306      	movs	r3, #6
   1d986:	f7f5 f9ab 	bl	12ce0 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   1d98a:	2200      	movs	r2, #0
   1d98c:	4621      	mov	r1, r4
   1d98e:	f242 000a 	movw	r0, #8202	; 0x200a
   1d992:	f7f5 fa13 	bl	12dbc <bt_hci_cmd_send_sync>
}
   1d996:	b006      	add	sp, #24
   1d998:	bd70      	pop	{r4, r5, r6, pc}
   1d99a:	4629      	mov	r1, r5
   1d99c:	e7eb      	b.n	1d976 <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   1d99e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1d9a2:	e7f8      	b.n	1d996 <bt_le_adv_set_enable_legacy+0x3c>

0001d9a4 <bt_le_adv_set_enable>:
	return bt_le_adv_set_enable_legacy(adv, enable);
   1d9a4:	f7ff bfd9 	b.w	1d95a <bt_le_adv_set_enable_legacy>

0001d9a8 <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   1d9a8:	3018      	adds	r0, #24
   1d9aa:	f002 bd8b 	b.w	204c4 <k_work_cancel_delayable>

0001d9ae <adv_timeout>:
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   1d9ae:	f7f6 b9b9 	b.w	13d24 <bt_le_adv_stop>

0001d9b2 <atomic_and>:
{
   1d9b2:	4603      	mov	r3, r0
}
   1d9b4:	f3bf 8f5b 	dmb	ish
   1d9b8:	e853 0f00 	ldrex	r0, [r3]
   1d9bc:	ea00 0201 	and.w	r2, r0, r1
   1d9c0:	e843 2c00 	strex	ip, r2, [r3]
   1d9c4:	f1bc 0f00 	cmp.w	ip, #0
   1d9c8:	d1f6      	bne.n	1d9b8 <atomic_and+0x6>
   1d9ca:	f3bf 8f5b 	dmb	ish
   1d9ce:	4770      	bx	lr

0001d9d0 <tx_notify>:
{
   1d9d0:	b570      	push	{r4, r5, r6, lr}
   1d9d2:	4604      	mov	r4, r0
	__asm__ volatile(
   1d9d4:	f04f 0240 	mov.w	r2, #64	; 0x40
   1d9d8:	f3ef 8311 	mrs	r3, BASEPRI
   1d9dc:	f382 8811 	msr	BASEPRI, r2
   1d9e0:	f3bf 8f6f 	isb	sy
	return list->head;
   1d9e4:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   1d9e6:	b920      	cbnz	r0, 1d9f2 <tx_notify+0x22>
	__asm__ volatile(
   1d9e8:	f383 8811 	msr	BASEPRI, r3
   1d9ec:	f3bf 8f6f 	isb	sy
}
   1d9f0:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1d9f2:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return node->next;
   1d9f4:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1d9f6:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1d9f8:	4288      	cmp	r0, r1
	list->tail = node;
   1d9fa:	bf08      	it	eq
   1d9fc:	6262      	streq	r2, [r4, #36]	; 0x24
   1d9fe:	f383 8811 	msr	BASEPRI, r3
   1da02:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   1da06:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   1da0a:	f7f6 fb3d 	bl	14088 <tx_free>
		cb(conn, user_data);
   1da0e:	4631      	mov	r1, r6
   1da10:	4620      	mov	r0, r4
   1da12:	47a8      	blx	r5
	while (1) {
   1da14:	e7de      	b.n	1d9d4 <tx_notify+0x4>

0001da16 <tx_complete_work>:
	tx_notify(conn);
   1da16:	3828      	subs	r0, #40	; 0x28
   1da18:	f7ff bfda 	b.w	1d9d0 <tx_notify>

0001da1c <bt_conn_reset_rx_state>:
{
   1da1c:	b510      	push	{r4, lr}
   1da1e:	4604      	mov	r4, r0
	if (!conn->rx) {
   1da20:	6900      	ldr	r0, [r0, #16]
   1da22:	b118      	cbz	r0, 1da2c <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   1da24:	f7f9 fd48 	bl	174b8 <net_buf_unref>
	conn->rx = NULL;
   1da28:	2300      	movs	r3, #0
   1da2a:	6123      	str	r3, [r4, #16]
}
   1da2c:	bd10      	pop	{r4, pc}

0001da2e <conn_cleanup>:
{
   1da2e:	b570      	push	{r4, r5, r6, lr}
   1da30:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   1da32:	f100 0638 	add.w	r6, r0, #56	; 0x38
   1da36:	2200      	movs	r2, #0
   1da38:	2300      	movs	r3, #0
   1da3a:	4630      	mov	r0, r6
   1da3c:	f002 f834 	bl	1faa8 <net_buf_get>
   1da40:	4605      	mov	r5, r0
   1da42:	b950      	cbnz	r0, 1da5a <conn_cleanup+0x2c>
	bt_conn_reset_rx_state(conn);
   1da44:	4620      	mov	r0, r4
   1da46:	f7ff ffe9 	bl	1da1c <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   1da4a:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1da4e:	2200      	movs	r2, #0
}
   1da50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   1da54:	2300      	movs	r3, #0
   1da56:	f7fc b895 	b.w	19b84 <k_work_reschedule>
		if (tx_data(buf)->tx) {
   1da5a:	6968      	ldr	r0, [r5, #20]
   1da5c:	b108      	cbz	r0, 1da62 <conn_cleanup+0x34>
			tx_free(tx_data(buf)->tx);
   1da5e:	f7f6 fb13 	bl	14088 <tx_free>
		net_buf_unref(buf);
   1da62:	4628      	mov	r0, r5
   1da64:	f7f9 fd28 	bl	174b8 <net_buf_unref>
   1da68:	e7e5      	b.n	1da36 <conn_cleanup+0x8>

0001da6a <bt_conn_recv>:
{
   1da6a:	b570      	push	{r4, r5, r6, lr}
   1da6c:	4616      	mov	r6, r2
   1da6e:	4604      	mov	r4, r0
   1da70:	460d      	mov	r5, r1
	tx_notify(conn);
   1da72:	f7ff ffad 	bl	1d9d0 <tx_notify>
	switch (flags) {
   1da76:	2e01      	cmp	r6, #1
   1da78:	d017      	beq.n	1daaa <bt_conn_recv+0x40>
   1da7a:	2e02      	cmp	r6, #2
   1da7c:	d117      	bne.n	1daae <bt_conn_recv+0x44>
		if (conn->rx) {
   1da7e:	6923      	ldr	r3, [r4, #16]
   1da80:	b113      	cbz	r3, 1da88 <bt_conn_recv+0x1e>
			bt_conn_reset_rx_state(conn);
   1da82:	4620      	mov	r0, r4
   1da84:	f7ff ffca 	bl	1da1c <bt_conn_reset_rx_state>
		conn->rx = buf;
   1da88:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   1da8a:	6921      	ldr	r1, [r4, #16]
   1da8c:	898a      	ldrh	r2, [r1, #12]
   1da8e:	2a01      	cmp	r2, #1
   1da90:	d92e      	bls.n	1daf0 <bt_conn_recv+0x86>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   1da92:	688b      	ldr	r3, [r1, #8]
   1da94:	881b      	ldrh	r3, [r3, #0]
   1da96:	3304      	adds	r3, #4
   1da98:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   1da9a:	429a      	cmp	r2, r3
   1da9c:	d328      	bcc.n	1daf0 <bt_conn_recv+0x86>
	if (conn->rx->len > acl_total_len) {
   1da9e:	d920      	bls.n	1dae2 <bt_conn_recv+0x78>
		bt_conn_reset_rx_state(conn);
   1daa0:	4620      	mov	r0, r4
}
   1daa2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   1daa6:	f7ff bfb9 	b.w	1da1c <bt_conn_reset_rx_state>
		if (!conn->rx) {
   1daaa:	6920      	ldr	r0, [r4, #16]
   1daac:	b918      	cbnz	r0, 1dab6 <bt_conn_recv+0x4c>
		bt_conn_reset_rx_state(conn);
   1daae:	4620      	mov	r0, r4
   1dab0:	f7ff ffb4 	bl	1da1c <bt_conn_reset_rx_state>
   1dab4:	e001      	b.n	1daba <bt_conn_recv+0x50>
		if (!buf->len) {
   1dab6:	89ae      	ldrh	r6, [r5, #12]
   1dab8:	b926      	cbnz	r6, 1dac4 <bt_conn_recv+0x5a>
		net_buf_unref(buf);
   1daba:	4628      	mov	r0, r5
}
   1dabc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
   1dac0:	f7f9 bcfa 	b.w	174b8 <net_buf_unref>
	return net_buf_simple_tailroom(&buf->b);
   1dac4:	3008      	adds	r0, #8
   1dac6:	f002 f87b 	bl	1fbc0 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   1daca:	4286      	cmp	r6, r0
   1dacc:	d8ef      	bhi.n	1daae <bt_conn_recv+0x44>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1dace:	6920      	ldr	r0, [r4, #16]
   1dad0:	89aa      	ldrh	r2, [r5, #12]
   1dad2:	68a9      	ldr	r1, [r5, #8]
   1dad4:	3008      	adds	r0, #8
   1dad6:	f002 f83e 	bl	1fb56 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   1dada:	4628      	mov	r0, r5
   1dadc:	f7f9 fcec 	bl	174b8 <net_buf_unref>
		break;
   1dae0:	e7d3      	b.n	1da8a <bt_conn_recv+0x20>
	conn->rx = NULL;
   1dae2:	2300      	movs	r3, #0
   1dae4:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf);
   1dae6:	4620      	mov	r0, r4
}
   1dae8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
   1daec:	f000 ba03 	b.w	1def6 <bt_l2cap_recv>
}
   1daf0:	bd70      	pop	{r4, r5, r6, pc}

0001daf2 <bt_conn_ref>:
{
   1daf2:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   1daf4:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1daf8:	f3bf 8f5b 	dmb	ish
   1dafc:	6813      	ldr	r3, [r2, #0]
   1dafe:	f3bf 8f5b 	dmb	ish
		if (!old) {
   1db02:	b17b      	cbz	r3, 1db24 <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1db04:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   1db08:	1c59      	adds	r1, r3, #1
   1db0a:	e852 4f00 	ldrex	r4, [r2]
   1db0e:	429c      	cmp	r4, r3
   1db10:	d104      	bne.n	1db1c <bt_conn_ref+0x2a>
   1db12:	e842 1c00 	strex	ip, r1, [r2]
   1db16:	f1bc 0f00 	cmp.w	ip, #0
   1db1a:	d1f6      	bne.n	1db0a <bt_conn_ref+0x18>
   1db1c:	f3bf 8f5b 	dmb	ish
   1db20:	d1ea      	bne.n	1daf8 <bt_conn_ref+0x6>
}
   1db22:	bd10      	pop	{r4, pc}
			return NULL;
   1db24:	4618      	mov	r0, r3
   1db26:	e7fc      	b.n	1db22 <bt_conn_ref+0x30>

0001db28 <bt_conn_unref>:
	old = atomic_dec(&conn->ref);
   1db28:	f100 03b8 	add.w	r3, r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1db2c:	f3bf 8f5b 	dmb	ish
   1db30:	e853 2f00 	ldrex	r2, [r3]
   1db34:	3a01      	subs	r2, #1
   1db36:	e843 2100 	strex	r1, r2, [r3]
   1db3a:	2900      	cmp	r1, #0
   1db3c:	d1f8      	bne.n	1db30 <bt_conn_unref+0x8>
   1db3e:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   1db42:	7883      	ldrb	r3, [r0, #2]
   1db44:	2b01      	cmp	r3, #1
   1db46:	d108      	bne.n	1db5a <bt_conn_unref+0x32>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1db48:	f3bf 8f5b 	dmb	ish
   1db4c:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   1db50:	f3bf 8f5b 	dmb	ish
   1db54:	b90b      	cbnz	r3, 1db5a <bt_conn_unref+0x32>
		bt_le_adv_resume();
   1db56:	f7f6 b935 	b.w	13dc4 <bt_le_adv_resume>
}
   1db5a:	4770      	bx	lr

0001db5c <conn_lookup_handle>:
{
   1db5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1db60:	4607      	mov	r7, r0
   1db62:	460e      	mov	r6, r1
   1db64:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   1db66:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1db68:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   1db6c:	42b4      	cmp	r4, r6
   1db6e:	d103      	bne.n	1db78 <conn_lookup_handle+0x1c>
	return NULL;
   1db70:	2300      	movs	r3, #0
}
   1db72:	4618      	mov	r0, r3
   1db74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1db78:	fb09 7004 	mla	r0, r9, r4, r7
   1db7c:	f7ff ffb9 	bl	1daf2 <bt_conn_ref>
   1db80:	4603      	mov	r3, r0
		if (!conn) {
   1db82:	b158      	cbz	r0, 1db9c <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   1db84:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   1db86:	2d01      	cmp	r5, #1
   1db88:	d002      	beq.n	1db90 <conn_lookup_handle+0x34>
   1db8a:	3d07      	subs	r5, #7
   1db8c:	2d01      	cmp	r5, #1
   1db8e:	d803      	bhi.n	1db98 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   1db90:	881a      	ldrh	r2, [r3, #0]
   1db92:	4542      	cmp	r2, r8
   1db94:	d0ed      	beq.n	1db72 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   1db96:	4618      	mov	r0, r3
   1db98:	f7ff ffc6 	bl	1db28 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   1db9c:	3401      	adds	r4, #1
   1db9e:	e7e5      	b.n	1db6c <conn_lookup_handle+0x10>

0001dba0 <bt_conn_connected>:
{
   1dba0:	b510      	push	{r4, lr}
   1dba2:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   1dba4:	f7f6 ff02 	bl	149ac <bt_l2cap_connected>
	notify_connected(conn);
   1dba8:	4620      	mov	r0, r4
}
   1dbaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   1dbae:	f7f6 ba75 	b.w	1409c <notify_connected>

0001dbb2 <bt_conn_disconnect>:
{
   1dbb2:	b538      	push	{r3, r4, r5, lr}
	switch (conn->state) {
   1dbb4:	7b43      	ldrb	r3, [r0, #13]
   1dbb6:	3b02      	subs	r3, #2
{
   1dbb8:	4604      	mov	r4, r0
	switch (conn->state) {
   1dbba:	2b06      	cmp	r3, #6
   1dbbc:	d805      	bhi.n	1dbca <bt_conn_disconnect+0x18>
   1dbbe:	e8df f003 	tbb	[pc, r3]
   1dbc2:	0408      	.short	0x0408
   1dbc4:	0e0c0404 	.word	0x0e0c0404
   1dbc8:	0c          	.byte	0x0c
   1dbc9:	00          	.byte	0x00
   1dbca:	f06f 057f 	mvn.w	r5, #127	; 0x7f
}
   1dbce:	4628      	mov	r0, r5
   1dbd0:	bd38      	pop	{r3, r4, r5, pc}
		conn->err = reason;
   1dbd2:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1dbd4:	2100      	movs	r1, #0
   1dbd6:	f7f6 fbab 	bl	14330 <bt_conn_set_state>
		return 0;
   1dbda:	2500      	movs	r5, #0
   1dbdc:	e7f7      	b.n	1dbce <bt_conn_disconnect+0x1c>
	err = bt_hci_disconnect(conn->handle, reason);
   1dbde:	8800      	ldrh	r0, [r0, #0]
   1dbe0:	f7ff fb7b 	bl	1d2da <bt_hci_disconnect>
	if (err) {
   1dbe4:	4605      	mov	r5, r0
   1dbe6:	2800      	cmp	r0, #0
   1dbe8:	d1f1      	bne.n	1dbce <bt_conn_disconnect+0x1c>
	if (conn->state == BT_CONN_CONNECTED) {
   1dbea:	7b63      	ldrb	r3, [r4, #13]
   1dbec:	2b07      	cmp	r3, #7
   1dbee:	d1ee      	bne.n	1dbce <bt_conn_disconnect+0x1c>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT);
   1dbf0:	2108      	movs	r1, #8
   1dbf2:	4620      	mov	r0, r4
   1dbf4:	f7f6 fb9c 	bl	14330 <bt_conn_set_state>
   1dbf8:	e7e9      	b.n	1dbce <bt_conn_disconnect+0x1c>

0001dbfa <bt_conn_set_security>:
{
   1dbfa:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1dbfc:	7b43      	ldrb	r3, [r0, #13]
   1dbfe:	2b07      	cmp	r3, #7
{
   1dc00:	4604      	mov	r4, r0
   1dc02:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   1dc04:	d124      	bne.n	1dc50 <bt_conn_set_security+0x56>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   1dc06:	7a43      	ldrb	r3, [r0, #9]
   1dc08:	428b      	cmp	r3, r1
   1dc0a:	d224      	bcs.n	1dc56 <bt_conn_set_security+0x5c>
   1dc0c:	7a83      	ldrb	r3, [r0, #10]
   1dc0e:	428b      	cmp	r3, r1
   1dc10:	d221      	bcs.n	1dc56 <bt_conn_set_security+0x5c>
	if (val) {
   1dc12:	060b      	lsls	r3, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   1dc14:	f100 0004 	add.w	r0, r0, #4
   1dc18:	d515      	bpl.n	1dc46 <bt_conn_set_security+0x4c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1dc1a:	f3bf 8f5b 	dmb	ish
   1dc1e:	e850 3f00 	ldrex	r3, [r0]
   1dc22:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   1dc26:	e840 3200 	strex	r2, r3, [r0]
   1dc2a:	2a00      	cmp	r2, #0
   1dc2c:	d1f7      	bne.n	1dc1e <bt_conn_set_security+0x24>
   1dc2e:	f3bf 8f5b 	dmb	ish
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   1dc32:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   1dc36:	72a5      	strb	r5, [r4, #10]
		return bt_smp_start_security(conn);
   1dc38:	4620      	mov	r0, r4
   1dc3a:	f7f8 fff3 	bl	16c24 <bt_smp_start_security>
	if (err) {
   1dc3e:	b108      	cbz	r0, 1dc44 <bt_conn_set_security+0x4a>
		conn->required_sec_level = conn->sec_level;
   1dc40:	7a63      	ldrb	r3, [r4, #9]
   1dc42:	72a3      	strb	r3, [r4, #10]
}
   1dc44:	bd38      	pop	{r3, r4, r5, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1dc46:	f46f 6100 	mvn.w	r1, #2048	; 0x800
   1dc4a:	f7ff feb2 	bl	1d9b2 <atomic_and>
   1dc4e:	e7f0      	b.n	1dc32 <bt_conn_set_security+0x38>
		return -ENOTCONN;
   1dc50:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1dc54:	e7f6      	b.n	1dc44 <bt_conn_set_security+0x4a>
		return 0;
   1dc56:	2000      	movs	r0, #0
   1dc58:	e7f4      	b.n	1dc44 <bt_conn_set_security+0x4a>

0001dc5a <bt_conn_get_security>:
}
   1dc5a:	7a40      	ldrb	r0, [r0, #9]
   1dc5c:	4770      	bx	lr

0001dc5e <bt_conn_is_peer_addr_le>:
{
   1dc5e:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   1dc60:	7a03      	ldrb	r3, [r0, #8]
   1dc62:	428b      	cmp	r3, r1
{
   1dc64:	4604      	mov	r4, r0
   1dc66:	4615      	mov	r5, r2
	if (id != conn->id) {
   1dc68:	d115      	bne.n	1dc96 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   1dc6a:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1dc6e:	2207      	movs	r2, #7
   1dc70:	4628      	mov	r0, r5
   1dc72:	f7ff f807 	bl	1cc84 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   1dc76:	b180      	cbz	r0, 1dc9a <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   1dc78:	78e3      	ldrb	r3, [r4, #3]
   1dc7a:	2207      	movs	r2, #7
   1dc7c:	b943      	cbnz	r3, 1dc90 <bt_conn_is_peer_addr_le+0x32>
   1dc7e:	f104 0196 	add.w	r1, r4, #150	; 0x96
   1dc82:	4628      	mov	r0, r5
   1dc84:	f7fe fffe 	bl	1cc84 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   1dc88:	fab0 f080 	clz	r0, r0
   1dc8c:	0940      	lsrs	r0, r0, #5
}
   1dc8e:	bd38      	pop	{r3, r4, r5, pc}
   1dc90:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   1dc94:	e7f5      	b.n	1dc82 <bt_conn_is_peer_addr_le+0x24>
		return false;
   1dc96:	2000      	movs	r0, #0
   1dc98:	e7f9      	b.n	1dc8e <bt_conn_is_peer_addr_le+0x30>
		return true;
   1dc9a:	2001      	movs	r0, #1
   1dc9c:	e7f7      	b.n	1dc8e <bt_conn_is_peer_addr_le+0x30>

0001dc9e <bt_conn_exists_le>:
{
   1dc9e:	b508      	push	{r3, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   1dca0:	f7f6 fca0 	bl	145e4 <bt_conn_lookup_addr_le>
	if (conn) {
   1dca4:	b110      	cbz	r0, 1dcac <bt_conn_exists_le+0xe>
		bt_conn_unref(conn);
   1dca6:	f7ff ff3f 	bl	1db28 <bt_conn_unref>
		return true;
   1dcaa:	2001      	movs	r0, #1
}
   1dcac:	bd08      	pop	{r3, pc}

0001dcae <bt_conn_get_dst>:
}
   1dcae:	3088      	adds	r0, #136	; 0x88
   1dcb0:	4770      	bx	lr

0001dcb2 <bt_conn_le_conn_update>:
{
   1dcb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1dcb4:	4607      	mov	r7, r0
   1dcb6:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   1dcb8:	f242 0013 	movw	r0, #8211	; 0x2013
   1dcbc:	210e      	movs	r1, #14
   1dcbe:	f7f5 f821 	bl	12d04 <bt_hci_cmd_create>
	if (!buf) {
   1dcc2:	4606      	mov	r6, r0
   1dcc4:	b1d0      	cbz	r0, 1dcfc <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   1dcc6:	210e      	movs	r1, #14
   1dcc8:	3008      	adds	r0, #8
   1dcca:	f001 ff3e 	bl	1fb4a <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   1dcce:	220e      	movs	r2, #14
   1dcd0:	4604      	mov	r4, r0
   1dcd2:	2100      	movs	r1, #0
   1dcd4:	f7fe fff2 	bl	1ccbc <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1dcd8:	883b      	ldrh	r3, [r7, #0]
   1dcda:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1dcdc:	882b      	ldrh	r3, [r5, #0]
   1dcde:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1dce0:	886b      	ldrh	r3, [r5, #2]
   1dce2:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   1dce4:	88ab      	ldrh	r3, [r5, #4]
   1dce6:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   1dce8:	88eb      	ldrh	r3, [r5, #6]
   1dcea:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1dcec:	4631      	mov	r1, r6
   1dcee:	2200      	movs	r2, #0
}
   1dcf0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1dcf4:	f242 0013 	movw	r0, #8211	; 0x2013
   1dcf8:	f7f5 b860 	b.w	12dbc <bt_hci_cmd_send_sync>
}
   1dcfc:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1dd00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001dd02 <l2cap_connected>:
}
   1dd02:	4770      	bx	lr

0001dd04 <l2cap_disconnected>:
	(void)k_work_cancel_delayable(&chan->rtx_work);
   1dd04:	3010      	adds	r0, #16
   1dd06:	f002 bbdd 	b.w	204c4 <k_work_cancel_delayable>

0001dd0a <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   1dd0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1dd0c:	4607      	mov	r7, r0
   1dd0e:	460e      	mov	r6, r1
   1dd10:	4615      	mov	r5, r2
	return bt_conn_create_pdu_timeout(pool,
   1dd12:	2300      	movs	r3, #0
   1dd14:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1dd18:	2104      	movs	r1, #4
   1dd1a:	2000      	movs	r0, #0
   1dd1c:	f7f6 fd52 	bl	147c4 <bt_conn_create_pdu_timeout>
	if (!buf) {
   1dd20:	4604      	mov	r4, r0
   1dd22:	b130      	cbz	r0, 1dd32 <l2cap_create_le_sig_pdu.constprop.0+0x28>
   1dd24:	2104      	movs	r1, #4
   1dd26:	3008      	adds	r0, #8
   1dd28:	f001 ff0f 	bl	1fb4a <net_buf_simple_add>
	hdr->code = code;
   1dd2c:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
   1dd2e:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   1dd30:	8045      	strh	r5, [r0, #2]
}
   1dd32:	4620      	mov	r0, r4
   1dd34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001dd36 <bt_l2cap_chan_remove>:
	return list->head;
   1dd36:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1dd38:	b530      	push	{r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1dd3a:	b17b      	cbz	r3, 1dd5c <bt_l2cap_chan_remove+0x26>
   1dd3c:	3b08      	subs	r3, #8
   1dd3e:	2200      	movs	r2, #0
   1dd40:	b163      	cbz	r3, 1dd5c <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   1dd42:	428b      	cmp	r3, r1
			sys_slist_remove(&conn->channels, prev, &chan->node);
   1dd44:	f103 0408 	add.w	r4, r3, #8
		if (chan == ch) {
   1dd48:	d10e      	bne.n	1dd68 <bt_l2cap_chan_remove+0x32>
	return node->next;
   1dd4a:	6899      	ldr	r1, [r3, #8]
	return list->tail;
   1dd4c:	6d45      	ldr	r5, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   1dd4e:	b932      	cbnz	r2, 1dd5e <bt_l2cap_chan_remove+0x28>
   1dd50:	42ac      	cmp	r4, r5
	list->head = node;
   1dd52:	6501      	str	r1, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
   1dd54:	d100      	bne.n	1dd58 <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   1dd56:	6541      	str	r1, [r0, #84]	; 0x54
	parent->next = child;
   1dd58:	2200      	movs	r2, #0
   1dd5a:	609a      	str	r2, [r3, #8]
}
   1dd5c:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_REMOVE(slist, snode)
   1dd5e:	42ac      	cmp	r4, r5
	parent->next = child;
   1dd60:	6011      	str	r1, [r2, #0]
	list->tail = node;
   1dd62:	bf08      	it	eq
   1dd64:	6542      	streq	r2, [r0, #84]	; 0x54
}
   1dd66:	e7f7      	b.n	1dd58 <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1dd68:	2c00      	cmp	r4, #0
   1dd6a:	d0f7      	beq.n	1dd5c <bt_l2cap_chan_remove+0x26>
	return node->next;
   1dd6c:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1dd6e:	2b00      	cmp	r3, #0
   1dd70:	d0f4      	beq.n	1dd5c <bt_l2cap_chan_remove+0x26>
   1dd72:	3b08      	subs	r3, #8
   1dd74:	4622      	mov	r2, r4
   1dd76:	e7e3      	b.n	1dd40 <bt_l2cap_chan_remove+0xa>

0001dd78 <bt_l2cap_chan_del>:
{
   1dd78:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   1dd7a:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   1dd7e:	4604      	mov	r4, r0
	if (!chan->conn) {
   1dd80:	b123      	cbz	r3, 1dd8c <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   1dd82:	686b      	ldr	r3, [r5, #4]
   1dd84:	b103      	cbz	r3, 1dd88 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   1dd86:	4798      	blx	r3
	chan->conn = NULL;
   1dd88:	2300      	movs	r3, #0
   1dd8a:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   1dd8c:	68e3      	ldr	r3, [r4, #12]
   1dd8e:	b10b      	cbz	r3, 1dd94 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   1dd90:	4620      	mov	r0, r4
   1dd92:	4798      	blx	r3
	if (ops->released) {
   1dd94:	69eb      	ldr	r3, [r5, #28]
   1dd96:	b11b      	cbz	r3, 1dda0 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   1dd98:	4620      	mov	r0, r4
}
   1dd9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   1dd9e:	4718      	bx	r3
}
   1dda0:	bd70      	pop	{r4, r5, r6, pc}

0001dda2 <l2cap_rtx_timeout>:
{
   1dda2:	b510      	push	{r4, lr}
	bt_l2cap_chan_remove(conn, &chan->chan);
   1dda4:	f1a0 0410 	sub.w	r4, r0, #16
   1dda8:	4621      	mov	r1, r4
   1ddaa:	f850 0c10 	ldr.w	r0, [r0, #-16]
   1ddae:	f7ff ffc2 	bl	1dd36 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
   1ddb2:	4620      	mov	r0, r4
}
   1ddb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_l2cap_chan_del(&chan->chan);
   1ddb8:	f7ff bfde 	b.w	1dd78 <bt_l2cap_chan_del>

0001ddbc <bt_l2cap_disconnected>:
	return list->head;
   1ddbc:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1ddbe:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1ddc0:	b18b      	cbz	r3, 1dde6 <bt_l2cap_disconnected+0x2a>
   1ddc2:	f1b3 0008 	subs.w	r0, r3, #8
   1ddc6:	d00e      	beq.n	1dde6 <bt_l2cap_disconnected+0x2a>
	return node->next;
   1ddc8:	681c      	ldr	r4, [r3, #0]
   1ddca:	b104      	cbz	r4, 1ddce <bt_l2cap_disconnected+0x12>
   1ddcc:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   1ddce:	f7ff ffd3 	bl	1dd78 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1ddd2:	b144      	cbz	r4, 1dde6 <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ddd4:	f114 0308 	adds.w	r3, r4, #8
   1ddd8:	d002      	beq.n	1dde0 <bt_l2cap_disconnected+0x24>
	return node->next;
   1ddda:	68a3      	ldr	r3, [r4, #8]
   1dddc:	b103      	cbz	r3, 1dde0 <bt_l2cap_disconnected+0x24>
   1ddde:	3b08      	subs	r3, #8
{
   1dde0:	4620      	mov	r0, r4
   1dde2:	461c      	mov	r4, r3
   1dde4:	e7f3      	b.n	1ddce <bt_l2cap_disconnected+0x12>
}
   1dde6:	bd10      	pop	{r4, pc}

0001dde8 <bt_l2cap_security_changed>:
{
   1dde8:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   1ddea:	6d03      	ldr	r3, [r0, #80]	; 0x50
   1ddec:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1ddee:	b1a3      	cbz	r3, 1de1a <bt_l2cap_security_changed+0x32>
   1ddf0:	f1b3 0008 	subs.w	r0, r3, #8
   1ddf4:	d011      	beq.n	1de1a <bt_l2cap_security_changed+0x32>
	return node->next;
   1ddf6:	681c      	ldr	r4, [r3, #0]
   1ddf8:	b104      	cbz	r4, 1ddfc <bt_l2cap_security_changed+0x14>
   1ddfa:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   1ddfc:	6843      	ldr	r3, [r0, #4]
   1ddfe:	689b      	ldr	r3, [r3, #8]
   1de00:	b10b      	cbz	r3, 1de06 <bt_l2cap_security_changed+0x1e>
			chan->ops->encrypt_change(chan, hci_status);
   1de02:	4629      	mov	r1, r5
   1de04:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1de06:	b144      	cbz	r4, 1de1a <bt_l2cap_security_changed+0x32>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1de08:	f114 0308 	adds.w	r3, r4, #8
   1de0c:	d002      	beq.n	1de14 <bt_l2cap_security_changed+0x2c>
	return node->next;
   1de0e:	68a3      	ldr	r3, [r4, #8]
   1de10:	b103      	cbz	r3, 1de14 <bt_l2cap_security_changed+0x2c>
   1de12:	3b08      	subs	r3, #8
{
   1de14:	4620      	mov	r0, r4
   1de16:	461c      	mov	r4, r3
   1de18:	e7f0      	b.n	1ddfc <bt_l2cap_security_changed+0x14>
}
   1de1a:	bd38      	pop	{r3, r4, r5, pc}

0001de1c <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   1de1c:	3104      	adds	r1, #4
   1de1e:	f7f6 bcd1 	b.w	147c4 <bt_conn_create_pdu_timeout>

0001de22 <bt_l2cap_send_cb>:
{
   1de22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1de26:	4614      	mov	r4, r2
   1de28:	4605      	mov	r5, r0
   1de2a:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   1de2c:	f102 0008 	add.w	r0, r2, #8
   1de30:	2104      	movs	r1, #4
   1de32:	461e      	mov	r6, r3
   1de34:	f8dd 8018 	ldr.w	r8, [sp, #24]
   1de38:	f001 fe9e 	bl	1fb78 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1de3c:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   1de3e:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1de40:	3a04      	subs	r2, #4
   1de42:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1de44:	4643      	mov	r3, r8
   1de46:	4632      	mov	r2, r6
   1de48:	4621      	mov	r1, r4
   1de4a:	4628      	mov	r0, r5
}
   1de4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1de50:	f7f6 b9fa 	b.w	14248 <bt_conn_send_cb>

0001de54 <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
   1de54:	898b      	ldrh	r3, [r1, #12]
   1de56:	2b03      	cmp	r3, #3
{
   1de58:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1de5a:	4605      	mov	r5, r0
   1de5c:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1de5e:	d927      	bls.n	1deb0 <l2cap_recv+0x5c>
	return net_buf_simple_pull_mem(&buf->b, len);
   1de60:	2104      	movs	r1, #4
   1de62:	f104 0008 	add.w	r0, r4, #8
   1de66:	f001 fe97 	bl	1fb98 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   1de6a:	89a3      	ldrh	r3, [r4, #12]
   1de6c:	8842      	ldrh	r2, [r0, #2]
   1de6e:	429a      	cmp	r2, r3
   1de70:	d11e      	bne.n	1deb0 <l2cap_recv+0x5c>
	if (!hdr->ident) {
   1de72:	7841      	ldrb	r1, [r0, #1]
   1de74:	b1e1      	cbz	r1, 1deb0 <l2cap_recv+0x5c>
	switch (hdr->code) {
   1de76:	7803      	ldrb	r3, [r0, #0]
   1de78:	2b01      	cmp	r3, #1
   1de7a:	d019      	beq.n	1deb0 <l2cap_recv+0x5c>
   1de7c:	2b13      	cmp	r3, #19
   1de7e:	d017      	beq.n	1deb0 <l2cap_recv+0x5c>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1de80:	2202      	movs	r2, #2
   1de82:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
   1de84:	682d      	ldr	r5, [r5, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1de86:	f7ff ff40 	bl	1dd0a <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   1de8a:	4604      	mov	r4, r0
   1de8c:	b180      	cbz	r0, 1deb0 <l2cap_recv+0x5c>
	return net_buf_simple_add(&buf->b, len);
   1de8e:	2102      	movs	r1, #2
   1de90:	3008      	adds	r0, #8
   1de92:	f001 fe5a 	bl	1fb4a <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   1de96:	2300      	movs	r3, #0
   1de98:	7003      	strb	r3, [r0, #0]
   1de9a:	7043      	strb	r3, [r0, #1]
   1de9c:	4622      	mov	r2, r4
   1de9e:	9300      	str	r3, [sp, #0]
   1dea0:	2105      	movs	r1, #5
   1dea2:	4628      	mov	r0, r5
   1dea4:	f7ff ffbd 	bl	1de22 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   1dea8:	b110      	cbz	r0, 1deb0 <l2cap_recv+0x5c>
		net_buf_unref(buf);
   1deaa:	4620      	mov	r0, r4
   1deac:	f7f9 fb04 	bl	174b8 <net_buf_unref>
}
   1deb0:	2000      	movs	r0, #0
   1deb2:	b003      	add	sp, #12
   1deb4:	bd30      	pop	{r4, r5, pc}

0001deb6 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   1deb6:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1deb8:	b160      	cbz	r0, 1ded4 <bt_l2cap_le_lookup_tx_cid+0x1e>
   1deba:	3808      	subs	r0, #8
   1debc:	b900      	cbnz	r0, 1dec0 <bt_l2cap_le_lookup_tx_cid+0xa>
   1debe:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   1dec0:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
   1dec4:	428b      	cmp	r3, r1
   1dec6:	d005      	beq.n	1ded4 <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1dec8:	f110 0308 	adds.w	r3, r0, #8
   1decc:	d001      	beq.n	1ded2 <bt_l2cap_le_lookup_tx_cid+0x1c>
	return node->next;
   1dece:	6880      	ldr	r0, [r0, #8]
   1ded0:	e7f2      	b.n	1deb8 <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   1ded2:	4618      	mov	r0, r3
}
   1ded4:	4770      	bx	lr

0001ded6 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   1ded6:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1ded8:	b160      	cbz	r0, 1def4 <bt_l2cap_le_lookup_rx_cid+0x1e>
   1deda:	3808      	subs	r0, #8
   1dedc:	b900      	cbnz	r0, 1dee0 <bt_l2cap_le_lookup_rx_cid+0xa>
   1dede:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1dee0:	f8b0 3070 	ldrh.w	r3, [r0, #112]	; 0x70
   1dee4:	428b      	cmp	r3, r1
   1dee6:	d005      	beq.n	1def4 <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1dee8:	f110 0308 	adds.w	r3, r0, #8
   1deec:	d001      	beq.n	1def2 <bt_l2cap_le_lookup_rx_cid+0x1c>
	return node->next;
   1deee:	6880      	ldr	r0, [r0, #8]
   1def0:	e7f2      	b.n	1ded8 <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   1def2:	4618      	mov	r0, r3
}
   1def4:	4770      	bx	lr

0001def6 <bt_l2cap_recv>:
{
   1def6:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   1def8:	898b      	ldrh	r3, [r1, #12]
   1defa:	2b03      	cmp	r3, #3
{
   1defc:	4605      	mov	r5, r0
   1defe:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1df00:	d804      	bhi.n	1df0c <bt_l2cap_recv+0x16>
	net_buf_unref(buf);
   1df02:	4620      	mov	r0, r4
}
   1df04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   1df08:	f7f9 bad6 	b.w	174b8 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   1df0c:	2104      	movs	r1, #4
   1df0e:	f104 0008 	add.w	r0, r4, #8
   1df12:	f001 fe41 	bl	1fb98 <net_buf_simple_pull_mem>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   1df16:	8841      	ldrh	r1, [r0, #2]
   1df18:	4628      	mov	r0, r5
   1df1a:	f7ff ffdc 	bl	1ded6 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1df1e:	2800      	cmp	r0, #0
   1df20:	d0ef      	beq.n	1df02 <bt_l2cap_recv+0xc>
	chan->ops->recv(chan, buf);
   1df22:	6843      	ldr	r3, [r0, #4]
   1df24:	4621      	mov	r1, r4
   1df26:	691b      	ldr	r3, [r3, #16]
   1df28:	4798      	blx	r3
   1df2a:	e7ea      	b.n	1df02 <bt_l2cap_recv+0xc>

0001df2c <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   1df2c:	4770      	bx	lr

0001df2e <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   1df2e:	4603      	mov	r3, r0
	return list->head;
   1df30:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   1df32:	b128      	cbz	r0, 1df40 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1df34:	6859      	ldr	r1, [r3, #4]
	return node->next;
   1df36:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1df38:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1df3a:	4288      	cmp	r0, r1
	list->tail = node;
   1df3c:	bf08      	it	eq
   1df3e:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   1df40:	4770      	bx	lr

0001df42 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   1df42:	4603      	mov	r3, r0
	size_t bytes = 0;
   1df44:	2000      	movs	r0, #0

	while (buf) {
   1df46:	b903      	cbnz	r3, 1df4a <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   1df48:	4770      	bx	lr
		bytes += buf->len;
   1df4a:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   1df4c:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   1df4e:	4410      	add	r0, r2
		buf = buf->frags;
   1df50:	e7f9      	b.n	1df46 <net_buf_frags_len+0x4>

0001df52 <att_sent>:
	if (chan->ops->sent) {
   1df52:	684b      	ldr	r3, [r1, #4]
   1df54:	695b      	ldr	r3, [r3, #20]
{
   1df56:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   1df58:	b103      	cbz	r3, 1df5c <att_sent+0xa>
		chan->ops->sent(chan);
   1df5a:	4718      	bx	r3
}
   1df5c:	4770      	bx	lr

0001df5e <attr_read_type_cb>:
{
   1df5e:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   1df60:	68d4      	ldr	r4, [r2, #12]
   1df62:	7823      	ldrb	r3, [r4, #0]
   1df64:	3102      	adds	r1, #2
   1df66:	b913      	cbnz	r3, 1df6e <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   1df68:	7021      	strb	r1, [r4, #0]
	return true;
   1df6a:	2001      	movs	r0, #1
   1df6c:	e006      	b.n	1df7c <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   1df6e:	428b      	cmp	r3, r1
   1df70:	d0fb      	beq.n	1df6a <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   1df72:	8983      	ldrh	r3, [r0, #12]
   1df74:	3b02      	subs	r3, #2
   1df76:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   1df78:	2000      	movs	r0, #0
   1df7a:	6110      	str	r0, [r2, #16]
}
   1df7c:	bd10      	pop	{r4, pc}

0001df7e <att_prepare_write_req>:
}
   1df7e:	2006      	movs	r0, #6
   1df80:	4770      	bx	lr

0001df82 <att_op_get_type>:
	switch (op) {
   1df82:	281e      	cmp	r0, #30
   1df84:	d816      	bhi.n	1dfb4 <att_op_get_type+0x32>
   1df86:	b308      	cbz	r0, 1dfcc <att_op_get_type+0x4a>
   1df88:	1e43      	subs	r3, r0, #1
   1df8a:	2b1d      	cmp	r3, #29
   1df8c:	d81e      	bhi.n	1dfcc <att_op_get_type+0x4a>
   1df8e:	e8df f003 	tbb	[pc, r3]
   1df92:	2317      	.short	0x2317
   1df94:	23172317 	.word	0x23172317
   1df98:	23172317 	.word	0x23172317
   1df9c:	23172317 	.word	0x23172317
   1dfa0:	23172317 	.word	0x23172317
   1dfa4:	231d1d17 	.word	0x231d1d17
   1dfa8:	1d172317 	.word	0x1d172317
   1dfac:	0f1b1d19 	.word	0x0f1b1d19
   1dfb0:	2004      	movs	r0, #4
   1dfb2:	4770      	bx	lr
   1dfb4:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   1dfb8:	2b52      	cmp	r3, #82	; 0x52
   1dfba:	d107      	bne.n	1dfcc <att_op_get_type+0x4a>
		return ATT_COMMAND;
   1dfbc:	2000      	movs	r0, #0
}
   1dfbe:	4770      	bx	lr
		return ATT_RESPONSE;
   1dfc0:	2002      	movs	r0, #2
   1dfc2:	4770      	bx	lr
		return ATT_NOTIFICATION;
   1dfc4:	2003      	movs	r0, #3
   1dfc6:	4770      	bx	lr
		return ATT_INDICATION;
   1dfc8:	2005      	movs	r0, #5
   1dfca:	4770      	bx	lr
		return ATT_COMMAND;
   1dfcc:	f010 0f40 	tst.w	r0, #64	; 0x40
   1dfd0:	bf0c      	ite	eq
   1dfd2:	2006      	moveq	r0, #6
   1dfd4:	2000      	movne	r0, #0
   1dfd6:	4770      	bx	lr
		return ATT_REQUEST;
   1dfd8:	2001      	movs	r0, #1
   1dfda:	4770      	bx	lr

0001dfdc <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   1dfdc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1dfde:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1dfe2:	2300      	movs	r3, #0
   1dfe4:	9300      	str	r3, [sp, #0]
   1dfe6:	461a      	mov	r2, r3
   1dfe8:	f7f7 fd06 	bl	159f8 <bt_gatt_foreach_attr_type>
				  user_data);
}
   1dfec:	b005      	add	sp, #20
   1dfee:	f85d fb04 	ldr.w	pc, [sp], #4

0001dff2 <find_type_cb>:
{
   1dff2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
   1dff6:	f8d2 9000 	ldr.w	r9, [r2]
{
   1dffa:	b091      	sub	sp, #68	; 0x44
   1dffc:	4607      	mov	r7, r0
   1dffe:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1e000:	2500      	movs	r5, #0
   1e002:	f642 0301 	movw	r3, #10241	; 0x2801
   1e006:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   1e008:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1e00c:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   1e010:	a90b      	add	r1, sp, #44	; 0x2c
{
   1e012:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1e014:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1e018:	f7fe ff12 	bl	1ce40 <bt_uuid_cmp>
   1e01c:	2800      	cmp	r0, #0
   1e01e:	d079      	beq.n	1e114 <find_type_cb+0x122>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   1e020:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1e024:	6838      	ldr	r0, [r7, #0]
   1e026:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   1e02a:	a90b      	add	r1, sp, #44	; 0x2c
   1e02c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1e030:	f7fe ff06 	bl	1ce40 <bt_uuid_cmp>
   1e034:	b138      	cbz	r0, 1e046 <find_type_cb+0x54>
		if (data->group &&
   1e036:	68a3      	ldr	r3, [r4, #8]
   1e038:	b11b      	cbz	r3, 1e042 <find_type_cb+0x50>
   1e03a:	885a      	ldrh	r2, [r3, #2]
   1e03c:	42b2      	cmp	r2, r6
   1e03e:	d200      	bcs.n	1e042 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1e040:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   1e042:	2001      	movs	r0, #1
   1e044:	e009      	b.n	1e05a <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   1e046:	6861      	ldr	r1, [r4, #4]
   1e048:	4608      	mov	r0, r1
   1e04a:	f7ff ff7a 	bl	1df42 <net_buf_frags_len>
   1e04e:	f8b9 3086 	ldrh.w	r3, [r9, #134]	; 0x86
   1e052:	1a1b      	subs	r3, r3, r0
   1e054:	2b03      	cmp	r3, #3
   1e056:	d803      	bhi.n	1e060 <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   1e058:	2000      	movs	r0, #0
}
   1e05a:	b011      	add	sp, #68	; 0x44
   1e05c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   1e060:	4608      	mov	r0, r1
   1e062:	f001 fd50 	bl	1fb06 <net_buf_frag_last>
   1e066:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   1e068:	6860      	ldr	r0, [r4, #4]
   1e06a:	f7ff ff6a 	bl	1df42 <net_buf_frags_len>
   1e06e:	f8b9 a086 	ldrh.w	sl, [r9, #134]	; 0x86
	return net_buf_simple_tailroom(&buf->b);
   1e072:	f105 0b08 	add.w	fp, r5, #8
   1e076:	ebaa 0a00 	sub.w	sl, sl, r0
   1e07a:	4658      	mov	r0, fp
   1e07c:	f001 fda0 	bl	1fbc0 <net_buf_simple_tailroom>
   1e080:	4582      	cmp	sl, r0
   1e082:	d23f      	bcs.n	1e104 <find_type_cb+0x112>
   1e084:	6860      	ldr	r0, [r4, #4]
   1e086:	f7ff ff5c 	bl	1df42 <net_buf_frags_len>
   1e08a:	f8b9 3086 	ldrh.w	r3, [r9, #134]	; 0x86
   1e08e:	1a18      	subs	r0, r3, r0
	if (!len) {
   1e090:	b970      	cbnz	r0, 1e0b0 <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   1e092:	6863      	ldr	r3, [r4, #4]
   1e094:	7998      	ldrb	r0, [r3, #6]
   1e096:	f7f9 f951 	bl	1733c <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1e09a:	2200      	movs	r2, #0
   1e09c:	2300      	movs	r3, #0
   1e09e:	f001 fcfe 	bl	1fa9e <net_buf_alloc_fixed>
		if (!frag) {
   1e0a2:	4605      	mov	r5, r0
   1e0a4:	2800      	cmp	r0, #0
   1e0a6:	d0d7      	beq.n	1e058 <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   1e0a8:	4601      	mov	r1, r0
   1e0aa:	6860      	ldr	r0, [r4, #4]
   1e0ac:	f001 fd3c 	bl	1fb28 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   1e0b0:	2300      	movs	r3, #0
   1e0b2:	9300      	str	r3, [sp, #0]
   1e0b4:	f8d7 9004 	ldr.w	r9, [r7, #4]
   1e0b8:	4639      	mov	r1, r7
   1e0ba:	2310      	movs	r3, #16
   1e0bc:	aa02      	add	r2, sp, #8
   1e0be:	4640      	mov	r0, r8
   1e0c0:	47c8      	blx	r9
	if (read < 0) {
   1e0c2:	1e07      	subs	r7, r0, #0
   1e0c4:	db26      	blt.n	1e114 <find_type_cb+0x122>
	if (read != data->value_len) {
   1e0c6:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1e0c8:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   1e0ca:	42ba      	cmp	r2, r7
   1e0cc:	d01e      	beq.n	1e10c <find_type_cb+0x11a>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1e0ce:	4601      	mov	r1, r0
   1e0d0:	a80b      	add	r0, sp, #44	; 0x2c
   1e0d2:	f7fe fee3 	bl	1ce9c <bt_uuid_create>
   1e0d6:	b1e8      	cbz	r0, 1e114 <find_type_cb+0x122>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   1e0d8:	b2fa      	uxtb	r2, r7
   1e0da:	a902      	add	r1, sp, #8
   1e0dc:	a806      	add	r0, sp, #24
   1e0de:	f7fe fedd 	bl	1ce9c <bt_uuid_create>
   1e0e2:	b1b8      	cbz	r0, 1e114 <find_type_cb+0x122>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   1e0e4:	a906      	add	r1, sp, #24
   1e0e6:	a80b      	add	r0, sp, #44	; 0x2c
   1e0e8:	f7fe feaa 	bl	1ce40 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   1e0ec:	b990      	cbnz	r0, 1e114 <find_type_cb+0x122>
	data->err = 0x00;
   1e0ee:	2300      	movs	r3, #0
   1e0f0:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   1e0f2:	2104      	movs	r1, #4
   1e0f4:	f105 0008 	add.w	r0, r5, #8
   1e0f8:	f001 fd27 	bl	1fb4a <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   1e0fc:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1e0fe:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1e100:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   1e102:	e79e      	b.n	1e042 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   1e104:	4658      	mov	r0, fp
   1e106:	f001 fd5b 	bl	1fbc0 <net_buf_simple_tailroom>
   1e10a:	e7c1      	b.n	1e090 <find_type_cb+0x9e>
	} else if (memcmp(data->value, uuid, read)) {
   1e10c:	a902      	add	r1, sp, #8
   1e10e:	f7fe fdb9 	bl	1cc84 <memcmp>
   1e112:	e7eb      	b.n	1e0ec <find_type_cb+0xfa>
	data->group = NULL;
   1e114:	2300      	movs	r3, #0
   1e116:	60a3      	str	r3, [r4, #8]
   1e118:	e793      	b.n	1e042 <find_type_cb+0x50>

0001e11a <find_info_cb>:
{
   1e11a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   1e11c:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   1e11e:	6817      	ldr	r7, [r2, #0]
{
   1e120:	4605      	mov	r5, r0
   1e122:	460e      	mov	r6, r1
   1e124:	4614      	mov	r4, r2
	if (!data->rsp) {
   1e126:	b963      	cbnz	r3, 1e142 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   1e128:	6850      	ldr	r0, [r2, #4]
   1e12a:	2101      	movs	r1, #1
   1e12c:	3008      	adds	r0, #8
   1e12e:	f001 fd0c 	bl	1fb4a <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1e132:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1e134:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1e136:	781b      	ldrb	r3, [r3, #0]
   1e138:	2b00      	cmp	r3, #0
   1e13a:	bf0c      	ite	eq
   1e13c:	2301      	moveq	r3, #1
   1e13e:	2302      	movne	r3, #2
   1e140:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   1e142:	68a3      	ldr	r3, [r4, #8]
   1e144:	781b      	ldrb	r3, [r3, #0]
   1e146:	2b01      	cmp	r3, #1
   1e148:	d003      	beq.n	1e152 <find_info_cb+0x38>
   1e14a:	2b02      	cmp	r3, #2
   1e14c:	d019      	beq.n	1e182 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   1e14e:	2000      	movs	r0, #0
   1e150:	e016      	b.n	1e180 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   1e152:	682b      	ldr	r3, [r5, #0]
   1e154:	781b      	ldrb	r3, [r3, #0]
   1e156:	2b00      	cmp	r3, #0
   1e158:	d1f9      	bne.n	1e14e <find_info_cb+0x34>
   1e15a:	6860      	ldr	r0, [r4, #4]
   1e15c:	2104      	movs	r1, #4
   1e15e:	3008      	adds	r0, #8
   1e160:	f001 fcf3 	bl	1fb4a <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1e164:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   1e166:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1e168:	885b      	ldrh	r3, [r3, #2]
   1e16a:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   1e16c:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   1e16e:	8006      	strh	r6, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   1e170:	899b      	ldrh	r3, [r3, #12]
   1e172:	f8b7 0086 	ldrh.w	r0, [r7, #134]	; 0x86
   1e176:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1e178:	2804      	cmp	r0, #4
   1e17a:	bf94      	ite	ls
   1e17c:	2000      	movls	r0, #0
   1e17e:	2001      	movhi	r0, #1
}
   1e180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   1e182:	682b      	ldr	r3, [r5, #0]
   1e184:	781b      	ldrb	r3, [r3, #0]
   1e186:	2b02      	cmp	r3, #2
   1e188:	d1e1      	bne.n	1e14e <find_info_cb+0x34>
   1e18a:	6860      	ldr	r0, [r4, #4]
   1e18c:	2112      	movs	r1, #18
   1e18e:	3008      	adds	r0, #8
   1e190:	f001 fcdb 	bl	1fb4a <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1e194:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   1e196:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1e198:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   1e19a:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1e19e:	3101      	adds	r1, #1
   1e1a0:	f7fe fd81 	bl	1cca6 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   1e1a4:	6863      	ldr	r3, [r4, #4]
   1e1a6:	f8b7 0086 	ldrh.w	r0, [r7, #134]	; 0x86
   1e1aa:	899b      	ldrh	r3, [r3, #12]
   1e1ac:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1e1ae:	2812      	cmp	r0, #18
   1e1b0:	e7e3      	b.n	1e17a <find_info_cb+0x60>

0001e1b2 <att_chan_mtu_updated>:
{
   1e1b2:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   1e1b4:	6806      	ldr	r6, [r0, #0]
	return list->head;
   1e1b6:	6a73      	ldr	r3, [r6, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1e1b8:	b30b      	cbz	r3, 1e1fe <att_chan_mtu_updated+0x4c>
   1e1ba:	f5b3 74a2 	subs.w	r4, r3, #324	; 0x144
   1e1be:	d01d      	beq.n	1e1fc <att_chan_mtu_updated+0x4a>
	return node->next;
   1e1c0:	681a      	ldr	r2, [r3, #0]
   1e1c2:	b10a      	cbz	r2, 1e1c8 <att_chan_mtu_updated+0x16>
   1e1c4:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
{
   1e1c8:	2300      	movs	r3, #0
   1e1ca:	4619      	mov	r1, r3
		if (chan == updated_chan) {
   1e1cc:	42a0      	cmp	r0, r4
   1e1ce:	d009      	beq.n	1e1e4 <att_chan_mtu_updated+0x32>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   1e1d0:	f8b4 5086 	ldrh.w	r5, [r4, #134]	; 0x86
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   1e1d4:	f8b4 407a 	ldrh.w	r4, [r4, #122]	; 0x7a
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   1e1d8:	42a9      	cmp	r1, r5
   1e1da:	bf38      	it	cc
   1e1dc:	4629      	movcc	r1, r5
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   1e1de:	42a3      	cmp	r3, r4
   1e1e0:	bf38      	it	cc
   1e1e2:	4623      	movcc	r3, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1e1e4:	b162      	cbz	r2, 1e200 <att_chan_mtu_updated+0x4e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1e1e6:	f512 75a2 	adds.w	r5, r2, #324	; 0x144
   1e1ea:	d004      	beq.n	1e1f6 <att_chan_mtu_updated+0x44>
	return node->next;
   1e1ec:	f8d2 5144 	ldr.w	r5, [r2, #324]	; 0x144
   1e1f0:	b10d      	cbz	r5, 1e1f6 <att_chan_mtu_updated+0x44>
   1e1f2:	f5a5 75a2 	sub.w	r5, r5, #324	; 0x144
{
   1e1f6:	4614      	mov	r4, r2
   1e1f8:	462a      	mov	r2, r5
   1e1fa:	e7e7      	b.n	1e1cc <att_chan_mtu_updated+0x1a>
   1e1fc:	4623      	mov	r3, r4
   1e1fe:	4619      	mov	r1, r3
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   1e200:	f8b0 4086 	ldrh.w	r4, [r0, #134]	; 0x86
	    (updated_chan->chan.rx.mtu > max_rx)) {
   1e204:	f8b0 207a 	ldrh.w	r2, [r0, #122]	; 0x7a
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   1e208:	428c      	cmp	r4, r1
   1e20a:	d801      	bhi.n	1e210 <att_chan_mtu_updated+0x5e>
   1e20c:	429a      	cmp	r2, r3
   1e20e:	d909      	bls.n	1e224 <att_chan_mtu_updated+0x72>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   1e210:	429a      	cmp	r2, r3
   1e212:	bf38      	it	cc
   1e214:	461a      	movcc	r2, r3
   1e216:	42a1      	cmp	r1, r4
   1e218:	6830      	ldr	r0, [r6, #0]
   1e21a:	bf38      	it	cc
   1e21c:	4621      	movcc	r1, r4
}
   1e21e:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   1e220:	f7f7 bf46 	b.w	160b0 <bt_gatt_att_max_mtu_changed>
}
   1e224:	bc70      	pop	{r4, r5, r6}
   1e226:	4770      	bx	lr

0001e228 <attr_read_group_cb>:
	if (!data->rsp->len) {
   1e228:	68d0      	ldr	r0, [r2, #12]
   1e22a:	7803      	ldrb	r3, [r0, #0]
   1e22c:	3104      	adds	r1, #4
   1e22e:	b913      	cbnz	r3, 1e236 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   1e230:	7001      	strb	r1, [r0, #0]
	return true;
   1e232:	2001      	movs	r0, #1
}
   1e234:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   1e236:	428b      	cmp	r3, r1
   1e238:	d0fb      	beq.n	1e232 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   1e23a:	6891      	ldr	r1, [r2, #8]
   1e23c:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   1e23e:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   1e240:	3b04      	subs	r3, #4
   1e242:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   1e244:	6110      	str	r0, [r2, #16]
		return false;
   1e246:	4770      	bx	lr

0001e248 <att_get>:
{
   1e248:	b508      	push	{r3, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1e24a:	7b43      	ldrb	r3, [r0, #13]
   1e24c:	2b07      	cmp	r3, #7
   1e24e:	d001      	beq.n	1e254 <att_get+0xc>
		return NULL;
   1e250:	2000      	movs	r0, #0
}
   1e252:	bd08      	pop	{r3, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   1e254:	2104      	movs	r1, #4
   1e256:	f7ff fe3e 	bl	1ded6 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1e25a:	2800      	cmp	r0, #0
   1e25c:	d0f8      	beq.n	1e250 <att_get+0x8>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e25e:	f3bf 8f5b 	dmb	ish
   1e262:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
   1e266:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   1e26a:	075b      	lsls	r3, r3, #29
   1e26c:	d4f0      	bmi.n	1e250 <att_get+0x8>
	return att_chan->att;
   1e26e:	f850 0c08 	ldr.w	r0, [r0, #-8]
   1e272:	e7ee      	b.n	1e252 <att_get+0xa>

0001e274 <chan_req_sent>:
	if (chan->req) {
   1e274:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   1e278:	b133      	cbz	r3, 1e288 <chan_req_sent+0x14>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   1e27a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1e27e:	2300      	movs	r3, #0
   1e280:	f500 7088 	add.w	r0, r0, #272	; 0x110
   1e284:	f7fb bc7e 	b.w	19b84 <k_work_reschedule>
}
   1e288:	4770      	bx	lr

0001e28a <write_cb>:
{
   1e28a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1e28c:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   1e28e:	4601      	mov	r1, r0
{
   1e290:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   1e292:	222a      	movs	r2, #42	; 0x2a
   1e294:	6820      	ldr	r0, [r4, #0]
   1e296:	f000 fefa 	bl	1f08e <bt_gatt_check_perm>
   1e29a:	4605      	mov	r5, r0
   1e29c:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1e29e:	bb00      	cbnz	r0, 1e2e2 <write_cb+0x58>
	if (!data->req) {
   1e2a0:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   1e2a2:	68b7      	ldr	r7, [r6, #8]
   1e2a4:	68e2      	ldr	r2, [r4, #12]
   1e2a6:	6820      	ldr	r0, [r4, #0]
		flags |= BT_GATT_WRITE_FLAG_CMD;
   1e2a8:	2b00      	cmp	r3, #0
   1e2aa:	bf14      	ite	ne
   1e2ac:	2300      	movne	r3, #0
   1e2ae:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   1e2b0:	9301      	str	r3, [sp, #4]
   1e2b2:	8a63      	ldrh	r3, [r4, #18]
   1e2b4:	9300      	str	r3, [sp, #0]
   1e2b6:	4631      	mov	r1, r6
   1e2b8:	8a23      	ldrh	r3, [r4, #16]
   1e2ba:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   1e2bc:	1e03      	subs	r3, r0, #0
   1e2be:	db05      	blt.n	1e2cc <write_cb+0x42>
   1e2c0:	8a22      	ldrh	r2, [r4, #16]
   1e2c2:	4293      	cmp	r3, r2
   1e2c4:	d10b      	bne.n	1e2de <write_cb+0x54>
	data->err = 0U;
   1e2c6:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   1e2c8:	2501      	movs	r5, #1
   1e2ca:	e005      	b.n	1e2d8 <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   1e2cc:	f113 0fff 	cmn.w	r3, #255	; 0xff
   1e2d0:	d305      	bcc.n	1e2de <write_cb+0x54>
		return -err;
   1e2d2:	425b      	negs	r3, r3
   1e2d4:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   1e2d6:	7523      	strb	r3, [r4, #20]
}
   1e2d8:	4628      	mov	r0, r5
   1e2da:	b003      	add	sp, #12
   1e2dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   1e2de:	230e      	movs	r3, #14
   1e2e0:	e7f9      	b.n	1e2d6 <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   1e2e2:	2500      	movs	r5, #0
   1e2e4:	e7f8      	b.n	1e2d8 <write_cb+0x4e>

0001e2e6 <att_chan_read>:
{
   1e2e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e2ea:	4680      	mov	r8, r0
   1e2ec:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1e2ee:	4610      	mov	r0, r2
{
   1e2f0:	4699      	mov	r9, r3
   1e2f2:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1e2f4:	f7ff fe25 	bl	1df42 <net_buf_frags_len>
   1e2f8:	f8b8 3086 	ldrh.w	r3, [r8, #134]	; 0x86
   1e2fc:	4283      	cmp	r3, r0
{
   1e2fe:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1e300:	d97a      	bls.n	1e3f8 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   1e302:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1e306:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   1e308:	4630      	mov	r0, r6
   1e30a:	f001 fbfc 	bl	1fb06 <net_buf_frag_last>
	size_t len, total = 0;
   1e30e:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   1e312:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1e314:	4630      	mov	r0, r6
   1e316:	f7ff fe14 	bl	1df42 <net_buf_frags_len>
   1e31a:	f8b8 4086 	ldrh.w	r4, [r8, #134]	; 0x86
	return net_buf_simple_tailroom(&buf->b);
   1e31e:	f105 0708 	add.w	r7, r5, #8
   1e322:	1a24      	subs	r4, r4, r0
   1e324:	4638      	mov	r0, r7
   1e326:	f001 fc4b 	bl	1fbc0 <net_buf_simple_tailroom>
   1e32a:	4284      	cmp	r4, r0
   1e32c:	d211      	bcs.n	1e352 <att_chan_read+0x6c>
   1e32e:	4630      	mov	r0, r6
   1e330:	f7ff fe07 	bl	1df42 <net_buf_frags_len>
   1e334:	f8b8 4086 	ldrh.w	r4, [r8, #134]	; 0x86
   1e338:	1a24      	subs	r4, r4, r0
		if (!len) {
   1e33a:	bb34      	cbnz	r4, 1e38a <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   1e33c:	79b0      	ldrb	r0, [r6, #6]
   1e33e:	f7f8 fffd 	bl	1733c <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1e342:	2200      	movs	r2, #0
   1e344:	2300      	movs	r3, #0
   1e346:	f001 fbaa 	bl	1fa9e <net_buf_alloc_fixed>
			if (!frag) {
   1e34a:	4605      	mov	r5, r0
   1e34c:	b930      	cbnz	r0, 1e35c <att_chan_read+0x76>
	return total;
   1e34e:	4657      	mov	r7, sl
   1e350:	e02c      	b.n	1e3ac <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   1e352:	4638      	mov	r0, r7
   1e354:	f001 fc34 	bl	1fbc0 <net_buf_simple_tailroom>
   1e358:	4604      	mov	r4, r0
   1e35a:	e7ee      	b.n	1e33a <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   1e35c:	4601      	mov	r1, r0
   1e35e:	4630      	mov	r0, r6
   1e360:	f001 fbe2 	bl	1fb28 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1e364:	4630      	mov	r0, r6
   1e366:	f7ff fdec 	bl	1df42 <net_buf_frags_len>
   1e36a:	f8b8 4086 	ldrh.w	r4, [r8, #134]	; 0x86
   1e36e:	f105 0708 	add.w	r7, r5, #8
   1e372:	1a24      	subs	r4, r4, r0
   1e374:	4638      	mov	r0, r7
   1e376:	f001 fc23 	bl	1fbc0 <net_buf_simple_tailroom>
   1e37a:	4284      	cmp	r4, r0
   1e37c:	d21a      	bcs.n	1e3b4 <att_chan_read+0xce>
   1e37e:	4630      	mov	r0, r6
   1e380:	f7ff fddf 	bl	1df42 <net_buf_frags_len>
   1e384:	f8b8 4086 	ldrh.w	r4, [r8, #134]	; 0x86
   1e388:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   1e38a:	68a9      	ldr	r1, [r5, #8]
   1e38c:	89aa      	ldrh	r2, [r5, #12]
   1e38e:	f8db 7004 	ldr.w	r7, [fp, #4]
   1e392:	9803      	ldr	r0, [sp, #12]
   1e394:	f8cd 9000 	str.w	r9, [sp]
   1e398:	440a      	add	r2, r1
   1e39a:	b2a3      	uxth	r3, r4
   1e39c:	4659      	mov	r1, fp
   1e39e:	47b8      	blx	r7
		if (read < 0) {
   1e3a0:	1e07      	subs	r7, r0, #0
   1e3a2:	da0c      	bge.n	1e3be <att_chan_read+0xd8>
				return total;
   1e3a4:	f1ba 0f00 	cmp.w	sl, #0
   1e3a8:	bf18      	it	ne
   1e3aa:	4657      	movne	r7, sl
}
   1e3ac:	4638      	mov	r0, r7
   1e3ae:	b005      	add	sp, #20
   1e3b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e3b4:	4638      	mov	r0, r7
   1e3b6:	f001 fc03 	bl	1fbc0 <net_buf_simple_tailroom>
   1e3ba:	4604      	mov	r4, r0
   1e3bc:	e7e5      	b.n	1e38a <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   1e3be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1e3c0:	b993      	cbnz	r3, 1e3e8 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   1e3c2:	4639      	mov	r1, r7
   1e3c4:	f105 0008 	add.w	r0, r5, #8
   1e3c8:	f001 fbbf 	bl	1fb4a <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1e3cc:	4630      	mov	r0, r6
   1e3ce:	f7ff fdb8 	bl	1df42 <net_buf_frags_len>
   1e3d2:	f8b8 3086 	ldrh.w	r3, [r8, #134]	; 0x86
		offset += read;
   1e3d6:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1e3d8:	4283      	cmp	r3, r0
		total += read;
   1e3da:	44ba      	add	sl, r7
		offset += read;
   1e3dc:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1e3e0:	d9b5      	bls.n	1e34e <att_chan_read+0x68>
   1e3e2:	42a7      	cmp	r7, r4
   1e3e4:	d096      	beq.n	1e314 <att_chan_read+0x2e>
   1e3e6:	e7b2      	b.n	1e34e <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   1e3e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1e3ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1e3ec:	4639      	mov	r1, r7
   1e3ee:	4628      	mov	r0, r5
   1e3f0:	4798      	blx	r3
   1e3f2:	2800      	cmp	r0, #0
   1e3f4:	d1e5      	bne.n	1e3c2 <att_chan_read+0xdc>
   1e3f6:	e7aa      	b.n	1e34e <att_chan_read+0x68>
		return 0;
   1e3f8:	2700      	movs	r7, #0
   1e3fa:	e7d7      	b.n	1e3ac <att_chan_read+0xc6>

0001e3fc <chan_req_send>:
{
   1e3fc:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1e3fe:	688e      	ldr	r6, [r1, #8]
{
   1e400:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1e402:	4630      	mov	r0, r6
   1e404:	f7ff fd9d 	bl	1df42 <net_buf_frags_len>
   1e408:	f8b5 3086 	ldrh.w	r3, [r5, #134]	; 0x86
   1e40c:	4283      	cmp	r3, r0
{
   1e40e:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1e410:	d30a      	bcc.n	1e428 <chan_req_send+0x2c>
	req->buf = NULL;
   1e412:	2200      	movs	r2, #0
	chan->req = req;
   1e414:	f8c5 10f4 	str.w	r1, [r5, #244]	; 0xf4
	err = chan_send(chan, buf, NULL);
   1e418:	4628      	mov	r0, r5
	req->buf = NULL;
   1e41a:	608a      	str	r2, [r1, #8]
	err = chan_send(chan, buf, NULL);
   1e41c:	4631      	mov	r1, r6
   1e41e:	f7f6 fc15 	bl	14c4c <chan_send>
	if (err) {
   1e422:	b100      	cbz	r0, 1e426 <chan_req_send+0x2a>
		req->buf = buf;
   1e424:	60a6      	str	r6, [r4, #8]
}
   1e426:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   1e428:	f06f 0079 	mvn.w	r0, #121	; 0x79
   1e42c:	e7fb      	b.n	1e426 <chan_req_send+0x2a>

0001e42e <process_queue>:
{
   1e42e:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   1e430:	2200      	movs	r2, #0
{
   1e432:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   1e434:	2300      	movs	r3, #0
   1e436:	4608      	mov	r0, r1
{
   1e438:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   1e43a:	f001 fb35 	bl	1faa8 <net_buf_get>
	if (buf) {
   1e43e:	4605      	mov	r5, r0
   1e440:	b160      	cbz	r0, 1e45c <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   1e442:	4601      	mov	r1, r0
   1e444:	2200      	movs	r2, #0
   1e446:	4620      	mov	r0, r4
   1e448:	f7f6 fc00 	bl	14c4c <chan_send>
		if (err) {
   1e44c:	4604      	mov	r4, r0
   1e44e:	b118      	cbz	r0, 1e458 <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   1e450:	4629      	mov	r1, r5
   1e452:	4630      	mov	r0, r6
   1e454:	f001 ff3e 	bl	202d4 <k_queue_prepend>
}
   1e458:	4620      	mov	r0, r4
   1e45a:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   1e45c:	f06f 0401 	mvn.w	r4, #1
   1e460:	e7fa      	b.n	1e458 <process_queue+0x2a>

0001e462 <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1e462:	b510      	push	{r4, lr}
	return list->head;
   1e464:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1e466:	2200      	movs	r2, #0
   1e468:	b153      	cbz	r3, 1e480 <sys_slist_find_and_remove.isra.0+0x1e>
   1e46a:	428b      	cmp	r3, r1
   1e46c:	d10e      	bne.n	1e48c <sys_slist_find_and_remove.isra.0+0x2a>
	return node->next;
   1e46e:	680b      	ldr	r3, [r1, #0]
	return list->tail;
   1e470:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   1e472:	b932      	cbnz	r2, 1e482 <sys_slist_find_and_remove.isra.0+0x20>
   1e474:	42a1      	cmp	r1, r4
	list->head = node;
   1e476:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   1e478:	d100      	bne.n	1e47c <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   1e47a:	6043      	str	r3, [r0, #4]
	parent->next = child;
   1e47c:	2300      	movs	r3, #0
   1e47e:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1e480:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   1e482:	42a1      	cmp	r1, r4
	parent->next = child;
   1e484:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1e486:	bf08      	it	eq
   1e488:	6042      	streq	r2, [r0, #4]
}
   1e48a:	e7f7      	b.n	1e47c <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   1e48c:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1e48e:	681b      	ldr	r3, [r3, #0]
   1e490:	e7ea      	b.n	1e468 <sys_slist_find_and_remove.isra.0+0x6>

0001e492 <att_exec_write_req>:
   1e492:	2006      	movs	r0, #6
   1e494:	4770      	bx	lr

0001e496 <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1e496:	30f0      	adds	r0, #240	; 0xf0
   1e498:	f3bf 8f5b 	dmb	ish
   1e49c:	e850 3f00 	ldrex	r3, [r0]
   1e4a0:	f023 0301 	bic.w	r3, r3, #1
   1e4a4:	e840 3200 	strex	r2, r3, [r0]
   1e4a8:	2a00      	cmp	r2, #0
   1e4aa:	d1f7      	bne.n	1e49c <chan_rsp_sent+0x6>
   1e4ac:	f3bf 8f5b 	dmb	ish
}
   1e4b0:	4770      	bx	lr

0001e4b2 <chan_cfm_sent>:
   1e4b2:	30f0      	adds	r0, #240	; 0xf0
   1e4b4:	f3bf 8f5b 	dmb	ish
   1e4b8:	e850 3f00 	ldrex	r3, [r0]
   1e4bc:	f023 0302 	bic.w	r3, r3, #2
   1e4c0:	e840 3200 	strex	r2, r3, [r0]
   1e4c4:	2a00      	cmp	r2, #0
   1e4c6:	d1f7      	bne.n	1e4b8 <chan_cfm_sent+0x6>
   1e4c8:	f3bf 8f5b 	dmb	ish
}
   1e4cc:	4770      	bx	lr

0001e4ce <read_cb>:
{
   1e4ce:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   1e4d2:	f8d2 8000 	ldr.w	r8, [r2]
{
   1e4d6:	4606      	mov	r6, r0
	data->err = 0x00;
   1e4d8:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   1e4da:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   1e4de:	7317      	strb	r7, [r2, #12]
{
   1e4e0:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1e4e2:	4631      	mov	r1, r6
   1e4e4:	2215      	movs	r2, #21
   1e4e6:	f000 fdd2 	bl	1f08e <bt_gatt_check_perm>
   1e4ea:	4604      	mov	r4, r0
   1e4ec:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   1e4ee:	b9a0      	cbnz	r0, 1e51a <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   1e4f0:	e9cd 0000 	strd	r0, r0, [sp]
   1e4f4:	88ab      	ldrh	r3, [r5, #4]
   1e4f6:	68aa      	ldr	r2, [r5, #8]
   1e4f8:	4631      	mov	r1, r6
   1e4fa:	4640      	mov	r0, r8
   1e4fc:	f7ff fef3 	bl	1e2e6 <att_chan_read>
	if (ret < 0) {
   1e500:	1e03      	subs	r3, r0, #0
   1e502:	da0c      	bge.n	1e51e <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   1e504:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   1e508:	bf26      	itte	cs
   1e50a:	425b      	negcs	r3, r3
   1e50c:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   1e50e:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   1e510:	732b      	strb	r3, [r5, #12]
}
   1e512:	4620      	mov	r0, r4
   1e514:	b002      	add	sp, #8
   1e516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   1e51a:	463c      	mov	r4, r7
   1e51c:	e7f9      	b.n	1e512 <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   1e51e:	2401      	movs	r4, #1
   1e520:	e7f7      	b.n	1e512 <read_cb+0x44>

0001e522 <bt_att_sent>:
{
   1e522:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   1e524:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
	struct bt_att *att = chan->att;
   1e528:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   1e52c:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1e52e:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   1e532:	b10b      	cbz	r3, 1e538 <bt_att_sent+0x16>
		chan->sent(chan);
   1e534:	4638      	mov	r0, r7
   1e536:	4798      	blx	r3
   1e538:	f3bf 8f5b 	dmb	ish
   1e53c:	f105 03e8 	add.w	r3, r5, #232	; 0xe8
   1e540:	e853 2f00 	ldrex	r2, [r3]
   1e544:	f022 0210 	bic.w	r2, r2, #16
   1e548:	e843 2100 	strex	r1, r2, [r3]
   1e54c:	2900      	cmp	r1, #0
   1e54e:	d1f7      	bne.n	1e540 <bt_att_sent+0x1e>
   1e550:	f3bf 8f5b 	dmb	ish
	if (!att) {
   1e554:	b30c      	cbz	r4, 1e59a <bt_att_sent+0x78>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   1e556:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   1e55a:	b98b      	cbnz	r3, 1e580 <bt_att_sent+0x5e>
   1e55c:	6863      	ldr	r3, [r4, #4]
   1e55e:	b17b      	cbz	r3, 1e580 <bt_att_sent+0x5e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1e560:	1d20      	adds	r0, r4, #4
   1e562:	f7ff fce4 	bl	1df2e <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1e566:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1e568:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1e56a:	4638      	mov	r0, r7
   1e56c:	f7ff ff46 	bl	1e3fc <chan_req_send>
   1e570:	2800      	cmp	r0, #0
   1e572:	da12      	bge.n	1e59a <bt_att_sent+0x78>
	parent->next = child;
   1e574:	6863      	ldr	r3, [r4, #4]
   1e576:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1e578:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   1e57a:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   1e57c:	b903      	cbnz	r3, 1e580 <bt_att_sent+0x5e>
	list->tail = node;
   1e57e:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   1e580:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
   1e584:	4638      	mov	r0, r7
   1e586:	f7ff ff52 	bl	1e42e <process_queue>
	if (!err) {
   1e58a:	b130      	cbz	r0, 1e59a <bt_att_sent+0x78>
	(void)process_queue(chan, &att->tx_queue);
   1e58c:	f104 010c 	add.w	r1, r4, #12
   1e590:	4638      	mov	r0, r7
}
   1e592:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   1e596:	f7ff bf4a 	b.w	1e42e <process_queue>
}
   1e59a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001e59c <att_req_send_process>:
{
   1e59c:	b570      	push	{r4, r5, r6, lr}
   1e59e:	4605      	mov	r5, r0
	node = sys_slist_get(&att->reqs);
   1e5a0:	3004      	adds	r0, #4
   1e5a2:	f7ff fcc4 	bl	1df2e <sys_slist_get>
	if (!node) {
   1e5a6:	4606      	mov	r6, r0
   1e5a8:	b1c0      	cbz	r0, 1e5dc <att_req_send_process+0x40>
	return list->head;
   1e5aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1e5ac:	b153      	cbz	r3, 1e5c4 <att_req_send_process+0x28>
   1e5ae:	f5b3 70a2 	subs.w	r0, r3, #324	; 0x144
   1e5b2:	d007      	beq.n	1e5c4 <att_req_send_process+0x28>
	return node->next;
   1e5b4:	681c      	ldr	r4, [r3, #0]
   1e5b6:	b10c      	cbz	r4, 1e5bc <att_req_send_process+0x20>
   1e5b8:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
		if (!chan->req) {
   1e5bc:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   1e5c0:	b13b      	cbz	r3, 1e5d2 <att_req_send_process+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1e5c2:	b964      	cbnz	r4, 1e5de <att_req_send_process+0x42>
	parent->next = child;
   1e5c4:	686b      	ldr	r3, [r5, #4]
   1e5c6:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1e5c8:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   1e5ca:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   1e5cc:	b933      	cbnz	r3, 1e5dc <att_req_send_process+0x40>
	list->tail = node;
   1e5ce:	60ae      	str	r6, [r5, #8]
}
   1e5d0:	e004      	b.n	1e5dc <att_req_send_process+0x40>
	return chan_req_send(chan, req);
   1e5d2:	4631      	mov	r1, r6
   1e5d4:	f7ff ff12 	bl	1e3fc <chan_req_send>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1e5d8:	2800      	cmp	r0, #0
   1e5da:	dbf2      	blt.n	1e5c2 <att_req_send_process+0x26>
}
   1e5dc:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   1e5de:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   1e5e2:	d004      	beq.n	1e5ee <att_req_send_process+0x52>
	return node->next;
   1e5e4:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1e5e8:	b10b      	cbz	r3, 1e5ee <att_req_send_process+0x52>
   1e5ea:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   1e5ee:	4620      	mov	r0, r4
   1e5f0:	461c      	mov	r4, r3
   1e5f2:	e7e3      	b.n	1e5bc <att_req_send_process+0x20>

0001e5f4 <bt_att_status>:
{
   1e5f4:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e5f6:	f3bf 8f5b 	dmb	ish
   1e5fa:	680b      	ldr	r3, [r1, #0]
   1e5fc:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1e600:	07db      	lsls	r3, r3, #31
{
   1e602:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1e604:	d519      	bpl.n	1e63a <bt_att_status+0x46>
	if (!chan->att) {
   1e606:	f850 0c08 	ldr.w	r0, [r0, #-8]
   1e60a:	b1b0      	cbz	r0, 1e63a <bt_att_status+0x46>
	if (chan->req) {
   1e60c:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   1e610:	b99b      	cbnz	r3, 1e63a <bt_att_status+0x46>
	node = sys_slist_get(&chan->att->reqs);
   1e612:	3004      	adds	r0, #4
   1e614:	f7ff fc8b 	bl	1df2e <sys_slist_get>
	if (!node) {
   1e618:	4604      	mov	r4, r0
   1e61a:	b170      	cbz	r0, 1e63a <bt_att_status+0x46>
	return chan_req_send(chan, req);
   1e61c:	4601      	mov	r1, r0
   1e61e:	f1a5 0008 	sub.w	r0, r5, #8
   1e622:	f7ff feeb 	bl	1e3fc <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1e626:	2800      	cmp	r0, #0
   1e628:	da07      	bge.n	1e63a <bt_att_status+0x46>
	sys_slist_prepend(&chan->att->reqs, node);
   1e62a:	f855 3c08 	ldr.w	r3, [r5, #-8]
	parent->next = child;
   1e62e:	685a      	ldr	r2, [r3, #4]
   1e630:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   1e632:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1e634:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1e636:	b902      	cbnz	r2, 1e63a <bt_att_status+0x46>
	list->tail = node;
   1e638:	609c      	str	r4, [r3, #8]
}
   1e63a:	bd38      	pop	{r3, r4, r5, pc}

0001e63c <bt_att_chan_create_pdu>:
{
   1e63c:	b538      	push	{r3, r4, r5, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1e63e:	f8b0 3086 	ldrh.w	r3, [r0, #134]	; 0x86
   1e642:	3201      	adds	r2, #1
   1e644:	429a      	cmp	r2, r3
{
   1e646:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1e648:	d81b      	bhi.n	1e682 <bt_att_chan_create_pdu+0x46>
	switch (att_op_get_type(op)) {
   1e64a:	4608      	mov	r0, r1
   1e64c:	f7ff fc99 	bl	1df82 <att_op_get_type>
   1e650:	2802      	cmp	r0, #2
   1e652:	d001      	beq.n	1e658 <bt_att_chan_create_pdu+0x1c>
   1e654:	2804      	cmp	r0, #4
   1e656:	d10f      	bne.n	1e678 <bt_att_chan_create_pdu+0x3c>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   1e658:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1e65c:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   1e65e:	2100      	movs	r1, #0
   1e660:	4608      	mov	r0, r1
   1e662:	f7ff fbdb 	bl	1de1c <bt_l2cap_create_pdu_timeout>
   1e666:	4604      	mov	r4, r0
	if (!buf) {
   1e668:	b120      	cbz	r0, 1e674 <bt_att_chan_create_pdu+0x38>
   1e66a:	2101      	movs	r1, #1
   1e66c:	3008      	adds	r0, #8
   1e66e:	f001 fa6c 	bl	1fb4a <net_buf_simple_add>
	hdr->code = op;
   1e672:	7005      	strb	r5, [r0, #0]
}
   1e674:	4620      	mov	r0, r4
   1e676:	bd38      	pop	{r3, r4, r5, pc}
		buf = bt_l2cap_create_pdu(NULL, 0);
   1e678:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1e67c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e680:	e7ed      	b.n	1e65e <bt_att_chan_create_pdu+0x22>
		return NULL;
   1e682:	2400      	movs	r4, #0
   1e684:	e7f6      	b.n	1e674 <bt_att_chan_create_pdu+0x38>

0001e686 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   1e686:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e68a:	4688      	mov	r8, r1
   1e68c:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1e68e:	2101      	movs	r1, #1
   1e690:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   1e692:	4605      	mov	r5, r0
   1e694:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1e696:	f7ff ffd1 	bl	1e63c <bt_att_chan_create_pdu>
	if (!buf) {
   1e69a:	4604      	mov	r4, r0
   1e69c:	b170      	cbz	r0, 1e6bc <send_err_rsp.part.0+0x36>
   1e69e:	2104      	movs	r1, #4
   1e6a0:	3008      	adds	r0, #8
   1e6a2:	f001 fa52 	bl	1fb4a <net_buf_simple_add>
	rsp->request = req;
   1e6a6:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   1e6aa:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   1e6ac:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   1e6b0:	4621      	mov	r1, r4
   1e6b2:	4628      	mov	r0, r5
}
   1e6b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   1e6b8:	f7f6 bb26 	b.w	14d08 <bt_att_chan_send_rsp.constprop.0>
}
   1e6bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001e6c0 <att_write_req>:
{
   1e6c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1e6c2:	460c      	mov	r4, r1
   1e6c4:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   1e6c6:	f101 0008 	add.w	r0, r1, #8
   1e6ca:	f001 fa6d 	bl	1fba8 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   1e6ce:	89a2      	ldrh	r2, [r4, #12]
   1e6d0:	9201      	str	r2, [sp, #4]
   1e6d2:	68a2      	ldr	r2, [r4, #8]
   1e6d4:	9200      	str	r2, [sp, #0]
   1e6d6:	4603      	mov	r3, r0
   1e6d8:	2213      	movs	r2, #19
   1e6da:	2112      	movs	r1, #18
   1e6dc:	4628      	mov	r0, r5
   1e6de:	f7f6 fc1d 	bl	14f1c <att_write_rsp.constprop.0>
}
   1e6e2:	b003      	add	sp, #12
   1e6e4:	bd30      	pop	{r4, r5, pc}

0001e6e6 <att_write_cmd>:
{
   1e6e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1e6e8:	460c      	mov	r4, r1
   1e6ea:	4605      	mov	r5, r0
   1e6ec:	f101 0008 	add.w	r0, r1, #8
   1e6f0:	f001 fa5a 	bl	1fba8 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   1e6f4:	89a2      	ldrh	r2, [r4, #12]
   1e6f6:	9201      	str	r2, [sp, #4]
   1e6f8:	68a2      	ldr	r2, [r4, #8]
   1e6fa:	9200      	str	r2, [sp, #0]
   1e6fc:	2200      	movs	r2, #0
   1e6fe:	4603      	mov	r3, r0
   1e700:	4611      	mov	r1, r2
   1e702:	4628      	mov	r0, r5
   1e704:	f7f6 fc0a 	bl	14f1c <att_write_rsp.constprop.0>
}
   1e708:	b003      	add	sp, #12
   1e70a:	bd30      	pop	{r4, r5, pc}

0001e70c <bt_att_create_pdu>:
{
   1e70c:	b570      	push	{r4, r5, r6, lr}
   1e70e:	460e      	mov	r6, r1
   1e710:	4615      	mov	r5, r2
	att = att_get(conn);
   1e712:	f7ff fd99 	bl	1e248 <att_get>
	if (!att) {
   1e716:	b170      	cbz	r0, 1e736 <bt_att_create_pdu+0x2a>
	return list->head;
   1e718:	6a43      	ldr	r3, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1e71a:	b163      	cbz	r3, 1e736 <bt_att_create_pdu+0x2a>
   1e71c:	f5b3 70a2 	subs.w	r0, r3, #324	; 0x144
   1e720:	d009      	beq.n	1e736 <bt_att_create_pdu+0x2a>
	return node->next;
   1e722:	681b      	ldr	r3, [r3, #0]
   1e724:	b10b      	cbz	r3, 1e72a <bt_att_create_pdu+0x1e>
   1e726:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1e72a:	1c6a      	adds	r2, r5, #1
   1e72c:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
   1e730:	428a      	cmp	r2, r1
   1e732:	d902      	bls.n	1e73a <bt_att_create_pdu+0x2e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1e734:	b93b      	cbnz	r3, 1e746 <bt_att_create_pdu+0x3a>
}
   1e736:	2000      	movs	r0, #0
   1e738:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   1e73a:	462a      	mov	r2, r5
   1e73c:	4631      	mov	r1, r6
}
   1e73e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   1e742:	f7ff bf7b 	b.w	1e63c <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1e746:	f513 74a2 	adds.w	r4, r3, #324	; 0x144
   1e74a:	d004      	beq.n	1e756 <bt_att_create_pdu+0x4a>
	return node->next;
   1e74c:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1e750:	b10c      	cbz	r4, 1e756 <bt_att_create_pdu+0x4a>
   1e752:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
{
   1e756:	4618      	mov	r0, r3
   1e758:	4623      	mov	r3, r4
   1e75a:	e7e7      	b.n	1e72c <bt_att_create_pdu+0x20>

0001e75c <att_read_blob_req>:
{
   1e75c:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   1e75e:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   1e760:	8813      	ldrh	r3, [r2, #0]
   1e762:	8852      	ldrh	r2, [r2, #2]
   1e764:	9200      	str	r2, [sp, #0]
   1e766:	210c      	movs	r1, #12
   1e768:	220d      	movs	r2, #13
   1e76a:	f7f6 fd05 	bl	15178 <att_read_rsp>
}
   1e76e:	b003      	add	sp, #12
   1e770:	f85d fb04 	ldr.w	pc, [sp], #4

0001e774 <att_read_req>:
{
   1e774:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   1e776:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1e778:	2200      	movs	r2, #0
   1e77a:	881b      	ldrh	r3, [r3, #0]
   1e77c:	9200      	str	r2, [sp, #0]
   1e77e:	210a      	movs	r1, #10
   1e780:	220b      	movs	r2, #11
   1e782:	f7f6 fcf9 	bl	15178 <att_read_rsp>
}
   1e786:	b003      	add	sp, #12
   1e788:	f85d fb04 	ldr.w	pc, [sp], #4

0001e78c <att_mtu_req>:
{
   1e78c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   1e78e:	6803      	ldr	r3, [r0, #0]
{
   1e790:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->att->conn;
   1e792:	6818      	ldr	r0, [r3, #0]
   1e794:	f3bf 8f5b 	dmb	ish
   1e798:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   1e79c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   1e7a0:	f3c3 05c0 	ubfx	r5, r3, #3, #1
   1e7a4:	071b      	lsls	r3, r3, #28
   1e7a6:	d420      	bmi.n	1e7ea <att_mtu_req+0x5e>
	mtu_client = sys_le16_to_cpu(req->mtu);
   1e7a8:	688b      	ldr	r3, [r1, #8]
   1e7aa:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   1e7ac:	2e16      	cmp	r6, #22
   1e7ae:	d91e      	bls.n	1e7ee <att_mtu_req+0x62>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   1e7b0:	2202      	movs	r2, #2
   1e7b2:	2103      	movs	r1, #3
   1e7b4:	f7ff ffaa 	bl	1e70c <bt_att_create_pdu>
	if (!pdu) {
   1e7b8:	4607      	mov	r7, r0
   1e7ba:	b1d0      	cbz	r0, 1e7f2 <att_mtu_req+0x66>
	return net_buf_simple_add(&buf->b, len);
   1e7bc:	2102      	movs	r1, #2
   1e7be:	3008      	adds	r0, #8
   1e7c0:	f001 f9c3 	bl	1fb4a <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   1e7c4:	2341      	movs	r3, #65	; 0x41
   1e7c6:	7003      	strb	r3, [r0, #0]
   1e7c8:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   1e7ca:	4639      	mov	r1, r7
   1e7cc:	4620      	mov	r0, r4
   1e7ce:	f7f6 fa9b 	bl	14d08 <bt_att_chan_send_rsp.constprop.0>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   1e7d2:	2e41      	cmp	r6, #65	; 0x41
   1e7d4:	bf28      	it	cs
   1e7d6:	2641      	movcs	r6, #65	; 0x41
	att_chan_mtu_updated(chan);
   1e7d8:	4620      	mov	r0, r4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   1e7da:	f8a4 607a 	strh.w	r6, [r4, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   1e7de:	f8a4 6086 	strh.w	r6, [r4, #134]	; 0x86
	att_chan_mtu_updated(chan);
   1e7e2:	f7ff fce6 	bl	1e1b2 <att_chan_mtu_updated>
	return 0;
   1e7e6:	4628      	mov	r0, r5
}
   1e7e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   1e7ea:	2006      	movs	r0, #6
   1e7ec:	e7fc      	b.n	1e7e8 <att_mtu_req+0x5c>
		return BT_ATT_ERR_INVALID_PDU;
   1e7ee:	2004      	movs	r0, #4
   1e7f0:	e7fa      	b.n	1e7e8 <att_mtu_req+0x5c>
		return BT_ATT_ERR_UNLIKELY;
   1e7f2:	200e      	movs	r0, #14
   1e7f4:	e7f8      	b.n	1e7e8 <att_mtu_req+0x5c>

0001e7f6 <bt_att_init>:
	bt_gatt_init();
   1e7f6:	f7f7 b873 	b.w	158e0 <bt_gatt_init>

0001e7fa <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   1e7fa:	898a      	ldrh	r2, [r1, #12]
   1e7fc:	6889      	ldr	r1, [r1, #8]
   1e7fe:	2300      	movs	r3, #0
   1e800:	f7f6 be2c 	b.w	1545c <att_handle_rsp>

0001e804 <bt_att_encrypt_change>:
	if (!att_chan->att) {
   1e804:	f850 3c08 	ldr.w	r3, [r0, #-8]
{
   1e808:	b570      	push	{r4, r5, r6, lr}
   1e80a:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   1e80c:	f1a0 0608 	sub.w	r6, r0, #8
	if (!att_chan->att) {
   1e810:	2b00      	cmp	r3, #0
   1e812:	d037      	beq.n	1e884 <bt_att_encrypt_change+0x80>
	if (hci_status) {
   1e814:	b171      	cbz	r1, 1e834 <bt_att_encrypt_change+0x30>
		if (att_chan->req && att_chan->req->retrying) {
   1e816:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
   1e81a:	2b00      	cmp	r3, #0
   1e81c:	d032      	beq.n	1e884 <bt_att_encrypt_change+0x80>
   1e81e:	7c1b      	ldrb	r3, [r3, #16]
   1e820:	07da      	lsls	r2, r3, #31
   1e822:	d52f      	bpl.n	1e884 <bt_att_encrypt_change+0x80>
		return BT_ATT_ERR_AUTHENTICATION;
   1e824:	2305      	movs	r3, #5
		att_handle_rsp(att_chan, NULL, 0, err);
   1e826:	2200      	movs	r2, #0
   1e828:	4630      	mov	r0, r6
   1e82a:	4611      	mov	r1, r2
}
   1e82c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   1e830:	f7f6 be14 	b.w	1545c <att_handle_rsp>
	struct bt_conn *conn = ch->chan.conn;
   1e834:	6805      	ldr	r5, [r0, #0]
	bt_gatt_encrypt_change(conn);
   1e836:	4628      	mov	r0, r5
   1e838:	f7f7 fc50 	bl	160dc <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   1e83c:	7a6b      	ldrb	r3, [r5, #9]
   1e83e:	2b01      	cmp	r3, #1
   1e840:	d020      	beq.n	1e884 <bt_att_encrypt_change+0x80>
	if (!(att_chan->req && att_chan->req->retrying)) {
   1e842:	f8d4 40ec 	ldr.w	r4, [r4, #236]	; 0xec
   1e846:	b1ec      	cbz	r4, 1e884 <bt_att_encrypt_change+0x80>
   1e848:	7c23      	ldrb	r3, [r4, #16]
   1e84a:	07db      	lsls	r3, r3, #31
   1e84c:	d51a      	bpl.n	1e884 <bt_att_encrypt_change+0x80>
	if (!req->encode) {
   1e84e:	68e3      	ldr	r3, [r4, #12]
   1e850:	2b00      	cmp	r3, #0
   1e852:	d0e7      	beq.n	1e824 <bt_att_encrypt_change+0x20>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   1e854:	6962      	ldr	r2, [r4, #20]
   1e856:	7c61      	ldrb	r1, [r4, #17]
   1e858:	4630      	mov	r0, r6
   1e85a:	f7ff feef 	bl	1e63c <bt_att_chan_create_pdu>
	if (!buf) {
   1e85e:	4605      	mov	r5, r0
   1e860:	b140      	cbz	r0, 1e874 <bt_att_encrypt_change+0x70>
	if (req->encode(buf, req->len, req->user_data)) {
   1e862:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
   1e866:	68e3      	ldr	r3, [r4, #12]
   1e868:	4798      	blx	r3
   1e86a:	4602      	mov	r2, r0
   1e86c:	b120      	cbz	r0, 1e878 <bt_att_encrypt_change+0x74>
		net_buf_unref(buf);
   1e86e:	4628      	mov	r0, r5
   1e870:	f7f8 fe22 	bl	174b8 <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   1e874:	230e      	movs	r3, #14
   1e876:	e7d6      	b.n	1e826 <bt_att_encrypt_change+0x22>
	if (chan_send(att_chan, buf, NULL)) {
   1e878:	4629      	mov	r1, r5
   1e87a:	4630      	mov	r0, r6
   1e87c:	f7f6 f9e6 	bl	14c4c <chan_send>
   1e880:	2800      	cmp	r0, #0
   1e882:	d1f4      	bne.n	1e86e <bt_att_encrypt_change+0x6a>
}
   1e884:	bd70      	pop	{r4, r5, r6, pc}

0001e886 <att_timeout>:
	bt_att_disconnected(&chan->chan.chan);
   1e886:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
   1e88a:	f7f6 be19 	b.w	154c0 <bt_att_disconnected>

0001e88e <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   1e88e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1e892:	4607      	mov	r7, r0
   1e894:	460d      	mov	r5, r1
   1e896:	4616      	mov	r6, r2
   1e898:	4698      	mov	r8, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   1e89a:	f7ff fcd5 	bl	1e248 <att_get>
	if (!att) {
   1e89e:	4604      	mov	r4, r0
   1e8a0:	b938      	cbnz	r0, 1e8b2 <bt_att_send+0x24>
		net_buf_unref(buf);
   1e8a2:	4628      	mov	r0, r5
   1e8a4:	f7f8 fe08 	bl	174b8 <net_buf_unref>
		return -ENOTCONN;
   1e8a8:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   1e8ac:	b002      	add	sp, #8
   1e8ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   1e8b2:	b146      	cbz	r6, 1e8c6 <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   1e8b4:	f8cd 8000 	str.w	r8, [sp]
   1e8b8:	4633      	mov	r3, r6
   1e8ba:	462a      	mov	r2, r5
   1e8bc:	2104      	movs	r1, #4
   1e8be:	4638      	mov	r0, r7
   1e8c0:	f7ff faaf 	bl	1de22 <bt_l2cap_send_cb>
   1e8c4:	e7f2      	b.n	1e8ac <bt_att_send+0x1e>
	net_buf_put(&att->tx_queue, buf);
   1e8c6:	f100 060c 	add.w	r6, r0, #12
   1e8ca:	4629      	mov	r1, r5
   1e8cc:	4630      	mov	r0, r6
   1e8ce:	f001 f909 	bl	1fae4 <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   1e8d2:	2200      	movs	r2, #0
   1e8d4:	2300      	movs	r3, #0
   1e8d6:	4630      	mov	r0, r6
   1e8d8:	f001 f8e6 	bl	1faa8 <net_buf_get>
	if (!buf) {
   1e8dc:	4605      	mov	r5, r0
   1e8de:	b908      	cbnz	r0, 1e8e4 <bt_att_send+0x56>
	return 0;
   1e8e0:	2000      	movs	r0, #0
   1e8e2:	e7e3      	b.n	1e8ac <bt_att_send+0x1e>
	return list->head;
   1e8e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1e8e6:	b1c3      	cbz	r3, 1e91a <bt_att_send+0x8c>
   1e8e8:	f5b3 70a2 	subs.w	r0, r3, #324	; 0x144
   1e8ec:	d015      	beq.n	1e91a <bt_att_send+0x8c>
	return node->next;
   1e8ee:	681c      	ldr	r4, [r3, #0]
   1e8f0:	b10c      	cbz	r4, 1e8f6 <bt_att_send+0x68>
   1e8f2:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
	return chan_send(chan, buf, cb);
   1e8f6:	2200      	movs	r2, #0
   1e8f8:	4629      	mov	r1, r5
   1e8fa:	f7f6 f9a7 	bl	14c4c <chan_send>
		if (err >= 0) {
   1e8fe:	2800      	cmp	r0, #0
   1e900:	daee      	bge.n	1e8e0 <bt_att_send+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1e902:	b154      	cbz	r4, 1e91a <bt_att_send+0x8c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1e904:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   1e908:	d004      	beq.n	1e914 <bt_att_send+0x86>
	return node->next;
   1e90a:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   1e90e:	b10b      	cbz	r3, 1e914 <bt_att_send+0x86>
   1e910:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   1e914:	4620      	mov	r0, r4
   1e916:	461c      	mov	r4, r3
   1e918:	e7ed      	b.n	1e8f6 <bt_att_send+0x68>
		k_queue_prepend(&att->tx_queue._queue, buf);
   1e91a:	4629      	mov	r1, r5
   1e91c:	4630      	mov	r0, r6
   1e91e:	f001 fcd9 	bl	202d4 <k_queue_prepend>
   1e922:	e7dd      	b.n	1e8e0 <bt_att_send+0x52>

0001e924 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   1e924:	b510      	push	{r4, lr}
   1e926:	460c      	mov	r4, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   1e928:	f7ff fc8e 	bl	1e248 <att_get>
	if (!att) {
   1e92c:	b160      	cbz	r0, 1e948 <bt_att_req_send+0x24>
	parent->next = child;
   1e92e:	2300      	movs	r3, #0
   1e930:	6023      	str	r3, [r4, #0]
	return list->tail;
   1e932:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   1e934:	b92b      	cbnz	r3, 1e942 <bt_att_req_send+0x1e>
	list->head = node;
   1e936:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   1e93a:	f7ff fe2f 	bl	1e59c <att_req_send_process>

	return 0;
   1e93e:	2000      	movs	r0, #0
}
   1e940:	bd10      	pop	{r4, pc}
	parent->next = child;
   1e942:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1e944:	6084      	str	r4, [r0, #8]
}
   1e946:	e7f8      	b.n	1e93a <bt_att_req_send+0x16>
		return -ENOTCONN;
   1e948:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1e94c:	e7f8      	b.n	1e940 <bt_att_req_send+0x1c>

0001e94e <gatt_ccc_changed>:
{
   1e94e:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   1e950:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   1e952:	895a      	ldrh	r2, [r3, #10]
   1e954:	428a      	cmp	r2, r1
   1e956:	d003      	beq.n	1e960 <gatt_ccc_changed+0x12>
		ccc->value = value;
   1e958:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   1e95a:	68db      	ldr	r3, [r3, #12]
   1e95c:	b103      	cbz	r3, 1e960 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   1e95e:	4718      	bx	r3
}
   1e960:	4770      	bx	lr

0001e962 <gatt_indicate_rsp>:
{
   1e962:	b510      	push	{r4, lr}
   1e964:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   1e966:	68a3      	ldr	r3, [r4, #8]
{
   1e968:	460a      	mov	r2, r1
	if (params->func) {
   1e96a:	b10b      	cbz	r3, 1e970 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   1e96c:	4621      	mov	r1, r4
   1e96e:	4798      	blx	r3
	params->_ref--;
   1e970:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   1e972:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   1e974:	3b01      	subs	r3, #1
   1e976:	b2db      	uxtb	r3, r3
   1e978:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   1e97a:	b122      	cbz	r2, 1e986 <gatt_indicate_rsp+0x24>
   1e97c:	b91b      	cbnz	r3, 1e986 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   1e97e:	4620      	mov	r0, r4
}
   1e980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   1e984:	4710      	bx	r2
}
   1e986:	bd10      	pop	{r4, pc}

0001e988 <match_uuid>:
	data->attr = attr;
   1e988:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   1e98a:	8091      	strh	r1, [r2, #4]
}
   1e98c:	2000      	movs	r0, #0
   1e98e:	4770      	bx	lr

0001e990 <ccc_set_cb>:
}
   1e990:	2000      	movs	r0, #0
   1e992:	4770      	bx	lr

0001e994 <atomic_get>:
   1e994:	f3bf 8f5b 	dmb	ish
   1e998:	6800      	ldr	r0, [r0, #0]
   1e99a:	f3bf 8f5b 	dmb	ish
}
   1e99e:	4770      	bx	lr

0001e9a0 <gen_hash_m>:
{
   1e9a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1e9a2:	6807      	ldr	r7, [r0, #0]
   1e9a4:	783d      	ldrb	r5, [r7, #0]
{
   1e9a6:	b089      	sub	sp, #36	; 0x24
   1e9a8:	4606      	mov	r6, r0
   1e9aa:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1e9ac:	b10d      	cbz	r5, 1e9b2 <gen_hash_m+0x12>
	switch (u16->val) {
   1e9ae:	2501      	movs	r5, #1
   1e9b0:	e014      	b.n	1e9dc <gen_hash_m+0x3c>
   1e9b2:	887b      	ldrh	r3, [r7, #2]
   1e9b4:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   1e9b8:	d004      	beq.n	1e9c4 <gen_hash_m+0x24>
   1e9ba:	d812      	bhi.n	1e9e2 <gen_hash_m+0x42>
   1e9bc:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   1e9c0:	2b03      	cmp	r3, #3
   1e9c2:	d8f4      	bhi.n	1e9ae <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1e9c4:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1e9c8:	2202      	movs	r2, #2
   1e9ca:	f10d 010e 	add.w	r1, sp, #14
   1e9ce:	4620      	mov	r0, r4
   1e9d0:	f7fd fffc 	bl	1c9cc <tc_cmac_update>
   1e9d4:	b9e0      	cbnz	r0, 1ea10 <gen_hash_m+0x70>
			state->err = -EINVAL;
   1e9d6:	f06f 0315 	mvn.w	r3, #21
   1e9da:	65a3      	str	r3, [r4, #88]	; 0x58
}
   1e9dc:	4628      	mov	r0, r5
   1e9de:	b009      	add	sp, #36	; 0x24
   1e9e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   1e9e2:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   1e9e6:	33ff      	adds	r3, #255	; 0xff
   1e9e8:	b29b      	uxth	r3, r3
   1e9ea:	2b04      	cmp	r3, #4
   1e9ec:	d8df      	bhi.n	1e9ae <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1e9ee:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1e9f2:	2202      	movs	r2, #2
   1e9f4:	f10d 010e 	add.w	r1, sp, #14
   1e9f8:	4620      	mov	r0, r4
   1e9fa:	f7fd ffe7 	bl	1c9cc <tc_cmac_update>
   1e9fe:	2800      	cmp	r0, #0
   1ea00:	d0e9      	beq.n	1e9d6 <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   1ea02:	887b      	ldrh	r3, [r7, #2]
   1ea04:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1ea08:	2202      	movs	r2, #2
   1ea0a:	f10d 010e 	add.w	r1, sp, #14
   1ea0e:	e017      	b.n	1ea40 <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   1ea10:	887b      	ldrh	r3, [r7, #2]
   1ea12:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1ea16:	2202      	movs	r2, #2
   1ea18:	f10d 010e 	add.w	r1, sp, #14
   1ea1c:	4620      	mov	r0, r4
   1ea1e:	f7fd ffd5 	bl	1c9cc <tc_cmac_update>
   1ea22:	2800      	cmp	r0, #0
   1ea24:	d0d7      	beq.n	1e9d6 <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   1ea26:	2000      	movs	r0, #0
   1ea28:	2310      	movs	r3, #16
   1ea2a:	eb0d 0203 	add.w	r2, sp, r3
   1ea2e:	6877      	ldr	r7, [r6, #4]
   1ea30:	9000      	str	r0, [sp, #0]
   1ea32:	4631      	mov	r1, r6
   1ea34:	47b8      	blx	r7
		if (len < 0) {
   1ea36:	1e02      	subs	r2, r0, #0
   1ea38:	da01      	bge.n	1ea3e <gen_hash_m+0x9e>
			state->err = len;
   1ea3a:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   1ea3c:	e7ce      	b.n	1e9dc <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   1ea3e:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1ea40:	4620      	mov	r0, r4
   1ea42:	f7fd ffc3 	bl	1c9cc <tc_cmac_update>
   1ea46:	2800      	cmp	r0, #0
   1ea48:	d1b1      	bne.n	1e9ae <gen_hash_m+0xe>
   1ea4a:	e7c4      	b.n	1e9d6 <gen_hash_m+0x36>

0001ea4c <atomic_or>:
{
   1ea4c:	4603      	mov	r3, r0
}
   1ea4e:	f3bf 8f5b 	dmb	ish
   1ea52:	e853 0f00 	ldrex	r0, [r3]
   1ea56:	ea40 0201 	orr.w	r2, r0, r1
   1ea5a:	e843 2c00 	strex	ip, r2, [r3]
   1ea5e:	f1bc 0f00 	cmp.w	ip, #0
   1ea62:	d1f6      	bne.n	1ea52 <atomic_or+0x6>
   1ea64:	f3bf 8f5b 	dmb	ish
   1ea68:	4770      	bx	lr

0001ea6a <sc_restore_rsp>:
{
   1ea6a:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   1ea6c:	f7f6 fd8c 	bl	15588 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   1ea70:	b140      	cbz	r0, 1ea84 <sc_restore_rsp+0x1a>
   1ea72:	7a03      	ldrb	r3, [r0, #8]
   1ea74:	07db      	lsls	r3, r3, #31
   1ea76:	d505      	bpl.n	1ea84 <sc_restore_rsp+0x1a>
}
   1ea78:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1ea7c:	2101      	movs	r1, #1
   1ea7e:	300c      	adds	r0, #12
   1ea80:	f7ff bfe4 	b.w	1ea4c <atomic_or>
   1ea84:	bd08      	pop	{r3, pc}

0001ea86 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   1ea86:	2207      	movs	r2, #7
   1ea88:	f7fe b90d 	b.w	1cca6 <memcpy>

0001ea8c <clear_ccc_cfg>:
{
   1ea8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1ea8e:	2500      	movs	r5, #0
{
   1ea90:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1ea92:	4669      	mov	r1, sp
   1ea94:	3001      	adds	r0, #1
   1ea96:	9500      	str	r5, [sp, #0]
   1ea98:	f8cd 5003 	str.w	r5, [sp, #3]
   1ea9c:	f7ff fff3 	bl	1ea86 <bt_addr_le_copy>
	cfg->id = 0U;
   1eaa0:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   1eaa2:	8125      	strh	r5, [r4, #8]
}
   1eaa4:	b003      	add	sp, #12
   1eaa6:	bd30      	pop	{r4, r5, pc}

0001eaa8 <atomic_and>:
{
   1eaa8:	4603      	mov	r3, r0
}
   1eaaa:	f3bf 8f5b 	dmb	ish
   1eaae:	e853 0f00 	ldrex	r0, [r3]
   1eab2:	ea00 0201 	and.w	r2, r0, r1
   1eab6:	e843 2c00 	strex	ip, r2, [r3]
   1eaba:	f1bc 0f00 	cmp.w	ip, #0
   1eabe:	d1f6      	bne.n	1eaae <atomic_and+0x6>
   1eac0:	f3bf 8f5b 	dmb	ish
   1eac4:	4770      	bx	lr

0001eac6 <clear_cf_cfg>:
{
   1eac6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1eac8:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1eaca:	2500      	movs	r5, #0
   1eacc:	4669      	mov	r1, sp
   1eace:	3001      	adds	r0, #1
   1ead0:	9500      	str	r5, [sp, #0]
   1ead2:	f8cd 5003 	str.w	r5, [sp, #3]
   1ead6:	f7ff ffd6 	bl	1ea86 <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   1eada:	f104 0008 	add.w	r0, r4, #8
   1eade:	2201      	movs	r2, #1
   1eae0:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1eae2:	340c      	adds	r4, #12
   1eae4:	f7fe f8ea 	bl	1ccbc <memset>
   1eae8:	f3bf 8f5b 	dmb	ish
   1eaec:	e854 3f00 	ldrex	r3, [r4]
   1eaf0:	e844 5200 	strex	r2, r5, [r4]
   1eaf4:	2a00      	cmp	r2, #0
   1eaf6:	d1f9      	bne.n	1eaec <clear_cf_cfg+0x26>
   1eaf8:	f3bf 8f5b 	dmb	ish
}
   1eafc:	b003      	add	sp, #12
   1eafe:	bd30      	pop	{r4, r5, pc}

0001eb00 <read_ppcp>:
{
   1eb00:	b513      	push	{r0, r1, r4, lr}
   1eb02:	4610      	mov	r0, r2
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   1eb04:	2218      	movs	r2, #24
{
   1eb06:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   1eb0a:	f8ad 2000 	strh.w	r2, [sp]
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
   1eb0e:	2228      	movs	r2, #40	; 0x28
   1eb10:	f8ad 2002 	strh.w	r2, [sp, #2]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
   1eb14:	2200      	movs	r2, #0
   1eb16:	f8ad 2004 	strh.w	r2, [sp, #4]
	if (offset > value_len) {
   1eb1a:	2908      	cmp	r1, #8
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   1eb1c:	f04f 022a 	mov.w	r2, #42	; 0x2a
   1eb20:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   1eb24:	d80b      	bhi.n	1eb3e <read_ppcp+0x3e>
	len = MIN(buf_len, value_len - offset);
   1eb26:	f1c1 0408 	rsb	r4, r1, #8
   1eb2a:	429c      	cmp	r4, r3
   1eb2c:	bfa8      	it	ge
   1eb2e:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1eb30:	4622      	mov	r2, r4
   1eb32:	4469      	add	r1, sp
   1eb34:	f7fe f8b7 	bl	1cca6 <memcpy>
}
   1eb38:	4620      	mov	r0, r4
   1eb3a:	b002      	add	sp, #8
   1eb3c:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1eb3e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   1eb42:	e7f9      	b.n	1eb38 <read_ppcp+0x38>

0001eb44 <read_appearance>:
{
   1eb44:	b513      	push	{r0, r1, r4, lr}
   1eb46:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1eb4a:	4610      	mov	r0, r2
	if (offset > value_len) {
   1eb4c:	2902      	cmp	r1, #2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   1eb4e:	f240 32c2 	movw	r2, #962	; 0x3c2
   1eb52:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   1eb56:	d80d      	bhi.n	1eb74 <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   1eb58:	f1c1 0402 	rsb	r4, r1, #2
   1eb5c:	429c      	cmp	r4, r3
   1eb5e:	bfa8      	it	ge
   1eb60:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1eb62:	f10d 0306 	add.w	r3, sp, #6
   1eb66:	4622      	mov	r2, r4
   1eb68:	4419      	add	r1, r3
   1eb6a:	f7fe f89c 	bl	1cca6 <memcpy>
}
   1eb6e:	4620      	mov	r0, r4
   1eb70:	b002      	add	sp, #8
   1eb72:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1eb74:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   1eb78:	e7f9      	b.n	1eb6e <read_appearance+0x2a>

0001eb7a <read_name>:
{
   1eb7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1eb7e:	4698      	mov	r8, r3
   1eb80:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   1eb84:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   1eb86:	f7f4 fbf3 	bl	13370 <bt_get_name>
   1eb8a:	4607      	mov	r7, r0
				 strlen(name));
   1eb8c:	f7fe f84d 	bl	1cc2a <strlen>
	if (offset > value_len) {
   1eb90:	b283      	uxth	r3, r0
   1eb92:	42b3      	cmp	r3, r6
   1eb94:	d30c      	bcc.n	1ebb0 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   1eb96:	1b9c      	subs	r4, r3, r6
   1eb98:	4544      	cmp	r4, r8
   1eb9a:	bfa8      	it	ge
   1eb9c:	4644      	movge	r4, r8
   1eb9e:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   1eba0:	4622      	mov	r2, r4
   1eba2:	19b9      	adds	r1, r7, r6
   1eba4:	4628      	mov	r0, r5
   1eba6:	f7fe f87e 	bl	1cca6 <memcpy>
}
   1ebaa:	4620      	mov	r0, r4
   1ebac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1ebb0:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   1ebb4:	e7f9      	b.n	1ebaa <read_name+0x30>

0001ebb6 <cf_read>:
{
   1ebb6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1ebb8:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   1ebba:	2300      	movs	r3, #0
{
   1ebbc:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   1ebc0:	f88d 3004 	strb.w	r3, [sp, #4]
{
   1ebc4:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   1ebc6:	f7f6 fcdf 	bl	15588 <find_cf_cfg>
	if (cfg) {
   1ebca:	b128      	cbz	r0, 1ebd8 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   1ebcc:	f100 0108 	add.w	r1, r0, #8
   1ebd0:	2201      	movs	r2, #1
   1ebd2:	a801      	add	r0, sp, #4
   1ebd4:	f7fe f867 	bl	1cca6 <memcpy>
	if (offset > value_len) {
   1ebd8:	2e01      	cmp	r6, #1
   1ebda:	d80d      	bhi.n	1ebf8 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   1ebdc:	f1c6 0401 	rsb	r4, r6, #1
   1ebe0:	42bc      	cmp	r4, r7
   1ebe2:	bfa8      	it	ge
   1ebe4:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1ebe6:	ab01      	add	r3, sp, #4
   1ebe8:	4622      	mov	r2, r4
   1ebea:	1999      	adds	r1, r3, r6
   1ebec:	4628      	mov	r0, r5
   1ebee:	f7fe f85a 	bl	1cca6 <memcpy>
}
   1ebf2:	4620      	mov	r0, r4
   1ebf4:	b003      	add	sp, #12
   1ebf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1ebf8:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   1ebfc:	e7f9      	b.n	1ebf2 <cf_read+0x3c>

0001ebfe <bt_gatt_attr_read_service>:
{
   1ebfe:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   1ec00:	68c9      	ldr	r1, [r1, #12]
{
   1ec02:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   1ec06:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   1ec08:	780b      	ldrb	r3, [r1, #0]
{
   1ec0a:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   1ec0c:	b993      	cbnz	r3, 1ec34 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1ec0e:	884b      	ldrh	r3, [r1, #2]
   1ec10:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   1ec14:	2d02      	cmp	r5, #2
   1ec16:	d819      	bhi.n	1ec4c <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   1ec18:	f1c5 0202 	rsb	r2, r5, #2
   1ec1c:	4294      	cmp	r4, r2
   1ec1e:	bfa8      	it	ge
   1ec20:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1ec22:	f10d 0306 	add.w	r3, sp, #6
   1ec26:	4622      	mov	r2, r4
   1ec28:	1959      	adds	r1, r3, r5
   1ec2a:	f7fe f83c 	bl	1cca6 <memcpy>
}
   1ec2e:	4620      	mov	r0, r4
   1ec30:	b003      	add	sp, #12
   1ec32:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   1ec34:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   1ec36:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   1ec3a:	d807      	bhi.n	1ec4c <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   1ec3c:	f1c5 0210 	rsb	r2, r5, #16
   1ec40:	4294      	cmp	r4, r2
   1ec42:	bfa8      	it	ge
   1ec44:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1ec46:	4622      	mov	r2, r4
   1ec48:	4429      	add	r1, r5
   1ec4a:	e7ee      	b.n	1ec2a <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1ec4c:	f06f 0406 	mvn.w	r4, #6
   1ec50:	e7ed      	b.n	1ec2e <bt_gatt_attr_read_service+0x30>

0001ec52 <cf_set>:
{
   1ec52:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ec56:	4689      	mov	r9, r1
   1ec58:	b085      	sub	sp, #20
   1ec5a:	4617      	mov	r7, r2
   1ec5c:	4698      	mov	r8, r3
	if (!name) {
   1ec5e:	4605      	mov	r5, r0
   1ec60:	b928      	cbnz	r0, 1ec6e <cf_set+0x1c>
		return -EINVAL;
   1ec62:	f06f 0415 	mvn.w	r4, #21
}
   1ec66:	4620      	mov	r0, r4
   1ec68:	b005      	add	sp, #20
   1ec6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   1ec6e:	a902      	add	r1, sp, #8
   1ec70:	f7fe f8c0 	bl	1cdf4 <bt_settings_decode_key>
	if (err) {
   1ec74:	4604      	mov	r4, r0
   1ec76:	2800      	cmp	r0, #0
   1ec78:	d1f3      	bne.n	1ec62 <cf_set+0x10>
	settings_name_next(name, &next);
   1ec7a:	a901      	add	r1, sp, #4
   1ec7c:	4628      	mov	r0, r5
   1ec7e:	f7fc fc9f 	bl	1b5c0 <settings_name_next>
	if (!next) {
   1ec82:	9801      	ldr	r0, [sp, #4]
   1ec84:	b1f0      	cbz	r0, 1ecc4 <cf_set+0x72>
		id = strtol(next, NULL, 10);
   1ec86:	220a      	movs	r2, #10
   1ec88:	4621      	mov	r1, r4
   1ec8a:	f7fd ff50 	bl	1cb2e <strtol>
   1ec8e:	b2c6      	uxtb	r6, r0
	cfg = find_cf_cfg_by_addr(id, &addr);
   1ec90:	a902      	add	r1, sp, #8
   1ec92:	4630      	mov	r0, r6
   1ec94:	f7f6 fce2 	bl	1565c <find_cf_cfg_by_addr>
	if (!cfg) {
   1ec98:	4605      	mov	r5, r0
   1ec9a:	b940      	cbnz	r0, 1ecae <cf_set+0x5c>
		cfg = find_cf_cfg(NULL);
   1ec9c:	f7f6 fc74 	bl	15588 <find_cf_cfg>
		if (!cfg) {
   1eca0:	4605      	mov	r5, r0
   1eca2:	b1a8      	cbz	r0, 1ecd0 <cf_set+0x7e>
		cfg->id = id;
   1eca4:	f800 6b01 	strb.w	r6, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   1eca8:	a902      	add	r1, sp, #8
   1ecaa:	f7ff feec 	bl	1ea86 <bt_addr_le_copy>
	if (len_rd) {
   1ecae:	f1b9 0f00 	cmp.w	r9, #0
   1ecb2:	d009      	beq.n	1ecc8 <cf_set+0x76>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
   1ecb4:	2201      	movs	r2, #1
   1ecb6:	f105 0108 	add.w	r1, r5, #8
   1ecba:	4640      	mov	r0, r8
   1ecbc:	47b8      	blx	r7
		if (len < 0) {
   1ecbe:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   1ecc2:	e7d0      	b.n	1ec66 <cf_set+0x14>
		id = BT_ID_DEFAULT;
   1ecc4:	4626      	mov	r6, r4
   1ecc6:	e7e3      	b.n	1ec90 <cf_set+0x3e>
		clear_cf_cfg(cfg);
   1ecc8:	4628      	mov	r0, r5
   1ecca:	f7ff fefc 	bl	1eac6 <clear_cf_cfg>
   1ecce:	e7ca      	b.n	1ec66 <cf_set+0x14>
			return -ENOMEM;
   1ecd0:	f06f 040b 	mvn.w	r4, #11
   1ecd4:	e7c7      	b.n	1ec66 <cf_set+0x14>

0001ecd6 <ccc_find_cfg>:
{
   1ecd6:	b510      	push	{r4, lr}
		if (id == ccc->cfg[i].id &&
   1ecd8:	7803      	ldrb	r3, [r0, #0]
   1ecda:	4293      	cmp	r3, r2
{
   1ecdc:	4604      	mov	r4, r0
		if (id == ccc->cfg[i].id &&
   1ecde:	d001      	beq.n	1ece4 <ccc_find_cfg+0xe>
	return NULL;
   1ece0:	2000      	movs	r0, #0
}
   1ece2:	bd10      	pop	{r4, pc}
	return memcmp(a, b, sizeof(*a));
   1ece4:	2207      	movs	r2, #7
   1ece6:	3001      	adds	r0, #1
   1ece8:	f7fd ffcc 	bl	1cc84 <memcmp>
		if (id == ccc->cfg[i].id &&
   1ecec:	2800      	cmp	r0, #0
   1ecee:	d1f7      	bne.n	1ece0 <ccc_find_cfg+0xa>
			return &ccc->cfg[i];
   1ecf0:	4620      	mov	r0, r4
   1ecf2:	e7f6      	b.n	1ece2 <ccc_find_cfg+0xc>

0001ecf4 <find_ccc_cfg>:
{
   1ecf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1ecf6:	460c      	mov	r4, r1
						    &cfg->peer)) {
   1ecf8:	1c4d      	adds	r5, r1, #1
		if (conn) {
   1ecfa:	b148      	cbz	r0, 1ed10 <find_ccc_cfg+0x1c>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1ecfc:	7809      	ldrb	r1, [r1, #0]
   1ecfe:	462a      	mov	r2, r5
   1ed00:	f7fe ffad 	bl	1dc5e <bt_conn_is_peer_addr_le>
	return NULL;
   1ed04:	2800      	cmp	r0, #0
   1ed06:	bf08      	it	eq
   1ed08:	2400      	moveq	r4, #0
}
   1ed0a:	4620      	mov	r0, r4
   1ed0c:	b003      	add	sp, #12
   1ed0e:	bd30      	pop	{r4, r5, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1ed10:	9000      	str	r0, [sp, #0]
   1ed12:	2207      	movs	r2, #7
   1ed14:	f8cd 0003 	str.w	r0, [sp, #3]
   1ed18:	4669      	mov	r1, sp
   1ed1a:	4628      	mov	r0, r5
   1ed1c:	f7fd ffb2 	bl	1cc84 <memcmp>
	return NULL;
   1ed20:	2800      	cmp	r0, #0
   1ed22:	bf18      	it	ne
   1ed24:	2400      	movne	r4, #0
   1ed26:	e7f0      	b.n	1ed0a <find_ccc_cfg+0x16>

0001ed28 <bt_gatt_attr_write_ccc>:
{
   1ed28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ed2c:	461f      	mov	r7, r3
   1ed2e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1ed32:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
   1ed36:	4604      	mov	r4, r0
   1ed38:	4688      	mov	r8, r1
	if (offset) {
   1ed3a:	2b00      	cmp	r3, #0
   1ed3c:	d13a      	bne.n	1edb4 <bt_gatt_attr_write_ccc+0x8c>
	if (!len || len > sizeof(uint16_t)) {
   1ed3e:	1e7b      	subs	r3, r7, #1
   1ed40:	2b01      	cmp	r3, #1
   1ed42:	d83a      	bhi.n	1edba <bt_gatt_attr_write_ccc+0x92>
		value = *(uint8_t *)buf;
   1ed44:	7816      	ldrb	r6, [r2, #0]
	if (len < sizeof(uint16_t)) {
   1ed46:	2f01      	cmp	r7, #1
	cfg = find_ccc_cfg(conn, ccc);
   1ed48:	4649      	mov	r1, r9
   1ed4a:	bf14      	ite	ne
   1ed4c:	8816      	ldrhne	r6, [r2, #0]
		value = *(uint8_t *)buf;
   1ed4e:	b2b6      	uxtheq	r6, r6
	cfg = find_ccc_cfg(conn, ccc);
   1ed50:	f7ff ffd0 	bl	1ecf4 <find_ccc_cfg>
	if (!cfg) {
   1ed54:	4605      	mov	r5, r0
   1ed56:	b978      	cbnz	r0, 1ed78 <bt_gatt_attr_write_ccc+0x50>
		if (!value) {
   1ed58:	b916      	cbnz	r6, 1ed60 <bt_gatt_attr_write_ccc+0x38>
			return len;
   1ed5a:	4638      	mov	r0, r7
}
   1ed5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   1ed60:	4649      	mov	r1, r9
   1ed62:	f7ff ffc7 	bl	1ecf4 <find_ccc_cfg>
		if (!cfg) {
   1ed66:	4605      	mov	r5, r0
   1ed68:	b350      	cbz	r0, 1edc0 <bt_gatt_attr_write_ccc+0x98>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1ed6a:	f104 0188 	add.w	r1, r4, #136	; 0x88
   1ed6e:	3001      	adds	r0, #1
   1ed70:	f7ff fe89 	bl	1ea86 <bt_addr_le_copy>
		cfg->id = conn->id;
   1ed74:	7a23      	ldrb	r3, [r4, #8]
   1ed76:	702b      	strb	r3, [r5, #0]
	if (ccc->cfg_write) {
   1ed78:	f8d9 3010 	ldr.w	r3, [r9, #16]
   1ed7c:	b973      	cbnz	r3, 1ed9c <bt_gatt_attr_write_ccc+0x74>
	if (cfg->value != ccc->value) {
   1ed7e:	f8b9 300a 	ldrh.w	r3, [r9, #10]
	cfg->value = value;
   1ed82:	812e      	strh	r6, [r5, #8]
	if (cfg->value != ccc->value) {
   1ed84:	42b3      	cmp	r3, r6
   1ed86:	d003      	beq.n	1ed90 <bt_gatt_attr_write_ccc+0x68>
		gatt_ccc_changed(attr, ccc);
   1ed88:	4649      	mov	r1, r9
   1ed8a:	4640      	mov	r0, r8
   1ed8c:	f7ff fddf 	bl	1e94e <gatt_ccc_changed>
	if (!value) {
   1ed90:	2e00      	cmp	r6, #0
   1ed92:	d1e2      	bne.n	1ed5a <bt_gatt_attr_write_ccc+0x32>
		clear_ccc_cfg(cfg);
   1ed94:	4628      	mov	r0, r5
   1ed96:	f7ff fe79 	bl	1ea8c <clear_ccc_cfg>
   1ed9a:	e7de      	b.n	1ed5a <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   1ed9c:	4632      	mov	r2, r6
   1ed9e:	4641      	mov	r1, r8
   1eda0:	4620      	mov	r0, r4
   1eda2:	4798      	blx	r3
		if (write < 0) {
   1eda4:	2800      	cmp	r0, #0
   1eda6:	dbd9      	blt.n	1ed5c <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
   1eda8:	1e44      	subs	r4, r0, #1
   1edaa:	2c01      	cmp	r4, #1
   1edac:	d9e7      	bls.n	1ed7e <bt_gatt_attr_write_ccc+0x56>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   1edae:	f06f 000d 	mvn.w	r0, #13
   1edb2:	e7d3      	b.n	1ed5c <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1edb4:	f06f 0006 	mvn.w	r0, #6
   1edb8:	e7d0      	b.n	1ed5c <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1edba:	f06f 000c 	mvn.w	r0, #12
   1edbe:	e7cd      	b.n	1ed5c <bt_gatt_attr_write_ccc+0x34>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1edc0:	f06f 0010 	mvn.w	r0, #16
   1edc4:	e7ca      	b.n	1ed5c <bt_gatt_attr_write_ccc+0x34>

0001edc6 <bt_gatt_attr_read_ccc>:
{
   1edc6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   1edc8:	68c9      	ldr	r1, [r1, #12]
{
   1edca:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   1edce:	4615      	mov	r5, r2
   1edd0:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   1edd2:	f7ff ff8f 	bl	1ecf4 <find_ccc_cfg>
	if (cfg) {
   1edd6:	b100      	cbz	r0, 1edda <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   1edd8:	8900      	ldrh	r0, [r0, #8]
   1edda:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   1edde:	2e02      	cmp	r6, #2
   1ede0:	d80e      	bhi.n	1ee00 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   1ede2:	f1c6 0402 	rsb	r4, r6, #2
   1ede6:	42bc      	cmp	r4, r7
   1ede8:	bfa8      	it	ge
   1edea:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1edec:	f10d 0306 	add.w	r3, sp, #6
   1edf0:	4622      	mov	r2, r4
   1edf2:	1999      	adds	r1, r3, r6
   1edf4:	4628      	mov	r0, r5
   1edf6:	f7fd ff56 	bl	1cca6 <memcpy>
}
   1edfa:	4620      	mov	r0, r4
   1edfc:	b003      	add	sp, #12
   1edfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1ee00:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   1ee04:	e7f9      	b.n	1edfa <bt_gatt_attr_read_ccc+0x34>

0001ee06 <sc_save>:
{
   1ee06:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1ee0a:	4680      	mov	r8, r0
   1ee0c:	460f      	mov	r7, r1
   1ee0e:	4616      	mov	r6, r2
   1ee10:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   1ee12:	f7f6 fcb7 	bl	15784 <find_sc_cfg>
	if (!cfg) {
   1ee16:	4604      	mov	r4, r0
   1ee18:	b960      	cbnz	r0, 1ee34 <sc_save+0x2e>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1ee1a:	4669      	mov	r1, sp
   1ee1c:	9000      	str	r0, [sp, #0]
   1ee1e:	f8cd 0003 	str.w	r0, [sp, #3]
   1ee22:	f7f6 fcaf 	bl	15784 <find_sc_cfg>
		if (!cfg) {
   1ee26:	4604      	mov	r4, r0
   1ee28:	b1d0      	cbz	r0, 1ee60 <sc_save+0x5a>
		cfg->id = id;
   1ee2a:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   1ee2e:	4639      	mov	r1, r7
   1ee30:	f7ff fe29 	bl	1ea86 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   1ee34:	8922      	ldrh	r2, [r4, #8]
   1ee36:	8963      	ldrh	r3, [r4, #10]
   1ee38:	b972      	cbnz	r2, 1ee58 <sc_save+0x52>
   1ee3a:	b97b      	cbnz	r3, 1ee5c <sc_save+0x56>
		cfg->data.start = start;
   1ee3c:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   1ee3e:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
   1ee40:	4621      	mov	r1, r4
   1ee42:	f811 0b01 	ldrb.w	r0, [r1], #1
   1ee46:	f7fe fbb1 	bl	1d5ac <bt_addr_le_is_bonded>
   1ee4a:	b148      	cbz	r0, 1ee60 <sc_save+0x5a>
		sc_store(cfg);
   1ee4c:	4620      	mov	r0, r4
}
   1ee4e:	b002      	add	sp, #8
   1ee50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		sc_store(cfg);
   1ee54:	f7f6 bbba 	b.w	155cc <sc_store>
	if (new_start >= *start && new_end <= *end) {
   1ee58:	4296      	cmp	r6, r2
   1ee5a:	d304      	bcc.n	1ee66 <sc_save+0x60>
   1ee5c:	429d      	cmp	r5, r3
   1ee5e:	d8ee      	bhi.n	1ee3e <sc_save+0x38>
}
   1ee60:	b002      	add	sp, #8
   1ee62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (*end < new_end) {
   1ee66:	429d      	cmp	r5, r3
		*start = new_start;
   1ee68:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   1ee6a:	d9e9      	bls.n	1ee40 <sc_save+0x3a>
   1ee6c:	e7e7      	b.n	1ee3e <sc_save+0x38>

0001ee6e <sc_clear>:
{
   1ee6e:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1ee70:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   1ee74:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1ee76:	4631      	mov	r1, r6
   1ee78:	7a00      	ldrb	r0, [r0, #8]
   1ee7a:	f7fe fb97 	bl	1d5ac <bt_addr_le_is_bonded>
   1ee7e:	4605      	mov	r5, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   1ee80:	4631      	mov	r1, r6
   1ee82:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1ee84:	b11d      	cbz	r5, 1ee8e <sc_clear+0x20>
}
   1ee86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   1ee8a:	f7f6 bc99 	b.w	157c0 <bt_gatt_clear_sc>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1ee8e:	f7f6 fc79 	bl	15784 <find_sc_cfg>
		if (cfg) {
   1ee92:	b128      	cbz	r0, 1eea0 <sc_clear+0x32>
	memset(cfg, 0, sizeof(*cfg));
   1ee94:	4629      	mov	r1, r5
   1ee96:	220c      	movs	r2, #12
}
   1ee98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   1ee9c:	f7fd bf0e 	b.w	1ccbc <memset>
}
   1eea0:	bd70      	pop	{r4, r5, r6, pc}

0001eea2 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   1eea2:	2a02      	cmp	r2, #2
{
   1eea4:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   1eea6:	d108      	bne.n	1eeba <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   1eea8:	2300      	movs	r3, #0
   1eeaa:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1eeae:	461a      	mov	r2, r3
   1eeb0:	7a00      	ldrb	r0, [r0, #8]
   1eeb2:	f7ff ffa8 	bl	1ee06 <sc_save>
}
   1eeb6:	2002      	movs	r0, #2
   1eeb8:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   1eeba:	f7ff ffd8 	bl	1ee6e <sc_clear>
   1eebe:	e7fa      	b.n	1eeb6 <sc_ccc_cfg_write+0x14>

0001eec0 <sc_set>:
{
   1eec0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1eec4:	460e      	mov	r6, r1
   1eec6:	b087      	sub	sp, #28
   1eec8:	4690      	mov	r8, r2
   1eeca:	4699      	mov	r9, r3
	if (!name) {
   1eecc:	4605      	mov	r5, r0
   1eece:	b928      	cbnz	r0, 1eedc <sc_set+0x1c>
		return -EINVAL;
   1eed0:	f06f 0415 	mvn.w	r4, #21
}
   1eed4:	4620      	mov	r0, r4
   1eed6:	b007      	add	sp, #28
   1eed8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   1eedc:	a902      	add	r1, sp, #8
   1eede:	f7fd ff89 	bl	1cdf4 <bt_settings_decode_key>
	if (err) {
   1eee2:	4604      	mov	r4, r0
   1eee4:	2800      	cmp	r0, #0
   1eee6:	d1f3      	bne.n	1eed0 <sc_set+0x10>
	settings_name_next(name, &next);
   1eee8:	a901      	add	r1, sp, #4
   1eeea:	4628      	mov	r0, r5
   1eeec:	f7fc fb68 	bl	1b5c0 <settings_name_next>
	if (!next) {
   1eef0:	9801      	ldr	r0, [sp, #4]
   1eef2:	b1b8      	cbz	r0, 1ef24 <sc_set+0x64>
		id = strtol(next, NULL, 10);
   1eef4:	220a      	movs	r2, #10
   1eef6:	4621      	mov	r1, r4
   1eef8:	f7fd fe19 	bl	1cb2e <strtol>
   1eefc:	b2c7      	uxtb	r7, r0
	cfg = find_sc_cfg(id, &addr);
   1eefe:	a902      	add	r1, sp, #8
   1ef00:	4638      	mov	r0, r7
   1ef02:	f7f6 fc3f 	bl	15784 <find_sc_cfg>
	if (!cfg && len_rd) {
   1ef06:	4605      	mov	r5, r0
   1ef08:	b9d8      	cbnz	r0, 1ef42 <sc_set+0x82>
   1ef0a:	2e00      	cmp	r6, #0
   1ef0c:	d0e2      	beq.n	1eed4 <sc_set+0x14>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1ef0e:	a904      	add	r1, sp, #16
   1ef10:	9004      	str	r0, [sp, #16]
   1ef12:	f8cd 0013 	str.w	r0, [sp, #19]
   1ef16:	f7f6 fc35 	bl	15784 <find_sc_cfg>
		if (!cfg) {
   1ef1a:	4605      	mov	r5, r0
   1ef1c:	b920      	cbnz	r0, 1ef28 <sc_set+0x68>
			return -ENOMEM;
   1ef1e:	f06f 040b 	mvn.w	r4, #11
   1ef22:	e7d7      	b.n	1eed4 <sc_set+0x14>
		id = BT_ID_DEFAULT;
   1ef24:	4627      	mov	r7, r4
   1ef26:	e7ea      	b.n	1eefe <sc_set+0x3e>
		cfg->id = id;
   1ef28:	f800 7b01 	strb.w	r7, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   1ef2c:	a902      	add	r1, sp, #8
   1ef2e:	f7ff fdaa 	bl	1ea86 <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
   1ef32:	2204      	movs	r2, #4
   1ef34:	f105 0108 	add.w	r1, r5, #8
   1ef38:	4648      	mov	r0, r9
   1ef3a:	47c0      	blx	r8
		if (len < 0) {
   1ef3c:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   1ef40:	e7c8      	b.n	1eed4 <sc_set+0x14>
	if (len_rd) {
   1ef42:	2e00      	cmp	r6, #0
   1ef44:	d1f5      	bne.n	1ef32 <sc_set+0x72>
		memset(cfg, 0, sizeof(*cfg));
   1ef46:	220c      	movs	r2, #12
   1ef48:	4631      	mov	r1, r6
   1ef4a:	f7fd feb7 	bl	1ccbc <memset>
		BT_DBG("Removed SC for %s", bt_addr_le_str(&addr));
   1ef4e:	e7c1      	b.n	1eed4 <sc_set+0x14>

0001ef50 <cf_write>:
{
   1ef50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ef54:	4698      	mov	r8, r3
   1ef56:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   1ef5a:	2b01      	cmp	r3, #1
{
   1ef5c:	4606      	mov	r6, r0
   1ef5e:	4617      	mov	r7, r2
	if (offset > sizeof(cfg->data)) {
   1ef60:	d830      	bhi.n	1efc4 <cf_write+0x74>
	if (offset + len > sizeof(cfg->data)) {
   1ef62:	4443      	add	r3, r8
   1ef64:	2b01      	cmp	r3, #1
   1ef66:	4645      	mov	r5, r8
   1ef68:	dc2f      	bgt.n	1efca <cf_write+0x7a>
	cfg = find_cf_cfg(conn);
   1ef6a:	f7f6 fb0d 	bl	15588 <find_cf_cfg>
	if (!cfg) {
   1ef6e:	4604      	mov	r4, r0
   1ef70:	b918      	cbnz	r0, 1ef7a <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
   1ef72:	f7f6 fb09 	bl	15588 <find_cf_cfg>
	if (!cfg) {
   1ef76:	4604      	mov	r4, r0
   1ef78:	b350      	cbz	r0, 1efd0 <cf_write+0x80>
{
   1ef7a:	2100      	movs	r1, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1ef7c:	f1b8 0f00 	cmp.w	r8, #0
   1ef80:	d10e      	bne.n	1efa0 <cf_write+0x50>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1ef82:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1ef86:	1c60      	adds	r0, r4, #1
   1ef88:	f7ff fd7d 	bl	1ea86 <bt_addr_le_copy>
	cfg->id = conn->id;
   1ef8c:	4620      	mov	r0, r4
   1ef8e:	7a33      	ldrb	r3, [r6, #8]
   1ef90:	f800 3b0c 	strb.w	r3, [r0], #12
   1ef94:	2101      	movs	r1, #1
   1ef96:	f7ff fd59 	bl	1ea4c <atomic_or>
}
   1ef9a:	4628      	mov	r0, r5
   1ef9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1efa0:	7a20      	ldrb	r0, [r4, #8]
   1efa2:	fa20 f301 	lsr.w	r3, r0, r1
   1efa6:	07da      	lsls	r2, r3, #31
   1efa8:	d503      	bpl.n	1efb2 <cf_write+0x62>
		    !(value[i / 8] & BIT(i % 8))) {
   1efaa:	783b      	ldrb	r3, [r7, #0]
   1efac:	40cb      	lsrs	r3, r1
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1efae:	07db      	lsls	r3, r3, #31
   1efb0:	d511      	bpl.n	1efd6 <cf_write+0x86>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1efb2:	3101      	adds	r1, #1
   1efb4:	2903      	cmp	r1, #3
   1efb6:	d1e1      	bne.n	1ef7c <cf_write+0x2c>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   1efb8:	783b      	ldrb	r3, [r7, #0]
   1efba:	f003 0307 	and.w	r3, r3, #7
   1efbe:	4318      	orrs	r0, r3
   1efc0:	7220      	strb	r0, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   1efc2:	e7de      	b.n	1ef82 <cf_write+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1efc4:	f06f 0506 	mvn.w	r5, #6
   1efc8:	e7e7      	b.n	1ef9a <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1efca:	f06f 050c 	mvn.w	r5, #12
   1efce:	e7e4      	b.n	1ef9a <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1efd0:	f06f 0510 	mvn.w	r5, #16
   1efd4:	e7e1      	b.n	1ef9a <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1efd6:	f06f 0512 	mvn.w	r5, #18
   1efda:	e7de      	b.n	1ef9a <cf_write+0x4a>

0001efdc <bt_gatt_attr_value_handle>:
{
   1efdc:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1efde:	4604      	mov	r4, r0
   1efe0:	b910      	cbnz	r0, 1efe8 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   1efe2:	2000      	movs	r0, #0
}
   1efe4:	b002      	add	sp, #8
   1efe6:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1efe8:	2300      	movs	r3, #0
   1efea:	f88d 3004 	strb.w	r3, [sp, #4]
   1efee:	6800      	ldr	r0, [r0, #0]
   1eff0:	f642 0303 	movw	r3, #10243	; 0x2803
   1eff4:	a901      	add	r1, sp, #4
   1eff6:	f8ad 3006 	strh.w	r3, [sp, #6]
   1effa:	f7fd ff21 	bl	1ce40 <bt_uuid_cmp>
   1effe:	2800      	cmp	r0, #0
   1f000:	d1ef      	bne.n	1efe2 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   1f002:	68e3      	ldr	r3, [r4, #12]
   1f004:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   1f006:	2800      	cmp	r0, #0
   1f008:	d1ec      	bne.n	1efe4 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   1f00a:	4620      	mov	r0, r4
   1f00c:	f7f6 fcc4 	bl	15998 <bt_gatt_attr_get_handle>
   1f010:	3001      	adds	r0, #1
   1f012:	b280      	uxth	r0, r0
	return handle;
   1f014:	e7e6      	b.n	1efe4 <bt_gatt_attr_value_handle+0x8>

0001f016 <bt_gatt_attr_read_chrc>:
{
   1f016:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   1f018:	68cf      	ldr	r7, [r1, #12]
{
   1f01a:	b087      	sub	sp, #28
   1f01c:	4608      	mov	r0, r1
   1f01e:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   1f020:	79bb      	ldrb	r3, [r7, #6]
   1f022:	f88d 3004 	strb.w	r3, [sp, #4]
{
   1f026:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   1f02a:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1f02c:	f7ff ffd6 	bl	1efdc <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1f030:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1f032:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1f036:	780b      	ldrb	r3, [r1, #0]
   1f038:	b99b      	cbnz	r3, 1f062 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   1f03a:	884b      	ldrh	r3, [r1, #2]
   1f03c:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   1f040:	2105      	movs	r1, #5
	if (offset > value_len) {
   1f042:	42b1      	cmp	r1, r6
   1f044:	d315      	bcc.n	1f072 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   1f046:	1b89      	subs	r1, r1, r6
   1f048:	42a1      	cmp	r1, r4
   1f04a:	bfa8      	it	ge
   1f04c:	4621      	movge	r1, r4
   1f04e:	b28c      	uxth	r4, r1
	memcpy(buf, (uint8_t *)value + offset, len);
   1f050:	ab01      	add	r3, sp, #4
   1f052:	4622      	mov	r2, r4
   1f054:	1999      	adds	r1, r3, r6
   1f056:	4628      	mov	r0, r5
   1f058:	f7fd fe25 	bl	1cca6 <memcpy>
}
   1f05c:	4620      	mov	r0, r4
   1f05e:	b007      	add	sp, #28
   1f060:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   1f062:	3101      	adds	r1, #1
   1f064:	2210      	movs	r2, #16
   1f066:	f10d 0007 	add.w	r0, sp, #7
   1f06a:	f7fd fe1c 	bl	1cca6 <memcpy>
		value_len += 16U;
   1f06e:	2113      	movs	r1, #19
   1f070:	e7e7      	b.n	1f042 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f072:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   1f076:	e7f1      	b.n	1f05c <bt_gatt_attr_read_chrc+0x46>

0001f078 <bt_gatt_foreach_attr>:
{
   1f078:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1f07a:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1f07e:	2300      	movs	r3, #0
   1f080:	9300      	str	r3, [sp, #0]
   1f082:	461a      	mov	r2, r3
   1f084:	f7f6 fcb8 	bl	159f8 <bt_gatt_foreach_attr_type>
}
   1f088:	b005      	add	sp, #20
   1f08a:	f85d fb04 	ldr.w	pc, [sp], #4

0001f08e <bt_gatt_check_perm>:
{
   1f08e:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   1f090:	07d4      	lsls	r4, r2, #31
{
   1f092:	4605      	mov	r5, r0
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1f094:	7c88      	ldrb	r0, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   1f096:	d504      	bpl.n	1f0a2 <bt_gatt_check_perm+0x14>
   1f098:	f010 0f15 	tst.w	r0, #21
   1f09c:	d01e      	beq.n	1f0dc <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1f09e:	684b      	ldr	r3, [r1, #4]
   1f0a0:	b1e3      	cbz	r3, 1f0dc <bt_gatt_check_perm+0x4e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   1f0a2:	0793      	lsls	r3, r2, #30
   1f0a4:	d504      	bpl.n	1f0b0 <bt_gatt_check_perm+0x22>
   1f0a6:	f010 0f2a 	tst.w	r0, #42	; 0x2a
   1f0aa:	d019      	beq.n	1f0e0 <bt_gatt_check_perm+0x52>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   1f0ac:	688b      	ldr	r3, [r1, #8]
   1f0ae:	b1bb      	cbz	r3, 1f0e0 <bt_gatt_check_perm+0x52>
	mask &= attr->perm;
   1f0b0:	ea02 0400 	and.w	r4, r2, r0
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   1f0b4:	f014 0f30 	tst.w	r4, #48	; 0x30
   1f0b8:	d103      	bne.n	1f0c2 <bt_gatt_check_perm+0x34>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   1f0ba:	f014 000c 	ands.w	r0, r4, #12
   1f0be:	d107      	bne.n	1f0d0 <bt_gatt_check_perm+0x42>
}
   1f0c0:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   1f0c2:	4628      	mov	r0, r5
   1f0c4:	f7fe fdc9 	bl	1dc5a <bt_conn_get_security>
   1f0c8:	2802      	cmp	r0, #2
   1f0ca:	d8f6      	bhi.n	1f0ba <bt_gatt_check_perm+0x2c>
			return BT_ATT_ERR_AUTHENTICATION;
   1f0cc:	2005      	movs	r0, #5
   1f0ce:	e7f7      	b.n	1f0c0 <bt_gatt_check_perm+0x32>
		if (!conn->encrypt) {
   1f0d0:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   1f0d2:	2b00      	cmp	r3, #0
   1f0d4:	bf14      	ite	ne
   1f0d6:	2000      	movne	r0, #0
   1f0d8:	200f      	moveq	r0, #15
   1f0da:	e7f1      	b.n	1f0c0 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   1f0dc:	2002      	movs	r0, #2
   1f0de:	e7ef      	b.n	1f0c0 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   1f0e0:	2003      	movs	r0, #3
   1f0e2:	e7ed      	b.n	1f0c0 <bt_gatt_check_perm+0x32>

0001f0e4 <gatt_notify>:
{
   1f0e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f0e8:	4614      	mov	r4, r2
   1f0ea:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr,
   1f0ec:	2214      	movs	r2, #20
   1f0ee:	6861      	ldr	r1, [r4, #4]
{
   1f0f0:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr,
   1f0f2:	f7ff ffcc 	bl	1f08e <bt_gatt_check_perm>
   1f0f6:	bb08      	cbnz	r0, 1f13c <gatt_notify+0x58>
				sizeof(*nfy) + params->len);
   1f0f8:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1f0fa:	211b      	movs	r1, #27
   1f0fc:	3202      	adds	r2, #2
   1f0fe:	4638      	mov	r0, r7
   1f100:	f7ff fb04 	bl	1e70c <bt_att_create_pdu>
	if (!buf) {
   1f104:	4605      	mov	r5, r0
   1f106:	b1e8      	cbz	r0, 1f144 <gatt_notify+0x60>
   1f108:	f100 0908 	add.w	r9, r0, #8
   1f10c:	2102      	movs	r1, #2
   1f10e:	4648      	mov	r0, r9
   1f110:	f000 fd1b 	bl	1fb4a <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1f114:	4606      	mov	r6, r0
   1f116:	89a1      	ldrh	r1, [r4, #12]
   1f118:	f826 8b02 	strh.w	r8, [r6], #2
   1f11c:	4648      	mov	r0, r9
   1f11e:	f000 fd14 	bl	1fb4a <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   1f122:	89a2      	ldrh	r2, [r4, #12]
   1f124:	68a1      	ldr	r1, [r4, #8]
   1f126:	4630      	mov	r0, r6
   1f128:	f7fd fdbd 	bl	1cca6 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   1f12c:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   1f130:	4629      	mov	r1, r5
   1f132:	4638      	mov	r0, r7
}
   1f134:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   1f138:	f7ff bba9 	b.w	1e88e <bt_att_send>
		return -EPERM;
   1f13c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1f140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOMEM;
   1f144:	f06f 000b 	mvn.w	r0, #11
   1f148:	e7fa      	b.n	1f140 <gatt_notify+0x5c>

0001f14a <bt_gatt_change_aware>:
{
   1f14a:	b538      	push	{r3, r4, r5, lr}
   1f14c:	460d      	mov	r5, r1
	cfg = find_cf_cfg(conn);
   1f14e:	f7f6 fa1b 	bl	15588 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1f152:	b910      	cbnz	r0, 1f15a <bt_gatt_change_aware+0x10>
		return true;
   1f154:	2501      	movs	r5, #1
}
   1f156:	4628      	mov	r0, r5
   1f158:	bd38      	pop	{r3, r4, r5, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1f15a:	7a03      	ldrb	r3, [r0, #8]
   1f15c:	07d9      	lsls	r1, r3, #31
   1f15e:	d5f9      	bpl.n	1f154 <bt_gatt_change_aware+0xa>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1f160:	f100 040c 	add.w	r4, r0, #12
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1f164:	4620      	mov	r0, r4
   1f166:	f7ff fc15 	bl	1e994 <atomic_get>
   1f16a:	07c2      	lsls	r2, r0, #31
   1f16c:	d4f2      	bmi.n	1f154 <bt_gatt_change_aware+0xa>
	if (!req) {
   1f16e:	2d00      	cmp	r5, #0
   1f170:	d0f1      	beq.n	1f156 <bt_gatt_change_aware+0xc>
   1f172:	4620      	mov	r0, r4
   1f174:	f7ff fc0e 	bl	1e994 <atomic_get>
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   1f178:	0783      	lsls	r3, r0, #30
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1f17a:	f3c0 0540 	ubfx	r5, r0, #1, #1
   1f17e:	d509      	bpl.n	1f194 <bt_gatt_change_aware+0x4a>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1f180:	f06f 0102 	mvn.w	r1, #2
   1f184:	4620      	mov	r0, r4
   1f186:	f7ff fc8f 	bl	1eaa8 <atomic_and>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1f18a:	2101      	movs	r1, #1
   1f18c:	4620      	mov	r0, r4
   1f18e:	f7ff fc5d 	bl	1ea4c <atomic_or>
}
   1f192:	e7e0      	b.n	1f156 <bt_gatt_change_aware+0xc>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1f194:	2102      	movs	r1, #2
   1f196:	e7f9      	b.n	1f18c <bt_gatt_change_aware+0x42>

0001f198 <sys_memcpy_swap>:
	psrc += length - 1;
   1f198:	1e53      	subs	r3, r2, #1
   1f19a:	4419      	add	r1, r3
	for (; length > 0; length--) {
   1f19c:	4402      	add	r2, r0
		*pdst++ = *psrc--;
   1f19e:	f811 3901 	ldrb.w	r3, [r1], #-1
   1f1a2:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   1f1a6:	4290      	cmp	r0, r2
   1f1a8:	d1f9      	bne.n	1f19e <sys_memcpy_swap+0x6>
}
   1f1aa:	4770      	bx	lr

0001f1ac <smp_encrypt_info>:
}
   1f1ac:	2007      	movs	r0, #7
   1f1ae:	4770      	bx	lr

0001f1b0 <smp_chan_get>:
{
   1f1b0:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   1f1b2:	2106      	movs	r1, #6
   1f1b4:	f7fe fe8f 	bl	1ded6 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1f1b8:	b100      	cbz	r0, 1f1bc <smp_chan_get+0xc>
	return CONTAINER_OF(chan, struct bt_smp, chan);
   1f1ba:	38f0      	subs	r0, #240	; 0xf0
}
   1f1bc:	bd08      	pop	{r3, pc}

0001f1be <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1f1be:	2301      	movs	r3, #1
   1f1c0:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1f1c2:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1f1c4:	f3bf 8f5b 	dmb	ish
   1f1c8:	e850 2f00 	ldrex	r2, [r0]
   1f1cc:	401a      	ands	r2, r3
   1f1ce:	e840 2100 	strex	r1, r2, [r0]
   1f1d2:	2900      	cmp	r1, #0
   1f1d4:	d1f8      	bne.n	1f1c8 <atomic_clear_bit+0xa>
   1f1d6:	f3bf 8f5b 	dmb	ish
}
   1f1da:	4770      	bx	lr

0001f1dc <bt_smp_aes_cmac>:
{
   1f1dc:	b570      	push	{r4, r5, r6, lr}
   1f1de:	b0c2      	sub	sp, #264	; 0x108
   1f1e0:	460d      	mov	r5, r1
   1f1e2:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   1f1e4:	4601      	mov	r1, r0
   1f1e6:	aa16      	add	r2, sp, #88	; 0x58
   1f1e8:	4668      	mov	r0, sp
{
   1f1ea:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   1f1ec:	f7fd fbc3 	bl	1c976 <tc_cmac_setup>
   1f1f0:	b150      	cbz	r0, 1f208 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   1f1f2:	4632      	mov	r2, r6
   1f1f4:	4629      	mov	r1, r5
   1f1f6:	4668      	mov	r0, sp
   1f1f8:	f7fd fbe8 	bl	1c9cc <tc_cmac_update>
   1f1fc:	b120      	cbz	r0, 1f208 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   1f1fe:	4669      	mov	r1, sp
   1f200:	4620      	mov	r0, r4
   1f202:	f7fd fc4e 	bl	1caa2 <tc_cmac_final>
   1f206:	b918      	cbnz	r0, 1f210 <bt_smp_aes_cmac+0x34>
		return -EIO;
   1f208:	f06f 0004 	mvn.w	r0, #4
}
   1f20c:	b042      	add	sp, #264	; 0x108
   1f20e:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   1f210:	2000      	movs	r0, #0
   1f212:	e7fb      	b.n	1f20c <bt_smp_aes_cmac+0x30>

0001f214 <smp_security_request>:
   1f214:	2007      	movs	r0, #7
   1f216:	4770      	bx	lr

0001f218 <smp_send.constprop.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   1f218:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   1f21a:	2300      	movs	r3, #0
   1f21c:	9300      	str	r3, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   1f21e:	4604      	mov	r4, r0
   1f220:	460d      	mov	r5, r1
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   1f222:	460a      	mov	r2, r1
   1f224:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
   1f228:	2106      	movs	r1, #6
   1f22a:	f7fe fdfa 	bl	1de22 <bt_l2cap_send_cb>
   1f22e:	b128      	cbz	r0, 1f23c <smp_send.constprop.0+0x24>
		net_buf_unref(buf);
   1f230:	4628      	mov	r0, r5
}
   1f232:	b003      	add	sp, #12
   1f234:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   1f238:	f7f8 b93e 	b.w	174b8 <net_buf_unref>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   1f23c:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1f240:	2300      	movs	r3, #0
   1f242:	f504 70ec 	add.w	r0, r4, #472	; 0x1d8
}
   1f246:	b003      	add	sp, #12
   1f248:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   1f24c:	f7fa bc9a 	b.w	19b84 <k_work_reschedule>

0001f250 <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   1f250:	b510      	push	{r4, lr}
   1f252:	1e43      	subs	r3, r0, #1
   1f254:	f100 0210 	add.w	r2, r0, #16
   1f258:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   1f25a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1f25e:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1f262:	701c      	strb	r4, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   1f264:	4283      	cmp	r3, r0
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1f266:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   1f268:	d1f7      	bne.n	1f25a <sys_mem_swap.constprop.0+0xa>
	}
}
   1f26a:	bd10      	pop	{r4, pc}

0001f26c <smp_f6>:
{
   1f26c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f26e:	b097      	sub	sp, #92	; 0x5c
   1f270:	4605      	mov	r5, r0
   1f272:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
   1f274:	a805      	add	r0, sp, #20
   1f276:	2210      	movs	r2, #16
{
   1f278:	461c      	mov	r4, r3
   1f27a:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   1f27c:	f7ff ff8c 	bl	1f198 <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   1f280:	2210      	movs	r2, #16
   1f282:	4631      	mov	r1, r6
   1f284:	a809      	add	r0, sp, #36	; 0x24
   1f286:	f7ff ff87 	bl	1f198 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   1f28a:	4621      	mov	r1, r4
   1f28c:	2210      	movs	r2, #16
   1f28e:	a80d      	add	r0, sp, #52	; 0x34
   1f290:	f7ff ff82 	bl	1f198 <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   1f294:	991c      	ldr	r1, [sp, #112]	; 0x70
   1f296:	2203      	movs	r2, #3
   1f298:	a811      	add	r0, sp, #68	; 0x44
   1f29a:	f7ff ff7d 	bl	1f198 <sys_memcpy_swap>
	m[51] = a1->type;
   1f29e:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   1f2a0:	f814 3b01 	ldrb.w	r3, [r4], #1
   1f2a4:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   1f2a8:	4621      	mov	r1, r4
   1f2aa:	2206      	movs	r2, #6
   1f2ac:	a812      	add	r0, sp, #72	; 0x48
   1f2ae:	f7fd fcfa 	bl	1cca6 <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   1f2b2:	4621      	mov	r1, r4
   1f2b4:	2206      	movs	r2, #6
   1f2b6:	a812      	add	r0, sp, #72	; 0x48
   1f2b8:	f7ff ff6e 	bl	1f198 <sys_memcpy_swap>
	m[58] = a2->type;
   1f2bc:	9c1e      	ldr	r4, [sp, #120]	; 0x78
   1f2be:	f814 3b01 	ldrb.w	r3, [r4], #1
   1f2c2:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   1f2c6:	4621      	mov	r1, r4
   1f2c8:	2206      	movs	r2, #6
   1f2ca:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   1f2ce:	f7fd fcea 	bl	1cca6 <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   1f2d2:	4621      	mov	r1, r4
   1f2d4:	2206      	movs	r2, #6
   1f2d6:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   1f2da:	f7ff ff5d 	bl	1f198 <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   1f2de:	2210      	movs	r2, #16
   1f2e0:	4629      	mov	r1, r5
   1f2e2:	a801      	add	r0, sp, #4
   1f2e4:	f7ff ff58 	bl	1f198 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   1f2e8:	463b      	mov	r3, r7
   1f2ea:	2241      	movs	r2, #65	; 0x41
   1f2ec:	a905      	add	r1, sp, #20
   1f2ee:	a801      	add	r0, sp, #4
   1f2f0:	f7ff ff74 	bl	1f1dc <bt_smp_aes_cmac>
	if (err) {
   1f2f4:	4604      	mov	r4, r0
   1f2f6:	b910      	cbnz	r0, 1f2fe <smp_f6+0x92>
	sys_mem_swap(check, 16);
   1f2f8:	4638      	mov	r0, r7
   1f2fa:	f7ff ffa9 	bl	1f250 <sys_mem_swap.constprop.0>
}
   1f2fe:	4620      	mov	r0, r4
   1f300:	b017      	add	sp, #92	; 0x5c
   1f302:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001f304 <smp_f4>:
{
   1f304:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f306:	b097      	sub	sp, #92	; 0x5c
   1f308:	4614      	mov	r4, r2
   1f30a:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   1f30c:	2220      	movs	r2, #32
   1f30e:	4601      	mov	r1, r0
   1f310:	a805      	add	r0, sp, #20
{
   1f312:	461d      	mov	r5, r3
   1f314:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   1f316:	f7ff ff3f 	bl	1f198 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   1f31a:	2220      	movs	r2, #32
   1f31c:	4631      	mov	r1, r6
   1f31e:	a80d      	add	r0, sp, #52	; 0x34
   1f320:	f7ff ff3a 	bl	1f198 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   1f324:	4621      	mov	r1, r4
   1f326:	2210      	movs	r2, #16
   1f328:	a801      	add	r0, sp, #4
	m[64] = z;
   1f32a:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   1f32e:	f7ff ff33 	bl	1f198 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   1f332:	463b      	mov	r3, r7
   1f334:	2241      	movs	r2, #65	; 0x41
   1f336:	a905      	add	r1, sp, #20
   1f338:	a801      	add	r0, sp, #4
   1f33a:	f7ff ff4f 	bl	1f1dc <bt_smp_aes_cmac>
	if (err) {
   1f33e:	4604      	mov	r4, r0
   1f340:	b910      	cbnz	r0, 1f348 <smp_f4+0x44>
	sys_mem_swap(res, 16);
   1f342:	4638      	mov	r0, r7
   1f344:	f7ff ff84 	bl	1f250 <sys_mem_swap.constprop.0>
}
   1f348:	4620      	mov	r0, r4
   1f34a:	b017      	add	sp, #92	; 0x5c
   1f34c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001f34e <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1f34e:	2301      	movs	r3, #1
   1f350:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1f352:	f3bf 8f5b 	dmb	ish
   1f356:	e850 2f00 	ldrex	r2, [r0]
   1f35a:	431a      	orrs	r2, r3
   1f35c:	e840 2100 	strex	r1, r2, [r0]
   1f360:	2900      	cmp	r1, #0
   1f362:	d1f8      	bne.n	1f356 <atomic_set_bit+0x8>
   1f364:	f3bf 8f5b 	dmb	ish
}
   1f368:	4770      	bx	lr

0001f36a <smp_keypress_notif>:
{
   1f36a:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1f36c:	210e      	movs	r1, #14
   1f36e:	f7ff ffee 	bl	1f34e <atomic_set_bit>
}
   1f372:	2000      	movs	r0, #0
   1f374:	bd08      	pop	{r3, pc}

0001f376 <smp_master_ident>:
   1f376:	2007      	movs	r0, #7
   1f378:	4770      	bx	lr

0001f37a <smp_pairing_rsp>:
   1f37a:	2007      	movs	r0, #7
   1f37c:	4770      	bx	lr

0001f37e <smp_signing_info>:
   1f37e:	2007      	movs	r0, #7
   1f380:	4770      	bx	lr

0001f382 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1f382:	f3bf 8f5b 	dmb	ish
   1f386:	6800      	ldr	r0, [r0, #0]
   1f388:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1f38c:	4108      	asrs	r0, r1
}
   1f38e:	f000 0001 	and.w	r0, r0, #1
   1f392:	4770      	bx	lr

0001f394 <update_keys_check>:
{
   1f394:	b510      	push	{r4, lr}
   1f396:	4603      	mov	r3, r0
	if (!keys ||
   1f398:	b1d9      	cbz	r1, 1f3d2 <update_keys_check+0x3e>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   1f39a:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   1f39c:	f010 0f24 	tst.w	r0, #36	; 0x24
   1f3a0:	d017      	beq.n	1f3d2 <update_keys_check+0x3e>
	return MIN(req->max_key_size, rsp->max_key_size);
   1f3a2:	7d1a      	ldrb	r2, [r3, #20]
   1f3a4:	7b5c      	ldrb	r4, [r3, #13]
	if (keys->enc_size > get_encryption_key_size(smp)) {
   1f3a6:	7b09      	ldrb	r1, [r1, #12]
   1f3a8:	42a2      	cmp	r2, r4
   1f3aa:	bf28      	it	cs
   1f3ac:	4622      	movcs	r2, r4
   1f3ae:	4291      	cmp	r1, r2
   1f3b0:	d901      	bls.n	1f3b6 <update_keys_check+0x22>
		return false;
   1f3b2:	2000      	movs	r0, #0
}
   1f3b4:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   1f3b6:	0682      	lsls	r2, r0, #26
   1f3b8:	d404      	bmi.n	1f3c4 <update_keys_check+0x30>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   1f3ba:	7a18      	ldrb	r0, [r3, #8]
   1f3bc:	3800      	subs	r0, #0
   1f3be:	bf18      	it	ne
   1f3c0:	2001      	movne	r0, #1
   1f3c2:	e7f7      	b.n	1f3b4 <update_keys_check+0x20>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1f3c4:	2105      	movs	r1, #5
   1f3c6:	1d18      	adds	r0, r3, #4
   1f3c8:	f7ff ffdb 	bl	1f382 <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   1f3cc:	2800      	cmp	r0, #0
   1f3ce:	d1f4      	bne.n	1f3ba <update_keys_check+0x26>
   1f3d0:	e7ef      	b.n	1f3b2 <update_keys_check+0x1e>
		return true;
   1f3d2:	2001      	movs	r0, #1
   1f3d4:	e7ee      	b.n	1f3b4 <update_keys_check+0x20>

0001f3d6 <smp_ident_info>:
{
   1f3d6:	b538      	push	{r3, r4, r5, lr}
   1f3d8:	4604      	mov	r4, r0
   1f3da:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1f3dc:	3004      	adds	r0, #4
   1f3de:	210d      	movs	r1, #13
   1f3e0:	f7ff ffcf 	bl	1f382 <atomic_test_bit>
   1f3e4:	b170      	cbz	r0, 1f404 <smp_ident_info+0x2e>
		struct bt_smp_ident_info *req = (void *)buf->data;
   1f3e6:	689d      	ldr	r5, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   1f3e8:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1f3ec:	2002      	movs	r0, #2
   1f3ee:	7a19      	ldrb	r1, [r3, #8]
   1f3f0:	f103 0288 	add.w	r2, r3, #136	; 0x88
   1f3f4:	f000 fafd 	bl	1f9f2 <bt_keys_get_type>
		if (!keys) {
   1f3f8:	b150      	cbz	r0, 1f410 <smp_ident_info+0x3a>
		memcpy(keys->irk.val, req->irk, 16);
   1f3fa:	2210      	movs	r2, #16
   1f3fc:	4629      	mov	r1, r5
   1f3fe:	302a      	adds	r0, #42	; 0x2a
   1f400:	f7fd fc51 	bl	1cca6 <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   1f404:	4620      	mov	r0, r4
   1f406:	2109      	movs	r1, #9
   1f408:	f7ff ffa1 	bl	1f34e <atomic_set_bit>
	return 0;
   1f40c:	2000      	movs	r0, #0
}
   1f40e:	bd38      	pop	{r3, r4, r5, pc}
			return BT_SMP_ERR_UNSPECIFIED;
   1f410:	2008      	movs	r0, #8
   1f412:	e7fc      	b.n	1f40e <smp_ident_info+0x38>

0001f414 <smp_create_pdu.constprop.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   1f414:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1f416:	1d05      	adds	r5, r0, #4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   1f418:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1f41a:	4628      	mov	r0, r5
   1f41c:	2104      	movs	r1, #4
   1f41e:	f7ff ffb0 	bl	1f382 <atomic_test_bit>
   1f422:	b168      	cbz	r0, 1f440 <smp_create_pdu.constprop.0+0x2c>
		timeout = K_NO_WAIT;
   1f424:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   1f426:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   1f428:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   1f42a:	4608      	mov	r0, r1
   1f42c:	f7fe fcf6 	bl	1de1c <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   1f430:	4604      	mov	r4, r0
   1f432:	b940      	cbnz	r0, 1f446 <smp_create_pdu.constprop.0+0x32>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1f434:	2104      	movs	r1, #4
   1f436:	4628      	mov	r0, r5
   1f438:	f7ff ff89 	bl	1f34e <atomic_set_bit>
}
   1f43c:	4620      	mov	r0, r4
   1f43e:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   1f440:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1f444:	e7ef      	b.n	1f426 <smp_create_pdu.constprop.0+0x12>
   1f446:	2101      	movs	r1, #1
   1f448:	3008      	adds	r0, #8
   1f44a:	f000 fb7e 	bl	1fb4a <net_buf_simple_add>
	hdr->code = op;
   1f44e:	7006      	strb	r6, [r0, #0]
	return buf;
   1f450:	e7f4      	b.n	1f43c <smp_create_pdu.constprop.0+0x28>

0001f452 <smp_send_pairing_random>:
{
   1f452:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   1f454:	2104      	movs	r1, #4
{
   1f456:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   1f458:	f7ff ffdc 	bl	1f414 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   1f45c:	4604      	mov	r4, r0
   1f45e:	b170      	cbz	r0, 1f47e <smp_send_pairing_random+0x2c>
   1f460:	2110      	movs	r1, #16
   1f462:	3008      	adds	r0, #8
   1f464:	f000 fb71 	bl	1fb4a <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   1f468:	2210      	movs	r2, #16
   1f46a:	f105 0127 	add.w	r1, r5, #39	; 0x27
   1f46e:	f7fd fc1a 	bl	1cca6 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   1f472:	4628      	mov	r0, r5
   1f474:	4621      	mov	r1, r4
   1f476:	f7ff fecf 	bl	1f218 <smp_send.constprop.0>
	return 0;
   1f47a:	2000      	movs	r0, #0
}
   1f47c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1f47e:	2008      	movs	r0, #8
   1f480:	e7fc      	b.n	1f47c <smp_send_pairing_random+0x2a>

0001f482 <smp_dhkey_check>:
{
   1f482:	b570      	push	{r4, r5, r6, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
   1f484:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
   1f488:	78db      	ldrb	r3, [r3, #3]
   1f48a:	2b01      	cmp	r3, #1
{
   1f48c:	4604      	mov	r4, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
   1f48e:	d114      	bne.n	1f4ba <smp_dhkey_check+0x38>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   1f490:	688e      	ldr	r6, [r1, #8]
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1f492:	1d05      	adds	r5, r0, #4
   1f494:	2110      	movs	r1, #16
   1f496:	4628      	mov	r0, r5
   1f498:	f7ff fe91 	bl	1f1be <atomic_clear_bit>
		memcpy(smp->e, req->e, sizeof(smp->e));
   1f49c:	4631      	mov	r1, r6
   1f49e:	2210      	movs	r2, #16
   1f4a0:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   1f4a4:	f7fd fbff 	bl	1cca6 <memcpy>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   1f4a8:	2107      	movs	r1, #7
   1f4aa:	4628      	mov	r0, r5
   1f4ac:	f7ff ff69 	bl	1f382 <atomic_test_bit>
   1f4b0:	b128      	cbz	r0, 1f4be <smp_dhkey_check+0x3c>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1f4b2:	2109      	movs	r1, #9
   1f4b4:	4628      	mov	r0, r5
   1f4b6:	f7ff ff4a 	bl	1f34e <atomic_set_bit>
}
   1f4ba:	2000      	movs	r0, #0
   1f4bc:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1f4be:	210a      	movs	r1, #10
   1f4c0:	4628      	mov	r0, r5
   1f4c2:	f7ff ff5e 	bl	1f382 <atomic_test_bit>
   1f4c6:	2800      	cmp	r0, #0
   1f4c8:	d1f3      	bne.n	1f4b2 <smp_dhkey_check+0x30>
		return compute_and_check_and_send_slave_dhcheck(smp);
   1f4ca:	4620      	mov	r0, r4
}
   1f4cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_check_and_send_slave_dhcheck(smp);
   1f4d0:	f7f7 b998 	b.w	16804 <compute_and_check_and_send_slave_dhcheck>

0001f4d4 <smp_pairing_confirm>:
{
   1f4d4:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   1f4d6:	688e      	ldr	r6, [r1, #8]
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1f4d8:	1d05      	adds	r5, r0, #4
{
   1f4da:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1f4dc:	210b      	movs	r1, #11
   1f4de:	4628      	mov	r0, r5
   1f4e0:	f7ff fe6d 	bl	1f1be <atomic_clear_bit>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   1f4e4:	2210      	movs	r2, #16
   1f4e6:	4631      	mov	r1, r6
   1f4e8:	f104 0017 	add.w	r0, r4, #23
   1f4ec:	f7fd fbdb 	bl	1cca6 <memcpy>
	switch (smp->method) {
   1f4f0:	7a23      	ldrb	r3, [r4, #8]
   1f4f2:	2b01      	cmp	r3, #1
   1f4f4:	d009      	beq.n	1f50a <smp_pairing_confirm+0x36>
   1f4f6:	2b02      	cmp	r3, #2
   1f4f8:	d113      	bne.n	1f522 <smp_pairing_confirm+0x4e>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1f4fa:	4620      	mov	r0, r4
   1f4fc:	2104      	movs	r1, #4
   1f4fe:	f7ff ff26 	bl	1f34e <atomic_set_bit>
}
   1f502:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_confirm(smp);
   1f506:	f7f7 ba5f 	b.w	169c8 <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1f50a:	210a      	movs	r1, #10
   1f50c:	4628      	mov	r0, r5
   1f50e:	f7ff ff38 	bl	1f382 <atomic_test_bit>
   1f512:	2800      	cmp	r0, #0
   1f514:	d0f1      	beq.n	1f4fa <smp_pairing_confirm+0x26>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1f516:	4628      	mov	r0, r5
   1f518:	2100      	movs	r1, #0
   1f51a:	f7ff ff18 	bl	1f34e <atomic_set_bit>
			return 0;
   1f51e:	2000      	movs	r0, #0
}
   1f520:	bd70      	pop	{r4, r5, r6, pc}
	switch (smp->method) {
   1f522:	2008      	movs	r0, #8
   1f524:	e7fc      	b.n	1f520 <smp_pairing_confirm+0x4c>

0001f526 <atomic_test_and_clear_bit>:
{
   1f526:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1f528:	2301      	movs	r3, #1
   1f52a:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1f52e:	43ca      	mvns	r2, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1f530:	f3bf 8f5b 	dmb	ish
   1f534:	e850 3f00 	ldrex	r3, [r0]
   1f538:	ea03 0c02 	and.w	ip, r3, r2
   1f53c:	e840 ce00 	strex	lr, ip, [r0]
   1f540:	f1be 0f00 	cmp.w	lr, #0
   1f544:	d1f6      	bne.n	1f534 <atomic_test_and_clear_bit+0xe>
   1f546:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   1f54a:	420b      	tst	r3, r1
}
   1f54c:	bf14      	ite	ne
   1f54e:	2001      	movne	r0, #1
   1f550:	2000      	moveq	r0, #0
   1f552:	f85d fb04 	ldr.w	pc, [sp], #4

0001f556 <smp_reset>:
{
   1f556:	b538      	push	{r3, r4, r5, lr}
   1f558:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1f55a:	1d03      	adds	r3, r0, #4
   1f55c:	2500      	movs	r5, #0
   1f55e:	f3bf 8f5b 	dmb	ish
   1f562:	e853 2f00 	ldrex	r2, [r3]
   1f566:	e843 5100 	strex	r1, r5, [r3]
   1f56a:	2900      	cmp	r1, #0
   1f56c:	d1f9      	bne.n	1f562 <smp_reset+0xc>
   1f56e:	f3bf 8f5b 	dmb	ish
	(void)k_work_cancel_delayable(&smp->work);
   1f572:	f504 70ec 	add.w	r0, r4, #472	; 0x1d8
   1f576:	f000 ffa5 	bl	204c4 <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   1f57a:	7225      	strb	r5, [r4, #8]
   1f57c:	f3bf 8f5b 	dmb	ish
   1f580:	e854 3f00 	ldrex	r3, [r4]
   1f584:	e844 5200 	strex	r2, r5, [r4]
   1f588:	2a00      	cmp	r2, #0
   1f58a:	d1f9      	bne.n	1f580 <smp_reset+0x2a>
   1f58c:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   1f590:	4620      	mov	r0, r4
   1f592:	2101      	movs	r1, #1
}
   1f594:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   1f598:	f7ff bed9 	b.w	1f34e <atomic_set_bit>

0001f59c <bt_smp_request_ltk>:
{
   1f59c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f5a0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   1f5a4:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
   1f5a8:	4604      	mov	r4, r0
   1f5aa:	4693      	mov	fp, r2
   1f5ac:	469a      	mov	sl, r3
	smp = smp_chan_get(conn);
   1f5ae:	f7ff fdff 	bl	1f1b0 <smp_chan_get>
	if (!smp) {
   1f5b2:	4605      	mov	r5, r0
   1f5b4:	2800      	cmp	r0, #0
   1f5b6:	d070      	beq.n	1f69a <bt_smp_request_ltk+0xfe>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   1f5b8:	1d07      	adds	r7, r0, #4
	if (ediv == 0U && rand == 0U &&
   1f5ba:	f1b9 0f00 	cmp.w	r9, #0
   1f5be:	d128      	bne.n	1f612 <bt_smp_request_ltk+0x76>
   1f5c0:	ea5b 030a 	orrs.w	r3, fp, sl
   1f5c4:	d125      	bne.n	1f612 <bt_smp_request_ltk+0x76>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   1f5c6:	2103      	movs	r1, #3
   1f5c8:	4638      	mov	r0, r7
   1f5ca:	f7ff feda 	bl	1f382 <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   1f5ce:	b300      	cbz	r0, 1f612 <bt_smp_request_ltk+0x76>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1f5d0:	2101      	movs	r1, #1
   1f5d2:	4638      	mov	r0, r7
   1f5d4:	f7ff fed5 	bl	1f382 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   1f5d8:	4606      	mov	r6, r0
   1f5da:	b1d0      	cbz	r0, 1f612 <bt_smp_request_ltk+0x76>
	return MIN(req->max_key_size, rsp->max_key_size);
   1f5dc:	7d2c      	ldrb	r4, [r5, #20]
   1f5de:	7b6b      	ldrb	r3, [r5, #13]
   1f5e0:	429c      	cmp	r4, r3
   1f5e2:	bf28      	it	cs
   1f5e4:	461c      	movcs	r4, r3
		memcpy(ltk, smp->tk, enc_size);
   1f5e6:	4622      	mov	r2, r4
   1f5e8:	f105 0147 	add.w	r1, r5, #71	; 0x47
   1f5ec:	4640      	mov	r0, r8
   1f5ee:	f7fd fb5a 	bl	1cca6 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   1f5f2:	2c0f      	cmp	r4, #15
   1f5f4:	d806      	bhi.n	1f604 <bt_smp_request_ltk+0x68>
			(void)memset(ltk + enc_size, 0,
   1f5f6:	f1c4 0210 	rsb	r2, r4, #16
   1f5fa:	4649      	mov	r1, r9
   1f5fc:	eb08 0004 	add.w	r0, r8, r4
   1f600:	f7fd fb5c 	bl	1ccbc <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1f604:	2101      	movs	r1, #1
   1f606:	4638      	mov	r0, r7
   1f608:	f7ff fea1 	bl	1f34e <atomic_set_bit>
}
   1f60c:	4630      	mov	r0, r6
   1f60e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!conn->le.keys) {
   1f612:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   1f616:	b983      	cbnz	r3, 1f63a <bt_smp_request_ltk+0x9e>
					     &conn->le.dst);
   1f618:	f104 0688 	add.w	r6, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   1f61c:	7a21      	ldrb	r1, [r4, #8]
   1f61e:	4632      	mov	r2, r6
   1f620:	2020      	movs	r0, #32
   1f622:	f7f7 fdb1 	bl	17188 <bt_keys_find>
   1f626:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   1f62a:	b930      	cbnz	r0, 1f63a <bt_smp_request_ltk+0x9e>
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
   1f62c:	7a21      	ldrb	r1, [r4, #8]
   1f62e:	4632      	mov	r2, r6
   1f630:	2001      	movs	r0, #1
   1f632:	f7f7 fda9 	bl	17188 <bt_keys_find>
   1f636:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   1f63a:	f1b9 0f00 	cmp.w	r9, #0
   1f63e:	d11d      	bne.n	1f67c <bt_smp_request_ltk+0xe0>
   1f640:	ea5b 030a 	orrs.w	r3, fp, sl
   1f644:	d11a      	bne.n	1f67c <bt_smp_request_ltk+0xe0>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   1f646:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   1f64a:	b1b9      	cbz	r1, 1f67c <bt_smp_request_ltk+0xe0>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   1f64c:	89cb      	ldrh	r3, [r1, #14]
   1f64e:	069b      	lsls	r3, r3, #26
   1f650:	d514      	bpl.n	1f67c <bt_smp_request_ltk+0xe0>
		enc_size = conn->le.keys->enc_size;
   1f652:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   1f654:	4640      	mov	r0, r8
   1f656:	4622      	mov	r2, r4
   1f658:	311a      	adds	r1, #26
   1f65a:	f7fd fb24 	bl	1cca6 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   1f65e:	2c0f      	cmp	r4, #15
   1f660:	d806      	bhi.n	1f670 <bt_smp_request_ltk+0xd4>
			(void)memset(ltk + enc_size, 0,
   1f662:	f1c4 0210 	rsb	r2, r4, #16
   1f666:	4649      	mov	r1, r9
   1f668:	eb08 0004 	add.w	r0, r8, r4
   1f66c:	f7fd fb26 	bl	1ccbc <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1f670:	2101      	movs	r1, #1
   1f672:	4638      	mov	r0, r7
   1f674:	f7ff fe6b 	bl	1f34e <atomic_set_bit>
		return true;
   1f678:	2601      	movs	r6, #1
   1f67a:	e7c7      	b.n	1f60c <bt_smp_request_ltk+0x70>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   1f67c:	210f      	movs	r1, #15
   1f67e:	4638      	mov	r0, r7
   1f680:	f7ff fe7f 	bl	1f382 <atomic_test_bit>
   1f684:	b120      	cbz	r0, 1f690 <bt_smp_request_ltk+0xf4>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   1f686:	2202      	movs	r2, #2
   1f688:	2106      	movs	r1, #6
   1f68a:	4620      	mov	r0, r4
   1f68c:	f7f4 ff70 	bl	14570 <bt_conn_security_changed>
	smp_reset(smp);
   1f690:	4628      	mov	r0, r5
   1f692:	f7ff ff60 	bl	1f556 <smp_reset>
	return false;
   1f696:	2600      	movs	r6, #0
   1f698:	e7b8      	b.n	1f60c <bt_smp_request_ltk+0x70>
		return false;
   1f69a:	4606      	mov	r6, r0
   1f69c:	e7b6      	b.n	1f60c <bt_smp_request_ltk+0x70>

0001f69e <bt_smp_sign>:
   1f69e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1f6a2:	4770      	bx	lr

0001f6a4 <smp_error>:
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1f6a4:	1d03      	adds	r3, r0, #4
{
   1f6a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1f6a8:	4605      	mov	r5, r0
   1f6aa:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1f6ac:	4618      	mov	r0, r3
   1f6ae:	2103      	movs	r1, #3
   1f6b0:	f7ff fe67 	bl	1f382 <atomic_test_bit>
   1f6b4:	b1f0      	cbz	r0, 1f6f4 <smp_error+0x50>
		smp_pairing_complete(smp, reason);
   1f6b6:	4631      	mov	r1, r6
   1f6b8:	4628      	mov	r0, r5
   1f6ba:	f7f7 fb73 	bl	16da4 <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   1f6be:	2105      	movs	r1, #5
   1f6c0:	4628      	mov	r0, r5
   1f6c2:	f7ff fea7 	bl	1f414 <smp_create_pdu.constprop.0>
	if (!buf) {
   1f6c6:	4604      	mov	r4, r0
   1f6c8:	b308      	cbz	r0, 1f70e <smp_error+0x6a>
   1f6ca:	2101      	movs	r1, #1
   1f6cc:	3008      	adds	r0, #8
   1f6ce:	f000 fa3c 	bl	1fb4a <net_buf_simple_add>
	rsp->reason = reason;
   1f6d2:	7006      	strb	r6, [r0, #0]
   1f6d4:	2600      	movs	r6, #0
   1f6d6:	f8d5 00f0 	ldr.w	r0, [r5, #240]	; 0xf0
   1f6da:	9600      	str	r6, [sp, #0]
   1f6dc:	4633      	mov	r3, r6
   1f6de:	4622      	mov	r2, r4
   1f6e0:	2106      	movs	r1, #6
   1f6e2:	f7fe fb9e 	bl	1de22 <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   1f6e6:	b118      	cbz	r0, 1f6f0 <smp_error+0x4c>
		net_buf_unref(buf);
   1f6e8:	4620      	mov	r0, r4
   1f6ea:	f7f7 fee5 	bl	174b8 <net_buf_unref>
	return 0;
   1f6ee:	4630      	mov	r0, r6
}
   1f6f0:	b002      	add	sp, #8
   1f6f2:	bd70      	pop	{r4, r5, r6, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   1f6f4:	2101      	movs	r1, #1
   1f6f6:	4618      	mov	r0, r3
   1f6f8:	f7ff fe43 	bl	1f382 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1f6fc:	2800      	cmp	r0, #0
   1f6fe:	d1da      	bne.n	1f6b6 <smp_error+0x12>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   1f700:	210f      	movs	r1, #15
   1f702:	4618      	mov	r0, r3
   1f704:	f7ff fe3d 	bl	1f382 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   1f708:	2800      	cmp	r0, #0
   1f70a:	d1d4      	bne.n	1f6b6 <smp_error+0x12>
   1f70c:	e7d7      	b.n	1f6be <smp_error+0x1a>
		return -ENOBUFS;
   1f70e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1f712:	e7ed      	b.n	1f6f0 <smp_error+0x4c>

0001f714 <bt_smp_dhkey_ready>:
{
   1f714:	b570      	push	{r4, r5, r6, lr}
   1f716:	4606      	mov	r6, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   1f718:	2008      	movs	r0, #8
   1f71a:	f7f6 fe99 	bl	16450 <smp_find>
	if (smp) {
   1f71e:	4604      	mov	r4, r0
   1f720:	b1b8      	cbz	r0, 1f752 <bt_smp_dhkey_ready+0x3e>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1f722:	1d05      	adds	r5, r0, #4
   1f724:	2108      	movs	r1, #8
   1f726:	4628      	mov	r0, r5
   1f728:	f7ff fd49 	bl	1f1be <atomic_clear_bit>
	if (!dhkey) {
   1f72c:	b38e      	cbz	r6, 1f792 <bt_smp_dhkey_ready+0x7e>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   1f72e:	2107      	movs	r1, #7
   1f730:	f7ff fd45 	bl	1f1be <atomic_clear_bit>
	memcpy(smp->dhkey, dhkey, BT_DH_KEY_LEN);
   1f734:	4631      	mov	r1, r6
   1f736:	2220      	movs	r2, #32
   1f738:	f104 0097 	add.w	r0, r4, #151	; 0x97
   1f73c:	f7fd fab3 	bl	1cca6 <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1f740:	210a      	movs	r1, #10
   1f742:	4628      	mov	r0, r5
   1f744:	f7ff fe1d 	bl	1f382 <atomic_test_bit>
   1f748:	b168      	cbz	r0, 1f766 <bt_smp_dhkey_ready+0x52>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1f74a:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1f74c:	4628      	mov	r0, r5
   1f74e:	f7ff fdfe 	bl	1f34e <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   1f752:	2007      	movs	r0, #7
   1f754:	f7f6 fe7c 	bl	16450 <smp_find>
		if (smp) {
   1f758:	4604      	mov	r4, r0
   1f75a:	b118      	cbz	r0, 1f764 <bt_smp_dhkey_ready+0x50>
			err = smp_dhkey_generate(smp);
   1f75c:	f7f6 fe62 	bl	16424 <smp_dhkey_generate>
			if (err) {
   1f760:	4601      	mov	r1, r0
   1f762:	b990      	cbnz	r0, 1f78a <bt_smp_dhkey_ready+0x76>
}
   1f764:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   1f766:	2110      	movs	r1, #16
   1f768:	4628      	mov	r0, r5
   1f76a:	f7ff fe0a 	bl	1f382 <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1f76e:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   1f770:	2800      	cmp	r0, #0
   1f772:	d1eb      	bne.n	1f74c <bt_smp_dhkey_ready+0x38>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   1f774:	4628      	mov	r0, r5
   1f776:	f7ff fe04 	bl	1f382 <atomic_test_bit>
   1f77a:	2800      	cmp	r0, #0
   1f77c:	d0e9      	beq.n	1f752 <bt_smp_dhkey_ready+0x3e>
		return  compute_and_check_and_send_slave_dhcheck(smp);
   1f77e:	4620      	mov	r0, r4
   1f780:	f7f7 f840 	bl	16804 <compute_and_check_and_send_slave_dhcheck>
		if (err) {
   1f784:	4601      	mov	r1, r0
   1f786:	2800      	cmp	r0, #0
   1f788:	d0e3      	beq.n	1f752 <bt_smp_dhkey_ready+0x3e>
			smp_error(smp, err);
   1f78a:	4620      	mov	r0, r4
   1f78c:	f7ff ff8a 	bl	1f6a4 <smp_error>
   1f790:	e7df      	b.n	1f752 <bt_smp_dhkey_ready+0x3e>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   1f792:	210b      	movs	r1, #11
   1f794:	e7f9      	b.n	1f78a <bt_smp_dhkey_ready+0x76>

0001f796 <smp_ident_addr_info>:
{
   1f796:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   1f79a:	688f      	ldr	r7, [r1, #8]
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1f79c:	783b      	ldrb	r3, [r7, #0]
{
   1f79e:	4604      	mov	r4, r0
   1f7a0:	b123      	cbz	r3, 1f7ac <smp_ident_addr_info+0x16>
	if (!bt_addr_le_is_identity(&req->addr)) {
   1f7a2:	79bb      	ldrb	r3, [r7, #6]
   1f7a4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1f7a8:	2bc0      	cmp	r3, #192	; 0xc0
   1f7aa:	d16b      	bne.n	1f884 <smp_ident_addr_info+0xee>
	struct bt_conn *conn = smp->chan.chan.conn;
   1f7ac:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
	if (bt_addr_le_cmp(&conn->le.dst, &req->addr) != 0) {
   1f7b0:	f105 0888 	add.w	r8, r5, #136	; 0x88
	return memcmp(a, b, sizeof(*a));
   1f7b4:	2207      	movs	r2, #7
   1f7b6:	4639      	mov	r1, r7
   1f7b8:	4640      	mov	r0, r8
   1f7ba:	f7fd fa63 	bl	1cc84 <memcmp>
   1f7be:	b180      	cbz	r0, 1f7e2 <smp_ident_addr_info+0x4c>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   1f7c0:	7a28      	ldrb	r0, [r5, #8]
   1f7c2:	4639      	mov	r1, r7
   1f7c4:	f7f7 fd54 	bl	17270 <bt_keys_find_addr>
		if (keys) {
   1f7c8:	4606      	mov	r6, r0
   1f7ca:	b150      	cbz	r0, 1f7e2 <smp_ident_addr_info+0x4c>
			if (!update_keys_check(smp, keys)) {
   1f7cc:	4601      	mov	r1, r0
   1f7ce:	4620      	mov	r0, r4
   1f7d0:	f7ff fde0 	bl	1f394 <update_keys_check>
   1f7d4:	b910      	cbnz	r0, 1f7dc <smp_ident_addr_info+0x46>
				return BT_SMP_ERR_UNSPECIFIED;
   1f7d6:	2008      	movs	r0, #8
}
   1f7d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			bt_keys_clear(keys);
   1f7dc:	4630      	mov	r0, r6
   1f7de:	f7f7 fd65 	bl	172ac <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1f7e2:	210d      	movs	r1, #13
   1f7e4:	1d20      	adds	r0, r4, #4
   1f7e6:	f7ff fdcc 	bl	1f382 <atomic_test_bit>
   1f7ea:	b398      	cbz	r0, 1f854 <smp_ident_addr_info+0xbe>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1f7ec:	7a29      	ldrb	r1, [r5, #8]
   1f7ee:	4642      	mov	r2, r8
   1f7f0:	2002      	movs	r0, #2
   1f7f2:	f000 f8fe 	bl	1f9f2 <bt_keys_get_type>
		if (!keys) {
   1f7f6:	4606      	mov	r6, r0
   1f7f8:	2800      	cmp	r0, #0
   1f7fa:	d0ec      	beq.n	1f7d6 <smp_ident_addr_info+0x40>
		if (conn->role == BT_HCI_ROLE_MASTER) {
   1f7fc:	78eb      	ldrb	r3, [r5, #3]
   1f7fe:	2b00      	cmp	r3, #0
   1f800:	d13d      	bne.n	1f87e <smp_ident_addr_info+0xe8>
			dst = &conn->le.resp_addr;
   1f802:	f105 0196 	add.w	r1, r5, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1f806:	780b      	ldrb	r3, [r1, #0]
   1f808:	2b01      	cmp	r3, #1
   1f80a:	d120      	bne.n	1f84e <smp_ident_addr_info+0xb8>
		if (bt_addr_le_is_rpa(dst)) {
   1f80c:	798b      	ldrb	r3, [r1, #6]
   1f80e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1f812:	2b40      	cmp	r3, #64	; 0x40
   1f814:	d11b      	bne.n	1f84e <smp_ident_addr_info+0xb8>
	memcpy(dst, src, sizeof(*dst));
   1f816:	2206      	movs	r2, #6
   1f818:	3101      	adds	r1, #1
   1f81a:	f106 003a 	add.w	r0, r6, #58	; 0x3a
   1f81e:	f7fd fa42 	bl	1cca6 <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1f822:	f895 3088 	ldrb.w	r3, [r5, #136]	; 0x88
   1f826:	b193      	cbz	r3, 1f84e <smp_ident_addr_info+0xb8>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   1f828:	f895 308e 	ldrb.w	r3, [r5, #142]	; 0x8e
   1f82c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1f830:	2bc0      	cmp	r3, #192	; 0xc0
   1f832:	d00c      	beq.n	1f84e <smp_ident_addr_info+0xb8>
	memcpy(dst, src, sizeof(*dst));
   1f834:	2207      	movs	r2, #7
   1f836:	4639      	mov	r1, r7
   1f838:	1c70      	adds	r0, r6, #1
   1f83a:	f7fd fa34 	bl	1cca6 <memcpy>
   1f83e:	2207      	movs	r2, #7
   1f840:	4639      	mov	r1, r7
   1f842:	4640      	mov	r0, r8
   1f844:	f7fd fa2f 	bl	1cca6 <memcpy>
				bt_conn_identity_resolved(conn);
   1f848:	4628      	mov	r0, r5
   1f84a:	f7f4 fe77 	bl	1453c <bt_conn_identity_resolved>
		bt_id_add(keys);
   1f84e:	4630      	mov	r0, r6
   1f850:	f7f3 fe2c 	bl	134ac <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1f854:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1f858:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1f85c:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1f85e:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1f862:	d503      	bpl.n	1f86c <smp_ident_addr_info+0xd6>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1f864:	210a      	movs	r1, #10
   1f866:	4620      	mov	r0, r4
   1f868:	f7ff fd71 	bl	1f34e <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   1f86c:	f8b4 50e8 	ldrh.w	r5, [r4, #232]	; 0xe8
   1f870:	b91d      	cbnz	r5, 1f87a <smp_ident_addr_info+0xe4>
		smp_pairing_complete(smp, 0);
   1f872:	4629      	mov	r1, r5
   1f874:	4620      	mov	r0, r4
   1f876:	f7f7 fa95 	bl	16da4 <smp_pairing_complete>
	return 0;
   1f87a:	2000      	movs	r0, #0
   1f87c:	e7ac      	b.n	1f7d8 <smp_ident_addr_info+0x42>
			dst = &conn->le.init_addr;
   1f87e:	f105 018f 	add.w	r1, r5, #143	; 0x8f
   1f882:	e7c0      	b.n	1f806 <smp_ident_addr_info+0x70>
		return BT_SMP_ERR_INVALID_PARAMS;
   1f884:	200a      	movs	r0, #10
   1f886:	e7a7      	b.n	1f7d8 <smp_ident_addr_info+0x42>

0001f888 <bt_smp_disconnected>:
{
   1f888:	b570      	push	{r4, r5, r6, lr}
   1f88a:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   1f88c:	f1a0 06f0 	sub.w	r6, r0, #240	; 0xf0
	struct bt_keys *keys = chan->conn->le.keys;
   1f890:	f850 3be8 	ldr.w	r3, [r0], #232
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1f894:	3cec      	subs	r4, #236	; 0xec
	struct bt_keys *keys = chan->conn->le.keys;
   1f896:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
	(void)k_work_cancel_delayable(&smp->work);
   1f89a:	f000 fe13 	bl	204c4 <k_work_cancel_delayable>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1f89e:	2103      	movs	r1, #3
   1f8a0:	4620      	mov	r0, r4
   1f8a2:	f7ff fd6e 	bl	1f382 <atomic_test_bit>
   1f8a6:	b1a0      	cbz	r0, 1f8d2 <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   1f8a8:	2108      	movs	r1, #8
   1f8aa:	4630      	mov	r0, r6
   1f8ac:	f7f7 fa7a 	bl	16da4 <smp_pairing_complete>
	if (keys) {
   1f8b0:	b13d      	cbz	r5, 1f8c2 <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   1f8b2:	89eb      	ldrh	r3, [r5, #14]
   1f8b4:	b113      	cbz	r3, 1f8bc <bt_smp_disconnected+0x34>
   1f8b6:	7b6b      	ldrb	r3, [r5, #13]
   1f8b8:	079b      	lsls	r3, r3, #30
   1f8ba:	d502      	bpl.n	1f8c2 <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   1f8bc:	4628      	mov	r0, r5
   1f8be:	f7f7 fcf5 	bl	172ac <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   1f8c2:	4630      	mov	r0, r6
   1f8c4:	f44f 7202 	mov.w	r2, #520	; 0x208
}
   1f8c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(smp, 0, sizeof(*smp));
   1f8cc:	2100      	movs	r1, #0
   1f8ce:	f7fd b9f5 	b.w	1ccbc <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   1f8d2:	2101      	movs	r1, #1
   1f8d4:	4620      	mov	r0, r4
   1f8d6:	f7ff fd54 	bl	1f382 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1f8da:	2800      	cmp	r0, #0
   1f8dc:	d1e4      	bne.n	1f8a8 <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   1f8de:	210f      	movs	r1, #15
   1f8e0:	4620      	mov	r0, r4
   1f8e2:	f7ff fd4e 	bl	1f382 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   1f8e6:	2800      	cmp	r0, #0
   1f8e8:	d1de      	bne.n	1f8a8 <bt_smp_disconnected+0x20>
   1f8ea:	e7e1      	b.n	1f8b0 <bt_smp_disconnected+0x28>

0001f8ec <smp_timeout>:
{
   1f8ec:	b510      	push	{r4, lr}
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   1f8ee:	2108      	movs	r1, #8
{
   1f8f0:	4604      	mov	r4, r0
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   1f8f2:	f5a0 70ec 	sub.w	r0, r0, #472	; 0x1d8
   1f8f6:	f7f7 fa55 	bl	16da4 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1f8fa:	f5a4 70ea 	sub.w	r0, r4, #468	; 0x1d4
   1f8fe:	2104      	movs	r1, #4
}
   1f900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1f904:	f7ff bd23 	b.w	1f34e <atomic_set_bit>

0001f908 <bt_smp_update_keys>:
{
   1f908:	b570      	push	{r4, r5, r6, lr}
   1f90a:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   1f90c:	f7ff fc50 	bl	1f1b0 <smp_chan_get>
	if (!smp) {
   1f910:	4605      	mov	r5, r0
   1f912:	2800      	cmp	r0, #0
   1f914:	d06a      	beq.n	1f9ec <bt_smp_update_keys+0xe4>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1f916:	1d06      	adds	r6, r0, #4
   1f918:	2103      	movs	r1, #3
   1f91a:	4630      	mov	r0, r6
   1f91c:	f7ff fd31 	bl	1f382 <atomic_test_bit>
   1f920:	2800      	cmp	r0, #0
   1f922:	d063      	beq.n	1f9ec <bt_smp_update_keys+0xe4>
	if (conn->le.keys) {
   1f924:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1f928:	b108      	cbz	r0, 1f92e <bt_smp_update_keys+0x26>
		bt_keys_clear(conn->le.keys);
   1f92a:	f7f7 fcbf 	bl	172ac <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1f92e:	7a20      	ldrb	r0, [r4, #8]
   1f930:	f104 0188 	add.w	r1, r4, #136	; 0x88
   1f934:	f7f7 fba4 	bl	17080 <bt_keys_get_addr>
   1f938:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
   1f93c:	b928      	cbnz	r0, 1f94a <bt_smp_update_keys+0x42>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1f93e:	4628      	mov	r0, r5
   1f940:	2108      	movs	r1, #8
}
   1f942:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1f946:	f7ff bead 	b.w	1f6a4 <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   1f94a:	210e      	movs	r1, #14
   1f94c:	4630      	mov	r0, r6
   1f94e:	f7ff fd18 	bl	1f382 <atomic_test_bit>
   1f952:	b128      	cbz	r0, 1f960 <bt_smp_update_keys+0x58>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   1f954:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   1f958:	7b53      	ldrb	r3, [r2, #13]
   1f95a:	f043 0302 	orr.w	r3, r3, #2
   1f95e:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   1f960:	7a2a      	ldrb	r2, [r5, #8]
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   1f962:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
	switch (smp->method) {
   1f966:	2a03      	cmp	r2, #3
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   1f968:	7b4b      	ldrb	r3, [r1, #13]
	switch (smp->method) {
   1f96a:	d836      	bhi.n	1f9da <bt_smp_update_keys+0xd2>
   1f96c:	b3c2      	cbz	r2, 1f9e0 <bt_smp_update_keys+0xd8>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   1f96e:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1f972:	734b      	strb	r3, [r1, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   1f974:	7b6b      	ldrb	r3, [r5, #13]
   1f976:	7d2a      	ldrb	r2, [r5, #20]
   1f978:	4293      	cmp	r3, r2
   1f97a:	bf28      	it	cs
   1f97c:	4613      	movcs	r3, r2
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   1f97e:	730b      	strb	r3, [r1, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1f980:	4630      	mov	r0, r6
   1f982:	2105      	movs	r1, #5
   1f984:	f7ff fcfd 	bl	1f382 <atomic_test_bit>
   1f988:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
		conn->le.keys->flags |= BT_KEYS_SC;
   1f98c:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1f98e:	b350      	cbz	r0, 1f9e6 <bt_smp_update_keys+0xde>
		conn->le.keys->flags |= BT_KEYS_SC;
   1f990:	f042 0210 	orr.w	r2, r2, #16
   1f994:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1f996:	210d      	movs	r1, #13
   1f998:	4630      	mov	r0, r6
   1f99a:	f7ff fcf2 	bl	1f382 <atomic_test_bit>
   1f99e:	b328      	cbz	r0, 1f9ec <bt_smp_update_keys+0xe4>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   1f9a0:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1f9a4:	2120      	movs	r1, #32
   1f9a6:	f000 f834 	bl	1fa12 <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
   1f9aa:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1f9ae:	f105 0147 	add.w	r1, r5, #71	; 0x47
   1f9b2:	2210      	movs	r2, #16
   1f9b4:	301a      	adds	r0, #26
   1f9b6:	f7fd f976 	bl	1cca6 <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
   1f9ba:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1f9be:	2208      	movs	r2, #8
   1f9c0:	2100      	movs	r1, #0
   1f9c2:	3010      	adds	r0, #16
   1f9c4:	f7fd f97a 	bl	1ccbc <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
   1f9c8:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1f9cc:	2202      	movs	r2, #2
}
   1f9ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			(void)memset(conn->le.keys->ltk.ediv, 0,
   1f9d2:	2100      	movs	r1, #0
   1f9d4:	3018      	adds	r0, #24
   1f9d6:	f7fd b971 	b.w	1ccbc <memset>
	switch (smp->method) {
   1f9da:	3a05      	subs	r2, #5
   1f9dc:	2a01      	cmp	r2, #1
   1f9de:	d9c6      	bls.n	1f96e <bt_smp_update_keys+0x66>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1f9e0:	f023 0301 	bic.w	r3, r3, #1
   1f9e4:	e7c5      	b.n	1f972 <bt_smp_update_keys+0x6a>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   1f9e6:	f022 0210 	bic.w	r2, r2, #16
   1f9ea:	735a      	strb	r2, [r3, #13]
}
   1f9ec:	bd70      	pop	{r4, r5, r6, pc}

0001f9ee <id_add>:
	bt_id_add(keys);
   1f9ee:	f7f3 bd5d 	b.w	134ac <bt_id_add>

0001f9f2 <bt_keys_get_type>:
{
   1f9f2:	b570      	push	{r4, r5, r6, lr}
   1f9f4:	4604      	mov	r4, r0
   1f9f6:	460d      	mov	r5, r1
   1f9f8:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   1f9fa:	f7f7 fbc5 	bl	17188 <bt_keys_find>
	if (keys) {
   1f9fe:	b938      	cbnz	r0, 1fa10 <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   1fa00:	4631      	mov	r1, r6
   1fa02:	4628      	mov	r0, r5
   1fa04:	f7f7 fb3c 	bl	17080 <bt_keys_get_addr>
	if (!keys) {
   1fa08:	b110      	cbz	r0, 1fa10 <bt_keys_get_type+0x1e>
	keys->keys |= type;
   1fa0a:	89c3      	ldrh	r3, [r0, #14]
   1fa0c:	431c      	orrs	r4, r3
   1fa0e:	81c4      	strh	r4, [r0, #14]
}
   1fa10:	bd70      	pop	{r4, r5, r6, pc}

0001fa12 <bt_keys_add_type>:
	keys->keys |= type;
   1fa12:	89c3      	ldrh	r3, [r0, #14]
   1fa14:	4319      	orrs	r1, r3
   1fa16:	81c1      	strh	r1, [r0, #14]
}
   1fa18:	4770      	bx	lr

0001fa1a <keys_set>:
{
   1fa1a:	b570      	push	{r4, r5, r6, lr}
   1fa1c:	4605      	mov	r5, r0
   1fa1e:	b090      	sub	sp, #64	; 0x40
   1fa20:	4614      	mov	r4, r2
   1fa22:	4618      	mov	r0, r3
	if (!name) {
   1fa24:	b915      	cbnz	r5, 1fa2c <keys_set+0x12>
			return -EINVAL;
   1fa26:	f06f 0415 	mvn.w	r4, #21
   1fa2a:	e021      	b.n	1fa70 <keys_set+0x56>
	len = read_cb(cb_arg, val, sizeof(val));
   1fa2c:	2234      	movs	r2, #52	; 0x34
   1fa2e:	a903      	add	r1, sp, #12
   1fa30:	47a0      	blx	r4
	if (len < 0) {
   1fa32:	1e04      	subs	r4, r0, #0
   1fa34:	dbf7      	blt.n	1fa26 <keys_set+0xc>
	err = bt_settings_decode_key(name, &addr);
   1fa36:	a901      	add	r1, sp, #4
   1fa38:	4628      	mov	r0, r5
   1fa3a:	f7fd f9db 	bl	1cdf4 <bt_settings_decode_key>
	if (err) {
   1fa3e:	4606      	mov	r6, r0
   1fa40:	2800      	cmp	r0, #0
   1fa42:	d1f0      	bne.n	1fa26 <keys_set+0xc>
	settings_name_next(name, &next);
   1fa44:	4669      	mov	r1, sp
   1fa46:	4628      	mov	r0, r5
   1fa48:	f7fb fdba 	bl	1b5c0 <settings_name_next>
	if (!next) {
   1fa4c:	9800      	ldr	r0, [sp, #0]
   1fa4e:	b120      	cbz	r0, 1fa5a <keys_set+0x40>
		id = strtol(next, NULL, 10);
   1fa50:	220a      	movs	r2, #10
   1fa52:	4631      	mov	r1, r6
   1fa54:	f7fd f86b 	bl	1cb2e <strtol>
   1fa58:	b2c0      	uxtb	r0, r0
	if (!len) {
   1fa5a:	b964      	cbnz	r4, 1fa76 <keys_set+0x5c>
		keys = bt_keys_find(BT_KEYS_ALL, id, &addr);
   1fa5c:	4601      	mov	r1, r0
   1fa5e:	aa01      	add	r2, sp, #4
   1fa60:	203f      	movs	r0, #63	; 0x3f
   1fa62:	f7f7 fb91 	bl	17188 <bt_keys_find>
		if (keys) {
   1fa66:	b118      	cbz	r0, 1fa70 <keys_set+0x56>
			(void)memset(keys, 0, sizeof(*keys));
   1fa68:	2240      	movs	r2, #64	; 0x40
   1fa6a:	4621      	mov	r1, r4
   1fa6c:	f7fd f926 	bl	1ccbc <memset>
}
   1fa70:	4620      	mov	r0, r4
   1fa72:	b010      	add	sp, #64	; 0x40
   1fa74:	bd70      	pop	{r4, r5, r6, pc}
	keys = bt_keys_get_addr(id, &addr);
   1fa76:	a901      	add	r1, sp, #4
   1fa78:	f7f7 fb02 	bl	17080 <bt_keys_get_addr>
	if (!keys) {
   1fa7c:	b158      	cbz	r0, 1fa96 <keys_set+0x7c>
	if (len != BT_KEYS_STORAGE_LEN) {
   1fa7e:	2c34      	cmp	r4, #52	; 0x34
   1fa80:	d002      	beq.n	1fa88 <keys_set+0x6e>
			bt_keys_clear(keys);
   1fa82:	f7f7 fc13 	bl	172ac <bt_keys_clear>
   1fa86:	e7ce      	b.n	1fa26 <keys_set+0xc>
		memcpy(keys->storage_start, val, len);
   1fa88:	4622      	mov	r2, r4
   1fa8a:	a903      	add	r1, sp, #12
   1fa8c:	300c      	adds	r0, #12
   1fa8e:	f7fd f90a 	bl	1cca6 <memcpy>
	return 0;
   1fa92:	2400      	movs	r4, #0
   1fa94:	e7ec      	b.n	1fa70 <keys_set+0x56>
		return -ENOMEM;
   1fa96:	f06f 040b 	mvn.w	r4, #11
   1fa9a:	e7e9      	b.n	1fa70 <keys_set+0x56>

0001fa9c <fixed_data_unref>:
}
   1fa9c:	4770      	bx	lr

0001fa9e <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1fa9e:	6a01      	ldr	r1, [r0, #32]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   1faa0:	6849      	ldr	r1, [r1, #4]
   1faa2:	6809      	ldr	r1, [r1, #0]
   1faa4:	f7f7 bc7a 	b.w	1739c <net_buf_alloc_len>

0001faa8 <net_buf_get>:
{
   1faa8:	b570      	push	{r4, r5, r6, lr}
   1faaa:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   1faac:	f7f9 fe0c 	bl	196c8 <z_impl_k_queue_get>
	if (!buf) {
   1fab0:	4605      	mov	r5, r0
   1fab2:	b128      	cbz	r0, 1fac0 <net_buf_get+0x18>
   1fab4:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1fab6:	7963      	ldrb	r3, [r4, #5]
   1fab8:	f013 0301 	ands.w	r3, r3, #1
   1fabc:	d102      	bne.n	1fac4 <net_buf_get+0x1c>
	frag->frags = NULL;
   1fabe:	6023      	str	r3, [r4, #0]
}
   1fac0:	4628      	mov	r0, r5
   1fac2:	bd70      	pop	{r4, r5, r6, pc}
   1fac4:	2300      	movs	r3, #0
   1fac6:	2200      	movs	r2, #0
   1fac8:	4630      	mov	r0, r6
   1faca:	f7f9 fdfd 	bl	196c8 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   1face:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1fad0:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   1fad2:	f023 0301 	bic.w	r3, r3, #1
   1fad6:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1fad8:	4604      	mov	r4, r0
   1fada:	e7ec      	b.n	1fab6 <net_buf_get+0xe>

0001fadc <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   1fadc:	6883      	ldr	r3, [r0, #8]
   1fade:	440b      	add	r3, r1
   1fae0:	6003      	str	r3, [r0, #0]
}
   1fae2:	4770      	bx	lr

0001fae4 <net_buf_put>:
{
   1fae4:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   1fae6:	460a      	mov	r2, r1
   1fae8:	6814      	ldr	r4, [r2, #0]
   1faea:	b914      	cbnz	r4, 1faf2 <net_buf_put+0xe>
}
   1faec:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   1faee:	f000 bbfb 	b.w	202e8 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   1faf2:	7953      	ldrb	r3, [r2, #5]
   1faf4:	f043 0301 	orr.w	r3, r3, #1
   1faf8:	7153      	strb	r3, [r2, #5]
   1fafa:	4622      	mov	r2, r4
   1fafc:	e7f4      	b.n	1fae8 <net_buf_put+0x4>

0001fafe <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1fafe:	7902      	ldrb	r2, [r0, #4]
   1fb00:	3201      	adds	r2, #1
   1fb02:	7102      	strb	r2, [r0, #4]
	return buf;
}
   1fb04:	4770      	bx	lr

0001fb06 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1fb06:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   1fb08:	4618      	mov	r0, r3
   1fb0a:	681b      	ldr	r3, [r3, #0]
   1fb0c:	2b00      	cmp	r3, #0
   1fb0e:	d1fb      	bne.n	1fb08 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   1fb10:	4770      	bx	lr

0001fb12 <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   1fb12:	6802      	ldr	r2, [r0, #0]
{
   1fb14:	b510      	push	{r4, lr}
	if (parent->frags) {
   1fb16:	b12a      	cbz	r2, 1fb24 <net_buf_frag_insert+0x12>
   1fb18:	460b      	mov	r3, r1
	while (buf->frags) {
   1fb1a:	461c      	mov	r4, r3
   1fb1c:	681b      	ldr	r3, [r3, #0]
   1fb1e:	2b00      	cmp	r3, #0
   1fb20:	d1fb      	bne.n	1fb1a <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   1fb22:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1fb24:	6001      	str	r1, [r0, #0]
}
   1fb26:	bd10      	pop	{r4, pc}

0001fb28 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1fb28:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   1fb2a:	4604      	mov	r4, r0
   1fb2c:	b920      	cbnz	r0, 1fb38 <net_buf_frag_add+0x10>
	buf->ref++;
   1fb2e:	790b      	ldrb	r3, [r1, #4]
   1fb30:	3301      	adds	r3, #1
   1fb32:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   1fb34:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   1fb36:	bd10      	pop	{r4, pc}
   1fb38:	4603      	mov	r3, r0
	while (buf->frags) {
   1fb3a:	4618      	mov	r0, r3
   1fb3c:	681b      	ldr	r3, [r3, #0]
   1fb3e:	2b00      	cmp	r3, #0
   1fb40:	d1fb      	bne.n	1fb3a <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1fb42:	f7ff ffe6 	bl	1fb12 <net_buf_frag_insert>
   1fb46:	4620      	mov	r0, r4
   1fb48:	e7f5      	b.n	1fb36 <net_buf_frag_add+0xe>

0001fb4a <net_buf_simple_add>:
	return buf->data + buf->len;
   1fb4a:	8883      	ldrh	r3, [r0, #4]
   1fb4c:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   1fb4e:	4419      	add	r1, r3
   1fb50:	8081      	strh	r1, [r0, #4]
	return tail;
}
   1fb52:	18d0      	adds	r0, r2, r3
   1fb54:	4770      	bx	lr

0001fb56 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   1fb56:	b430      	push	{r4, r5}
   1fb58:	8884      	ldrh	r4, [r0, #4]
   1fb5a:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   1fb5c:	18a3      	adds	r3, r4, r2
   1fb5e:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1fb60:	1928      	adds	r0, r5, r4
}
   1fb62:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1fb64:	f7fd b89f 	b.w	1cca6 <memcpy>

0001fb68 <net_buf_simple_add_u8>:
   1fb68:	8883      	ldrh	r3, [r0, #4]
   1fb6a:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   1fb6c:	b510      	push	{r4, lr}
	buf->len += len;
   1fb6e:	1c5c      	adds	r4, r3, #1
   1fb70:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   1fb72:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   1fb74:	18d0      	adds	r0, r2, r3
   1fb76:	bd10      	pop	{r4, pc}

0001fb78 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   1fb78:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   1fb7a:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   1fb7c:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   1fb7e:	1a40      	subs	r0, r0, r1
	buf->len += len;
   1fb80:	4411      	add	r1, r2
	buf->data -= len;
   1fb82:	6018      	str	r0, [r3, #0]
	buf->len += len;
   1fb84:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   1fb86:	4770      	bx	lr

0001fb88 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1fb88:	8882      	ldrh	r2, [r0, #4]
   1fb8a:	1a52      	subs	r2, r2, r1
{
   1fb8c:	4603      	mov	r3, r0
	buf->len -= len;
   1fb8e:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   1fb90:	6800      	ldr	r0, [r0, #0]
   1fb92:	4408      	add	r0, r1
   1fb94:	6018      	str	r0, [r3, #0]
}
   1fb96:	4770      	bx	lr

0001fb98 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   1fb98:	4603      	mov	r3, r0
	void *data = buf->data;
   1fb9a:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1fb9c:	889a      	ldrh	r2, [r3, #4]
   1fb9e:	1a52      	subs	r2, r2, r1
	buf->data += len;
   1fba0:	4401      	add	r1, r0
	buf->len -= len;
   1fba2:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   1fba4:	6019      	str	r1, [r3, #0]

	return data;
}
   1fba6:	4770      	bx	lr

0001fba8 <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   1fba8:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   1fbaa:	6803      	ldr	r3, [r0, #0]
   1fbac:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1fbae:	2102      	movs	r1, #2
   1fbb0:	f7ff ffea 	bl	1fb88 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   1fbb4:	4620      	mov	r0, r4
   1fbb6:	bd10      	pop	{r4, pc}

0001fbb8 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1fbb8:	6802      	ldr	r2, [r0, #0]
   1fbba:	6880      	ldr	r0, [r0, #8]
}
   1fbbc:	1a10      	subs	r0, r2, r0
   1fbbe:	4770      	bx	lr

0001fbc0 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1fbc0:	8883      	ldrh	r3, [r0, #4]
   1fbc2:	88c2      	ldrh	r2, [r0, #6]
   1fbc4:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   1fbc6:	6803      	ldr	r3, [r0, #0]
   1fbc8:	6880      	ldr	r0, [r0, #8]
   1fbca:	1a18      	subs	r0, r3, r0
}
   1fbcc:	1a10      	subs	r0, r2, r0
   1fbce:	4770      	bx	lr

0001fbd0 <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
   1fbd0:	f000 001f 	and.w	r0, r0, #31
   1fbd4:	0080      	lsls	r0, r0, #2
   1fbd6:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1fbda:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
   1fbde:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1fbe2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1fbe6:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
   1fbea:	4770      	bx	lr

0001fbec <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1fbec:	6843      	ldr	r3, [r0, #4]
   1fbee:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   1fbf0:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   1fbf4:	600b      	str	r3, [r1, #0]
}
   1fbf6:	2000      	movs	r0, #0
   1fbf8:	4770      	bx	lr

0001fbfa <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1fbfa:	6843      	ldr	r3, [r0, #4]
   1fbfc:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   1fbfe:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   1fc02:	4042      	eors	r2, r0
   1fc04:	400a      	ands	r2, r1
   1fc06:	4042      	eors	r2, r0
    p_reg->OUT = value;
   1fc08:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   1fc0c:	2000      	movs	r0, #0
   1fc0e:	4770      	bx	lr

0001fc10 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1fc10:	6843      	ldr	r3, [r0, #4]
   1fc12:	685b      	ldr	r3, [r3, #4]
}
   1fc14:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   1fc16:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   1fc1a:	4770      	bx	lr

0001fc1c <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1fc1c:	6843      	ldr	r3, [r0, #4]
   1fc1e:	685b      	ldr	r3, [r3, #4]
}
   1fc20:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   1fc22:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   1fc26:	4770      	bx	lr

0001fc28 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1fc28:	6843      	ldr	r3, [r0, #4]
   1fc2a:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   1fc2c:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   1fc30:	404b      	eors	r3, r1
    p_reg->OUT = value;
   1fc32:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   1fc36:	2000      	movs	r0, #0
   1fc38:	4770      	bx	lr

0001fc3a <gpio_nrfx_manage_callback>:
	return port->data;
   1fc3a:	6903      	ldr	r3, [r0, #16]
	return list->head;
   1fc3c:	6858      	ldr	r0, [r3, #4]
{
   1fc3e:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   1fc40:	b158      	cbz	r0, 1fc5a <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1fc42:	2400      	movs	r4, #0
   1fc44:	4281      	cmp	r1, r0
   1fc46:	d112      	bne.n	1fc6e <gpio_nrfx_manage_callback+0x34>
	return node->next;
   1fc48:	6808      	ldr	r0, [r1, #0]
	return list->tail;
   1fc4a:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
   1fc4c:	b954      	cbnz	r4, 1fc64 <gpio_nrfx_manage_callback+0x2a>
   1fc4e:	428d      	cmp	r5, r1
	list->head = node;
   1fc50:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1fc52:	d100      	bne.n	1fc56 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   1fc54:	6098      	str	r0, [r3, #8]
	parent->next = child;
   1fc56:	2000      	movs	r0, #0
   1fc58:	6008      	str	r0, [r1, #0]
	if (set) {
   1fc5a:	b96a      	cbnz	r2, 1fc78 <gpio_nrfx_manage_callback+0x3e>
	return 0;
   1fc5c:	2000      	movs	r0, #0
}
   1fc5e:	bd30      	pop	{r4, r5, pc}
   1fc60:	4628      	mov	r0, r5
   1fc62:	e7ef      	b.n	1fc44 <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
   1fc64:	428d      	cmp	r5, r1
	parent->next = child;
   1fc66:	6020      	str	r0, [r4, #0]
	list->tail = node;
   1fc68:	bf08      	it	eq
   1fc6a:	609c      	streq	r4, [r3, #8]
}
   1fc6c:	e7f3      	b.n	1fc56 <gpio_nrfx_manage_callback+0x1c>
	return node->next;
   1fc6e:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1fc70:	4604      	mov	r4, r0
   1fc72:	2d00      	cmp	r5, #0
   1fc74:	d1f4      	bne.n	1fc60 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   1fc76:	b13a      	cbz	r2, 1fc88 <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
   1fc78:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
   1fc7a:	685a      	ldr	r2, [r3, #4]
   1fc7c:	600a      	str	r2, [r1, #0]
	list->head = node;
   1fc7e:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1fc80:	2800      	cmp	r0, #0
   1fc82:	d1eb      	bne.n	1fc5c <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   1fc84:	6099      	str	r1, [r3, #8]
}
   1fc86:	e7ea      	b.n	1fc5e <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   1fc88:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1fc8c:	e7e7      	b.n	1fc5e <gpio_nrfx_manage_callback+0x24>

0001fc8e <is_regular_addr_valid>:
{
   1fc8e:	b538      	push	{r3, r4, r5, lr}
   1fc90:	4604      	mov	r4, r0
   1fc92:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
   1fc94:	f000 f9ac 	bl	1fff0 <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   1fc98:	4284      	cmp	r4, r0
   1fc9a:	d209      	bcs.n	1fcb0 <is_regular_addr_valid+0x22>
   1fc9c:	2c00      	cmp	r4, #0
   1fc9e:	db07      	blt.n	1fcb0 <is_regular_addr_valid+0x22>
	    addr < 0 ||
   1fca0:	42a8      	cmp	r0, r5
   1fca2:	d305      	bcc.n	1fcb0 <is_regular_addr_valid+0x22>
	    (addr) + len > flash_size) {
   1fca4:	442c      	add	r4, r5
	    len > flash_size ||
   1fca6:	4284      	cmp	r4, r0
   1fca8:	bf8c      	ite	hi
   1fcaa:	2000      	movhi	r0, #0
   1fcac:	2001      	movls	r0, #1
}
   1fcae:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   1fcb0:	2000      	movs	r0, #0
   1fcb2:	e7fc      	b.n	1fcae <is_regular_addr_valid+0x20>

0001fcb4 <erase_op>:
{
   1fcb4:	b570      	push	{r4, r5, r6, lr}
   1fcb6:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1fcb8:	f000 f9a0 	bl	1fffc <nrfx_nvmc_flash_page_size_get>
	if (e_ctx->enable_time_limit) {
   1fcbc:	7b23      	ldrb	r3, [r4, #12]
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1fcbe:	4605      	mov	r5, r0
	if (e_ctx->enable_time_limit) {
   1fcc0:	b10b      	cbz	r3, 1fcc6 <erase_op+0x12>
		nrf_flash_sync_get_timestamp_begin();
   1fcc2:	f000 f983 	bl	1ffcc <nrf_flash_sync_get_timestamp_begin>
{
   1fcc6:	2600      	movs	r6, #0
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   1fcc8:	6860      	ldr	r0, [r4, #4]
   1fcca:	f7f9 f977 	bl	18fbc <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
   1fcce:	68a3      	ldr	r3, [r4, #8]
   1fcd0:	1b5b      	subs	r3, r3, r5
   1fcd2:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
   1fcd4:	6863      	ldr	r3, [r4, #4]
   1fcd6:	442b      	add	r3, r5
   1fcd8:	6063      	str	r3, [r4, #4]
		if (e_ctx->enable_time_limit) {
   1fcda:	7b23      	ldrb	r3, [r4, #12]
		i++;
   1fcdc:	3601      	adds	r6, #1
		if (e_ctx->enable_time_limit) {
   1fcde:	b93b      	cbnz	r3, 1fcf0 <erase_op+0x3c>
	} while (e_ctx->len > 0);
   1fce0:	68a3      	ldr	r3, [r4, #8]
   1fce2:	2b00      	cmp	r3, #0
   1fce4:	d1f0      	bne.n	1fcc8 <erase_op+0x14>
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
   1fce6:	68a0      	ldr	r0, [r4, #8]
}
   1fce8:	3800      	subs	r0, #0
   1fcea:	bf18      	it	ne
   1fcec:	2001      	movne	r0, #1
   1fcee:	bd70      	pop	{r4, r5, r6, pc}
			if (nrf_flash_sync_check_time_limit(i)) {
   1fcf0:	4630      	mov	r0, r6
   1fcf2:	f7f8 ff8b 	bl	18c0c <nrf_flash_sync_check_time_limit>
   1fcf6:	2800      	cmp	r0, #0
   1fcf8:	d0f2      	beq.n	1fce0 <erase_op+0x2c>
   1fcfa:	e7f4      	b.n	1fce6 <erase_op+0x32>

0001fcfc <flash_nrf_read>:
{
   1fcfc:	b570      	push	{r4, r5, r6, lr}
   1fcfe:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   1fd00:	4628      	mov	r0, r5
   1fd02:	4619      	mov	r1, r3
{
   1fd04:	4616      	mov	r6, r2
   1fd06:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   1fd08:	f7ff ffc1 	bl	1fc8e <is_regular_addr_valid>
   1fd0c:	b138      	cbz	r0, 1fd1e <flash_nrf_read+0x22>
	if (!len) {
   1fd0e:	b14c      	cbz	r4, 1fd24 <flash_nrf_read+0x28>
	memcpy(data, (void *)addr, len);
   1fd10:	4622      	mov	r2, r4
   1fd12:	4629      	mov	r1, r5
   1fd14:	4630      	mov	r0, r6
   1fd16:	f7fc ffc6 	bl	1cca6 <memcpy>
	return 0;
   1fd1a:	2000      	movs	r0, #0
}
   1fd1c:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   1fd1e:	f06f 0015 	mvn.w	r0, #21
   1fd22:	e7fb      	b.n	1fd1c <flash_nrf_read+0x20>
		return 0;
   1fd24:	4620      	mov	r0, r4
   1fd26:	e7f9      	b.n	1fd1c <flash_nrf_read+0x20>

0001fd28 <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
   1fd28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1fd2c:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
   1fd2e:	6883      	ldr	r3, [r0, #8]
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
   1fd30:	f04f 0800 	mov.w	r8, #0
	info->index = 0U;

	api->page_layout(dev, &layout, &layout_size);
   1fd34:	695b      	ldr	r3, [r3, #20]
	info->start_offset = 0;
   1fd36:	f8c4 8000 	str.w	r8, [r4]
{
   1fd3a:	460d      	mov	r5, r1
   1fd3c:	4616      	mov	r6, r2
	info->index = 0U;
   1fd3e:	f8c4 8008 	str.w	r8, [r4, #8]
	api->page_layout(dev, &layout, &layout_size);
   1fd42:	aa01      	add	r2, sp, #4
   1fd44:	4669      	mov	r1, sp
   1fd46:	4798      	blx	r3

	while (layout_size--) {
   1fd48:	e9dd 7c00 	ldrd	r7, ip, [sp]
   1fd4c:	4640      	mov	r0, r8
		info->size = layout->pages_size;
   1fd4e:	f107 0e04 	add.w	lr, r7, #4
	while (layout_size--) {
   1fd52:	4560      	cmp	r0, ip
   1fd54:	d104      	bne.n	1fd60 <flash_get_page_info+0x38>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
   1fd56:	f06f 0015 	mvn.w	r0, #21
}
   1fd5a:	b003      	add	sp, #12
   1fd5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		info->size = layout->pages_size;
   1fd60:	f85e 9030 	ldr.w	r9, [lr, r0, lsl #3]
			index_jmp = index - info->index;
   1fd64:	68a1      	ldr	r1, [r4, #8]
			index_jmp = (offs - info->start_offset) / info->size;
   1fd66:	6822      	ldr	r2, [r4, #0]
		info->size = layout->pages_size;
   1fd68:	f8c4 9004 	str.w	r9, [r4, #4]
		if (offs == 0) {
   1fd6c:	b985      	cbnz	r5, 1fd90 <flash_get_page_info+0x68>
			index_jmp = index - info->index;
   1fd6e:	1a73      	subs	r3, r6, r1
		index_jmp = MIN(index_jmp, layout->pages_count);
   1fd70:	f857 8030 	ldr.w	r8, [r7, r0, lsl #3]
   1fd74:	4543      	cmp	r3, r8
   1fd76:	bf28      	it	cs
   1fd78:	4643      	movcs	r3, r8
		info->start_offset += (index_jmp * info->size);
   1fd7a:	fb03 2209 	mla	r2, r3, r9, r2
		info->index += index_jmp;
   1fd7e:	4419      	add	r1, r3
		if (index_jmp < layout->pages_count) {
   1fd80:	4598      	cmp	r8, r3
		info->start_offset += (index_jmp * info->size);
   1fd82:	6022      	str	r2, [r4, #0]
		info->index += index_jmp;
   1fd84:	60a1      	str	r1, [r4, #8]
		if (index_jmp < layout->pages_count) {
   1fd86:	f100 0001 	add.w	r0, r0, #1
   1fd8a:	d9e2      	bls.n	1fd52 <flash_get_page_info+0x2a>
			return 0;
   1fd8c:	2000      	movs	r0, #0
   1fd8e:	e7e4      	b.n	1fd5a <flash_get_page_info+0x32>
			index_jmp = (offs - info->start_offset) / info->size;
   1fd90:	1aab      	subs	r3, r5, r2
   1fd92:	fbb3 f3f9 	udiv	r3, r3, r9
   1fd96:	e7eb      	b.n	1fd70 <flash_get_page_info+0x48>

0001fd98 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   1fd98:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
   1fd9a:	2200      	movs	r2, #0
   1fd9c:	f7ff bfc4 	b.w	1fd28 <flash_get_page_info>

0001fda0 <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   1fda0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
   1fda4:	6883      	ldr	r3, [r0, #8]
{
   1fda6:	b086      	sub	sp, #24
	api->page_layout(dev, &layout, &num_blocks);
   1fda8:	695b      	ldr	r3, [r3, #20]
{
   1fdaa:	4688      	mov	r8, r1
   1fdac:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   1fdae:	a901      	add	r1, sp, #4
   1fdb0:	aa02      	add	r2, sp, #8
   1fdb2:	4798      	blx	r3
	off_t off = 0;
   1fdb4:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
   1fdb6:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   1fdb8:	4625      	mov	r5, r4
   1fdba:	9b02      	ldr	r3, [sp, #8]
   1fdbc:	42ab      	cmp	r3, r5
   1fdbe:	d802      	bhi.n	1fdc6 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   1fdc0:	b006      	add	sp, #24
   1fdc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const struct flash_pages_layout *l = &layout[block];
   1fdc6:	9f01      	ldr	r7, [sp, #4]
   1fdc8:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		for (i = 0; i < l->pages_count; i++) {
   1fdcc:	2600      	movs	r6, #0
		page_info.size = l->pages_size;
   1fdce:	687b      	ldr	r3, [r7, #4]
   1fdd0:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   1fdd2:	683a      	ldr	r2, [r7, #0]
   1fdd4:	42b2      	cmp	r2, r6
   1fdd6:	eb0a 0306 	add.w	r3, sl, r6
   1fdda:	d802      	bhi.n	1fde2 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   1fddc:	3501      	adds	r5, #1
   1fdde:	469a      	mov	sl, r3
   1fde0:	e7eb      	b.n	1fdba <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   1fde2:	4649      	mov	r1, r9
   1fde4:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
   1fde6:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   1fde8:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   1fdea:	47c0      	blx	r8
   1fdec:	2800      	cmp	r0, #0
   1fdee:	d0e7      	beq.n	1fdc0 <flash_page_foreach+0x20>
			off += page_info.size;
   1fdf0:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   1fdf2:	3601      	adds	r6, #1
			off += page_info.size;
   1fdf4:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   1fdf6:	e7ec      	b.n	1fdd2 <flash_page_foreach+0x32>

0001fdf8 <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
   1fdf8:	6902      	ldr	r2, [r0, #16]
{
   1fdfa:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   1fdfc:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   1fe00:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1fe04:	2000      	movs	r0, #0
   1fe06:	4770      	bx	lr

0001fe08 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   1fe08:	6843      	ldr	r3, [r0, #4]
   1fe0a:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1fe0c:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1fe10:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1fe14:	4770      	bx	lr

0001fe16 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   1fe16:	6843      	ldr	r3, [r0, #4]
	return dev->data;
   1fe18:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   1fe1a:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1fe1c:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1fe20:	b148      	cbz	r0, 1fe36 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
   1fe22:	7c52      	ldrb	r2, [r2, #17]
   1fe24:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1fe26:	2000      	movs	r0, #0
   1fe28:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1fe2c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1fe30:	2201      	movs	r2, #1
   1fe32:	601a      	str	r2, [r3, #0]
	return 0;
   1fe34:	4770      	bx	lr
		return -1;
   1fe36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1fe3a:	4770      	bx	lr

0001fe3c <is_tx_ready.isra.0>:
	return config->uarte_regs;
   1fe3c:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   1fe3e:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1fe40:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1fe44:	b940      	cbnz	r0, 1fe58 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   1fe46:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1fe48:	071b      	lsls	r3, r3, #28
   1fe4a:	d406      	bmi.n	1fe5a <is_tx_ready.isra.0+0x1e>
   1fe4c:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   1fe50:	3800      	subs	r0, #0
   1fe52:	bf18      	it	ne
   1fe54:	2001      	movne	r0, #1
   1fe56:	4770      	bx	lr
   1fe58:	2001      	movs	r0, #1
}
   1fe5a:	4770      	bx	lr

0001fe5c <uarte_nrfx_isr_int>:
	return config->uarte_regs;
   1fe5c:	6843      	ldr	r3, [r0, #4]
   1fe5e:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
   1fe60:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   1fe64:	05d1      	lsls	r1, r2, #23
   1fe66:	d518      	bpl.n	1fe9a <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1fe68:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   1fe6c:	b1aa      	cbz	r2, 1fe9a <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   1fe6e:	f04f 0140 	mov.w	r1, #64	; 0x40
   1fe72:	f3ef 8211 	mrs	r2, BASEPRI
   1fe76:	f381 8811 	msr	BASEPRI, r1
   1fe7a:	f3bf 8f6f 	isb	sy
   1fe7e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1fe82:	b131      	cbz	r1, 1fe92 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1fe84:	2100      	movs	r1, #0
   1fe86:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   1fe8a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1fe8e:	2101      	movs	r1, #1
   1fe90:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   1fe92:	f382 8811 	msr	BASEPRI, r2
   1fe96:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1fe9a:	6842      	ldr	r2, [r0, #4]
   1fe9c:	6852      	ldr	r2, [r2, #4]
   1fe9e:	06d2      	lsls	r2, r2, #27
   1fea0:	d515      	bpl.n	1fece <uarte_nrfx_isr_int+0x72>
	__asm__ volatile(
   1fea2:	f04f 0140 	mov.w	r1, #64	; 0x40
   1fea6:	f3ef 8211 	mrs	r2, BASEPRI
   1feaa:	f381 8811 	msr	BASEPRI, r1
   1feae:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1feb2:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   1feb6:	b111      	cbz	r1, 1febe <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1feb8:	2100      	movs	r1, #0
   1feba:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   1febe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   1fec2:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   1fec6:	f382 8811 	msr	BASEPRI, r2
   1feca:	f3bf 8f6f 	isb	sy
}
   1fece:	4770      	bx	lr

0001fed0 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   1fed0:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
   1fed2:	2000      	movs	r0, #0
   1fed4:	f7f2 f9de 	bl	12294 <sys_arch_reboot>

0001fed8 <sdc_assertion_handler>:
	k_oops();
   1fed8:	4040      	eors	r0, r0
   1feda:	f380 8811 	msr	BASEPRI, r0
   1fede:	f04f 0003 	mov.w	r0, #3
   1fee2:	df02      	svc	2
}
   1fee4:	4770      	bx	lr

0001fee6 <rand_prio_high_vector_get>:
   1fee6:	f7f8 b8db 	b.w	180a0 <rand_prio_low_vector_get>

0001feea <bt_encrypt_le>:

int bt_encrypt_le(const uint8_t key[BT_ECB_BLOCK_SIZE],
		  const uint8_t plaintext[BT_ECB_BLOCK_SIZE],
		  uint8_t enc_data[BT_ECB_BLOCK_SIZE])
{
   1feea:	b5f0      	push	{r4, r5, r6, r7, lr}
   1feec:	b08d      	sub	sp, #52	; 0x34
   1feee:	4615      	mov	r5, r2
   1fef0:	466a      	mov	r2, sp
   1fef2:	f100 0310 	add.w	r3, r0, #16
   1fef6:	4616      	mov	r6, r2
		*pdst++ = *psrc--;
   1fef8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   1fefc:	f802 4b01 	strb.w	r4, [r2], #1
	for (; length > 0; length--) {
   1ff00:	4298      	cmp	r0, r3
   1ff02:	d1f9      	bne.n	1fef8 <bt_encrypt_le+0xe>
   1ff04:	aa04      	add	r2, sp, #16
   1ff06:	f101 0310 	add.w	r3, r1, #16
   1ff0a:	4617      	mov	r7, r2
		*pdst++ = *psrc--;
   1ff0c:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
   1ff10:	f802 0b01 	strb.w	r0, [r2], #1
	for (; length > 0; length--) {
   1ff14:	428b      	cmp	r3, r1
   1ff16:	d1f9      	bne.n	1ff0c <bt_encrypt_le+0x22>
	BT_HEXDUMP_DBG(plaintext, BT_ECB_BLOCK_SIZE, "plaintext");

	sys_memcpy_swap(key_le, key, BT_ECB_BLOCK_SIZE);
	sys_memcpy_swap(plaintext_le, plaintext, BT_ECB_BLOCK_SIZE);

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1ff18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ff1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1ff20:	f7f8 f8a2 	bl	18068 <multithreading_lock_acquire>

	if (!errcode) {
   1ff24:	4604      	mov	r4, r0
   1ff26:	b990      	cbnz	r0, 1ff4e <bt_encrypt_le+0x64>
		errcode = sdc_soc_ecb_block_encrypt(key_le, plaintext_le, enc_data_le);
   1ff28:	aa08      	add	r2, sp, #32
   1ff2a:	4639      	mov	r1, r7
   1ff2c:	4630      	mov	r0, r6
   1ff2e:	f7ec f870 	bl	c012 <sdc_soc_ecb_block_encrypt>
   1ff32:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1ff34:	f7f8 f8a0 	bl	18078 <multithreading_lock_release>
	}

	if (!errcode) {
   1ff38:	b94c      	cbnz	r4, 1ff4e <bt_encrypt_le+0x64>
   1ff3a:	1e6b      	subs	r3, r5, #1
	psrc += length - 1;
   1ff3c:	f10d 022f 	add.w	r2, sp, #47	; 0x2f
   1ff40:	350f      	adds	r5, #15
		*pdst++ = *psrc--;
   1ff42:	f812 1901 	ldrb.w	r1, [r2], #-1
   1ff46:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   1ff4a:	429d      	cmp	r5, r3
   1ff4c:	d1f9      	bne.n	1ff42 <bt_encrypt_le+0x58>

		BT_HEXDUMP_DBG(enc_data, BT_ECB_BLOCK_SIZE, "enc_data");
	}

	return errcode;
}
   1ff4e:	4620      	mov	r0, r4
   1ff50:	b00d      	add	sp, #52	; 0x34
   1ff52:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001ff54 <m_assert_handler>:
	k_oops();
   1ff54:	4040      	eors	r0, r0
   1ff56:	f380 8811 	msr	BASEPRI, r0
   1ff5a:	f04f 0003 	mov.w	r0, #3
   1ff5e:	df02      	svc	2
}
   1ff60:	4770      	bx	lr

0001ff62 <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   1ff62:	4668      	mov	r0, sp
   1ff64:	f020 0107 	bic.w	r1, r0, #7
   1ff68:	468d      	mov	sp, r1
   1ff6a:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   1ff6c:	f7e2 fc9a 	bl	28a4 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   1ff70:	f7f1 fe72 	bl	11c58 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   1ff74:	f7f2 f83a 	bl	11fec <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   1ff78:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1ff7c:	4685      	mov	sp, r0
   1ff7e:	4770      	bx	lr

0001ff80 <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   1ff80:	4668      	mov	r0, sp
   1ff82:	f020 0107 	bic.w	r1, r0, #7
   1ff86:	468d      	mov	sp, r1
   1ff88:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   1ff8a:	f7e2 fc0d 	bl	27a8 <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   1ff8e:	f7f1 fe63 	bl	11c58 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   1ff92:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1ff96:	4685      	mov	sp, r0
   1ff98:	4770      	bx	lr

0001ff9a <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   1ff9a:	4668      	mov	r0, sp
   1ff9c:	f020 0107 	bic.w	r1, r0, #7
   1ffa0:	468d      	mov	sp, r1
   1ffa2:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   1ffa4:	f7eb fd83 	bl	baae <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   1ffa8:	f7f1 fe56 	bl	11c58 <_arch_isr_direct_pm>
   1ffac:	f7f2 f81e 	bl	11fec <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   1ffb0:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1ffb4:	4685      	mov	sp, r0
   1ffb6:	4770      	bx	lr

0001ffb8 <nrfx_clock_stop>:
	switch (domain) {
   1ffb8:	2801      	cmp	r0, #1
   1ffba:	d101      	bne.n	1ffc0 <nrfx_clock_stop+0x8>
		mpsl_clock_hfclk_release();
   1ffbc:	f7e3 ba82 	b.w	34c4 <mpsl_clock_hfclk_release>
}
   1ffc0:	4770      	bx	lr

0001ffc2 <nrfx_clock_enable>:
}
   1ffc2:	4770      	bx	lr

0001ffc4 <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   1ffc4:	f7e3 b89c 	b.w	3100 <MPSL_IRQ_CLOCK_Handler>

0001ffc8 <nrf_flash_sync_is_required>:
	return mpsl_is_initialized();
   1ffc8:	f7e3 bc5e 	b.w	3888 <mpsl_is_initialized>

0001ffcc <nrf_flash_sync_get_timestamp_begin>:
}
   1ffcc:	4770      	bx	lr

0001ffce <nrf52_errata_108>:
            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   1ffce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1ffd2:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
   1ffd6:	1c42      	adds	r2, r0, #1
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1ffd8:	bf04      	itt	eq
   1ffda:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
   1ffde:	f893 0fe0 	ldrbeq.w	r0, [r3, #4064]	; 0xfe0
}
   1ffe2:	1f83      	subs	r3, r0, #6
   1ffe4:	4258      	negs	r0, r3
   1ffe6:	4158      	adcs	r0, r3
   1ffe8:	4770      	bx	lr

0001ffea <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   1ffea:	4700      	bx	r0

0001ffec <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   1ffec:	f000 bbde 	b.w	207ac <z_impl_k_busy_wait>

0001fff0 <nrfx_nvmc_flash_size_get>:
   1fff0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1fff4:	691a      	ldr	r2, [r3, #16]
NRF_STATIC_INLINE uint32_t nrf_ficr_codesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODESIZE_CODESIZE_Msk)
    return p_reg->INFO.CODESIZE;
#else
    return p_reg->CODESIZE;
   1fff6:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   1fff8:	4350      	muls	r0, r2
   1fffa:	4770      	bx	lr

0001fffc <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   1fffc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   20000:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   20002:	4770      	bx	lr

00020004 <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
   20004:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   20008:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   2000a:	4770      	bx	lr

0002000c <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   2000c:	f7f9 b83e 	b.w	1908c <_DoInit>

00020010 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   20010:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   20012:	f7ff fffb 	bl	2000c <SEGGER_RTT_Init>

	return 0;
}
   20016:	2000      	movs	r0, #0
   20018:	bd08      	pop	{r3, pc}

0002001a <z_device_state_init>:
}
   2001a:	4770      	bx	lr

0002001c <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   2001c:	b138      	cbz	r0, 2002e <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   2001e:	68c3      	ldr	r3, [r0, #12]
   20020:	8818      	ldrh	r0, [r3, #0]
   20022:	f3c0 0008 	ubfx	r0, r0, #0, #9
   20026:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   2002a:	4258      	negs	r0, r3
   2002c:	4158      	adcs	r0, r3
}
   2002e:	4770      	bx	lr

00020030 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   20030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20032:	4605      	mov	r5, r0
   20034:	460e      	mov	r6, r1
	__asm__ volatile(
   20036:	f04f 0340 	mov.w	r3, #64	; 0x40
   2003a:	f3ef 8711 	mrs	r7, BASEPRI
   2003e:	f383 8811 	msr	BASEPRI, r3
   20042:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   20046:	f7fa f893 	bl	1a170 <z_impl_k_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   2004a:	4631      	mov	r1, r6
   2004c:	4604      	mov	r4, r0
   2004e:	4628      	mov	r0, r5
   20050:	f7ff ff3e 	bl	1fed0 <k_sys_fatal_error_handler>
	__asm__ volatile(
   20054:	f387 8811 	msr	BASEPRI, r7
   20058:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   2005c:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   2005e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   20062:	f7f2 b821 	b.w	120a8 <z_impl_k_thread_abort>

00020066 <k_heap_init>:
{
   20066:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   20068:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   2006c:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   20070:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   20072:	f7fa bed3 	b.w	1ae1c <sys_heap_init>

00020076 <k_heap_aligned_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   20076:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2007a:	b085      	sub	sp, #20
   2007c:	4606      	mov	r6, r0
   2007e:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   20080:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
{
   20084:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   20086:	f000 fb95 	bl	207b4 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   2008a:	f106 0a14 	add.w	sl, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2008e:	4605      	mov	r5, r0
   20090:	460f      	mov	r7, r1
	__asm__ volatile(
   20092:	f04f 0340 	mov.w	r3, #64	; 0x40
   20096:	f3ef 8411 	mrs	r4, BASEPRI
   2009a:	f383 8811 	msr	BASEPRI, r3
   2009e:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   200a2:	f106 0b0c 	add.w	fp, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   200a6:	464a      	mov	r2, r9
   200a8:	4641      	mov	r1, r8
   200aa:	4630      	mov	r0, r6
   200ac:	f7fa fe3b 	bl	1ad26 <sys_heap_aligned_alloc>
   200b0:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   200b2:	f7fa fa13 	bl	1a4dc <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   200b6:	9b03      	ldr	r3, [sp, #12]
   200b8:	b13b      	cbz	r3, 200ca <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   200ba:	f384 8811 	msr	BASEPRI, r4
   200be:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   200c2:	4618      	mov	r0, r3
   200c4:	b005      	add	sp, #20
   200c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   200ca:	1a28      	subs	r0, r5, r0
   200cc:	eb67 0101 	sbc.w	r1, r7, r1
   200d0:	2801      	cmp	r0, #1
   200d2:	f171 0200 	sbcs.w	r2, r1, #0
   200d6:	dbf0      	blt.n	200ba <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   200d8:	e9cd 0100 	strd	r0, r1, [sp]
   200dc:	465a      	mov	r2, fp
   200de:	4621      	mov	r1, r4
   200e0:	4650      	mov	r0, sl
   200e2:	f7f9 fe1f 	bl	19d24 <z_pend_curr>
	__asm__ volatile(
   200e6:	f04f 0340 	mov.w	r3, #64	; 0x40
   200ea:	f3ef 8411 	mrs	r4, BASEPRI
   200ee:	f383 8811 	msr	BASEPRI, r3
   200f2:	f3bf 8f6f 	isb	sy
   200f6:	e7d6      	b.n	200a6 <k_heap_aligned_alloc+0x30>

000200f8 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   200f8:	b538      	push	{r3, r4, r5, lr}
   200fa:	4604      	mov	r4, r0
   200fc:	f04f 0340 	mov.w	r3, #64	; 0x40
   20100:	f3ef 8511 	mrs	r5, BASEPRI
   20104:	f383 8811 	msr	BASEPRI, r3
   20108:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   2010c:	f7fa fdbe 	bl	1ac8c <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   20110:	f104 000c 	add.w	r0, r4, #12
   20114:	f000 fad9 	bl	206ca <z_unpend_all>
   20118:	b130      	cbz	r0, 20128 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   2011a:	4629      	mov	r1, r5
   2011c:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   20120:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   20124:	f7f9 bd7a 	b.w	19c1c <z_reschedule>
	__asm__ volatile(
   20128:	f385 8811 	msr	BASEPRI, r5
   2012c:	f3bf 8f6f 	isb	sy
}
   20130:	bd38      	pop	{r3, r4, r5, pc}

00020132 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   20132:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20134:	4604      	mov	r4, r0
   20136:	460d      	mov	r5, r1
	__asm__ volatile(
   20138:	f04f 0340 	mov.w	r3, #64	; 0x40
   2013c:	f3ef 8611 	mrs	r6, BASEPRI
   20140:	f383 8811 	msr	BASEPRI, r3
   20144:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   20148:	6947      	ldr	r7, [r0, #20]
   2014a:	b977      	cbnz	r7, 2016a <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   2014c:	f000 faa5 	bl	2069a <z_unpend_first_thread>

		if (pending_thread != NULL) {
   20150:	b158      	cbz	r0, 2016a <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   20152:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   20154:	6142      	str	r2, [r0, #20]
   20156:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   20158:	f000 fa6d 	bl	20636 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   2015c:	4631      	mov	r1, r6
   2015e:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   20162:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   20166:	f7f9 bd59 	b.w	19c1c <z_reschedule>
	**(char ***) mem = slab->free_list;
   2016a:	682b      	ldr	r3, [r5, #0]
   2016c:	6962      	ldr	r2, [r4, #20]
   2016e:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   20170:	682b      	ldr	r3, [r5, #0]
   20172:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   20174:	69a3      	ldr	r3, [r4, #24]
   20176:	3b01      	subs	r3, #1
   20178:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   2017a:	f386 8811 	msr	BASEPRI, r6
   2017e:	f3bf 8f6f 	isb	sy
}
   20182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00020184 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   20184:	f3ef 8005 	mrs	r0, IPSR
}
   20188:	3800      	subs	r0, #0
   2018a:	bf18      	it	ne
   2018c:	2001      	movne	r0, #1
   2018e:	4770      	bx	lr

00020190 <z_impl_k_thread_name_set>:
}
   20190:	f06f 0057 	mvn.w	r0, #87	; 0x57
   20194:	4770      	bx	lr

00020196 <z_impl_k_thread_start>:
	z_sched_start(thread);
   20196:	f7f9 bed7 	b.w	19f48 <z_sched_start>

0002019a <z_pm_save_idle_exit>:
{
   2019a:	b508      	push	{r3, lr}
	pm_system_resume();
   2019c:	f7f1 f88a 	bl	112b4 <pm_system_resume>
}
   201a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   201a4:	f7fb bb9f 	b.w	1b8e6 <sys_clock_idle_exit>

000201a8 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   201a8:	f990 300e 	ldrsb.w	r3, [r0, #14]
   201ac:	428b      	cmp	r3, r1
   201ae:	d001      	beq.n	201b4 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   201b0:	f7f9 bee8 	b.w	19f84 <z_set_prio>
}
   201b4:	2000      	movs	r0, #0
   201b6:	4770      	bx	lr

000201b8 <z_impl_k_mutex_init>:
{
   201b8:	4603      	mov	r3, r0
	mutex->owner = NULL;
   201ba:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   201bc:	e9c3 0002 	strd	r0, r0, [r3, #8]
   201c0:	e9c3 3300 	strd	r3, r3, [r3]
}
   201c4:	4770      	bx	lr

000201c6 <queue_insert>:
{
   201c6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   201ca:	4699      	mov	r9, r3
   201cc:	4604      	mov	r4, r0
   201ce:	f89d 3020 	ldrb.w	r3, [sp, #32]
   201d2:	460d      	mov	r5, r1
   201d4:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   201d6:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   201da:	f04f 0240 	mov.w	r2, #64	; 0x40
   201de:	f3ef 8711 	mrs	r7, BASEPRI
   201e2:	f382 8811 	msr	BASEPRI, r2
   201e6:	f3bf 8f6f 	isb	sy
	if (is_append) {
   201ea:	b103      	cbz	r3, 201ee <queue_insert+0x28>
	return list->tail;
   201ec:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   201ee:	4630      	mov	r0, r6
   201f0:	f000 fa53 	bl	2069a <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   201f4:	b158      	cbz	r0, 2020e <queue_insert+0x48>
   201f6:	2400      	movs	r4, #0
   201f8:	67c4      	str	r4, [r0, #124]	; 0x7c
   201fa:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   201fe:	f000 fa1a 	bl	20636 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   20202:	4630      	mov	r0, r6
   20204:	4639      	mov	r1, r7
   20206:	f7f9 fd09 	bl	19c1c <z_reschedule>
	return 0;
   2020a:	2000      	movs	r0, #0
   2020c:	e00c      	b.n	20228 <queue_insert+0x62>
	if (alloc) {
   2020e:	f1b9 0f00 	cmp.w	r9, #0
   20212:	d01b      	beq.n	2024c <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   20214:	2108      	movs	r1, #8
   20216:	f7fa f9fd 	bl	1a614 <z_thread_aligned_alloc>
		if (anode == NULL) {
   2021a:	b938      	cbnz	r0, 2022c <queue_insert+0x66>
	__asm__ volatile(
   2021c:	f387 8811 	msr	BASEPRI, r7
   20220:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   20224:	f06f 000b 	mvn.w	r0, #11
}
   20228:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   2022c:	2301      	movs	r3, #1
		anode->data = data;
   2022e:	f8c0 8004 	str.w	r8, [r0, #4]
   20232:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   20234:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   20236:	f003 0203 	and.w	r2, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
   2023a:	b95d      	cbnz	r5, 20254 <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2023c:	6823      	ldr	r3, [r4, #0]
   2023e:	4313      	orrs	r3, r2
   20240:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   20242:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   20244:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   20246:	b973      	cbnz	r3, 20266 <queue_insert+0xa0>
	list->tail = node;
   20248:	6060      	str	r0, [r4, #4]
}
   2024a:	e00c      	b.n	20266 <queue_insert+0xa0>
	node->next_and_flags = flags;
   2024c:	f8c8 9000 	str.w	r9, [r8]
}
   20250:	4640      	mov	r0, r8
   20252:	e7ef      	b.n	20234 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   20254:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   20256:	f033 0303 	bics.w	r3, r3, #3
   2025a:	d110      	bne.n	2027e <queue_insert+0xb8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2025c:	6002      	str	r2, [r0, #0]
	return list->tail;
   2025e:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   20260:	b93a      	cbnz	r2, 20272 <queue_insert+0xac>
	list->head = node;
   20262:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   20266:	2104      	movs	r1, #4
   20268:	f104 0010 	add.w	r0, r4, #16
   2026c:	f000 fc0e 	bl	20a8c <z_handle_obj_poll_events>
   20270:	e7c7      	b.n	20202 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   20272:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   20274:	f003 0303 	and.w	r3, r3, #3
   20278:	4303      	orrs	r3, r0
   2027a:	6013      	str	r3, [r2, #0]
   2027c:	e7e4      	b.n	20248 <queue_insert+0x82>
   2027e:	4313      	orrs	r3, r2
   20280:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   20282:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   20284:	f003 0303 	and.w	r3, r3, #3
   20288:	4303      	orrs	r3, r0
   2028a:	602b      	str	r3, [r5, #0]
}
   2028c:	e7eb      	b.n	20266 <queue_insert+0xa0>

0002028e <z_queue_node_peek>:
{
   2028e:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   20290:	4604      	mov	r4, r0
   20292:	b130      	cbz	r0, 202a2 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   20294:	6802      	ldr	r2, [r0, #0]
   20296:	0793      	lsls	r3, r2, #30
   20298:	d003      	beq.n	202a2 <z_queue_node_peek+0x14>
		ret = anode->data;
   2029a:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   2029c:	b109      	cbz	r1, 202a2 <z_queue_node_peek+0x14>
			k_free(anode);
   2029e:	f000 fc16 	bl	20ace <k_free>
}
   202a2:	4620      	mov	r0, r4
   202a4:	bd10      	pop	{r4, pc}

000202a6 <z_impl_k_queue_init>:
	list->head = NULL;
   202a6:	2300      	movs	r3, #0
	list->tail = NULL;
   202a8:	e9c0 3300 	strd	r3, r3, [r0]
   202ac:	f100 0308 	add.w	r3, r0, #8
   202b0:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   202b4:	f100 0310 	add.w	r3, r0, #16
   202b8:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   202bc:	4770      	bx	lr

000202be <k_queue_append>:
{
   202be:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   202c0:	2301      	movs	r3, #1
   202c2:	9300      	str	r3, [sp, #0]
   202c4:	2300      	movs	r3, #0
{
   202c6:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   202c8:	4619      	mov	r1, r3
   202ca:	f7ff ff7c 	bl	201c6 <queue_insert>
}
   202ce:	b003      	add	sp, #12
   202d0:	f85d fb04 	ldr.w	pc, [sp], #4

000202d4 <k_queue_prepend>:
{
   202d4:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   202d6:	2300      	movs	r3, #0
{
   202d8:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   202da:	9300      	str	r3, [sp, #0]
   202dc:	4619      	mov	r1, r3
   202de:	f7ff ff72 	bl	201c6 <queue_insert>
}
   202e2:	b003      	add	sp, #12
   202e4:	f85d fb04 	ldr.w	pc, [sp], #4

000202e8 <k_queue_append_list>:
{
   202e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   202ec:	4605      	mov	r5, r0
   202ee:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   202f0:	460c      	mov	r4, r1
   202f2:	b391      	cbz	r1, 2035a <k_queue_append_list+0x72>
   202f4:	b38a      	cbz	r2, 2035a <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   202f6:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   202fa:	f04f 0340 	mov.w	r3, #64	; 0x40
   202fe:	f3ef 8811 	mrs	r8, BASEPRI
   20302:	f383 8811 	msr	BASEPRI, r3
   20306:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   2030a:	4638      	mov	r0, r7
   2030c:	f000 f9c5 	bl	2069a <z_unpend_first_thread>
   20310:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   20314:	b920      	cbnz	r0, 20320 <k_queue_append_list+0x38>
	return list->tail;
   20316:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   20318:	b9ca      	cbnz	r2, 2034e <k_queue_append_list+0x66>
	list->head = node;
   2031a:	602c      	str	r4, [r5, #0]
	list->tail = node;
   2031c:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   2031e:	e00a      	b.n	20336 <k_queue_append_list+0x4e>
	thread->base.swap_data = data;
   20320:	6144      	str	r4, [r0, #20]
   20322:	f8c0 907c 	str.w	r9, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   20326:	f000 f986 	bl	20636 <z_ready_thread>
		head = *(void **)head;
   2032a:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   2032c:	4638      	mov	r0, r7
   2032e:	f000 f9b4 	bl	2069a <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   20332:	2c00      	cmp	r4, #0
   20334:	d1ee      	bne.n	20314 <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   20336:	2104      	movs	r1, #4
   20338:	f105 0010 	add.w	r0, r5, #16
   2033c:	f000 fba6 	bl	20a8c <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   20340:	4638      	mov	r0, r7
   20342:	4641      	mov	r1, r8
   20344:	f7f9 fc6a 	bl	19c1c <z_reschedule>
	return 0;
   20348:	2000      	movs	r0, #0
}
   2034a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2034e:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   20350:	f003 0303 	and.w	r3, r3, #3
   20354:	431c      	orrs	r4, r3
   20356:	6014      	str	r4, [r2, #0]
}
   20358:	e7e0      	b.n	2031c <k_queue_append_list+0x34>
		return -EINVAL;
   2035a:	f06f 0015 	mvn.w	r0, #21
   2035e:	e7f4      	b.n	2034a <k_queue_append_list+0x62>

00020360 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   20360:	b15a      	cbz	r2, 2037a <z_impl_k_sem_init+0x1a>
   20362:	428a      	cmp	r2, r1
   20364:	d309      	bcc.n	2037a <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   20366:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   2036a:	e9c0 1202 	strd	r1, r2, [r0, #8]
   2036e:	e9c0 0000 	strd	r0, r0, [r0]
   20372:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   20376:	2000      	movs	r0, #0
   20378:	4770      	bx	lr
		return -EINVAL;
   2037a:	f06f 0015 	mvn.w	r0, #21
}
   2037e:	4770      	bx	lr

00020380 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   20380:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   20382:	2301      	movs	r3, #1
   20384:	408b      	lsls	r3, r1
   20386:	ea22 0303 	bic.w	r3, r2, r3
   2038a:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   2038c:	fa22 f001 	lsr.w	r0, r2, r1
}
   20390:	f000 0001 	and.w	r0, r0, #1
   20394:	4770      	bx	lr

00020396 <unschedule_locked>:
{
   20396:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   20398:	2103      	movs	r1, #3
{
   2039a:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2039c:	300c      	adds	r0, #12
   2039e:	f7ff ffef 	bl	20380 <flag_test_and_clear>
   203a2:	4604      	mov	r4, r0
   203a4:	b118      	cbz	r0, 203ae <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   203a6:	f105 0010 	add.w	r0, r5, #16
   203aa:	f000 f9bb 	bl	20724 <z_abort_timeout>
}
   203ae:	4620      	mov	r0, r4
   203b0:	bd38      	pop	{r3, r4, r5, pc}

000203b2 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   203b2:	b120      	cbz	r0, 203be <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   203b4:	2200      	movs	r2, #0
   203b6:	4611      	mov	r1, r2
   203b8:	3088      	adds	r0, #136	; 0x88
   203ba:	f000 b996 	b.w	206ea <z_sched_wake>
}
   203be:	4770      	bx	lr

000203c0 <cancel_async_locked>:
	return (*flagp & BIT(bit)) != 0U;
   203c0:	68c3      	ldr	r3, [r0, #12]
{
   203c2:	b570      	push	{r4, r5, r6, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   203c4:	f3c3 0540 	ubfx	r5, r3, #1, #1
   203c8:	079b      	lsls	r3, r3, #30
{
   203ca:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   203cc:	d416      	bmi.n	203fc <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   203ce:	6886      	ldr	r6, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   203d0:	2102      	movs	r1, #2
   203d2:	300c      	adds	r0, #12
   203d4:	f7ff ffd4 	bl	20380 <flag_test_and_clear>
   203d8:	b180      	cbz	r0, 203fc <cancel_async_locked+0x3c>
	return list->head;
   203da:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   203de:	b16a      	cbz	r2, 203fc <cancel_async_locked+0x3c>
   203e0:	4294      	cmp	r4, r2
   203e2:	d11b      	bne.n	2041c <cancel_async_locked+0x5c>
	return node->next;
   203e4:	6822      	ldr	r2, [r4, #0]
	return list->tail;
   203e6:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
Z_GENLIST_REMOVE(slist, snode)
   203ea:	b98d      	cbnz	r5, 20410 <cancel_async_locked+0x50>
   203ec:	428c      	cmp	r4, r1
	list->head = node;
   203ee:	f8c6 2080 	str.w	r2, [r6, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   203f2:	d101      	bne.n	203f8 <cancel_async_locked+0x38>
	list->tail = node;
   203f4:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
	parent->next = child;
   203f8:	2300      	movs	r3, #0
   203fa:	6023      	str	r3, [r4, #0]
	return *flagp;
   203fc:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   203fe:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   20402:	bf1e      	ittt	ne
   20404:	f043 0302 	orrne.w	r3, r3, #2
   20408:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   2040a:	f003 000f 	andne.w	r0, r3, #15
}
   2040e:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_REMOVE(slist, snode)
   20410:	428c      	cmp	r4, r1
	parent->next = child;
   20412:	602a      	str	r2, [r5, #0]
	list->tail = node;
   20414:	bf08      	it	eq
   20416:	f8c6 5084 	streq.w	r5, [r6, #132]	; 0x84
}
   2041a:	e7ed      	b.n	203f8 <cancel_async_locked+0x38>
	return node->next;
   2041c:	4615      	mov	r5, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2041e:	6812      	ldr	r2, [r2, #0]
   20420:	e7dd      	b.n	203de <cancel_async_locked+0x1e>

00020422 <work_timeout>:
{
   20422:	b573      	push	{r0, r1, r4, r5, r6, lr}
   20424:	4604      	mov	r4, r0
   20426:	f04f 0340 	mov.w	r3, #64	; 0x40
   2042a:	f3ef 8511 	mrs	r5, BASEPRI
   2042e:	f383 8811 	msr	BASEPRI, r3
   20432:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   20436:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   20438:	f1a0 0610 	sub.w	r6, r0, #16
   2043c:	2103      	movs	r1, #3
   2043e:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   20440:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   20442:	f7ff ff9d 	bl	20380 <flag_test_and_clear>
   20446:	b128      	cbz	r0, 20454 <work_timeout+0x32>
		queue = dw->queue;
   20448:	69a3      	ldr	r3, [r4, #24]
   2044a:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   2044c:	a901      	add	r1, sp, #4
   2044e:	4630      	mov	r0, r6
   20450:	f7f9 faac 	bl	199ac <submit_to_queue_locked>
	__asm__ volatile(
   20454:	f385 8811 	msr	BASEPRI, r5
   20458:	f3bf 8f6f 	isb	sy
}
   2045c:	b002      	add	sp, #8
   2045e:	bd70      	pop	{r4, r5, r6, pc}

00020460 <k_work_init>:
{
   20460:	b538      	push	{r3, r4, r5, lr}
   20462:	4604      	mov	r4, r0
   20464:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   20466:	2210      	movs	r2, #16
   20468:	2100      	movs	r1, #0
   2046a:	f7fc fc27 	bl	1ccbc <memset>
   2046e:	6065      	str	r5, [r4, #4]
}
   20470:	bd38      	pop	{r3, r4, r5, pc}

00020472 <k_work_submit_to_queue>:
{
   20472:	b537      	push	{r0, r1, r2, r4, r5, lr}
   20474:	9001      	str	r0, [sp, #4]
   20476:	4608      	mov	r0, r1
	__asm__ volatile(
   20478:	f04f 0340 	mov.w	r3, #64	; 0x40
   2047c:	f3ef 8511 	mrs	r5, BASEPRI
   20480:	f383 8811 	msr	BASEPRI, r3
   20484:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   20488:	a901      	add	r1, sp, #4
   2048a:	f7f9 fa8f 	bl	199ac <submit_to_queue_locked>
   2048e:	4604      	mov	r4, r0
	__asm__ volatile(
   20490:	f385 8811 	msr	BASEPRI, r5
   20494:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   20498:	2800      	cmp	r0, #0
   2049a:	dd04      	ble.n	204a6 <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
   2049c:	f7f9 fe6e 	bl	1a17c <z_impl_k_is_preempt_thread>
   204a0:	b108      	cbz	r0, 204a6 <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
   204a2:	f7f9 fdc3 	bl	1a02c <z_impl_k_yield>
}
   204a6:	4620      	mov	r0, r4
   204a8:	b003      	add	sp, #12
   204aa:	bd30      	pop	{r4, r5, pc}

000204ac <k_work_init_delayable>:
{
   204ac:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   204ae:	2230      	movs	r2, #48	; 0x30
{
   204b0:	4604      	mov	r4, r0
   204b2:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   204b4:	2100      	movs	r1, #0
   204b6:	f7fc fc01 	bl	1ccbc <memset>
   204ba:	f44f 7380 	mov.w	r3, #256	; 0x100
   204be:	6065      	str	r5, [r4, #4]
   204c0:	60e3      	str	r3, [r4, #12]
}
   204c2:	bd38      	pop	{r3, r4, r5, pc}

000204c4 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   204c4:	b538      	push	{r3, r4, r5, lr}
   204c6:	4604      	mov	r4, r0
	__asm__ volatile(
   204c8:	f04f 0340 	mov.w	r3, #64	; 0x40
   204cc:	f3ef 8511 	mrs	r5, BASEPRI
   204d0:	f383 8811 	msr	BASEPRI, r3
   204d4:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   204d8:	f7ff ff5d 	bl	20396 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   204dc:	4620      	mov	r0, r4
   204de:	f7ff ff6f 	bl	203c0 <cancel_async_locked>
	__asm__ volatile(
   204e2:	f385 8811 	msr	BASEPRI, r5
   204e6:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   204ea:	bd38      	pop	{r3, r4, r5, pc}

000204ec <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   204ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   204ee:	4604      	mov	r4, r0
   204f0:	460d      	mov	r5, r1
	__asm__ volatile(
   204f2:	f04f 0340 	mov.w	r3, #64	; 0x40
   204f6:	f3ef 8711 	mrs	r7, BASEPRI
   204fa:	f383 8811 	msr	BASEPRI, r3
   204fe:	f3bf 8f6f 	isb	sy
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20502:	f3bf 8f5b 	dmb	ish
   20506:	68c3      	ldr	r3, [r0, #12]
   20508:	f3bf 8f5b 	dmb	ish
	return atomic_get(&dwork->work.flags) & K_WORK_MASK;
   2050c:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   20510:	2b00      	cmp	r3, #0
   20512:	bf14      	ite	ne
   20514:	2601      	movne	r6, #1
   20516:	2600      	moveq	r6, #0
	bool need_wait = false;

	if (pending) {
   20518:	d009      	beq.n	2052e <k_work_cancel_delayable_sync+0x42>
	(void)unschedule_locked(dwork);
   2051a:	f7ff ff3c 	bl	20396 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   2051e:	4620      	mov	r0, r4
   20520:	f7ff ff4e 	bl	203c0 <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   20524:	4629      	mov	r1, r5
   20526:	4620      	mov	r0, r4
   20528:	f7f9 fa22 	bl	19970 <cancel_sync_locked>
   2052c:	4603      	mov	r3, r0
	__asm__ volatile(
   2052e:	f387 8811 	msr	BASEPRI, r7
   20532:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   20536:	b13b      	cbz	r3, 20548 <k_work_cancel_delayable_sync+0x5c>
	return z_impl_k_sem_take(sem, timeout);
   20538:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2053c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20540:	f105 0008 	add.w	r0, r5, #8
   20544:	f7f9 f91a 	bl	1977c <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   20548:	4630      	mov	r0, r6
   2054a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002054c <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   2054c:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   20550:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   20552:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   20554:	2300      	movs	r3, #0
	node->prev = NULL;
   20556:	e9c0 3300 	strd	r3, r3, [r0]
}
   2055a:	4770      	bx	lr

0002055c <unpend_thread_no_timeout>:
{
   2055c:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   2055e:	f7ff fff5 	bl	2054c <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   20562:	7b43      	ldrb	r3, [r0, #13]
   20564:	f023 0302 	bic.w	r3, r3, #2
   20568:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   2056a:	2300      	movs	r3, #0
   2056c:	6083      	str	r3, [r0, #8]
}
   2056e:	bd08      	pop	{r3, pc}

00020570 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   20570:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   20574:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   20578:	4283      	cmp	r3, r0
		return b2 - b1;
   2057a:	bf14      	ite	ne
   2057c:	1ac0      	subne	r0, r0, r3
	return 0;
   2057e:	2000      	moveq	r0, #0
}
   20580:	4770      	bx	lr

00020582 <z_unpend_thread>:
{
   20582:	b510      	push	{r4, lr}
	__asm__ volatile(
   20584:	f04f 0340 	mov.w	r3, #64	; 0x40
   20588:	f3ef 8411 	mrs	r4, BASEPRI
   2058c:	f383 8811 	msr	BASEPRI, r3
   20590:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   20594:	f7ff ffe2 	bl	2055c <unpend_thread_no_timeout>
	__asm__ volatile(
   20598:	f384 8811 	msr	BASEPRI, r4
   2059c:	f3bf 8f6f 	isb	sy
}
   205a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   205a4:	3018      	adds	r0, #24
   205a6:	f000 b8bd 	b.w	20724 <z_abort_timeout>

000205aa <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   205aa:	4603      	mov	r3, r0
   205ac:	b920      	cbnz	r0, 205b8 <z_reschedule_irqlock+0xe>
   205ae:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   205b2:	b90a      	cbnz	r2, 205b8 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   205b4:	f7f1 bab0 	b.w	11b18 <arch_swap>
   205b8:	f383 8811 	msr	BASEPRI, r3
   205bc:	f3bf 8f6f 	isb	sy
}
   205c0:	4770      	bx	lr

000205c2 <z_reschedule_unlocked>:
	__asm__ volatile(
   205c2:	f04f 0340 	mov.w	r3, #64	; 0x40
   205c6:	f3ef 8011 	mrs	r0, BASEPRI
   205ca:	f383 8811 	msr	BASEPRI, r3
   205ce:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   205d2:	f7ff bfea 	b.w	205aa <z_reschedule_irqlock>

000205d6 <z_priq_dumb_best>:
{
   205d6:	4603      	mov	r3, r0
	return list->head == list;
   205d8:	6800      	ldr	r0, [r0, #0]
}
   205da:	4283      	cmp	r3, r0
   205dc:	bf08      	it	eq
   205de:	2000      	moveq	r0, #0
   205e0:	4770      	bx	lr

000205e2 <add_to_waitq_locked>:
{
   205e2:	b538      	push	{r3, r4, r5, lr}
   205e4:	4604      	mov	r4, r0
   205e6:	460d      	mov	r5, r1
	unready_thread(thread);
   205e8:	f7f9 fb5e 	bl	19ca8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   205ec:	7b63      	ldrb	r3, [r4, #13]
   205ee:	f043 0302 	orr.w	r3, r3, #2
   205f2:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   205f4:	b195      	cbz	r5, 2061c <add_to_waitq_locked+0x3a>
   205f6:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   205f8:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   205fa:	429d      	cmp	r5, r3
   205fc:	d015      	beq.n	2062a <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   205fe:	b1a3      	cbz	r3, 2062a <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
   20600:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   20604:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   20608:	4291      	cmp	r1, r2
   2060a:	d008      	beq.n	2061e <add_to_waitq_locked+0x3c>
		return b2 - b1;
   2060c:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   2060e:	2a00      	cmp	r2, #0
   20610:	dd05      	ble.n	2061e <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
   20612:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   20614:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   20618:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2061a:	605c      	str	r4, [r3, #4]
}
   2061c:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   2061e:	686a      	ldr	r2, [r5, #4]
   20620:	4293      	cmp	r3, r2
   20622:	d002      	beq.n	2062a <add_to_waitq_locked+0x48>
   20624:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   20626:	2b00      	cmp	r3, #0
   20628:	d1ec      	bne.n	20604 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
   2062a:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   2062c:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   20630:	601c      	str	r4, [r3, #0]
	list->tail = node;
   20632:	606c      	str	r4, [r5, #4]
}
   20634:	e7f2      	b.n	2061c <add_to_waitq_locked+0x3a>

00020636 <z_ready_thread>:
{
   20636:	b510      	push	{r4, lr}
   20638:	f04f 0340 	mov.w	r3, #64	; 0x40
   2063c:	f3ef 8411 	mrs	r4, BASEPRI
   20640:	f383 8811 	msr	BASEPRI, r3
   20644:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   20648:	f7f9 fc48 	bl	19edc <ready_thread>
	__asm__ volatile(
   2064c:	f384 8811 	msr	BASEPRI, r4
   20650:	f3bf 8f6f 	isb	sy
}
   20654:	bd10      	pop	{r4, pc}

00020656 <z_thread_timeout>:
{
   20656:	b510      	push	{r4, lr}
   20658:	4601      	mov	r1, r0
	__asm__ volatile(
   2065a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2065e:	f3ef 8411 	mrs	r4, BASEPRI
   20662:	f383 8811 	msr	BASEPRI, r3
   20666:	f3bf 8f6f 	isb	sy
		if (!killed) {
   2066a:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   2066e:	f013 0f28 	tst.w	r3, #40	; 0x28
   20672:	d10d      	bne.n	20690 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   20674:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   20678:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   2067a:	b10b      	cbz	r3, 20680 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   2067c:	f7ff ff6e 	bl	2055c <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   20680:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   20684:	f023 0314 	bic.w	r3, r3, #20
   20688:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   2068c:	f7f9 fc26 	bl	19edc <ready_thread>
	__asm__ volatile(
   20690:	f384 8811 	msr	BASEPRI, r4
   20694:	f3bf 8f6f 	isb	sy
}
   20698:	bd10      	pop	{r4, pc}

0002069a <z_unpend_first_thread>:
{
   2069a:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2069c:	f04f 0340 	mov.w	r3, #64	; 0x40
   206a0:	f3ef 8511 	mrs	r5, BASEPRI
   206a4:	f383 8811 	msr	BASEPRI, r3
   206a8:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   206ac:	f7ff ff93 	bl	205d6 <z_priq_dumb_best>
		if (thread != NULL) {
   206b0:	4604      	mov	r4, r0
   206b2:	b120      	cbz	r0, 206be <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   206b4:	f7ff ff52 	bl	2055c <unpend_thread_no_timeout>
   206b8:	3018      	adds	r0, #24
   206ba:	f000 f833 	bl	20724 <z_abort_timeout>
	__asm__ volatile(
   206be:	f385 8811 	msr	BASEPRI, r5
   206c2:	f3bf 8f6f 	isb	sy
}
   206c6:	4620      	mov	r0, r4
   206c8:	bd38      	pop	{r3, r4, r5, pc}

000206ca <z_unpend_all>:
{
   206ca:	b538      	push	{r3, r4, r5, lr}
   206cc:	4605      	mov	r5, r0
	int need_sched = 0;
   206ce:	2000      	movs	r0, #0
	return list->head == list;
   206d0:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   206d2:	42a5      	cmp	r5, r4
   206d4:	d000      	beq.n	206d8 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   206d6:	b904      	cbnz	r4, 206da <z_unpend_all+0x10>
}
   206d8:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   206da:	4620      	mov	r0, r4
   206dc:	f7ff ff51 	bl	20582 <z_unpend_thread>
		z_ready_thread(thread);
   206e0:	4620      	mov	r0, r4
   206e2:	f7ff ffa8 	bl	20636 <z_ready_thread>
		need_sched = 1;
   206e6:	2001      	movs	r0, #1
   206e8:	e7f2      	b.n	206d0 <z_unpend_all+0x6>

000206ea <z_sched_wake>:
{
   206ea:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   206ec:	f04f 0340 	mov.w	r3, #64	; 0x40
   206f0:	f3ef 8511 	mrs	r5, BASEPRI
   206f4:	f383 8811 	msr	BASEPRI, r3
   206f8:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   206fc:	f7ff ff6b 	bl	205d6 <z_priq_dumb_best>
		if (thread != NULL) {
   20700:	4604      	mov	r4, r0
   20702:	b150      	cbz	r0, 2071a <z_sched_wake+0x30>
   20704:	67c1      	str	r1, [r0, #124]	; 0x7c
   20706:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
   20708:	f7ff ff28 	bl	2055c <unpend_thread_no_timeout>
   2070c:	3018      	adds	r0, #24
   2070e:	f000 f809 	bl	20724 <z_abort_timeout>
			ready_thread(thread);
   20712:	4620      	mov	r0, r4
   20714:	f7f9 fbe2 	bl	19edc <ready_thread>
			ret = true;
   20718:	2001      	movs	r0, #1
	__asm__ volatile(
   2071a:	f385 8811 	msr	BASEPRI, r5
   2071e:	f3bf 8f6f 	isb	sy
}
   20722:	bd38      	pop	{r3, r4, r5, pc}

00020724 <z_abort_timeout>:
{
   20724:	b510      	push	{r4, lr}
	__asm__ volatile(
   20726:	f04f 0240 	mov.w	r2, #64	; 0x40
   2072a:	f3ef 8411 	mrs	r4, BASEPRI
   2072e:	f382 8811 	msr	BASEPRI, r2
   20732:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   20736:	6803      	ldr	r3, [r0, #0]
   20738:	b13b      	cbz	r3, 2074a <z_abort_timeout+0x26>
			remove_timeout(to);
   2073a:	f7f9 fddf 	bl	1a2fc <remove_timeout>
			ret = 0;
   2073e:	2000      	movs	r0, #0
	__asm__ volatile(
   20740:	f384 8811 	msr	BASEPRI, r4
   20744:	f3bf 8f6f 	isb	sy
}
   20748:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   2074a:	f06f 0015 	mvn.w	r0, #21
   2074e:	e7f7      	b.n	20740 <z_abort_timeout+0x1c>

00020750 <z_get_next_timeout_expiry>:
{
   20750:	b510      	push	{r4, lr}
	__asm__ volatile(
   20752:	f04f 0340 	mov.w	r3, #64	; 0x40
   20756:	f3ef 8411 	mrs	r4, BASEPRI
   2075a:	f383 8811 	msr	BASEPRI, r3
   2075e:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   20762:	f7f9 fda3 	bl	1a2ac <next_timeout>
	__asm__ volatile(
   20766:	f384 8811 	msr	BASEPRI, r4
   2076a:	f3bf 8f6f 	isb	sy
}
   2076e:	bd10      	pop	{r4, pc}

00020770 <z_set_timeout_expiry>:
{
   20770:	b570      	push	{r4, r5, r6, lr}
   20772:	4604      	mov	r4, r0
   20774:	460d      	mov	r5, r1
	__asm__ volatile(
   20776:	f04f 0340 	mov.w	r3, #64	; 0x40
   2077a:	f3ef 8611 	mrs	r6, BASEPRI
   2077e:	f383 8811 	msr	BASEPRI, r3
   20782:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   20786:	f7f9 fd91 	bl	1a2ac <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   2078a:	2801      	cmp	r0, #1
   2078c:	dd05      	ble.n	2079a <z_set_timeout_expiry+0x2a>
   2078e:	42a0      	cmp	r0, r4
   20790:	db03      	blt.n	2079a <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   20792:	4629      	mov	r1, r5
   20794:	4620      	mov	r0, r4
   20796:	f7f1 f857 	bl	11848 <sys_clock_set_timeout>
	__asm__ volatile(
   2079a:	f386 8811 	msr	BASEPRI, r6
   2079e:	f3bf 8f6f 	isb	sy
}
   207a2:	bd70      	pop	{r4, r5, r6, pc}

000207a4 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   207a4:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   207a6:	f7f9 fe99 	bl	1a4dc <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   207aa:	bd08      	pop	{r3, pc}

000207ac <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   207ac:	b108      	cbz	r0, 207b2 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   207ae:	f7f1 bd87 	b.w	122c0 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   207b2:	4770      	bx	lr

000207b4 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   207b4:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   207b8:	bf08      	it	eq
   207ba:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   207be:	b538      	push	{r3, r4, r5, lr}
   207c0:	4605      	mov	r5, r0
   207c2:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   207c4:	d01d      	beq.n	20802 <sys_clock_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   207c6:	ea51 0300 	orrs.w	r3, r1, r0
   207ca:	d103      	bne.n	207d4 <sys_clock_timeout_end_calc+0x20>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   207cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   207d0:	f7f9 be84 	b.w	1a4dc <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   207d4:	f06f 0301 	mvn.w	r3, #1
   207d8:	1a18      	subs	r0, r3, r0
   207da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   207de:	eb63 0101 	sbc.w	r1, r3, r1
   207e2:	2900      	cmp	r1, #0
   207e4:	da0c      	bge.n	20800 <sys_clock_timeout_end_calc+0x4c>
		return sys_clock_tick_get() + MAX(1, dt);
   207e6:	f7f9 fe79 	bl	1a4dc <sys_clock_tick_get>
   207ea:	2d01      	cmp	r5, #1
   207ec:	4622      	mov	r2, r4
   207ee:	f174 0400 	sbcs.w	r4, r4, #0
   207f2:	462b      	mov	r3, r5
   207f4:	bfbc      	itt	lt
   207f6:	2301      	movlt	r3, #1
   207f8:	2200      	movlt	r2, #0
   207fa:	1818      	adds	r0, r3, r0
   207fc:	eb41 0102 	adc.w	r1, r1, r2
}
   20800:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   20802:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   20806:	4601      	mov	r1, r0
   20808:	e7fa      	b.n	20800 <sys_clock_timeout_end_calc+0x4c>

0002080a <add_event>:
{
   2080a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2080c:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2080e:	e9d0 2300 	ldrd	r2, r3, [r0]
   20812:	4290      	cmp	r0, r2
   20814:	4604      	mov	r4, r0
   20816:	460d      	mov	r5, r1
   20818:	d105      	bne.n	20826 <add_event+0x1c>
	sys_dnode_t *const tail = list->tail;
   2081a:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   2081c:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   20820:	601d      	str	r5, [r3, #0]
	list->tail = node;
   20822:	6065      	str	r5, [r4, #4]
}
   20824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   20826:	2b00      	cmp	r3, #0
   20828:	d0f7      	beq.n	2081a <add_event+0x10>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2082a:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2082c:	b100      	cbz	r0, 20830 <add_event+0x26>
   2082e:	3860      	subs	r0, #96	; 0x60
   20830:	b107      	cbz	r7, 20834 <add_event+0x2a>
   20832:	3f60      	subs	r7, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   20834:	4639      	mov	r1, r7
   20836:	f7ff fe9b 	bl	20570 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   2083a:	2800      	cmp	r0, #0
   2083c:	dced      	bgt.n	2081a <add_event+0x10>
	return list->head == list;
   2083e:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20840:	42b4      	cmp	r4, r6
   20842:	d0ea      	beq.n	2081a <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   20844:	2e00      	cmp	r6, #0
   20846:	d0e8      	beq.n	2081a <add_event+0x10>
		if (z_sched_prio_cmp(poller_thread(poller),
   20848:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2084a:	b101      	cbz	r1, 2084e <add_event+0x44>
   2084c:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   2084e:	4638      	mov	r0, r7
   20850:	f7ff fe8e 	bl	20570 <z_sched_prio_cmp>
   20854:	2800      	cmp	r0, #0
   20856:	dd05      	ble.n	20864 <add_event+0x5a>
	sys_dnode_t *const prev = successor->prev;
   20858:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   2085a:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   2085e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   20860:	6075      	str	r5, [r6, #4]
			return;
   20862:	e7df      	b.n	20824 <add_event+0x1a>
	return (node == list->tail) ? NULL : node->next;
   20864:	6863      	ldr	r3, [r4, #4]
   20866:	42b3      	cmp	r3, r6
   20868:	d0d7      	beq.n	2081a <add_event+0x10>
   2086a:	6836      	ldr	r6, [r6, #0]
   2086c:	e7ea      	b.n	20844 <add_event+0x3a>

0002086e <register_events>:
{
   2086e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   20872:	2500      	movs	r5, #0
{
   20874:	468b      	mov	fp, r1
   20876:	4614      	mov	r4, r2
   20878:	461f      	mov	r7, r3
   2087a:	4682      	mov	sl, r0
	int events_registered = 0;
   2087c:	462e      	mov	r6, r5
	event->poller = NULL;
   2087e:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   20880:	455d      	cmp	r5, fp
   20882:	db02      	blt.n	2088a <register_events+0x1c>
}
   20884:	4630      	mov	r0, r6
   20886:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   2088a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2088e:	f3ef 8911 	mrs	r9, BASEPRI
   20892:	f383 8811 	msr	BASEPRI, r3
   20896:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   2089a:	f89a 300d 	ldrb.w	r3, [sl, #13]
   2089e:	f003 031f 	and.w	r3, r3, #31
   208a2:	3b01      	subs	r3, #1
   208a4:	2b07      	cmp	r3, #7
   208a6:	d80f      	bhi.n	208c8 <register_events+0x5a>
   208a8:	e8df f003 	tbb	[pc, r3]
   208ac:	0a0e041e 	.word	0x0a0e041e
   208b0:	250e0e0e 	.word	0x250e0e0e
		if (k_sem_count_get(event->sem) > 0U) {
   208b4:	f8da 3010 	ldr.w	r3, [sl, #16]
   208b8:	689b      	ldr	r3, [r3, #8]
   208ba:	b12b      	cbz	r3, 208c8 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   208bc:	2302      	movs	r3, #2
   208be:	e020      	b.n	20902 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   208c0:	f8da 3010 	ldr.w	r3, [sl, #16]
   208c4:	681b      	ldr	r3, [r3, #0]
   208c6:	bb8b      	cbnz	r3, 2092c <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   208c8:	bb47      	cbnz	r7, 2091c <register_events+0xae>
   208ca:	7823      	ldrb	r3, [r4, #0]
   208cc:	b333      	cbz	r3, 2091c <register_events+0xae>
	switch (event->type) {
   208ce:	f89a 300d 	ldrb.w	r3, [sl, #13]
   208d2:	f003 031f 	and.w	r3, r3, #31
   208d6:	3b01      	subs	r3, #1
   208d8:	2b07      	cmp	r3, #7
   208da:	d830      	bhi.n	2093e <register_events+0xd0>
   208dc:	e8df f003 	tbb	[pc, r3]
   208e0:	282f2833 	.word	0x282f2833
   208e4:	382f2f2f 	.word	0x382f2f2f
		if (event->signal->signaled != 0U) {
   208e8:	f8da 3010 	ldr.w	r3, [sl, #16]
   208ec:	689b      	ldr	r3, [r3, #8]
   208ee:	2b00      	cmp	r3, #0
   208f0:	d0ea      	beq.n	208c8 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   208f2:	2301      	movs	r3, #1
   208f4:	e005      	b.n	20902 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   208f6:	f8da 3010 	ldr.w	r3, [sl, #16]
   208fa:	6a1b      	ldr	r3, [r3, #32]
   208fc:	2b00      	cmp	r3, #0
   208fe:	d0e3      	beq.n	208c8 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   20900:	2310      	movs	r3, #16
	event->state |= state;
   20902:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   20906:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   2090a:	f3c2 3145 	ubfx	r1, r2, #13, #6
   2090e:	430b      	orrs	r3, r1
   20910:	f363 3252 	bfi	r2, r3, #13, #6
   20914:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   20918:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   2091c:	f389 8811 	msr	BASEPRI, r9
   20920:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   20924:	3501      	adds	r5, #1
   20926:	f10a 0a14 	add.w	sl, sl, #20
   2092a:	e7a9      	b.n	20880 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   2092c:	2304      	movs	r3, #4
   2092e:	e7e8      	b.n	20902 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   20930:	f8da 0010 	ldr.w	r0, [sl, #16]
   20934:	4622      	mov	r2, r4
   20936:	4651      	mov	r1, sl
   20938:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   2093a:	f7ff ff66 	bl	2080a <add_event>
	event->poller = poller;
   2093e:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   20942:	3601      	adds	r6, #1
   20944:	e7ea      	b.n	2091c <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   20946:	f8da 0010 	ldr.w	r0, [sl, #16]
   2094a:	4622      	mov	r2, r4
   2094c:	4651      	mov	r1, sl
   2094e:	e7f4      	b.n	2093a <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   20950:	f8da 0010 	ldr.w	r0, [sl, #16]
   20954:	4622      	mov	r2, r4
   20956:	4651      	mov	r1, sl
   20958:	3024      	adds	r0, #36	; 0x24
   2095a:	e7ee      	b.n	2093a <register_events+0xcc>

0002095c <signal_poll_event>:
{
   2095c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   20960:	6884      	ldr	r4, [r0, #8]
{
   20962:	4605      	mov	r5, r0
   20964:	460e      	mov	r6, r1
	if (poller != NULL) {
   20966:	b144      	cbz	r4, 2097a <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   20968:	7863      	ldrb	r3, [r4, #1]
   2096a:	2b01      	cmp	r3, #1
   2096c:	d136      	bne.n	209dc <signal_poll_event+0x80>
	if (!z_is_thread_pending(thread)) {
   2096e:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   20972:	f013 0302 	ands.w	r3, r3, #2
   20976:	d10a      	bne.n	2098e <signal_poll_event+0x32>
		poller->is_polling = false;
   20978:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   2097a:	68eb      	ldr	r3, [r5, #12]
   2097c:	f3c3 3145 	ubfx	r1, r3, #13, #6
   20980:	430e      	orrs	r6, r1
	event->poller = NULL;
   20982:	2000      	movs	r0, #0
	event->state |= state;
   20984:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   20988:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   2098a:	60eb      	str	r3, [r5, #12]
	return retcode;
   2098c:	e00b      	b.n	209a6 <signal_poll_event+0x4a>
	if (z_is_thread_timeout_expired(thread)) {
   2098e:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   20992:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   20996:	bf08      	it	eq
   20998:	f112 0f02 	cmneq.w	r2, #2
   2099c:	d105      	bne.n	209aa <signal_poll_event+0x4e>
		poller->is_polling = false;
   2099e:	2300      	movs	r3, #0
   209a0:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   209a2:	f06f 000a 	mvn.w	r0, #10
}
   209a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   209aa:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   209ae:	4640      	mov	r0, r8
   209b0:	f7ff fde7 	bl	20582 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   209b4:	2e08      	cmp	r6, #8
   209b6:	bf0c      	ite	eq
   209b8:	f06f 0303 	mvneq.w	r3, #3
   209bc:	2300      	movne	r3, #0
   209be:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   209c0:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   209c4:	06db      	lsls	r3, r3, #27
   209c6:	d102      	bne.n	209ce <signal_poll_event+0x72>
	if (!z_is_thread_ready(thread)) {
   209c8:	f854 7c48 	ldr.w	r7, [r4, #-72]
   209cc:	b10f      	cbz	r7, 209d2 <signal_poll_event+0x76>
		poller->is_polling = false;
   209ce:	2300      	movs	r3, #0
   209d0:	e7d2      	b.n	20978 <signal_poll_event+0x1c>
	z_ready_thread(thread);
   209d2:	4640      	mov	r0, r8
   209d4:	f7ff fe2f 	bl	20636 <z_ready_thread>
		poller->is_polling = false;
   209d8:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   209da:	e7ce      	b.n	2097a <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   209dc:	2b02      	cmp	r3, #2
   209de:	d1f6      	bne.n	209ce <signal_poll_event+0x72>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   209e0:	7823      	ldrb	r3, [r4, #0]
   209e2:	2b00      	cmp	r3, #0
   209e4:	d0c9      	beq.n	2097a <signal_poll_event+0x1e>
   209e6:	f854 7c04 	ldr.w	r7, [r4, #-4]
   209ea:	2f00      	cmp	r7, #0
   209ec:	d0f4      	beq.n	209d8 <signal_poll_event+0x7c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   209ee:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   209f2:	f1a4 0914 	sub.w	r9, r4, #20
   209f6:	f104 0014 	add.w	r0, r4, #20
   209fa:	f7ff fe93 	bl	20724 <z_abort_timeout>
		twork->poll_result = 0;
   209fe:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   20a02:	4649      	mov	r1, r9
   20a04:	4638      	mov	r0, r7
   20a06:	f7ff fd34 	bl	20472 <k_work_submit_to_queue>
		poller->is_polling = false;
   20a0a:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   20a0e:	e7b4      	b.n	2097a <signal_poll_event+0x1e>

00020a10 <clear_event_registrations>:
	while (num_events--) {
   20a10:	2314      	movs	r3, #20
{
   20a12:	b5f0      	push	{r4, r5, r6, r7, lr}
   20a14:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   20a18:	2400      	movs	r4, #0
   20a1a:	2601      	movs	r6, #1
	while (num_events--) {
   20a1c:	b901      	cbnz	r1, 20a20 <clear_event_registrations+0x10>
}
   20a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   20a20:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   20a24:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   20a28:	f003 031f 	and.w	r3, r3, #31
   20a2c:	2b08      	cmp	r3, #8
   20a2e:	f1a0 0714 	sub.w	r7, r0, #20
   20a32:	d80d      	bhi.n	20a50 <clear_event_registrations+0x40>
   20a34:	fa06 f303 	lsl.w	r3, r6, r3
   20a38:	f413 7f8b 	tst.w	r3, #278	; 0x116
   20a3c:	d008      	beq.n	20a50 <clear_event_registrations+0x40>
	return node->next != NULL;
   20a3e:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   20a42:	b12b      	cbz	r3, 20a50 <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   20a44:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   20a48:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   20a4a:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   20a4c:	e940 4405 	strd	r4, r4, [r0, #-20]
   20a50:	f382 8811 	msr	BASEPRI, r2
   20a54:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   20a58:	f04f 0340 	mov.w	r3, #64	; 0x40
   20a5c:	f3ef 8211 	mrs	r2, BASEPRI
   20a60:	f383 8811 	msr	BASEPRI, r3
   20a64:	f3bf 8f6f 	isb	sy
   20a68:	3901      	subs	r1, #1
   20a6a:	4638      	mov	r0, r7
   20a6c:	e7d6      	b.n	20a1c <clear_event_registrations+0xc>

00020a6e <k_poll_event_init>:
{
   20a6e:	b510      	push	{r4, lr}
	event->type = type;
   20a70:	04d2      	lsls	r2, r2, #19
   20a72:	0209      	lsls	r1, r1, #8
   20a74:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
   20a78:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
   20a7c:	430a      	orrs	r2, r1
   20a7e:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   20a80:	2400      	movs	r4, #0
	event->type = type;
   20a82:	430a      	orrs	r2, r1
	event->obj = obj;
   20a84:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   20a88:	6084      	str	r4, [r0, #8]
}
   20a8a:	bd10      	pop	{r4, pc}

00020a8c <z_handle_obj_poll_events>:
{
   20a8c:	4603      	mov	r3, r0
	return list->head == list;
   20a8e:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   20a90:	4283      	cmp	r3, r0
   20a92:	d008      	beq.n	20aa6 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   20a94:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   20a98:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   20a9a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   20a9c:	2300      	movs	r3, #0
	node->prev = NULL;
   20a9e:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   20aa2:	f7ff bf5b 	b.w	2095c <signal_poll_event>
}
   20aa6:	4770      	bx	lr

00020aa8 <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   20aa8:	3204      	adds	r2, #4
{
   20aaa:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   20aac:	4604      	mov	r4, r0
   20aae:	d208      	bcs.n	20ac2 <z_heap_aligned_alloc+0x1a>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   20ab0:	2600      	movs	r6, #0
   20ab2:	2700      	movs	r7, #0
   20ab4:	e9cd 6700 	strd	r6, r7, [sp]
   20ab8:	f041 0104 	orr.w	r1, r1, #4
   20abc:	f7ff fadb 	bl	20076 <k_heap_aligned_alloc>
	if (mem == NULL) {
   20ac0:	b910      	cbnz	r0, 20ac8 <z_heap_aligned_alloc+0x20>
		return NULL;
   20ac2:	2000      	movs	r0, #0
}
   20ac4:	b002      	add	sp, #8
   20ac6:	bdd0      	pop	{r4, r6, r7, pc}
	*heap_ref = heap;
   20ac8:	f840 4b04 	str.w	r4, [r0], #4
	return mem;
   20acc:	e7fa      	b.n	20ac4 <z_heap_aligned_alloc+0x1c>

00020ace <k_free>:
	if (ptr != NULL) {
   20ace:	b120      	cbz	r0, 20ada <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   20ad0:	1f01      	subs	r1, r0, #4
   20ad2:	f850 0c04 	ldr.w	r0, [r0, #-4]
   20ad6:	f7ff bb0f 	b.w	200f8 <k_heap_free>
}
   20ada:	4770      	bx	lr

00020adc <z_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   20adc:	f7f8 b8c6 	b.w	18c6c <SystemInit>
